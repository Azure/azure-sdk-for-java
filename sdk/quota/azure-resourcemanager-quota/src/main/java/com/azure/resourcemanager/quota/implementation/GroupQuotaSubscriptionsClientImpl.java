// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionsClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaSubscriptionIdInner;
import com.azure.resourcemanager.quota.models.GroupQuotaSubscriptionIdList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaSubscriptionsClient.
 */
public final class GroupQuotaSubscriptionsClientImpl implements GroupQuotaSubscriptionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaSubscriptionsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaSubscriptionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaSubscriptionsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service = RestProxy.create(GroupQuotaSubscriptionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaSubscriptions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaSubscriptionsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdInner>> get(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdList>> list(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), managementGroupId, groupQuotaName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, this.client.getContext());
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName, context);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, context);
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName) {
        return this.beginCreateOrUpdateAsync(managementGroupId, groupQuotaName).getSyncPoller();
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, Context context) {
        return this.beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, context).getSyncPoller();
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName, Context context) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName) {
        return createOrUpdateAsync(managementGroupId, groupQuotaName).block();
    }

    /**
     * Adds subscription to the GroupQuotas.
     * 
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, Context context) {
        return createOrUpdateAsync(managementGroupId, groupQuotaName, context).block();
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), managementGroupId, groupQuotaName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class,
            this.client.getContext());
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName, context);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class,
            context);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginUpdate(String managementGroupId, String groupQuotaName) {
        return this.beginUpdateAsync(managementGroupId, groupQuotaName).getSyncPoller();
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginUpdate(String managementGroupId, String groupQuotaName, Context context) {
        return this.beginUpdateAsync(managementGroupId, groupQuotaName, context).getSyncPoller();
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaSubscriptionIdInner> updateAsync(String managementGroupId, String groupQuotaName) {
        return beginUpdateAsync(managementGroupId, groupQuotaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaSubscriptionIdInner> updateAsync(String managementGroupId, String groupQuotaName,
        Context context) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner update(String managementGroupId, String groupQuotaName) {
        return updateAsync(managementGroupId, groupQuotaName).block();
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list.
     * 
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner update(String managementGroupId, String groupQuotaName, Context context) {
        return updateAsync(managementGroupId, groupQuotaName, context).block();
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String managementGroupId, String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String managementGroupId, String groupQuotaName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), managementGroupId, groupQuotaName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String managementGroupId, String groupQuotaName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(managementGroupId, groupQuotaName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String managementGroupId, String groupQuotaName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(managementGroupId, groupQuotaName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String groupQuotaName) {
        return this.beginDeleteAsync(managementGroupId, groupQuotaName).getSyncPoller();
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String groupQuotaName,
        Context context) {
        return this.beginDeleteAsync(managementGroupId, groupQuotaName, context).getSyncPoller();
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupId, String groupQuotaName) {
        return beginDeleteAsync(managementGroupId, groupQuotaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupId, String groupQuotaName, Context context) {
        return beginDeleteAsync(managementGroupId, groupQuotaName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String groupQuotaName) {
        deleteAsync(managementGroupId, groupQuotaName).block();
    }

    /**
     * Removes the subscription from GroupQuotas.
     * 
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String groupQuotaName, Context context) {
        deleteAsync(managementGroupId, groupQuotaName, context).block();
    }

    /**
     * Returns the subscriptionId along with its provisioning state for being associated with the GroupQuotas.
     * 
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaSubscriptionIdInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns the subscriptionId along with its provisioning state for being associated with the GroupQuotas.
     * 
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaSubscriptionIdInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Returns the subscriptionId along with its provisioning state for being associated with the GroupQuotas.
     * 
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaSubscriptionIdInner> getAsync(String managementGroupId, String groupQuotaName) {
        return getWithResponseAsync(managementGroupId, groupQuotaName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the subscriptionId along with its provisioning state for being associated with the GroupQuotas.
     * 
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotaSubscriptionIdInner> getWithResponse(String managementGroupId, String groupQuotaName,
        Context context) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, context).block();
    }

    /**
     * Returns the subscriptionId along with its provisioning state for being associated with the GroupQuotas.
     * 
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner get(String managementGroupId, String groupQuotaName) {
        return getWithResponse(managementGroupId, groupQuotaName, Context.NONE).getValue();
    }

    /**
     * Returns a list of the subscriptionIds for the GroupQuotas.
     * 
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                this.client.getApiVersion(), accept, context))
            .<PagedResponse<GroupQuotaSubscriptionIdInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a list of the subscriptionIds for the GroupQuotas.
     * 
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), managementGroupId, groupQuotaName, this.client.getApiVersion(), accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Returns a list of the subscriptionIds for the GroupQuotas.
     * 
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaSubscriptionIdInner> listAsync(String managementGroupId, String groupQuotaName) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Returns a list of the subscriptionIds for the GroupQuotas.
     * 
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaSubscriptionIdInner> listAsync(String managementGroupId, String groupQuotaName,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Returns a list of the subscriptionIds for the GroupQuotas.
     * 
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaSubscriptionIdInner> list(String managementGroupId, String groupQuotaName) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName));
    }

    /**
     * Returns a list of the subscriptionIds for the GroupQuotas.
     * 
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaSubscriptionIdInner> list(String managementGroupId, String groupQuotaName,
        Context context) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GroupQuotaSubscriptionIdInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
