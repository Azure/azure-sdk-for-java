// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.quota.fluent.QuotaRequestStatusClient;
import com.azure.resourcemanager.quota.fluent.models.QuotaRequestDetailsInner;
import com.azure.resourcemanager.quota.implementation.models.QuotaRequestDetailsList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in QuotaRequestStatusClient.
 */
public final class QuotaRequestStatusClientImpl implements QuotaRequestStatusClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final QuotaRequestStatusService service;

    /**
     * The service client containing this operation class.
     */
    private final QuotaManagementClientImpl client;

    /**
     * Initializes an instance of QuotaRequestStatusClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    QuotaRequestStatusClientImpl(QuotaManagementClientImpl client) {
        this.service = RestProxy.create(QuotaRequestStatusService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuotaManagementClientQuotaRequestStatus to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "QuotaManagementClientQuotaRequestStatus")
    public interface QuotaRequestStatusService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Quota/quotaRequests/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<QuotaRequestDetailsInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("id") String id, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Quota/quotaRequests/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<QuotaRequestDetailsInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("id") String id, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Quota/quotaRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<QuotaRequestDetailsList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("$filter") String filter, @QueryParam("$top") Integer top,
            @QueryParam("$skiptoken") String skiptoken, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Quota/quotaRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<QuotaRequestDetailsList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("$filter") String filter, @QueryParam("$top") Integer top,
            @QueryParam("$skiptoken") String skiptoken, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<QuotaRequestDetailsList>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<QuotaRequestDetailsList> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location. The quota request ID **id** is returned in the response of the PUT operation.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param id Quota request ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<QuotaRequestDetailsInner>> getWithResponseAsync(String scope, String id) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), scope, id, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location. The quota request ID **id** is returned in the response of the PUT operation.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param id Quota request ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<QuotaRequestDetailsInner> getAsync(String scope, String id) {
        return getWithResponseAsync(scope, id).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location. The quota request ID **id** is returned in the response of the PUT operation.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param id Quota request ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QuotaRequestDetailsInner> getWithResponse(String scope, String id, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (id == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, id, accept, context);
    }

    /**
     * Get the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location. The quota request ID **id** is returned in the response of the PUT operation.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param id Quota request ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota request details and status by quota request ID for the resources of the resource provider at a
     * specific location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QuotaRequestDetailsInner get(String scope, String id) {
        return getWithResponse(scope, id, Context.NONE).getValue();
    }

    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the
     * **oData** filter to select quota requests.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |requestSubmitTime | ge, le, eq, gt, lt
     * |provisioningState eq {QuotaRequestState}
     * |resourceName eq {resourceName}.
     * @param top Number of records to return.
     * @param skiptoken The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a
     * previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a
     * starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<QuotaRequestDetailsInner>> listSinglePageAsync(String scope, String filter, Integer top,
        String skiptoken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), scope, filter,
                top, skiptoken, accept, context))
            .<PagedResponse<QuotaRequestDetailsInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the
     * **oData** filter to select quota requests.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |requestSubmitTime | ge, le, eq, gt, lt
     * |provisioningState eq {QuotaRequestState}
     * |resourceName eq {resourceName}.
     * @param top Number of records to return.
     * @param skiptoken The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a
     * previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a
     * starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<QuotaRequestDetailsInner> listAsync(String scope, String filter, Integer top, String skiptoken) {
        return new PagedFlux<>(() -> listSinglePageAsync(scope, filter, top, skiptoken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the
     * **oData** filter to select quota requests.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<QuotaRequestDetailsInner> listAsync(String scope) {
        final String filter = null;
        final Integer top = null;
        final String skiptoken = null;
        return new PagedFlux<>(() -> listSinglePageAsync(scope, filter, top, skiptoken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the
     * **oData** filter to select quota requests.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |requestSubmitTime | ge, le, eq, gt, lt
     * |provisioningState eq {QuotaRequestState}
     * |resourceName eq {resourceName}.
     * @param top Number of records to return.
     * @param skiptoken The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a
     * previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a
     * starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaRequestDetailsInner> listSinglePage(String scope, String filter, Integer top,
        String skiptoken) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<QuotaRequestDetailsList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            scope, filter, top, skiptoken, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the
     * **oData** filter to select quota requests.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |requestSubmitTime | ge, le, eq, gt, lt
     * |provisioningState eq {QuotaRequestState}
     * |resourceName eq {resourceName}.
     * @param top Number of records to return.
     * @param skiptoken The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a
     * previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a
     * starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaRequestDetailsInner> listSinglePage(String scope, String filter, Integer top,
        String skiptoken, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<QuotaRequestDetailsList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            scope, filter, top, skiptoken, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the
     * **oData** filter to select quota requests.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<QuotaRequestDetailsInner> list(String scope) {
        final String filter = null;
        final Integer top = null;
        final String skiptoken = null;
        return new PagedIterable<>(() -> listSinglePage(scope, filter, top, skiptoken),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the
     * **oData** filter to select quota requests.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * |requestSubmitTime | ge, le, eq, gt, lt
     * |provisioningState eq {QuotaRequestState}
     * |resourceName eq {resourceName}.
     * @param top Number of records to return.
     * @param skiptoken The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a
     * previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a
     * starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<QuotaRequestDetailsInner> list(String scope, String filter, Integer top, String skiptoken,
        Context context) {
        return new PagedIterable<>(() -> listSinglePage(scope, filter, top, skiptoken, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<QuotaRequestDetailsInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<QuotaRequestDetailsInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaRequestDetailsInner> listNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<QuotaRequestDetailsList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota request information along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaRequestDetailsInner> listNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<QuotaRequestDetailsList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(QuotaRequestStatusClientImpl.class);
}
