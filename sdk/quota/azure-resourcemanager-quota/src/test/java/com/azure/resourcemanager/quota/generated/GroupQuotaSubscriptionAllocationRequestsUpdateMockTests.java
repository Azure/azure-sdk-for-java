// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.quota.QuotaManager;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsListInner;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocations;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocationsList;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocationsListProperties;
import com.azure.resourcemanager.quota.models.SubscriptionQuotaAllocationsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GroupQuotaSubscriptionAllocationRequestsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"value\":[{\"properties\":{\"resourceName\":\"xyjrxsagafcnih\",\"limit\":3130876298104392093,\"shareableQuota\":7972426552267245030,\"name\":{}}},{\"properties\":{\"resourceName\":\"bcvkcvqvpkeq\",\"limit\":7022646379651256978,\"shareableQuota\":5404644626428061791,\"name\":{}}},{\"properties\":{\"resourceName\":\"sotbob\",\"limit\":288160158988796372,\"shareableQuota\":510217030550797810,\"name\":{}}},{\"properties\":{\"resourceName\":\"dldwmgxc\",\"limit\":521643942642292025,\"shareableQuota\":7930800985951614116,\"name\":{}}}],\"nextLink\":\"uoegrpkhjwniyqs\"},\"id\":\"i\",\"name\":\"pdggkzzlvm\",\"type\":\"mpaxmodfvuefywsb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        QuotaManager manager = QuotaManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SubscriptionQuotaAllocationsList response = manager.groupQuotaSubscriptionAllocationRequests()
            .update("cjefuzmu", "pbttdum", "rp", "xe", new SubscriptionQuotaAllocationsListInner()
                .withProperties(new SubscriptionQuotaAllocationsListProperties().withValue(Arrays.asList(
                    new SubscriptionQuotaAllocations()
                        .withProperties(new SubscriptionQuotaAllocationsProperties().withResourceName("jpglkfgohdne")
                            .withLimit(7022736295865930419L)),
                    new SubscriptionQuotaAllocations()
                        .withProperties(new SubscriptionQuotaAllocationsProperties().withResourceName("t")
                            .withLimit(960595332999400866L)),
                    new SubscriptionQuotaAllocations()
                        .withProperties(new SubscriptionQuotaAllocationsProperties().withResourceName("uuvxz")
                            .withLimit(6214959618688242083L)),
                    new SubscriptionQuotaAllocations()
                        .withProperties(new SubscriptionQuotaAllocationsProperties().withResourceName("o")
                            .withLimit(2084595584241101757L))))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("xyjrxsagafcnih", response.properties().value().get(0).properties().resourceName());
        Assertions.assertEquals(3130876298104392093L, response.properties().value().get(0).properties().limit());
    }
}
