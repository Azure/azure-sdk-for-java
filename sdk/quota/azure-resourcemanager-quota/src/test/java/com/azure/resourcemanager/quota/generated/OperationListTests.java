// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quota.fluent.models.OperationResponseInner;
import com.azure.resourcemanager.quota.models.OperationDisplay;
import com.azure.resourcemanager.quota.models.OperationList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationList model = BinaryData.fromString(
            "{\"value\":[{\"name\":\"asy\",\"display\":{\"provider\":\"ddhsgcbacphe\",\"resource\":\"ot\",\"operation\":\"qgoulznd\",\"description\":\"kwy\"},\"origin\":\"gfgibm\"},{\"name\":\"gakeqsr\",\"display\":{\"provider\":\"zqqedq\",\"resource\":\"bciqfouflm\",\"operation\":\"kzsmodm\",\"description\":\"ougpbkwt\"},\"origin\":\"tduqktapspwgcuer\"}],\"nextLink\":\"mkdo\"}")
            .toObject(OperationList.class);
        Assertions.assertEquals("asy", model.value().get(0).name());
        Assertions.assertEquals("ddhsgcbacphe", model.value().get(0).display().provider());
        Assertions.assertEquals("ot", model.value().get(0).display().resource());
        Assertions.assertEquals("qgoulznd", model.value().get(0).display().operation());
        Assertions.assertEquals("kwy", model.value().get(0).display().description());
        Assertions.assertEquals("gfgibm", model.value().get(0).origin());
        Assertions.assertEquals("mkdo", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationList model = new OperationList()
            .withValue(Arrays.asList(
                new OperationResponseInner().withName("asy")
                    .withDisplay(new OperationDisplay().withProvider("ddhsgcbacphe").withResource("ot")
                        .withOperation("qgoulznd").withDescription("kwy"))
                    .withOrigin("gfgibm"),
                new OperationResponseInner().withName("gakeqsr")
                    .withDisplay(new OperationDisplay().withProvider("zqqedq").withResource("bciqfouflm")
                        .withOperation("kzsmodm").withDescription("ougpbkwt"))
                    .withOrigin("tduqktapspwgcuer")))
            .withNextLink("mkdo");
        model = BinaryData.fromObject(model).toObject(OperationList.class);
        Assertions.assertEquals("asy", model.value().get(0).name());
        Assertions.assertEquals("ddhsgcbacphe", model.value().get(0).display().provider());
        Assertions.assertEquals("ot", model.value().get(0).display().resource());
        Assertions.assertEquals("qgoulznd", model.value().get(0).display().operation());
        Assertions.assertEquals("kwy", model.value().get(0).display().description());
        Assertions.assertEquals("gfgibm", model.value().get(0).origin());
        Assertions.assertEquals("mkdo", model.nextLink());
    }
}
