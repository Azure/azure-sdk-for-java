// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.quota.QuotaManager;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaLimitListInner;
import com.azure.resourcemanager.quota.models.GroupQuotaLimit;
import com.azure.resourcemanager.quota.models.GroupQuotaLimitList;
import com.azure.resourcemanager.quota.models.GroupQuotaLimitListProperties;
import com.azure.resourcemanager.quota.models.GroupQuotaLimitProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GroupQuotaLimitsRequestsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"value\":[{\"properties\":{\"resourceName\":\"n\",\"limit\":6645046241079336375,\"comment\":\"krtswbxqz\",\"unit\":\"zjf\",\"name\":{},\"availableLimit\":147411949012367890,\"allocatedToSubscriptions\":{}}},{\"properties\":{\"resourceName\":\"ivetvtcq\",\"limit\":3137986994872936614,\"comment\":\"qmcbxvwvxyslqbhs\",\"unit\":\"obl\",\"name\":{},\"availableLimit\":8821646723184751795,\"allocatedToSubscriptions\":{}}},{\"properties\":{\"resourceName\":\"wwwfbkr\",\"limit\":3908578506994645119,\"comment\":\"shqjohxcrsbf\",\"unit\":\"asrru\",\"name\":{},\"availableLimit\":9213990294223427282,\"allocatedToSubscriptions\":{}}}],\"nextLink\":\"sub\"},\"id\":\"jbi\",\"name\":\"xb\",\"type\":\"ybsrfbjfdtwss\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        QuotaManager manager = QuotaManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        GroupQuotaLimitList response = manager.groupQuotaLimitsRequests()
            .update("tfolhbnx", "nalaulppg", "dtpnapnyiropuhp", "gvpgy", new GroupQuotaLimitListInner()
                .withProperties(new GroupQuotaLimitListProperties().withValue(Arrays.asList(
                    new GroupQuotaLimit().withProperties(new GroupQuotaLimitProperties().withResourceName("edjvcslynqw")
                        .withLimit(1214544725492398973L)
                        .withComment("zhxgktrmgucn")),
                    new GroupQuotaLimit().withProperties(new GroupQuotaLimitProperties().withResourceName("ygpfqb")
                        .withLimit(7440392727703500605L)
                        .withComment("pzfqrhhuaoppp"))))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("n", response.properties().value().get(0).properties().resourceName());
        Assertions.assertEquals(6645046241079336375L, response.properties().value().get(0).properties().limit());
        Assertions.assertEquals("krtswbxqz", response.properties().value().get(0).properties().comment());
    }
}
