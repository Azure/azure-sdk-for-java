// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.learn.computation.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.learn.computation.implementation.models.ComputeNode;
import com.azure.learn.computation.implementation.models.ErrorException;
import com.azure.learn.computation.implementation.models.PageOfComputeNodes;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ComputeNodeAdministrations. */
public final class ComputeNodeAdministrationsImpl {
    /** The proxy service used to perform REST calls. */
    private final ComputeNodeAdministrationsService service;

    /** The service client containing this operation class. */
    private final ExampleComputationServiceForAzureSDKAPIDesignTrainingUnitImpl client;

    /**
     * Initializes an instance of ComputeNodeAdministrationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ComputeNodeAdministrationsImpl(ExampleComputationServiceForAzureSDKAPIDesignTrainingUnitImpl client) {
        this.service =
                RestProxy.create(
                        ComputeNodeAdministrationsService.class,
                        client.getHttpPipeline(),
                        client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * ExampleComputationServiceForAzureSDKAPIDesignTrainingUnitComputeNodeAdministrations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ExampleComputationSe")
    private interface ComputeNodeAdministrationsService {
        @Get("/ComputeNodes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<PageOfComputeNodes>> list(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-request-id") String xMsClientRequestId,
                Context context);

        @Put("/ComputeNodes/{nodeName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ComputeNode>> create(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-request-id") String xMsClientRequestId,
                @PathParam("nodeName") String nodeName,
                @HeaderParam("if-match") String ifMatch,
                @BodyParam("application/json") ComputeNode computeNode,
                Context context);

        @Get("/ComputeNodes/{nodeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ComputeNode>> get(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-request-id") String xMsClientRequestId,
                @PathParam("nodeName") String nodeName,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<PageOfComputeNodes>> listNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-request-id") String xMsClientRequestId,
                Context context);
    }

    /**
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ComputeNode>> listSinglePageAsync(Context context) {
        return service.list(this.client.getHost(), this.client.getXMsClientRequestId(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * @param ifMatch The ifMatch parameter.
     * @param computeNode The computeNode parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ComputeNode>> createWithResponseAsync(
            String ifMatch, ComputeNode computeNode, Context context) {
        return service.create(
                this.client.getHost(),
                this.client.getXMsClientRequestId(),
                this.client.getNodeName(),
                ifMatch,
                computeNode,
                context);
    }

    /**
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ComputeNode>> getWithResponseAsync(Context context) {
        return service.get(
                this.client.getHost(), this.client.getXMsClientRequestId(), this.client.getNodeName(), context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ComputeNode>> listNextSinglePageAsync(String nextLink, Context context) {
        return service.listNext(nextLink, this.client.getHost(), this.client.getXMsClientRequestId(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
