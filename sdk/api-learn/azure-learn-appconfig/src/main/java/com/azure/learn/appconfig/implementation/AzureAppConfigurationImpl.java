// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.learn.appconfig.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.learn.appconfig.implementation.models.CheckKeyValueResponse;
import com.azure.learn.appconfig.implementation.models.CheckKeyValuesResponse;
import com.azure.learn.appconfig.implementation.models.CheckKeysResponse;
import com.azure.learn.appconfig.implementation.models.CheckLabelsResponse;
import com.azure.learn.appconfig.implementation.models.CheckRevisionsResponse;
import com.azure.learn.appconfig.implementation.models.DeleteKeyValueResponse;
import com.azure.learn.appconfig.implementation.models.DeleteLockResponse;
import com.azure.learn.appconfig.implementation.models.Enum4;
import com.azure.learn.appconfig.implementation.models.Enum5;
import com.azure.learn.appconfig.implementation.models.ErrorException;
import com.azure.learn.appconfig.implementation.models.Get6ItemsItem;
import com.azure.learn.appconfig.implementation.models.Get7ItemsItem;
import com.azure.learn.appconfig.implementation.models.GetKeyValueResponse;
import com.azure.learn.appconfig.implementation.models.GetKeyValuesNextResponse;
import com.azure.learn.appconfig.implementation.models.GetKeyValuesResponse;
import com.azure.learn.appconfig.implementation.models.GetKeysNextResponse;
import com.azure.learn.appconfig.implementation.models.GetKeysResponse;
import com.azure.learn.appconfig.implementation.models.GetLabelsNextResponse;
import com.azure.learn.appconfig.implementation.models.GetLabelsResponse;
import com.azure.learn.appconfig.implementation.models.GetRevisionsNextResponse;
import com.azure.learn.appconfig.implementation.models.GetRevisionsResponse;
import com.azure.learn.appconfig.implementation.models.Head6ItemsItem;
import com.azure.learn.appconfig.implementation.models.Head7ItemsItem;
import com.azure.learn.appconfig.implementation.models.Key;
import com.azure.learn.appconfig.implementation.models.Label;
import com.azure.learn.appconfig.implementation.models.PutKeyValueResponse;
import com.azure.learn.appconfig.implementation.models.PutLockResponse;
import com.azure.learn.appconfig.models.ConfigurationSetting;
import java.util.List;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the AzureAppConfiguration type. */
public final class AzureAppConfigurationImpl {
    /** The proxy service used to perform REST calls. */
    private final AzureAppConfigurationService service;

    /** Used to guarantee real-time consistency between requests. */
    private final String syncToken;

    /**
     * Gets Used to guarantee real-time consistency between requests.
     *
     * @return the syncToken value.
     */
    public String getSyncToken() {
        return this.syncToken;
    }

    /** The endpoint of the App Configuration instance to send requests to. */
    private final String endpoint;

    /**
     * Gets The endpoint of the App Configuration instance to send requests to.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of AzureAppConfiguration client.
     *
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param endpoint The endpoint of the App Configuration instance to send requests to.
     */
    AzureAppConfigurationImpl(String syncToken, String endpoint) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                syncToken,
                endpoint);
    }

    /**
     * Initializes an instance of AzureAppConfiguration client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param endpoint The endpoint of the App Configuration instance to send requests to.
     */
    AzureAppConfigurationImpl(HttpPipeline httpPipeline, String syncToken, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), syncToken, endpoint);
    }

    /**
     * Initializes an instance of AzureAppConfiguration client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param endpoint The endpoint of the App Configuration instance to send requests to.
     */
    AzureAppConfigurationImpl(
            HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String syncToken, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.syncToken = syncToken;
        this.endpoint = endpoint;
        this.apiVersion = "1.0";
        this.service =
                RestProxy.create(AzureAppConfigurationService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for AzureAppConfiguration to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureAppConfiguratio")
    private interface AzureAppConfigurationService {
        @Get("/keys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetKeysResponse> getKeys(
                @HostParam("endpoint") String endpoint,
                @QueryParam("name") String name,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                Context context);

        @Head("/keys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<CheckKeysResponse> checkKeys(
                @HostParam("endpoint") String endpoint,
                @QueryParam("name") String name,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                Context context);

        @Get("/kv")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetKeyValuesResponse> getKeyValues(
                @HostParam("endpoint") String endpoint,
                @QueryParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @QueryParam("$Select") String select,
                Context context);

        @Head("/kv")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<CheckKeyValuesResponse> checkKeyValues(
                @HostParam("endpoint") String endpoint,
                @QueryParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @QueryParam("$Select") String select,
                Context context);

        @Get("/kv/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetKeyValueResponse> getKeyValue(
                @HostParam("endpoint") String endpoint,
                @PathParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @HeaderParam("If-Match") String ifMatch,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                @QueryParam("$Select") String select,
                Context context);

        @Put("/kv/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<PutKeyValueResponse> putKeyValue(
                @HostParam("endpoint") String endpoint,
                @PathParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("If-Match") String ifMatch,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                @BodyParam("application/json") ConfigurationSetting entity,
                Context context);

        @Delete("/kv/{key}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<DeleteKeyValueResponse> deleteKeyValue(
                @HostParam("endpoint") String endpoint,
                @PathParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("If-Match") String ifMatch,
                Context context);

        @Head("/kv/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<CheckKeyValueResponse> checkKeyValue(
                @HostParam("endpoint") String endpoint,
                @PathParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @HeaderParam("If-Match") String ifMatch,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                @QueryParam("$Select") String select,
                Context context);

        @Get("/labels")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetLabelsResponse> getLabels(
                @HostParam("endpoint") String endpoint,
                @QueryParam("name") String name,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @QueryParam("$Select") String select,
                Context context);

        @Head("/labels")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<CheckLabelsResponse> checkLabels(
                @HostParam("endpoint") String endpoint,
                @QueryParam("name") String name,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @QueryParam("$Select") String select,
                Context context);

        @Put("/locks/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<PutLockResponse> putLock(
                @HostParam("endpoint") String endpoint,
                @PathParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("If-Match") String ifMatch,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                Context context);

        @Delete("/locks/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<DeleteLockResponse> deleteLock(
                @HostParam("endpoint") String endpoint,
                @PathParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("If-Match") String ifMatch,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                Context context);

        @Get("/revisions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetRevisionsResponse> getRevisions(
                @HostParam("endpoint") String endpoint,
                @QueryParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @QueryParam("$Select") String select,
                Context context);

        @Head("/revisions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<CheckRevisionsResponse> checkRevisions(
                @HostParam("endpoint") String endpoint,
                @QueryParam("key") String key,
                @QueryParam("label") String label,
                @HeaderParam("Sync-Token") String syncToken,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("After") String after,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                @QueryParam("$Select") String select,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetKeysNextResponse> getKeysNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Sync-Token") String syncToken,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetKeyValuesNextResponse> getKeyValuesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Sync-Token") String syncToken,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetLabelsNextResponse> getLabelsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Sync-Token") String syncToken,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<GetRevisionsNextResponse> getRevisionsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Sync-Token") String syncToken,
                @HeaderParam("Accept-Datetime") String acceptDatetime,
                Context context);
    }

    /**
     * Gets a list of keys.
     *
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Key>> getKeysSinglePageAsync(
            String name, String after, String acceptDatetime, Context context) {
        return service.getKeys(
                        this.getEndpoint(),
                        name,
                        this.getSyncToken(),
                        this.getApiVersion(),
                        after,
                        acceptDatetime,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckKeysResponse> checkKeysWithResponseAsync(
            String name, String after, String acceptDatetime, Context context) {
        return service.checkKeys(
                this.getEndpoint(), name, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime, context);
    }

    /**
     * Gets a list of key-values.
     *
     * @param key A filter used to match keys.
     * @param label A filter used to match labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Array of Get6ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> getKeyValuesSinglePageAsync(
            String key,
            String label,
            String after,
            String acceptDatetime,
            List<Get6ItemsItem> select,
            Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.getKeyValues(
                        this.getEndpoint(),
                        key,
                        label,
                        this.getSyncToken(),
                        this.getApiVersion(),
                        after,
                        acceptDatetime,
                        selectConverted,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys.
     * @param label A filter used to match labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Array of Head6ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckKeyValuesResponse> checkKeyValuesWithResponseAsync(
            String key,
            String label,
            String after,
            String acceptDatetime,
            List<Head6ItemsItem> select,
            Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.checkKeyValues(
                this.getEndpoint(),
                key,
                label,
                this.getSyncToken(),
                this.getApiVersion(),
                after,
                acceptDatetime,
                selectConverted,
                context);
    }

    /**
     * Gets a single key-value.
     *
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *     provided.
     * @param select Array of Get7ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetKeyValueResponse> getKeyValueWithResponseAsync(
            String key,
            String label,
            String acceptDatetime,
            String ifMatch,
            String ifNoneMatch,
            List<Get7ItemsItem> select,
            Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.getKeyValue(
                this.getEndpoint(),
                key,
                label,
                this.getSyncToken(),
                this.getApiVersion(),
                acceptDatetime,
                ifMatch,
                ifNoneMatch,
                selectConverted,
                context);
    }

    /**
     * Creates a key-value.
     *
     * @param key The key of the key-value to create.
     * @param label The label of the key-value to create.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *     provided.
     * @param entity The key-value to create.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PutKeyValueResponse> putKeyValueWithResponseAsync(
            String key,
            String label,
            String ifMatch,
            String ifNoneMatch,
            ConfigurationSetting entity,
            Context context) {
        return service.putKeyValue(
                this.getEndpoint(),
                key,
                label,
                this.getSyncToken(),
                this.getApiVersion(),
                ifMatch,
                ifNoneMatch,
                entity,
                context);
    }

    /**
     * Deletes a key-value.
     *
     * @param key The key of the key-value to delete.
     * @param label The label of the key-value to delete.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteKeyValueResponse> deleteKeyValueWithResponseAsync(
            String key, String label, String ifMatch, Context context) {
        return service.deleteKeyValue(
                this.getEndpoint(), key, label, this.getSyncToken(), this.getApiVersion(), ifMatch, context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *     provided.
     * @param select Array of Head7ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckKeyValueResponse> checkKeyValueWithResponseAsync(
            String key,
            String label,
            String acceptDatetime,
            String ifMatch,
            String ifNoneMatch,
            List<Head7ItemsItem> select,
            Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.checkKeyValue(
                this.getEndpoint(),
                key,
                label,
                this.getSyncToken(),
                this.getApiVersion(),
                acceptDatetime,
                ifMatch,
                ifNoneMatch,
                selectConverted,
                context);
    }

    /**
     * Gets a list of labels.
     *
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Array of Get5ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Label>> getLabelsSinglePageAsync(
            String name, String after, String acceptDatetime, List<String> select, Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.getLabels(
                        this.getEndpoint(),
                        name,
                        this.getSyncToken(),
                        this.getApiVersion(),
                        after,
                        acceptDatetime,
                        selectConverted,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Array of Head5ItemsItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckLabelsResponse> checkLabelsWithResponseAsync(
            String name, String after, String acceptDatetime, List<String> select, Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.checkLabels(
                this.getEndpoint(),
                name,
                this.getSyncToken(),
                this.getApiVersion(),
                after,
                acceptDatetime,
                selectConverted,
                context);
    }

    /**
     * Locks a key-value.
     *
     * @param key The key of the key-value to lock.
     * @param label The label, if any, of the key-value to lock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *     provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PutLockResponse> putLockWithResponseAsync(
            String key, String label, String ifMatch, String ifNoneMatch, Context context) {
        return service.putLock(
                this.getEndpoint(),
                key,
                label,
                this.getSyncToken(),
                this.getApiVersion(),
                ifMatch,
                ifNoneMatch,
                context);
    }

    /**
     * Unlocks a key-value.
     *
     * @param key The key of the key-value to unlock.
     * @param label The label, if any, of the key-value to unlock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *     provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteLockResponse> deleteLockWithResponseAsync(
            String key, String label, String ifMatch, String ifNoneMatch, Context context) {
        return service.deleteLock(
                this.getEndpoint(),
                key,
                label,
                this.getSyncToken(),
                this.getApiVersion(),
                ifMatch,
                ifNoneMatch,
                context);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param key A filter used to match keys.
     * @param label A filter used to match labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Array of Enum4.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> getRevisionsSinglePageAsync(
            String key, String label, String after, String acceptDatetime, List<Enum4> select, Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.getRevisions(
                        this.getEndpoint(),
                        key,
                        label,
                        this.getSyncToken(),
                        this.getApiVersion(),
                        after,
                        acceptDatetime,
                        selectConverted,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys.
     * @param label A filter used to match labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *     token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Array of Enum5.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckRevisionsResponse> checkRevisionsWithResponseAsync(
            String key, String label, String after, String acceptDatetime, List<Enum5> select, Context context) {
        String selectConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.checkRevisions(
                this.getEndpoint(),
                key,
                label,
                this.getSyncToken(),
                this.getApiVersion(),
                after,
                acceptDatetime,
                selectConverted,
                context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Key>> getKeysNextSinglePageAsync(
            String nextLink, String acceptDatetime, Context context) {
        return service.getKeysNext(nextLink, this.getEndpoint(), this.getSyncToken(), acceptDatetime, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> getKeyValuesNextSinglePageAsync(
            String nextLink, String acceptDatetime, Context context) {
        return service.getKeyValuesNext(nextLink, this.getEndpoint(), this.getSyncToken(), acceptDatetime, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Label>> getLabelsNextSinglePageAsync(
            String nextLink, String acceptDatetime, Context context) {
        return service.getLabelsNext(nextLink, this.getEndpoint(), this.getSyncToken(), acceptDatetime, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> getRevisionsNextSinglePageAsync(
            String nextLink, String acceptDatetime, Context context) {
        return service.getRevisionsNext(nextLink, this.getEndpoint(), this.getSyncToken(), acceptDatetime, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getItems(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }
}
