// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.advisor.fluent.models.RecommendationProperties;
import com.azure.resourcemanager.advisor.models.Category;
import com.azure.resourcemanager.advisor.models.Impact;
import com.azure.resourcemanager.advisor.models.ResourceMetadata;
import com.azure.resourcemanager.advisor.models.ShortDescription;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class RecommendationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecommendationProperties model = BinaryData.fromString(
            "{\"category\":\"Performance\",\"impact\":\"High\",\"impactedField\":\"hqyudxorrqnbpoc\",\"impactedValue\":\"yifqrvkdvjsllrmv\",\"lastUpdated\":\"2021-05-03T22:43:17Z\",\"metadata\":{\"pnpulexxbczwtru\":\"datat\",\"vsovmyokac\":\"dataiqzbq\"},\"recommendationTypeId\":\"kwlhzdo\",\"shortDescription\":{\"problem\":\"jmflbvvnch\",\"solution\":\"cciw\"},\"suppressionIds\":[\"714dacd0-9228-4963-ae4d-e6ffc0c99a6b\"],\"extendedProperties\":{\"jiwkuofoskghsau\":\"khrs\"},\"resourceMetadata\":{\"resourceId\":\"jmvxie\",\"source\":\"ugidyjrr\",\"action\":{\"e\":\"dataaos\"},\"singular\":\"sonpclhocohs\",\"plural\":\"ev\"},\"description\":\"ggzfbu\",\"label\":\"mvfaxkffeiith\",\"learnMoreLink\":\"m\",\"potentialBenefits\":\"yvshxmz\",\"actions\":[{\"xxjnspydptk\":\"dataoggigrxwburv\",\"iukbldngkpoci\":\"dataenkouknvudw\",\"npiucgygevqznty\":\"dataazyxoegukg\",\"dpydn\":\"datamrbpizcdrqj\"},{\"cwif\":\"datahxdeoejz\",\"ishc\":\"datajttgzf\",\"eyeam\":\"datakhaj\",\"agalpbuxwgipwhon\":\"datap\"},{\"kix\":\"datakgshwa\",\"eputtmrywnuzoqf\":\"databin\"}],\"remediation\":{\"sicohoqqnwvlry\":\"dataqzrnkcqvyxlwhz\",\"konocu\":\"datavwhheunmmqhgyx\",\"zf\":\"dataoklyaxuconuq\",\"vjektcxsenh\":\"databeypewrmjmw\"},\"exposedMetadataProperties\":{\"frzpwvlqdqgb\":\"datas\",\"fcivfsnkym\":\"dataqylihkaetckt\",\"jf\":\"datactq\",\"fuwutttxf\":\"dataebrjcxe\"}}")
            .toObject(RecommendationProperties.class);
        Assertions.assertEquals(Category.PERFORMANCE, model.category());
        Assertions.assertEquals(Impact.HIGH, model.impact());
        Assertions.assertEquals("hqyudxorrqnbpoc", model.impactedField());
        Assertions.assertEquals("yifqrvkdvjsllrmv", model.impactedValue());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T22:43:17Z"), model.lastUpdated());
        Assertions.assertEquals("kwlhzdo", model.recommendationTypeId());
        Assertions.assertEquals("jmflbvvnch", model.shortDescription().problem());
        Assertions.assertEquals("cciw", model.shortDescription().solution());
        Assertions.assertEquals(UUID.fromString("714dacd0-9228-4963-ae4d-e6ffc0c99a6b"), model.suppressionIds().get(0));
        Assertions.assertEquals("khrs", model.extendedProperties().get("jiwkuofoskghsau"));
        Assertions.assertEquals("jmvxie", model.resourceMetadata().resourceId());
        Assertions.assertEquals("ugidyjrr", model.resourceMetadata().source());
        Assertions.assertEquals("sonpclhocohs", model.resourceMetadata().singular());
        Assertions.assertEquals("ev", model.resourceMetadata().plural());
        Assertions.assertEquals("ggzfbu", model.description());
        Assertions.assertEquals("mvfaxkffeiith", model.label());
        Assertions.assertEquals("m", model.learnMoreLink());
        Assertions.assertEquals("yvshxmz", model.potentialBenefits());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecommendationProperties model = new RecommendationProperties().withCategory(Category.PERFORMANCE)
            .withImpact(Impact.HIGH)
            .withImpactedField("hqyudxorrqnbpoc")
            .withImpactedValue("yifqrvkdvjsllrmv")
            .withLastUpdated(OffsetDateTime.parse("2021-05-03T22:43:17Z"))
            .withMetadata(mapOf("pnpulexxbczwtru", "datat", "vsovmyokac", "dataiqzbq"))
            .withRecommendationTypeId("kwlhzdo")
            .withShortDescription(new ShortDescription().withProblem("jmflbvvnch").withSolution("cciw"))
            .withSuppressionIds(Arrays.asList(UUID.fromString("714dacd0-9228-4963-ae4d-e6ffc0c99a6b")))
            .withExtendedProperties(mapOf("jiwkuofoskghsau", "khrs"))
            .withResourceMetadata(new ResourceMetadata().withResourceId("jmvxie")
                .withSource("ugidyjrr")
                .withAction(mapOf("e", "dataaos"))
                .withSingular("sonpclhocohs")
                .withPlural("ev"))
            .withDescription("ggzfbu")
            .withLabel("mvfaxkffeiith")
            .withLearnMoreLink("m")
            .withPotentialBenefits("yvshxmz")
            .withActions(Arrays.asList(
                mapOf("xxjnspydptk", "dataoggigrxwburv", "iukbldngkpoci", "dataenkouknvudw", "npiucgygevqznty",
                    "dataazyxoegukg", "dpydn", "datamrbpizcdrqj"),
                mapOf("cwif", "datahxdeoejz", "ishc", "datajttgzf", "eyeam", "datakhaj", "agalpbuxwgipwhon", "datap"),
                mapOf("kix", "datakgshwa", "eputtmrywnuzoqf", "databin")))
            .withRemediation(mapOf("sicohoqqnwvlry", "dataqzrnkcqvyxlwhz", "konocu", "datavwhheunmmqhgyx", "zf",
                "dataoklyaxuconuq", "vjektcxsenh", "databeypewrmjmw"))
            .withExposedMetadataProperties(mapOf("frzpwvlqdqgb", "datas", "fcivfsnkym", "dataqylihkaetckt", "jf",
                "datactq", "fuwutttxf", "dataebrjcxe"));
        model = BinaryData.fromObject(model).toObject(RecommendationProperties.class);
        Assertions.assertEquals(Category.PERFORMANCE, model.category());
        Assertions.assertEquals(Impact.HIGH, model.impact());
        Assertions.assertEquals("hqyudxorrqnbpoc", model.impactedField());
        Assertions.assertEquals("yifqrvkdvjsllrmv", model.impactedValue());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T22:43:17Z"), model.lastUpdated());
        Assertions.assertEquals("kwlhzdo", model.recommendationTypeId());
        Assertions.assertEquals("jmflbvvnch", model.shortDescription().problem());
        Assertions.assertEquals("cciw", model.shortDescription().solution());
        Assertions.assertEquals(UUID.fromString("714dacd0-9228-4963-ae4d-e6ffc0c99a6b"), model.suppressionIds().get(0));
        Assertions.assertEquals("khrs", model.extendedProperties().get("jiwkuofoskghsau"));
        Assertions.assertEquals("jmvxie", model.resourceMetadata().resourceId());
        Assertions.assertEquals("ugidyjrr", model.resourceMetadata().source());
        Assertions.assertEquals("sonpclhocohs", model.resourceMetadata().singular());
        Assertions.assertEquals("ev", model.resourceMetadata().plural());
        Assertions.assertEquals("ggzfbu", model.description());
        Assertions.assertEquals("mvfaxkffeiith", model.label());
        Assertions.assertEquals("m", model.learnMoreLink());
        Assertions.assertEquals("yvshxmz", model.potentialBenefits());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
