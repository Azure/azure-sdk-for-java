// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.advisor.models.ResourceMetadata;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceMetadataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceMetadata model =
            BinaryData
                .fromString(
                    "{\"resourceId\":\"zevgb\",\"source\":\"jqabcypmivkwlzuv\",\"action\":{\"onlebxetqgtzxdpn\":\"datawnfnbacf\",\"eallnwsubisnj\":\"databqqwxrj\"},\"singular\":\"pmng\",\"plural\":\"scxaq\"}")
                .toObject(ResourceMetadata.class);
        Assertions.assertEquals("zevgb", model.resourceId());
        Assertions.assertEquals("jqabcypmivkwlzuv", model.source());
        Assertions.assertEquals("pmng", model.singular());
        Assertions.assertEquals("scxaq", model.plural());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceMetadata model =
            new ResourceMetadata()
                .withResourceId("zevgb")
                .withSource("jqabcypmivkwlzuv")
                .withAction(mapOf("onlebxetqgtzxdpn", "datawnfnbacf", "eallnwsubisnj", "databqqwxrj"))
                .withSingular("pmng")
                .withPlural("scxaq");
        model = BinaryData.fromObject(model).toObject(ResourceMetadata.class);
        Assertions.assertEquals("zevgb", model.resourceId());
        Assertions.assertEquals("jqabcypmivkwlzuv", model.source());
        Assertions.assertEquals("pmng", model.singular());
        Assertions.assertEquals("scxaq", model.plural());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
