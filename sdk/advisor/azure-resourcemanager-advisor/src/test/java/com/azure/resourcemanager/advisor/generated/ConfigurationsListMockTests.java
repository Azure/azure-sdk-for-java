// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.advisor.AdvisorManager;
import com.azure.resourcemanager.advisor.models.Category;
import com.azure.resourcemanager.advisor.models.ConfigData;
import com.azure.resourcemanager.advisor.models.CpuThreshold;
import com.azure.resourcemanager.advisor.models.DigestConfigState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"exclude\":false,\"lowCpuThreshold\":\"10\",\"digests\":[{\"name\":\"gxhnisk\",\"actionGroupResourceId\":\"bkpyc\",\"frequency\":746894532,\"categories\":[\"Security\",\"Performance\"],\"language\":\"jdauwhvy\",\"state\":\"Active\"},{\"name\":\"tdhxujznbmpowuwp\",\"actionGroupResourceId\":\"qlveualupjmkh\",\"frequency\":1026184790,\"categories\":[\"Security\",\"HighAvailability\"],\"language\":\"s\",\"state\":\"Disabled\"},{\"name\":\"iplrbpbewtghfgb\",\"actionGroupResourceId\":\"gw\",\"frequency\":748159283,\"categories\":[\"Cost\"],\"language\":\"jkbegibtnmxiebww\",\"state\":\"Active\"}]},\"id\":\"ayqcgw\",\"name\":\"tzjuzgwyzmhtxo\",\"type\":\"gmtsavjcbpwxqpsr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AdvisorManager manager = AdvisorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ConfigData> response = manager.configurations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals(false, response.iterator().next().exclude());
        Assertions.assertEquals(CpuThreshold.ONE_ZERO, response.iterator().next().lowCpuThreshold());
        Assertions.assertEquals("gxhnisk", response.iterator().next().digests().get(0).name());
        Assertions.assertEquals("bkpyc", response.iterator().next().digests().get(0).actionGroupResourceId());
        Assertions.assertEquals(746894532, response.iterator().next().digests().get(0).frequency());
        Assertions.assertEquals(Category.SECURITY, response.iterator().next().digests().get(0).categories().get(0));
        Assertions.assertEquals("jdauwhvy", response.iterator().next().digests().get(0).language());
        Assertions.assertEquals(DigestConfigState.ACTIVE, response.iterator().next().digests().get(0).state());
    }
}
