// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.advisor.AdvisorManager;
import com.azure.resourcemanager.advisor.fluent.SuppressionsClient;
import com.azure.resourcemanager.advisor.fluent.models.SuppressionContractInner;
import com.azure.resourcemanager.advisor.models.SuppressionContract;
import com.azure.resourcemanager.advisor.models.Suppressions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SuppressionsImpl implements Suppressions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SuppressionsImpl.class);

    private final SuppressionsClient innerClient;

    private final AdvisorManager serviceManager;

    public SuppressionsImpl(SuppressionsClient innerClient, AdvisorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public SuppressionContract get(String resourceUri, String recommendationId, String name) {
        SuppressionContractInner inner = this.serviceClient().get(resourceUri, recommendationId, name);
        if (inner != null) {
            return new SuppressionContractImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SuppressionContract> getWithResponse(
        String resourceUri, String recommendationId, String name, Context context) {
        Response<SuppressionContractInner> inner =
            this.serviceClient().getWithResponse(resourceUri, recommendationId, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SuppressionContractImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SuppressionContract create(
        String resourceUri, String recommendationId, String name, SuppressionContractInner suppressionContract) {
        SuppressionContractInner inner =
            this.serviceClient().create(resourceUri, recommendationId, name, suppressionContract);
        if (inner != null) {
            return new SuppressionContractImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SuppressionContract> createWithResponse(
        String resourceUri,
        String recommendationId,
        String name,
        SuppressionContractInner suppressionContract,
        Context context) {
        Response<SuppressionContractInner> inner =
            this.serviceClient().createWithResponse(resourceUri, recommendationId, name, suppressionContract, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SuppressionContractImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceUri, String recommendationId, String name) {
        this.serviceClient().delete(resourceUri, recommendationId, name);
    }

    public Response<Void> deleteWithResponse(
        String resourceUri, String recommendationId, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, recommendationId, name, context);
    }

    public PagedIterable<SuppressionContract> list() {
        PagedIterable<SuppressionContractInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new SuppressionContractImpl(inner1, this.manager()));
    }

    public PagedIterable<SuppressionContract> list(Integer top, String skipToken, Context context) {
        PagedIterable<SuppressionContractInner> inner = this.serviceClient().list(top, skipToken, context);
        return inner.mapPage(inner1 -> new SuppressionContractImpl(inner1, this.manager()));
    }

    private SuppressionsClient serviceClient() {
        return this.innerClient;
    }

    private AdvisorManager manager() {
        return this.serviceManager;
    }
}
