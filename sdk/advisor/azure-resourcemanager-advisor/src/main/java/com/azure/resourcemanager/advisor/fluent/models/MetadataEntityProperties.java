// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.advisor.models.MetadataSupportedValueDetail;
import com.azure.resourcemanager.advisor.models.Scenario;
import java.io.IOException;
import java.util.List;

/**
 * The metadata entity properties.
 */
@Fluent
public final class MetadataEntityProperties implements JsonSerializable<MetadataEntityProperties> {
    /*
     * The display name.
     */
    private String displayName;

    /*
     * The list of keys on which this entity depends on.
     */
    private List<String> dependsOn;

    /*
     * The list of scenarios applicable to this metadata entity.
     */
    private List<Scenario> applicableScenarios;

    /*
     * The list of supported values.
     */
    private List<MetadataSupportedValueDetail> supportedValues;

    /**
     * Creates an instance of MetadataEntityProperties class.
     */
    public MetadataEntityProperties() {
    }

    /**
     * Get the displayName property: The display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name.
     * 
     * @param displayName the displayName value to set.
     * @return the MetadataEntityProperties object itself.
     */
    public MetadataEntityProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the dependsOn property: The list of keys on which this entity depends on.
     * 
     * @return the dependsOn value.
     */
    public List<String> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Set the dependsOn property: The list of keys on which this entity depends on.
     * 
     * @param dependsOn the dependsOn value to set.
     * @return the MetadataEntityProperties object itself.
     */
    public MetadataEntityProperties withDependsOn(List<String> dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }

    /**
     * Get the applicableScenarios property: The list of scenarios applicable to this metadata entity.
     * 
     * @return the applicableScenarios value.
     */
    public List<Scenario> applicableScenarios() {
        return this.applicableScenarios;
    }

    /**
     * Set the applicableScenarios property: The list of scenarios applicable to this metadata entity.
     * 
     * @param applicableScenarios the applicableScenarios value to set.
     * @return the MetadataEntityProperties object itself.
     */
    public MetadataEntityProperties withApplicableScenarios(List<Scenario> applicableScenarios) {
        this.applicableScenarios = applicableScenarios;
        return this;
    }

    /**
     * Get the supportedValues property: The list of supported values.
     * 
     * @return the supportedValues value.
     */
    public List<MetadataSupportedValueDetail> supportedValues() {
        return this.supportedValues;
    }

    /**
     * Set the supportedValues property: The list of supported values.
     * 
     * @param supportedValues the supportedValues value to set.
     * @return the MetadataEntityProperties object itself.
     */
    public MetadataEntityProperties withSupportedValues(List<MetadataSupportedValueDetail> supportedValues) {
        this.supportedValues = supportedValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (supportedValues() != null) {
            supportedValues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("dependsOn", this.dependsOn, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("applicableScenarios", this.applicableScenarios,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("supportedValues", this.supportedValues,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataEntityProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetadataEntityProperties.
     */
    public static MetadataEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetadataEntityProperties deserializedMetadataEntityProperties = new MetadataEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedMetadataEntityProperties.displayName = reader.getString();
                } else if ("dependsOn".equals(fieldName)) {
                    List<String> dependsOn = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataEntityProperties.dependsOn = dependsOn;
                } else if ("applicableScenarios".equals(fieldName)) {
                    List<Scenario> applicableScenarios
                        = reader.readArray(reader1 -> Scenario.fromString(reader1.getString()));
                    deserializedMetadataEntityProperties.applicableScenarios = applicableScenarios;
                } else if ("supportedValues".equals(fieldName)) {
                    List<MetadataSupportedValueDetail> supportedValues
                        = reader.readArray(reader1 -> MetadataSupportedValueDetail.fromJson(reader1));
                    deserializedMetadataEntityProperties.supportedValues = supportedValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetadataEntityProperties;
        });
    }
}
