// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of the suppression.
 */
@Fluent
public final class SuppressionProperties implements JsonSerializable<SuppressionProperties> {
    /*
     * The GUID of the suppression.
     */
    private String suppressionId;

    /*
     * The duration for which the suppression is valid.
     */
    private String ttl;

    /*
     * Gets or sets the expiration time stamp.
     */
    private OffsetDateTime expirationTimestamp;

    /**
     * Creates an instance of SuppressionProperties class.
     */
    public SuppressionProperties() {
    }

    /**
     * Get the suppressionId property: The GUID of the suppression.
     * 
     * @return the suppressionId value.
     */
    public String suppressionId() {
        return this.suppressionId;
    }

    /**
     * Set the suppressionId property: The GUID of the suppression.
     * 
     * @param suppressionId the suppressionId value to set.
     * @return the SuppressionProperties object itself.
     */
    public SuppressionProperties withSuppressionId(String suppressionId) {
        this.suppressionId = suppressionId;
        return this;
    }

    /**
     * Get the ttl property: The duration for which the suppression is valid.
     * 
     * @return the ttl value.
     */
    public String ttl() {
        return this.ttl;
    }

    /**
     * Set the ttl property: The duration for which the suppression is valid.
     * 
     * @param ttl the ttl value to set.
     * @return the SuppressionProperties object itself.
     */
    public SuppressionProperties withTtl(String ttl) {
        this.ttl = ttl;
        return this;
    }

    /**
     * Get the expirationTimestamp property: Gets or sets the expiration time stamp.
     * 
     * @return the expirationTimestamp value.
     */
    public OffsetDateTime expirationTimestamp() {
        return this.expirationTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("suppressionId", this.suppressionId);
        jsonWriter.writeStringField("ttl", this.ttl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SuppressionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SuppressionProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SuppressionProperties.
     */
    public static SuppressionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SuppressionProperties deserializedSuppressionProperties = new SuppressionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("suppressionId".equals(fieldName)) {
                    deserializedSuppressionProperties.suppressionId = reader.getString();
                } else if ("ttl".equals(fieldName)) {
                    deserializedSuppressionProperties.ttl = reader.getString();
                } else if ("expirationTimeStamp".equals(fieldName)) {
                    deserializedSuppressionProperties.expirationTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSuppressionProperties;
        });
    }
}
