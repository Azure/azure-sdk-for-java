// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.advisor.models.CpuThreshold;
import com.azure.resourcemanager.advisor.models.DigestConfig;
import java.io.IOException;
import java.util.List;

/**
 * Configuration data properties.
 */
@Fluent
public final class ConfigDataProperties implements JsonSerializable<ConfigDataProperties> {
    /*
     * Exclude the resource from Advisor evaluations. Valid values: False (default) or True.
     */
    private Boolean exclude;

    /*
     * Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid
     * values: 5 (default), 10, 15 or 20.
     */
    private CpuThreshold lowCpuThreshold;

    /*
     * Advisor digest configuration. Valid only for subscriptions
     */
    private List<DigestConfig> digests;

    /**
     * Creates an instance of ConfigDataProperties class.
     */
    public ConfigDataProperties() {
    }

    /**
     * Get the exclude property: Exclude the resource from Advisor evaluations. Valid values: False (default) or True.
     * 
     * @return the exclude value.
     */
    public Boolean exclude() {
        return this.exclude;
    }

    /**
     * Set the exclude property: Exclude the resource from Advisor evaluations. Valid values: False (default) or True.
     * 
     * @param exclude the exclude value to set.
     * @return the ConfigDataProperties object itself.
     */
    public ConfigDataProperties withExclude(Boolean exclude) {
        this.exclude = exclude;
        return this;
    }

    /**
     * Get the lowCpuThreshold property: Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid
     * only for subscriptions. Valid values: 5 (default), 10, 15 or 20.
     * 
     * @return the lowCpuThreshold value.
     */
    public CpuThreshold lowCpuThreshold() {
        return this.lowCpuThreshold;
    }

    /**
     * Set the lowCpuThreshold property: Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid
     * only for subscriptions. Valid values: 5 (default), 10, 15 or 20.
     * 
     * @param lowCpuThreshold the lowCpuThreshold value to set.
     * @return the ConfigDataProperties object itself.
     */
    public ConfigDataProperties withLowCpuThreshold(CpuThreshold lowCpuThreshold) {
        this.lowCpuThreshold = lowCpuThreshold;
        return this;
    }

    /**
     * Get the digests property: Advisor digest configuration. Valid only for subscriptions.
     * 
     * @return the digests value.
     */
    public List<DigestConfig> digests() {
        return this.digests;
    }

    /**
     * Set the digests property: Advisor digest configuration. Valid only for subscriptions.
     * 
     * @param digests the digests value to set.
     * @return the ConfigDataProperties object itself.
     */
    public ConfigDataProperties withDigests(List<DigestConfig> digests) {
        this.digests = digests;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (digests() != null) {
            digests().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("exclude", this.exclude);
        jsonWriter.writeStringField("lowCpuThreshold",
            this.lowCpuThreshold == null ? null : this.lowCpuThreshold.toString());
        jsonWriter.writeArrayField("digests", this.digests, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigDataProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigDataProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigDataProperties.
     */
    public static ConfigDataProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigDataProperties deserializedConfigDataProperties = new ConfigDataProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("exclude".equals(fieldName)) {
                    deserializedConfigDataProperties.exclude = reader.getNullable(JsonReader::getBoolean);
                } else if ("lowCpuThreshold".equals(fieldName)) {
                    deserializedConfigDataProperties.lowCpuThreshold = CpuThreshold.fromString(reader.getString());
                } else if ("digests".equals(fieldName)) {
                    List<DigestConfig> digests = reader.readArray(reader1 -> DigestConfig.fromJson(reader1));
                    deserializedConfigDataProperties.digests = digests;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigDataProperties;
        });
    }
}
