/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.advisor.v2017_04_19.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.advisor.v2017_04_19.Configurations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.advisor.v2017_04_19.ARMErrorResponseBody;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.advisor.v2017_04_19.ConfigData;

class ConfigurationsImpl extends WrapperImpl<ConfigurationsInner> implements Configurations {
    private PagedListConverter<ConfigDataInner, ConfigData> converter;
    private final AdvisorManager manager;

    ConfigurationsImpl(AdvisorManager manager) {
        super(manager.inner().configurations());
        this.manager = manager;
        this.converter = new PagedListConverter<ConfigDataInner, ConfigData>() {
            @Override
            public Observable<ConfigData> typeConvertAsync(ConfigDataInner inner) {
                return Observable.just((ConfigData) wrapModel(inner));
            }
        };
    }

    public AdvisorManager manager() {
        return this.manager;
    }

    private ConfigDataImpl wrapModel(ConfigDataInner inner) {
        return  new ConfigDataImpl(inner, manager());
    }

    @Override
    public Observable<ARMErrorResponseBody> createInSubscriptionAsync(ConfigDataInner configContract) {
        ConfigurationsInner client = this.inner();
        return client.createInSubscriptionAsync(configContract)
        .map(new Func1<ARMErrorResponseBodyInner, ARMErrorResponseBody>() {
            @Override
            public ARMErrorResponseBody call(ARMErrorResponseBodyInner inner) {
                return new ARMErrorResponseBodyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ARMErrorResponseBody> createInResourceGroupAsync(String resourceGroup, ConfigDataInner configContract) {
        ConfigurationsInner client = this.inner();
        return client.createInResourceGroupAsync(resourceGroup, configContract)
        .map(new Func1<ARMErrorResponseBodyInner, ARMErrorResponseBody>() {
            @Override
            public ARMErrorResponseBody call(ARMErrorResponseBodyInner inner) {
                return new ARMErrorResponseBodyImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<ConfigData> list() {
        ConfigurationsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<ConfigData> listAsync() {
        ConfigurationsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ConfigDataInner>, Iterable<ConfigDataInner>>() {
            @Override
            public Iterable<ConfigDataInner> call(Page<ConfigDataInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ConfigDataInner, ConfigData>() {
            @Override
            public ConfigData call(ConfigDataInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<ConfigData> listByResourceGroup(String resourceGroupName) {
        ConfigurationsInner client = this.inner();
        return converter.convert(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<ConfigData> listByResourceGroupAsync(String resourceGroupName) {
        ConfigurationsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<ConfigDataInner>, Observable<ConfigDataInner>>() {
            @Override
            public Observable<ConfigDataInner> call(Page<ConfigDataInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<ConfigDataInner, ConfigData>() {
            @Override
            public ConfigData call(ConfigDataInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
