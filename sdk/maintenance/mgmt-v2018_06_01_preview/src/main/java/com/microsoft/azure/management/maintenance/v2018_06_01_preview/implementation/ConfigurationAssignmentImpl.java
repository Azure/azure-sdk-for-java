/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.maintenance.v2018_06_01_preview.implementation;

import com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignment;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class ConfigurationAssignmentImpl extends CreatableUpdatableImpl<ConfigurationAssignment, ConfigurationAssignmentInner, ConfigurationAssignmentImpl> implements ConfigurationAssignment, ConfigurationAssignment.Definition, ConfigurationAssignment.Update {
    private final MaintenanceManager manager;
    private String resourceGroupName;
    private String providerName;
    private String resourceParentType;
    private String resourceParentName;
    private String resourceType;
    private String resourceName;
    private String configurationAssignmentName;

    ConfigurationAssignmentImpl(String name, MaintenanceManager manager) {
        super(name, new ConfigurationAssignmentInner());
        this.manager = manager;
        // Set resource name
        this.configurationAssignmentName = name;
        //
    }

    ConfigurationAssignmentImpl(ConfigurationAssignmentInner inner, MaintenanceManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.configurationAssignmentName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourcegroups");
        this.providerName = IdParsingUtils.getValueFromIdByName(inner.id(), "providers");
        this.configurationAssignmentName = IdParsingUtils.getValueFromIdByName(inner.id(), "configurationAssignments");
        this.resourceParentType = IdParsingUtils.getValueFromIdByPosition(inner.id(), 6);
        this.resourceParentName = IdParsingUtils.getValueFromIdByPosition(inner.id(), 7);
        this.resourceType = IdParsingUtils.getValueFromIdByPosition(inner.id(), 8);
        this.resourceName = IdParsingUtils.getValueFromIdByPosition(inner.id(), 9);
        //
    }

    @Override
    public MaintenanceManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ConfigurationAssignment> createResourceAsync() {
        ConfigurationAssignmentsInner client = this.manager().inner().configurationAssignments();
        return client.createOrUpdateParentAsync(this.resourceGroupName, this.providerName, this.resourceParentType, this.resourceParentName, this.resourceType, this.resourceName, this.configurationAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ConfigurationAssignment> updateResourceAsync() {
        ConfigurationAssignmentsInner client = this.manager().inner().configurationAssignments();
        return client.createOrUpdateParentAsync(this.resourceGroupName, this.providerName, this.resourceParentType, this.resourceParentName, this.resourceType, this.resourceName, this.configurationAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ConfigurationAssignmentInner> getInnerAsync() {
        ConfigurationAssignmentsInner client = this.manager().inner().configurationAssignments();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String maintenanceConfigurationId() {
        return this.inner().maintenanceConfigurationId();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String resourceId() {
        return this.inner().resourceId();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ConfigurationAssignmentImpl withExistingProvider(String resourceGroupName, String providerName) {
        this.resourceGroupName = resourceGroupName;
        this.providerName = providerName;
        return this;
    }

    @Override
    public ConfigurationAssignmentImpl withResourceParentType(String resourceParentType) {
        this.resourceParentType = resourceParentType;
        return this;
    }

    @Override
    public ConfigurationAssignmentImpl withResourceParentName(String resourceParentName) {
        this.resourceParentName = resourceParentName;
        return this;
    }

    @Override
    public ConfigurationAssignmentImpl withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    @Override
    public ConfigurationAssignmentImpl withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    @Override
    public ConfigurationAssignmentImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ConfigurationAssignmentImpl withMaintenanceConfigurationId(String maintenanceConfigurationId) {
        this.inner().withMaintenanceConfigurationId(maintenanceConfigurationId);
        return this;
    }

    @Override
    public ConfigurationAssignmentImpl withResourceId(String resourceId) {
        this.inner().withResourceId(resourceId);
        return this;
    }

}
