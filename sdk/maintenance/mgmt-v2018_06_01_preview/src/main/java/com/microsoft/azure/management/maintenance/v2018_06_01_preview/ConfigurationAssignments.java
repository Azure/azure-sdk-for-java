/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.maintenance.v2018_06_01_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.maintenance.v2018_06_01_preview.implementation.ConfigurationAssignmentInner;
import com.microsoft.azure.management.maintenance.v2018_06_01_preview.implementation.ConfigurationAssignmentsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing ConfigurationAssignments.
 */
public interface ConfigurationAssignments extends SupportsCreating<ConfigurationAssignment.DefinitionStages.Blank>, HasInner<ConfigurationAssignmentsInner> {
    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConfigurationAssignment> deleteParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName);

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConfigurationAssignment> createOrUpdateAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment);

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConfigurationAssignment> deleteAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName);

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConfigurationAssignment> listParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName);

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConfigurationAssignment> listAsync(String resourceGroupName, String providerName, String resourceType, String resourceName);

}
