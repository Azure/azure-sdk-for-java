/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.maintenance.v2018_06_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.maintenance.v2018_06_01_preview.implementation.MaintenanceManager;
import java.util.Map;
import com.microsoft.azure.management.maintenance.v2018_06_01_preview.implementation.MaintenanceConfigurationInner;

/**
 * Type representing MaintenanceConfiguration.
 */
public interface MaintenanceConfiguration extends HasInner<MaintenanceConfigurationInner>, Resource, GroupableResourceCore<MaintenanceManager, MaintenanceConfigurationInner>, HasResourceGroup, Refreshable<MaintenanceConfiguration>, Updatable<MaintenanceConfiguration.Update>, HasManager<MaintenanceManager> {
    /**
     * @return the extensionProperties value.
     */
    Map<String, String> extensionProperties();

    /**
     * @return the maintenanceScope value.
     */
    MaintenanceScope maintenanceScope();

    /**
     * @return the namespace value.
     */
    String namespace();

    /**
     * The entirety of the MaintenanceConfiguration definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of MaintenanceConfiguration definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a MaintenanceConfiguration definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the MaintenanceConfiguration definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the maintenanceconfiguration definition allowing to specify ExtensionProperties.
         */
        interface WithExtensionProperties {
            /**
             * Specifies extensionProperties.
             * @param extensionProperties Gets or sets extensionProperties of the maintenanceConfiguration
             * @return the next definition stage
             */
            WithCreate withExtensionProperties(Map<String, String> extensionProperties);
        }

        /**
         * The stage of the maintenanceconfiguration definition allowing to specify MaintenanceScope.
         */
        interface WithMaintenanceScope {
            /**
             * Specifies maintenanceScope.
             * @param maintenanceScope Gets or sets maintenanceScope of the configuration. Possible values include: 'All', 'Host', 'Resource', 'InResource'
             * @return the next definition stage
             */
            WithCreate withMaintenanceScope(MaintenanceScope maintenanceScope);
        }

        /**
         * The stage of the maintenanceconfiguration definition allowing to specify Namespace.
         */
        interface WithNamespace {
            /**
             * Specifies namespace.
             * @param namespace Gets or sets namespace of the resource
             * @return the next definition stage
             */
            WithCreate withNamespace(String namespace);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<MaintenanceConfiguration>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithExtensionProperties, DefinitionStages.WithMaintenanceScope, DefinitionStages.WithNamespace {
        }
    }
    /**
     * The template for a MaintenanceConfiguration update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<MaintenanceConfiguration>, Resource.UpdateWithTags<Update>, UpdateStages.WithExtensionProperties, UpdateStages.WithMaintenanceScope, UpdateStages.WithNamespace {
    }

    /**
     * Grouping of MaintenanceConfiguration update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the maintenanceconfiguration update allowing to specify ExtensionProperties.
         */
        interface WithExtensionProperties {
            /**
             * Specifies extensionProperties.
             * @param extensionProperties Gets or sets extensionProperties of the maintenanceConfiguration
             * @return the next update stage
             */
            Update withExtensionProperties(Map<String, String> extensionProperties);
        }

        /**
         * The stage of the maintenanceconfiguration update allowing to specify MaintenanceScope.
         */
        interface WithMaintenanceScope {
            /**
             * Specifies maintenanceScope.
             * @param maintenanceScope Gets or sets maintenanceScope of the configuration. Possible values include: 'All', 'Host', 'Resource', 'InResource'
             * @return the next update stage
             */
            Update withMaintenanceScope(MaintenanceScope maintenanceScope);
        }

        /**
         * The stage of the maintenanceconfiguration update allowing to specify Namespace.
         */
        interface WithNamespace {
            /**
             * Specifies namespace.
             * @param namespace Gets or sets namespace of the resource
             * @return the next update stage
             */
            Update withNamespace(String namespace);
        }

    }
}
