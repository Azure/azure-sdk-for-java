/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.maintenance.v2018_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ConfigurationAssignments.
 */
public class ConfigurationAssignmentsInner {
    /** The Retrofit service to perform REST calls. */
    private ConfigurationAssignmentsService service;
    /** The service client containing this operation class. */
    private MaintenanceManagementClientImpl client;

    /**
     * Initializes an instance of ConfigurationAssignmentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConfigurationAssignmentsInner(Retrofit retrofit, MaintenanceManagementClientImpl client) {
        this.service = retrofit.create(ConfigurationAssignmentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ConfigurationAssignments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConfigurationAssignmentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignments createOrUpdateParent" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        Observable<Response<ResponseBody>> createOrUpdateParent(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceParentType") String resourceParentType, @Path("resourceParentName") String resourceParentName, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("configurationAssignmentName") String configurationAssignmentName, @Body ConfigurationAssignmentInner configurationAssignment, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignments deleteParent" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteParent(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceParentType") String resourceParentType, @Path("resourceParentName") String resourceParentName, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("configurationAssignmentName") String configurationAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignments createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("configurationAssignmentName") String configurationAssignmentName, @Body ConfigurationAssignmentInner configurationAssignment, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignments delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("configurationAssignmentName") String configurationAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignments listParent" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments")
        Observable<Response<ResponseBody>> listParent(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceParentType") String resourceParentType, @Path("resourceParentName") String resourceParentName, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignments list" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationAssignmentInner object if successful.
     */
    public ConfigurationAssignmentInner createOrUpdateParent(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName, configurationAssignment).toBlocking().single().body();
    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationAssignmentInner> createOrUpdateParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment, final ServiceCallback<ConfigurationAssignmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName, configurationAssignment), serviceCallback);
    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ConfigurationAssignmentInner> createOrUpdateParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName, configurationAssignment).map(new Func1<ServiceResponse<ConfigurationAssignmentInner>, ConfigurationAssignmentInner>() {
            @Override
            public ConfigurationAssignmentInner call(ServiceResponse<ConfigurationAssignmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ServiceResponse<ConfigurationAssignmentInner>> createOrUpdateParentWithServiceResponseAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceParentType == null) {
            throw new IllegalArgumentException("Parameter resourceParentType is required and cannot be null.");
        }
        if (resourceParentName == null) {
            throw new IllegalArgumentException("Parameter resourceParentName is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (configurationAssignmentName == null) {
            throw new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null.");
        }
        if (configurationAssignment == null) {
            throw new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(configurationAssignment);
        return service.createOrUpdateParent(this.client.subscriptionId(), resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName, configurationAssignment, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConfigurationAssignmentInner>>>() {
                @Override
                public Observable<ServiceResponse<ConfigurationAssignmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConfigurationAssignmentInner> clientResponse = createOrUpdateParentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConfigurationAssignmentInner> createOrUpdateParentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConfigurationAssignmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConfigurationAssignmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationAssignmentInner object if successful.
     */
    public ConfigurationAssignmentInner deleteParent(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName) {
        return deleteParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName).toBlocking().single().body();
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationAssignmentInner> deleteParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName, final ServiceCallback<ConfigurationAssignmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName), serviceCallback);
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ConfigurationAssignmentInner> deleteParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName) {
        return deleteParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName).map(new Func1<ServiceResponse<ConfigurationAssignmentInner>, ConfigurationAssignmentInner>() {
            @Override
            public ConfigurationAssignmentInner call(ServiceResponse<ConfigurationAssignmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ServiceResponse<ConfigurationAssignmentInner>> deleteParentWithServiceResponseAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceParentType == null) {
            throw new IllegalArgumentException("Parameter resourceParentType is required and cannot be null.");
        }
        if (resourceParentName == null) {
            throw new IllegalArgumentException("Parameter resourceParentName is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (configurationAssignmentName == null) {
            throw new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteParent(this.client.subscriptionId(), resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConfigurationAssignmentInner>>>() {
                @Override
                public Observable<ServiceResponse<ConfigurationAssignmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConfigurationAssignmentInner> clientResponse = deleteParentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConfigurationAssignmentInner> deleteParentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConfigurationAssignmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConfigurationAssignmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationAssignmentInner object if successful.
     */
    public ConfigurationAssignmentInner createOrUpdate(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName, configurationAssignment).toBlocking().single().body();
    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationAssignmentInner> createOrUpdateAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment, final ServiceCallback<ConfigurationAssignmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName, configurationAssignment), serviceCallback);
    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ConfigurationAssignmentInner> createOrUpdateAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName, configurationAssignment).map(new Func1<ServiceResponse<ConfigurationAssignmentInner>, ConfigurationAssignmentInner>() {
            @Override
            public ConfigurationAssignmentInner call(ServiceResponse<ConfigurationAssignmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create configuration assignment.
     * Register configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Configuration assignment name
     * @param configurationAssignment The configurationAssignment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ServiceResponse<ConfigurationAssignmentInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (configurationAssignmentName == null) {
            throw new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null.");
        }
        if (configurationAssignment == null) {
            throw new IllegalArgumentException("Parameter configurationAssignment is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(configurationAssignment);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName, configurationAssignment, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConfigurationAssignmentInner>>>() {
                @Override
                public Observable<ServiceResponse<ConfigurationAssignmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConfigurationAssignmentInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConfigurationAssignmentInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConfigurationAssignmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConfigurationAssignmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationAssignmentInner object if successful.
     */
    public ConfigurationAssignmentInner delete(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName) {
        return deleteWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName).toBlocking().single().body();
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationAssignmentInner> deleteAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName, final ServiceCallback<ConfigurationAssignmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName), serviceCallback);
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ConfigurationAssignmentInner> deleteAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName) {
        return deleteWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName).map(new Func1<ServiceResponse<ConfigurationAssignmentInner>, ConfigurationAssignmentInner>() {
            @Override
            public ConfigurationAssignmentInner call(ServiceResponse<ConfigurationAssignmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Unregister configuration for resource.
     * Unregister configuration for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param configurationAssignmentName Unique configuration assignment name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationAssignmentInner object
     */
    public Observable<ServiceResponse<ConfigurationAssignmentInner>> deleteWithServiceResponseAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (configurationAssignmentName == null) {
            throw new IllegalArgumentException("Parameter configurationAssignmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConfigurationAssignmentInner>>>() {
                @Override
                public Observable<ServiceResponse<ConfigurationAssignmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConfigurationAssignmentInner> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConfigurationAssignmentInner> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConfigurationAssignmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConfigurationAssignmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ConfigurationAssignmentInner&gt; object if successful.
     */
    public List<ConfigurationAssignmentInner> listParent(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName) {
        return listParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName).toBlocking().single().body();
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationAssignmentInner>> listParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, final ServiceCallback<List<ConfigurationAssignmentInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName), serviceCallback);
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ConfigurationAssignmentInner&gt; object
     */
    public Observable<List<ConfigurationAssignmentInner>> listParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName) {
        return listParentWithServiceResponseAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName).map(new Func1<ServiceResponse<List<ConfigurationAssignmentInner>>, List<ConfigurationAssignmentInner>>() {
            @Override
            public List<ConfigurationAssignmentInner> call(ServiceResponse<List<ConfigurationAssignmentInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceParentType Resource parent type
     * @param resourceParentName Resource parent identifier
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ConfigurationAssignmentInner&gt; object
     */
    public Observable<ServiceResponse<List<ConfigurationAssignmentInner>>> listParentWithServiceResponseAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceParentType == null) {
            throw new IllegalArgumentException("Parameter resourceParentType is required and cannot be null.");
        }
        if (resourceParentName == null) {
            throw new IllegalArgumentException("Parameter resourceParentName is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listParent(this.client.subscriptionId(), resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ConfigurationAssignmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ConfigurationAssignmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationAssignmentInner>> result = listParentDelegate(response);
                        List<ConfigurationAssignmentInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ConfigurationAssignmentInner>> clientResponse = new ServiceResponse<List<ConfigurationAssignmentInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConfigurationAssignmentInner>> listParentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConfigurationAssignmentInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConfigurationAssignmentInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ConfigurationAssignmentInner&gt; object if successful.
     */
    public List<ConfigurationAssignmentInner> list(String resourceGroupName, String providerName, String resourceType, String resourceName) {
        return listWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName).toBlocking().single().body();
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationAssignmentInner>> listAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, final ServiceCallback<List<ConfigurationAssignmentInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName), serviceCallback);
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ConfigurationAssignmentInner&gt; object
     */
    public Observable<List<ConfigurationAssignmentInner>> listAsync(String resourceGroupName, String providerName, String resourceType, String resourceName) {
        return listWithServiceResponseAsync(resourceGroupName, providerName, resourceType, resourceName).map(new Func1<ServiceResponse<List<ConfigurationAssignmentInner>>, List<ConfigurationAssignmentInner>>() {
            @Override
            public List<ConfigurationAssignmentInner> call(ServiceResponse<List<ConfigurationAssignmentInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List configurationAssignments for resource.
     * List configurationAssignments for resource.
     *
     * @param resourceGroupName Resource group name
     * @param providerName Resource provider name
     * @param resourceType Resource type
     * @param resourceName Resource identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ConfigurationAssignmentInner&gt; object
     */
    public Observable<ServiceResponse<List<ConfigurationAssignmentInner>>> listWithServiceResponseAsync(String resourceGroupName, String providerName, String resourceType, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, providerName, resourceType, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ConfigurationAssignmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ConfigurationAssignmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationAssignmentInner>> result = listDelegate(response);
                        List<ConfigurationAssignmentInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ConfigurationAssignmentInner>> clientResponse = new ServiceResponse<List<ConfigurationAssignmentInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConfigurationAssignmentInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConfigurationAssignmentInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConfigurationAssignmentInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
