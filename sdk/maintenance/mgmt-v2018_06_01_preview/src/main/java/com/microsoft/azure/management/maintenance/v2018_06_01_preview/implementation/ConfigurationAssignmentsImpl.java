/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.maintenance.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignments;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.maintenance.v2018_06_01_preview.ConfigurationAssignment;

class ConfigurationAssignmentsImpl extends WrapperImpl<ConfigurationAssignmentsInner> implements ConfigurationAssignments {
    private final MaintenanceManager manager;

    ConfigurationAssignmentsImpl(MaintenanceManager manager) {
        super(manager.inner().configurationAssignments());
        this.manager = manager;
    }

    public MaintenanceManager manager() {
        return this.manager;
    }

    @Override
    public ConfigurationAssignmentImpl define(String name) {
        return wrapModel(name);
    }

    private ConfigurationAssignmentImpl wrapModel(ConfigurationAssignmentInner inner) {
        return  new ConfigurationAssignmentImpl(inner, manager());
    }

    private ConfigurationAssignmentImpl wrapModel(String name) {
        return new ConfigurationAssignmentImpl(name, this.manager());
    }

    @Override
    public Observable<ConfigurationAssignment> deleteParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName, String configurationAssignmentName) {
        ConfigurationAssignmentsInner client = this.inner();
        return client.deleteParentAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, configurationAssignmentName)
        .map(new Func1<ConfigurationAssignmentInner, ConfigurationAssignment>() {
            @Override
            public ConfigurationAssignment call(ConfigurationAssignmentInner inner) {
                return new ConfigurationAssignmentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConfigurationAssignment> createOrUpdateAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName, ConfigurationAssignmentInner configurationAssignment) {
        ConfigurationAssignmentsInner client = this.inner();
        return client.createOrUpdateAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName, configurationAssignment)
        .map(new Func1<ConfigurationAssignmentInner, ConfigurationAssignment>() {
            @Override
            public ConfigurationAssignment call(ConfigurationAssignmentInner inner) {
                return new ConfigurationAssignmentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConfigurationAssignment> deleteAsync(String resourceGroupName, String providerName, String resourceType, String resourceName, String configurationAssignmentName) {
        ConfigurationAssignmentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, providerName, resourceType, resourceName, configurationAssignmentName)
        .map(new Func1<ConfigurationAssignmentInner, ConfigurationAssignment>() {
            @Override
            public ConfigurationAssignment call(ConfigurationAssignmentInner inner) {
                return new ConfigurationAssignmentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConfigurationAssignment> listParentAsync(String resourceGroupName, String providerName, String resourceParentType, String resourceParentName, String resourceType, String resourceName) {
        ConfigurationAssignmentsInner client = this.inner();
        return client.listParentAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName)
        .flatMap(new Func1<List<ConfigurationAssignmentInner>, Observable<ConfigurationAssignmentInner>>() {
            @Override
            public Observable<ConfigurationAssignmentInner> call(List<ConfigurationAssignmentInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ConfigurationAssignmentInner, ConfigurationAssignment>() {
            @Override
            public ConfigurationAssignment call(ConfigurationAssignmentInner inner) {
                return new ConfigurationAssignmentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConfigurationAssignment> listAsync(String resourceGroupName, String providerName, String resourceType, String resourceName) {
        ConfigurationAssignmentsInner client = this.inner();
        return client.listAsync(resourceGroupName, providerName, resourceType, resourceName)
        .flatMap(new Func1<List<ConfigurationAssignmentInner>, Observable<ConfigurationAssignmentInner>>() {
            @Override
            public Observable<ConfigurationAssignmentInner> call(List<ConfigurationAssignmentInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ConfigurationAssignmentInner, ConfigurationAssignment>() {
            @Override
            public ConfigurationAssignment call(ConfigurationAssignmentInner inner) {
                return new ConfigurationAssignmentImpl(inner, manager());
            }
        });
    }

}
