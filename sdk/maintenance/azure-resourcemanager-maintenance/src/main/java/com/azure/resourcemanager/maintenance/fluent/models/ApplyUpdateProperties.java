// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.maintenance.models.UpdateStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Properties for apply update.
 */
@Fluent
public final class ApplyUpdateProperties implements JsonSerializable<ApplyUpdateProperties> {
    /*
     * The status
     */
    private UpdateStatus status;

    /*
     * The resourceId
     */
    private String resourceId;

    /*
     * Last Update time
     */
    private OffsetDateTime lastUpdateTime;

    /**
     * Creates an instance of ApplyUpdateProperties class.
     */
    public ApplyUpdateProperties() {
    }

    /**
     * Get the status property: The status.
     * 
     * @return the status value.
     */
    public UpdateStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status.
     * 
     * @param status the status value to set.
     * @return the ApplyUpdateProperties object itself.
     */
    public ApplyUpdateProperties withStatus(UpdateStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the resourceId property: The resourceId.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resourceId.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ApplyUpdateProperties object itself.
     */
    public ApplyUpdateProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the lastUpdateTime property: Last Update time.
     * 
     * @return the lastUpdateTime value.
     */
    public OffsetDateTime lastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Set the lastUpdateTime property: Last Update time.
     * 
     * @param lastUpdateTime the lastUpdateTime value to set.
     * @return the ApplyUpdateProperties object itself.
     */
    public ApplyUpdateProperties withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("lastUpdateTime",
            this.lastUpdateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplyUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplyUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplyUpdateProperties.
     */
    public static ApplyUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplyUpdateProperties deserializedApplyUpdateProperties = new ApplyUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedApplyUpdateProperties.status = UpdateStatus.fromString(reader.getString());
                } else if ("resourceId".equals(fieldName)) {
                    deserializedApplyUpdateProperties.resourceId = reader.getString();
                } else if ("lastUpdateTime".equals(fieldName)) {
                    deserializedApplyUpdateProperties.lastUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplyUpdateProperties;
        });
    }
}
