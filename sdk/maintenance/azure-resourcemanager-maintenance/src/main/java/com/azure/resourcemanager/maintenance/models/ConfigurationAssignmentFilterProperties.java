// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Azure query for the update configuration.
 */
@Fluent
public final class ConfigurationAssignmentFilterProperties
    implements JsonSerializable<ConfigurationAssignmentFilterProperties> {
    /*
     * List of allowed resources.
     */
    private List<String> resourceTypes;

    /*
     * List of allowed resource groups.
     */
    private List<String> resourceGroups;

    /*
     * List of allowed operating systems.
     */
    private List<String> osTypes;

    /*
     * List of locations to scope the query to.
     */
    private List<String> locations;

    /*
     * Tag settings for the VM.
     */
    private TagSettingsProperties tagSettings;

    /**
     * Creates an instance of ConfigurationAssignmentFilterProperties class.
     */
    public ConfigurationAssignmentFilterProperties() {
    }

    /**
     * Get the resourceTypes property: List of allowed resources.
     * 
     * @return the resourceTypes value.
     */
    public List<String> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: List of allowed resources.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the ConfigurationAssignmentFilterProperties object itself.
     */
    public ConfigurationAssignmentFilterProperties withResourceTypes(List<String> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Get the resourceGroups property: List of allowed resource groups.
     * 
     * @return the resourceGroups value.
     */
    public List<String> resourceGroups() {
        return this.resourceGroups;
    }

    /**
     * Set the resourceGroups property: List of allowed resource groups.
     * 
     * @param resourceGroups the resourceGroups value to set.
     * @return the ConfigurationAssignmentFilterProperties object itself.
     */
    public ConfigurationAssignmentFilterProperties withResourceGroups(List<String> resourceGroups) {
        this.resourceGroups = resourceGroups;
        return this;
    }

    /**
     * Get the osTypes property: List of allowed operating systems.
     * 
     * @return the osTypes value.
     */
    public List<String> osTypes() {
        return this.osTypes;
    }

    /**
     * Set the osTypes property: List of allowed operating systems.
     * 
     * @param osTypes the osTypes value to set.
     * @return the ConfigurationAssignmentFilterProperties object itself.
     */
    public ConfigurationAssignmentFilterProperties withOsTypes(List<String> osTypes) {
        this.osTypes = osTypes;
        return this;
    }

    /**
     * Get the locations property: List of locations to scope the query to.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: List of locations to scope the query to.
     * 
     * @param locations the locations value to set.
     * @return the ConfigurationAssignmentFilterProperties object itself.
     */
    public ConfigurationAssignmentFilterProperties withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the tagSettings property: Tag settings for the VM.
     * 
     * @return the tagSettings value.
     */
    public TagSettingsProperties tagSettings() {
        return this.tagSettings;
    }

    /**
     * Set the tagSettings property: Tag settings for the VM.
     * 
     * @param tagSettings the tagSettings value to set.
     * @return the ConfigurationAssignmentFilterProperties object itself.
     */
    public ConfigurationAssignmentFilterProperties withTagSettings(TagSettingsProperties tagSettings) {
        this.tagSettings = tagSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tagSettings() != null) {
            tagSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourceGroups", this.resourceGroups,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("osTypes", this.osTypes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("tagSettings", this.tagSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationAssignmentFilterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationAssignmentFilterProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationAssignmentFilterProperties.
     */
    public static ConfigurationAssignmentFilterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationAssignmentFilterProperties deserializedConfigurationAssignmentFilterProperties
                = new ConfigurationAssignmentFilterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceTypes".equals(fieldName)) {
                    List<String> resourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedConfigurationAssignmentFilterProperties.resourceTypes = resourceTypes;
                } else if ("resourceGroups".equals(fieldName)) {
                    List<String> resourceGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedConfigurationAssignmentFilterProperties.resourceGroups = resourceGroups;
                } else if ("osTypes".equals(fieldName)) {
                    List<String> osTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedConfigurationAssignmentFilterProperties.osTypes = osTypes;
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedConfigurationAssignmentFilterProperties.locations = locations;
                } else if ("tagSettings".equals(fieldName)) {
                    deserializedConfigurationAssignmentFilterProperties.tagSettings
                        = TagSettingsProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationAssignmentFilterProperties;
        });
    }
}
