// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Input properties for patching a Linux machine.
 */
@Fluent
public final class InputLinuxParameters implements JsonSerializable<InputLinuxParameters> {
    /*
     * Package names to be excluded for patching.
     */
    private List<String> packageNameMasksToExclude;

    /*
     * Package names to be included for patching.
     */
    private List<String> packageNameMasksToInclude;

    /*
     * Classification category of patches to be patched
     */
    private List<String> classificationsToInclude;

    /**
     * Creates an instance of InputLinuxParameters class.
     */
    public InputLinuxParameters() {
    }

    /**
     * Get the packageNameMasksToExclude property: Package names to be excluded for patching.
     * 
     * @return the packageNameMasksToExclude value.
     */
    public List<String> packageNameMasksToExclude() {
        return this.packageNameMasksToExclude;
    }

    /**
     * Set the packageNameMasksToExclude property: Package names to be excluded for patching.
     * 
     * @param packageNameMasksToExclude the packageNameMasksToExclude value to set.
     * @return the InputLinuxParameters object itself.
     */
    public InputLinuxParameters withPackageNameMasksToExclude(List<String> packageNameMasksToExclude) {
        this.packageNameMasksToExclude = packageNameMasksToExclude;
        return this;
    }

    /**
     * Get the packageNameMasksToInclude property: Package names to be included for patching.
     * 
     * @return the packageNameMasksToInclude value.
     */
    public List<String> packageNameMasksToInclude() {
        return this.packageNameMasksToInclude;
    }

    /**
     * Set the packageNameMasksToInclude property: Package names to be included for patching.
     * 
     * @param packageNameMasksToInclude the packageNameMasksToInclude value to set.
     * @return the InputLinuxParameters object itself.
     */
    public InputLinuxParameters withPackageNameMasksToInclude(List<String> packageNameMasksToInclude) {
        this.packageNameMasksToInclude = packageNameMasksToInclude;
        return this;
    }

    /**
     * Get the classificationsToInclude property: Classification category of patches to be patched.
     * 
     * @return the classificationsToInclude value.
     */
    public List<String> classificationsToInclude() {
        return this.classificationsToInclude;
    }

    /**
     * Set the classificationsToInclude property: Classification category of patches to be patched.
     * 
     * @param classificationsToInclude the classificationsToInclude value to set.
     * @return the InputLinuxParameters object itself.
     */
    public InputLinuxParameters withClassificationsToInclude(List<String> classificationsToInclude) {
        this.classificationsToInclude = classificationsToInclude;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("packageNameMasksToExclude", this.packageNameMasksToExclude,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("packageNameMasksToInclude", this.packageNameMasksToInclude,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("classificationsToInclude", this.classificationsToInclude,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputLinuxParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputLinuxParameters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InputLinuxParameters.
     */
    public static InputLinuxParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InputLinuxParameters deserializedInputLinuxParameters = new InputLinuxParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packageNameMasksToExclude".equals(fieldName)) {
                    List<String> packageNameMasksToExclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedInputLinuxParameters.packageNameMasksToExclude = packageNameMasksToExclude;
                } else if ("packageNameMasksToInclude".equals(fieldName)) {
                    List<String> packageNameMasksToInclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedInputLinuxParameters.packageNameMasksToInclude = packageNameMasksToInclude;
                } else if ("classificationsToInclude".equals(fieldName)) {
                    List<String> classificationsToInclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedInputLinuxParameters.classificationsToInclude = classificationsToInclude;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInputLinuxParameters;
        });
    }
}
