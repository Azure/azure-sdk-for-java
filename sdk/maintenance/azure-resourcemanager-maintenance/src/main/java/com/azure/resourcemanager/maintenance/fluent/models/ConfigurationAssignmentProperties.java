// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import java.io.IOException;

/**
 * Properties for configuration assignment.
 */
@Fluent
public final class ConfigurationAssignmentProperties implements JsonSerializable<ConfigurationAssignmentProperties> {
    /*
     * The maintenance configuration Id
     */
    private String maintenanceConfigurationId;

    /*
     * The unique resourceId
     */
    private String resourceId;

    /*
     * Properties of the configuration assignment
     */
    private ConfigurationAssignmentFilterProperties filter;

    /**
     * Creates an instance of ConfigurationAssignmentProperties class.
     */
    public ConfigurationAssignmentProperties() {
    }

    /**
     * Get the maintenanceConfigurationId property: The maintenance configuration Id.
     * 
     * @return the maintenanceConfigurationId value.
     */
    public String maintenanceConfigurationId() {
        return this.maintenanceConfigurationId;
    }

    /**
     * Set the maintenanceConfigurationId property: The maintenance configuration Id.
     * 
     * @param maintenanceConfigurationId the maintenanceConfigurationId value to set.
     * @return the ConfigurationAssignmentProperties object itself.
     */
    public ConfigurationAssignmentProperties withMaintenanceConfigurationId(String maintenanceConfigurationId) {
        this.maintenanceConfigurationId = maintenanceConfigurationId;
        return this;
    }

    /**
     * Get the resourceId property: The unique resourceId.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The unique resourceId.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ConfigurationAssignmentProperties object itself.
     */
    public ConfigurationAssignmentProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the filter property: Properties of the configuration assignment.
     * 
     * @return the filter value.
     */
    public ConfigurationAssignmentFilterProperties filter() {
        return this.filter;
    }

    /**
     * Set the filter property: Properties of the configuration assignment.
     * 
     * @param filter the filter value to set.
     * @return the ConfigurationAssignmentProperties object itself.
     */
    public ConfigurationAssignmentProperties withFilter(ConfigurationAssignmentFilterProperties filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filter() != null) {
            filter().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("maintenanceConfigurationId", this.maintenanceConfigurationId);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeJsonField("filter", this.filter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationAssignmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationAssignmentProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationAssignmentProperties.
     */
    public static ConfigurationAssignmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationAssignmentProperties deserializedConfigurationAssignmentProperties
                = new ConfigurationAssignmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maintenanceConfigurationId".equals(fieldName)) {
                    deserializedConfigurationAssignmentProperties.maintenanceConfigurationId = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedConfigurationAssignmentProperties.resourceId = reader.getString();
                } else if ("filter".equals(fieldName)) {
                    deserializedConfigurationAssignmentProperties.filter
                        = ConfigurationAssignmentFilterProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationAssignmentProperties;
        });
    }
}
