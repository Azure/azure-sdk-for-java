// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import java.io.IOException;

/**
 * Configuration Assignment.
 */
@Fluent
public final class ConfigurationAssignmentInner extends ProxyResource {
    /*
     * Location of the resource
     */
    private String location;

    /*
     * Properties of the configuration assignment
     */
    private ConfigurationAssignmentProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ConfigurationAssignmentInner class.
     */
    public ConfigurationAssignmentInner() {
    }

    /**
     * Get the location property: Location of the resource.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Location of the resource.
     * 
     * @param location the location value to set.
     * @return the ConfigurationAssignmentInner object itself.
     */
    public ConfigurationAssignmentInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the innerProperties property: Properties of the configuration assignment.
     * 
     * @return the innerProperties value.
     */
    private ConfigurationAssignmentProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the maintenanceConfigurationId property: The maintenance configuration Id.
     * 
     * @return the maintenanceConfigurationId value.
     */
    public String maintenanceConfigurationId() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceConfigurationId();
    }

    /**
     * Set the maintenanceConfigurationId property: The maintenance configuration Id.
     * 
     * @param maintenanceConfigurationId the maintenanceConfigurationId value to set.
     * @return the ConfigurationAssignmentInner object itself.
     */
    public ConfigurationAssignmentInner withMaintenanceConfigurationId(String maintenanceConfigurationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConfigurationAssignmentProperties();
        }
        this.innerProperties().withMaintenanceConfigurationId(maintenanceConfigurationId);
        return this;
    }

    /**
     * Get the resourceId property: The unique resourceId.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceId();
    }

    /**
     * Set the resourceId property: The unique resourceId.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ConfigurationAssignmentInner object itself.
     */
    public ConfigurationAssignmentInner withResourceId(String resourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConfigurationAssignmentProperties();
        }
        this.innerProperties().withResourceId(resourceId);
        return this;
    }

    /**
     * Get the filter property: Properties of the configuration assignment.
     * 
     * @return the filter value.
     */
    public ConfigurationAssignmentFilterProperties filter() {
        return this.innerProperties() == null ? null : this.innerProperties().filter();
    }

    /**
     * Set the filter property: Properties of the configuration assignment.
     * 
     * @param filter the filter value to set.
     * @return the ConfigurationAssignmentInner object itself.
     */
    public ConfigurationAssignmentInner withFilter(ConfigurationAssignmentFilterProperties filter) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConfigurationAssignmentProperties();
        }
        this.innerProperties().withFilter(filter);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationAssignmentInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationAssignmentInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConfigurationAssignmentInner.
     */
    public static ConfigurationAssignmentInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationAssignmentInner deserializedConfigurationAssignmentInner = new ConfigurationAssignmentInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConfigurationAssignmentInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedConfigurationAssignmentInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedConfigurationAssignmentInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedConfigurationAssignmentInner.location = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedConfigurationAssignmentInner.innerProperties
                        = ConfigurationAssignmentProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedConfigurationAssignmentInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationAssignmentInner;
        });
    }
}
