// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationAssignmentsForSubscriptionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"doj\",\"properties\":{\"maintenanceConfigurationId\":\"vavrefdees\",\"resourceId\":\"cuijpxt\",\"filter\":{\"resourceTypes\":[\"prtujwsawdd\",\"ibabxvititvtzeex\"],\"resourceGroups\":[\"xtfglecdmdqb\",\"pypqtgsfj\",\"cbslhhx\",\"db\"],\"osTypes\":[\"d\",\"tnsi\",\"ud\",\"z\"],\"locations\":[\"sckdlp\"],\"tagSettings\":{\"tags\":{\"gsftufqobrjlnacg\":[\"x\",\"a\",\"lc\",\"xwmdboxd\"],\"qnvb\":[\"kknhxkizvytnrzv\",\"lj\",\"aaeranokqgukk\"],\"r\":[\"ylaxxulcdi\",\"dosfjbjsvgjrw\"],\"dclxgc\":[\"ycy\"]},\"filterOperator\":\"All\"}}},\"id\":\"nwm\",\"name\":\"tmvpdvjdhtt\",\"type\":\"a\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfigurationAssignment response = manager.configurationAssignmentsForSubscriptions()
            .define("qdnfwqzdz")
            .withRegion("ilaxhn")
            .withMaintenanceConfigurationId("lyvijouwiv")
            .withResourceId("oyzunbixxr")
            .withFilter(new ConfigurationAssignmentFilterProperties()
                .withResourceTypes(Arrays.asList("cpwpg", "lrcivtsoxfrke", "xpmyyefrpmpdnq"))
                .withResourceGroups(Arrays.asList("awaoqvmmbnpqfrt"))
                .withOsTypes(Arrays.asList("zmegnitgvk", "lzyqd", "fegcea", "zxwhcansymoyqhlw"))
                .withLocations(Arrays.asList("ivbkbxgomfaj"))
                .withTagSettings(new TagSettingsProperties()
                    .withTags(mapOf("gat", Arrays.asList("vdaeyyguxakjsq", "hzbezkgi", "sidxasicdd", "vvjskgfmocwahp"),
                        "bbjjidjksyxk", Arrays.asList("a", "hhvjhh", "akz"), "svxeizzgwklnsr",
                        Arrays.asList("vxevblb", "ednljl", "geuaulx", "nsmjbnkppxynen")))
                    .withFilterOperator(TagOperators.ANY)))
            .create();

        Assertions.assertEquals("doj", response.location());
        Assertions.assertEquals("vavrefdees", response.maintenanceConfigurationId());
        Assertions.assertEquals("cuijpxt", response.resourceId());
        Assertions.assertEquals("prtujwsawdd", response.filter().resourceTypes().get(0));
        Assertions.assertEquals("xtfglecdmdqb", response.filter().resourceGroups().get(0));
        Assertions.assertEquals("d", response.filter().osTypes().get(0));
        Assertions.assertEquals("sckdlp", response.filter().locations().get(0));
        Assertions.assertEquals("x", response.filter().tagSettings().tags().get("gsftufqobrjlnacg").get(0));
        Assertions.assertEquals(TagOperators.ALL, response.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
