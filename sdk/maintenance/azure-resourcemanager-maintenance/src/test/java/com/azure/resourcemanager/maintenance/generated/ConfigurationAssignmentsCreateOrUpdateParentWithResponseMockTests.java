// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationAssignmentsCreateOrUpdateParentWithResponseMockTests {
    @Test
    public void testCreateOrUpdateParentWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"rxcyjmoad\",\"properties\":{\"maintenanceConfigurationId\":\"arm\",\"resourceId\":\"dmjsjqb\",\"filter\":{\"resourceTypes\":[\"x\",\"rw\",\"yc\"],\"resourceGroups\":[\"hp\",\"xkgymareqnajxqu\",\"jhkycub\"],\"osTypes\":[\"gssofwq\",\"zqalkrmnjijpx\",\"cqqudf\",\"byxbaaabjy\"],\"locations\":[\"ffimrzrtuzqogsex\",\"evfdnwnwm\",\"wzsyyceuzs\",\"i\"],\"tagSettings\":{\"tags\":{\"r\":[\"frxtrthzvaytdwk\",\"brqubp\",\"xhexiilivpdti\"],\"lwnwxuqlcvydyp\":[\"d\",\"oaxoruzfgsqu\",\"fxrxxle\",\"tramxjez\"],\"msbvdkcrodtjinf\":[\"dooaojkniodko\",\"ebwnujhe\"],\"xsdszuempsb\":[\"lfltka\",\"jvefkdlfoakggkfp\",\"gaowpulpqblylsyx\",\"qjnsjervtia\"]},\"filterOperator\":\"All\"}}},\"id\":\"beyvpnqicvinvkjj\",\"name\":\"dxrbuukzcle\",\"type\":\"yhmlwpaztzp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfigurationAssignment response = manager.configurationAssignments()
            .createOrUpdateParentWithResponse("cjzkzivgvvcna", "rhyrnxxmueed", "drd", "stkwqqtch", "alm", "mtdaa",
                "gdv",
                new ConfigurationAssignmentInner().withLocation("gpiohgwxrtfudxe")
                    .withMaintenanceConfigurationId("yqagvrvm")
                    .withResourceId("k")
                    .withFilter(new ConfigurationAssignmentFilterProperties()
                        .withResourceTypes(Arrays.asList("i", "dblx"))
                        .withResourceGroups(Arrays.asList("mfnjh", "j", "wmszkk"))
                        .withOsTypes(Arrays.asList("rey", "kzikfjawneaivxwc"))
                        .withLocations(Arrays.asList("pcirelsfeaen", "abfatkl", "dxbjhwuaanozj"))
                        .withTagSettings(new TagSettingsProperties().withTags(mapOf("rvimjwosytxitcsk",
                            Arrays.asList("oulpjrv", "ag"), "yf", Arrays.asList("k", "qumiek", "ez", "ikh")))
                            .withFilterOperator(TagOperators.ANY))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("rxcyjmoad", response.location());
        Assertions.assertEquals("arm", response.maintenanceConfigurationId());
        Assertions.assertEquals("dmjsjqb", response.resourceId());
        Assertions.assertEquals("x", response.filter().resourceTypes().get(0));
        Assertions.assertEquals("hp", response.filter().resourceGroups().get(0));
        Assertions.assertEquals("gssofwq", response.filter().osTypes().get(0));
        Assertions.assertEquals("ffimrzrtuzqogsex", response.filter().locations().get(0));
        Assertions.assertEquals("frxtrthzvaytdwk", response.filter().tagSettings().tags().get("r").get(0));
        Assertions.assertEquals(TagOperators.ALL, response.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
