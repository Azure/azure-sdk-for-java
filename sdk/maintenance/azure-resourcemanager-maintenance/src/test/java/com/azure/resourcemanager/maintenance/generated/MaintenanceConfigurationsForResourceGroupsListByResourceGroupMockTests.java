// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfiguration;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MaintenanceConfigurationsForResourceGroupsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"location\":\"iglaecx\",\"tags\":{\"mlqtmldgxob\":\"icokpv\"},\"properties\":{\"namespace\":\"clnpkci\",\"extensionProperties\":{\"vkjlmxhom\":\"riykhyawfvjlbox\",\"nraauzz\":\"ynhdwdigum\"},\"maintenanceScope\":\"InGuestPatch\",\"maintenanceWindow\":{\"startDateTime\":\"ysdzhez\",\"expirationDateTime\":\"vaiqyuvvf\",\"duration\":\"kphhq\",\"timeZone\":\"kvylauyavl\",\"recurEvery\":\"mncsttijfybvp\"},\"visibility\":\"Custom\",\"installPatches\":{\"rebootSetting\":\"Always\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"dhuzqgnjdgk\"],\"kbNumbersToInclude\":[\"cli\",\"hzvhxnkomtkubo\"],\"classificationsToInclude\":[\"nvdxzxhihfrbbc\",\"vqagtltdhlf\"],\"excludeKbsRequiringReboot\":true},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"kvgtrdcn\",\"fmzzsdymbrny\",\"u\",\"m\"],\"packageNameMasksToInclude\":[\"fwgckhocxvdfffw\"],\"classificationsToInclude\":[\"roud\",\"spave\"]}}},\"id\":\"r\",\"name\":\"kbunzoz\",\"type\":\"dhcxgkmoy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<MaintenanceConfiguration> response = manager.maintenanceConfigurationsForResourceGroups()
            .listByResourceGroup("z", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("iglaecx", response.iterator().next().location());
        Assertions.assertEquals("icokpv", response.iterator().next().tags().get("mlqtmldgxob"));
        Assertions.assertEquals("clnpkci", response.iterator().next().namespace());
        Assertions.assertEquals("riykhyawfvjlbox", response.iterator().next().extensionProperties().get("vkjlmxhom"));
        Assertions.assertEquals(MaintenanceScope.IN_GUEST_PATCH, response.iterator().next().maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, response.iterator().next().visibility());
        Assertions.assertEquals(RebootOptions.ALWAYS, response.iterator().next().installPatches().rebootSetting());
        Assertions.assertEquals("dhuzqgnjdgk",
            response.iterator().next().installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("cli",
            response.iterator().next().installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("nvdxzxhihfrbbc",
            response.iterator().next().installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true,
            response.iterator().next().installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("kvgtrdcn",
            response.iterator().next().installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("fwgckhocxvdfffw",
            response.iterator().next().installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("roud",
            response.iterator().next().installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("ysdzhez", response.iterator().next().startDateTime());
        Assertions.assertEquals("vaiqyuvvf", response.iterator().next().expirationDateTime());
        Assertions.assertEquals("kphhq", response.iterator().next().duration());
        Assertions.assertEquals("kvylauyavl", response.iterator().next().timeZone());
        Assertions.assertEquals("mncsttijfybvp", response.iterator().next().recurEvery());
    }
}
