// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationAssignmentsForResourceGroupsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"zbfhfovvac\",\"properties\":{\"maintenanceConfigurationId\":\"tuodxeszabbelaw\",\"resourceId\":\"ua\",\"filter\":{\"resourceTypes\":[\"wrrwoycqucw\",\"hahnomdrkywuhps\"],\"resourceGroups\":[\"urut\",\"we\",\"xwlalniexzsrzpg\",\"pqtybb\"],\"osTypes\":[\"gdakchz\",\"vl\",\"xqnrkcxk\"],\"locations\":[\"nxm\"],\"tagSettings\":{\"tags\":{\"uncuw\":[\"wq\",\"ntvlwijpsttexo\",\"qpwcyyufmh\"]},\"filterOperator\":\"All\"}}},\"id\":\"kcdqzhlct\",\"name\":\"dunqnd\",\"type\":\"fpch\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfigurationAssignment response
            = manager.configurationAssignmentsForResourceGroups()
                .createOrUpdateWithResponse("jaeukmrsieekpn", "zaapmudqmeqwi",
                    new ConfigurationAssignmentInner().withLocation("ibudqwy")
                        .withMaintenanceConfigurationId("e")
                        .withResourceId("pmzznrtffya")
                        .withFilter(
                            new ConfigurationAssignmentFilterProperties()
                                .withResourceTypes(Arrays.asList("hheioqaqhvseuf"))
                                .withResourceGroups(Arrays.asList("rxpdlcgqlsi", "mjqfrddgamquhio", "rsjuivfcdisyir"))
                                .withOsTypes(Arrays.asList("hcz", "xrxzbujrtr", "qvwre", "khgn"))
                                .withLocations(Arrays.asList("onzlr", "i", "yw", "cvjtszcofiz"))
                                .withTagSettings(new TagSettingsProperties()
                                    .withTags(mapOf("erbdk", Arrays.asList("gbjkvreljeamur", "zmlovuanash", "xlpm"),
                                        "nkeifz", Arrays.asList("vidizozsdb", "cxjmonfdgnwncyp", "uwwltvuqjctz"),
                                        "chxgs", Arrays.asList("mkdasv", "lyhb", "cu")))
                                    .withFilterOperator(TagOperators.ANY))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("zbfhfovvac", response.location());
        Assertions.assertEquals("tuodxeszabbelaw", response.maintenanceConfigurationId());
        Assertions.assertEquals("ua", response.resourceId());
        Assertions.assertEquals("wrrwoycqucw", response.filter().resourceTypes().get(0));
        Assertions.assertEquals("urut", response.filter().resourceGroups().get(0));
        Assertions.assertEquals("gdakchz", response.filter().osTypes().get(0));
        Assertions.assertEquals("nxm", response.filter().locations().get(0));
        Assertions.assertEquals("wq", response.filter().tagSettings().tags().get("uncuw").get(0));
        Assertions.assertEquals(TagOperators.ALL, response.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
