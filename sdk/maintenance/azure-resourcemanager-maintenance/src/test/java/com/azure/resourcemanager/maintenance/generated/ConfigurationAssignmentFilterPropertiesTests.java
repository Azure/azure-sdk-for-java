// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfigurationAssignmentFilterPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfigurationAssignmentFilterProperties model =
            BinaryData
                .fromString(
                    "{\"resourceTypes\":[\"zy\"],\"resourceGroups\":[\"xmzsbbzogg\",\"grxwbu\",\"vjxxjnsp\",\"dptkoenkouk\"],\"osTypes\":[\"dwtiukbldngkp\",\"cipazyxoegukgjnp\",\"ucgygevqz\"],\"locations\":[\"pmr\"],\"tagSettings\":{\"tags\":{\"nfyhx\":[\"drqjsdpy\"],\"fsj\":[\"oejzi\",\"w\"],\"wkgshwa\":[\"gzfbishcbk\",\"ajdeyeamdphaga\",\"pbuxwgipwhon\"],\"uzoqft\":[\"ixzbinjeputtmryw\"]},\"filterOperator\":\"Any\"}}")
                .toObject(ConfigurationAssignmentFilterProperties.class);
        Assertions.assertEquals("zy", model.resourceTypes().get(0));
        Assertions.assertEquals("xmzsbbzogg", model.resourceGroups().get(0));
        Assertions.assertEquals("dwtiukbldngkp", model.osTypes().get(0));
        Assertions.assertEquals("pmr", model.locations().get(0));
        Assertions.assertEquals("drqjsdpy", model.tagSettings().tags().get("nfyhx").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.tagSettings().filterOperator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfigurationAssignmentFilterProperties model =
            new ConfigurationAssignmentFilterProperties()
                .withResourceTypes(Arrays.asList("zy"))
                .withResourceGroups(Arrays.asList("xmzsbbzogg", "grxwbu", "vjxxjnsp", "dptkoenkouk"))
                .withOsTypes(Arrays.asList("dwtiukbldngkp", "cipazyxoegukgjnp", "ucgygevqz"))
                .withLocations(Arrays.asList("pmr"))
                .withTagSettings(
                    new TagSettingsProperties()
                        .withTags(
                            mapOf(
                                "nfyhx",
                                Arrays.asList("drqjsdpy"),
                                "fsj",
                                Arrays.asList("oejzi", "w"),
                                "wkgshwa",
                                Arrays.asList("gzfbishcbk", "ajdeyeamdphaga", "pbuxwgipwhon"),
                                "uzoqft",
                                Arrays.asList("ixzbinjeputtmryw")))
                        .withFilterOperator(TagOperators.ANY));
        model = BinaryData.fromObject(model).toObject(ConfigurationAssignmentFilterProperties.class);
        Assertions.assertEquals("zy", model.resourceTypes().get(0));
        Assertions.assertEquals("xmzsbbzogg", model.resourceGroups().get(0));
        Assertions.assertEquals("dwtiukbldngkp", model.osTypes().get(0));
        Assertions.assertEquals("pmr", model.locations().get(0));
        Assertions.assertEquals("drqjsdpy", model.tagSettings().tags().get("nfyhx").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
