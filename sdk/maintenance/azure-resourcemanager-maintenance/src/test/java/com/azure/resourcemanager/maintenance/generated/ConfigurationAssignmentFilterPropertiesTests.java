// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfigurationAssignmentFilterPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfigurationAssignmentFilterProperties model = BinaryData.fromString(
            "{\"resourceTypes\":[\"uynhijg\",\"mebf\",\"iarbutrcvpna\"],\"resourceGroups\":[\"hj\",\"unmpxttd\",\"hrbnlankxmyskpbh\",\"nbtkcxywnytnr\"],\"osTypes\":[\"lqidyby\",\"czfc\",\"haaxdbabphl\"],\"locations\":[\"lfktsths\",\"cocmnyyaztt\",\"twwrqp\"],\"tagSettings\":{\"tags\":{\"eaxib\":[\"zywbiex\",\"fey\"],\"oxaepd\":[\"jwbhqwalmuz\"],\"jswztsdbpg\":[\"jancu\",\"rhdwbavxbniw\"],\"ovplw\":[\"ytxhp\",\"xbzpfzab\",\"lcuhxwtctyqiklb\"]},\"filterOperator\":\"Any\"}}")
            .toObject(ConfigurationAssignmentFilterProperties.class);
        Assertions.assertEquals("uynhijg", model.resourceTypes().get(0));
        Assertions.assertEquals("hj", model.resourceGroups().get(0));
        Assertions.assertEquals("lqidyby", model.osTypes().get(0));
        Assertions.assertEquals("lfktsths", model.locations().get(0));
        Assertions.assertEquals("zywbiex", model.tagSettings().tags().get("eaxib").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.tagSettings().filterOperator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfigurationAssignmentFilterProperties model = new ConfigurationAssignmentFilterProperties()
            .withResourceTypes(Arrays.asList("uynhijg", "mebf", "iarbutrcvpna"))
            .withResourceGroups(Arrays.asList("hj", "unmpxttd", "hrbnlankxmyskpbh", "nbtkcxywnytnr"))
            .withOsTypes(Arrays.asList("lqidyby", "czfc", "haaxdbabphl"))
            .withLocations(Arrays.asList("lfktsths", "cocmnyyaztt", "twwrqp"))
            .withTagSettings(new TagSettingsProperties().withTags(mapOf("eaxib", Arrays.asList("zywbiex", "fey"),
                "oxaepd", Arrays.asList("jwbhqwalmuz"), "jswztsdbpg", Arrays.asList("jancu", "rhdwbavxbniw"), "ovplw",
                Arrays.asList("ytxhp", "xbzpfzab", "lcuhxwtctyqiklb"))).withFilterOperator(TagOperators.ANY));
        model = BinaryData.fromObject(model).toObject(ConfigurationAssignmentFilterProperties.class);
        Assertions.assertEquals("uynhijg", model.resourceTypes().get(0));
        Assertions.assertEquals("hj", model.resourceGroups().get(0));
        Assertions.assertEquals("lqidyby", model.osTypes().get(0));
        Assertions.assertEquals("lfktsths", model.locations().get(0));
        Assertions.assertEquals("zywbiex", model.tagSettings().tags().get("eaxib").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
