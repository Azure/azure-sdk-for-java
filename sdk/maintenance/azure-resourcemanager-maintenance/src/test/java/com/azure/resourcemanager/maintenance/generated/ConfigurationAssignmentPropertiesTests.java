// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentProperties;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfigurationAssignmentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfigurationAssignmentProperties model = BinaryData.fromString(
            "{\"maintenanceConfigurationId\":\"oklyaxuconuq\",\"resourceId\":\"fkbey\",\"filter\":{\"resourceTypes\":[\"mjmwvvjektcx\",\"enhwlrs\",\"frzpwvlqdqgb\"],\"resourceGroups\":[\"lihkaetcktvfc\",\"vf\",\"nkymuctqhjfbebrj\"],\"osTypes\":[\"rfuwutt\",\"xfvjrbirp\",\"xepcyvahfn\"],\"locations\":[\"yq\",\"j\",\"uujqgidokgjljyo\",\"gvcl\"],\"tagSettings\":{\"tags\":{\"htxfvgxbfsmxnehm\":[\"c\",\"hkjeszzhbi\"],\"ispnqzahmgkbrp\":[\"ec\",\"godebfqkkrbmpu\",\"gr\",\"wflzlfbxzpuzy\"],\"kpikadrgvt\":[\"dhibnuq\"]},\"filterOperator\":\"All\"}}}")
            .toObject(ConfigurationAssignmentProperties.class);
        Assertions.assertEquals("oklyaxuconuq", model.maintenanceConfigurationId());
        Assertions.assertEquals("fkbey", model.resourceId());
        Assertions.assertEquals("mjmwvvjektcx", model.filter().resourceTypes().get(0));
        Assertions.assertEquals("lihkaetcktvfc", model.filter().resourceGroups().get(0));
        Assertions.assertEquals("rfuwutt", model.filter().osTypes().get(0));
        Assertions.assertEquals("yq", model.filter().locations().get(0));
        Assertions.assertEquals("c", model.filter().tagSettings().tags().get("htxfvgxbfsmxnehm").get(0));
        Assertions.assertEquals(TagOperators.ALL, model.filter().tagSettings().filterOperator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfigurationAssignmentProperties model
            = new ConfigurationAssignmentProperties().withMaintenanceConfigurationId("oklyaxuconuq")
                .withResourceId("fkbey")
                .withFilter(new ConfigurationAssignmentFilterProperties()
                    .withResourceTypes(Arrays.asList("mjmwvvjektcx", "enhwlrs", "frzpwvlqdqgb"))
                    .withResourceGroups(Arrays.asList("lihkaetcktvfc", "vf", "nkymuctqhjfbebrj"))
                    .withOsTypes(Arrays.asList("rfuwutt", "xfvjrbirp", "xepcyvahfn"))
                    .withLocations(Arrays.asList("yq", "j", "uujqgidokgjljyo", "gvcl"))
                    .withTagSettings(
                        new TagSettingsProperties().withTags(mapOf("htxfvgxbfsmxnehm", Arrays.asList("c", "hkjeszzhbi"),
                            "ispnqzahmgkbrp", Arrays.asList("ec", "godebfqkkrbmpu", "gr", "wflzlfbxzpuzy"),
                            "kpikadrgvt", Arrays.asList("dhibnuq"))).withFilterOperator(TagOperators.ALL)));
        model = BinaryData.fromObject(model).toObject(ConfigurationAssignmentProperties.class);
        Assertions.assertEquals("oklyaxuconuq", model.maintenanceConfigurationId());
        Assertions.assertEquals("fkbey", model.resourceId());
        Assertions.assertEquals("mjmwvvjektcx", model.filter().resourceTypes().get(0));
        Assertions.assertEquals("lihkaetcktvfc", model.filter().resourceGroups().get(0));
        Assertions.assertEquals("rfuwutt", model.filter().osTypes().get(0));
        Assertions.assertEquals("yq", model.filter().locations().get(0));
        Assertions.assertEquals("c", model.filter().tagSettings().tags().get("htxfvgxbfsmxnehm").get(0));
        Assertions.assertEquals(TagOperators.ALL, model.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
