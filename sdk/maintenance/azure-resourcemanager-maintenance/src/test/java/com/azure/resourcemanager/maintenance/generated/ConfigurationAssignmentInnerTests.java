// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfigurationAssignmentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfigurationAssignmentInner model = BinaryData.fromString(
            "{\"location\":\"e\",\"properties\":{\"maintenanceConfigurationId\":\"onpc\",\"resourceId\":\"ocohslkevleg\",\"filter\":{\"resourceTypes\":[\"u\",\"fmvfaxkffeiit\",\"lvmezyvshxmzsbbz\",\"ggi\"],\"resourceGroups\":[\"wburvjxxjnspydpt\",\"oenkouknvudwti\",\"kbldngkpocipa\"],\"osTypes\":[\"o\",\"gukgjnpiucgygevq\",\"ntypmrbpizcdrqj\",\"dpydn\"],\"locations\":[\"xdeoejzic\",\"ifsjttgzfbishcb\"],\"tagSettings\":{\"tags\":{\"kix\":[\"eyeam\",\"p\",\"agalpbuxwgipwhon\",\"wkgshwa\"],\"ttmrywnuzoqf\":[\"injep\"],\"oqqnwvlryav\":[\"yqzrnkcqvyxlw\",\"zlsico\"]},\"filterOperator\":\"All\"}}},\"id\":\"unmmq\",\"name\":\"gyxzk\",\"type\":\"noc\"}")
            .toObject(ConfigurationAssignmentInner.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("onpc", model.maintenanceConfigurationId());
        Assertions.assertEquals("ocohslkevleg", model.resourceId());
        Assertions.assertEquals("u", model.filter().resourceTypes().get(0));
        Assertions.assertEquals("wburvjxxjnspydpt", model.filter().resourceGroups().get(0));
        Assertions.assertEquals("o", model.filter().osTypes().get(0));
        Assertions.assertEquals("xdeoejzic", model.filter().locations().get(0));
        Assertions.assertEquals("eyeam", model.filter().tagSettings().tags().get("kix").get(0));
        Assertions.assertEquals(TagOperators.ALL, model.filter().tagSettings().filterOperator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfigurationAssignmentInner model = new ConfigurationAssignmentInner().withLocation("e")
            .withMaintenanceConfigurationId("onpc")
            .withResourceId("ocohslkevleg")
            .withFilter(new ConfigurationAssignmentFilterProperties()
                .withResourceTypes(Arrays.asList("u", "fmvfaxkffeiit", "lvmezyvshxmzsbbz", "ggi"))
                .withResourceGroups(Arrays.asList("wburvjxxjnspydpt", "oenkouknvudwti", "kbldngkpocipa"))
                .withOsTypes(Arrays.asList("o", "gukgjnpiucgygevq", "ntypmrbpizcdrqj", "dpydn"))
                .withLocations(Arrays.asList("xdeoejzic", "ifsjttgzfbishcb"))
                .withTagSettings(new TagSettingsProperties()
                    .withTags(mapOf("kix", Arrays.asList("eyeam", "p", "agalpbuxwgipwhon", "wkgshwa"), "ttmrywnuzoqf",
                        Arrays.asList("injep"), "oqqnwvlryav", Arrays.asList("yqzrnkcqvyxlw", "zlsico")))
                    .withFilterOperator(TagOperators.ALL)));
        model = BinaryData.fromObject(model).toObject(ConfigurationAssignmentInner.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("onpc", model.maintenanceConfigurationId());
        Assertions.assertEquals("ocohslkevleg", model.resourceId());
        Assertions.assertEquals("u", model.filter().resourceTypes().get(0));
        Assertions.assertEquals("wburvjxxjnspydpt", model.filter().resourceGroups().get(0));
        Assertions.assertEquals("o", model.filter().osTypes().get(0));
        Assertions.assertEquals("xdeoejzic", model.filter().locations().get(0));
        Assertions.assertEquals("eyeam", model.filter().tagSettings().tags().get("kix").get(0));
        Assertions.assertEquals(TagOperators.ALL, model.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
