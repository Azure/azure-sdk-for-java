// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfigurationAssignmentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfigurationAssignmentInner model =
            BinaryData
                .fromString(
                    "{\"location\":\"aamdect\",\"properties\":{\"maintenanceConfigurationId\":\"iqscjeypv\",\"resourceId\":\"zrkgqhcjrefovg\",\"filter\":{\"resourceTypes\":[\"leyyvx\"],\"resourceGroups\":[\"pkc\",\"t\",\"pngjcrcczsqpjhvm\"],\"osTypes\":[\"v\",\"ysou\",\"q\"],\"locations\":[\"noae\"],\"tagSettings\":{\"tags\":{\"twhrdxwzywqsm\":[\"hltrpmopjmcmatuo\",\"thfuiuaodsfcpkvx\",\"dpuozmyz\",\"dagfuaxbezyiuok\"]},\"filterOperator\":\"Any\"}}},\"id\":\"exim\",\"name\":\"ryocfsfksymdd\",\"type\":\"stkiiuxhqyud\"}")
                .toObject(ConfigurationAssignmentInner.class);
        Assertions.assertEquals("aamdect", model.location());
        Assertions.assertEquals("iqscjeypv", model.maintenanceConfigurationId());
        Assertions.assertEquals("zrkgqhcjrefovg", model.resourceId());
        Assertions.assertEquals("leyyvx", model.filter().resourceTypes().get(0));
        Assertions.assertEquals("pkc", model.filter().resourceGroups().get(0));
        Assertions.assertEquals("v", model.filter().osTypes().get(0));
        Assertions.assertEquals("noae", model.filter().locations().get(0));
        Assertions.assertEquals("hltrpmopjmcmatuo", model.filter().tagSettings().tags().get("twhrdxwzywqsm").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.filter().tagSettings().filterOperator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfigurationAssignmentInner model =
            new ConfigurationAssignmentInner()
                .withLocation("aamdect")
                .withMaintenanceConfigurationId("iqscjeypv")
                .withResourceId("zrkgqhcjrefovg")
                .withFilter(
                    new ConfigurationAssignmentFilterProperties()
                        .withResourceTypes(Arrays.asList("leyyvx"))
                        .withResourceGroups(Arrays.asList("pkc", "t", "pngjcrcczsqpjhvm"))
                        .withOsTypes(Arrays.asList("v", "ysou", "q"))
                        .withLocations(Arrays.asList("noae"))
                        .withTagSettings(
                            new TagSettingsProperties()
                                .withTags(
                                    mapOf(
                                        "twhrdxwzywqsm",
                                        Arrays
                                            .asList(
                                                "hltrpmopjmcmatuo", "thfuiuaodsfcpkvx", "dpuozmyz", "dagfuaxbezyiuok")))
                                .withFilterOperator(TagOperators.ANY)));
        model = BinaryData.fromObject(model).toObject(ConfigurationAssignmentInner.class);
        Assertions.assertEquals("aamdect", model.location());
        Assertions.assertEquals("iqscjeypv", model.maintenanceConfigurationId());
        Assertions.assertEquals("zrkgqhcjrefovg", model.resourceId());
        Assertions.assertEquals("leyyvx", model.filter().resourceTypes().get(0));
        Assertions.assertEquals("pkc", model.filter().resourceGroups().get(0));
        Assertions.assertEquals("v", model.filter().osTypes().get(0));
        Assertions.assertEquals("noae", model.filter().locations().get(0));
        Assertions.assertEquals("hltrpmopjmcmatuo", model.filter().tagSettings().tags().get("twhrdxwzywqsm").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
