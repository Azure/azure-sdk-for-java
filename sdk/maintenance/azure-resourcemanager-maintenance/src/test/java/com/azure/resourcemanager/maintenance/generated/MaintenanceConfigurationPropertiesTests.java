// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.fluent.models.MaintenanceConfigurationProperties;
import com.azure.resourcemanager.maintenance.models.InputLinuxParameters;
import com.azure.resourcemanager.maintenance.models.InputPatchConfiguration;
import com.azure.resourcemanager.maintenance.models.InputWindowsParameters;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MaintenanceConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MaintenanceConfigurationProperties model = BinaryData.fromString(
            "{\"namespace\":\"xlefgugnxkrx\",\"extensionProperties\":{\"tthzrvqd\":\"i\"},\"maintenanceScope\":\"InGuestPatch\",\"maintenanceWindow\":{\"startDateTime\":\"yb\",\"expirationDateTime\":\"ehoqfbowskan\",\"duration\":\"tzlcuiywgqywgn\",\"timeZone\":\"vynhzgpphrcg\",\"recurEvery\":\"cocpecfvmmcoofsx\"},\"visibility\":\"Custom\",\"installPatches\":{\"rebootSetting\":\"IfRequired\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"qabcypm\",\"vkwlzuvccfwnf\",\"bacfionlebxetq\",\"tzxdpnqbqqwx\"],\"kbNumbersToInclude\":[\"eallnwsubisnj\",\"mpmngnzscxaqwoo\",\"hcbonqvpkvlr\"],\"classificationsToInclude\":[\"ea\",\"eipheoflokeyy\"],\"excludeKbsRequiringReboot\":false},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"lwtgrhpdj\",\"jumasx\",\"zj\"],\"packageNameMasksToInclude\":[\"e\"],\"classificationsToInclude\":[\"lhbxxhejjzzvdud\",\"wdslfhotwmcy\"]}}}")
            .toObject(MaintenanceConfigurationProperties.class);
        Assertions.assertEquals("xlefgugnxkrx", model.namespace());
        Assertions.assertEquals("i", model.extensionProperties().get("tthzrvqd"));
        Assertions.assertEquals(MaintenanceScope.IN_GUEST_PATCH, model.maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, model.visibility());
        Assertions.assertEquals(RebootOptions.IF_REQUIRED, model.installPatches().rebootSetting());
        Assertions.assertEquals("qabcypm", model.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("eallnwsubisnj",
            model.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("ea", model.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(false, model.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("lwtgrhpdj",
            model.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("e", model.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("lhbxxhejjzzvdud",
            model.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("yb", model.startDateTime());
        Assertions.assertEquals("ehoqfbowskan", model.expirationDateTime());
        Assertions.assertEquals("tzlcuiywgqywgn", model.duration());
        Assertions.assertEquals("vynhzgpphrcg", model.timeZone());
        Assertions.assertEquals("cocpecfvmmcoofsx", model.recurEvery());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MaintenanceConfigurationProperties model = new MaintenanceConfigurationProperties()
            .withNamespace("xlefgugnxkrx")
            .withExtensionProperties(mapOf("tthzrvqd", "i"))
            .withMaintenanceScope(MaintenanceScope.IN_GUEST_PATCH)
            .withVisibility(Visibility.CUSTOM)
            .withInstallPatches(new InputPatchConfiguration().withRebootSetting(RebootOptions.IF_REQUIRED)
                .withWindowsParameters(new InputWindowsParameters()
                    .withKbNumbersToExclude(Arrays.asList("qabcypm", "vkwlzuvccfwnf", "bacfionlebxetq", "tzxdpnqbqqwx"))
                    .withKbNumbersToInclude(Arrays.asList("eallnwsubisnj", "mpmngnzscxaqwoo", "hcbonqvpkvlr"))
                    .withClassificationsToInclude(Arrays.asList("ea", "eipheoflokeyy"))
                    .withExcludeKbsRequiringReboot(false))
                .withLinuxParameters(
                    new InputLinuxParameters().withPackageNameMasksToExclude(Arrays.asList("lwtgrhpdj", "jumasx", "zj"))
                        .withPackageNameMasksToInclude(Arrays.asList("e"))
                        .withClassificationsToInclude(Arrays.asList("lhbxxhejjzzvdud", "wdslfhotwmcy"))))
            .withStartDateTime("yb")
            .withExpirationDateTime("ehoqfbowskan")
            .withDuration("tzlcuiywgqywgn")
            .withTimeZone("vynhzgpphrcg")
            .withRecurEvery("cocpecfvmmcoofsx");
        model = BinaryData.fromObject(model).toObject(MaintenanceConfigurationProperties.class);
        Assertions.assertEquals("xlefgugnxkrx", model.namespace());
        Assertions.assertEquals("i", model.extensionProperties().get("tthzrvqd"));
        Assertions.assertEquals(MaintenanceScope.IN_GUEST_PATCH, model.maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, model.visibility());
        Assertions.assertEquals(RebootOptions.IF_REQUIRED, model.installPatches().rebootSetting());
        Assertions.assertEquals("qabcypm", model.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("eallnwsubisnj",
            model.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("ea", model.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(false, model.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("lwtgrhpdj",
            model.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("e", model.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("lhbxxhejjzzvdud",
            model.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("yb", model.startDateTime());
        Assertions.assertEquals("ehoqfbowskan", model.expirationDateTime());
        Assertions.assertEquals("tzlcuiywgqywgn", model.duration());
        Assertions.assertEquals("vynhzgpphrcg", model.timeZone());
        Assertions.assertEquals("cocpecfvmmcoofsx", model.recurEvery());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
