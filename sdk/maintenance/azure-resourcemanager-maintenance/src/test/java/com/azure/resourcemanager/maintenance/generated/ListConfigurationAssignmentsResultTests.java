// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.fluent.models.ConfigurationAssignmentInner;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.ListConfigurationAssignmentsResult;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ListConfigurationAssignmentsResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ListConfigurationAssignmentsResult model = BinaryData.fromString(
            "{\"value\":[{\"location\":\"xpkd\",\"properties\":{\"maintenanceConfigurationId\":\"aiuebbaumnyqu\",\"resourceId\":\"deoj\",\"filter\":{\"resourceTypes\":[\"khsmtxpsiebt\",\"hvpesapskrdqm\",\"jjdhtld\"],\"resourceGroups\":[\"zxuutkncwscwsvl\",\"otogtwrupqs\",\"vnm\"],\"osTypes\":[\"kvceoveilovnotyf\",\"fcnj\",\"k\"],\"locations\":[\"dhbt\"],\"tagSettings\":{\"tags\":{\"ywpnvjt\":[]},\"filterOperator\":\"All\"}}},\"id\":\"rmclfplphoxu\",\"name\":\"crpab\",\"type\":\"ye\"},{\"location\":\"bjtazqugxywpmu\",\"properties\":{\"maintenanceConfigurationId\":\"jzwf\",\"resourceId\":\"q\",\"filter\":{\"resourceTypes\":[\"suyonobglaocq\",\"tcc\",\"g\"],\"resourceGroups\":[\"xy\"],\"osTypes\":[\"oyrxvwfudwpzntxh\",\"zhlrqjb\",\"ck\",\"rlhrxs\"],\"locations\":[\"vpycanuzbp\",\"kafkuwbcrnwbm\",\"hhseyv\",\"us\"],\"tagSettings\":{\"tags\":{\"hspkdeemao\":[],\"mx\":[]},\"filterOperator\":\"All\"}}},\"id\":\"t\",\"name\":\"elmqk\",\"type\":\"hahvljuahaq\"}]}")
            .toObject(ListConfigurationAssignmentsResult.class);
        Assertions.assertEquals("xpkd", model.value().get(0).location());
        Assertions.assertEquals("aiuebbaumnyqu", model.value().get(0).maintenanceConfigurationId());
        Assertions.assertEquals("deoj", model.value().get(0).resourceId());
        Assertions.assertEquals("khsmtxpsiebt", model.value().get(0).filter().resourceTypes().get(0));
        Assertions.assertEquals("zxuutkncwscwsvl", model.value().get(0).filter().resourceGroups().get(0));
        Assertions.assertEquals("kvceoveilovnotyf", model.value().get(0).filter().osTypes().get(0));
        Assertions.assertEquals("dhbt", model.value().get(0).filter().locations().get(0));
        Assertions.assertEquals(TagOperators.ALL, model.value().get(0).filter().tagSettings().filterOperator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ListConfigurationAssignmentsResult model = new ListConfigurationAssignmentsResult().withValue(Arrays.asList(
            new ConfigurationAssignmentInner().withLocation("xpkd")
                .withMaintenanceConfigurationId("aiuebbaumnyqu")
                .withResourceId("deoj")
                .withFilter(new ConfigurationAssignmentFilterProperties()
                    .withResourceTypes(Arrays.asList("khsmtxpsiebt", "hvpesapskrdqm", "jjdhtld"))
                    .withResourceGroups(Arrays.asList("zxuutkncwscwsvl", "otogtwrupqs", "vnm"))
                    .withOsTypes(Arrays.asList("kvceoveilovnotyf", "fcnj", "k"))
                    .withLocations(Arrays.asList("dhbt"))
                    .withTagSettings(new TagSettingsProperties().withTags(mapOf("ywpnvjt", Arrays.asList()))
                        .withFilterOperator(TagOperators.ALL))),
            new ConfigurationAssignmentInner().withLocation("bjtazqugxywpmu")
                .withMaintenanceConfigurationId("jzwf")
                .withResourceId("q")
                .withFilter(new ConfigurationAssignmentFilterProperties()
                    .withResourceTypes(Arrays.asList("suyonobglaocq", "tcc", "g"))
                    .withResourceGroups(Arrays.asList("xy"))
                    .withOsTypes(Arrays.asList("oyrxvwfudwpzntxh", "zhlrqjb", "ck", "rlhrxs"))
                    .withLocations(Arrays.asList("vpycanuzbp", "kafkuwbcrnwbm", "hhseyv", "us"))
                    .withTagSettings(new TagSettingsProperties()
                        .withTags(mapOf("hspkdeemao", Arrays.asList(), "mx", Arrays.asList()))
                        .withFilterOperator(TagOperators.ALL)))));
        model = BinaryData.fromObject(model).toObject(ListConfigurationAssignmentsResult.class);
        Assertions.assertEquals("xpkd", model.value().get(0).location());
        Assertions.assertEquals("aiuebbaumnyqu", model.value().get(0).maintenanceConfigurationId());
        Assertions.assertEquals("deoj", model.value().get(0).resourceId());
        Assertions.assertEquals("khsmtxpsiebt", model.value().get(0).filter().resourceTypes().get(0));
        Assertions.assertEquals("zxuutkncwscwsvl", model.value().get(0).filter().resourceGroups().get(0));
        Assertions.assertEquals("kvceoveilovnotyf", model.value().get(0).filter().osTypes().get(0));
        Assertions.assertEquals("dhbt", model.value().get(0).filter().locations().get(0));
        Assertions.assertEquals(TagOperators.ALL, model.value().get(0).filter().tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
