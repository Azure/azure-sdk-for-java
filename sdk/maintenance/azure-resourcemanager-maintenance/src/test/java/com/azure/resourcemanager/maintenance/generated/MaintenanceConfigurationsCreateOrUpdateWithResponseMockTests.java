// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.InputLinuxParameters;
import com.azure.resourcemanager.maintenance.models.InputPatchConfiguration;
import com.azure.resourcemanager.maintenance.models.InputWindowsParameters;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfiguration;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MaintenanceConfigurationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"location\":\"ywdxsmic\",\"tags\":{\"nszqujiz\":\"wfscjfn\",\"byowbblgyavutp\":\"voqyt\",\"smsks\":\"hjoxo\",\"lqol\":\"pi\"},\"properties\":{\"namespace\":\"cgxxlxs\",\"extensionProperties\":{\"youpfgfbkj\":\"cvizqzdwlvw\",\"ttsttktlahbqact\":\"bdyhgkfminsgowz\",\"qqqxhrnxrx\":\"tgzukxitmmqt\",\"av\":\"pjui\"},\"maintenanceScope\":\"Extension\",\"maintenanceWindow\":{\"startDateTime\":\"fvazivjlfrqttba\",\"expirationDateTime\":\"katnwxyi\",\"duration\":\"id\",\"timeZone\":\"qfkuvscxkdmli\",\"recurEvery\":\"vibrxkpmloazuruo\"},\"visibility\":\"Custom\",\"installPatches\":{\"rebootSetting\":\"Never\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"oybfhjxakvvj\",\"slordilmyww\",\"kgkxn\",\"edabgyvudtjue\"],\"kbNumbersToInclude\":[\"ihxuuwh\",\"j\",\"xccybvpa\"],\"classificationsToInclude\":[\"kudzpxgwj\",\"lma\"],\"excludeKbsRequiringReboot\":true},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"hpfkyrkdbdgi\",\"gsj\",\"mnwqj\",\"obaiyhddviaceg\"],\"packageNameMasksToInclude\":[\"ntfpmvmemfnc\"],\"classificationsToInclude\":[\"vvbalx\"]}}},\"id\":\"lchpodbzevwrdn\",\"name\":\"fukuvsjcswsmystu\",\"type\":\"uqypfcvle\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MaintenanceManager manager =
            MaintenanceManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MaintenanceConfiguration response =
            manager
                .maintenanceConfigurations()
                .define("qgzsles")
                .withExistingResourceGroup("ayjkqa")
                .withRegion("bhernntiew")
                .withTags(mapOf("ehwagoh", "vbquwr"))
                .withNamespace("fkmr")
                .withExtensionProperties(
                    mapOf(
                        "utacoe",
                        "vvhmxtdrj",
                        "guaadraufactkahz",
                        "jvewzcjznmwcp",
                        "jjziuxxpsh",
                        "v",
                        "enr",
                        "eekulfgslqubkwd"))
                .withMaintenanceScope(MaintenanceScope.RESOURCE)
                .withVisibility(Visibility.PUBLIC)
                .withInstallPatches(
                    new InputPatchConfiguration()
                        .withRebootSetting(RebootOptions.IF_REQUIRED)
                        .withWindowsParameters(
                            new InputWindowsParameters()
                                .withKbNumbersToExclude(Arrays.asList("sukokwbqplhl", "nuuepzlrp", "wzsoldweyuqdunv"))
                                .withKbNumbersToInclude(Arrays.asList("rwrbi", "rk", "alywjhhgdn"))
                                .withClassificationsToInclude(Arrays.asList("sivfomilo"))
                                .withExcludeKbsRequiringReboot(false))
                        .withLinuxParameters(
                            new InputLinuxParameters()
                                .withPackageNameMasksToExclude(Arrays.asList("iqndieuzaofj"))
                                .withPackageNameMasksToInclude(Arrays.asList("cyyysfgdot"))
                                .withClassificationsToInclude(Arrays.asList("iipuipwoqonm", "cje"))))
                .withStartDateTime("jbazpjuohminy")
                .withExpirationDateTime("norwmduvwpklvx")
                .withDuration("ygdxpgpqchis")
                .withTimeZone("pnnbjc")
                .withRecurEvery("gibbdaxc")
                .create();

        Assertions.assertEquals("ywdxsmic", response.location());
        Assertions.assertEquals("wfscjfn", response.tags().get("nszqujiz"));
        Assertions.assertEquals("cgxxlxs", response.namespace());
        Assertions.assertEquals("cvizqzdwlvw", response.extensionProperties().get("youpfgfbkj"));
        Assertions.assertEquals(MaintenanceScope.EXTENSION, response.maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, response.visibility());
        Assertions.assertEquals(RebootOptions.NEVER, response.installPatches().rebootSetting());
        Assertions
            .assertEquals("oybfhjxakvvj", response.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("ihxuuwh", response.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions
            .assertEquals("kudzpxgwj", response.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true, response.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions
            .assertEquals(
                "hpfkyrkdbdgi", response.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions
            .assertEquals(
                "ntfpmvmemfnc", response.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions
            .assertEquals("vvbalx", response.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("fvazivjlfrqttba", response.startDateTime());
        Assertions.assertEquals("katnwxyi", response.expirationDateTime());
        Assertions.assertEquals("id", response.duration());
        Assertions.assertEquals("qfkuvscxkdmli", response.timeZone());
        Assertions.assertEquals("vibrxkpmloazuruo", response.recurEvery());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
