// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.InputLinuxParameters;
import com.azure.resourcemanager.maintenance.models.InputPatchConfiguration;
import com.azure.resourcemanager.maintenance.models.InputWindowsParameters;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfiguration;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MaintenanceConfigurationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"vwrdnhfukuvsj\",\"tags\":{\"lerchpq\":\"smystuluqypfc\",\"dfc\":\"mfpjbabw\",\"qddrihpfhoqcaae\":\"sspuunnoxyhkx\",\"djvlpj\":\"dao\"},\"properties\":{\"namespace\":\"zb\",\"extensionProperties\":{\"xonbzoggculapz\":\"geivsiykzkdncj\",\"pgogtqxepny\":\"y\"},\"maintenanceScope\":\"SQLManagedInstance\",\"maintenanceWindow\":{\"startDateTime\":\"jlyjtlvofq\",\"expirationDateTime\":\"vfcibyfmowux\",\"duration\":\"jpvd\",\"timeZone\":\"fzwiivwzjbhyz\",\"recurEvery\":\"jrkambtrnegvmnv\"},\"visibility\":\"Public\",\"installPatches\":{\"rebootSetting\":\"Always\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"astjbkkdmflvestm\"],\"kbNumbersToInclude\":[\"rriloz\",\"peewchpxlkt\",\"kuziycsle\"],\"classificationsToInclude\":[\"uztcktyhjtqed\"],\"excludeKbsRequiringReboot\":true},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"mmrqz\",\"rr\"],\"packageNameMasksToInclude\":[\"gl\",\"dzgkr\"],\"classificationsToInclude\":[\"ev\"]}}},\"id\":\"epr\",\"name\":\"utnwytpzdmovzvf\",\"type\":\"aawzqadfl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MaintenanceConfiguration response = manager.maintenanceConfigurations()
            .define("gyavu")
            .withExistingResourceGroup("zdvoqytibyowbb")
            .withRegion("thjoxoism")
            .withTags(mapOf("sffgcvizqzd", "bpimlqoljxkcgxxl", "w", "l"))
            .withNamespace("upfgfbk")
            .withExtensionProperties(mapOf("wzf", "dyhgkfminsg", "ctxtgzukxi", "tsttktlahbq", "xrxc", "mmqtgqqqxhr",
                "azivjlfrqttbajl", "juisavokqdzf"))
            .withMaintenanceScope(MaintenanceScope.IN_GUEST_PATCH)
            .withVisibility(Visibility.PUBLIC)
            .withInstallPatches(new InputPatchConfiguration().withRebootSetting(RebootOptions.ALWAYS)
                .withWindowsParameters(
                    new InputWindowsParameters().withKbNumbersToExclude(Arrays.asList("vvjgslor", "il", "yw", "t"))
                        .withKbNumbersToInclude(Arrays.asList("xnyed"))
                        .withClassificationsToInclude(Arrays.asList("yvudtjuewbci", "xuuwhcj", "xccybvpa"))
                        .withExcludeKbsRequiringReboot(false))
                .withLinuxParameters(new InputLinuxParameters()
                    .withPackageNameMasksToExclude(Arrays.asList("zp", "gwjplmag", "tcyohpfkyrk"))
                    .withPackageNameMasksToInclude(Arrays.asList("giogsjkmnwqjno"))
                    .withClassificationsToInclude(Arrays.asList("yhddvia", "egfnmntfpmvmemfn"))))
            .withStartDateTime("xyiopidkqqfku")
            .withExpirationDateTime("cxkdmligovi")
            .withDuration("xk")
            .withTimeZone("loazuruocbgoo")
            .withRecurEvery("te")
            .create();

        Assertions.assertEquals("vwrdnhfukuvsj", response.location());
        Assertions.assertEquals("smystuluqypfc", response.tags().get("lerchpq"));
        Assertions.assertEquals("zb", response.namespace());
        Assertions.assertEquals("geivsiykzkdncj", response.extensionProperties().get("xonbzoggculapz"));
        Assertions.assertEquals(MaintenanceScope.SQLMANAGED_INSTANCE, response.maintenanceScope());
        Assertions.assertEquals(Visibility.PUBLIC, response.visibility());
        Assertions.assertEquals(RebootOptions.ALWAYS, response.installPatches().rebootSetting());
        Assertions.assertEquals("astjbkkdmflvestm",
            response.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("rriloz", response.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("uztcktyhjtqed",
            response.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true, response.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("mmrqz",
            response.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("gl", response.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("ev", response.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("jlyjtlvofq", response.startDateTime());
        Assertions.assertEquals("vfcibyfmowux", response.expirationDateTime());
        Assertions.assertEquals("jpvd", response.duration());
        Assertions.assertEquals("fzwiivwzjbhyz", response.timeZone());
        Assertions.assertEquals("jrkambtrnegvmnv", response.recurEvery());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
