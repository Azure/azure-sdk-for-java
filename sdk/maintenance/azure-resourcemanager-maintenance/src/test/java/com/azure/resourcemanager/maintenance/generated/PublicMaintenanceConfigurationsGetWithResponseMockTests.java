// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.maintenance.MaintenanceManager;
import com.azure.resourcemanager.maintenance.models.MaintenanceConfiguration;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PublicMaintenanceConfigurationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"aruoujmkcjhwqyt\",\"tags\":{\"ewgdrjervn\":\"bnw\"},\"properties\":{\"namespace\":\"qp\",\"extensionProperties\":{\"l\":\"ndoygmifthnzdnd\",\"ynduha\":\"nayqi\",\"bgycduiertgccym\":\"hqlkthumaqo\",\"lqlfm\":\"aolps\"},\"maintenanceScope\":\"Extension\",\"maintenanceWindow\":{\"startDateTime\":\"glzpswiydm\",\"expirationDateTime\":\"yhz\",\"duration\":\"ss\",\"timeZone\":\"bzmnvdfznud\",\"recurEvery\":\"dvxzbncblylpst\"},\"visibility\":\"Custom\",\"installPatches\":{\"rebootSetting\":\"Always\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"zucerscdntnev\"],\"kbNumbersToInclude\":[\"jmygtdsslswtmwer\"],\"classificationsToInclude\":[\"zpyqsemwab\"],\"excludeKbsRequiringReboot\":true},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"szhedplvw\",\"wubmwmbesldn\",\"wwtppj\",\"lcxog\"],\"packageNameMasksToInclude\":[\"onz\",\"nsikvmkqzeqqkdl\",\"fzxmhhvhgureodkw\"],\"classificationsToInclude\":[\"agxti\",\"qdxbxwa\",\"bogqxndlkzgxhu\"]}}},\"id\":\"plbpodxun\",\"name\":\"bebxmubyyntwl\",\"type\":\"bqtkoievseotgqr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MaintenanceManager manager = MaintenanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MaintenanceConfiguration response = manager.publicMaintenanceConfigurations()
            .getWithResponse("vwpm", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("aruoujmkcjhwqyt", response.location());
        Assertions.assertEquals("bnw", response.tags().get("ewgdrjervn"));
        Assertions.assertEquals("qp", response.namespace());
        Assertions.assertEquals("ndoygmifthnzdnd", response.extensionProperties().get("l"));
        Assertions.assertEquals(MaintenanceScope.EXTENSION, response.maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, response.visibility());
        Assertions.assertEquals(RebootOptions.ALWAYS, response.installPatches().rebootSetting());
        Assertions.assertEquals("zucerscdntnev",
            response.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("jmygtdsslswtmwer",
            response.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("zpyqsemwab",
            response.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true, response.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("szhedplvw",
            response.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("onz", response.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("agxti", response.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("glzpswiydm", response.startDateTime());
        Assertions.assertEquals("yhz", response.expirationDateTime());
        Assertions.assertEquals("ss", response.duration());
        Assertions.assertEquals("bzmnvdfznud", response.timeZone());
        Assertions.assertEquals("dvxzbncblylpst", response.recurEvery());
    }
}
