// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.fluent.models.MaintenanceConfigurationInner;
import com.azure.resourcemanager.maintenance.models.InputLinuxParameters;
import com.azure.resourcemanager.maintenance.models.InputPatchConfiguration;
import com.azure.resourcemanager.maintenance.models.InputWindowsParameters;
import com.azure.resourcemanager.maintenance.models.ListMaintenanceConfigurationsResult;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ListMaintenanceConfigurationsResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ListMaintenanceConfigurationsResult model = BinaryData.fromString(
            "{\"value\":[{\"location\":\"m\",\"tags\":{\"bejhphoycmsxa\":\"tzopbsphrupidgsy\"},\"properties\":{\"namespace\":\"dxbmtqioq\",\"extensionProperties\":{\"ownoizhw\":\"htbmuf\",\"jgkdmbpazlobcu\":\"rxybqsoq\"},\"maintenanceScope\":\"Host\",\"maintenanceWindow\":{\"startDateTime\":\"rbt\",\"expirationDateTime\":\"qjnqglhqgnufoooj\",\"duration\":\"ifsqesaagdfmg\",\"timeZone\":\"lhjxr\",\"recurEvery\":\"kwm\"},\"visibility\":\"Public\",\"installPatches\":{\"rebootSetting\":\"IfRequired\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"ocipaouajpsqucm\"],\"kbNumbersToInclude\":[\"fdkfogk\"],\"classificationsToInclude\":[\"jofjd\",\"eqsrdeupewnwreit\"],\"excludeKbsRequiringReboot\":true},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"sarhmofc\",\"hs\",\"yurkdtmlxhekuksj\"],\"packageNameMasksToInclude\":[\"kc\",\"mparcryuanzw\",\"xzdxtayrlhmwh\",\"pmrqobm\"],\"classificationsToInclude\":[\"knryrtihfxtij\",\"pzvgnwzsymglzufc\",\"zk\"]}}},\"id\":\"dbihanufhfcbj\",\"name\":\"s\",\"type\":\"git\"},{\"location\":\"qhabifpikxwcz\",\"tags\":{\"rkxvdum\":\"cnpqxuhivyqniwby\",\"xgaudccs\":\"grtfwvu\",\"jcny\":\"h\"},\"properties\":{\"namespace\":\"kryhtnapczwlokj\",\"extensionProperties\":{\"jnchgej\":\"kkvnipjox\",\"huxinpmqnj\":\"podmailzydehojwy\"},\"maintenanceScope\":\"SQLManagedInstance\",\"maintenanceWindow\":{\"startDateTime\":\"jsprozvcpute\",\"expirationDateTime\":\"vwmf\",\"duration\":\"t\",\"timeZone\":\"mdvpjhulsu\",\"recurEvery\":\"mkjozkrwf\"},\"visibility\":\"Custom\",\"installPatches\":{\"rebootSetting\":\"Never\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"w\",\"jdpvwryo\"],\"kbNumbersToInclude\":[\"oacctaza\",\"ljlahbcryf\",\"dfdosygexp\"],\"classificationsToInclude\":[\"akhmsbzjhcrz\",\"vdphlxaolthqtr\",\"qjbpfzfsin\"],\"excludeKbsRequiringReboot\":false},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"rwzoxxjtfelluwf\",\"it\"],\"packageNameMasksToInclude\":[\"eqfpj\",\"jlxofpdvhpfxxyp\",\"ninmayhuyb\"],\"classificationsToInclude\":[\"odepoogin\",\"vamih\"]}}},\"id\":\"gnarxzxtheo\",\"name\":\"usivye\",\"type\":\"cciqihnhungbwjz\"},{\"location\":\"fygxgispemvtzfk\",\"tags\":{\"aeqjhqjbasvms\":\"bljofxqeof\",\"gsntnbybkzgcwr\":\"jqul\",\"skcqvkocrcjd\":\"clxxwrljdo\"},\"properties\":{\"namespace\":\"nh\",\"extensionProperties\":{\"qpjwnzlljfm\":\"jbiksqrglssai\",\"vmgxsab\":\"pee\",\"jczdzevndh\":\"yqduujit\",\"feusnhut\":\"rwpdappdsbdkvwrw\"},\"maintenanceScope\":\"OSImage\",\"maintenanceWindow\":{\"startDateTime\":\"rl\",\"expirationDateTime\":\"ugjzzdatqxhocdge\",\"duration\":\"lgphu\",\"timeZone\":\"cndvkaozwyiftyhx\",\"recurEvery\":\"rokft\"},\"visibility\":\"Public\",\"installPatches\":{\"rebootSetting\":\"Always\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"cukjf\",\"giawx\",\"lryplwckbasyy\",\"nddhsgcbacph\"],\"kbNumbersToInclude\":[\"ot\"],\"classificationsToInclude\":[\"gou\",\"zndlikwy\"],\"excludeKbsRequiringReboot\":false},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"bmadgak\",\"qsrxybzqqed\",\"ytb\",\"iqfouflmmnkz\"],\"packageNameMasksToInclude\":[\"dmgloug\",\"b\"],\"classificationsToInclude\":[\"mutduqktaps\"]}}},\"id\":\"gcue\",\"name\":\"tumkdosvqwhbm\",\"type\":\"gbbjfddgmbmbe\"},{\"location\":\"pbhtqqrolfpfpsa\",\"tags\":{\"gjyjgzjaoyfhrtxi\":\"qux\",\"rkujy\":\"n\"},\"properties\":{\"namespace\":\"eju\",\"extensionProperties\":{\"jkcpr\":\"awrlyx\",\"nruj\":\"nwbxgjvtbvpyssz\",\"zw\":\"guhmuouqfpr\"},\"maintenanceScope\":\"Resource\",\"maintenanceWindow\":{\"startDateTime\":\"tnwu\",\"expirationDateTime\":\"gazxuf\",\"duration\":\"uckyf\",\"timeZone\":\"rfidfvzwdz\",\"recurEvery\":\"tymw\"},\"visibility\":\"Public\",\"installPatches\":{\"rebootSetting\":\"Always\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"mnteiwao\",\"vkmijcmmxdcuf\",\"fsrpymzidnse\"],\"kbNumbersToInclude\":[\"tbzsgfyccs\",\"ewmdw\",\"jeiachboosfl\",\"ro\"],\"classificationsToInclude\":[\"pteehzzv\",\"pyqr\"],\"excludeKbsRequiringReboot\":false},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"vswjdk\",\"rsoodqxhcrmnoh\",\"t\"],\"packageNameMasksToInclude\":[\"h\",\"soifiyipjxsqw\",\"gr\"],\"classificationsToInclude\":[\"norcjxvsnbyxqab\",\"mocpc\"]}}},\"id\":\"hurzafblj\",\"name\":\"gpbtoqcjmklj\",\"type\":\"vbqid\"}]}")
            .toObject(ListMaintenanceConfigurationsResult.class);
        Assertions.assertEquals("m", model.value().get(0).location());
        Assertions.assertEquals("tzopbsphrupidgsy", model.value().get(0).tags().get("bejhphoycmsxa"));
        Assertions.assertEquals("dxbmtqioq", model.value().get(0).namespace());
        Assertions.assertEquals("htbmuf", model.value().get(0).extensionProperties().get("ownoizhw"));
        Assertions.assertEquals(MaintenanceScope.HOST, model.value().get(0).maintenanceScope());
        Assertions.assertEquals(Visibility.PUBLIC, model.value().get(0).visibility());
        Assertions.assertEquals(RebootOptions.IF_REQUIRED, model.value().get(0).installPatches().rebootSetting());
        Assertions.assertEquals("ocipaouajpsqucm",
            model.value().get(0).installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("fdkfogk",
            model.value().get(0).installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("jofjd",
            model.value().get(0).installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true,
            model.value().get(0).installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("sarhmofc",
            model.value().get(0).installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("kc",
            model.value().get(0).installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("knryrtihfxtij",
            model.value().get(0).installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("rbt", model.value().get(0).startDateTime());
        Assertions.assertEquals("qjnqglhqgnufoooj", model.value().get(0).expirationDateTime());
        Assertions.assertEquals("ifsqesaagdfmg", model.value().get(0).duration());
        Assertions.assertEquals("lhjxr", model.value().get(0).timeZone());
        Assertions.assertEquals("kwm", model.value().get(0).recurEvery());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ListMaintenanceConfigurationsResult model
            = new ListMaintenanceConfigurationsResult()
                .withValue(
                    Arrays
                        .asList(
                            new MaintenanceConfigurationInner().withLocation("m")
                                .withTags(mapOf("bejhphoycmsxa", "tzopbsphrupidgsy"))
                                .withNamespace("dxbmtqioq")
                                .withExtensionProperties(mapOf("ownoizhw", "htbmuf", "jgkdmbpazlobcu", "rxybqsoq"))
                                .withMaintenanceScope(MaintenanceScope.HOST)
                                .withVisibility(Visibility.PUBLIC)
                                .withInstallPatches(new InputPatchConfiguration()
                                    .withRebootSetting(RebootOptions.IF_REQUIRED)
                                    .withWindowsParameters(new InputWindowsParameters()
                                        .withKbNumbersToExclude(Arrays.asList("ocipaouajpsqucm"))
                                        .withKbNumbersToInclude(Arrays.asList("fdkfogk"))
                                        .withClassificationsToInclude(Arrays.asList("jofjd", "eqsrdeupewnwreit"))
                                        .withExcludeKbsRequiringReboot(true))
                                    .withLinuxParameters(new InputLinuxParameters()
                                        .withPackageNameMasksToExclude(
                                            Arrays.asList("sarhmofc", "hs", "yurkdtmlxhekuksj"))
                                        .withPackageNameMasksToInclude(
                                            Arrays.asList("kc", "mparcryuanzw", "xzdxtayrlhmwh", "pmrqobm"))
                                        .withClassificationsToInclude(
                                            Arrays.asList("knryrtihfxtij", "pzvgnwzsymglzufc", "zk"))))
                                .withStartDateTime("rbt")
                                .withExpirationDateTime("qjnqglhqgnufoooj")
                                .withDuration("ifsqesaagdfmg")
                                .withTimeZone("lhjxr")
                                .withRecurEvery("kwm"),
                            new MaintenanceConfigurationInner().withLocation("qhabifpikxwcz")
                                .withTags(mapOf("rkxvdum", "cnpqxuhivyqniwby", "xgaudccs", "grtfwvu", "jcny", "h"))
                                .withNamespace("kryhtnapczwlokj")
                                .withExtensionProperties(
                                    mapOf("jnchgej", "kkvnipjox", "huxinpmqnj", "podmailzydehojwy"))
                                .withMaintenanceScope(MaintenanceScope.SQLMANAGED_INSTANCE)
                                .withVisibility(Visibility.CUSTOM)
                                .withInstallPatches(new InputPatchConfiguration().withRebootSetting(RebootOptions.NEVER)
                                    .withWindowsParameters(new InputWindowsParameters()
                                        .withKbNumbersToExclude(Arrays.asList("w", "jdpvwryo"))
                                        .withKbNumbersToInclude(Arrays.asList("oacctaza", "ljlahbcryf", "dfdosygexp"))
                                        .withClassificationsToInclude(
                                            Arrays.asList("akhmsbzjhcrz", "vdphlxaolthqtr", "qjbpfzfsin"))
                                        .withExcludeKbsRequiringReboot(false))
                                    .withLinuxParameters(new InputLinuxParameters()
                                        .withPackageNameMasksToExclude(Arrays.asList("rwzoxxjtfelluwf", "it"))
                                        .withPackageNameMasksToInclude(
                                            Arrays.asList("eqfpj", "jlxofpdvhpfxxyp", "ninmayhuyb"))
                                        .withClassificationsToInclude(Arrays.asList("odepoogin", "vamih"))))
                                .withStartDateTime("jsprozvcpute")
                                .withExpirationDateTime("vwmf")
                                .withDuration("t")
                                .withTimeZone("mdvpjhulsu")
                                .withRecurEvery("mkjozkrwf"),
                            new MaintenanceConfigurationInner().withLocation("fygxgispemvtzfk")
                                .withTags(mapOf("aeqjhqjbasvms", "bljofxqeof", "gsntnbybkzgcwr", "jqul", "skcqvkocrcjd",
                                    "clxxwrljdo"))
                                .withNamespace("nh")
                                .withExtensionProperties(mapOf("qpjwnzlljfm", "jbiksqrglssai", "vmgxsab", "pee",
                                    "jczdzevndh", "yqduujit", "feusnhut", "rwpdappdsbdkvwrw"))
                                .withMaintenanceScope(MaintenanceScope.OSIMAGE)
                                .withVisibility(Visibility.PUBLIC)
                                .withInstallPatches(new InputPatchConfiguration()
                                    .withRebootSetting(RebootOptions.ALWAYS)
                                    .withWindowsParameters(new InputWindowsParameters()
                                        .withKbNumbersToExclude(
                                            Arrays.asList("cukjf", "giawx", "lryplwckbasyy", "nddhsgcbacph"))
                                        .withKbNumbersToInclude(Arrays.asList("ot"))
                                        .withClassificationsToInclude(Arrays.asList("gou", "zndlikwy"))
                                        .withExcludeKbsRequiringReboot(false))
                                    .withLinuxParameters(new InputLinuxParameters()
                                        .withPackageNameMasksToExclude(
                                            Arrays.asList("bmadgak", "qsrxybzqqed", "ytb", "iqfouflmmnkz"))
                                        .withPackageNameMasksToInclude(Arrays.asList("dmgloug", "b"))
                                        .withClassificationsToInclude(Arrays.asList("mutduqktaps"))))
                                .withStartDateTime("rl")
                                .withExpirationDateTime("ugjzzdatqxhocdge")
                                .withDuration("lgphu")
                                .withTimeZone("cndvkaozwyiftyhx")
                                .withRecurEvery("rokft"),
                            new MaintenanceConfigurationInner().withLocation("pbhtqqrolfpfpsa")
                                .withTags(mapOf("gjyjgzjaoyfhrtxi", "qux", "rkujy", "n"))
                                .withNamespace("eju")
                                .withExtensionProperties(
                                    mapOf("jkcpr", "awrlyx", "nruj", "nwbxgjvtbvpyssz", "zw", "guhmuouqfpr"))
                                .withMaintenanceScope(MaintenanceScope.RESOURCE)
                                .withVisibility(Visibility.PUBLIC)
                                .withInstallPatches(
                                    new InputPatchConfiguration().withRebootSetting(RebootOptions.ALWAYS)
                                        .withWindowsParameters(new InputWindowsParameters()
                                            .withKbNumbersToExclude(
                                                Arrays.asList("mnteiwao", "vkmijcmmxdcuf", "fsrpymzidnse"))
                                            .withKbNumbersToInclude(
                                                Arrays.asList("tbzsgfyccs", "ewmdw", "jeiachboosfl", "ro"))
                                            .withClassificationsToInclude(Arrays.asList("pteehzzv", "pyqr"))
                                            .withExcludeKbsRequiringReboot(false))
                                        .withLinuxParameters(new InputLinuxParameters()
                                            .withPackageNameMasksToExclude(
                                                Arrays.asList("vswjdk", "rsoodqxhcrmnoh", "t"))
                                            .withPackageNameMasksToInclude(Arrays.asList("h", "soifiyipjxsqw", "gr"))
                                            .withClassificationsToInclude(Arrays.asList("norcjxvsnbyxqab", "mocpc"))))
                                .withStartDateTime("tnwu")
                                .withExpirationDateTime("gazxuf")
                                .withDuration("uckyf")
                                .withTimeZone("rfidfvzwdz")
                                .withRecurEvery("tymw")));
        model = BinaryData.fromObject(model).toObject(ListMaintenanceConfigurationsResult.class);
        Assertions.assertEquals("m", model.value().get(0).location());
        Assertions.assertEquals("tzopbsphrupidgsy", model.value().get(0).tags().get("bejhphoycmsxa"));
        Assertions.assertEquals("dxbmtqioq", model.value().get(0).namespace());
        Assertions.assertEquals("htbmuf", model.value().get(0).extensionProperties().get("ownoizhw"));
        Assertions.assertEquals(MaintenanceScope.HOST, model.value().get(0).maintenanceScope());
        Assertions.assertEquals(Visibility.PUBLIC, model.value().get(0).visibility());
        Assertions.assertEquals(RebootOptions.IF_REQUIRED, model.value().get(0).installPatches().rebootSetting());
        Assertions.assertEquals("ocipaouajpsqucm",
            model.value().get(0).installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("fdkfogk",
            model.value().get(0).installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("jofjd",
            model.value().get(0).installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true,
            model.value().get(0).installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("sarhmofc",
            model.value().get(0).installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("kc",
            model.value().get(0).installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("knryrtihfxtij",
            model.value().get(0).installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("rbt", model.value().get(0).startDateTime());
        Assertions.assertEquals("qjnqglhqgnufoooj", model.value().get(0).expirationDateTime());
        Assertions.assertEquals("ifsqesaagdfmg", model.value().get(0).duration());
        Assertions.assertEquals("lhjxr", model.value().get(0).timeZone());
        Assertions.assertEquals("kwm", model.value().get(0).recurEvery());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
