// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maintenance.fluent.models.MaintenanceConfigurationInner;
import com.azure.resourcemanager.maintenance.models.InputLinuxParameters;
import com.azure.resourcemanager.maintenance.models.InputPatchConfiguration;
import com.azure.resourcemanager.maintenance.models.InputWindowsParameters;
import com.azure.resourcemanager.maintenance.models.MaintenanceScope;
import com.azure.resourcemanager.maintenance.models.RebootOptions;
import com.azure.resourcemanager.maintenance.models.Visibility;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MaintenanceConfigurationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MaintenanceConfigurationInner model = BinaryData.fromString(
            "{\"location\":\"ajzyul\",\"tags\":{\"rlkhbzhfepgzgq\":\"dj\"},\"properties\":{\"namespace\":\"locx\",\"extensionProperties\":{\"sglumma\":\"aierhhb\",\"xkqpxo\":\"tjaodxobnb\"},\"maintenanceScope\":\"Resource\",\"maintenanceWindow\":{\"startDateTime\":\"npime\",\"expirationDateTime\":\"stxgc\",\"duration\":\"dg\",\"timeZone\":\"ajrmvdjwzrlovmc\",\"recurEvery\":\"hijco\"},\"visibility\":\"Custom\",\"installPatches\":{\"rebootSetting\":\"Never\",\"windowsParameters\":{\"kbNumbersToExclude\":[\"qsycbkbfkgu\"],\"kbNumbersToInclude\":[\"exxppofmxaxcfjp\",\"ddtocjjxhvp\"],\"classificationsToInclude\":[\"exhd\",\"xibqeojnx\"],\"excludeKbsRequiringReboot\":true},\"linuxParameters\":{\"packageNameMasksToExclude\":[\"ntwndeicbtwnpzao\",\"vuhrhcffcyddgl\",\"jthjqkwpyei\"],\"packageNameMasksToInclude\":[\"qciwqvhkhixuigdt\"],\"classificationsToInclude\":[\"objoghmewu\"]}}},\"id\":\"a\",\"name\":\"hrzayvvtpgvdf\",\"type\":\"iotkftutqxl\"}")
            .toObject(MaintenanceConfigurationInner.class);
        Assertions.assertEquals("ajzyul", model.location());
        Assertions.assertEquals("dj", model.tags().get("rlkhbzhfepgzgq"));
        Assertions.assertEquals("locx", model.namespace());
        Assertions.assertEquals("aierhhb", model.extensionProperties().get("sglumma"));
        Assertions.assertEquals(MaintenanceScope.RESOURCE, model.maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, model.visibility());
        Assertions.assertEquals(RebootOptions.NEVER, model.installPatches().rebootSetting());
        Assertions.assertEquals("qsycbkbfkgu", model.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("exxppofmxaxcfjp",
            model.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("exhd", model.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true, model.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("ntwndeicbtwnpzao",
            model.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("qciwqvhkhixuigdt",
            model.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("objoghmewu",
            model.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("npime", model.startDateTime());
        Assertions.assertEquals("stxgc", model.expirationDateTime());
        Assertions.assertEquals("dg", model.duration());
        Assertions.assertEquals("ajrmvdjwzrlovmc", model.timeZone());
        Assertions.assertEquals("hijco", model.recurEvery());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MaintenanceConfigurationInner model = new MaintenanceConfigurationInner().withLocation("ajzyul")
            .withTags(mapOf("rlkhbzhfepgzgq", "dj"))
            .withNamespace("locx")
            .withExtensionProperties(mapOf("sglumma", "aierhhb", "xkqpxo", "tjaodxobnb"))
            .withMaintenanceScope(MaintenanceScope.RESOURCE)
            .withVisibility(Visibility.CUSTOM)
            .withInstallPatches(new InputPatchConfiguration().withRebootSetting(RebootOptions.NEVER)
                .withWindowsParameters(new InputWindowsParameters().withKbNumbersToExclude(Arrays.asList("qsycbkbfkgu"))
                    .withKbNumbersToInclude(Arrays.asList("exxppofmxaxcfjp", "ddtocjjxhvp"))
                    .withClassificationsToInclude(Arrays.asList("exhd", "xibqeojnx"))
                    .withExcludeKbsRequiringReboot(true))
                .withLinuxParameters(new InputLinuxParameters()
                    .withPackageNameMasksToExclude(Arrays.asList("ntwndeicbtwnpzao", "vuhrhcffcyddgl", "jthjqkwpyei"))
                    .withPackageNameMasksToInclude(Arrays.asList("qciwqvhkhixuigdt"))
                    .withClassificationsToInclude(Arrays.asList("objoghmewu"))))
            .withStartDateTime("npime")
            .withExpirationDateTime("stxgc")
            .withDuration("dg")
            .withTimeZone("ajrmvdjwzrlovmc")
            .withRecurEvery("hijco");
        model = BinaryData.fromObject(model).toObject(MaintenanceConfigurationInner.class);
        Assertions.assertEquals("ajzyul", model.location());
        Assertions.assertEquals("dj", model.tags().get("rlkhbzhfepgzgq"));
        Assertions.assertEquals("locx", model.namespace());
        Assertions.assertEquals("aierhhb", model.extensionProperties().get("sglumma"));
        Assertions.assertEquals(MaintenanceScope.RESOURCE, model.maintenanceScope());
        Assertions.assertEquals(Visibility.CUSTOM, model.visibility());
        Assertions.assertEquals(RebootOptions.NEVER, model.installPatches().rebootSetting());
        Assertions.assertEquals("qsycbkbfkgu", model.installPatches().windowsParameters().kbNumbersToExclude().get(0));
        Assertions.assertEquals("exxppofmxaxcfjp",
            model.installPatches().windowsParameters().kbNumbersToInclude().get(0));
        Assertions.assertEquals("exhd", model.installPatches().windowsParameters().classificationsToInclude().get(0));
        Assertions.assertEquals(true, model.installPatches().windowsParameters().excludeKbsRequiringReboot());
        Assertions.assertEquals("ntwndeicbtwnpzao",
            model.installPatches().linuxParameters().packageNameMasksToExclude().get(0));
        Assertions.assertEquals("qciwqvhkhixuigdt",
            model.installPatches().linuxParameters().packageNameMasksToInclude().get(0));
        Assertions.assertEquals("objoghmewu",
            model.installPatches().linuxParameters().classificationsToInclude().get(0));
        Assertions.assertEquals("npime", model.startDateTime());
        Assertions.assertEquals("stxgc", model.expirationDateTime());
        Assertions.assertEquals("dg", model.duration());
        Assertions.assertEquals("ajrmvdjwzrlovmc", model.timeZone());
        Assertions.assertEquals("hijco", model.recurEvery());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
