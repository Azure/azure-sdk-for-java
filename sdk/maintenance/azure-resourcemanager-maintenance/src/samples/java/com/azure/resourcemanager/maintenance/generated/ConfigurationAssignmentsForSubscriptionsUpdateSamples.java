// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maintenance.generated;

import com.azure.resourcemanager.maintenance.models.ConfigurationAssignment;
import com.azure.resourcemanager.maintenance.models.ConfigurationAssignmentFilterProperties;
import com.azure.resourcemanager.maintenance.models.TagOperators;
import com.azure.resourcemanager.maintenance.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ConfigurationAssignmentsForSubscriptions Update.
 */
public final class ConfigurationAssignmentsForSubscriptionsUpdateSamples {
    /*
     * x-ms-original-file: specification/maintenance/resource-manager/Microsoft.Maintenance/preview/2023-10-01-preview/examples/ConfigurationAssignmentsForSubscriptions_UpdateForResource.json
     */
    /**
     * Sample code: ConfigurationAssignmentsForSubscriptions_CreateOrUpdate.
     * 
     * @param manager Entry point to MaintenanceManager.
     */
    public static void configurationAssignmentsForSubscriptionsCreateOrUpdate(
        com.azure.resourcemanager.maintenance.MaintenanceManager manager) {
        ConfigurationAssignment resource = manager.configurationAssignmentsForSubscriptions()
            .getWithResponse("workervmConfiguration", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withMaintenanceConfigurationId(
                "/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourcegroups/examplerg/providers/Microsoft.Maintenance/maintenanceConfigurations/configuration1")
            .withFilter(
                new ConfigurationAssignmentFilterProperties()
                    .withResourceTypes(
                        Arrays.asList("Microsoft.HybridCompute/machines", "Microsoft.Compute/virtualMachines"))
                    .withResourceGroups(Arrays.asList("RG1", "RG2"))
                    .withLocations(Arrays.asList("Japan East", "UK South"))
                    .withTagSettings(new TagSettingsProperties()
                        .withTags(mapOf("tag1", Arrays.asList("tag1Value1", "tag1Value2", "tag1Value3"), "tag2",
                            Arrays.asList("tag2Value1", "tag2Value2", "tag2Value3")))
                        .withFilterOperator(TagOperators.ANY)))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
