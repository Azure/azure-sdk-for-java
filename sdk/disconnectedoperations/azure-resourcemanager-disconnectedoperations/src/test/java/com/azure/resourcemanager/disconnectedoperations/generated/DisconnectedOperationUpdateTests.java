// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.disconnectedoperations.models.ConnectionIntent;
import com.azure.resourcemanager.disconnectedoperations.models.DisconnectedOperationUpdate;
import com.azure.resourcemanager.disconnectedoperations.models.DisconnectedOperationUpdateProperties;
import com.azure.resourcemanager.disconnectedoperations.models.RegistrationStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DisconnectedOperationUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DisconnectedOperationUpdate model = BinaryData.fromString(
            "{\"tags\":{\"wifsq\":\"foooj\"},\"properties\":{\"connectionIntent\":\"Disconnected\",\"registrationStatus\":\"Unregistered\",\"deviceVersion\":\"mglzlhj\"}}")
            .toObject(DisconnectedOperationUpdate.class);
        Assertions.assertEquals("foooj", model.tags().get("wifsq"));
        Assertions.assertEquals(ConnectionIntent.DISCONNECTED, model.properties().connectionIntent());
        Assertions.assertEquals(RegistrationStatus.UNREGISTERED, model.properties().registrationStatus());
        Assertions.assertEquals("mglzlhj", model.properties().deviceVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DisconnectedOperationUpdate model = new DisconnectedOperationUpdate().withTags(mapOf("wifsq", "foooj"))
            .withProperties(
                new DisconnectedOperationUpdateProperties().withConnectionIntent(ConnectionIntent.DISCONNECTED)
                    .withRegistrationStatus(RegistrationStatus.UNREGISTERED)
                    .withDeviceVersion("mglzlhj"));
        model = BinaryData.fromObject(model).toObject(DisconnectedOperationUpdate.class);
        Assertions.assertEquals("foooj", model.tags().get("wifsq"));
        Assertions.assertEquals(ConnectionIntent.DISCONNECTED, model.properties().connectionIntent());
        Assertions.assertEquals(RegistrationStatus.UNREGISTERED, model.properties().registrationStatus());
        Assertions.assertEquals("mglzlhj", model.properties().deviceVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
