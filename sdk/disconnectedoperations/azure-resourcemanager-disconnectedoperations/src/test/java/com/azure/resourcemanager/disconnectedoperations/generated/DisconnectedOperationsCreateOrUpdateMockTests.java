// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.disconnectedoperations.DisconnectedOperationsManager;
import com.azure.resourcemanager.disconnectedoperations.models.ConnectionIntent;
import com.azure.resourcemanager.disconnectedoperations.models.DisconnectedOperation;
import com.azure.resourcemanager.disconnectedoperations.models.DisconnectedOperationProperties;
import com.azure.resourcemanager.disconnectedoperations.models.RegistrationStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DisconnectedOperationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"stampId\":\"aierhhb\",\"billingModel\":\"Capacity\",\"connectionIntent\":\"Connected\",\"connectionStatus\":\"Disconnected\",\"registrationStatus\":\"Registered\",\"deviceVersion\":\"jtjaodxobnbdxkq\"},\"location\":\"okaj\",\"tags\":{\"aajrm\":\"pimexgstxgcpodg\",\"clwhijcoejctbz\":\"djwzrlov\"},\"id\":\"qsqsy\",\"name\":\"bkbfkgukdkex\",\"type\":\"ppofmxaxcfjpgdd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DisconnectedOperationsManager manager = DisconnectedOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DisconnectedOperation response = manager.disconnectedOperations()
            .define("flnrosfqpteehzz")
            .withRegion("hjtckwhd")
            .withExistingResourceGroup("mdwzjeiachboo")
            .withTags(mapOf("znorcj", "fiyipjxsqwpgrj", "xqabnmocpcysh", "vsnb", "klj", "rzafbljjgpbtoqcj",
                "qajzyulpkudjkr", "vbqid"))
            .withProperties(new DisconnectedOperationProperties().withConnectionIntent(ConnectionIntent.DISCONNECTED)
                .withRegistrationStatus(RegistrationStatus.UNREGISTERED)
                .withDeviceVersion("oodqxhcrm"))
            .create();

        Assertions.assertEquals("okaj", response.location());
        Assertions.assertEquals("pimexgstxgcpodg", response.tags().get("aajrm"));
        Assertions.assertEquals(ConnectionIntent.CONNECTED, response.properties().connectionIntent());
        Assertions.assertEquals(RegistrationStatus.REGISTERED, response.properties().registrationStatus());
        Assertions.assertEquals("jtjaodxobnbdxkq", response.properties().deviceVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
