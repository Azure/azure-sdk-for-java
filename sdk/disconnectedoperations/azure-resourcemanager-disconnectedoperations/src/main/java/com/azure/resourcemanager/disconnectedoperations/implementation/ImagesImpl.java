// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.disconnectedoperations.fluent.ImagesClient;
import com.azure.resourcemanager.disconnectedoperations.fluent.models.ImageDownloadResultInner;
import com.azure.resourcemanager.disconnectedoperations.fluent.models.ImageInner;
import com.azure.resourcemanager.disconnectedoperations.models.Image;
import com.azure.resourcemanager.disconnectedoperations.models.ImageDownloadResult;
import com.azure.resourcemanager.disconnectedoperations.models.Images;

public final class ImagesImpl implements Images {
    private static final ClientLogger LOGGER = new ClientLogger(ImagesImpl.class);

    private final ImagesClient innerClient;

    private final com.azure.resourcemanager.disconnectedoperations.DisconnectedOperationsManager serviceManager;

    public ImagesImpl(ImagesClient innerClient,
        com.azure.resourcemanager.disconnectedoperations.DisconnectedOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Image> listByDisconnectedOperation(String resourceGroupName, String name) {
        PagedIterable<ImageInner> inner = this.serviceClient().listByDisconnectedOperation(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ImageImpl(inner1, this.manager()));
    }

    public PagedIterable<Image> listByDisconnectedOperation(String resourceGroupName, String name, String filter,
        Integer top, Integer skip, Context context) {
        PagedIterable<ImageInner> inner
            = this.serviceClient().listByDisconnectedOperation(resourceGroupName, name, filter, top, skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ImageImpl(inner1, this.manager()));
    }

    public Response<Image> getWithResponse(String resourceGroupName, String name, String imageName, Context context) {
        Response<ImageInner> inner = this.serviceClient().getWithResponse(resourceGroupName, name, imageName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ImageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Image get(String resourceGroupName, String name, String imageName) {
        ImageInner inner = this.serviceClient().get(resourceGroupName, name, imageName);
        if (inner != null) {
            return new ImageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ImageDownloadResult> listDownloadUriWithResponse(String resourceGroupName, String name,
        String imageName, Context context) {
        Response<ImageDownloadResultInner> inner
            = this.serviceClient().listDownloadUriWithResponse(resourceGroupName, name, imageName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ImageDownloadResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ImageDownloadResult listDownloadUri(String resourceGroupName, String name, String imageName) {
        ImageDownloadResultInner inner = this.serviceClient().listDownloadUri(resourceGroupName, name, imageName);
        if (inner != null) {
            return new ImageDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ImagesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.disconnectedoperations.DisconnectedOperationsManager manager() {
        return this.serviceManager;
    }
}
