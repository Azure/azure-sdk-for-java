// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.disconnectedoperations.models.BillingModel;
import com.azure.resourcemanager.disconnectedoperations.models.ConnectionIntent;
import java.io.IOException;

/**
 * The disconnected operation manifest.
 */
@Immutable
public final class DisconnectedOperationDeploymentManifestInner
    implements JsonSerializable<DisconnectedOperationDeploymentManifestInner> {
    /*
     * The resource identifier of the disconnected operations resource
     */
    private String resourceId;

    /*
     * The resource name
     */
    private String resourceName;

    /*
     * The unique GUID of the stamp
     */
    private String stampId;

    /*
     * The resource location
     */
    private String location;

    /*
     * The billing model
     */
    private BillingModel billingModel;

    /*
     * The connection intent
     */
    private ConnectionIntent connectionIntent;

    /*
     * The cloud in which the resource is registered
     */
    private String cloud;

    /**
     * Creates an instance of DisconnectedOperationDeploymentManifestInner class.
     */
    private DisconnectedOperationDeploymentManifestInner() {
    }

    /**
     * Get the resourceId property: The resource identifier of the disconnected operations resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the resourceName property: The resource name.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Get the stampId property: The unique GUID of the stamp.
     * 
     * @return the stampId value.
     */
    public String stampId() {
        return this.stampId;
    }

    /**
     * Get the location property: The resource location.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Get the billingModel property: The billing model.
     * 
     * @return the billingModel value.
     */
    public BillingModel billingModel() {
        return this.billingModel;
    }

    /**
     * Get the connectionIntent property: The connection intent.
     * 
     * @return the connectionIntent value.
     */
    public ConnectionIntent connectionIntent() {
        return this.connectionIntent;
    }

    /**
     * Get the cloud property: The cloud in which the resource is registered.
     * 
     * @return the cloud value.
     */
    public String cloud() {
        return this.cloud;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DisconnectedOperationDeploymentManifestInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DisconnectedOperationDeploymentManifestInner if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DisconnectedOperationDeploymentManifestInner.
     */
    public static DisconnectedOperationDeploymentManifestInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DisconnectedOperationDeploymentManifestInner deserializedDisconnectedOperationDeploymentManifestInner
                = new DisconnectedOperationDeploymentManifestInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedDisconnectedOperationDeploymentManifestInner.resourceId = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedDisconnectedOperationDeploymentManifestInner.resourceName = reader.getString();
                } else if ("stampId".equals(fieldName)) {
                    deserializedDisconnectedOperationDeploymentManifestInner.stampId = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDisconnectedOperationDeploymentManifestInner.location = reader.getString();
                } else if ("billingModel".equals(fieldName)) {
                    deserializedDisconnectedOperationDeploymentManifestInner.billingModel
                        = BillingModel.fromString(reader.getString());
                } else if ("connectionIntent".equals(fieldName)) {
                    deserializedDisconnectedOperationDeploymentManifestInner.connectionIntent
                        = ConnectionIntent.fromString(reader.getString());
                } else if ("cloud".equals(fieldName)) {
                    deserializedDisconnectedOperationDeploymentManifestInner.cloud = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDisconnectedOperationDeploymentManifestInner;
        });
    }
}
