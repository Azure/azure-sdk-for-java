// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The disconnected operation properties.
 */
@Fluent
public final class DisconnectedOperationProperties implements JsonSerializable<DisconnectedOperationProperties> {
    /*
     * The resource provisioning state
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The unique GUID of the stamp
     */
    private String stampId;

    /*
     * The billing model
     */
    private BillingModel billingModel;

    /*
     * The connection intent
     */
    private ConnectionIntent connectionIntent;

    /*
     * The connection status
     */
    private ConnectionStatus connectionStatus;

    /*
     * The registration intent
     */
    private RegistrationStatus registrationStatus;

    /*
     * The device version
     */
    private String deviceVersion;

    /**
     * Creates an instance of DisconnectedOperationProperties class.
     */
    public DisconnectedOperationProperties() {
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the stampId property: The unique GUID of the stamp.
     * 
     * @return the stampId value.
     */
    public String stampId() {
        return this.stampId;
    }

    /**
     * Get the billingModel property: The billing model.
     * 
     * @return the billingModel value.
     */
    public BillingModel billingModel() {
        return this.billingModel;
    }

    /**
     * Get the connectionIntent property: The connection intent.
     * 
     * @return the connectionIntent value.
     */
    public ConnectionIntent connectionIntent() {
        return this.connectionIntent;
    }

    /**
     * Set the connectionIntent property: The connection intent.
     * 
     * @param connectionIntent the connectionIntent value to set.
     * @return the DisconnectedOperationProperties object itself.
     */
    public DisconnectedOperationProperties withConnectionIntent(ConnectionIntent connectionIntent) {
        this.connectionIntent = connectionIntent;
        return this;
    }

    /**
     * Get the connectionStatus property: The connection status.
     * 
     * @return the connectionStatus value.
     */
    public ConnectionStatus connectionStatus() {
        return this.connectionStatus;
    }

    /**
     * Get the registrationStatus property: The registration intent.
     * 
     * @return the registrationStatus value.
     */
    public RegistrationStatus registrationStatus() {
        return this.registrationStatus;
    }

    /**
     * Set the registrationStatus property: The registration intent.
     * 
     * @param registrationStatus the registrationStatus value to set.
     * @return the DisconnectedOperationProperties object itself.
     */
    public DisconnectedOperationProperties withRegistrationStatus(RegistrationStatus registrationStatus) {
        this.registrationStatus = registrationStatus;
        return this;
    }

    /**
     * Get the deviceVersion property: The device version.
     * 
     * @return the deviceVersion value.
     */
    public String deviceVersion() {
        return this.deviceVersion;
    }

    /**
     * Set the deviceVersion property: The device version.
     * 
     * @param deviceVersion the deviceVersion value to set.
     * @return the DisconnectedOperationProperties object itself.
     */
    public DisconnectedOperationProperties withDeviceVersion(String deviceVersion) {
        this.deviceVersion = deviceVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionIntent() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionIntent in model DisconnectedOperationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DisconnectedOperationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectionIntent",
            this.connectionIntent == null ? null : this.connectionIntent.toString());
        jsonWriter.writeStringField("registrationStatus",
            this.registrationStatus == null ? null : this.registrationStatus.toString());
        jsonWriter.writeStringField("deviceVersion", this.deviceVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DisconnectedOperationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DisconnectedOperationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DisconnectedOperationProperties.
     */
    public static DisconnectedOperationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DisconnectedOperationProperties deserializedDisconnectedOperationProperties
                = new DisconnectedOperationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stampId".equals(fieldName)) {
                    deserializedDisconnectedOperationProperties.stampId = reader.getString();
                } else if ("billingModel".equals(fieldName)) {
                    deserializedDisconnectedOperationProperties.billingModel
                        = BillingModel.fromString(reader.getString());
                } else if ("connectionIntent".equals(fieldName)) {
                    deserializedDisconnectedOperationProperties.connectionIntent
                        = ConnectionIntent.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDisconnectedOperationProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("connectionStatus".equals(fieldName)) {
                    deserializedDisconnectedOperationProperties.connectionStatus
                        = ConnectionStatus.fromString(reader.getString());
                } else if ("registrationStatus".equals(fieldName)) {
                    deserializedDisconnectedOperationProperties.registrationStatus
                        = RegistrationStatus.fromString(reader.getString());
                } else if ("deviceVersion".equals(fieldName)) {
                    deserializedDisconnectedOperationProperties.deviceVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDisconnectedOperationProperties;
        });
    }
}
