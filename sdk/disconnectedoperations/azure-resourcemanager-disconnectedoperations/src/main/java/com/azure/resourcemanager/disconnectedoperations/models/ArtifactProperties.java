// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The artifact properties.
 */
@Immutable
public final class ArtifactProperties implements JsonSerializable<ArtifactProperties> {
    /*
     * The resource provisioning state
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The artifact display order
     */
    private int artifactOrder;

    /*
     * The artifact title
     */
    private String title;

    /*
     * The artifact description
     */
    private String description;

    /*
     * The artifact size in MB
     */
    private Long size;

    /**
     * Creates an instance of ArtifactProperties class.
     */
    private ArtifactProperties() {
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the artifactOrder property: The artifact display order.
     * 
     * @return the artifactOrder value.
     */
    public int artifactOrder() {
        return this.artifactOrder;
    }

    /**
     * Get the title property: The artifact title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the description property: The artifact description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the size property: The artifact size in MB.
     * 
     * @return the size value.
     */
    public Long size() {
        return this.size;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArtifactProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArtifactProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ArtifactProperties.
     */
    public static ArtifactProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArtifactProperties deserializedArtifactProperties = new ArtifactProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifactOrder".equals(fieldName)) {
                    deserializedArtifactProperties.artifactOrder = reader.getInt();
                } else if ("title".equals(fieldName)) {
                    deserializedArtifactProperties.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedArtifactProperties.description = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedArtifactProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    deserializedArtifactProperties.size = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArtifactProperties;
        });
    }
}
