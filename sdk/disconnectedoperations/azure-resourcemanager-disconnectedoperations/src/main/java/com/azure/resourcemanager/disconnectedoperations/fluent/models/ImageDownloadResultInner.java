// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.disconnectedoperations.models.ReleaseType;
import com.azure.resourcemanager.disconnectedoperations.models.ResourceProvisioningState;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The image download properties.
 */
@Immutable
public final class ImageDownloadResultInner implements JsonSerializable<ImageDownloadResultInner> {
    /*
     * The resource provisioning state
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The version of the package in the format 1.1.1
     */
    private String releaseVersion;

    /*
     * The release name
     */
    private String releaseDisplayName;

    /*
     * The release notes
     */
    private String releaseNotes;

    /*
     * The release date
     */
    private LocalDate releaseDate;

    /*
     * The release type
     */
    private ReleaseType releaseType;

    /*
     * The versions that are compatible for this update package.
     */
    private List<String> compatibleVersions;

    /*
     * The unique identifier of the download
     */
    private String transactionId;

    /*
     * The download URI
     */
    private String downloadLink;

    /*
     * The download link expiry time
     */
    private OffsetDateTime linkExpiry;

    /**
     * Creates an instance of ImageDownloadResultInner class.
     */
    private ImageDownloadResultInner() {
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the releaseVersion property: The version of the package in the format 1.1.1.
     * 
     * @return the releaseVersion value.
     */
    public String releaseVersion() {
        return this.releaseVersion;
    }

    /**
     * Get the releaseDisplayName property: The release name.
     * 
     * @return the releaseDisplayName value.
     */
    public String releaseDisplayName() {
        return this.releaseDisplayName;
    }

    /**
     * Get the releaseNotes property: The release notes.
     * 
     * @return the releaseNotes value.
     */
    public String releaseNotes() {
        return this.releaseNotes;
    }

    /**
     * Get the releaseDate property: The release date.
     * 
     * @return the releaseDate value.
     */
    public LocalDate releaseDate() {
        return this.releaseDate;
    }

    /**
     * Get the releaseType property: The release type.
     * 
     * @return the releaseType value.
     */
    public ReleaseType releaseType() {
        return this.releaseType;
    }

    /**
     * Get the compatibleVersions property: The versions that are compatible for this update package.
     * 
     * @return the compatibleVersions value.
     */
    public List<String> compatibleVersions() {
        return this.compatibleVersions;
    }

    /**
     * Get the transactionId property: The unique identifier of the download.
     * 
     * @return the transactionId value.
     */
    public String transactionId() {
        return this.transactionId;
    }

    /**
     * Get the downloadLink property: The download URI.
     * 
     * @return the downloadLink value.
     */
    public String downloadLink() {
        return this.downloadLink;
    }

    /**
     * Get the linkExpiry property: The download link expiry time.
     * 
     * @return the linkExpiry value.
     */
    public OffsetDateTime linkExpiry() {
        return this.linkExpiry;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDownloadResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDownloadResultInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageDownloadResultInner.
     */
    public static ImageDownloadResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDownloadResultInner deserializedImageDownloadResultInner = new ImageDownloadResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("releaseVersion".equals(fieldName)) {
                    deserializedImageDownloadResultInner.releaseVersion = reader.getString();
                } else if ("releaseDisplayName".equals(fieldName)) {
                    deserializedImageDownloadResultInner.releaseDisplayName = reader.getString();
                } else if ("releaseNotes".equals(fieldName)) {
                    deserializedImageDownloadResultInner.releaseNotes = reader.getString();
                } else if ("releaseDate".equals(fieldName)) {
                    deserializedImageDownloadResultInner.releaseDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("releaseType".equals(fieldName)) {
                    deserializedImageDownloadResultInner.releaseType = ReleaseType.fromString(reader.getString());
                } else if ("transactionId".equals(fieldName)) {
                    deserializedImageDownloadResultInner.transactionId = reader.getString();
                } else if ("downloadLink".equals(fieldName)) {
                    deserializedImageDownloadResultInner.downloadLink = reader.getString();
                } else if ("linkExpiry".equals(fieldName)) {
                    deserializedImageDownloadResultInner.linkExpiry = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedImageDownloadResultInner.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("compatibleVersions".equals(fieldName)) {
                    List<String> compatibleVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedImageDownloadResultInner.compatibleVersions = compatibleVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDownloadResultInner;
        });
    }
}
