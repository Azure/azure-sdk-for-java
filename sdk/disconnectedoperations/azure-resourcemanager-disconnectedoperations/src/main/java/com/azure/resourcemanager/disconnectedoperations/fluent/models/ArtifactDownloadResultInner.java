// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.disconnectedoperations.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.disconnectedoperations.models.ResourceProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The artifact download properties.
 */
@Immutable
public final class ArtifactDownloadResultInner implements JsonSerializable<ArtifactDownloadResultInner> {
    /*
     * The resource provisioning state
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The artifact display order
     */
    private int artifactOrder;

    /*
     * The artifact title
     */
    private String title;

    /*
     * The artifact description
     */
    private String description;

    /*
     * The artifact size in MB
     */
    private Long size;

    /*
     * The download URI
     */
    private String downloadLink;

    /*
     * The download link expiry time
     */
    private OffsetDateTime linkExpiry;

    /**
     * Creates an instance of ArtifactDownloadResultInner class.
     */
    private ArtifactDownloadResultInner() {
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the artifactOrder property: The artifact display order.
     * 
     * @return the artifactOrder value.
     */
    public int artifactOrder() {
        return this.artifactOrder;
    }

    /**
     * Get the title property: The artifact title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the description property: The artifact description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the size property: The artifact size in MB.
     * 
     * @return the size value.
     */
    public Long size() {
        return this.size;
    }

    /**
     * Get the downloadLink property: The download URI.
     * 
     * @return the downloadLink value.
     */
    public String downloadLink() {
        return this.downloadLink;
    }

    /**
     * Get the linkExpiry property: The download link expiry time.
     * 
     * @return the linkExpiry value.
     */
    public OffsetDateTime linkExpiry() {
        return this.linkExpiry;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArtifactDownloadResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArtifactDownloadResultInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ArtifactDownloadResultInner.
     */
    public static ArtifactDownloadResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArtifactDownloadResultInner deserializedArtifactDownloadResultInner = new ArtifactDownloadResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifactOrder".equals(fieldName)) {
                    deserializedArtifactDownloadResultInner.artifactOrder = reader.getInt();
                } else if ("title".equals(fieldName)) {
                    deserializedArtifactDownloadResultInner.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedArtifactDownloadResultInner.description = reader.getString();
                } else if ("downloadLink".equals(fieldName)) {
                    deserializedArtifactDownloadResultInner.downloadLink = reader.getString();
                } else if ("linkExpiry".equals(fieldName)) {
                    deserializedArtifactDownloadResultInner.linkExpiry = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedArtifactDownloadResultInner.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    deserializedArtifactDownloadResultInner.size = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArtifactDownloadResultInner;
        });
    }
}
