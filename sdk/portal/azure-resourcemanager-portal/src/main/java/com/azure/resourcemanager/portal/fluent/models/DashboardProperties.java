// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.portal.models.DashboardLens;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The shared dashboard properties. */
@Fluent
public final class DashboardProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DashboardProperties.class);

    /*
     * The dashboard lenses.
     */
    @JsonProperty(value = "lenses")
    private List<DashboardLens> lenses;

    /*
     * The dashboard metadata.
     */
    @JsonProperty(value = "metadata")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Object> metadata;

    /**
     * Get the lenses property: The dashboard lenses.
     *
     * @return the lenses value.
     */
    public List<DashboardLens> lenses() {
        return this.lenses;
    }

    /**
     * Set the lenses property: The dashboard lenses.
     *
     * @param lenses the lenses value to set.
     * @return the DashboardProperties object itself.
     */
    public DashboardProperties withLenses(List<DashboardLens> lenses) {
        this.lenses = lenses;
        return this;
    }

    /**
     * Get the metadata property: The dashboard metadata.
     *
     * @return the metadata value.
     */
    public Map<String, Object> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The dashboard metadata.
     *
     * @param metadata the metadata value to set.
     * @return the DashboardProperties object itself.
     */
    public DashboardProperties withMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lenses() != null) {
            lenses().forEach(e -> e.validate());
        }
    }
}
