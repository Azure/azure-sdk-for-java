// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.portal.models.DashboardLens;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The shared dashboard resource definition. */
@Fluent
public final class DashboardInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DashboardInner.class);

    /*
     * The shared dashboard properties.
     */
    @JsonProperty(value = "properties")
    private DashboardProperties innerProperties;

    /**
     * Get the innerProperties property: The shared dashboard properties.
     *
     * @return the innerProperties value.
     */
    private DashboardProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public DashboardInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DashboardInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the lenses property: The dashboard lenses.
     *
     * @return the lenses value.
     */
    public List<DashboardLens> lenses() {
        return this.innerProperties() == null ? null : this.innerProperties().lenses();
    }

    /**
     * Set the lenses property: The dashboard lenses.
     *
     * @param lenses the lenses value to set.
     * @return the DashboardInner object itself.
     */
    public DashboardInner withLenses(List<DashboardLens> lenses) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DashboardProperties();
        }
        this.innerProperties().withLenses(lenses);
        return this;
    }

    /**
     * Get the metadata property: The dashboard metadata.
     *
     * @return the metadata value.
     */
    public Map<String, Object> metadata() {
        return this.innerProperties() == null ? null : this.innerProperties().metadata();
    }

    /**
     * Set the metadata property: The dashboard metadata.
     *
     * @param metadata the metadata value to set.
     * @return the DashboardInner object itself.
     */
    public DashboardInner withMetadata(Map<String, Object> metadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DashboardProperties();
        }
        this.innerProperties().withMetadata(metadata);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
