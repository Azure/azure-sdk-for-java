// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.portal.models.DashboardLens;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The shared dashboard resource definition. */
@JsonFlatten
@Fluent
public class DashboardInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DashboardInner.class);

    /*
     * The dashboard lenses.
     */
    @JsonProperty(value = "properties.lenses")
    private List<DashboardLens> lenses;

    /*
     * The dashboard metadata.
     */
    @JsonProperty(value = "properties.metadata")
    private Map<String, Object> metadata;

    /**
     * Get the lenses property: The dashboard lenses.
     *
     * @return the lenses value.
     */
    public List<DashboardLens> lenses() {
        return this.lenses;
    }

    /**
     * Set the lenses property: The dashboard lenses.
     *
     * @param lenses the lenses value to set.
     * @return the DashboardInner object itself.
     */
    public DashboardInner withLenses(List<DashboardLens> lenses) {
        this.lenses = lenses;
        return this;
    }

    /**
     * Get the metadata property: The dashboard metadata.
     *
     * @return the metadata value.
     */
    public Map<String, Object> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The dashboard metadata.
     *
     * @param metadata the metadata value to set.
     * @return the DashboardInner object itself.
     */
    public DashboardInner withMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DashboardInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DashboardInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lenses() != null) {
            lenses().forEach(e -> e.validate());
        }
    }
}
