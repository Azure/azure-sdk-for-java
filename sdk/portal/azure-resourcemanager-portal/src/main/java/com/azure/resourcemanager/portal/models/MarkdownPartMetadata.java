// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Markdown part metadata. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("Extension/HubsExtension/PartType/MarkdownPart")
@Fluent
public final class MarkdownPartMetadata extends DashboardPartMetadata {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MarkdownPartMetadata.class);

    /*
     * Input to dashboard part.
     */
    @JsonProperty(value = "inputs")
    private List<Object> inputs;

    /*
     * Markdown part settings.
     */
    @JsonProperty(value = "settings")
    private MarkdownPartMetadataSettings settings;

    /**
     * Get the inputs property: Input to dashboard part.
     *
     * @return the inputs value.
     */
    public List<Object> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: Input to dashboard part.
     *
     * @param inputs the inputs value to set.
     * @return the MarkdownPartMetadata object itself.
     */
    public MarkdownPartMetadata withInputs(List<Object> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the settings property: Markdown part settings.
     *
     * @return the settings value.
     */
    public MarkdownPartMetadataSettings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Markdown part settings.
     *
     * @param settings the settings value to set.
     * @return the MarkdownPartMetadata object itself.
     */
    public MarkdownPartMetadata withSettings(MarkdownPartMetadataSettings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (settings() != null) {
            settings().validate();
        }
    }
}
