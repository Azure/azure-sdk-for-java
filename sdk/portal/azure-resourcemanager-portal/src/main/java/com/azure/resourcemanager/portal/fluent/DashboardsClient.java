// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.portal.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.portal.fluent.models.DashboardInner;
import com.azure.resourcemanager.portal.models.PatchableDashboard;

/** An instance of this class provides access to all the operations defined in DashboardsClient. */
public interface DashboardsClient {
    /**
     * Creates or updates a Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param dashboard The parameters required to create or update a dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the shared dashboard resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DashboardInner createOrUpdate(String resourceGroupName, String dashboardName, DashboardInner dashboard);

    /**
     * Creates or updates a Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param dashboard The parameters required to create or update a dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the shared dashboard resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DashboardInner> createOrUpdateWithResponse(
        String resourceGroupName, String dashboardName, DashboardInner dashboard, Context context);

    /**
     * Deletes the Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String dashboardName);

    /**
     * Deletes the Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String dashboardName, Context context);

    /**
     * Gets the Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dashboard.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DashboardInner getByResourceGroup(String resourceGroupName, String dashboardName);

    /**
     * Gets the Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dashboard.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DashboardInner> getByResourceGroupWithResponse(
        String resourceGroupName, String dashboardName, Context context);

    /**
     * Updates an existing Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param dashboard The updatable fields of a Dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the shared dashboard resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DashboardInner update(String resourceGroupName, String dashboardName, PatchableDashboard dashboard);

    /**
     * Updates an existing Dashboard.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param dashboard The updatable fields of a Dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the shared dashboard resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DashboardInner> updateWithResponse(
        String resourceGroupName, String dashboardName, PatchableDashboard dashboard, Context context);

    /**
     * Gets all the Dashboards within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dashboards within a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DashboardInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets all the Dashboards within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dashboards within a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DashboardInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets all the dashboards within a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the dashboards within a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DashboardInner> list();

    /**
     * Gets all the dashboards within a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the dashboards within a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DashboardInner> list(Context context);
}
