// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Destination for the finished translated documents.
 */
@Fluent
public final class TranslationTarget implements JsonSerializable<TranslationTarget> {

    /*
     * Location of the folder / container with your documents
     */
    @Generated
    private final String targetUrl;

    /*
     * Category / custom system for translation request
     */
    @Generated
    private String category;

    /*
     * Target Language
     */
    @Generated
    private final String language;

    /*
     * List of Glossary
     */
    @Generated
    private List<TranslationGlossary> glossaries;

    /*
     * Storage Source
     */
    @Generated
    private TranslationStorageSource storageSource;

    /**
     * Creates an instance of TranslationTarget class.
     *
     * @param targetUrl the targetUrl value to set.
     * @param language the language value to set.
     */
    @Generated
    public TranslationTarget(String targetUrl, String language) {
        this.targetUrl = targetUrl;
        this.language = language;
    }

    /**
     * Get the targetUrl property: Location of the folder / container with your documents.
     *
     * @return the targetUrl value.
     */
    @Generated
    public String getTargetUrl() {
        return this.targetUrl;
    }

    /**
     * Get the category property: Category / custom system for translation request.
     *
     * @return the category value.
     */
    @Generated
    public String getCategory() {
        return this.category;
    }

    /**
     * Set the category property: Category / custom system for translation request.
     *
     * @param category the category value to set.
     * @return the TranslationTarget object itself.
     */
    @Generated
    public TranslationTarget setCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the language property: Target Language.
     *
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Get the glossaries property: List of Glossary.
     *
     * @return the glossaries value.
     */
    @Generated
    public List<TranslationGlossary> getGlossaries() {
        return this.glossaries;
    }

    /**
     * Set the glossaries property: List of Glossary.
     *
     * @param glossaries the glossaries value to set.
     * @return the TranslationTarget object itself.
     */
    @Generated
    public TranslationTarget setGlossaries(List<TranslationGlossary> glossaries) {
        this.glossaries = glossaries;
        return this;
    }

    /**
     * Get the storageSource property: Storage Source.
     *
     * @return the storageSource value.
     */
    @Generated
    public TranslationStorageSource getStorageSource() {
        return this.storageSource;
    }

    /**
     * Set the storageSource property: Storage Source.
     *
     * @param storageSource the storageSource value to set.
     * @return the TranslationTarget object itself.
     */
    @Generated
    public TranslationTarget setStorageSource(TranslationStorageSource storageSource) {
        this.storageSource = storageSource;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetUrl", this.targetUrl);
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeStringField("category", this.category);
        jsonWriter.writeArrayField("glossaries", this.glossaries, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("storageSource", this.storageSource == null ? null : this.storageSource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslationTarget from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslationTarget if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslationTarget.
     */
    @Generated
    public static TranslationTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String targetUrl = null;
            String language = null;
            String category = null;
            List<TranslationGlossary> glossaries = null;
            TranslationStorageSource storageSource = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("targetUrl".equals(fieldName)) {
                    targetUrl = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("category".equals(fieldName)) {
                    category = reader.getString();
                } else if ("glossaries".equals(fieldName)) {
                    glossaries = reader.readArray(reader1 -> TranslationGlossary.fromJson(reader1));
                } else if ("storageSource".equals(fieldName)) {
                    storageSource = TranslationStorageSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TranslationTarget deserializedTranslationTarget = new TranslationTarget(targetUrl, language);
            deserializedTranslationTarget.category = category;
            deserializedTranslationTarget.glossaries = glossaries;
            deserializedTranslationTarget.storageSource = storageSource;
            return deserializedTranslationTarget;
        });
    }
}
