// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Translation job submission batch request.
 */
@Immutable
public final class TranslationBatch implements JsonSerializable<TranslationBatch> {

    /*
     * The input list of documents or folders containing documents
     */
    @Generated
    private final List<DocumentTranslationInput> inputs;

    /**
     * Creates an instance of TranslationBatch class.
     *
     * @param inputs the inputs value to set.
     */
    @Generated
    public TranslationBatch(List<DocumentTranslationInput> inputs) {
        this.inputs = inputs;
    }

    /**
     * Get the inputs property: The input list of documents or folders containing documents.
     *
     * @return the inputs value.
     */
    @Generated
    public List<DocumentTranslationInput> getInputs() {
        return this.inputs;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslationBatch from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslationBatch if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslationBatch.
     */
    @Generated
    public static TranslationBatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<DocumentTranslationInput> inputs = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> DocumentTranslationInput.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TranslationBatch(inputs);
        });
    }
}
