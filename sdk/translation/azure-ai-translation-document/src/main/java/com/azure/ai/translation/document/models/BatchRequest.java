// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition for the input batch translation request.
 */
@Fluent
public final class BatchRequest implements JsonSerializable<BatchRequest> {

    /*
     * Source of the input documents
     */
    @Generated
    private final SourceInput source;

    /*
     * Location of the destination for the output
     */
    @Generated
    private final List<TargetInput> targets;

    /*
     * Storage type of the input documents source string
     */
    @Generated
    private StorageInputType storageType;

    /**
     * Creates an instance of BatchRequest class.
     *
     * @param source the source value to set.
     * @param targets the targets value to set.
     */
    @Generated
    public BatchRequest(SourceInput source, List<TargetInput> targets) {
        this.source = source;
        this.targets = targets;
    }

    /**
     * Get the source property: Source of the input documents.
     *
     * @return the source value.
     */
    @Generated
    public SourceInput getSource() {
        return this.source;
    }

    /**
     * Get the targets property: Location of the destination for the output.
     *
     * @return the targets value.
     */
    @Generated
    public List<TargetInput> getTargets() {
        return this.targets;
    }

    /**
     * Get the storageType property: Storage type of the input documents source string.
     *
     * @return the storageType value.
     */
    @Generated
    public StorageInputType getStorageType() {
        return this.storageType;
    }

    /**
     * Set the storageType property: Storage type of the input documents source string.
     *
     * @param storageType the storageType value to set.
     * @return the BatchRequest object itself.
     */
    @Generated
    public BatchRequest setStorageType(StorageInputType storageType) {
        this.storageType = storageType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("storageType", this.storageType == null ? null : this.storageType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchRequest.
     */
    @Generated
    public static BatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceInput source = null;
            List<TargetInput> targets = null;
            StorageInputType storageType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("source".equals(fieldName)) {
                    source = SourceInput.fromJson(reader);
                } else if ("targets".equals(fieldName)) {
                    targets = reader.readArray(reader1 -> TargetInput.fromJson(reader1));
                } else if ("storageType".equals(fieldName)) {
                    storageType = StorageInputType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            BatchRequest deserializedBatchRequest = new BatchRequest(source, targets);
            deserializedBatchRequest.storageType = storageType;
            return deserializedBatchRequest;
        });
    }
}
