// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Document Status Response.
 */
@Immutable
public final class DocumentStatus implements JsonSerializable<DocumentStatus> {

    /*
     * Location of the document or folder
     */
    @Generated
    private String path;

    /*
     * Location of the source document
     */
    @Generated
    private final String sourcePath;

    /*
     * Operation created date time
     */
    @Generated
    private final OffsetDateTime createdDateTimeUtc;

    /*
     * Date time in which the operation's status has been updated
     */
    @Generated
    private final OffsetDateTime lastActionDateTimeUtc;

    /*
     * List of possible statuses for job or document
     */
    @Generated
    private final Status status;

    /*
     * To language
     */
    @Generated
    private final String to;

    /*
     * This contains an outer error with error code, message, details, target and an
     * inner error with more descriptive details.
     */
    @Generated
    private TranslationError error;

    /*
     * Progress of the translation if available
     */
    @Generated
    private final double progress;

    /*
     * Document Id
     */
    @Generated
    private final String id;

    /*
     * Character charged by the API
     */
    @Generated
    private Integer characterCharged;

    /**
     * Creates an instance of DocumentStatus class.
     *
     * @param sourcePath the sourcePath value to set.
     * @param createdDateTimeUtc the createdDateTimeUtc value to set.
     * @param lastActionDateTimeUtc the lastActionDateTimeUtc value to set.
     * @param status the status value to set.
     * @param to the to value to set.
     * @param progress the progress value to set.
     * @param id the id value to set.
     */
    @Generated
    private DocumentStatus(String sourcePath, OffsetDateTime createdDateTimeUtc, OffsetDateTime lastActionDateTimeUtc,
        Status status, String to, double progress, String id) {
        this.sourcePath = sourcePath;
        this.createdDateTimeUtc = createdDateTimeUtc;
        this.lastActionDateTimeUtc = lastActionDateTimeUtc;
        this.status = status;
        this.to = to;
        this.progress = progress;
        this.id = id;
    }

    /**
     * Get the path property: Location of the document or folder.
     *
     * @return the path value.
     */
    @Generated
    public String getPath() {
        return this.path;
    }

    /**
     * Get the sourcePath property: Location of the source document.
     *
     * @return the sourcePath value.
     */
    @Generated
    public String getSourcePath() {
        return this.sourcePath;
    }

    /**
     * Get the createdDateTimeUtc property: Operation created date time.
     *
     * @return the createdDateTimeUtc value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTimeUtc() {
        return this.createdDateTimeUtc;
    }

    /**
     * Get the lastActionDateTimeUtc property: Date time in which the operation's status has been updated.
     *
     * @return the lastActionDateTimeUtc value.
     */
    @Generated
    public OffsetDateTime getLastActionDateTimeUtc() {
        return this.lastActionDateTimeUtc;
    }

    /**
     * Get the status property: List of possible statuses for job or document.
     *
     * @return the status value.
     */
    @Generated
    public Status getStatus() {
        return this.status;
    }

    /**
     * Get the to property: To language.
     *
     * @return the to value.
     */
    @Generated
    public String getTo() {
        return this.to;
    }

    /**
     * Get the error property: This contains an outer error with error code, message, details, target and an
     * inner error with more descriptive details.
     *
     * @return the error value.
     */
    @Generated
    public TranslationError getError() {
        return this.error;
    }

    /**
     * Get the progress property: Progress of the translation if available.
     *
     * @return the progress value.
     */
    @Generated
    public double getProgress() {
        return this.progress;
    }

    /**
     * Get the id property: Document Id.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the characterCharged property: Character charged by the API.
     *
     * @return the characterCharged value.
     */
    @Generated
    public Integer getCharacterCharged() {
        return this.characterCharged;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourcePath", this.sourcePath);
        jsonWriter.writeStringField("createdDateTimeUtc",
            this.createdDateTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDateTimeUtc));
        jsonWriter.writeStringField("lastActionDateTimeUtc",
            this.lastActionDateTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastActionDateTimeUtc));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("to", this.to);
        jsonWriter.writeDoubleField("progress", this.progress);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeNumberField("characterCharged", this.characterCharged);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentStatus from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentStatus.
     */
    @Generated
    public static DocumentStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String sourcePath = null;
            OffsetDateTime createdDateTimeUtc = null;
            OffsetDateTime lastActionDateTimeUtc = null;
            Status status = null;
            String to = null;
            double progress = 0.0;
            String id = null;
            String path = null;
            TranslationError error = null;
            Integer characterCharged = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("sourcePath".equals(fieldName)) {
                    sourcePath = reader.getString();
                } else if ("createdDateTimeUtc".equals(fieldName)) {
                    createdDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastActionDateTimeUtc".equals(fieldName)) {
                    lastActionDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    status = Status.fromString(reader.getString());
                } else if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else if ("progress".equals(fieldName)) {
                    progress = reader.getDouble();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("path".equals(fieldName)) {
                    path = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = TranslationError.fromJson(reader);
                } else if ("characterCharged".equals(fieldName)) {
                    characterCharged = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            DocumentStatus deserializedDocumentStatus
                = new DocumentStatus(sourcePath, createdDateTimeUtc, lastActionDateTimeUtc, status, to, progress, id);
            deserializedDocumentStatus.path = path;
            deserializedDocumentStatus.error = error;
            deserializedDocumentStatus.characterCharged = characterCharged;
            return deserializedDocumentStatus;
        });
    }
}
