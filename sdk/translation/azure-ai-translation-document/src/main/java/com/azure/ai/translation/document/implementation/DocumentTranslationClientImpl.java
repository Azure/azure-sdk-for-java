// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.translation.document.implementation;

import com.azure.ai.translation.document.DocumentTranslationServiceVersion;
import com.azure.ai.translation.document.models.TranslationStatus;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the DocumentTranslationClient type.
 */
public final class DocumentTranslationClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DocumentTranslationClientService service;

    /**
     * Supported document Translation endpoint, protocol and hostname, for example:
     * https://{TranslatorResourceName}.cognitiveservices.azure.com/translator.
     */
    private final String endpoint;

    /**
     * Gets Supported document Translation endpoint, protocol and hostname, for example:
     * https://{TranslatorResourceName}.cognitiveservices.azure.com/translator.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final DocumentTranslationServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public DocumentTranslationServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of DocumentTranslationClient client.
     * 
     * @param endpoint Supported document Translation endpoint, protocol and hostname, for example:
     * https://{TranslatorResourceName}.cognitiveservices.azure.com/translator.
     * @param serviceVersion Service version.
     */
    public DocumentTranslationClientImpl(String endpoint, DocumentTranslationServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of DocumentTranslationClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported document Translation endpoint, protocol and hostname, for example:
     * https://{TranslatorResourceName}.cognitiveservices.azure.com/translator.
     * @param serviceVersion Service version.
     */
    public DocumentTranslationClientImpl(HttpPipeline httpPipeline, String endpoint,
        DocumentTranslationServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of DocumentTranslationClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported document Translation endpoint, protocol and hostname, for example:
     * https://{TranslatorResourceName}.cognitiveservices.azure.com/translator.
     * @param serviceVersion Service version.
     */
    public DocumentTranslationClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        String endpoint, DocumentTranslationServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(DocumentTranslationClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for DocumentTranslationClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/translator")
    @ServiceInterface(name = "DocumentTranslationC")
    public interface DocumentTranslationClientService {
        @Post("/document/batches")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startTranslation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData startTranslationDetails, RequestOptions requestOptions,
            Context context);

        @Post("/document/batches")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> startTranslationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData startTranslationDetails, RequestOptions requestOptions,
            Context context);

        @Get("/document/batches")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTranslationsStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/document/batches")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTranslationsStatusSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/document/batches/{id}/documents/{documentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDocumentStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @PathParam("documentId") String documentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/document/batches/{id}/documents/{documentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDocumentStatusSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @PathParam("documentId") String documentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/document/batches/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTranslationStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/document/batches/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTranslationStatusSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/document/batches/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancelTranslation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/document/batches/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelTranslationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/document/batches/{id}/documents")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDocumentsStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/document/batches/{id}/documents")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDocumentsStatusSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/document/formats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSupportedFormats(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/document/formats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSupportedFormatsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTranslationsStatusNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTranslationsStatusNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDocumentsStatusNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDocumentsStatusNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Submit a document translation request to the Document Translation service
     * 
     * Use this API to submit a bulk (batch) translation request to the Document
     * Translation service.
     * Each request can contain multiple documents and must
     * contain a source and destination container for each document.
     * 
     * The
     * prefix and suffix filter (if supplied) are used to filter folders. The prefix
     * is applied to the subpath after the container name.
     * 
     * Glossaries /
     * Translation memory can be included in the request and are applied by the
     * service when the document is translated.
     * 
     * If the glossary is
     * invalid or unreachable during translation, an error is indicated in the
     * document status.
     * If a file with the same name already exists at the
     * destination, it will be overwritten. The targetUrl for each target language
     * must be unique.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputs (Required): [
     *          (Required){
     *             source (Required): {
     *                 sourceUrl: String (Required)
     *                 filter (Optional): {
     *                     prefix: String (Optional)
     *                     suffix: String (Optional)
     *                 }
     *                 language: String (Optional)
     *                 storageSource: String(AzureBlob) (Optional)
     *             }
     *             targets (Required): [
     *                  (Required){
     *                     targetUrl: String (Required)
     *                     category: String (Optional)
     *                     language: String (Required)
     *                     glossaries (Optional): [
     *                          (Optional){
     *                             glossaryUrl: String (Required)
     *                             format: String (Required)
     *                             version: String (Optional)
     *                             storageSource: String(AzureBlob) (Optional)
     *                         }
     *                     ]
     *                     storageSource: String(AzureBlob) (Optional)
     *                 }
     *             ]
     *             storageType: String(Folder/File) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param startTranslationDetails Translation job submission batch request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> startTranslationWithResponseAsync(BinaryData startTranslationDetails,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.startTranslation(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, startTranslationDetails, requestOptions, context));
    }

    /**
     * Submit a document translation request to the Document Translation service
     * 
     * Use this API to submit a bulk (batch) translation request to the Document
     * Translation service.
     * Each request can contain multiple documents and must
     * contain a source and destination container for each document.
     * 
     * The
     * prefix and suffix filter (if supplied) are used to filter folders. The prefix
     * is applied to the subpath after the container name.
     * 
     * Glossaries /
     * Translation memory can be included in the request and are applied by the
     * service when the document is translated.
     * 
     * If the glossary is
     * invalid or unreachable during translation, an error is indicated in the
     * document status.
     * If a file with the same name already exists at the
     * destination, it will be overwritten. The targetUrl for each target language
     * must be unique.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputs (Required): [
     *          (Required){
     *             source (Required): {
     *                 sourceUrl: String (Required)
     *                 filter (Optional): {
     *                     prefix: String (Optional)
     *                     suffix: String (Optional)
     *                 }
     *                 language: String (Optional)
     *                 storageSource: String(AzureBlob) (Optional)
     *             }
     *             targets (Required): [
     *                  (Required){
     *                     targetUrl: String (Required)
     *                     category: String (Optional)
     *                     language: String (Required)
     *                     glossaries (Optional): [
     *                          (Optional){
     *                             glossaryUrl: String (Required)
     *                             format: String (Required)
     *                             version: String (Optional)
     *                             storageSource: String(AzureBlob) (Optional)
     *                         }
     *                     ]
     *                     storageSource: String(AzureBlob) (Optional)
     *                 }
     *             ]
     *             storageType: String(Folder/File) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param startTranslationDetails Translation job submission batch request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> startTranslationWithResponse(BinaryData startTranslationDetails,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.startTranslationSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            startTranslationDetails, requestOptions, Context.NONE);
    }

    /**
     * Submit a document translation request to the Document Translation service
     * 
     * Use this API to submit a bulk (batch) translation request to the Document
     * Translation service.
     * Each request can contain multiple documents and must
     * contain a source and destination container for each document.
     * 
     * The
     * prefix and suffix filter (if supplied) are used to filter folders. The prefix
     * is applied to the subpath after the container name.
     * 
     * Glossaries /
     * Translation memory can be included in the request and are applied by the
     * service when the document is translated.
     * 
     * If the glossary is
     * invalid or unreachable during translation, an error is indicated in the
     * document status.
     * If a file with the same name already exists at the
     * destination, it will be overwritten. The targetUrl for each target language
     * must be unique.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputs (Required): [
     *          (Required){
     *             source (Required): {
     *                 sourceUrl: String (Required)
     *                 filter (Optional): {
     *                     prefix: String (Optional)
     *                     suffix: String (Optional)
     *                 }
     *                 language: String (Optional)
     *                 storageSource: String(AzureBlob) (Optional)
     *             }
     *             targets (Required): [
     *                  (Required){
     *                     targetUrl: String (Required)
     *                     category: String (Optional)
     *                     language: String (Required)
     *                     glossaries (Optional): [
     *                          (Optional){
     *                             glossaryUrl: String (Required)
     *                             format: String (Required)
     *                             version: String (Optional)
     *                             storageSource: String(AzureBlob) (Optional)
     *                         }
     *                     ]
     *                     storageSource: String(AzureBlob) (Optional)
     *                 }
     *             ]
     *             storageType: String(Folder/File) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param startTranslationDetails Translation job submission batch request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginStartTranslationAsync(BinaryData startTranslationDetails,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.startTranslationWithResponseAsync(startTranslationDetails, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}/translator".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Submit a document translation request to the Document Translation service
     * 
     * Use this API to submit a bulk (batch) translation request to the Document
     * Translation service.
     * Each request can contain multiple documents and must
     * contain a source and destination container for each document.
     * 
     * The
     * prefix and suffix filter (if supplied) are used to filter folders. The prefix
     * is applied to the subpath after the container name.
     * 
     * Glossaries /
     * Translation memory can be included in the request and are applied by the
     * service when the document is translated.
     * 
     * If the glossary is
     * invalid or unreachable during translation, an error is indicated in the
     * document status.
     * If a file with the same name already exists at the
     * destination, it will be overwritten. The targetUrl for each target language
     * must be unique.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputs (Required): [
     *          (Required){
     *             source (Required): {
     *                 sourceUrl: String (Required)
     *                 filter (Optional): {
     *                     prefix: String (Optional)
     *                     suffix: String (Optional)
     *                 }
     *                 language: String (Optional)
     *                 storageSource: String(AzureBlob) (Optional)
     *             }
     *             targets (Required): [
     *                  (Required){
     *                     targetUrl: String (Required)
     *                     category: String (Optional)
     *                     language: String (Required)
     *                     glossaries (Optional): [
     *                          (Optional){
     *                             glossaryUrl: String (Required)
     *                             format: String (Required)
     *                             version: String (Optional)
     *                             storageSource: String(AzureBlob) (Optional)
     *                         }
     *                     ]
     *                     storageSource: String(AzureBlob) (Optional)
     *                 }
     *             ]
     *             storageType: String(Folder/File) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param startTranslationDetails Translation job submission batch request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginStartTranslation(BinaryData startTranslationDetails,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.startTranslationWithResponse(startTranslationDetails, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}/translator".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Submit a document translation request to the Document Translation service
     * 
     * Use this API to submit a bulk (batch) translation request to the Document
     * Translation service.
     * Each request can contain multiple documents and must
     * contain a source and destination container for each document.
     * 
     * The
     * prefix and suffix filter (if supplied) are used to filter folders. The prefix
     * is applied to the subpath after the container name.
     * 
     * Glossaries /
     * Translation memory can be included in the request and are applied by the
     * service when the document is translated.
     * 
     * If the glossary is
     * invalid or unreachable during translation, an error is indicated in the
     * document status.
     * If a file with the same name already exists at the
     * destination, it will be overwritten. The targetUrl for each target language
     * must be unique.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputs (Required): [
     *          (Required){
     *             source (Required): {
     *                 sourceUrl: String (Required)
     *                 filter (Optional): {
     *                     prefix: String (Optional)
     *                     suffix: String (Optional)
     *                 }
     *                 language: String (Optional)
     *                 storageSource: String(AzureBlob) (Optional)
     *             }
     *             targets (Required): [
     *                  (Required){
     *                     targetUrl: String (Required)
     *                     category: String (Optional)
     *                     language: String (Required)
     *                     glossaries (Optional): [
     *                          (Optional){
     *                             glossaryUrl: String (Required)
     *                             format: String (Required)
     *                             version: String (Optional)
     *                             storageSource: String(AzureBlob) (Optional)
     *                         }
     *                     ]
     *                     storageSource: String(AzureBlob) (Optional)
     *                 }
     *             ]
     *             storageType: String(Folder/File) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param startTranslationDetails Translation job submission batch request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<TranslationStatus, Void> beginStartTranslationWithModelAsync(BinaryData startTranslationDetails,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.startTranslationWithResponseAsync(startTranslationDetails, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}/translator".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(TranslationStatus.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Submit a document translation request to the Document Translation service
     * 
     * Use this API to submit a bulk (batch) translation request to the Document
     * Translation service.
     * Each request can contain multiple documents and must
     * contain a source and destination container for each document.
     * 
     * The
     * prefix and suffix filter (if supplied) are used to filter folders. The prefix
     * is applied to the subpath after the container name.
     * 
     * Glossaries /
     * Translation memory can be included in the request and are applied by the
     * service when the document is translated.
     * 
     * If the glossary is
     * invalid or unreachable during translation, an error is indicated in the
     * document status.
     * If a file with the same name already exists at the
     * destination, it will be overwritten. The targetUrl for each target language
     * must be unique.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputs (Required): [
     *          (Required){
     *             source (Required): {
     *                 sourceUrl: String (Required)
     *                 filter (Optional): {
     *                     prefix: String (Optional)
     *                     suffix: String (Optional)
     *                 }
     *                 language: String (Optional)
     *                 storageSource: String(AzureBlob) (Optional)
     *             }
     *             targets (Required): [
     *                  (Required){
     *                     targetUrl: String (Required)
     *                     category: String (Optional)
     *                     language: String (Required)
     *                     glossaries (Optional): [
     *                          (Optional){
     *                             glossaryUrl: String (Required)
     *                             format: String (Required)
     *                             version: String (Optional)
     *                             storageSource: String(AzureBlob) (Optional)
     *                         }
     *                     ]
     *                     storageSource: String(AzureBlob) (Optional)
     *                 }
     *             ]
     *             storageType: String(Folder/File) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param startTranslationDetails Translation job submission batch request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TranslationStatus, Void> beginStartTranslationWithModel(BinaryData startTranslationDetails,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.startTranslationWithResponse(startTranslationDetails, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("{endpoint}/translator".replace("{endpoint}", this.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(TranslationStatus.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Returns a list of batch requests submitted and the status for each request
     * 
     * Returns a list of batch requests submitted and the status for each
     * request.
     * This list only contains batch requests submitted by the user (based on
     * the resource).
     * 
     * If the number of requests exceeds our paging limit,
     * server-side paging is used. Paginated responses indicate a partial result and
     * include a continuation token in the response.
     * The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of batches based on the
     * sorting method specified. By default, we sort by descending start
     * time.
     * maxpagesize is the maximum items returned in a page. If more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * operations.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * The server honors
     * the values specified by the client. However, clients must be prepared to handle
     * responses that contain a different page size or contain a continuation token.
     * 
     * 
     * When both top and skip are included, the server should first apply
     * skip and then top on the collection.
     * Note: If the server can't honor top
     * and/or skip, the server must return an error to the client informing about it
     * instead of just ignoring the query options.
     * This reduces the risk of the client
     * making assumptions about the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job Status Response along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> getTranslationsStatusSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getTranslationsStatus(this.getEndpoint(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Returns a list of batch requests submitted and the status for each request
     * 
     * Returns a list of batch requests submitted and the status for each
     * request.
     * This list only contains batch requests submitted by the user (based on
     * the resource).
     * 
     * If the number of requests exceeds our paging limit,
     * server-side paging is used. Paginated responses indicate a partial result and
     * include a continuation token in the response.
     * The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of batches based on the
     * sorting method specified. By default, we sort by descending start
     * time.
     * maxpagesize is the maximum items returned in a page. If more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * operations.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * The server honors
     * the values specified by the client. However, clients must be prepared to handle
     * responses that contain a different page size or contain a continuation token.
     * 
     * 
     * When both top and skip are included, the server should first apply
     * skip and then top on the collection.
     * Note: If the server can't honor top
     * and/or skip, the server must return an error to the client informing about it
     * instead of just ignoring the query options.
     * This reduces the risk of the client
     * making assumptions about the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job Status Response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getTranslationsStatusAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getTranslationsStatusSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getTranslationsStatusNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Returns a list of batch requests submitted and the status for each request
     * 
     * Returns a list of batch requests submitted and the status for each
     * request.
     * This list only contains batch requests submitted by the user (based on
     * the resource).
     * 
     * If the number of requests exceeds our paging limit,
     * server-side paging is used. Paginated responses indicate a partial result and
     * include a continuation token in the response.
     * The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of batches based on the
     * sorting method specified. By default, we sort by descending start
     * time.
     * maxpagesize is the maximum items returned in a page. If more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * operations.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * The server honors
     * the values specified by the client. However, clients must be prepared to handle
     * responses that contain a different page size or contain a continuation token.
     * 
     * 
     * When both top and skip are included, the server should first apply
     * skip and then top on the collection.
     * Note: If the server can't honor top
     * and/or skip, the server must return an error to the client informing about it
     * instead of just ignoring the query options.
     * This reduces the risk of the client
     * making assumptions about the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job Status Response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> getTranslationsStatusSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.getTranslationsStatusSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Returns a list of batch requests submitted and the status for each request
     * 
     * Returns a list of batch requests submitted and the status for each
     * request.
     * This list only contains batch requests submitted by the user (based on
     * the resource).
     * 
     * If the number of requests exceeds our paging limit,
     * server-side paging is used. Paginated responses indicate a partial result and
     * include a continuation token in the response.
     * The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of batches based on the
     * sorting method specified. By default, we sort by descending start
     * time.
     * maxpagesize is the maximum items returned in a page. If more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * operations.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * The server honors
     * the values specified by the client. However, clients must be prepared to handle
     * responses that contain a different page size or contain a continuation token.
     * 
     * 
     * When both top and skip are included, the server should first apply
     * skip and then top on the collection.
     * Note: If the server can't honor top
     * and/or skip, the server must return an error to the client informing about it
     * instead of just ignoring the query options.
     * This reduces the risk of the client
     * making assumptions about the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job Status Response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getTranslationsStatus(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getTranslationsStatusSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getTranslationsStatusNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Returns the status for a specific document
     * 
     * Returns the translation status for a specific document based on the request Id
     * and document Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The batch id.
     * @param documentId Format - uuid. The document id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return document Status Response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDocumentStatusWithResponseAsync(String id, String documentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDocumentStatus(this.getEndpoint(),
            this.getServiceVersion().getVersion(), id, documentId, accept, requestOptions, context));
    }

    /**
     * Returns the status for a specific document
     * 
     * Returns the translation status for a specific document based on the request Id
     * and document Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The batch id.
     * @param documentId Format - uuid. The document id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return document Status Response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDocumentStatusWithResponse(String id, String documentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDocumentStatusSync(this.getEndpoint(), this.getServiceVersion().getVersion(), id, documentId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Returns the status for a document translation request
     * 
     * Returns the status for a document translation request.
     * The status includes the
     * overall request status, as well as the status for documents that are being
     * translated as part of that request.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job status response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTranslationStatusWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTranslationStatus(this.getEndpoint(),
            this.getServiceVersion().getVersion(), id, accept, requestOptions, context));
    }

    /**
     * Returns the status for a document translation request
     * 
     * Returns the status for a document translation request.
     * The status includes the
     * overall request status, as well as the status for documents that are being
     * translated as part of that request.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job status response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranslationStatusWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTranslationStatusSync(this.getEndpoint(), this.getServiceVersion().getVersion(), id, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Cancel a currently processing or queued translation
     * 
     * Cancel a currently processing or queued translation.
     * A translation will not be
     * cancelled if it is already completed or failed or cancelling. A bad request
     * will be returned.
     * All documents that have completed translation will not be
     * cancelled and will be charged.
     * All pending documents will be cancelled if
     * possible.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation-id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job status response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelTranslationWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.cancelTranslation(this.getEndpoint(),
            this.getServiceVersion().getVersion(), id, accept, requestOptions, context));
    }

    /**
     * Cancel a currently processing or queued translation
     * 
     * Cancel a currently processing or queued translation.
     * A translation will not be
     * cancelled if it is already completed or failed or cancelling. A bad request
     * will be returned.
     * All documents that have completed translation will not be
     * cancelled and will be charged.
     * All pending documents will be cancelled if
     * possible.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation-id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job status response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelTranslationWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelTranslationSync(this.getEndpoint(), this.getServiceVersion().getVersion(), id, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Returns the status for all documents in a batch document translation request
     * 
     * Returns the status for all documents in a batch document translation request.
     * 
     * 
     * If the number of documents in the response exceeds our paging limit,
     * server-side paging is used.
     * Paginated responses indicate a partial result and
     * include a continuation token in the response. The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of document status held
     * by the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * maxpagesize is the maximum items returned in a page.
     * If more items are requested via top (or top is not specified and there are
     * more items to be returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * documents.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * When both top
     * and skip are included, the server should first apply skip and then top on
     * the collection.
     * Note: If the server can't honor top and/or skip, the server
     * must return an error to the client informing about it instead of just ignoring
     * the query options.
     * This reduces the risk of the client making assumptions about
     * the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return documents Status Response along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> getDocumentsStatusSinglePageAsync(String id,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getDocumentsStatus(this.getEndpoint(),
                this.getServiceVersion().getVersion(), id, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Returns the status for all documents in a batch document translation request
     * 
     * Returns the status for all documents in a batch document translation request.
     * 
     * 
     * If the number of documents in the response exceeds our paging limit,
     * server-side paging is used.
     * Paginated responses indicate a partial result and
     * include a continuation token in the response. The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of document status held
     * by the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * maxpagesize is the maximum items returned in a page.
     * If more items are requested via top (or top is not specified and there are
     * more items to be returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * documents.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * When both top
     * and skip are included, the server should first apply skip and then top on
     * the collection.
     * Note: If the server can't honor top and/or skip, the server
     * must return an error to the client informing about it instead of just ignoring
     * the query options.
     * This reduces the risk of the client making assumptions about
     * the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return documents Status Response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDocumentsStatusAsync(String id, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getDocumentsStatusSinglePageAsync(id, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getDocumentsStatusNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Returns the status for all documents in a batch document translation request
     * 
     * Returns the status for all documents in a batch document translation request.
     * 
     * 
     * If the number of documents in the response exceeds our paging limit,
     * server-side paging is used.
     * Paginated responses indicate a partial result and
     * include a continuation token in the response. The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of document status held
     * by the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * maxpagesize is the maximum items returned in a page.
     * If more items are requested via top (or top is not specified and there are
     * more items to be returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * documents.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * When both top
     * and skip are included, the server should first apply skip and then top on
     * the collection.
     * Note: If the server can't honor top and/or skip, the server
     * must return an error to the client informing about it instead of just ignoring
     * the query options.
     * This reduces the risk of the client making assumptions about
     * the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return documents Status Response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> getDocumentsStatusSinglePage(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.getDocumentsStatusSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), id, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Returns the status for all documents in a batch document translation request
     * 
     * Returns the status for all documents in a batch document translation request.
     * 
     * 
     * If the number of documents in the response exceeds our paging limit,
     * server-side paging is used.
     * Paginated responses indicate a partial result and
     * include a continuation token in the response. The absence of a continuation
     * token means that no additional pages are available.
     * 
     * top, skip
     * and maxpagesize query parameters can be used to specify a number of results to
     * return and an offset for the collection.
     * 
     * top indicates the total
     * number of records the user wants to be returned across all pages.
     * skip
     * indicates the number of records to skip from the list of document status held
     * by the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * maxpagesize is the maximum items returned in a page.
     * If more items are requested via top (or top is not specified and there are
     * more items to be returned), &#064;nextLink will contain the link to the next page.
     * 
     * 
     * orderby query parameter can be used to sort the returned list (ex
     * "orderby=createdDateTimeUtc asc" or "orderby=createdDateTimeUtc
     * desc").
     * The default sorting is descending by createdDateTimeUtc.
     * Some query
     * parameters can be used to filter the returned list (ex:
     * "status=Succeeded,Cancelled") will only return succeeded and cancelled
     * documents.
     * createdDateTimeUtcStart and createdDateTimeUtcEnd can be used
     * combined or separately to specify a range of datetime to filter the returned
     * list by.
     * The supported filtering query parameters are (status, ids,
     * createdDateTimeUtcStart, createdDateTimeUtcEnd).
     * 
     * When both top
     * and skip are included, the server should first apply skip and then top on
     * the collection.
     * Note: If the server can't honor top and/or skip, the server
     * must return an error to the client informing about it instead of just ignoring
     * the query options.
     * This reduces the risk of the client making assumptions about
     * the data returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>top indicates the total number of records the user wants to be
     * returned across
     * all pages.
     * 
     * Clients MAY use top and skip query parameters to
     * specify a number of results to return and an offset into the collection.
     * When
     * both top and skip are given by a client, the server SHOULD first apply skip
     * and then top on the collection.
     * 
     * Note: If the server can't honor
     * top and/or skip, the server MUST return an error to the client informing
     * about it instead of just ignoring the query options.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>skip indicates the number of records to skip from the list of
     * records held by
     * the server based on the sorting method specified. By default, we sort by
     * descending start time.
     * 
     * Clients MAY use top and skip query
     * parameters to specify a number of results to return and an offset into the
     * collection.
     * When both top and skip are given by a client, the server SHOULD
     * first apply skip and then top on the collection.
     * 
     * Note: If the
     * server can't honor top and/or skip, the server MUST return an error to the
     * client informing about it instead of just ignoring the query options.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>maxpagesize is the maximum items returned in a page. If
     * more items are
     * requested via top (or top is not specified and there are more items to be
     * returned), @nextLink will contain the link to the next page.
     * 
     * 
     * Clients MAY request server-driven paging with a specific page size by
     * specifying a maxpagesize preference. The server SHOULD honor this preference
     * if the specified page size is smaller than the server's default page size.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids to use in filtering. In the form of "," separated
     * string.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses to use in filtering. In the form of ","
     * separated string.</td></tr>
     * <tr><td>createdDateTimeUtcStart</td><td>OffsetDateTime</td><td>No</td><td>the start datetime to get items
     * after</td></tr>
     * <tr><td>createdDateTimeUtcEnd</td><td>OffsetDateTime</td><td>No</td><td>the end datetime to get items
     * before</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>the sorting query for the collection (ex:
     * 'CreatedDateTimeUtc asc','CreatedDateTimeUtc desc'). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param id Format - uuid. The operation id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return documents Status Response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDocumentsStatus(String id, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getDocumentsStatusSinglePage(id, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getDocumentsStatusNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Returns a list of supported document formats
     * 
     * The list of supported formats supported by the Document Translation
     * service.
     * The list includes the common file extension, as well as the
     * content-type if using the upload API.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>type</td><td>String</td><td>No</td><td>the type of format like document or glossary . Allowed values:
     * "document", "glossary".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             format: String (Required)
     *             fileExtensions (Required): [
     *                 String (Required)
     *             ]
     *             contentTypes (Required): [
     *                 String (Required)
     *             ]
     *             defaultVersion: String (Optional)
     *             versions (Optional): [
     *                 String (Optional)
     *             ]
     *             type: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of supported file formats along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSupportedFormatsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSupportedFormats(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Returns a list of supported document formats
     * 
     * The list of supported formats supported by the Document Translation
     * service.
     * The list includes the common file extension, as well as the
     * content-type if using the upload API.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>type</td><td>String</td><td>No</td><td>the type of format like document or glossary . Allowed values:
     * "document", "glossary".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             format: String (Required)
     *             fileExtensions (Required): [
     *                 String (Required)
     *             ]
     *             contentTypes (Required): [
     *                 String (Required)
     *             ]
     *             defaultVersion: String (Optional)
     *             versions (Optional): [
     *                 String (Optional)
     *             ]
     *             type: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of supported file formats along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSupportedFormatsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSupportedFormatsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Returns a list of batch requests submitted and the status for each request
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job Status Response along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> getTranslationsStatusNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getTranslationsStatusNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Returns a list of batch requests submitted and the status for each request
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     summary (Required): {
     *         total: int (Required)
     *         failed: int (Required)
     *         success: int (Required)
     *         inProgress: int (Required)
     *         notYetStarted: int (Required)
     *         cancelled: int (Required)
     *         totalCharacterCharged: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return translation job Status Response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> getTranslationsStatusNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.getTranslationsStatusNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Returns the status for all documents in a batch document translation request
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return documents Status Response along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> getDocumentsStatusNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getDocumentsStatusNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Returns the status for all documents in a batch document translation request
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     path: String (Optional)
     *     sourcePath: String (Required)
     *     createdDateTimeUtc: OffsetDateTime (Required)
     *     lastActionDateTimeUtc: OffsetDateTime (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed) (Required)
     *     to: String (Required)
     *     error (Optional): {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh) (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         innerError (Optional): {
     *             code: String (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             innerError (Optional): (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: double (Required)
     *     id: String (Required)
     *     characterCharged: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return documents Status Response along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> getDocumentsStatusNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.getDocumentsStatusNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
