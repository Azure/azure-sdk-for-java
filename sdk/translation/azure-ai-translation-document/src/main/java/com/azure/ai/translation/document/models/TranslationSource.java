// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Source of the input documents.
 */
@Fluent
public final class TranslationSource implements JsonSerializable<TranslationSource> {

    /*
     * Location of the folder / container or single file with your documents
     */
    @Generated
    private final String sourceUrl;

    /*
     * Document filter
     */
    @Generated
    private DocumentFilter filter;

    /*
     * A case-sensitive prefix string to filter documents in the source path for
     * translation.
     * For example, when using a Azure storage blob Uri, use the prefix
     * to restrict sub folders for translation.
     */
    private String prefix;

    /*
     * A case-sensitive suffix string to filter documents in the source path for
     * translation.
     * This is most often use for file extensions
     */
    private String suffix;

    /**
     * Get the prefix property: A case-sensitive prefix string to filter documents
     * in the source path for
     * translation.
     * For example, when using a Azure storage blob Uri, use the prefix
     * to restrict sub folders for translation.
     *
     * @return the prefix value.
     */
    public String getPrefix() {
        if (filter != null) {
            prefix = filter.getPrefix();
        }
        return prefix;
    }

    /**
     * Set the prefix property: A case-sensitive prefix string to filter documents
     * in the source path for
     * translation.
     * For example, when using a Azure storage blob Uri, use the prefix
     * to restrict sub folders for translation.
     *
     * @param prefix the prefix value to set.
     * @return the TranslationSource object itself.
     */
    public TranslationSource setPrefix(String prefix) {
        this.prefix = prefix;
        if (filter == null) {
            filter = new DocumentFilter();
        }
        filter.setPrefix(prefix);
        return this;
    }

    /**
     * Get the suffix property: A case-sensitive suffix string to filter documents
     * in the source path for
     * translation.
     * This is most often use for file extensions.
     *
     * @return the suffix value.
     */
    public String getSuffix() {
        if (filter != null) {
            suffix = filter.getSuffix();
        }
        return suffix;
    }

    /**
     * Set the suffix property: A case-sensitive suffix string to filter documents
     * in the source path for
     * translation.
     * This is most often use for file extensions.
     *
     * @param suffix the suffix value to set.
     * @return the TranslationSource object itself.
     */
    public TranslationSource setSuffix(String suffix) {
        this.suffix = suffix;
        if (filter == null) {
            filter = new DocumentFilter();
        }
        filter.setSuffix(suffix);
        return this;
    }

    /*
     * Language code
     * If none is specified, we will perform auto detect on the document
     */
    @Generated
    private String language;

    /*
     * Storage Source
     */
    @Generated
    private TranslationStorageSource storageSource;

    /**
     * Creates an instance of TranslationSource class.
     *
     * @param sourceUrl the sourceUrl value to set.
     */
    @Generated
    public TranslationSource(String sourceUrl) {
        this.sourceUrl = sourceUrl;
    }

    /**
     * Get the sourceUrl property: Location of the folder / container or single file with your documents.
     *
     * @return the sourceUrl value.
     */
    @Generated
    public String getSourceUrl() {
        return this.sourceUrl;
    }

    /**
     * Get the filter property: Document filter.
     *
     * @return the filter value.
     */
    @Generated
    public DocumentFilter getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: Document filter.
     *
     * @param filter the filter value to set.
     * @return the TranslationSource object itself.
     */
    @Generated
    public TranslationSource setFilter(DocumentFilter filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the language property: Language code
     * If none is specified, we will perform auto detect on the document.
     *
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: Language code
     * If none is specified, we will perform auto detect on the document.
     *
     * @param language the language value to set.
     * @return the TranslationSource object itself.
     */
    @Generated
    public TranslationSource setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the storageSource property: Storage Source.
     *
     * @return the storageSource value.
     */
    @Generated
    public TranslationStorageSource getStorageSource() {
        return this.storageSource;
    }

    /**
     * Set the storageSource property: Storage Source.
     *
     * @param storageSource the storageSource value to set.
     * @return the TranslationSource object itself.
     */
    @Generated
    public TranslationSource setStorageSource(TranslationStorageSource storageSource) {
        this.storageSource = storageSource;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceUrl", this.sourceUrl);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("suffix", this.suffix);
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeStringField("storageSource", this.storageSource == null ? null : this.storageSource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslationSource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslationSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslationSource.
     */
    public static TranslationSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String sourceUrl = null;
            String prefix = null;
            String suffix = null;
            String language = null;
            TranslationStorageSource storageSource = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("sourceUrl".equals(fieldName)) {
                    sourceUrl = reader.getString();
                } else if ("prefix".equals(fieldName)) {
                    prefix = reader.getString();
                } else if ("suffix".equals(fieldName)) {
                    suffix = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("storageSource".equals(fieldName)) {
                    storageSource = TranslationStorageSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TranslationSource deserializedTranslationSource = new TranslationSource(sourceUrl);
            deserializedTranslationSource.prefix = prefix;
            deserializedTranslationSource.suffix = suffix;
            deserializedTranslationSource.language = language;
            deserializedTranslationSource.storageSource = storageSource;
            return deserializedTranslationSource;
        });
    }
}
