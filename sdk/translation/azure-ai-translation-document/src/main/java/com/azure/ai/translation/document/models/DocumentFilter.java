// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Document filter.
 */
@Fluent
public final class DocumentFilter implements JsonSerializable<DocumentFilter> {

    /*
     * A case-sensitive prefix string to filter documents in the source path for
     * translation.
     * For example, when using a Azure storage blob Uri, use the prefix
     * to restrict sub folders for translation.
     */
    @Generated
    private String prefix;

    /*
     * A case-sensitive suffix string to filter documents in the source path for
     * translation.
     * This is most often use for file extensions
     */
    @Generated
    private String suffix;

    /**
     * Creates an instance of DocumentFilter class.
     */
    @Generated
    public DocumentFilter() {
    }

    /**
     * Get the prefix property: A case-sensitive prefix string to filter documents in the source path for
     * translation.
     * For example, when using a Azure storage blob Uri, use the prefix
     * to restrict sub folders for translation.
     *
     * @return the prefix value.
     */
    @Generated
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: A case-sensitive prefix string to filter documents in the source path for
     * translation.
     * For example, when using a Azure storage blob Uri, use the prefix
     * to restrict sub folders for translation.
     *
     * @param prefix the prefix value to set.
     * @return the DocumentFilter object itself.
     */
    @Generated
    public DocumentFilter setPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the suffix property: A case-sensitive suffix string to filter documents in the source path for
     * translation.
     * This is most often use for file extensions.
     *
     * @return the suffix value.
     */
    @Generated
    public String getSuffix() {
        return this.suffix;
    }

    /**
     * Set the suffix property: A case-sensitive suffix string to filter documents in the source path for
     * translation.
     * This is most often use for file extensions.
     *
     * @param suffix the suffix value to set.
     * @return the DocumentFilter object itself.
     */
    @Generated
    public DocumentFilter setSuffix(String suffix) {
        this.suffix = suffix;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("suffix", this.suffix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentFilter from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DocumentFilter.
     */
    @Generated
    public static DocumentFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentFilter deserializedDocumentFilter = new DocumentFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("prefix".equals(fieldName)) {
                    deserializedDocumentFilter.prefix = reader.getString();
                } else if ("suffix".equals(fieldName)) {
                    deserializedDocumentFilter.suffix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDocumentFilter;
        });
    }
}
