// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Status Summary.
 */
@Immutable
public final class TranslationStatusSummary implements JsonSerializable<TranslationStatusSummary> {

    /*
     * Total count
     */
    @Generated
    private final int totalCount;

    /*
     * Failed count
     */
    @Generated
    private final int failedCount;

    /*
     * Number of Success
     */
    @Generated
    private final int successCount;

    /*
     * Number of in progress
     */
    @Generated
    private final int inProgressCount;

    /*
     * Count of not yet started
     */
    @Generated
    private final int notYetStartedCount;

    /*
     * Number of cancelled
     */
    @Generated
    private final int cancelledCount;

    /*
     * Total characters charged by the API
     */
    @Generated
    private final long totalCharactersChargedCount;

    /**
     * Creates an instance of TranslationStatusSummary class.
     *
     * @param totalCount the totalCount value to set.
     * @param failedCount the failedCount value to set.
     * @param successCount the successCount value to set.
     * @param inProgressCount the inProgressCount value to set.
     * @param notYetStartedCount the notYetStartedCount value to set.
     * @param cancelledCount the cancelledCount value to set.
     * @param totalCharactersChargedCount the totalCharactersChargedCount value to set.
     */
    @Generated
    private TranslationStatusSummary(int totalCount, int failedCount, int successCount, int inProgressCount,
        int notYetStartedCount, int cancelledCount, long totalCharactersChargedCount) {
        this.totalCount = totalCount;
        this.failedCount = failedCount;
        this.successCount = successCount;
        this.inProgressCount = inProgressCount;
        this.notYetStartedCount = notYetStartedCount;
        this.cancelledCount = cancelledCount;
        this.totalCharactersChargedCount = totalCharactersChargedCount;
    }

    /**
     * Get the totalCount property: Total count.
     *
     * @return the totalCount value.
     */
    @Generated
    public int getTotalCount() {
        return this.totalCount;
    }

    /**
     * Get the failedCount property: Failed count.
     *
     * @return the failedCount value.
     */
    @Generated
    public int getFailedCount() {
        return this.failedCount;
    }

    /**
     * Get the successCount property: Number of Success.
     *
     * @return the successCount value.
     */
    @Generated
    public int getSuccessCount() {
        return this.successCount;
    }

    /**
     * Get the inProgressCount property: Number of in progress.
     *
     * @return the inProgressCount value.
     */
    @Generated
    public int getInProgressCount() {
        return this.inProgressCount;
    }

    /**
     * Get the notYetStartedCount property: Count of not yet started.
     *
     * @return the notYetStartedCount value.
     */
    @Generated
    public int getNotYetStartedCount() {
        return this.notYetStartedCount;
    }

    /**
     * Get the cancelledCount property: Number of cancelled.
     *
     * @return the cancelledCount value.
     */
    @Generated
    public int getCancelledCount() {
        return this.cancelledCount;
    }

    /**
     * Get the totalCharactersChargedCount property: Total characters charged by the API.
     *
     * @return the totalCharactersChargedCount value.
     */
    @Generated
    public long getTotalCharactersChargedCount() {
        return this.totalCharactersChargedCount;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("total", this.totalCount);
        jsonWriter.writeIntField("failed", this.failedCount);
        jsonWriter.writeIntField("success", this.successCount);
        jsonWriter.writeIntField("inProgress", this.inProgressCount);
        jsonWriter.writeIntField("notYetStarted", this.notYetStartedCount);
        jsonWriter.writeIntField("cancelled", this.cancelledCount);
        jsonWriter.writeLongField("totalCharacterCharged", this.totalCharactersChargedCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslationStatusSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslationStatusSummary if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslationStatusSummary.
     */
    @Generated
    public static TranslationStatusSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int totalCount = 0;
            int failedCount = 0;
            int successCount = 0;
            int inProgressCount = 0;
            int notYetStartedCount = 0;
            int cancelledCount = 0;
            long totalCharactersChargedCount = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("total".equals(fieldName)) {
                    totalCount = reader.getInt();
                } else if ("failed".equals(fieldName)) {
                    failedCount = reader.getInt();
                } else if ("success".equals(fieldName)) {
                    successCount = reader.getInt();
                } else if ("inProgress".equals(fieldName)) {
                    inProgressCount = reader.getInt();
                } else if ("notYetStarted".equals(fieldName)) {
                    notYetStartedCount = reader.getInt();
                } else if ("cancelled".equals(fieldName)) {
                    cancelledCount = reader.getInt();
                } else if ("totalCharacterCharged".equals(fieldName)) {
                    totalCharactersChargedCount = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new TranslationStatusSummary(totalCount, failedCount, successCount, inProgressCount,
                notYetStartedCount, cancelledCount, totalCharactersChargedCount);
        });
    }
}
