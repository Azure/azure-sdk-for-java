// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * File Format.
 */
@Immutable
public final class FileFormat implements JsonSerializable<FileFormat> {

    /*
     * Name of the format
     */
    @Generated
    private final String format;

    /*
     * Supported file extension for this format
     */
    @Generated
    private final List<String> fileExtensions;

    /*
     * Supported Content-Types for this format
     */
    @Generated
    private final List<String> contentTypes;

    /*
     * Default version if none is specified
     */
    @Generated
    private String defaultVersion;

    /*
     * Supported Version
     */
    @Generated
    private List<String> versions;

    /*
     * Supported Type for this format
     */
    @Generated
    private FileFormatType type;

    /**
     * Creates an instance of FileFormat class.
     *
     * @param format the format value to set.
     * @param fileExtensions the fileExtensions value to set.
     * @param contentTypes the contentTypes value to set.
     */
    @Generated
    private FileFormat(String format, List<String> fileExtensions, List<String> contentTypes) {
        this.format = format;
        this.fileExtensions = fileExtensions;
        this.contentTypes = contentTypes;
    }

    /**
     * Get the format property: Name of the format.
     *
     * @return the format value.
     */
    @Generated
    public String getFormat() {
        return this.format;
    }

    /**
     * Get the fileExtensions property: Supported file extension for this format.
     *
     * @return the fileExtensions value.
     */
    @Generated
    public List<String> getFileExtensions() {
        return this.fileExtensions;
    }

    /**
     * Get the contentTypes property: Supported Content-Types for this format.
     *
     * @return the contentTypes value.
     */
    @Generated
    public List<String> getContentTypes() {
        return this.contentTypes;
    }

    /**
     * Get the defaultVersion property: Default version if none is specified.
     *
     * @return the defaultVersion value.
     */
    @Generated
    public String getDefaultVersion() {
        return this.defaultVersion;
    }

    /**
     * Get the versions property: Supported Version.
     *
     * @return the versions value.
     */
    @Generated
    public List<String> getVersions() {
        return this.versions;
    }

    /**
     * Get the type property: Supported Type for this format.
     *
     * @return the type value.
     */
    @Generated
    public FileFormatType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("format", this.format);
        jsonWriter.writeArrayField("fileExtensions", this.fileExtensions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("contentTypes", this.contentTypes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("defaultVersion", this.defaultVersion);
        jsonWriter.writeArrayField("versions", this.versions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileFormat from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileFormat if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileFormat.
     */
    @Generated
    public static FileFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String format = null;
            List<String> fileExtensions = null;
            List<String> contentTypes = null;
            String defaultVersion = null;
            List<String> versions = null;
            FileFormatType type = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("format".equals(fieldName)) {
                    format = reader.getString();
                } else if ("fileExtensions".equals(fieldName)) {
                    fileExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("contentTypes".equals(fieldName)) {
                    contentTypes = reader.readArray(reader1 -> reader1.getString());
                } else if ("defaultVersion".equals(fieldName)) {
                    defaultVersion = reader.getString();
                } else if ("versions".equals(fieldName)) {
                    versions = reader.readArray(reader1 -> reader1.getString());
                } else if ("type".equals(fieldName)) {
                    type = FileFormatType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            FileFormat deserializedFileFormat = new FileFormat(format, fileExtensions, contentTypes);
            deserializedFileFormat.defaultVersion = defaultVersion;
            deserializedFileFormat.versions = versions;
            deserializedFileFormat.type = type;
            return deserializedFileFormat;
        });
    }
}
