// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Status Summary.
 */
@Immutable
public final class StatusSummary implements JsonSerializable<StatusSummary> {

    /*
     * Total count
     */
    @Generated
    private final int total;

    /*
     * Failed count
     */
    @Generated
    private final int failed;

    /*
     * Number of Success
     */
    @Generated
    private final int success;

    /*
     * Number of in progress
     */
    @Generated
    private final int inProgress;

    /*
     * Count of not yet started
     */
    @Generated
    private final int notYetStarted;

    /*
     * Number of cancelled
     */
    @Generated
    private final int cancelled;

    /*
     * Total characters charged by the API
     */
    @Generated
    private final long totalCharacterCharged;

    /**
     * Creates an instance of StatusSummary class.
     *
     * @param total the total value to set.
     * @param failed the failed value to set.
     * @param success the success value to set.
     * @param inProgress the inProgress value to set.
     * @param notYetStarted the notYetStarted value to set.
     * @param cancelled the cancelled value to set.
     * @param totalCharacterCharged the totalCharacterCharged value to set.
     */
    @Generated
    private StatusSummary(int total, int failed, int success, int inProgress, int notYetStarted, int cancelled,
        long totalCharacterCharged) {
        this.total = total;
        this.failed = failed;
        this.success = success;
        this.inProgress = inProgress;
        this.notYetStarted = notYetStarted;
        this.cancelled = cancelled;
        this.totalCharacterCharged = totalCharacterCharged;
    }

    /**
     * Get the total property: Total count.
     *
     * @return the total value.
     */
    @Generated
    public int getTotal() {
        return this.total;
    }

    /**
     * Get the failed property: Failed count.
     *
     * @return the failed value.
     */
    @Generated
    public int getFailed() {
        return this.failed;
    }

    /**
     * Get the success property: Number of Success.
     *
     * @return the success value.
     */
    @Generated
    public int getSuccess() {
        return this.success;
    }

    /**
     * Get the inProgress property: Number of in progress.
     *
     * @return the inProgress value.
     */
    @Generated
    public int getInProgress() {
        return this.inProgress;
    }

    /**
     * Get the notYetStarted property: Count of not yet started.
     *
     * @return the notYetStarted value.
     */
    @Generated
    public int getNotYetStarted() {
        return this.notYetStarted;
    }

    /**
     * Get the cancelled property: Number of cancelled.
     *
     * @return the cancelled value.
     */
    @Generated
    public int getCancelled() {
        return this.cancelled;
    }

    /**
     * Get the totalCharacterCharged property: Total characters charged by the API.
     *
     * @return the totalCharacterCharged value.
     */
    @Generated
    public long getTotalCharacterCharged() {
        return this.totalCharacterCharged;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("total", this.total);
        jsonWriter.writeIntField("failed", this.failed);
        jsonWriter.writeIntField("success", this.success);
        jsonWriter.writeIntField("inProgress", this.inProgress);
        jsonWriter.writeIntField("notYetStarted", this.notYetStarted);
        jsonWriter.writeIntField("cancelled", this.cancelled);
        jsonWriter.writeLongField("totalCharacterCharged", this.totalCharacterCharged);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatusSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatusSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StatusSummary.
     */
    @Generated
    public static StatusSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int total = 0;
            int failed = 0;
            int success = 0;
            int inProgress = 0;
            int notYetStarted = 0;
            int cancelled = 0;
            long totalCharacterCharged = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("total".equals(fieldName)) {
                    total = reader.getInt();
                } else if ("failed".equals(fieldName)) {
                    failed = reader.getInt();
                } else if ("success".equals(fieldName)) {
                    success = reader.getInt();
                } else if ("inProgress".equals(fieldName)) {
                    inProgress = reader.getInt();
                } else if ("notYetStarted".equals(fieldName)) {
                    notYetStarted = reader.getInt();
                } else if ("cancelled".equals(fieldName)) {
                    cancelled = reader.getInt();
                } else if ("totalCharacterCharged".equals(fieldName)) {
                    totalCharacterCharged = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new StatusSummary(total, failed, success, inProgress, notYetStarted, cancelled,
                totalCharacterCharged);
        });
    }
}
