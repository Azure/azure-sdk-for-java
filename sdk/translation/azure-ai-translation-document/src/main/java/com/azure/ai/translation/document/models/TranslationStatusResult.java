// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.ai.translation.document.implementation.models.TranslationError;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Translation job status response.
 */
@Immutable
public final class TranslationStatusResult implements JsonSerializable<TranslationStatusResult> {

    /*
     * Id of the translation operation.
     */
    @Generated
    private final String id;

    /*
     * Operation created date time
     */
    @Generated
    private final OffsetDateTime createdOn;

    /*
     * Date time in which the operation's status has been updated
     */
    @Generated
    private final OffsetDateTime lastUpdatedOn;

    /*
     * List of possible statuses for job or document
     */
    @Generated
    private final TranslationStatus status;

    /*
     * This contains an outer error with error code, message, details, target and an
     * inner error with more descriptive details.
     */
    @Generated
    private TranslationError error;

    /*
     * This contains error code and message
     */
    private ResponseError responseError;

    /*
     * Status Summary
     */
    @Generated
    private final TranslationStatusSummary summary;

    /**
     * Creates an instance of TranslationStatusResult class.
     *
     * @param id the id value to set.
     * @param createdOn the createdOn value to set.
     * @param lastUpdatedOn the lastUpdatedOn value to set.
     * @param status the status value to set.
     * @param summary the summary value to set.
     */
    @Generated
    private TranslationStatusResult(String id, OffsetDateTime createdOn, OffsetDateTime lastUpdatedOn,
        TranslationStatus status, TranslationStatusSummary summary) {
        this.id = id;
        this.createdOn = createdOn;
        this.lastUpdatedOn = lastUpdatedOn;
        this.status = status;
        this.summary = summary;
    }

    /**
     * Get the id property: Id of the translation operation.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the createdOn property: Operation created date time.
     *
     * @return the createdOn value.
     */
    @Generated
    public OffsetDateTime getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Get the lastUpdatedOn property: Date time in which the operation's status has been updated.
     *
     * @return the lastUpdatedOn value.
     */
    @Generated
    public OffsetDateTime getLastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Get the status property: List of possible statuses for job or document.
     *
     * @return the status value.
     */
    @Generated
    public TranslationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the ResponseError property: This contains error code and message.
     *
     * @return the ResponseError value.
     */
    public ResponseError getError() {
        if (this.responseError == null) {
            if (this.error == null || this.error.getCode() == null || this.error.getMessage() == null) {
                this.responseError = null;
            } else {
                this.responseError = new ResponseError(this.error.getCode().toString(), this.error.getMessage());
            }
        }
        return this.responseError;
    }

    /**
     * Get the summary property: Status Summary.
     *
     * @return the summary value.
     */
    @Generated
    public TranslationStatusSummary getSummary() {
        return this.summary;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("createdDateTimeUtc",
            this.createdOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdOn));
        jsonWriter.writeStringField("lastActionDateTimeUtc",
            this.lastUpdatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedOn));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("summary", this.summary);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslationStatusResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslationStatusResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslationStatusResult.
     */
    @Generated
    public static TranslationStatusResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdOn = null;
            OffsetDateTime lastUpdatedOn = null;
            TranslationStatus status = null;
            TranslationStatusSummary summary = null;
            TranslationError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("createdDateTimeUtc".equals(fieldName)) {
                    createdOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastActionDateTimeUtc".equals(fieldName)) {
                    lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    status = TranslationStatus.fromString(reader.getString());
                } else if ("summary".equals(fieldName)) {
                    summary = TranslationStatusSummary.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    error = TranslationError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            TranslationStatusResult deserializedTranslationStatusResult
                = new TranslationStatusResult(id, createdOn, lastUpdatedOn, status, summary);
            deserializedTranslationStatusResult.error = error;
            return deserializedTranslationStatusResult;
        });
    }
}
