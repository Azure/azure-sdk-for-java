// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Glossary / translation memory for the request.
 */
@Fluent
public final class TranslationGlossary implements JsonSerializable<TranslationGlossary> {

    /*
     * Location of the glossary.
     * We will use the file extension to extract the
     * formatting if the format parameter is not supplied.
     * 
     * If the translation
     * language pair is not present in the glossary, it will not be applied
     */
    @Generated
    private final String glossaryUrl;

    /*
     * Format
     */
    @Generated
    private final String format;

    /*
     * Optional Version. If not specified, default is used.
     */
    @Generated
    private String version;

    /*
     * Storage Source
     */
    @Generated
    private TranslationStorageSource storageSource;

    /**
     * Creates an instance of TranslationGlossary class.
     *
     * @param glossaryUrl the glossaryUrl value to set.
     * @param format the format value to set.
     */
    @Generated
    public TranslationGlossary(String glossaryUrl, String format) {
        this.glossaryUrl = glossaryUrl;
        this.format = format;
    }

    /**
     * Get the glossaryUrl property: Location of the glossary.
     * We will use the file extension to extract the
     * formatting if the format parameter is not supplied.
     *
     * If the translation
     * language pair is not present in the glossary, it will not be applied.
     *
     * @return the glossaryUrl value.
     */
    @Generated
    public String getGlossaryUrl() {
        return this.glossaryUrl;
    }

    /**
     * Get the format property: Format.
     *
     * @return the format value.
     */
    @Generated
    public String getFormat() {
        return this.format;
    }

    /**
     * Get the version property: Optional Version. If not specified, default is used.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Set the version property: Optional Version. If not specified, default is used.
     *
     * @param version the version value to set.
     * @return the TranslationGlossary object itself.
     */
    @Generated
    public TranslationGlossary setVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the storageSource property: Storage Source.
     *
     * @return the storageSource value.
     */
    @Generated
    public TranslationStorageSource getStorageSource() {
        return this.storageSource;
    }

    /**
     * Set the storageSource property: Storage Source.
     *
     * @param storageSource the storageSource value to set.
     * @return the TranslationGlossary object itself.
     */
    @Generated
    public TranslationGlossary setStorageSource(TranslationStorageSource storageSource) {
        this.storageSource = storageSource;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("glossaryUrl", this.glossaryUrl);
        jsonWriter.writeStringField("format", this.format);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("storageSource", this.storageSource == null ? null : this.storageSource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslationGlossary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslationGlossary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslationGlossary.
     */
    @Generated
    public static TranslationGlossary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String glossaryUrl = null;
            String format = null;
            String version = null;
            TranslationStorageSource storageSource = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("glossaryUrl".equals(fieldName)) {
                    glossaryUrl = reader.getString();
                } else if ("format".equals(fieldName)) {
                    format = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("storageSource".equals(fieldName)) {
                    storageSource = TranslationStorageSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TranslationGlossary deserializedTranslationGlossary = new TranslationGlossary(glossaryUrl, format);
            deserializedTranslationGlossary.version = version;
            deserializedTranslationGlossary.storageSource = storageSource;
            return deserializedTranslationGlossary;
        });
    }
}
