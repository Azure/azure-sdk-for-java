// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.translation.document.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Translation batch request options.
 */
@Fluent
public final class BatchOptions implements JsonSerializable<BatchOptions> {
    /*
     * Translation text within an image option
     */
    @Generated
    private Boolean translateTextWithinImage;

    /**
     * Creates an instance of BatchOptions class.
     */
    @Generated
    public BatchOptions() {
    }

    /**
     * Get the translateTextWithinImage property: Translation text within an image option.
     * 
     * @return the translateTextWithinImage value.
     */
    @Generated
    public Boolean isTranslateTextWithinImage() {
        return this.translateTextWithinImage;
    }

    /**
     * Set the translateTextWithinImage property: Translation text within an image option.
     * 
     * @param translateTextWithinImage the translateTextWithinImage value to set.
     * @return the BatchOptions object itself.
     */
    @Generated
    public BatchOptions setTranslateTextWithinImage(Boolean translateTextWithinImage) {
        this.translateTextWithinImage = translateTextWithinImage;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("translateTextWithinImage", this.translateTextWithinImage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchOptions.
     */
    @Generated
    public static BatchOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchOptions deserializedBatchOptions = new BatchOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("translateTextWithinImage".equals(fieldName)) {
                    deserializedBatchOptions.translateTextWithinImage = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchOptions;
        });
    }
}
