// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dictionary Example.
 */
@Immutable
public final class DictionaryExample implements JsonSerializable<DictionaryExample> {

    /*
     * The string to concatenate before the value of sourceTerm to form a complete example.
     * Do not add a space character, since it is already there when it should be.
     * This value may be an empty string.
     */
    @Generated
    private final String sourcePrefix;

    /*
     * A string equal to the actual term looked up. The string is added with sourcePrefix
     * and sourceSuffix to form the complete example. Its value is separated so it can be
     * marked in a user interface, e.g., by bolding it.
     */
    @Generated
    private final String sourceTerm;

    /*
     * The string to concatenate after the value of sourceTerm to form a complete example.
     * Do not add a space character, since it is already there when it should be.
     * This value may be an empty string.
     */
    @Generated
    private final String sourceSuffix;

    /*
     * A string similar to sourcePrefix but for the target.
     */
    @Generated
    private final String targetPrefix;

    /*
     * A string similar to sourceTerm but for the target.
     */
    @Generated
    private final String targetTerm;

    /*
     * A string similar to sourceSuffix but for the target.
     */
    @Generated
    private final String targetSuffix;

    /**
     * Creates an instance of DictionaryExample class.
     *
     * @param sourcePrefix the sourcePrefix value to set.
     * @param sourceTerm the sourceTerm value to set.
     * @param sourceSuffix the sourceSuffix value to set.
     * @param targetPrefix the targetPrefix value to set.
     * @param targetTerm the targetTerm value to set.
     * @param targetSuffix the targetSuffix value to set.
     */
    @Generated
    private DictionaryExample(String sourcePrefix, String sourceTerm, String sourceSuffix, String targetPrefix,
        String targetTerm, String targetSuffix) {
        this.sourcePrefix = sourcePrefix;
        this.sourceTerm = sourceTerm;
        this.sourceSuffix = sourceSuffix;
        this.targetPrefix = targetPrefix;
        this.targetTerm = targetTerm;
        this.targetSuffix = targetSuffix;
    }

    /**
     * Get the sourcePrefix property: The string to concatenate before the value of sourceTerm to form a complete
     * example.
     * Do not add a space character, since it is already there when it should be.
     * This value may be an empty string.
     *
     * @return the sourcePrefix value.
     */
    @Generated
    public String getSourcePrefix() {
        return this.sourcePrefix;
    }

    /**
     * Get the sourceTerm property: A string equal to the actual term looked up. The string is added with sourcePrefix
     * and sourceSuffix to form the complete example. Its value is separated so it can be
     * marked in a user interface, e.g., by bolding it.
     *
     * @return the sourceTerm value.
     */
    @Generated
    public String getSourceTerm() {
        return this.sourceTerm;
    }

    /**
     * Get the sourceSuffix property: The string to concatenate after the value of sourceTerm to form a complete
     * example.
     * Do not add a space character, since it is already there when it should be.
     * This value may be an empty string.
     *
     * @return the sourceSuffix value.
     */
    @Generated
    public String getSourceSuffix() {
        return this.sourceSuffix;
    }

    /**
     * Get the targetPrefix property: A string similar to sourcePrefix but for the target.
     *
     * @return the targetPrefix value.
     */
    @Generated
    public String getTargetPrefix() {
        return this.targetPrefix;
    }

    /**
     * Get the targetTerm property: A string similar to sourceTerm but for the target.
     *
     * @return the targetTerm value.
     */
    @Generated
    public String getTargetTerm() {
        return this.targetTerm;
    }

    /**
     * Get the targetSuffix property: A string similar to sourceSuffix but for the target.
     *
     * @return the targetSuffix value.
     */
    @Generated
    public String getTargetSuffix() {
        return this.targetSuffix;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourcePrefix", this.sourcePrefix);
        jsonWriter.writeStringField("sourceTerm", this.sourceTerm);
        jsonWriter.writeStringField("sourceSuffix", this.sourceSuffix);
        jsonWriter.writeStringField("targetPrefix", this.targetPrefix);
        jsonWriter.writeStringField("targetTerm", this.targetTerm);
        jsonWriter.writeStringField("targetSuffix", this.targetSuffix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DictionaryExample from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DictionaryExample if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DictionaryExample.
     */
    @Generated
    public static DictionaryExample fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String sourcePrefix = null;
            String sourceTerm = null;
            String sourceSuffix = null;
            String targetPrefix = null;
            String targetTerm = null;
            String targetSuffix = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("sourcePrefix".equals(fieldName)) {
                    sourcePrefix = reader.getString();
                } else if ("sourceTerm".equals(fieldName)) {
                    sourceTerm = reader.getString();
                } else if ("sourceSuffix".equals(fieldName)) {
                    sourceSuffix = reader.getString();
                } else if ("targetPrefix".equals(fieldName)) {
                    targetPrefix = reader.getString();
                } else if ("targetTerm".equals(fieldName)) {
                    targetTerm = reader.getString();
                } else if ("targetSuffix".equals(fieldName)) {
                    targetSuffix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new DictionaryExample(sourcePrefix, sourceTerm, sourceSuffix, targetPrefix, targetTerm,
                targetSuffix);
        });
    }
}
