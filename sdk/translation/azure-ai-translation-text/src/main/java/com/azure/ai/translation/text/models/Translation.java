// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Translation result.
 */
@Immutable
public final class Translation implements JsonSerializable<Translation> {

    /*
     * A string representing the language code of the target language.
     */
    @Generated
    private final String to;

    /*
     * A string giving the translated text.
     */
    @Generated
    private final String text;

    /*
     * An object giving the translated text in the script specified by the toScript parameter.
     */
    @Generated
    private TransliteratedText transliteration;

    /*
     * Alignment information.
     */
    @Generated
    private TranslatedTextAlignment alignment;

    /*
     * Sentence boundaries in the input and output texts.
     */
    @Generated
    private SentenceLength sentLen;

    /**
     * Creates an instance of Translation class.
     *
     * @param to the to value to set.
     * @param text the text value to set.
     */
    @Generated
    private Translation(String to, String text) {
        this.to = to;
        this.text = text;
    }

    /**
     * Get the to property: A string representing the language code of the target language.
     *
     * @return the to value.
     */
    @Generated
    public String getTo() {
        return this.to;
    }

    /**
     * Get the text property: A string giving the translated text.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the transliteration property: An object giving the translated text in the script specified by the toScript parameter.
     *
     * @return the transliteration value.
     */
    @Generated
    public TransliteratedText getTransliteration() {
        return this.transliteration;
    }

    /**
     * Get the alignment property: Alignment information.
     *
     * @return the alignment value.
     */
    @Generated
    public TranslatedTextAlignment getAlignment() {
        return this.alignment;
    }

    /**
     * Get the sentLen property: Sentence boundaries in the input and output texts.
     *
     * @return the sentLen value.
     */
    @Generated
    public SentenceLength getSentLen() {
        return this.sentLen;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("to", this.to);
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeJsonField("transliteration", this.transliteration);
        jsonWriter.writeJsonField("alignment", this.alignment);
        jsonWriter.writeJsonField("sentLen", this.sentLen);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Translation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Translation if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Translation.
     */
    @Generated
    public static Translation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String to = null;
            String text = null;
            TransliteratedText transliteration = null;
            TranslatedTextAlignment alignment = null;
            SentenceLength sentLen = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("transliteration".equals(fieldName)) {
                    transliteration = TransliteratedText.fromJson(reader);
                } else if ("alignment".equals(fieldName)) {
                    alignment = TranslatedTextAlignment.fromJson(reader);
                } else if ("sentLen".equals(fieldName)) {
                    sentLen = SentenceLength.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            Translation deserializedTranslation = new Translation(to, text);
            deserializedTranslation.transliteration = transliteration;
            deserializedTranslation.alignment = alignment;
            deserializedTranslation.sentLen = sentLen;
            return deserializedTranslation;
        });
    }
}
