// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Alignment information object.
 */
@Immutable
public final class TranslatedTextAlignment implements JsonSerializable<TranslatedTextAlignment> {

    /*
     * Maps input text to translated text. The alignment information is only provided when the request 
     * parameter includeAlignment is true. Alignment is returned as a string value of the following 
     * format: [[SourceTextStartIndex]:[SourceTextEndIndex]–[TgtTextStartIndex]:[TgtTextEndIndex]]. 
     * The colon separates start and end index, the dash separates the languages, and space separates the words. 
     * One word may align with zero, one, or multiple words in the other language, and the aligned words may 
     * be non-contiguous. When no alignment information is available, the alignment element will be empty.
     */
    @Generated
    private final String proj;

    /**
     * Creates an instance of TranslatedTextAlignment class.
     *
     * @param proj the proj value to set.
     */
    @Generated
    private TranslatedTextAlignment(String proj) {
        this.proj = proj;
    }

    /**
     * Get the proj property: Maps input text to translated text. The alignment information is only provided when the request
     * parameter includeAlignment is true. Alignment is returned as a string value of the following
     * format: [[SourceTextStartIndex]:[SourceTextEndIndex]–[TgtTextStartIndex]:[TgtTextEndIndex]].
     * The colon separates start and end index, the dash separates the languages, and space separates the words.
     * One word may align with zero, one, or multiple words in the other language, and the aligned words may
     * be non-contiguous. When no alignment information is available, the alignment element will be empty.
     *
     * @return the proj value.
     */
    @Generated
    public String getProj() {
        return this.proj;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("proj", this.proj);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslatedTextAlignment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslatedTextAlignment if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslatedTextAlignment.
     */
    @Generated
    public static TranslatedTextAlignment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String proj = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("proj".equals(fieldName)) {
                    proj = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new TranslatedTextAlignment(proj);
        });
    }
}
