// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Translation result.
 */
@Immutable
public final class TranslationText implements JsonSerializable<TranslationText> {

    /*
     * A string giving the translated text.
     */
    @Generated
    private final String text;

    /*
     * An object giving the translated text in the script specified by the toScript parameter.
     */
    @Generated
    private TransliteratedText transliteration;

    /*
     * Alignment information.
     */
    @Generated
    private TranslatedTextAlignment alignment;

    /*
     * Sentence boundaries in the input and output texts.
     */
    @Generated
    private SentenceBoundaries sentenceBoundaries;

    /**
     * Creates an instance of TranslationText class.
     *
     * @param targetLanguage the targetLanguage value to set.
     * @param text the text value to set.
     */
    @Generated
    private TranslationText(String targetLanguage, String text) {
        this.targetLanguage = targetLanguage;
        this.text = text;
    }

    /**
     * Get the targetLanguage property: A string representing the language code of the target language.
     *
     * @return the targetLanguage value.
     */
    @Generated
    public String getTargetLanguage() {
        return this.targetLanguage;
    }

    /**
     * Get the text property: A string giving the translated text.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the transliteration property: An object giving the translated text in the script specified by the toScript
     * parameter.
     *
     * @return the transliteration value.
     */
    @Generated
    public TransliteratedText getTransliteration() {
        return this.transliteration;
    }

    /**
     * Get the alignment property: Alignment information.
     *
     * @return the alignment value.
     */
    @Generated
    public TranslatedTextAlignment getAlignment() {
        return this.alignment;
    }

    /**
     * Get the sentenceBoundaries property: Sentence boundaries in the input and output texts.
     *
     * @return the sentenceBoundaries value.
     */
    @Generated
    public SentenceBoundaries getSentenceBoundaries() {
        return this.sentenceBoundaries;
    }

    /*
     * A string representing the language code of the target language.
     */
    @Generated
    private final String targetLanguage;

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("to", this.targetLanguage);
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeJsonField("transliteration", this.transliteration);
        jsonWriter.writeJsonField("alignment", this.alignment);
        jsonWriter.writeJsonField("sentLen", this.sentenceBoundaries);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslationText from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslationText if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslationText.
     */
    @Generated
    public static TranslationText fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String targetLanguage = null;
            String text = null;
            TransliteratedText transliteration = null;
            TranslatedTextAlignment alignment = null;
            SentenceBoundaries sentenceBoundaries = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("to".equals(fieldName)) {
                    targetLanguage = reader.getString();
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("transliteration".equals(fieldName)) {
                    transliteration = TransliteratedText.fromJson(reader);
                } else if ("alignment".equals(fieldName)) {
                    alignment = TranslatedTextAlignment.fromJson(reader);
                } else if ("sentLen".equals(fieldName)) {
                    sentenceBoundaries = SentenceBoundaries.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            TranslationText deserializedTranslationText = new TranslationText(targetLanguage, text);
            deserializedTranslationText.transliteration = transliteration;
            deserializedTranslationText.alignment = alignment;
            deserializedTranslationText.sentenceBoundaries = sentenceBoundaries;
            return deserializedTranslationText;
        });
    }
}
