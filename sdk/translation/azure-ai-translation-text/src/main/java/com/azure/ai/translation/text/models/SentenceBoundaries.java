// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An object returning sentence boundaries in the input and output texts.
 */
@Immutable
public final class SentenceBoundaries implements JsonSerializable<SentenceBoundaries> {

    /*
     * An integer array representing the lengths of the sentences in the input text.
     * The length of the array is the number of sentences, and the values are the length of each sentence.
     */
    @Generated
    private final List<Integer> sourceSentencesLengths;

    /*
     * An integer array representing the lengths of the sentences in the translated text.
     * The length of the array is the number of sentences, and the values are the length of each sentence.
     */
    @Generated
    private final List<Integer> translatedSentencesLengths;

    /**
     * Creates an instance of SentenceBoundaries class.
     *
     * @param sourceSentencesLengths the sourceSentencesLengths value to set.
     * @param translatedSentencesLengths the translatedSentencesLengths value to set.
     */
    @Generated
    private SentenceBoundaries(List<Integer> sourceSentencesLengths, List<Integer> translatedSentencesLengths) {
        this.sourceSentencesLengths = sourceSentencesLengths;
        this.translatedSentencesLengths = translatedSentencesLengths;
    }

    /**
     * Get the sourceSentencesLengths property: An integer array representing the lengths of the sentences in the input
     * text.
     * The length of the array is the number of sentences, and the values are the length of each sentence.
     *
     * @return the sourceSentencesLengths value.
     */
    @Generated
    public List<Integer> getSourceSentencesLengths() {
        return this.sourceSentencesLengths;
    }

    /**
     * Get the translatedSentencesLengths property: An integer array representing the lengths of the sentences in the
     * translated text.
     * The length of the array is the number of sentences, and the values are the length of each sentence.
     *
     * @return the translatedSentencesLengths value.
     */
    @Generated
    public List<Integer> getTranslatedSentencesLengths() {
        return this.translatedSentencesLengths;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("srcSentLen", this.sourceSentencesLengths,
            (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("transSentLen", this.translatedSentencesLengths,
            (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SentenceBoundaries from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SentenceBoundaries if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SentenceBoundaries.
     */
    @Generated
    public static SentenceBoundaries fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<Integer> sourceSentencesLengths = null;
            List<Integer> translatedSentencesLengths = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("srcSentLen".equals(fieldName)) {
                    sourceSentencesLengths = reader.readArray(reader1 -> reader1.getInt());
                } else if ("transSentLen".equals(fieldName)) {
                    translatedSentencesLengths = reader.readArray(reader1 -> reader1.getInt());
                } else {
                    reader.skipChildren();
                }
            }
            return new SentenceBoundaries(sourceSentencesLengths, translatedSentencesLengths);
        });
    }
}
