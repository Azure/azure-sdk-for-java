// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Response for the languages API.
 */
@Immutable
public final class GetSupportedLanguagesResult implements JsonSerializable<GetSupportedLanguagesResult> {

    /*
     * Languages that support translate API.
     */
    @Generated
    private Map<String, TranslationLanguage> translation;

    /*
     * Languages that support transliteration API.
     */
    @Generated
    private Map<String, TransliterationLanguage> transliteration;

    /*
     * Languages that support dictionary API.
     */
    @Generated
    private Map<String, SourceDictionaryLanguage> dictionary;

    /**
     * Creates an instance of GetSupportedLanguagesResult class.
     */
    @Generated
    private GetSupportedLanguagesResult() {
    }

    /**
     * Get the translation property: Languages that support translate API.
     *
     * @return the translation value.
     */
    @Generated
    public Map<String, TranslationLanguage> getTranslation() {
        return this.translation;
    }

    /**
     * Get the transliteration property: Languages that support transliteration API.
     *
     * @return the transliteration value.
     */
    @Generated
    public Map<String, TransliterationLanguage> getTransliteration() {
        return this.transliteration;
    }

    /**
     * Get the dictionary property: Languages that support dictionary API.
     *
     * @return the dictionary value.
     */
    @Generated
    public Map<String, SourceDictionaryLanguage> getDictionary() {
        return this.dictionary;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("translation", this.translation, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("transliteration", this.transliteration,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("dictionary", this.dictionary, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetSupportedLanguagesResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetSupportedLanguagesResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetSupportedLanguagesResult.
     */
    @Generated
    public static GetSupportedLanguagesResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetSupportedLanguagesResult deserializedGetSupportedLanguagesResult = new GetSupportedLanguagesResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("translation".equals(fieldName)) {
                    Map<String, TranslationLanguage> translation
                        = reader.readMap(reader1 -> TranslationLanguage.fromJson(reader1));
                    deserializedGetSupportedLanguagesResult.translation = translation;
                } else if ("transliteration".equals(fieldName)) {
                    Map<String, TransliterationLanguage> transliteration
                        = reader.readMap(reader1 -> TransliterationLanguage.fromJson(reader1));
                    deserializedGetSupportedLanguagesResult.transliteration = transliteration;
                } else if ("dictionary".equals(fieldName)) {
                    Map<String, SourceDictionaryLanguage> dictionary
                        = reader.readMap(reader1 -> SourceDictionaryLanguage.fromJson(reader1));
                    deserializedGetSupportedLanguagesResult.dictionary = dictionary;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedGetSupportedLanguagesResult;
        });
    }
}
