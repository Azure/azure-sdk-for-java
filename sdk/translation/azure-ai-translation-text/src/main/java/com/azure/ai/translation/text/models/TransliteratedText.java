// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Transliterated text element.
 */
@Immutable
public final class TransliteratedText implements JsonSerializable<TransliteratedText> {

    /*
     * A string which is the result of converting the input string to the output script.
     */
    @Generated
    private final String text;

    /*
     * A string specifying the script used in the output.
     */
    @Generated
    private final String script;

    /**
     * Creates an instance of TransliteratedText class.
     *
     * @param text the text value to set.
     * @param script the script value to set.
     */
    @Generated
    private TransliteratedText(String text, String script) {
        this.text = text;
        this.script = script;
    }

    /**
     * Get the text property: A string which is the result of converting the input string to the output script.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the script property: A string specifying the script used in the output.
     *
     * @return the script value.
     */
    @Generated
    public String getScript() {
        return this.script;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeStringField("script", this.script);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransliteratedText from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransliteratedText if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TransliteratedText.
     */
    @Generated
    public static TransliteratedText fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String text = null;
            String script = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("script".equals(fieldName)) {
                    script = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new TransliteratedText(text, script);
        });
    }
}
