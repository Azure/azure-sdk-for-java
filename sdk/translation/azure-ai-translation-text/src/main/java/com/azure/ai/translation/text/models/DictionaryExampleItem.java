// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Dictionary Example element.
 */
@Immutable
public final class DictionaryExampleItem implements JsonSerializable<DictionaryExampleItem> {

    /*
     * A string giving the normalized form of the source term. Generally, this should be identical
     * to the value of the Text field at the matching list index in the body of the request.
     */
    @Generated
    private final String normalizedSource;

    /*
     * A string giving the normalized form of the target term. Generally, this should be identical
     * to the value of the Translation field at the matching list index in the body of the request.
     */
    @Generated
    private final String normalizedTarget;

    /*
     * A list of examples for the (source term, target term) pair.
     */
    @Generated
    private final List<DictionaryExample> examples;

    /**
     * Creates an instance of DictionaryExampleItem class.
     *
     * @param normalizedSource the normalizedSource value to set.
     * @param normalizedTarget the normalizedTarget value to set.
     * @param examples the examples value to set.
     */
    @Generated
    private DictionaryExampleItem(String normalizedSource, String normalizedTarget, List<DictionaryExample> examples) {
        this.normalizedSource = normalizedSource;
        this.normalizedTarget = normalizedTarget;
        this.examples = examples;
    }

    /**
     * Get the normalizedSource property: A string giving the normalized form of the source term. Generally, this should
     * be identical
     * to the value of the Text field at the matching list index in the body of the request.
     *
     * @return the normalizedSource value.
     */
    @Generated
    public String getNormalizedSource() {
        return this.normalizedSource;
    }

    /**
     * Get the normalizedTarget property: A string giving the normalized form of the target term. Generally, this should
     * be identical
     * to the value of the Translation field at the matching list index in the body of the request.
     *
     * @return the normalizedTarget value.
     */
    @Generated
    public String getNormalizedTarget() {
        return this.normalizedTarget;
    }

    /**
     * Get the examples property: A list of examples for the (source term, target term) pair.
     *
     * @return the examples value.
     */
    @Generated
    public List<DictionaryExample> getExamples() {
        return this.examples;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("normalizedSource", this.normalizedSource);
        jsonWriter.writeStringField("normalizedTarget", this.normalizedTarget);
        jsonWriter.writeArrayField("examples", this.examples, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DictionaryExampleItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DictionaryExampleItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DictionaryExampleItem.
     */
    @Generated
    public static DictionaryExampleItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String normalizedSource = null;
            String normalizedTarget = null;
            List<DictionaryExample> examples = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("normalizedSource".equals(fieldName)) {
                    normalizedSource = reader.getString();
                } else if ("normalizedTarget".equals(fieldName)) {
                    normalizedTarget = reader.getString();
                } else if ("examples".equals(fieldName)) {
                    examples = reader.readArray(reader1 -> DictionaryExample.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new DictionaryExampleItem(normalizedSource, normalizedTarget, examples);
        });
    }
}
