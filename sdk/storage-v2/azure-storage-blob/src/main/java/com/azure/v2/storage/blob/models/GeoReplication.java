// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.storage.blob.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.xml.XmlReader;
import io.clientcore.core.serialization.xml.XmlSerializable;
import io.clientcore.core.serialization.xml.XmlToken;
import io.clientcore.core.serialization.xml.XmlWriter;
import io.clientcore.core.utils.DateTimeRfc1123;
import java.time.OffsetDateTime;
import java.util.Objects;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * Geo-Replication information for the Secondary Storage Service.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class GeoReplication implements XmlSerializable<GeoReplication> {
    /*
     * The status of the secondary location
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private GeoReplicationStatus status;

    /*
     * A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for
     * read operations at the secondary. Primary writes after this point in time may or may not be available for reads.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private DateTimeRfc1123 lastSyncTime;

    /**
     * Creates an instance of GeoReplication class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public GeoReplication() {
    }

    /**
     * Get the status property: The status of the secondary location.
     * 
     * @return the status value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public GeoReplicationStatus getStatus() {
        return this.status;
    }

    /**
     * Set the status property: The status of the secondary location.
     * 
     * @param status the status value to set.
     * @return the GeoReplication object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public GeoReplication setStatus(GeoReplicationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the lastSyncTime property: A GMT date/time value, to the second. All primary writes preceding this value are
     * guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or
     * may not be available for reads.
     * 
     * @return the lastSyncTime value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public OffsetDateTime getLastSyncTime() {
        if (this.lastSyncTime == null) {
            return null;
        }
        return this.lastSyncTime.getDateTime();
    }

    /**
     * Set the lastSyncTime property: A GMT date/time value, to the second. All primary writes preceding this value are
     * guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or
     * may not be available for reads.
     * 
     * @param lastSyncTime the lastSyncTime value to set.
     * @return the GeoReplication object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public GeoReplication setLastSyncTime(OffsetDateTime lastSyncTime) {
        if (lastSyncTime == null) {
            this.lastSyncTime = null;
        } else {
            this.lastSyncTime = new DateTimeRfc1123(lastSyncTime);
        }
        return this;
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = rootElementName == null || rootElementName.isEmpty() ? "GeoReplication" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeStringElement("Status", this.status == null ? null : this.status.getValue());
        xmlWriter.writeStringElement("LastSyncTime", Objects.toString(this.lastSyncTime, null));
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of GeoReplication from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @return An instance of GeoReplication if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the GeoReplication.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static GeoReplication fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of GeoReplication from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     * cases where the model can deserialize from different root element names.
     * @return An instance of GeoReplication if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the GeoReplication.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static GeoReplication fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName
            = rootElementName == null || rootElementName.isEmpty() ? "GeoReplication" : rootElementName;
        return xmlReader.readObject(finalRootElementName, reader -> {
            GeoReplication deserializedGeoReplication = new GeoReplication();
            while (reader.nextElement() != XmlToken.END_ELEMENT) {
                QName elementName = reader.getElementName();

                if ("Status".equals(elementName.getLocalPart())) {
                    deserializedGeoReplication.status = GeoReplicationStatus.fromValue(reader.getStringElement());
                } else if ("LastSyncTime".equals(elementName.getLocalPart())) {
                    deserializedGeoReplication.lastSyncTime = reader.getNullableElement(DateTimeRfc1123::new);
                } else {
                    reader.skipElement();
                }
            }

            return deserializedGeoReplication;
        });
    }
}
