// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.storage.blob.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.xml.XmlReader;
import io.clientcore.core.serialization.xml.XmlSerializable;
import io.clientcore.core.serialization.xml.XmlToken;
import io.clientcore.core.serialization.xml.XmlWriter;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * Groups the set of query request settings.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class QueryRequest implements XmlSerializable<QueryRequest> {
    /*
     * Required. The type of the provided query expression.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final String queryType = "SQL";

    /*
     * The query expression in SQL. The maximum size of the query expression is 256KiB.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String expression;

    /*
     * The InputSerialization property.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private QuerySerialization inputSerialization;

    /*
     * The OutputSerialization property.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private QuerySerialization outputSerialization;

    /**
     * Creates an instance of QueryRequest class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public QueryRequest() {
    }

    /**
     * Get the queryType property: Required. The type of the provided query expression.
     * 
     * @return the queryType value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getQueryType() {
        return this.queryType;
    }

    /**
     * Get the expression property: The query expression in SQL. The maximum size of the query expression is 256KiB.
     * 
     * @return the expression value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getExpression() {
        return this.expression;
    }

    /**
     * Set the expression property: The query expression in SQL. The maximum size of the query expression is 256KiB.
     * 
     * @param expression the expression value to set.
     * @return the QueryRequest object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public QueryRequest setExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the inputSerialization property: The InputSerialization property.
     * 
     * @return the inputSerialization value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public QuerySerialization getInputSerialization() {
        return this.inputSerialization;
    }

    /**
     * Set the inputSerialization property: The InputSerialization property.
     * 
     * @param inputSerialization the inputSerialization value to set.
     * @return the QueryRequest object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public QueryRequest setInputSerialization(QuerySerialization inputSerialization) {
        this.inputSerialization = inputSerialization;
        return this;
    }

    /**
     * Get the outputSerialization property: The OutputSerialization property.
     * 
     * @return the outputSerialization value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public QuerySerialization getOutputSerialization() {
        return this.outputSerialization;
    }

    /**
     * Set the outputSerialization property: The OutputSerialization property.
     * 
     * @param outputSerialization the outputSerialization value to set.
     * @return the QueryRequest object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public QueryRequest setOutputSerialization(QuerySerialization outputSerialization) {
        this.outputSerialization = outputSerialization;
        return this;
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = rootElementName == null || rootElementName.isEmpty() ? "QueryRequest" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeStringElement("QueryType", this.queryType);
        xmlWriter.writeStringElement("Expression", this.expression);
        xmlWriter.writeXml(this.inputSerialization, "InputSerialization");
        xmlWriter.writeXml(this.outputSerialization, "OutputSerialization");
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of QueryRequest from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @return An instance of QueryRequest if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the QueryRequest.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static QueryRequest fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of QueryRequest from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     * cases where the model can deserialize from different root element names.
     * @return An instance of QueryRequest if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the QueryRequest.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static QueryRequest fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName
            = rootElementName == null || rootElementName.isEmpty() ? "QueryRequest" : rootElementName;
        return xmlReader.readObject(finalRootElementName, reader -> {
            QueryRequest deserializedQueryRequest = new QueryRequest();
            while (reader.nextElement() != XmlToken.END_ELEMENT) {
                QName elementName = reader.getElementName();

                if ("Expression".equals(elementName.getLocalPart())) {
                    deserializedQueryRequest.expression = reader.getStringElement();
                } else if ("InputSerialization".equals(elementName.getLocalPart())) {
                    deserializedQueryRequest.inputSerialization
                        = QuerySerialization.fromXml(reader, "InputSerialization");
                } else if ("OutputSerialization".equals(elementName.getLocalPart())) {
                    deserializedQueryRequest.outputSerialization
                        = QuerySerialization.fromXml(reader, "OutputSerialization");
                } else {
                    reader.skipElement();
                }
            }

            return deserializedQueryRequest;
        });
    }
}
