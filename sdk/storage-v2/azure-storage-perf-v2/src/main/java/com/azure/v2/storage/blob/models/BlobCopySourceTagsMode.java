// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.storage.blob.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.utils.ExpandableEnum;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * Defines values for BlobCopySourceTagsMode.
 */
public final class BlobCopySourceTagsMode implements ExpandableEnum<String>, JsonSerializable<BlobCopySourceTagsMode> {
    private static final Map<String, BlobCopySourceTagsMode> VALUES = new ConcurrentHashMap<>();

    private static final Function<String, BlobCopySourceTagsMode> NEW_INSTANCE = BlobCopySourceTagsMode::new;

    /**
     * Static value REPLACE for BlobCopySourceTagsMode.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final BlobCopySourceTagsMode REPLACE = fromValue("REPLACE");

    /**
     * Static value COPY for BlobCopySourceTagsMode.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final BlobCopySourceTagsMode COPY = fromValue("COPY");

    private final String value;

    private BlobCopySourceTagsMode(String value) {
        this.value = value;
    }

    /**
     * Creates or finds a BlobCopySourceTagsMode.
     * 
     * @param value a value to look for.
     * @return the corresponding BlobCopySourceTagsMode.
     * @throws IllegalArgumentException if value is null.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static BlobCopySourceTagsMode fromValue(String value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known BlobCopySourceTagsMode values.
     * 
     * @return Known BlobCopySourceTagsMode values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static Collection<BlobCopySourceTagsMode> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the BlobCopySourceTagsMode instance.
     * 
     * @return the value of the BlobCopySourceTagsMode instance.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public String getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(getValue());
    }

    /**
     * Reads an instance of BlobCopySourceTagsMode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobCopySourceTagsMode if the JsonReader was pointing to an instance of it, or null if the
     * JsonReader was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlobCopySourceTagsMode.
     * @throws IllegalStateException If unexpected JSON token is found.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static BlobCopySourceTagsMode fromJson(JsonReader jsonReader) throws IOException {
        JsonToken nextToken = jsonReader.nextToken();
        if (nextToken == JsonToken.NULL) {
            return null;
        }
        if (nextToken != JsonToken.STRING) {
            throw new IllegalStateException(
                String.format("Unexpected JSON token for %s deserialization: %s", JsonToken.STRING, nextToken));
        }
        return BlobCopySourceTagsMode.fromValue(jsonReader.getString());
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
