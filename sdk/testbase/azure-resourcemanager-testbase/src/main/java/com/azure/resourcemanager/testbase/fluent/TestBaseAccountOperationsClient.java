// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.testbase.fluent.models.TestBaseAccountResourceInner;
import com.azure.resourcemanager.testbase.fluent.models.TestBaseAccountUpdateParametersInner;

/** An instance of this class provides access to all the operations defined in TestBaseAccountOperationsClient. */
public interface TestBaseAccountOperationsClient {
    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginCreate(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountResourceInner parameters, Boolean restore);

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginCreate(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore,
        Context context);

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestBaseAccountResourceInner create(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountResourceInner parameters, Boolean restore);

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestBaseAccountResourceInner create(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountResourceInner parameters);

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestBaseAccountResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore,
        Context context);

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginUpdate(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountUpdateParametersInner parameters);

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginUpdate(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountUpdateParametersInner parameters,
        Context context);

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestBaseAccountResourceInner update(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountUpdateParametersInner parameters);

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestBaseAccountResourceInner update(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountUpdateParametersInner parameters,
        Context context);

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String testBaseAccountName);

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String testBaseAccountName);

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestBaseAccountResourceInner getByResourceGroup(String resourceGroupName, String testBaseAccountName);

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TestBaseAccountResourceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginOffboard(String resourceGroupName, String testBaseAccountName);

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginOffboard(
        String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void offboard(String resourceGroupName, String testBaseAccountName);

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void offboard(String resourceGroupName, String testBaseAccountName, Context context);
}
