// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.NotificationEventReceiver;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A notification events subscribed to be received by customer. */
@Fluent
public final class CustomerEventProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CustomerEventProperties.class);

    /*
     * The name of the event subscribed to.
     */
    @JsonProperty(value = "eventName", required = true)
    private String eventName;

    /*
     * The notification event receivers.
     */
    @JsonProperty(value = "receivers", required = true)
    private List<NotificationEventReceiver> receivers;

    /**
     * Get the eventName property: The name of the event subscribed to.
     *
     * @return the eventName value.
     */
    public String eventName() {
        return this.eventName;
    }

    /**
     * Set the eventName property: The name of the event subscribed to.
     *
     * @param eventName the eventName value to set.
     * @return the CustomerEventProperties object itself.
     */
    public CustomerEventProperties withEventName(String eventName) {
        this.eventName = eventName;
        return this;
    }

    /**
     * Get the receivers property: The notification event receivers.
     *
     * @return the receivers value.
     */
    public List<NotificationEventReceiver> receivers() {
        return this.receivers;
    }

    /**
     * Set the receivers property: The notification event receivers.
     *
     * @param receivers the receivers value to set.
     * @return the CustomerEventProperties object itself.
     */
    public CustomerEventProperties withReceivers(List<NotificationEventReceiver> receivers) {
        this.receivers = receivers;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (eventName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property eventName in model CustomerEventProperties"));
        }
        if (receivers() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property receivers in model CustomerEventProperties"));
        } else {
            receivers().forEach(e -> e.validate());
        }
    }
}
