// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Parameters body to pass for Test Base Package name availability check. */
@Fluent
public final class PackageCheckNameAvailabilityParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PackageCheckNameAvailabilityParameters.class);

    /*
     * Resource name to verify.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Application name to verify.
     */
    @JsonProperty(value = "applicationName", required = true)
    private String applicationName;

    /*
     * Version name to verify.
     */
    @JsonProperty(value = "version", required = true)
    private String version;

    /*
     * fully qualified resource type which includes provider namespace.
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /**
     * Get the name property: Resource name to verify.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource name to verify.
     *
     * @param name the name value to set.
     * @return the PackageCheckNameAvailabilityParameters object itself.
     */
    public PackageCheckNameAvailabilityParameters withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the applicationName property: Application name to verify.
     *
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: Application name to verify.
     *
     * @param applicationName the applicationName value to set.
     * @return the PackageCheckNameAvailabilityParameters object itself.
     */
    public PackageCheckNameAvailabilityParameters withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the version property: Version name to verify.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version name to verify.
     *
     * @param version the version value to set.
     * @return the PackageCheckNameAvailabilityParameters object itself.
     */
    public PackageCheckNameAvailabilityParameters withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the type property: fully qualified resource type which includes provider namespace.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: fully qualified resource type which includes provider namespace.
     *
     * @param type the type value to set.
     * @return the PackageCheckNameAvailabilityParameters object itself.
     */
    public PackageCheckNameAvailabilityParameters withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property name in model PackageCheckNameAvailabilityParameters"));
        }
        if (applicationName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property applicationName in model PackageCheckNameAvailabilityParameters"));
        }
        if (version() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property version in model PackageCheckNameAvailabilityParameters"));
        }
        if (type() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property type in model PackageCheckNameAvailabilityParameters"));
        }
    }
}
