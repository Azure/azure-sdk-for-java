// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.TestBaseAccountSkuCapability;
import com.azure.resourcemanager.testbase.models.Tier;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes a Test Base Account SKU. */
@Fluent
public final class TestBaseAccountSkuInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TestBaseAccountSkuInner.class);

    /*
     * The type of resource the SKU applies to.
     */
    @JsonProperty(value = "resourceType")
    private String resourceType;

    /*
     * The name of the SKU. This is typically a letter + number code, such as
     * B0 or S0.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * The tier of this particular SKU.
     */
    @JsonProperty(value = "tier", required = true)
    private Tier tier;

    /*
     * The capabilities of a SKU.
     */
    @JsonProperty(value = "capabilities", access = JsonProperty.Access.WRITE_ONLY)
    private List<TestBaseAccountSkuCapability> capabilities;

    /*
     * The locations that the SKU is available.
     */
    @JsonProperty(value = "locations")
    private List<String> locations;

    /**
     * Get the resourceType property: The type of resource the SKU applies to.
     *
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The type of resource the SKU applies to.
     *
     * @param resourceType the resourceType value to set.
     * @return the TestBaseAccountSkuInner object itself.
     */
    public TestBaseAccountSkuInner withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the name property: The name of the SKU. This is typically a letter + number code, such as B0 or S0.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the SKU. This is typically a letter + number code, such as B0 or S0.
     *
     * @param name the name value to set.
     * @return the TestBaseAccountSkuInner object itself.
     */
    public TestBaseAccountSkuInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the tier property: The tier of this particular SKU.
     *
     * @return the tier value.
     */
    public Tier tier() {
        return this.tier;
    }

    /**
     * Set the tier property: The tier of this particular SKU.
     *
     * @param tier the tier value to set.
     * @return the TestBaseAccountSkuInner object itself.
     */
    public TestBaseAccountSkuInner withTier(Tier tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the capabilities property: The capabilities of a SKU.
     *
     * @return the capabilities value.
     */
    public List<TestBaseAccountSkuCapability> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the locations property: The locations that the SKU is available.
     *
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: The locations that the SKU is available.
     *
     * @param locations the locations value to set.
     * @return the TestBaseAccountSkuInner object itself.
     */
    public TestBaseAccountSkuInner withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property name in model TestBaseAccountSkuInner"));
        }
        if (tier() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property tier in model TestBaseAccountSkuInner"));
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
    }
}
