// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.testbase.fluent.models.CheckNameAvailabilityResultInner;
import com.azure.resourcemanager.testbase.fluent.models.DownloadUrlResponseInner;
import com.azure.resourcemanager.testbase.fluent.models.FileUploadUrlResponseInner;
import com.azure.resourcemanager.testbase.models.CheckNameAvailabilityResult;
import com.azure.resourcemanager.testbase.models.DownloadUrlResponse;
import com.azure.resourcemanager.testbase.models.FileUploadUrlResponse;
import com.azure.resourcemanager.testbase.models.GetFileUploadUrlParameters;
import com.azure.resourcemanager.testbase.models.PackageCheckNameAvailabilityParameters;
import com.azure.resourcemanager.testbase.models.ResourceProviders;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ResourceProvidersImpl implements ResourceProviders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final com.azure.resourcemanager.testbase.TestbaseManager serviceManager;

    public ResourceProvidersImpl(
        ResourceProvidersClient innerClient, com.azure.resourcemanager.testbase.TestbaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public FileUploadUrlResponse testBaseAccountGetFileUploadUrl(String resourceGroupName, String testBaseAccountName) {
        FileUploadUrlResponseInner inner =
            this.serviceClient().testBaseAccountGetFileUploadUrl(resourceGroupName, testBaseAccountName);
        if (inner != null) {
            return new FileUploadUrlResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FileUploadUrlResponse> testBaseAccountGetFileUploadUrlWithResponse(
        String resourceGroupName, String testBaseAccountName, GetFileUploadUrlParameters parameters, Context context) {
        Response<FileUploadUrlResponseInner> inner =
            this
                .serviceClient()
                .testBaseAccountGetFileUploadUrlWithResponse(
                    resourceGroupName, testBaseAccountName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FileUploadUrlResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckNameAvailabilityResult checkPackageNameAvailability(
        String resourceGroupName, String testBaseAccountName, PackageCheckNameAvailabilityParameters parameters) {
        CheckNameAvailabilityResultInner inner =
            this.serviceClient().checkPackageNameAvailability(resourceGroupName, testBaseAccountName, parameters);
        if (inner != null) {
            return new CheckNameAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckNameAvailabilityResult> checkPackageNameAvailabilityWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        PackageCheckNameAvailabilityParameters parameters,
        Context context) {
        Response<CheckNameAvailabilityResultInner> inner =
            this
                .serviceClient()
                .checkPackageNameAvailabilityWithResponse(resourceGroupName, testBaseAccountName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckNameAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DownloadUrlResponse packageGetDownloadUrl(
        String resourceGroupName, String testBaseAccountName, String packageName) {
        DownloadUrlResponseInner inner =
            this.serviceClient().packageGetDownloadUrl(resourceGroupName, testBaseAccountName, packageName);
        if (inner != null) {
            return new DownloadUrlResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DownloadUrlResponse> packageGetDownloadUrlWithResponse(
        String resourceGroupName, String testBaseAccountName, String packageName, Context context) {
        Response<DownloadUrlResponseInner> inner =
            this
                .serviceClient()
                .packageGetDownloadUrlWithResponse(resourceGroupName, testBaseAccountName, packageName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DownloadUrlResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DownloadUrlResponse testResultGetDownloadUrl(
        String resourceGroupName, String testBaseAccountName, String packageName, String testResultName) {
        DownloadUrlResponseInner inner =
            this
                .serviceClient()
                .testResultGetDownloadUrl(resourceGroupName, testBaseAccountName, packageName, testResultName);
        if (inner != null) {
            return new DownloadUrlResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DownloadUrlResponse> testResultGetDownloadUrlWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        String testResultName,
        Context context) {
        Response<DownloadUrlResponseInner> inner =
            this
                .serviceClient()
                .testResultGetDownloadUrlWithResponse(
                    resourceGroupName, testBaseAccountName, packageName, testResultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DownloadUrlResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DownloadUrlResponse testResultGetVideoDownloadUrl(
        String resourceGroupName, String testBaseAccountName, String packageName, String testResultName) {
        DownloadUrlResponseInner inner =
            this
                .serviceClient()
                .testResultGetVideoDownloadUrl(resourceGroupName, testBaseAccountName, packageName, testResultName);
        if (inner != null) {
            return new DownloadUrlResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DownloadUrlResponse> testResultGetVideoDownloadUrlWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        String testResultName,
        Context context) {
        Response<DownloadUrlResponseInner> inner =
            this
                .serviceClient()
                .testResultGetVideoDownloadUrlWithResponse(
                    resourceGroupName, testBaseAccountName, packageName, testResultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DownloadUrlResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestbaseManager manager() {
        return this.serviceManager;
    }
}
