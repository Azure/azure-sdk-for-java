// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.testbase.fluent.TestBaseAccountOperationsClient;
import com.azure.resourcemanager.testbase.fluent.models.TestBaseAccountResourceInner;
import com.azure.resourcemanager.testbase.fluent.models.TestBaseAccountUpdateParametersInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TestBaseAccountOperationsClient. */
public final class TestBaseAccountOperationsClientImpl implements TestBaseAccountOperationsClient {
    private final ClientLogger logger = new ClientLogger(TestBaseAccountOperationsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final TestBaseAccountOperationsService service;

    /** The service client containing this operation class. */
    private final RestApiForTestBaseImpl client;

    /**
     * Initializes an instance of TestBaseAccountOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TestBaseAccountOperationsClientImpl(RestApiForTestBaseImpl client) {
        this.service =
            RestProxy
                .create(
                    TestBaseAccountOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for RestApiForTestBaseTestBaseAccountOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "RestApiForTestBaseTe")
    private interface TestBaseAccountOperationsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @QueryParam("restore") Boolean restore,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TestBaseAccountResourceInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TestBaseAccountUpdateParametersInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TestBaseAccountResourceInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}/offboard")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> offboard(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            restore,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                restore,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginCreateAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, testBaseAccountName, parameters, restore);
        return this
            .client
            .<TestBaseAccountResourceInner, TestBaseAccountResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TestBaseAccountResourceInner.class,
                TestBaseAccountResourceInner.class,
                Context.NONE);
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginCreateAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, testBaseAccountName, parameters, restore, context);
        return this
            .client
            .<TestBaseAccountResourceInner, TestBaseAccountResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TestBaseAccountResourceInner.class,
                TestBaseAccountResourceInner.class,
                context);
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginCreate(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, parameters, restore).getSyncPoller();
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginCreate(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore,
        Context context) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, parameters, restore, context).getSyncPoller();
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestBaseAccountResourceInner> createAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, parameters, restore)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestBaseAccountResourceInner> createAsync(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountResourceInner parameters) {
        final Boolean restore = null;
        return beginCreateAsync(resourceGroupName, testBaseAccountName, parameters, restore)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestBaseAccountResourceInner> createAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore,
        Context context) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, parameters, restore, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestBaseAccountResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore) {
        return createAsync(resourceGroupName, testBaseAccountName, parameters, restore).block();
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestBaseAccountResourceInner create(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountResourceInner parameters) {
        final Boolean restore = null;
        return createAsync(resourceGroupName, testBaseAccountName, parameters, restore).block();
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
     * subscription.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to create a Test Base Account.
     * @param restore The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestBaseAccountResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountResourceInner parameters,
        Boolean restore,
        Context context) {
        return createAsync(resourceGroupName, testBaseAccountName, parameters, restore, context).block();
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountUpdateParametersInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountUpdateParametersInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginUpdateAsync(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountUpdateParametersInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, testBaseAccountName, parameters);
        return this
            .client
            .<TestBaseAccountResourceInner, TestBaseAccountResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TestBaseAccountResourceInner.class,
                TestBaseAccountResourceInner.class,
                Context.NONE);
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginUpdateAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountUpdateParametersInner parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, testBaseAccountName, parameters, context);
        return this
            .client
            .<TestBaseAccountResourceInner, TestBaseAccountResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TestBaseAccountResourceInner.class,
                TestBaseAccountResourceInner.class,
                context);
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginUpdate(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountUpdateParametersInner parameters) {
        return beginUpdateAsync(resourceGroupName, testBaseAccountName, parameters).getSyncPoller();
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<TestBaseAccountResourceInner>, TestBaseAccountResourceInner> beginUpdate(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountUpdateParametersInner parameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, testBaseAccountName, parameters, context).getSyncPoller();
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestBaseAccountResourceInner> updateAsync(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountUpdateParametersInner parameters) {
        return beginUpdateAsync(resourceGroupName, testBaseAccountName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestBaseAccountResourceInner> updateAsync(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountUpdateParametersInner parameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, testBaseAccountName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestBaseAccountResourceInner update(
        String resourceGroupName, String testBaseAccountName, TestBaseAccountUpdateParametersInner parameters) {
        return updateAsync(resourceGroupName, testBaseAccountName, parameters).block();
    }

    /**
     * Update an existing Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to update a Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Test Base Account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestBaseAccountResourceInner update(
        String resourceGroupName,
        String testBaseAccountName,
        TestBaseAccountUpdateParametersInner parameters,
        Context context) {
        return updateAsync(resourceGroupName, testBaseAccountName, parameters, context).block();
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String testBaseAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String testBaseAccountName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, testBaseAccountName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String testBaseAccountName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, testBaseAccountName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String testBaseAccountName) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName).getSyncPoller();
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String testBaseAccountName, Context context) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName, context).getSyncPoller();
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String testBaseAccountName) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String testBaseAccountName, Context context) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String testBaseAccountName) {
        deleteAsync(resourceGroupName, testBaseAccountName).block();
    }

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String testBaseAccountName, Context context) {
        deleteAsync(resourceGroupName, testBaseAccountName, context).block();
    }

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TestBaseAccountResourceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String testBaseAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TestBaseAccountResourceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TestBaseAccountResourceInner> getByResourceGroupAsync(
        String resourceGroupName, String testBaseAccountName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, testBaseAccountName)
            .flatMap(
                (Response<TestBaseAccountResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestBaseAccountResourceInner getByResourceGroup(String resourceGroupName, String testBaseAccountName) {
        return getByResourceGroupAsync(resourceGroupName, testBaseAccountName).block();
    }

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestBaseAccountResourceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String testBaseAccountName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, testBaseAccountName, context).block();
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> offboardWithResponseAsync(
        String resourceGroupName, String testBaseAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .offboard(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> offboardWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .offboard(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginOffboardAsync(
        String resourceGroupName, String testBaseAccountName) {
        Mono<Response<Flux<ByteBuffer>>> mono = offboardWithResponseAsync(resourceGroupName, testBaseAccountName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginOffboardAsync(
        String resourceGroupName, String testBaseAccountName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            offboardWithResponseAsync(resourceGroupName, testBaseAccountName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginOffboard(String resourceGroupName, String testBaseAccountName) {
        return beginOffboardAsync(resourceGroupName, testBaseAccountName).getSyncPoller();
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginOffboard(
        String resourceGroupName, String testBaseAccountName, Context context) {
        return beginOffboardAsync(resourceGroupName, testBaseAccountName, context).getSyncPoller();
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> offboardAsync(String resourceGroupName, String testBaseAccountName) {
        return beginOffboardAsync(resourceGroupName, testBaseAccountName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> offboardAsync(String resourceGroupName, String testBaseAccountName, Context context) {
        return beginOffboardAsync(resourceGroupName, testBaseAccountName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void offboard(String resourceGroupName, String testBaseAccountName) {
        offboardAsync(resourceGroupName, testBaseAccountName).block();
    }

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void offboard(String resourceGroupName, String testBaseAccountName, Context context) {
        offboardAsync(resourceGroupName, testBaseAccountName, context).block();
    }
}
