// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.OSUpdateOperationsClient;
import com.azure.resourcemanager.testbase.fluent.models.OSUpdateResourceInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in OSUpdateOperationsClient. */
public final class OSUpdateOperationsClientImpl implements OSUpdateOperationsClient {
    private final ClientLogger logger = new ClientLogger(OSUpdateOperationsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final OSUpdateOperationsService service;

    /** The service client containing this operation class. */
    private final RestApiForTestBaseImpl client;

    /**
     * Initializes an instance of OSUpdateOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    OSUpdateOperationsClientImpl(RestApiForTestBaseImpl client) {
        this.service =
            RestProxy.create(OSUpdateOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for RestApiForTestBaseOSUpdateOperations to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "RestApiForTestBaseOS")
    private interface OSUpdateOperationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/osUpdates/{osUpdateResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OSUpdateResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("packageName") String packageName,
            @PathParam("osUpdateResourceName") String osUpdateResourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets an OS Update by name in which the package was tested before.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName The resource name of the Test Base Package.
     * @param osUpdateResourceName The resource name of an OS Update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OS Update by name in which the package was tested before.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OSUpdateResourceInner>> getWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String packageName, String osUpdateResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (packageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageName is required and cannot be null."));
        }
        if (osUpdateResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter osUpdateResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            packageName,
                            osUpdateResourceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets an OS Update by name in which the package was tested before.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName The resource name of the Test Base Package.
     * @param osUpdateResourceName The resource name of an OS Update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OS Update by name in which the package was tested before.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OSUpdateResourceInner>> getWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        String osUpdateResourceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (packageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageName is required and cannot be null."));
        }
        if (osUpdateResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter osUpdateResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                packageName,
                osUpdateResourceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets an OS Update by name in which the package was tested before.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName The resource name of the Test Base Package.
     * @param osUpdateResourceName The resource name of an OS Update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OS Update by name in which the package was tested before.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OSUpdateResourceInner> getAsync(
        String resourceGroupName, String testBaseAccountName, String packageName, String osUpdateResourceName) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, packageName, osUpdateResourceName)
            .flatMap(
                (Response<OSUpdateResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets an OS Update by name in which the package was tested before.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName The resource name of the Test Base Package.
     * @param osUpdateResourceName The resource name of an OS Update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OS Update by name in which the package was tested before.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OSUpdateResourceInner get(
        String resourceGroupName, String testBaseAccountName, String packageName, String osUpdateResourceName) {
        return getAsync(resourceGroupName, testBaseAccountName, packageName, osUpdateResourceName).block();
    }

    /**
     * Gets an OS Update by name in which the package was tested before.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param packageName The resource name of the Test Base Package.
     * @param osUpdateResourceName The resource name of an OS Update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OS Update by name in which the package was tested before.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OSUpdateResourceInner> getWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        String osUpdateResourceName,
        Context context) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, packageName, osUpdateResourceName, context)
            .block();
    }
}
