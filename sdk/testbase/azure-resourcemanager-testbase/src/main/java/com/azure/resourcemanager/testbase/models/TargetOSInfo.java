// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The information of the target OS to be tested. */
@Fluent
public final class TargetOSInfo {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TargetOSInfo.class);

    /*
     * Specifies the OS update type to test against, e.g., 'Security updates'
     * or 'Feature updates'.
     */
    @JsonProperty(value = "osUpdateType", required = true)
    private String osUpdateType;

    /*
     * Specifies the target OSs to be tested.
     */
    @JsonProperty(value = "targetOSs", required = true)
    private List<String> targetOSs;

    /**
     * Get the osUpdateType property: Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature
     * updates'.
     *
     * @return the osUpdateType value.
     */
    public String osUpdateType() {
        return this.osUpdateType;
    }

    /**
     * Set the osUpdateType property: Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature
     * updates'.
     *
     * @param osUpdateType the osUpdateType value to set.
     * @return the TargetOSInfo object itself.
     */
    public TargetOSInfo withOsUpdateType(String osUpdateType) {
        this.osUpdateType = osUpdateType;
        return this;
    }

    /**
     * Get the targetOSs property: Specifies the target OSs to be tested.
     *
     * @return the targetOSs value.
     */
    public List<String> targetOSs() {
        return this.targetOSs;
    }

    /**
     * Set the targetOSs property: Specifies the target OSs to be tested.
     *
     * @param targetOSs the targetOSs value to set.
     * @return the TargetOSInfo object itself.
     */
    public TargetOSInfo withTargetOSs(List<String> targetOSs) {
        this.targetOSs = targetOSs;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osUpdateType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property osUpdateType in model TargetOSInfo"));
        }
        if (targetOSs() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property targetOSs in model TargetOSInfo"));
        }
    }
}
