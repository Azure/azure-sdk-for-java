// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The Reliability Result. */
@Fluent
public final class ReliabilityResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReliabilityResult.class);

    /*
     * File name.
     */
    @JsonProperty(value = "fileName")
    private String fileName;

    /*
     * Count of number of launches.
     */
    @JsonProperty(value = "launchCount")
    private Integer launchCount;

    /*
     * Count of number of crashes.
     */
    @JsonProperty(value = "crashCount")
    private Integer crashCount;

    /*
     * Count of number of hangs.
     */
    @JsonProperty(value = "hangCount")
    private Integer hangCount;

    /*
     * The regression grade.
     */
    @JsonProperty(value = "regressionGrade")
    private Grade regressionGrade;

    /*
     * The statistic regression grade for crash signal.
     */
    @JsonProperty(value = "crashRegressionGrade")
    private Grade crashRegressionGrade;

    /*
     * Details related to the crash regression analysis.
     */
    @JsonProperty(value = "crashRegressionTestDetails")
    private RegressionTestDetails crashRegressionTestDetails;

    /*
     * The statistic regression grade for hang signal.
     */
    @JsonProperty(value = "hangRegressionGrade")
    private Grade hangRegressionGrade;

    /*
     * Details related to the hang regression analysis.
     */
    @JsonProperty(value = "hangRegressionTestDetails")
    private RegressionTestDetails hangRegressionTestDetails;

    /**
     * Get the fileName property: File name.
     *
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: File name.
     *
     * @param fileName the fileName value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get the launchCount property: Count of number of launches.
     *
     * @return the launchCount value.
     */
    public Integer launchCount() {
        return this.launchCount;
    }

    /**
     * Set the launchCount property: Count of number of launches.
     *
     * @param launchCount the launchCount value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withLaunchCount(Integer launchCount) {
        this.launchCount = launchCount;
        return this;
    }

    /**
     * Get the crashCount property: Count of number of crashes.
     *
     * @return the crashCount value.
     */
    public Integer crashCount() {
        return this.crashCount;
    }

    /**
     * Set the crashCount property: Count of number of crashes.
     *
     * @param crashCount the crashCount value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withCrashCount(Integer crashCount) {
        this.crashCount = crashCount;
        return this;
    }

    /**
     * Get the hangCount property: Count of number of hangs.
     *
     * @return the hangCount value.
     */
    public Integer hangCount() {
        return this.hangCount;
    }

    /**
     * Set the hangCount property: Count of number of hangs.
     *
     * @param hangCount the hangCount value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withHangCount(Integer hangCount) {
        this.hangCount = hangCount;
        return this;
    }

    /**
     * Get the regressionGrade property: The regression grade.
     *
     * @return the regressionGrade value.
     */
    public Grade regressionGrade() {
        return this.regressionGrade;
    }

    /**
     * Set the regressionGrade property: The regression grade.
     *
     * @param regressionGrade the regressionGrade value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withRegressionGrade(Grade regressionGrade) {
        this.regressionGrade = regressionGrade;
        return this;
    }

    /**
     * Get the crashRegressionGrade property: The statistic regression grade for crash signal.
     *
     * @return the crashRegressionGrade value.
     */
    public Grade crashRegressionGrade() {
        return this.crashRegressionGrade;
    }

    /**
     * Set the crashRegressionGrade property: The statistic regression grade for crash signal.
     *
     * @param crashRegressionGrade the crashRegressionGrade value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withCrashRegressionGrade(Grade crashRegressionGrade) {
        this.crashRegressionGrade = crashRegressionGrade;
        return this;
    }

    /**
     * Get the crashRegressionTestDetails property: Details related to the crash regression analysis.
     *
     * @return the crashRegressionTestDetails value.
     */
    public RegressionTestDetails crashRegressionTestDetails() {
        return this.crashRegressionTestDetails;
    }

    /**
     * Set the crashRegressionTestDetails property: Details related to the crash regression analysis.
     *
     * @param crashRegressionTestDetails the crashRegressionTestDetails value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withCrashRegressionTestDetails(RegressionTestDetails crashRegressionTestDetails) {
        this.crashRegressionTestDetails = crashRegressionTestDetails;
        return this;
    }

    /**
     * Get the hangRegressionGrade property: The statistic regression grade for hang signal.
     *
     * @return the hangRegressionGrade value.
     */
    public Grade hangRegressionGrade() {
        return this.hangRegressionGrade;
    }

    /**
     * Set the hangRegressionGrade property: The statistic regression grade for hang signal.
     *
     * @param hangRegressionGrade the hangRegressionGrade value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withHangRegressionGrade(Grade hangRegressionGrade) {
        this.hangRegressionGrade = hangRegressionGrade;
        return this;
    }

    /**
     * Get the hangRegressionTestDetails property: Details related to the hang regression analysis.
     *
     * @return the hangRegressionTestDetails value.
     */
    public RegressionTestDetails hangRegressionTestDetails() {
        return this.hangRegressionTestDetails;
    }

    /**
     * Set the hangRegressionTestDetails property: Details related to the hang regression analysis.
     *
     * @param hangRegressionTestDetails the hangRegressionTestDetails value to set.
     * @return the ReliabilityResult object itself.
     */
    public ReliabilityResult withHangRegressionTestDetails(RegressionTestDetails hangRegressionTestDetails) {
        this.hangRegressionTestDetails = hangRegressionTestDetails;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (crashRegressionTestDetails() != null) {
            crashRegressionTestDetails().validate();
        }
        if (hangRegressionTestDetails() != null) {
            hangRegressionTestDetails().validate();
        }
    }
}
