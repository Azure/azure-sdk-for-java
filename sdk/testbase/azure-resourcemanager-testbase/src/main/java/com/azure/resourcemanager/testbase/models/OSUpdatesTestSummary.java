// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The summary of some tests. */
@Fluent
public final class OSUpdatesTestSummary {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OSUpdatesTestSummary.class);

    /*
     * The status of the last test.
     */
    @JsonProperty(value = "executionStatus")
    private ExecutionStatus executionStatus;

    /*
     * The status of last test.
     */
    @JsonProperty(value = "testStatus")
    private TestStatus testStatus;

    /*
     * The grade of last test.
     */
    @JsonProperty(value = "grade")
    private Grade grade;

    /*
     * The run time of the last test.
     */
    @JsonProperty(value = "testRunTime")
    private String testRunTime;

    /*
     * Detailed summary for each OS update
     */
    @JsonProperty(value = "osUpdateTestSummaries")
    private List<OSUpdateTestSummary> osUpdateTestSummaries;

    /**
     * Get the executionStatus property: The status of the last test.
     *
     * @return the executionStatus value.
     */
    public ExecutionStatus executionStatus() {
        return this.executionStatus;
    }

    /**
     * Set the executionStatus property: The status of the last test.
     *
     * @param executionStatus the executionStatus value to set.
     * @return the OSUpdatesTestSummary object itself.
     */
    public OSUpdatesTestSummary withExecutionStatus(ExecutionStatus executionStatus) {
        this.executionStatus = executionStatus;
        return this;
    }

    /**
     * Get the testStatus property: The status of last test.
     *
     * @return the testStatus value.
     */
    public TestStatus testStatus() {
        return this.testStatus;
    }

    /**
     * Set the testStatus property: The status of last test.
     *
     * @param testStatus the testStatus value to set.
     * @return the OSUpdatesTestSummary object itself.
     */
    public OSUpdatesTestSummary withTestStatus(TestStatus testStatus) {
        this.testStatus = testStatus;
        return this;
    }

    /**
     * Get the grade property: The grade of last test.
     *
     * @return the grade value.
     */
    public Grade grade() {
        return this.grade;
    }

    /**
     * Set the grade property: The grade of last test.
     *
     * @param grade the grade value to set.
     * @return the OSUpdatesTestSummary object itself.
     */
    public OSUpdatesTestSummary withGrade(Grade grade) {
        this.grade = grade;
        return this;
    }

    /**
     * Get the testRunTime property: The run time of the last test.
     *
     * @return the testRunTime value.
     */
    public String testRunTime() {
        return this.testRunTime;
    }

    /**
     * Set the testRunTime property: The run time of the last test.
     *
     * @param testRunTime the testRunTime value to set.
     * @return the OSUpdatesTestSummary object itself.
     */
    public OSUpdatesTestSummary withTestRunTime(String testRunTime) {
        this.testRunTime = testRunTime;
        return this;
    }

    /**
     * Get the osUpdateTestSummaries property: Detailed summary for each OS update.
     *
     * @return the osUpdateTestSummaries value.
     */
    public List<OSUpdateTestSummary> osUpdateTestSummaries() {
        return this.osUpdateTestSummaries;
    }

    /**
     * Set the osUpdateTestSummaries property: Detailed summary for each OS update.
     *
     * @param osUpdateTestSummaries the osUpdateTestSummaries value to set.
     * @return the OSUpdatesTestSummary object itself.
     */
    public OSUpdatesTestSummary withOsUpdateTestSummaries(List<OSUpdateTestSummary> osUpdateTestSummaries) {
        this.osUpdateTestSummaries = osUpdateTestSummaries;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osUpdateTestSummaries() != null) {
            osUpdateTestSummaries().forEach(e -> e.validate());
        }
    }
}
