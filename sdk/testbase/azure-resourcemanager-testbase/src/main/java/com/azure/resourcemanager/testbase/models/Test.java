// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The definition of a Test. */
@Fluent
public final class Test {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Test.class);

    /*
     * The type of the test.
     */
    @JsonProperty(value = "testType", required = true)
    private TestType testType;

    /*
     * The status of the validation run of the package.
     */
    @JsonProperty(value = "validationRunStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ValidationRunStatus validationRunStatus;

    /*
     * Indicates if this test is active.It doesn't schedule test for not active
     * Test.
     */
    @JsonProperty(value = "isActive")
    private Boolean isActive;

    /*
     * The commands used in the test.
     */
    @JsonProperty(value = "commands", required = true)
    private List<Command> commands;

    /**
     * Get the testType property: The type of the test.
     *
     * @return the testType value.
     */
    public TestType testType() {
        return this.testType;
    }

    /**
     * Set the testType property: The type of the test.
     *
     * @param testType the testType value to set.
     * @return the Test object itself.
     */
    public Test withTestType(TestType testType) {
        this.testType = testType;
        return this;
    }

    /**
     * Get the validationRunStatus property: The status of the validation run of the package.
     *
     * @return the validationRunStatus value.
     */
    public ValidationRunStatus validationRunStatus() {
        return this.validationRunStatus;
    }

    /**
     * Get the isActive property: Indicates if this test is active.It doesn't schedule test for not active Test.
     *
     * @return the isActive value.
     */
    public Boolean isActive() {
        return this.isActive;
    }

    /**
     * Set the isActive property: Indicates if this test is active.It doesn't schedule test for not active Test.
     *
     * @param isActive the isActive value to set.
     * @return the Test object itself.
     */
    public Test withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }

    /**
     * Get the commands property: The commands used in the test.
     *
     * @return the commands value.
     */
    public List<Command> commands() {
        return this.commands;
    }

    /**
     * Set the commands property: The commands used in the test.
     *
     * @param commands the commands value to set.
     * @return the Test object itself.
     */
    public Test withCommands(List<Command> commands) {
        this.commands = commands;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (testType() == null) {
            throw logger
                .logExceptionAsError(new IllegalArgumentException("Missing required property testType in model Test"));
        }
        if (commands() == null) {
            throw logger
                .logExceptionAsError(new IllegalArgumentException("Missing required property commands in model Test"));
        } else {
            commands().forEach(e -> e.validate());
        }
    }
}
