// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.CustomerEventsClient;
import com.azure.resourcemanager.testbase.fluent.models.CustomerEventResourceInner;
import com.azure.resourcemanager.testbase.models.CustomerEventResource;
import com.azure.resourcemanager.testbase.models.CustomerEvents;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class CustomerEventsImpl implements CustomerEvents {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CustomerEventsImpl.class);

    private final CustomerEventsClient innerClient;

    private final com.azure.resourcemanager.testbase.TestBaseManager serviceManager;

    public CustomerEventsImpl(
        CustomerEventsClient innerClient, com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CustomerEventResource> listByTestBaseAccount(
        String resourceGroupName, String testBaseAccountName) {
        PagedIterable<CustomerEventResourceInner> inner =
            this.serviceClient().listByTestBaseAccount(resourceGroupName, testBaseAccountName);
        return Utils.mapPage(inner, inner1 -> new CustomerEventResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomerEventResource> listByTestBaseAccount(
        String resourceGroupName, String testBaseAccountName, Context context) {
        PagedIterable<CustomerEventResourceInner> inner =
            this.serviceClient().listByTestBaseAccount(resourceGroupName, testBaseAccountName, context);
        return Utils.mapPage(inner, inner1 -> new CustomerEventResourceImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String testBaseAccountName, String customerEventName) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, customerEventName);
    }

    public void delete(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, customerEventName, context);
    }

    public CustomerEventResource get(String resourceGroupName, String testBaseAccountName, String customerEventName) {
        CustomerEventResourceInner inner =
            this.serviceClient().get(resourceGroupName, testBaseAccountName, customerEventName);
        if (inner != null) {
            return new CustomerEventResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomerEventResource> getWithResponse(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        Response<CustomerEventResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, testBaseAccountName, customerEventName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomerEventResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomerEventResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customerEventName = Utils.getValueFromIdByName(id, "customerEvents");
        if (customerEventName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'customerEvents'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, customerEventName, Context.NONE).getValue();
    }

    public Response<CustomerEventResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customerEventName = Utils.getValueFromIdByName(id, "customerEvents");
        if (customerEventName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'customerEvents'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, customerEventName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customerEventName = Utils.getValueFromIdByName(id, "customerEvents");
        if (customerEventName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'customerEvents'.", id)));
        }
        this.delete(resourceGroupName, testBaseAccountName, customerEventName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String customerEventName = Utils.getValueFromIdByName(id, "customerEvents");
        if (customerEventName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'customerEvents'.", id)));
        }
        this.delete(resourceGroupName, testBaseAccountName, customerEventName, context);
    }

    private CustomerEventsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestBaseManager manager() {
        return this.serviceManager;
    }

    public CustomerEventResourceImpl define(String name) {
        return new CustomerEventResourceImpl(name, this.manager());
    }
}
