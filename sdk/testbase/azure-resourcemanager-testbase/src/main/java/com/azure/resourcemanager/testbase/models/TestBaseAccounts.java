// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of TestBaseAccounts. */
public interface TestBaseAccounts {
    /**
     * Lists all the Test Base Accounts in a subscription. This API is required by ARM guidelines.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Accounts.
     */
    PagedIterable<TestBaseAccountResource> list();

    /**
     * Lists all the Test Base Accounts in a subscription. This API is required by ARM guidelines.
     *
     * @param getDeleted The flag indicating if we need to include the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Accounts.
     */
    PagedIterable<TestBaseAccountResource> list(Boolean getDeleted, Context context);

    /**
     * Lists all the Test Base Accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Accounts.
     */
    PagedIterable<TestBaseAccountResource> listByResourceGroup(String resourceGroupName);

    /**
     * Lists all the Test Base Accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param getDeleted The flag indicating if we need to include the Test Base Accounts which were soft deleted
     *     before.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Accounts.
     */
    PagedIterable<TestBaseAccountResource> listByResourceGroup(
        String resourceGroupName, Boolean getDeleted, Context context);

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String testBaseAccountName);

    /**
     * Deletes a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    TestBaseAccountResource getByResourceGroup(String resourceGroupName, String testBaseAccountName);

    /**
     * Gets a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    Response<TestBaseAccountResource> getByResourceGroupWithResponse(
        String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void offboard(String resourceGroupName, String testBaseAccountName);

    /**
     * Offboard a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void offboard(String resourceGroupName, String testBaseAccountName, Context context);

    /**
     * Gets the file upload URL of a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the file upload URL of a Test Base Account.
     */
    FileUploadUrlResponse getFileUploadUrl(String resourceGroupName, String testBaseAccountName);

    /**
     * Gets the file upload URL of a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to the Test Base Account GetFileUploadURL operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the file upload URL of a Test Base Account.
     */
    Response<FileUploadUrlResponse> getFileUploadUrlWithResponse(
        String resourceGroupName, String testBaseAccountName, GetFileUploadUrlParameters parameters, Context context);

    /**
     * Checks that the Test Base Package name and version is valid and is not already in use.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to the Test Base Package CheckNameAvailability operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a Check Name availability response properties.
     */
    CheckNameAvailabilityResult checkPackageNameAvailability(
        String resourceGroupName, String testBaseAccountName, PackageCheckNameAvailabilityParameters parameters);

    /**
     * Checks that the Test Base Package name and version is valid and is not already in use.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param parameters Parameters supplied to the Test Base Package CheckNameAvailability operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a Check Name availability response properties.
     */
    Response<CheckNameAvailabilityResult> checkPackageNameAvailabilityWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        PackageCheckNameAvailabilityParameters parameters,
        Context context);

    /**
     * Gets a Test Base Account.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    TestBaseAccountResource getById(String id);

    /**
     * Gets a Test Base Account.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base Account.
     */
    Response<TestBaseAccountResource> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a Test Base Account.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a Test Base Account.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new TestBaseAccountResource resource.
     *
     * @param name resource name.
     * @return the first stage of the new TestBaseAccountResource definition.
     */
    TestBaseAccountResource.DefinitionStages.Blank define(String name);
}
