// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.testbase.fluent.CustomerEventsClient;
import com.azure.resourcemanager.testbase.fluent.models.CustomerEventResourceInner;
import com.azure.resourcemanager.testbase.models.CustomerEventListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CustomerEventsClient. */
public final class CustomerEventsClientImpl implements CustomerEventsClient {
    private final ClientLogger logger = new ClientLogger(CustomerEventsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final CustomerEventsService service;

    /** The service client containing this operation class. */
    private final TestBaseImpl client;

    /**
     * Initializes an instance of CustomerEventsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CustomerEventsClientImpl(TestBaseImpl client) {
        this.service =
            RestProxy.create(CustomerEventsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TestBaseCustomerEvents to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "TestBaseCustomerEven")
    private interface CustomerEventsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}/customerEvents")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CustomerEventListResult>> listByTestBaseAccount(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("customerEventName") String customerEventName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CustomerEventResourceInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("customerEventName") String customerEventName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase"
                + "/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CustomerEventResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("testBaseAccountName") String testBaseAccountName,
            @PathParam("customerEventName") String customerEventName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CustomerEventListResult>> listByTestBaseAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists all notification events subscribed under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CustomerEventResourceInner>> listByTestBaseAccountSinglePageAsync(
        String resourceGroupName, String testBaseAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByTestBaseAccount(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<CustomerEventResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all notification events subscribed under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CustomerEventResourceInner>> listByTestBaseAccountSinglePageAsync(
        String resourceGroupName, String testBaseAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByTestBaseAccount(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all notification events subscribed under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CustomerEventResourceInner> listByTestBaseAccountAsync(
        String resourceGroupName, String testBaseAccountName) {
        return new PagedFlux<>(
            () -> listByTestBaseAccountSinglePageAsync(resourceGroupName, testBaseAccountName),
            nextLink -> listByTestBaseAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all notification events subscribed under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CustomerEventResourceInner> listByTestBaseAccountAsync(
        String resourceGroupName, String testBaseAccountName, Context context) {
        return new PagedFlux<>(
            () -> listByTestBaseAccountSinglePageAsync(resourceGroupName, testBaseAccountName, context),
            nextLink -> listByTestBaseAccountNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all notification events subscribed under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CustomerEventResourceInner> listByTestBaseAccount(
        String resourceGroupName, String testBaseAccountName) {
        return new PagedIterable<>(listByTestBaseAccountAsync(resourceGroupName, testBaseAccountName));
    }

    /**
     * Lists all notification events subscribed under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CustomerEventResourceInner> listByTestBaseAccount(
        String resourceGroupName, String testBaseAccountName, Context context) {
        return new PagedIterable<>(listByTestBaseAccountAsync(resourceGroupName, testBaseAccountName, context));
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (customerEventName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerEventName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            customerEventName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (customerEventName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerEventName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                customerEventName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CustomerEventResourceInner>, CustomerEventResourceInner> beginCreateAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters);
        return this
            .client
            .<CustomerEventResourceInner, CustomerEventResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CustomerEventResourceInner.class,
                CustomerEventResourceInner.class,
                this.client.getContext());
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CustomerEventResourceInner>, CustomerEventResourceInner> beginCreateAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters, context);
        return this
            .client
            .<CustomerEventResourceInner, CustomerEventResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CustomerEventResourceInner.class,
                CustomerEventResourceInner.class,
                context);
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CustomerEventResourceInner>, CustomerEventResourceInner> beginCreate(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters).getSyncPoller();
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CustomerEventResourceInner>, CustomerEventResourceInner> beginCreate(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters,
        Context context) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CustomerEventResourceInner> createAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CustomerEventResourceInner> createAsync(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters,
        Context context) {
        return beginCreateAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CustomerEventResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters) {
        return createAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters).block();
    }

    /**
     * Create or replace a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param parameters Parameters supplied to create a Test Base CustomerEvent.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Customer Notification Event resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CustomerEventResourceInner create(
        String resourceGroupName,
        String testBaseAccountName,
        String customerEventName,
        CustomerEventResourceInner parameters,
        Context context) {
        return createAsync(resourceGroupName, testBaseAccountName, customerEventName, parameters, context).block();
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (customerEventName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerEventName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            customerEventName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (customerEventName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerEventName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                customerEventName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, testBaseAccountName, customerEventName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, testBaseAccountName, customerEventName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String testBaseAccountName, String customerEventName) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName, customerEventName).getSyncPoller();
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName, customerEventName, context).getSyncPoller();
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String testBaseAccountName, String customerEventName) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName, customerEventName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        return beginDeleteAsync(resourceGroupName, testBaseAccountName, customerEventName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String testBaseAccountName, String customerEventName) {
        deleteAsync(resourceGroupName, testBaseAccountName, customerEventName).block();
    }

    /**
     * Deletes a Test Base Customer Event.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        deleteAsync(resourceGroupName, testBaseAccountName, customerEventName, context).block();
    }

    /**
     * Gets a Test Base CustomerEvent.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base CustomerEvent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CustomerEventResourceInner>> getWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (customerEventName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerEventName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            testBaseAccountName,
                            customerEventName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a Test Base CustomerEvent.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base CustomerEvent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CustomerEventResourceInner>> getWithResponseAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (testBaseAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testBaseAccountName is required and cannot be null."));
        }
        if (customerEventName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerEventName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                testBaseAccountName,
                customerEventName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets a Test Base CustomerEvent.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base CustomerEvent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CustomerEventResourceInner> getAsync(
        String resourceGroupName, String testBaseAccountName, String customerEventName) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, customerEventName)
            .flatMap(
                (Response<CustomerEventResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a Test Base CustomerEvent.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base CustomerEvent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CustomerEventResourceInner get(
        String resourceGroupName, String testBaseAccountName, String customerEventName) {
        return getAsync(resourceGroupName, testBaseAccountName, customerEventName).block();
    }

    /**
     * Gets a Test Base CustomerEvent.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param customerEventName The resource name of the Test Base Customer event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Test Base CustomerEvent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CustomerEventResourceInner> getWithResponse(
        String resourceGroupName, String testBaseAccountName, String customerEventName, Context context) {
        return getWithResponseAsync(resourceGroupName, testBaseAccountName, customerEventName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CustomerEventResourceInner>> listByTestBaseAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByTestBaseAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<CustomerEventResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Test Base Customer Events.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CustomerEventResourceInner>> listByTestBaseAccountNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByTestBaseAccountNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
