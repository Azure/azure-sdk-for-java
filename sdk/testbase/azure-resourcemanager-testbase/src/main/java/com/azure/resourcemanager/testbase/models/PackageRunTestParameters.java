// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The parameters supplied to the Test Base Package to start a Test Run. */
@Fluent
public final class PackageRunTestParameters {
    /*
     * The type of the test.
     */
    @JsonProperty(value = "testType", required = true)
    private TestType testType;

    /*
     * Specifies the OS update type to test against.
     */
    @JsonProperty(value = "osUpdateType")
    private OsUpdateType osUpdateType;

    /*
     * The operating system name. e.g. Windows 10 1809.
     */
    @JsonProperty(value = "osName", required = true)
    private String osName;

    /*
     * The name of the tested release (OS update).
     */
    @JsonProperty(value = "releaseName")
    private String releaseName;

    /*
     * The flighting ring, only for release of feature updates.
     */
    @JsonProperty(value = "flightingRing")
    private String flightingRing;

    /**
     * Get the testType property: The type of the test.
     *
     * @return the testType value.
     */
    public TestType testType() {
        return this.testType;
    }

    /**
     * Set the testType property: The type of the test.
     *
     * @param testType the testType value to set.
     * @return the PackageRunTestParameters object itself.
     */
    public PackageRunTestParameters withTestType(TestType testType) {
        this.testType = testType;
        return this;
    }

    /**
     * Get the osUpdateType property: Specifies the OS update type to test against.
     *
     * @return the osUpdateType value.
     */
    public OsUpdateType osUpdateType() {
        return this.osUpdateType;
    }

    /**
     * Set the osUpdateType property: Specifies the OS update type to test against.
     *
     * @param osUpdateType the osUpdateType value to set.
     * @return the PackageRunTestParameters object itself.
     */
    public PackageRunTestParameters withOsUpdateType(OsUpdateType osUpdateType) {
        this.osUpdateType = osUpdateType;
        return this;
    }

    /**
     * Get the osName property: The operating system name. e.g. Windows 10 1809.
     *
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Set the osName property: The operating system name. e.g. Windows 10 1809.
     *
     * @param osName the osName value to set.
     * @return the PackageRunTestParameters object itself.
     */
    public PackageRunTestParameters withOsName(String osName) {
        this.osName = osName;
        return this;
    }

    /**
     * Get the releaseName property: The name of the tested release (OS update).
     *
     * @return the releaseName value.
     */
    public String releaseName() {
        return this.releaseName;
    }

    /**
     * Set the releaseName property: The name of the tested release (OS update).
     *
     * @param releaseName the releaseName value to set.
     * @return the PackageRunTestParameters object itself.
     */
    public PackageRunTestParameters withReleaseName(String releaseName) {
        this.releaseName = releaseName;
        return this;
    }

    /**
     * Get the flightingRing property: The flighting ring, only for release of feature updates.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.flightingRing;
    }

    /**
     * Set the flightingRing property: The flighting ring, only for release of feature updates.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the PackageRunTestParameters object itself.
     */
    public PackageRunTestParameters withFlightingRing(String flightingRing) {
        this.flightingRing = flightingRing;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (testType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property testType in model PackageRunTestParameters"));
        }
        if (osName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property osName in model PackageRunTestParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PackageRunTestParameters.class);
}
