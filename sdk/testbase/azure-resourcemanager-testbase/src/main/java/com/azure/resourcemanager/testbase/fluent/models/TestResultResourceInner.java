// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.ExecutionStatus;
import com.azure.resourcemanager.testbase.models.Grade;
import com.azure.resourcemanager.testbase.models.TestResultAnalysisSummary;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** The Test Result Resource. */
@JsonFlatten
@Fluent
public class TestResultResourceInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TestResultResourceInner.class);

    /*
     * The system metadata relating to this resource
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Azure Id of the baseline test result.
     */
    @JsonProperty(value = "properties.baselineTestResultId")
    private String baselineTestResultId;

    /*
     * Resource Id of the package.
     */
    @JsonProperty(value = "properties.packageId")
    private String packageId;

    /*
     * Application name.
     */
    @JsonProperty(value = "properties.applicationName")
    private String applicationName;

    /*
     * Application version.
     */
    @JsonProperty(value = "properties.applicationVersion")
    private String applicationVersion;

    /*
     * The operating system name, e.g. Windows 10 1809.
     */
    @JsonProperty(value = "properties.osName")
    private String osName;

    /*
     * The name of the tested release (OS update).
     */
    @JsonProperty(value = "properties.releaseName")
    private String releaseName;

    /*
     * The release version date of the tested release.
     */
    @JsonProperty(value = "properties.releaseVersionDate")
    private OffsetDateTime releaseVersionDate;

    /*
     * The flighting ring, only for release of feature updates.
     */
    @JsonProperty(value = "properties.flightingRing")
    private String flightingRing;

    /*
     * The build version of the tested release (OS update).
     */
    @JsonProperty(value = "properties.buildVersion")
    private String buildVersion;

    /*
     * The build revision of the tested release (OS update).
     */
    @JsonProperty(value = "properties.buildRevision")
    private String buildRevision;

    /*
     * Test type. E.g. 'Out of box test' or 'Functional test'.
     */
    @JsonProperty(value = "properties.testType")
    private String testType;

    /*
     * The run time of the test.
     */
    @JsonProperty(value = "properties.testRunTime")
    private String testRunTime;

    /*
     * Whether download data is available.
     */
    @JsonProperty(value = "properties.isDownloadDataAvailable")
    private Boolean isDownloadDataAvailable;

    /*
     * Whether video data is available.
     */
    @JsonProperty(value = "properties.isVideoAvailable")
    private Boolean isVideoAvailable;

    /*
     * The execution status of the test.
     */
    @JsonProperty(value = "properties.executionStatus")
    private ExecutionStatus executionStatus;

    /*
     * The grade of the test.
     */
    @JsonProperty(value = "properties.grade")
    private Grade grade;

    /*
     * KB number.
     */
    @JsonProperty(value = "properties.kbNumber")
    private String kbNumber;

    /*
     * The version of the Windows update package.
     */
    @JsonProperty(value = "properties.packageVersion")
    private String packageVersion;

    /*
     * List of analysis summaries.
     */
    @JsonProperty(value = "properties.analysisSummaries")
    private List<TestResultAnalysisSummary> analysisSummaries;

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the baselineTestResultId property: Azure Id of the baseline test result.
     *
     * @return the baselineTestResultId value.
     */
    public String baselineTestResultId() {
        return this.baselineTestResultId;
    }

    /**
     * Set the baselineTestResultId property: Azure Id of the baseline test result.
     *
     * @param baselineTestResultId the baselineTestResultId value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withBaselineTestResultId(String baselineTestResultId) {
        this.baselineTestResultId = baselineTestResultId;
        return this;
    }

    /**
     * Get the packageId property: Resource Id of the package.
     *
     * @return the packageId value.
     */
    public String packageId() {
        return this.packageId;
    }

    /**
     * Set the packageId property: Resource Id of the package.
     *
     * @param packageId the packageId value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withPackageId(String packageId) {
        this.packageId = packageId;
        return this;
    }

    /**
     * Get the applicationName property: Application name.
     *
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: Application name.
     *
     * @param applicationName the applicationName value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the applicationVersion property: Application version.
     *
     * @return the applicationVersion value.
     */
    public String applicationVersion() {
        return this.applicationVersion;
    }

    /**
     * Set the applicationVersion property: Application version.
     *
     * @param applicationVersion the applicationVersion value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withApplicationVersion(String applicationVersion) {
        this.applicationVersion = applicationVersion;
        return this;
    }

    /**
     * Get the osName property: The operating system name, e.g. Windows 10 1809.
     *
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Set the osName property: The operating system name, e.g. Windows 10 1809.
     *
     * @param osName the osName value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withOsName(String osName) {
        this.osName = osName;
        return this;
    }

    /**
     * Get the releaseName property: The name of the tested release (OS update).
     *
     * @return the releaseName value.
     */
    public String releaseName() {
        return this.releaseName;
    }

    /**
     * Set the releaseName property: The name of the tested release (OS update).
     *
     * @param releaseName the releaseName value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withReleaseName(String releaseName) {
        this.releaseName = releaseName;
        return this;
    }

    /**
     * Get the releaseVersionDate property: The release version date of the tested release.
     *
     * @return the releaseVersionDate value.
     */
    public OffsetDateTime releaseVersionDate() {
        return this.releaseVersionDate;
    }

    /**
     * Set the releaseVersionDate property: The release version date of the tested release.
     *
     * @param releaseVersionDate the releaseVersionDate value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withReleaseVersionDate(OffsetDateTime releaseVersionDate) {
        this.releaseVersionDate = releaseVersionDate;
        return this;
    }

    /**
     * Get the flightingRing property: The flighting ring, only for release of feature updates.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.flightingRing;
    }

    /**
     * Set the flightingRing property: The flighting ring, only for release of feature updates.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withFlightingRing(String flightingRing) {
        this.flightingRing = flightingRing;
        return this;
    }

    /**
     * Get the buildVersion property: The build version of the tested release (OS update).
     *
     * @return the buildVersion value.
     */
    public String buildVersion() {
        return this.buildVersion;
    }

    /**
     * Set the buildVersion property: The build version of the tested release (OS update).
     *
     * @param buildVersion the buildVersion value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withBuildVersion(String buildVersion) {
        this.buildVersion = buildVersion;
        return this;
    }

    /**
     * Get the buildRevision property: The build revision of the tested release (OS update).
     *
     * @return the buildRevision value.
     */
    public String buildRevision() {
        return this.buildRevision;
    }

    /**
     * Set the buildRevision property: The build revision of the tested release (OS update).
     *
     * @param buildRevision the buildRevision value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withBuildRevision(String buildRevision) {
        this.buildRevision = buildRevision;
        return this;
    }

    /**
     * Get the testType property: Test type. E.g. 'Out of box test' or 'Functional test'.
     *
     * @return the testType value.
     */
    public String testType() {
        return this.testType;
    }

    /**
     * Set the testType property: Test type. E.g. 'Out of box test' or 'Functional test'.
     *
     * @param testType the testType value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withTestType(String testType) {
        this.testType = testType;
        return this;
    }

    /**
     * Get the testRunTime property: The run time of the test.
     *
     * @return the testRunTime value.
     */
    public String testRunTime() {
        return this.testRunTime;
    }

    /**
     * Set the testRunTime property: The run time of the test.
     *
     * @param testRunTime the testRunTime value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withTestRunTime(String testRunTime) {
        this.testRunTime = testRunTime;
        return this;
    }

    /**
     * Get the isDownloadDataAvailable property: Whether download data is available.
     *
     * @return the isDownloadDataAvailable value.
     */
    public Boolean isDownloadDataAvailable() {
        return this.isDownloadDataAvailable;
    }

    /**
     * Set the isDownloadDataAvailable property: Whether download data is available.
     *
     * @param isDownloadDataAvailable the isDownloadDataAvailable value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withIsDownloadDataAvailable(Boolean isDownloadDataAvailable) {
        this.isDownloadDataAvailable = isDownloadDataAvailable;
        return this;
    }

    /**
     * Get the isVideoAvailable property: Whether video data is available.
     *
     * @return the isVideoAvailable value.
     */
    public Boolean isVideoAvailable() {
        return this.isVideoAvailable;
    }

    /**
     * Set the isVideoAvailable property: Whether video data is available.
     *
     * @param isVideoAvailable the isVideoAvailable value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withIsVideoAvailable(Boolean isVideoAvailable) {
        this.isVideoAvailable = isVideoAvailable;
        return this;
    }

    /**
     * Get the executionStatus property: The execution status of the test.
     *
     * @return the executionStatus value.
     */
    public ExecutionStatus executionStatus() {
        return this.executionStatus;
    }

    /**
     * Set the executionStatus property: The execution status of the test.
     *
     * @param executionStatus the executionStatus value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withExecutionStatus(ExecutionStatus executionStatus) {
        this.executionStatus = executionStatus;
        return this;
    }

    /**
     * Get the grade property: The grade of the test.
     *
     * @return the grade value.
     */
    public Grade grade() {
        return this.grade;
    }

    /**
     * Set the grade property: The grade of the test.
     *
     * @param grade the grade value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withGrade(Grade grade) {
        this.grade = grade;
        return this;
    }

    /**
     * Get the kbNumber property: KB number.
     *
     * @return the kbNumber value.
     */
    public String kbNumber() {
        return this.kbNumber;
    }

    /**
     * Set the kbNumber property: KB number.
     *
     * @param kbNumber the kbNumber value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withKbNumber(String kbNumber) {
        this.kbNumber = kbNumber;
        return this;
    }

    /**
     * Get the packageVersion property: The version of the Windows update package.
     *
     * @return the packageVersion value.
     */
    public String packageVersion() {
        return this.packageVersion;
    }

    /**
     * Set the packageVersion property: The version of the Windows update package.
     *
     * @param packageVersion the packageVersion value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withPackageVersion(String packageVersion) {
        this.packageVersion = packageVersion;
        return this;
    }

    /**
     * Get the analysisSummaries property: List of analysis summaries.
     *
     * @return the analysisSummaries value.
     */
    public List<TestResultAnalysisSummary> analysisSummaries() {
        return this.analysisSummaries;
    }

    /**
     * Set the analysisSummaries property: List of analysis summaries.
     *
     * @param analysisSummaries the analysisSummaries value to set.
     * @return the TestResultResourceInner object itself.
     */
    public TestResultResourceInner withAnalysisSummaries(List<TestResultAnalysisSummary> analysisSummaries) {
        this.analysisSummaries = analysisSummaries;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (analysisSummaries() != null) {
            analysisSummaries().forEach(e -> e.validate());
        }
    }
}
