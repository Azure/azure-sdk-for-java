// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.testbase.fluent.models.TestBaseAccountResourceInner;
import com.azure.resourcemanager.testbase.fluent.models.TestBaseAccountSkuInner;
import com.azure.resourcemanager.testbase.fluent.models.TestBaseAccountUpdateParametersInner;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.TestBaseAccountResource;
import com.azure.resourcemanager.testbase.models.TestBaseAccountSku;
import java.util.Collections;
import java.util.Map;

public final class TestBaseAccountResourceImpl
    implements TestBaseAccountResource, TestBaseAccountResource.Definition, TestBaseAccountResource.Update {
    private TestBaseAccountResourceInner innerObject;

    private final com.azure.resourcemanager.testbase.TestbaseManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public TestBaseAccountSku sku() {
        TestBaseAccountSkuInner inner = this.innerModel().sku();
        if (inner != null) {
            return new TestBaseAccountSkuImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public String accessLevel() {
        return this.innerModel().accessLevel();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public TestBaseAccountResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.testbase.TestbaseManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String testBaseAccountName;

    private Boolean createRestore;

    private TestBaseAccountUpdateParametersInner updateParameters;

    public TestBaseAccountResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public TestBaseAccountResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTestBaseAccountOperations()
                .create(resourceGroupName, testBaseAccountName, this.innerModel(), createRestore, Context.NONE);
        return this;
    }

    public TestBaseAccountResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTestBaseAccountOperations()
                .create(resourceGroupName, testBaseAccountName, this.innerModel(), createRestore, context);
        return this;
    }

    TestBaseAccountResourceImpl(String name, com.azure.resourcemanager.testbase.TestbaseManager serviceManager) {
        this.innerObject = new TestBaseAccountResourceInner();
        this.serviceManager = serviceManager;
        this.testBaseAccountName = name;
        this.createRestore = null;
    }

    public TestBaseAccountResourceImpl update() {
        this.updateParameters = new TestBaseAccountUpdateParametersInner();
        return this;
    }

    public TestBaseAccountResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTestBaseAccountOperations()
                .update(resourceGroupName, testBaseAccountName, updateParameters, Context.NONE);
        return this;
    }

    public TestBaseAccountResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTestBaseAccountOperations()
                .update(resourceGroupName, testBaseAccountName, updateParameters, context);
        return this;
    }

    TestBaseAccountResourceImpl(
        TestBaseAccountResourceInner innerObject, com.azure.resourcemanager.testbase.TestbaseManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.testBaseAccountName = Utils.getValueFromIdByName(innerObject.id(), "testBaseAccounts");
    }

    public TestBaseAccountResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTestBaseAccountOperations()
                .getByResourceGroupWithResponse(resourceGroupName, testBaseAccountName, Context.NONE)
                .getValue();
        return this;
    }

    public TestBaseAccountResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTestBaseAccountOperations()
                .getByResourceGroupWithResponse(resourceGroupName, testBaseAccountName, context)
                .getValue();
        return this;
    }

    public void offboard() {
        serviceManager.testBaseAccountOperations().offboard(resourceGroupName, testBaseAccountName);
    }

    public void offboard(Context context) {
        serviceManager.testBaseAccountOperations().offboard(resourceGroupName, testBaseAccountName, context);
    }

    public TestBaseAccountResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public TestBaseAccountResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public TestBaseAccountResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public TestBaseAccountResourceImpl withSku(TestBaseAccountSkuInner sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateParameters.withSku(sku);
            return this;
        }
    }

    public TestBaseAccountResourceImpl withRestore(Boolean restore) {
        this.createRestore = restore;
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
