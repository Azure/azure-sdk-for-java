// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.TestResultsClient;
import com.azure.resourcemanager.testbase.fluent.models.DownloadUrlResponseInner;
import com.azure.resourcemanager.testbase.fluent.models.TestResultResourceInner;
import com.azure.resourcemanager.testbase.models.DownloadUrlResponse;
import com.azure.resourcemanager.testbase.models.OsUpdateType;
import com.azure.resourcemanager.testbase.models.TestResultResource;
import com.azure.resourcemanager.testbase.models.TestResults;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class TestResultsImpl implements TestResults {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TestResultsImpl.class);

    private final TestResultsClient innerClient;

    private final com.azure.resourcemanager.testbase.TestBaseManager serviceManager;

    public TestResultsImpl(
        TestResultsClient innerClient, com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<TestResultResource> list(
        String resourceGroupName, String testBaseAccountName, String packageName, OsUpdateType osUpdateType) {
        PagedIterable<TestResultResourceInner> inner =
            this.serviceClient().list(resourceGroupName, testBaseAccountName, packageName, osUpdateType);
        return Utils.mapPage(inner, inner1 -> new TestResultResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TestResultResource> list(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        OsUpdateType osUpdateType,
        String filter,
        Context context) {
        PagedIterable<TestResultResourceInner> inner =
            this
                .serviceClient()
                .list(resourceGroupName, testBaseAccountName, packageName, osUpdateType, filter, context);
        return Utils.mapPage(inner, inner1 -> new TestResultResourceImpl(inner1, this.manager()));
    }

    public TestResultResource get(
        String resourceGroupName, String testBaseAccountName, String packageName, String testResultName) {
        TestResultResourceInner inner =
            this.serviceClient().get(resourceGroupName, testBaseAccountName, packageName, testResultName);
        if (inner != null) {
            return new TestResultResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TestResultResource> getWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        String testResultName,
        Context context) {
        Response<TestResultResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, testBaseAccountName, packageName, testResultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TestResultResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DownloadUrlResponse getDownloadUrl(
        String resourceGroupName, String testBaseAccountName, String packageName, String testResultName) {
        DownloadUrlResponseInner inner =
            this.serviceClient().getDownloadUrl(resourceGroupName, testBaseAccountName, packageName, testResultName);
        if (inner != null) {
            return new DownloadUrlResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DownloadUrlResponse> getDownloadUrlWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        String testResultName,
        Context context) {
        Response<DownloadUrlResponseInner> inner =
            this
                .serviceClient()
                .getDownloadUrlWithResponse(
                    resourceGroupName, testBaseAccountName, packageName, testResultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DownloadUrlResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DownloadUrlResponse getVideoDownloadUrl(
        String resourceGroupName, String testBaseAccountName, String packageName, String testResultName) {
        DownloadUrlResponseInner inner =
            this
                .serviceClient()
                .getVideoDownloadUrl(resourceGroupName, testBaseAccountName, packageName, testResultName);
        if (inner != null) {
            return new DownloadUrlResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DownloadUrlResponse> getVideoDownloadUrlWithResponse(
        String resourceGroupName,
        String testBaseAccountName,
        String packageName,
        String testResultName,
        Context context) {
        Response<DownloadUrlResponseInner> inner =
            this
                .serviceClient()
                .getVideoDownloadUrlWithResponse(
                    resourceGroupName, testBaseAccountName, packageName, testResultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DownloadUrlResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private TestResultsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestBaseManager manager() {
        return this.serviceManager;
    }
}
