// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.PackageOperationsClient;
import com.azure.resourcemanager.testbase.fluent.models.PackageResourceInner;
import com.azure.resourcemanager.testbase.models.PackageOperations;
import com.azure.resourcemanager.testbase.models.PackageResource;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class PackageOperationsImpl implements PackageOperations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PackageOperationsImpl.class);

    private final PackageOperationsClient innerClient;

    private final com.azure.resourcemanager.testbase.TestbaseManager serviceManager;

    public PackageOperationsImpl(
        PackageOperationsClient innerClient, com.azure.resourcemanager.testbase.TestbaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String testBaseAccountName, String packageName) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, packageName);
    }

    public void delete(String resourceGroupName, String testBaseAccountName, String packageName, Context context) {
        this.serviceClient().delete(resourceGroupName, testBaseAccountName, packageName, context);
    }

    public PackageResource get(String resourceGroupName, String testBaseAccountName, String packageName) {
        PackageResourceInner inner = this.serviceClient().get(resourceGroupName, testBaseAccountName, packageName);
        if (inner != null) {
            return new PackageResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PackageResource> getWithResponse(
        String resourceGroupName, String testBaseAccountName, String packageName, Context context) {
        Response<PackageResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, testBaseAccountName, packageName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PackageResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void hardDelete(String resourceGroupName, String testBaseAccountName, String packageName) {
        this.serviceClient().hardDelete(resourceGroupName, testBaseAccountName, packageName);
    }

    public void hardDelete(String resourceGroupName, String testBaseAccountName, String packageName, Context context) {
        this.serviceClient().hardDelete(resourceGroupName, testBaseAccountName, packageName, context);
    }

    public PackageResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String packageName = Utils.getValueFromIdByName(id, "packages");
        if (packageName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, packageName, Context.NONE).getValue();
    }

    public Response<PackageResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String packageName = Utils.getValueFromIdByName(id, "packages");
        if (packageName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        return this.getWithResponse(resourceGroupName, testBaseAccountName, packageName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String packageName = Utils.getValueFromIdByName(id, "packages");
        if (packageName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        this.delete(resourceGroupName, testBaseAccountName, packageName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String testBaseAccountName = Utils.getValueFromIdByName(id, "testBaseAccounts");
        if (testBaseAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'testBaseAccounts'.", id)));
        }
        String packageName = Utils.getValueFromIdByName(id, "packages");
        if (packageName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        this.delete(resourceGroupName, testBaseAccountName, packageName, context);
    }

    private PackageOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestbaseManager manager() {
        return this.serviceManager;
    }

    public PackageResourceImpl define(String name) {
        return new PackageResourceImpl(name, this.manager());
    }
}
