// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** The properties of Memory Utilization Result. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "analysisResultType")
@JsonTypeName("MemoryUtilization")
@Fluent
public final class MemoryUtilizationResultSingletonResourceProperties
    extends AnalysisResultSingletonResourceProperties {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(MemoryUtilizationResultSingletonResourceProperties.class);

    /*
     * The result array data.
     */
    @JsonProperty(value = "memoryUtilizationResults")
    private List<UtilizationResult> memoryUtilizationResults;

    /**
     * Get the memoryUtilizationResults property: The result array data.
     *
     * @return the memoryUtilizationResults value.
     */
    public List<UtilizationResult> memoryUtilizationResults() {
        return this.memoryUtilizationResults;
    }

    /**
     * Set the memoryUtilizationResults property: The result array data.
     *
     * @param memoryUtilizationResults the memoryUtilizationResults value to set.
     * @return the MemoryUtilizationResultSingletonResourceProperties object itself.
     */
    public MemoryUtilizationResultSingletonResourceProperties withMemoryUtilizationResults(
        List<UtilizationResult> memoryUtilizationResults) {
        this.memoryUtilizationResults = memoryUtilizationResults;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MemoryUtilizationResultSingletonResourceProperties withGrade(Grade grade) {
        super.withGrade(grade);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (memoryUtilizationResults() != null) {
            memoryUtilizationResults().forEach(e -> e.validate());
        }
    }
}
