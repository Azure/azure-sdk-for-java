// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.testbase.fluent.models.AvailableOSResourceInner;
import com.azure.resourcemanager.testbase.models.OsUpdateType;

/** An instance of this class provides access to all the operations defined in AvailableOSClient. */
public interface AvailableOSClient {
    /**
     * Lists all the available OSs to run a package under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param osUpdateType The type of the OS Update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of available OSs.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AvailableOSResourceInner> list(
        String resourceGroupName, String testBaseAccountName, OsUpdateType osUpdateType);

    /**
     * Lists all the available OSs to run a package under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param osUpdateType The type of the OS Update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of available OSs.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AvailableOSResourceInner> list(
        String resourceGroupName, String testBaseAccountName, OsUpdateType osUpdateType, Context context);

    /**
     * Gets an available OS to run a package under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param availableOSResourceName The resource name of an Available OS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an available OS to run a package under a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AvailableOSResourceInner get(String resourceGroupName, String testBaseAccountName, String availableOSResourceName);

    /**
     * Gets an available OS to run a package under a Test Base Account.
     *
     * @param resourceGroupName The name of the resource group that contains the resource.
     * @param testBaseAccountName The resource name of the Test Base Account.
     * @param availableOSResourceName The resource name of an Available OS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an available OS to run a package under a Test Base Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AvailableOSResourceInner> getWithResponse(
        String resourceGroupName, String testBaseAccountName, String availableOSResourceName, Context context);
}
