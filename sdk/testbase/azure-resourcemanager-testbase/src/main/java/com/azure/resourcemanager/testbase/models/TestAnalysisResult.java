// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The test analysis result. */
@Fluent
public final class TestAnalysisResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TestAnalysisResult.class);

    /*
     * The data to provide more failure analysis information.
     */
    @JsonProperty(value = "blobData")
    private String blobData;

    /*
     * The status of the analysis.
     */
    @JsonProperty(value = "testAnalysisStatus")
    private TestAnalysisStatus testAnalysisStatus;

    /*
     * The array of identified failures.
     */
    @JsonProperty(value = "identifiedFailures")
    private List<IdentifiedFailure> identifiedFailures;

    /**
     * Get the blobData property: The data to provide more failure analysis information.
     *
     * @return the blobData value.
     */
    public String blobData() {
        return this.blobData;
    }

    /**
     * Set the blobData property: The data to provide more failure analysis information.
     *
     * @param blobData the blobData value to set.
     * @return the TestAnalysisResult object itself.
     */
    public TestAnalysisResult withBlobData(String blobData) {
        this.blobData = blobData;
        return this;
    }

    /**
     * Get the testAnalysisStatus property: The status of the analysis.
     *
     * @return the testAnalysisStatus value.
     */
    public TestAnalysisStatus testAnalysisStatus() {
        return this.testAnalysisStatus;
    }

    /**
     * Set the testAnalysisStatus property: The status of the analysis.
     *
     * @param testAnalysisStatus the testAnalysisStatus value to set.
     * @return the TestAnalysisResult object itself.
     */
    public TestAnalysisResult withTestAnalysisStatus(TestAnalysisStatus testAnalysisStatus) {
        this.testAnalysisStatus = testAnalysisStatus;
        return this;
    }

    /**
     * Get the identifiedFailures property: The array of identified failures.
     *
     * @return the identifiedFailures value.
     */
    public List<IdentifiedFailure> identifiedFailures() {
        return this.identifiedFailures;
    }

    /**
     * Set the identifiedFailures property: The array of identified failures.
     *
     * @param identifiedFailures the identifiedFailures value to set.
     * @return the TestAnalysisResult object itself.
     */
    public TestAnalysisResult withIdentifiedFailures(List<IdentifiedFailure> identifiedFailures) {
        this.identifiedFailures = identifiedFailures;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identifiedFailures() != null) {
            identifiedFailures().forEach(e -> e.validate());
        }
    }
}
