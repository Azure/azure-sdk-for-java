// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The regression result. */
@Fluent
public final class RegressionResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RegressionResult.class);

    /*
     * FileName of the binary being analyzed.
     */
    @JsonProperty(value = "fileName")
    private String fileName;

    /*
     * The grade of the test.
     */
    @JsonProperty(value = "grade")
    private Grade grade;

    /*
     * Message that facilitates debugging a particular regression, if any was
     * inferred.
     */
    @JsonProperty(value = "details")
    private String details;

    /*
     * Difference between the two datasets being analyzed.
     */
    @JsonProperty(value = "diff")
    private Double diff;

    /*
     * Indicates if a regression was inferred.
     */
    @JsonProperty(value = "isRegressed")
    private Boolean isRegressed;

    /**
     * Get the fileName property: FileName of the binary being analyzed.
     *
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: FileName of the binary being analyzed.
     *
     * @param fileName the fileName value to set.
     * @return the RegressionResult object itself.
     */
    public RegressionResult withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get the grade property: The grade of the test.
     *
     * @return the grade value.
     */
    public Grade grade() {
        return this.grade;
    }

    /**
     * Set the grade property: The grade of the test.
     *
     * @param grade the grade value to set.
     * @return the RegressionResult object itself.
     */
    public RegressionResult withGrade(Grade grade) {
        this.grade = grade;
        return this;
    }

    /**
     * Get the details property: Message that facilitates debugging a particular regression, if any was inferred.
     *
     * @return the details value.
     */
    public String details() {
        return this.details;
    }

    /**
     * Set the details property: Message that facilitates debugging a particular regression, if any was inferred.
     *
     * @param details the details value to set.
     * @return the RegressionResult object itself.
     */
    public RegressionResult withDetails(String details) {
        this.details = details;
        return this;
    }

    /**
     * Get the diff property: Difference between the two datasets being analyzed.
     *
     * @return the diff value.
     */
    public Double diff() {
        return this.diff;
    }

    /**
     * Set the diff property: Difference between the two datasets being analyzed.
     *
     * @param diff the diff value to set.
     * @return the RegressionResult object itself.
     */
    public RegressionResult withDiff(Double diff) {
        this.diff = diff;
        return this;
    }

    /**
     * Get the isRegressed property: Indicates if a regression was inferred.
     *
     * @return the isRegressed value.
     */
    public Boolean isRegressed() {
        return this.isRegressed;
    }

    /**
     * Set the isRegressed property: Indicates if a regression was inferred.
     *
     * @param isRegressed the isRegressed value to set.
     * @return the RegressionResult object itself.
     */
    public RegressionResult withIsRegressed(Boolean isRegressed) {
        this.isRegressed = isRegressed;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
