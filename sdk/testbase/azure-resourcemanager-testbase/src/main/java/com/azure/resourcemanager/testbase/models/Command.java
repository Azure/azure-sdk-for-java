// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The command used in the test. */
@Fluent
public final class Command {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Command.class);

    /*
     * The name of the command.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * The action of the command.
     */
    @JsonProperty(value = "action", required = true)
    private Action action;

    /*
     * The type of command content.
     */
    @JsonProperty(value = "contentType", required = true)
    private ContentType contentType;

    /*
     * The content of the command. The content depends on source type.
     */
    @JsonProperty(value = "content", required = true)
    private String content;

    /*
     * Specifies whether to run the command as administrator.
     */
    @JsonProperty(value = "runElevated")
    private Boolean runElevated;

    /*
     * Specifies whether to restart the VM after the command executed.
     */
    @JsonProperty(value = "restartAfter")
    private Boolean restartAfter;

    /*
     * Specifies the max run time of the command.
     */
    @JsonProperty(value = "maxRunTime")
    private Integer maxRunTime;

    /*
     * Specifies whether to run the command in interactive mode.
     */
    @JsonProperty(value = "runAsInteractive")
    private Boolean runAsInteractive;

    /*
     * Specifies whether to run the command even if a previous command is
     * failed.
     */
    @JsonProperty(value = "alwaysRun")
    private Boolean alwaysRun;

    /*
     * Specifies whether to apply update before the command.
     */
    @JsonProperty(value = "applyUpdateBefore")
    private Boolean applyUpdateBefore;

    /**
     * Get the name property: The name of the command.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the command.
     *
     * @param name the name value to set.
     * @return the Command object itself.
     */
    public Command withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the action property: The action of the command.
     *
     * @return the action value.
     */
    public Action action() {
        return this.action;
    }

    /**
     * Set the action property: The action of the command.
     *
     * @param action the action value to set.
     * @return the Command object itself.
     */
    public Command withAction(Action action) {
        this.action = action;
        return this;
    }

    /**
     * Get the contentType property: The type of command content.
     *
     * @return the contentType value.
     */
    public ContentType contentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: The type of command content.
     *
     * @param contentType the contentType value to set.
     * @return the Command object itself.
     */
    public Command withContentType(ContentType contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the content property: The content of the command. The content depends on source type.
     *
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: The content of the command. The content depends on source type.
     *
     * @param content the content value to set.
     * @return the Command object itself.
     */
    public Command withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the runElevated property: Specifies whether to run the command as administrator.
     *
     * @return the runElevated value.
     */
    public Boolean runElevated() {
        return this.runElevated;
    }

    /**
     * Set the runElevated property: Specifies whether to run the command as administrator.
     *
     * @param runElevated the runElevated value to set.
     * @return the Command object itself.
     */
    public Command withRunElevated(Boolean runElevated) {
        this.runElevated = runElevated;
        return this;
    }

    /**
     * Get the restartAfter property: Specifies whether to restart the VM after the command executed.
     *
     * @return the restartAfter value.
     */
    public Boolean restartAfter() {
        return this.restartAfter;
    }

    /**
     * Set the restartAfter property: Specifies whether to restart the VM after the command executed.
     *
     * @param restartAfter the restartAfter value to set.
     * @return the Command object itself.
     */
    public Command withRestartAfter(Boolean restartAfter) {
        this.restartAfter = restartAfter;
        return this;
    }

    /**
     * Get the maxRunTime property: Specifies the max run time of the command.
     *
     * @return the maxRunTime value.
     */
    public Integer maxRunTime() {
        return this.maxRunTime;
    }

    /**
     * Set the maxRunTime property: Specifies the max run time of the command.
     *
     * @param maxRunTime the maxRunTime value to set.
     * @return the Command object itself.
     */
    public Command withMaxRunTime(Integer maxRunTime) {
        this.maxRunTime = maxRunTime;
        return this;
    }

    /**
     * Get the runAsInteractive property: Specifies whether to run the command in interactive mode.
     *
     * @return the runAsInteractive value.
     */
    public Boolean runAsInteractive() {
        return this.runAsInteractive;
    }

    /**
     * Set the runAsInteractive property: Specifies whether to run the command in interactive mode.
     *
     * @param runAsInteractive the runAsInteractive value to set.
     * @return the Command object itself.
     */
    public Command withRunAsInteractive(Boolean runAsInteractive) {
        this.runAsInteractive = runAsInteractive;
        return this;
    }

    /**
     * Get the alwaysRun property: Specifies whether to run the command even if a previous command is failed.
     *
     * @return the alwaysRun value.
     */
    public Boolean alwaysRun() {
        return this.alwaysRun;
    }

    /**
     * Set the alwaysRun property: Specifies whether to run the command even if a previous command is failed.
     *
     * @param alwaysRun the alwaysRun value to set.
     * @return the Command object itself.
     */
    public Command withAlwaysRun(Boolean alwaysRun) {
        this.alwaysRun = alwaysRun;
        return this;
    }

    /**
     * Get the applyUpdateBefore property: Specifies whether to apply update before the command.
     *
     * @return the applyUpdateBefore value.
     */
    public Boolean applyUpdateBefore() {
        return this.applyUpdateBefore;
    }

    /**
     * Set the applyUpdateBefore property: Specifies whether to apply update before the command.
     *
     * @param applyUpdateBefore the applyUpdateBefore value to set.
     * @return the Command object itself.
     */
    public Command withApplyUpdateBefore(Boolean applyUpdateBefore) {
        this.applyUpdateBefore = applyUpdateBefore;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(new IllegalArgumentException("Missing required property name in model Command"));
        }
        if (action() == null) {
            throw logger
                .logExceptionAsError(new IllegalArgumentException("Missing required property action in model Command"));
        }
        if (contentType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property contentType in model Command"));
        }
        if (content() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property content in model Command"));
        }
    }
}
