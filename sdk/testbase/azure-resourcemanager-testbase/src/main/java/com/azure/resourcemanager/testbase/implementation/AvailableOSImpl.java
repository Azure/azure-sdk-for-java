// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.AvailableOSClient;
import com.azure.resourcemanager.testbase.fluent.models.AvailableOSResourceInner;
import com.azure.resourcemanager.testbase.models.AvailableOS;
import com.azure.resourcemanager.testbase.models.AvailableOSResource;
import com.azure.resourcemanager.testbase.models.OsUpdateType;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AvailableOSImpl implements AvailableOS {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AvailableOSImpl.class);

    private final AvailableOSClient innerClient;

    private final com.azure.resourcemanager.testbase.TestBaseManager serviceManager;

    public AvailableOSImpl(
        AvailableOSClient innerClient, com.azure.resourcemanager.testbase.TestBaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AvailableOSResource> list(
        String resourceGroupName, String testBaseAccountName, OsUpdateType osUpdateType) {
        PagedIterable<AvailableOSResourceInner> inner =
            this.serviceClient().list(resourceGroupName, testBaseAccountName, osUpdateType);
        return Utils.mapPage(inner, inner1 -> new AvailableOSResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AvailableOSResource> list(
        String resourceGroupName, String testBaseAccountName, OsUpdateType osUpdateType, Context context) {
        PagedIterable<AvailableOSResourceInner> inner =
            this.serviceClient().list(resourceGroupName, testBaseAccountName, osUpdateType, context);
        return Utils.mapPage(inner, inner1 -> new AvailableOSResourceImpl(inner1, this.manager()));
    }

    public AvailableOSResource get(
        String resourceGroupName, String testBaseAccountName, String availableOSResourceName) {
        AvailableOSResourceInner inner =
            this.serviceClient().get(resourceGroupName, testBaseAccountName, availableOSResourceName);
        if (inner != null) {
            return new AvailableOSResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AvailableOSResource> getWithResponse(
        String resourceGroupName, String testBaseAccountName, String availableOSResourceName, Context context) {
        Response<AvailableOSResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, testBaseAccountName, availableOSResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AvailableOSResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private AvailableOSClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.testbase.TestBaseManager manager() {
        return this.serviceManager;
    }
}
