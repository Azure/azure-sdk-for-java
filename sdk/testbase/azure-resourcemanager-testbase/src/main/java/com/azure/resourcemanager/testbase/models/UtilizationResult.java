// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The Utilization Result. */
@Fluent
public final class UtilizationResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(UtilizationResult.class);

    /*
     * Process name, or '_total' for all processes
     */
    @JsonProperty(value = "process")
    private String process;

    /*
     * Upper bound
     */
    @JsonProperty(value = "upperBound")
    private UtilizationBound upperBound;

    /*
     * Lower bound
     */
    @JsonProperty(value = "lowerBound")
    private UtilizationBound lowerBound;

    /*
     * Utilization data
     */
    @JsonProperty(value = "utilization")
    private List<UtilizationEntry> utilization;

    /**
     * Get the process property: Process name, or '_total' for all processes.
     *
     * @return the process value.
     */
    public String process() {
        return this.process;
    }

    /**
     * Set the process property: Process name, or '_total' for all processes.
     *
     * @param process the process value to set.
     * @return the UtilizationResult object itself.
     */
    public UtilizationResult withProcess(String process) {
        this.process = process;
        return this;
    }

    /**
     * Get the upperBound property: Upper bound.
     *
     * @return the upperBound value.
     */
    public UtilizationBound upperBound() {
        return this.upperBound;
    }

    /**
     * Set the upperBound property: Upper bound.
     *
     * @param upperBound the upperBound value to set.
     * @return the UtilizationResult object itself.
     */
    public UtilizationResult withUpperBound(UtilizationBound upperBound) {
        this.upperBound = upperBound;
        return this;
    }

    /**
     * Get the lowerBound property: Lower bound.
     *
     * @return the lowerBound value.
     */
    public UtilizationBound lowerBound() {
        return this.lowerBound;
    }

    /**
     * Set the lowerBound property: Lower bound.
     *
     * @param lowerBound the lowerBound value to set.
     * @return the UtilizationResult object itself.
     */
    public UtilizationResult withLowerBound(UtilizationBound lowerBound) {
        this.lowerBound = lowerBound;
        return this;
    }

    /**
     * Get the utilization property: Utilization data.
     *
     * @return the utilization value.
     */
    public List<UtilizationEntry> utilization() {
        return this.utilization;
    }

    /**
     * Set the utilization property: Utilization data.
     *
     * @param utilization the utilization value to set.
     * @return the UtilizationResult object itself.
     */
    public UtilizationResult withUtilization(List<UtilizationEntry> utilization) {
        this.utilization = utilization;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (upperBound() != null) {
            upperBound().validate();
        }
        if (lowerBound() != null) {
            lowerBound().validate();
        }
        if (utilization() != null) {
            utilization().forEach(e -> e.validate());
        }
    }
}
