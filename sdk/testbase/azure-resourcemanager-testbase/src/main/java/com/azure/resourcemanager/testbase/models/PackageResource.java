// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.testbase.fluent.models.PackageResourceInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of PackageResource. */
public interface PackageResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the applicationName property: Application name.
     *
     * @return the applicationName value.
     */
    String applicationName();

    /**
     * Gets the version property: Application version.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the testTypes property: OOB, functional or both. Mapped to the data in 'tests' property.
     *
     * @return the testTypes value.
     */
    List<TestType> testTypes();

    /**
     * Gets the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    List<TargetOSInfo> targetOSList();

    /**
     * Gets the packageStatus property: The status of the package.
     *
     * @return the packageStatus value.
     */
    PackageStatus packageStatus();

    /**
     * Gets the lastModifiedTime property: The UTC timestamp when the package was last modified.
     *
     * @return the lastModifiedTime value.
     */
    OffsetDateTime lastModifiedTime();

    /**
     * Gets the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    String flightingRing();

    /**
     * Gets the isEnabled property: Flag showing that whether the package is enabled. It doesn't schedule test for
     * package which is not enabled.
     *
     * @return the isEnabled value.
     */
    Boolean isEnabled();

    /**
     * Gets the blobPath property: The file path of the package.
     *
     * @return the blobPath value.
     */
    String blobPath();

    /**
     * Gets the validationResults property: The validation results. There's validation on package when it's created or
     * updated.
     *
     * @return the validationResults value.
     */
    List<PackageValidationResult> validationResults();

    /**
     * Gets the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    List<Test> tests();

    /**
     * Gets the etag property: Resource Etag.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.testbase.fluent.models.PackageResourceInner object.
     *
     * @return the inner object.
     */
    PackageResourceInner innerModel();

    /** The entirety of the PackageResource definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The PackageResource definition stages. */
    interface DefinitionStages {
        /** The first stage of the PackageResource definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the PackageResource definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the PackageResource definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, testBaseAccountName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource.
             * @param testBaseAccountName The resource name of the Test Base Account.
             * @return the next definition stage.
             */
            WithCreate withExistingTestBaseAccount(String resourceGroupName, String testBaseAccountName);
        }
        /**
         * The stage of the PackageResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithApplicationName,
                DefinitionStages.WithVersion,
                DefinitionStages.WithTargetOSList,
                DefinitionStages.WithFlightingRing,
                DefinitionStages.WithBlobPath,
                DefinitionStages.WithTests {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PackageResource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PackageResource create(Context context);
        }
        /** The stage of the PackageResource definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the PackageResource definition allowing to specify applicationName. */
        interface WithApplicationName {
            /**
             * Specifies the applicationName property: Application name.
             *
             * @param applicationName Application name.
             * @return the next definition stage.
             */
            WithCreate withApplicationName(String applicationName);
        }
        /** The stage of the PackageResource definition allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: Application version.
             *
             * @param version Application version.
             * @return the next definition stage.
             */
            WithCreate withVersion(String version);
        }
        /** The stage of the PackageResource definition allowing to specify targetOSList. */
        interface WithTargetOSList {
            /**
             * Specifies the targetOSList property: Specifies the target OSs of specific OS Update types..
             *
             * @param targetOSList Specifies the target OSs of specific OS Update types.
             * @return the next definition stage.
             */
            WithCreate withTargetOSList(List<TargetOSInfo> targetOSList);
        }
        /** The stage of the PackageResource definition allowing to specify flightingRing. */
        interface WithFlightingRing {
            /**
             * Specifies the flightingRing property: The flighting ring for feature update..
             *
             * @param flightingRing The flighting ring for feature update.
             * @return the next definition stage.
             */
            WithCreate withFlightingRing(String flightingRing);
        }
        /** The stage of the PackageResource definition allowing to specify blobPath. */
        interface WithBlobPath {
            /**
             * Specifies the blobPath property: The file path of the package..
             *
             * @param blobPath The file path of the package.
             * @return the next definition stage.
             */
            WithCreate withBlobPath(String blobPath);
        }
        /** The stage of the PackageResource definition allowing to specify tests. */
        interface WithTests {
            /**
             * Specifies the tests property: The detailed test information..
             *
             * @param tests The detailed test information.
             * @return the next definition stage.
             */
            WithCreate withTests(List<Test> tests);
        }
    }
    /**
     * Begins update for the PackageResource resource.
     *
     * @return the stage of resource update.
     */
    PackageResource.Update update();

    /** The template for PackageResource update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithTargetOSList,
            UpdateStages.WithFlightingRing,
            UpdateStages.WithIsEnabled,
            UpdateStages.WithBlobPath,
            UpdateStages.WithTests {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        PackageResource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PackageResource apply(Context context);
    }
    /** The PackageResource update stages. */
    interface UpdateStages {
        /** The stage of the PackageResource update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags of the Package..
             *
             * @param tags The tags of the Package.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the PackageResource update allowing to specify targetOSList. */
        interface WithTargetOSList {
            /**
             * Specifies the targetOSList property: Specifies the target OSs of specific OS Update types..
             *
             * @param targetOSList Specifies the target OSs of specific OS Update types.
             * @return the next definition stage.
             */
            Update withTargetOSList(List<TargetOSInfo> targetOSList);
        }
        /** The stage of the PackageResource update allowing to specify flightingRing. */
        interface WithFlightingRing {
            /**
             * Specifies the flightingRing property: The flighting ring for feature update..
             *
             * @param flightingRing The flighting ring for feature update.
             * @return the next definition stage.
             */
            Update withFlightingRing(String flightingRing);
        }
        /** The stage of the PackageResource update allowing to specify isEnabled. */
        interface WithIsEnabled {
            /**
             * Specifies the isEnabled property: Specifies whether the package is enabled. It doesn't schedule test for
             * package which is not enabled..
             *
             * @param isEnabled Specifies whether the package is enabled. It doesn't schedule test for package which is
             *     not enabled.
             * @return the next definition stage.
             */
            Update withIsEnabled(Boolean isEnabled);
        }
        /** The stage of the PackageResource update allowing to specify blobPath. */
        interface WithBlobPath {
            /**
             * Specifies the blobPath property: The file name of the package..
             *
             * @param blobPath The file name of the package.
             * @return the next definition stage.
             */
            Update withBlobPath(String blobPath);
        }
        /** The stage of the PackageResource update allowing to specify tests. */
        interface WithTests {
            /**
             * Specifies the tests property: The detailed test information..
             *
             * @param tests The detailed test information.
             * @return the next definition stage.
             */
            Update withTests(List<Test> tests);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    PackageResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PackageResource refresh(Context context);

    /**
     * Hard Delete a Test Base Package.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void hardDelete();

    /**
     * Hard Delete a Test Base Package.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void hardDelete(Context context);
}
