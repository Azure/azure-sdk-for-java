// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The Available OS resource. */
@Fluent
public final class AvailableOSResourceInner extends ProxyResource {
    /*
     * The system metadata relating to this resource
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Available OS properties.
     */
    @JsonProperty(value = "properties")
    private AvailableOSProperties innerProperties;

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Available OS properties.
     *
     * @return the innerProperties value.
     */
    private AvailableOSProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the osId property: The Id of an Available OS of a Test Base Account.
     *
     * @return the osId value.
     */
    public String osId() {
        return this.innerProperties() == null ? null : this.innerProperties().osId();
    }

    /**
     * Set the osId property: The Id of an Available OS of a Test Base Account.
     *
     * @param osId the osId value to set.
     * @return the AvailableOSResourceInner object itself.
     */
    public AvailableOSResourceInner withOsId(String osId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AvailableOSProperties();
        }
        this.innerProperties().withOsId(osId);
        return this;
    }

    /**
     * Get the osName property: The name of an Available OS of a Test Base Account.
     *
     * @return the osName value.
     */
    public String osName() {
        return this.innerProperties() == null ? null : this.innerProperties().osName();
    }

    /**
     * Set the osName property: The name of an Available OS of a Test Base Account.
     *
     * @param osName the osName value to set.
     * @return the AvailableOSResourceInner object itself.
     */
    public AvailableOSResourceInner withOsName(String osName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AvailableOSProperties();
        }
        this.innerProperties().withOsName(osName);
        return this;
    }

    /**
     * Get the osVersion property: The version of an Available OS of a Test Base Account.
     *
     * @return the osVersion value.
     */
    public String osVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().osVersion();
    }

    /**
     * Set the osVersion property: The version of an Available OS of a Test Base Account.
     *
     * @param osVersion the osVersion value to set.
     * @return the AvailableOSResourceInner object itself.
     */
    public AvailableOSResourceInner withOsVersion(String osVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AvailableOSProperties();
        }
        this.innerProperties().withOsVersion(osVersion);
        return this;
    }

    /**
     * Get the insiderChannel property: The insider channel of an Available OS of a Test Base Account.
     *
     * @return the insiderChannel value.
     */
    public String insiderChannel() {
        return this.innerProperties() == null ? null : this.innerProperties().insiderChannel();
    }

    /**
     * Set the insiderChannel property: The insider channel of an Available OS of a Test Base Account.
     *
     * @param insiderChannel the insiderChannel value to set.
     * @return the AvailableOSResourceInner object itself.
     */
    public AvailableOSResourceInner withInsiderChannel(String insiderChannel) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AvailableOSProperties();
        }
        this.innerProperties().withInsiderChannel(insiderChannel);
        return this;
    }

    /**
     * Get the osUpdateType property: The OS update type of an Available OS of a Test Base Account.
     *
     * @return the osUpdateType value.
     */
    public String osUpdateType() {
        return this.innerProperties() == null ? null : this.innerProperties().osUpdateType();
    }

    /**
     * Set the osUpdateType property: The OS update type of an Available OS of a Test Base Account.
     *
     * @param osUpdateType the osUpdateType value to set.
     * @return the AvailableOSResourceInner object itself.
     */
    public AvailableOSResourceInner withOsUpdateType(String osUpdateType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AvailableOSProperties();
        }
        this.innerProperties().withOsUpdateType(osUpdateType);
        return this;
    }

    /**
     * Get the osPlatform property: The Platform of an Available OS of a Test Base Account.
     *
     * @return the osPlatform value.
     */
    public String osPlatform() {
        return this.innerProperties() == null ? null : this.innerProperties().osPlatform();
    }

    /**
     * Set the osPlatform property: The Platform of an Available OS of a Test Base Account.
     *
     * @param osPlatform the osPlatform value to set.
     * @return the AvailableOSResourceInner object itself.
     */
    public AvailableOSResourceInner withOsPlatform(String osPlatform) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AvailableOSProperties();
        }
        this.innerProperties().withOsPlatform(osPlatform);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
