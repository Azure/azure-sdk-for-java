// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.testbase.fluent.models.PackageResourceInner;
import com.azure.resourcemanager.testbase.models.PackageResource;
import com.azure.resourcemanager.testbase.models.PackageStatus;
import com.azure.resourcemanager.testbase.models.PackageUpdateParameters;
import com.azure.resourcemanager.testbase.models.PackageValidationResult;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.TargetOSInfo;
import com.azure.resourcemanager.testbase.models.Test;
import com.azure.resourcemanager.testbase.models.TestType;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class PackageResourceImpl implements PackageResource, PackageResource.Definition, PackageResource.Update {
    private PackageResourceInner innerObject;

    private final com.azure.resourcemanager.testbase.TestbaseManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String applicationName() {
        return this.innerModel().applicationName();
    }

    public String version() {
        return this.innerModel().version();
    }

    public List<TestType> testTypes() {
        List<TestType> inner = this.innerModel().testTypes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<TargetOSInfo> targetOSList() {
        List<TargetOSInfo> inner = this.innerModel().targetOSList();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public PackageStatus packageStatus() {
        return this.innerModel().packageStatus();
    }

    public OffsetDateTime lastModifiedTime() {
        return this.innerModel().lastModifiedTime();
    }

    public String flightingRing() {
        return this.innerModel().flightingRing();
    }

    public Boolean isEnabled() {
        return this.innerModel().isEnabled();
    }

    public String blobPath() {
        return this.innerModel().blobPath();
    }

    public List<PackageValidationResult> validationResults() {
        List<PackageValidationResult> inner = this.innerModel().validationResults();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<Test> tests() {
        List<Test> inner = this.innerModel().tests();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public PackageResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.testbase.TestbaseManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String testBaseAccountName;

    private String packageName;

    private PackageUpdateParameters updateParameters;

    public PackageResourceImpl withExistingTestBaseAccount(String resourceGroupName, String testBaseAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.testBaseAccountName = testBaseAccountName;
        return this;
    }

    public PackageResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPackageOperations()
                .create(resourceGroupName, testBaseAccountName, packageName, this.innerModel(), Context.NONE);
        return this;
    }

    public PackageResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPackageOperations()
                .create(resourceGroupName, testBaseAccountName, packageName, this.innerModel(), context);
        return this;
    }

    PackageResourceImpl(String name, com.azure.resourcemanager.testbase.TestbaseManager serviceManager) {
        this.innerObject = new PackageResourceInner();
        this.serviceManager = serviceManager;
        this.packageName = name;
    }

    public PackageResourceImpl update() {
        this.updateParameters = new PackageUpdateParameters();
        return this;
    }

    public PackageResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPackageOperations()
                .update(resourceGroupName, testBaseAccountName, packageName, updateParameters, Context.NONE);
        return this;
    }

    public PackageResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPackageOperations()
                .update(resourceGroupName, testBaseAccountName, packageName, updateParameters, context);
        return this;
    }

    PackageResourceImpl(
        PackageResourceInner innerObject, com.azure.resourcemanager.testbase.TestbaseManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.testBaseAccountName = Utils.getValueFromIdByName(innerObject.id(), "testBaseAccounts");
        this.packageName = Utils.getValueFromIdByName(innerObject.id(), "packages");
    }

    public PackageResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPackageOperations()
                .getWithResponse(resourceGroupName, testBaseAccountName, packageName, Context.NONE)
                .getValue();
        return this;
    }

    public PackageResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPackageOperations()
                .getWithResponse(resourceGroupName, testBaseAccountName, packageName, context)
                .getValue();
        return this;
    }

    public void hardDelete() {
        serviceManager.packageOperations().hardDelete(resourceGroupName, testBaseAccountName, packageName);
    }

    public void hardDelete(Context context) {
        serviceManager.packageOperations().hardDelete(resourceGroupName, testBaseAccountName, packageName, context);
    }

    public PackageResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public PackageResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public PackageResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public PackageResourceImpl withApplicationName(String applicationName) {
        this.innerModel().withApplicationName(applicationName);
        return this;
    }

    public PackageResourceImpl withVersion(String version) {
        this.innerModel().withVersion(version);
        return this;
    }

    public PackageResourceImpl withTargetOSList(List<TargetOSInfo> targetOSList) {
        if (isInCreateMode()) {
            this.innerModel().withTargetOSList(targetOSList);
            return this;
        } else {
            this.updateParameters.withTargetOSList(targetOSList);
            return this;
        }
    }

    public PackageResourceImpl withFlightingRing(String flightingRing) {
        if (isInCreateMode()) {
            this.innerModel().withFlightingRing(flightingRing);
            return this;
        } else {
            this.updateParameters.withFlightingRing(flightingRing);
            return this;
        }
    }

    public PackageResourceImpl withBlobPath(String blobPath) {
        if (isInCreateMode()) {
            this.innerModel().withBlobPath(blobPath);
            return this;
        } else {
            this.updateParameters.withBlobPath(blobPath);
            return this;
        }
    }

    public PackageResourceImpl withTests(List<Test> tests) {
        if (isInCreateMode()) {
            this.innerModel().withTests(tests);
            return this;
        } else {
            this.updateParameters.withTests(tests);
            return this;
        }
    }

    public PackageResourceImpl withIsEnabled(Boolean isEnabled) {
        this.updateParameters.withIsEnabled(isEnabled);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
