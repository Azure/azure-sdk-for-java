// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.models.PackageStatus;
import com.azure.resourcemanager.testbase.models.PackageValidationResult;
import com.azure.resourcemanager.testbase.models.ProvisioningState;
import com.azure.resourcemanager.testbase.models.TargetOSInfo;
import com.azure.resourcemanager.testbase.models.Test;
import com.azure.resourcemanager.testbase.models.TestType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** The Test Base Package resource. */
@Fluent
public final class PackageResourceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PackageResourceInner.class);

    /*
     * The system metadata relating to this resource
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Test Base Package properties.
     */
    @JsonProperty(value = "properties")
    private PackageProperties innerProperties;

    /*
     * Resource Etag.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Test Base Package properties.
     *
     * @return the innerProperties value.
     */
    private PackageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: Resource Etag.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /** {@inheritDoc} */
    @Override
    public PackageResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the applicationName property: Application name.
     *
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationName();
    }

    /**
     * Set the applicationName property: Application name.
     *
     * @param applicationName the applicationName value to set.
     * @return the PackageResourceInner object itself.
     */
    public PackageResourceInner withApplicationName(String applicationName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withApplicationName(applicationName);
        return this;
    }

    /**
     * Get the version property: Application version.
     *
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Application version.
     *
     * @param version the version value to set.
     * @return the PackageResourceInner object itself.
     */
    public PackageResourceInner withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the testTypes property: OOB, functional or both. Mapped to the data in 'tests' property.
     *
     * @return the testTypes value.
     */
    public List<TestType> testTypes() {
        return this.innerProperties() == null ? null : this.innerProperties().testTypes();
    }

    /**
     * Get the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    public List<TargetOSInfo> targetOSList() {
        return this.innerProperties() == null ? null : this.innerProperties().targetOSList();
    }

    /**
     * Set the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @param targetOSList the targetOSList value to set.
     * @return the PackageResourceInner object itself.
     */
    public PackageResourceInner withTargetOSList(List<TargetOSInfo> targetOSList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withTargetOSList(targetOSList);
        return this;
    }

    /**
     * Get the packageStatus property: The status of the package.
     *
     * @return the packageStatus value.
     */
    public PackageStatus packageStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().packageStatus();
    }

    /**
     * Get the lastModifiedTime property: The UTC timestamp when the package was last modified.
     *
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTime();
    }

    /**
     * Get the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.innerProperties() == null ? null : this.innerProperties().flightingRing();
    }

    /**
     * Set the flightingRing property: The flighting ring for feature update.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the PackageResourceInner object itself.
     */
    public PackageResourceInner withFlightingRing(String flightingRing) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withFlightingRing(flightingRing);
        return this;
    }

    /**
     * Get the isEnabled property: Flag showing that whether the package is enabled. It doesn't schedule test for
     * package which is not enabled.
     *
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isEnabled();
    }

    /**
     * Get the blobPath property: The file path of the package.
     *
     * @return the blobPath value.
     */
    public String blobPath() {
        return this.innerProperties() == null ? null : this.innerProperties().blobPath();
    }

    /**
     * Set the blobPath property: The file path of the package.
     *
     * @param blobPath the blobPath value to set.
     * @return the PackageResourceInner object itself.
     */
    public PackageResourceInner withBlobPath(String blobPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withBlobPath(blobPath);
        return this;
    }

    /**
     * Get the validationResults property: The validation results. There's validation on package when it's created or
     * updated.
     *
     * @return the validationResults value.
     */
    public List<PackageValidationResult> validationResults() {
        return this.innerProperties() == null ? null : this.innerProperties().validationResults();
    }

    /**
     * Get the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    public List<Test> tests() {
        return this.innerProperties() == null ? null : this.innerProperties().tests();
    }

    /**
     * Set the tests property: The detailed test information.
     *
     * @param tests the tests value to set.
     * @return the PackageResourceInner object itself.
     */
    public PackageResourceInner withTests(List<Test> tests) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withTests(tests);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
