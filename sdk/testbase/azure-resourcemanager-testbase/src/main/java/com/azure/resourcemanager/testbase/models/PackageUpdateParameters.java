// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.testbase.fluent.models.PackageUpdateParameterProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Parameters supplied to update a Test Base Package. */
@Fluent
public final class PackageUpdateParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PackageUpdateParameters.class);

    /*
     * Test Base Package update parameters.
     */
    @JsonProperty(value = "properties")
    private PackageUpdateParameterProperties innerProperties;

    /*
     * The tags of the Package.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /**
     * Get the innerProperties property: Test Base Package update parameters.
     *
     * @return the innerProperties value.
     */
    private PackageUpdateParameterProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the tags property: The tags of the Package.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags of the Package.
     *
     * @param tags the tags value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    public List<TargetOSInfo> targetOSList() {
        return this.innerProperties() == null ? null : this.innerProperties().targetOSList();
    }

    /**
     * Set the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @param targetOSList the targetOSList value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withTargetOSList(List<TargetOSInfo> targetOSList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageUpdateParameterProperties();
        }
        this.innerProperties().withTargetOSList(targetOSList);
        return this;
    }

    /**
     * Get the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.innerProperties() == null ? null : this.innerProperties().flightingRing();
    }

    /**
     * Set the flightingRing property: The flighting ring for feature update.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withFlightingRing(String flightingRing) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageUpdateParameterProperties();
        }
        this.innerProperties().withFlightingRing(flightingRing);
        return this;
    }

    /**
     * Get the isEnabled property: Specifies whether the package is enabled. It doesn't schedule test for package which
     * is not enabled.
     *
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isEnabled();
    }

    /**
     * Set the isEnabled property: Specifies whether the package is enabled. It doesn't schedule test for package which
     * is not enabled.
     *
     * @param isEnabled the isEnabled value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withIsEnabled(Boolean isEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageUpdateParameterProperties();
        }
        this.innerProperties().withIsEnabled(isEnabled);
        return this;
    }

    /**
     * Get the blobPath property: The file name of the package.
     *
     * @return the blobPath value.
     */
    public String blobPath() {
        return this.innerProperties() == null ? null : this.innerProperties().blobPath();
    }

    /**
     * Set the blobPath property: The file name of the package.
     *
     * @param blobPath the blobPath value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withBlobPath(String blobPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageUpdateParameterProperties();
        }
        this.innerProperties().withBlobPath(blobPath);
        return this;
    }

    /**
     * Get the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    public List<Test> tests() {
        return this.innerProperties() == null ? null : this.innerProperties().tests();
    }

    /**
     * Set the tests property: The detailed test information.
     *
     * @param tests the tests value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withTests(List<Test> tests) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageUpdateParameterProperties();
        }
        this.innerProperties().withTests(tests);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
