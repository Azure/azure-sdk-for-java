// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Parameters supplied to update a Test Base Package. */
@JsonFlatten
@Fluent
public class PackageUpdateParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PackageUpdateParameters.class);

    /*
     * The tags of the Package.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * Specifies the target OSs of specific OS Update types.
     */
    @JsonProperty(value = "properties.targetOSList")
    private List<TargetOSInfo> targetOSList;

    /*
     * The flighting ring for feature update.
     */
    @JsonProperty(value = "properties.flightingRing")
    private String flightingRing;

    /*
     * Specifies whether the package is enabled. It doesn't schedule test for
     * package which is not enabled.
     */
    @JsonProperty(value = "properties.isEnabled")
    private Boolean isEnabled;

    /*
     * The file name of the package.
     */
    @JsonProperty(value = "properties.blobPath")
    private String blobPath;

    /*
     * The detailed test information.
     */
    @JsonProperty(value = "properties.tests")
    private List<Test> tests;

    /**
     * Get the tags property: The tags of the Package.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags of the Package.
     *
     * @param tags the tags value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @return the targetOSList value.
     */
    public List<TargetOSInfo> targetOSList() {
        return this.targetOSList;
    }

    /**
     * Set the targetOSList property: Specifies the target OSs of specific OS Update types.
     *
     * @param targetOSList the targetOSList value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withTargetOSList(List<TargetOSInfo> targetOSList) {
        this.targetOSList = targetOSList;
        return this;
    }

    /**
     * Get the flightingRing property: The flighting ring for feature update.
     *
     * @return the flightingRing value.
     */
    public String flightingRing() {
        return this.flightingRing;
    }

    /**
     * Set the flightingRing property: The flighting ring for feature update.
     *
     * @param flightingRing the flightingRing value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withFlightingRing(String flightingRing) {
        this.flightingRing = flightingRing;
        return this;
    }

    /**
     * Get the isEnabled property: Specifies whether the package is enabled. It doesn't schedule test for package which
     * is not enabled.
     *
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Specifies whether the package is enabled. It doesn't schedule test for package which
     * is not enabled.
     *
     * @param isEnabled the isEnabled value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the blobPath property: The file name of the package.
     *
     * @return the blobPath value.
     */
    public String blobPath() {
        return this.blobPath;
    }

    /**
     * Set the blobPath property: The file name of the package.
     *
     * @param blobPath the blobPath value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withBlobPath(String blobPath) {
        this.blobPath = blobPath;
        return this;
    }

    /**
     * Get the tests property: The detailed test information.
     *
     * @return the tests value.
     */
    public List<Test> tests() {
        return this.tests;
    }

    /**
     * Set the tests property: The detailed test information.
     *
     * @param tests the tests value to set.
     * @return the PackageUpdateParameters object itself.
     */
    public PackageUpdateParameters withTests(List<Test> tests) {
        this.tests = tests;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetOSList() != null) {
            targetOSList().forEach(e -> e.validate());
        }
        if (tests() != null) {
            tests().forEach(e -> e.validate());
        }
    }
}
