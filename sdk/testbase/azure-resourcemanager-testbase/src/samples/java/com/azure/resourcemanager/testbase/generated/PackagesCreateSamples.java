// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.testbase.generated;

import com.azure.resourcemanager.testbase.models.Action;
import com.azure.resourcemanager.testbase.models.Command;
import com.azure.resourcemanager.testbase.models.ContentType;
import com.azure.resourcemanager.testbase.models.TargetOSInfo;
import com.azure.resourcemanager.testbase.models.Test;
import com.azure.resourcemanager.testbase.models.TestType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Packages Create. */
public final class PackagesCreateSamples {
    /*
     * x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2022-04-01-preview/examples/PackageCreate.json
     */
    /**
     * Sample code: PackageCreate.
     *
     * @param manager Entry point to TestBaseManager.
     */
    public static void packageCreate(com.azure.resourcemanager.testbase.TestBaseManager manager) {
        manager
            .packages()
            .define("contoso-package2")
            .withRegion("westus")
            .withExistingTestBaseAccount("contoso-rg1", "contoso-testBaseAccount1")
            .withTags(mapOf())
            .withApplicationName("contoso-package2")
            .withVersion("1.0.0")
            .withTargetOSList(
                Arrays
                    .asList(
                        new TargetOSInfo()
                            .withOsUpdateType("Security updates")
                            .withTargetOSs(Arrays.asList("Windows 10 2004", "Windows 10 1903"))))
            .withFlightingRing("Insider Beta Channel")
            .withBlobPath("storageAccountPath/package.zip")
            .withTests(
                Arrays
                    .asList(
                        new Test()
                            .withTestType(TestType.OUT_OF_BOX_TEST)
                            .withIsActive(true)
                            .withCommands(
                                Arrays
                                    .asList(
                                        new Command()
                                            .withName("Install")
                                            .withAction(Action.INSTALL)
                                            .withContentType(ContentType.PATH)
                                            .withContent("app/scripts/install/job.ps1")
                                            .withRunElevated(true)
                                            .withRestartAfter(true)
                                            .withMaxRunTime(1800)
                                            .withRunAsInteractive(true)
                                            .withAlwaysRun(true)
                                            .withApplyUpdateBefore(false),
                                        new Command()
                                            .withName("Launch")
                                            .withAction(Action.LAUNCH)
                                            .withContentType(ContentType.PATH)
                                            .withContent("app/scripts/launch/job.ps1")
                                            .withRunElevated(true)
                                            .withRestartAfter(false)
                                            .withMaxRunTime(1800)
                                            .withRunAsInteractive(true)
                                            .withAlwaysRun(false)
                                            .withApplyUpdateBefore(true),
                                        new Command()
                                            .withName("Close")
                                            .withAction(Action.CLOSE)
                                            .withContentType(ContentType.PATH)
                                            .withContent("app/scripts/close/job.ps1")
                                            .withRunElevated(true)
                                            .withRestartAfter(false)
                                            .withMaxRunTime(1800)
                                            .withRunAsInteractive(true)
                                            .withAlwaysRun(false)
                                            .withApplyUpdateBefore(false),
                                        new Command()
                                            .withName("Uninstall")
                                            .withAction(Action.UNINSTALL)
                                            .withContentType(ContentType.PATH)
                                            .withContent("app/scripts/uninstall/job.ps1")
                                            .withRunElevated(true)
                                            .withRestartAfter(false)
                                            .withMaxRunTime(1800)
                                            .withRunAsInteractive(true)
                                            .withAlwaysRun(true)
                                            .withApplyUpdateBefore(false)))))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
