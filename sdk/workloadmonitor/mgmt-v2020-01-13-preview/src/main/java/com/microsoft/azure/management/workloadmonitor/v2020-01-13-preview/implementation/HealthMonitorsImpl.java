/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitors;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitor;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitorStateChange;

class HealthMonitorsImpl extends WrapperImpl<HealthMonitorsInner> implements HealthMonitors {
    private final WorkloadMonitorManager manager;

    HealthMonitorsImpl(WorkloadMonitorManager manager) {
        super(manager.inner().healthMonitors());
        this.manager = manager;
    }

    public WorkloadMonitorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<HealthMonitor> listAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName) {
        HealthMonitorsInner client = this.inner();
        return client.listAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName)
        .flatMapIterable(new Func1<Page<HealthMonitorInner>, Iterable<HealthMonitorInner>>() {
            @Override
            public Iterable<HealthMonitorInner> call(Page<HealthMonitorInner> page) {
                return page.items();
            }
        })
        .map(new Func1<HealthMonitorInner, HealthMonitor>() {
            @Override
            public HealthMonitor call(HealthMonitorInner inner) {
                return new HealthMonitorImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HealthMonitor> getAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId) {
        HealthMonitorsInner client = this.inner();
        return client.getAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId)
        .map(new Func1<HealthMonitorInner, HealthMonitor>() {
            @Override
            public HealthMonitor call(HealthMonitorInner inner) {
                return new HealthMonitorImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HealthMonitorStateChange> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId) {
        HealthMonitorsInner client = this.inner();
        return client.listStateChangesAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId)
        .flatMapIterable(new Func1<Page<HealthMonitorStateChangeInner>, Iterable<HealthMonitorStateChangeInner>>() {
            @Override
            public Iterable<HealthMonitorStateChangeInner> call(Page<HealthMonitorStateChangeInner> page) {
                return page.items();
            }
        })
        .map(new Func1<HealthMonitorStateChangeInner, HealthMonitorStateChange>() {
            @Override
            public HealthMonitorStateChange call(HealthMonitorStateChangeInner inner) {
                return new HealthMonitorStateChangeImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HealthMonitorStateChange> getStateChangeAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix) {
        HealthMonitorsInner client = this.inner();
        return client.getStateChangeAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix)
        .map(new Func1<HealthMonitorStateChangeInner, HealthMonitorStateChange>() {
            @Override
            public HealthMonitorStateChange call(HealthMonitorStateChangeInner inner) {
                return new HealthMonitorStateChangeImpl(inner, manager());
            }
        });
    }

}
