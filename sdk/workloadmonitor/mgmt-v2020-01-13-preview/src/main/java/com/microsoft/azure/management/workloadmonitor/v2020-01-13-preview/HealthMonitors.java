/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview;

import rx.Observable;

/**
 * Type representing HealthMonitors.
 */
public interface HealthMonitors {
    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HealthMonitor> listAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName);

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HealthMonitor> getAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId);

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HealthMonitorStateChange> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId);

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HealthMonitorStateChange> getStateChangeAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix);

}
