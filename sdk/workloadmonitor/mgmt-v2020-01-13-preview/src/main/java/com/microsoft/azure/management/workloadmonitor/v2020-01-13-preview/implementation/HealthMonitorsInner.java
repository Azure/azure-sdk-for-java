/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in HealthMonitors.
 */
public class HealthMonitorsInner {
    /** The Retrofit service to perform REST calls. */
    private HealthMonitorsService service;
    /** The service client containing this operation class. */
    private WorkloadMonitorAPIImpl client;

    /**
     * Initializes an instance of HealthMonitorsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public HealthMonitorsInner(Retrofit retrofit, WorkloadMonitorAPIImpl client) {
        this.service = retrofit.create(HealthMonitorsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for HealthMonitors to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HealthMonitorsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitors list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceCollectionName") String resourceCollectionName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitors get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceCollectionName") String resourceCollectionName, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitors listStateChanges" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history")
        Observable<Response<ResponseBody>> listStateChanges(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceCollectionName") String resourceCollectionName, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$expand") String expand, @Query("startTimestampUtc") DateTime startTimestampUtc, @Query("endTimestampUtc") DateTime endTimestampUtc, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitors getStateChange" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history/{timestampUnix}")
        Observable<Response<ResponseBody>> getStateChange(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Path("resourceCollectionName") String resourceCollectionName, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Path("timestampUnix") String timestampUnix, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitors listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitors listStateChangesNext" })
        @GET
        Observable<Response<ResponseBody>> listStateChangesNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HealthMonitorInner&gt; object if successful.
     */
    public PagedList<HealthMonitorInner> list(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName) {
        ServiceResponse<Page<HealthMonitorInner>> response = listSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName).toBlocking().single();
        return new PagedList<HealthMonitorInner>(response.body()) {
            @Override
            public Page<HealthMonitorInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HealthMonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final ListOperationCallback<HealthMonitorInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorInner&gt; object
     */
    public Observable<Page<HealthMonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName)
            .map(new Func1<ServiceResponse<Page<HealthMonitorInner>>, Page<HealthMonitorInner>>() {
                @Override
                public Page<HealthMonitorInner> call(ServiceResponse<Page<HealthMonitorInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorInner&gt; object
     */
    public Observable<ServiceResponse<Page<HealthMonitorInner>>> listWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName) {
        return listSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<HealthMonitorInner>>, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(ServiceResponse<Page<HealthMonitorInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HealthMonitorInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HealthMonitorInner>>> listSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        final String filter = null;
        final String expand = null;
        return service.list(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HealthMonitorInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HealthMonitorInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb.'
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HealthMonitorInner&gt; object if successful.
     */
    public PagedList<HealthMonitorInner> list(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String filter, final String expand) {
        ServiceResponse<Page<HealthMonitorInner>> response = listSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, filter, expand).toBlocking().single();
        return new PagedList<HealthMonitorInner>(response.body()) {
            @Override
            public Page<HealthMonitorInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb.'
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HealthMonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String filter, final String expand, final ListOperationCallback<HealthMonitorInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, filter, expand),
            new Func1<String, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb.'
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorInner&gt; object
     */
    public Observable<Page<HealthMonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String filter, final String expand) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, filter, expand)
            .map(new Func1<ServiceResponse<Page<HealthMonitorInner>>, Page<HealthMonitorInner>>() {
                @Override
                public Page<HealthMonitorInner> call(ServiceResponse<Page<HealthMonitorInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb.'
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorInner&gt; object
     */
    public Observable<ServiceResponse<Page<HealthMonitorInner>>> listWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String filter, final String expand) {
        return listSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, filter, expand)
            .concatMap(new Func1<ServiceResponse<Page<HealthMonitorInner>>, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(ServiceResponse<Page<HealthMonitorInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param subscriptionId The subscription Id of the virtual machine.
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param resourceGroupName The resource group of the virtual machine.
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param resourceName The name of the virtual machine.
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb.'
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HealthMonitorInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HealthMonitorInner>>> listSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String filter, final String expand) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        return service.list(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HealthMonitorInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HealthMonitorInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<HealthMonitorInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<HealthMonitorInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<HealthMonitorInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HealthMonitorInner object if successful.
     */
    public HealthMonitorInner get(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId).toBlocking().single().body();
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HealthMonitorInner> getAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, final ServiceCallback<HealthMonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId), serviceCallback);
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorInner object
     */
    public Observable<HealthMonitorInner> getAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId).map(new Func1<ServiceResponse<HealthMonitorInner>, HealthMonitorInner>() {
            @Override
            public HealthMonitorInner call(ServiceResponse<HealthMonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorInner object
     */
    public Observable<ServiceResponse<HealthMonitorInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        final String expand = null;
        return service.get(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HealthMonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<HealthMonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HealthMonitorInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HealthMonitorInner object if successful.
     */
    public HealthMonitorInner get(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String expand) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, expand).toBlocking().single().body();
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HealthMonitorInner> getAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String expand, final ServiceCallback<HealthMonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, expand), serviceCallback);
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorInner object
     */
    public Observable<HealthMonitorInner> getAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String expand) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, expand).map(new Func1<ServiceResponse<HealthMonitorInner>, HealthMonitorInner>() {
            @Override
            public HealthMonitorInner call(ServiceResponse<HealthMonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorInner object
     */
    public Observable<ServiceResponse<HealthMonitorInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String expand) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        return service.get(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HealthMonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<HealthMonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HealthMonitorInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<HealthMonitorInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<HealthMonitorInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<HealthMonitorInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HealthMonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<HealthMonitorStateChangeInner> listStateChanges(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId) {
        ServiceResponse<Page<HealthMonitorStateChangeInner>> response = listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId).toBlocking().single();
        return new PagedList<HealthMonitorStateChangeInner>(response.body()) {
            @Override
            public Page<HealthMonitorStateChangeInner> nextPage(String nextPageLink) {
                return listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HealthMonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId, final ListOperationCallback<HealthMonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId),
            new Func1<String, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(String nextPageLink) {
                    return listStateChangesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorStateChangeInner&gt; object
     */
    public Observable<Page<HealthMonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId) {
        return listStateChangesWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId)
            .map(new Func1<ServiceResponse<Page<HealthMonitorStateChangeInner>>, Page<HealthMonitorStateChangeInner>>() {
                @Override
                public Page<HealthMonitorStateChangeInner> call(ServiceResponse<Page<HealthMonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> listStateChangesWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId) {
        return listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId)
            .concatMap(new Func1<ServiceResponse<Page<HealthMonitorStateChangeInner>>, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(ServiceResponse<Page<HealthMonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStateChangesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HealthMonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> listStateChangesSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        final String filter = null;
        final String expand = null;
        final DateTime startTimestampUtc = null;
        final DateTime endTimestampUtc = null;
        return service.listStateChanges(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, this.client.apiVersion(), filter, expand, startTimestampUtc, endTimestampUtc, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> result = listStateChangesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HealthMonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HealthMonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<HealthMonitorStateChangeInner> listStateChanges(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        ServiceResponse<Page<HealthMonitorStateChangeInner>> response = listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc).toBlocking().single();
        return new PagedList<HealthMonitorStateChangeInner>(response.body()) {
            @Override
            public Page<HealthMonitorStateChangeInner> nextPage(String nextPageLink) {
                return listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HealthMonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc, final ListOperationCallback<HealthMonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc),
            new Func1<String, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(String nextPageLink) {
                    return listStateChangesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorStateChangeInner&gt; object
     */
    public Observable<Page<HealthMonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        return listStateChangesWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc)
            .map(new Func1<ServiceResponse<Page<HealthMonitorStateChangeInner>>, Page<HealthMonitorStateChangeInner>>() {
                @Override
                public Page<HealthMonitorStateChangeInner> call(ServiceResponse<Page<HealthMonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> listStateChangesWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        return listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc)
            .concatMap(new Func1<ServiceResponse<Page<HealthMonitorStateChangeInner>>, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(ServiceResponse<Page<HealthMonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStateChangesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param subscriptionId The subscription Id of the virtual machine.
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param resourceGroupName The resource group of the virtual machine.
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param resourceName The name of the virtual machine.
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param monitorId The monitor Id of the virtual machine.
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param startTimestampUtc The start of the time window.
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param endTimestampUtc The end of the time window.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HealthMonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> listStateChangesSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String providerName, final String resourceCollectionName, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        return service.listStateChanges(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, this.client.apiVersion(), filter, expand, startTimestampUtc, endTimestampUtc, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> result = listStateChangesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HealthMonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> listStateChangesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<HealthMonitorStateChangeInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<HealthMonitorStateChangeInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HealthMonitorStateChangeInner object if successful.
     */
    public HealthMonitorStateChangeInner getStateChange(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix).toBlocking().single().body();
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HealthMonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix, final ServiceCallback<HealthMonitorStateChangeInner> serviceCallback) {
        return ServiceFuture.fromResponse(getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix), serviceCallback);
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorStateChangeInner object
     */
    public Observable<HealthMonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix).map(new Func1<ServiceResponse<HealthMonitorStateChangeInner>, HealthMonitorStateChangeInner>() {
            @Override
            public HealthMonitorStateChangeInner call(ServiceResponse<HealthMonitorStateChangeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorStateChangeInner object
     */
    public Observable<ServiceResponse<HealthMonitorStateChangeInner>> getStateChangeWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        if (timestampUnix == null) {
            throw new IllegalArgumentException("Parameter timestampUnix is required and cannot be null.");
        }
        final String expand = null;
        return service.getStateChange(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HealthMonitorStateChangeInner>>>() {
                @Override
                public Observable<ServiceResponse<HealthMonitorStateChangeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HealthMonitorStateChangeInner> clientResponse = getStateChangeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HealthMonitorStateChangeInner object if successful.
     */
    public HealthMonitorStateChangeInner getStateChange(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix, String expand) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix, expand).toBlocking().single().body();
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HealthMonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix, String expand, final ServiceCallback<HealthMonitorStateChangeInner> serviceCallback) {
        return ServiceFuture.fromResponse(getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix, expand), serviceCallback);
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorStateChangeInner object
     */
    public Observable<HealthMonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix, String expand) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix, expand).map(new Func1<ServiceResponse<HealthMonitorStateChangeInner>, HealthMonitorStateChangeInner>() {
            @Override
            public HealthMonitorStateChangeInner call(ServiceResponse<HealthMonitorStateChangeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthMonitorStateChangeInner object
     */
    public Observable<ServiceResponse<HealthMonitorStateChangeInner>> getStateChangeWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String providerName, String resourceCollectionName, String resourceName, String monitorId, String timestampUnix, String expand) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (resourceCollectionName == null) {
            throw new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        if (timestampUnix == null) {
            throw new IllegalArgumentException("Parameter timestampUnix is required and cannot be null.");
        }
        return service.getStateChange(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HealthMonitorStateChangeInner>>>() {
                @Override
                public Observable<ServiceResponse<HealthMonitorStateChangeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HealthMonitorStateChangeInner> clientResponse = getStateChangeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<HealthMonitorStateChangeInner> getStateChangeDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<HealthMonitorStateChangeInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<HealthMonitorStateChangeInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HealthMonitorInner&gt; object if successful.
     */
    public PagedList<HealthMonitorInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<HealthMonitorInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<HealthMonitorInner>(response.body()) {
            @Override
            public Page<HealthMonitorInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HealthMonitorInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<HealthMonitorInner>> serviceFuture, final ListOperationCallback<HealthMonitorInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorInner&gt; object
     */
    public Observable<Page<HealthMonitorInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<HealthMonitorInner>>, Page<HealthMonitorInner>>() {
                @Override
                public Page<HealthMonitorInner> call(ServiceResponse<Page<HealthMonitorInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorInner&gt; object
     */
    public Observable<ServiceResponse<Page<HealthMonitorInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<HealthMonitorInner>>, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(ServiceResponse<Page<HealthMonitorInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by monitor name).
     *
    ServiceResponse<PageImpl<HealthMonitorInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HealthMonitorInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HealthMonitorInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HealthMonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HealthMonitorInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HealthMonitorInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<HealthMonitorInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<HealthMonitorInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<HealthMonitorInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;HealthMonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<HealthMonitorStateChangeInner> listStateChangesNext(final String nextPageLink) {
        ServiceResponse<Page<HealthMonitorStateChangeInner>> response = listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<HealthMonitorStateChangeInner>(response.body()) {
            @Override
            public Page<HealthMonitorStateChangeInner> nextPage(String nextPageLink) {
                return listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HealthMonitorStateChangeInner>> listStateChangesNextAsync(final String nextPageLink, final ServiceFuture<List<HealthMonitorStateChangeInner>> serviceFuture, final ListOperationCallback<HealthMonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStateChangesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(String nextPageLink) {
                    return listStateChangesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorStateChangeInner&gt; object
     */
    public Observable<Page<HealthMonitorStateChangeInner>> listStateChangesNextAsync(final String nextPageLink) {
        return listStateChangesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<HealthMonitorStateChangeInner>>, Page<HealthMonitorStateChangeInner>>() {
                @Override
                public Page<HealthMonitorStateChangeInner> call(ServiceResponse<Page<HealthMonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;HealthMonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> listStateChangesNextWithServiceResponseAsync(final String nextPageLink) {
        return listStateChangesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<HealthMonitorStateChangeInner>>, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(ServiceResponse<Page<HealthMonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStateChangesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter (filter by heartbeat condition).
     *
    ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;HealthMonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> listStateChangesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listStateChangesNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<HealthMonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> result = listStateChangesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<HealthMonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<HealthMonitorStateChangeInner>> listStateChangesNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<HealthMonitorStateChangeInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<HealthMonitorStateChangeInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
