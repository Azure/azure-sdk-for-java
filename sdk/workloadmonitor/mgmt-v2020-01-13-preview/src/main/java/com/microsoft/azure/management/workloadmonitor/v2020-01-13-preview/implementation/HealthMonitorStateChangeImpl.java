/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthMonitorStateChange;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthState;

class HealthMonitorStateChangeImpl extends WrapperImpl<HealthMonitorStateChangeInner> implements HealthMonitorStateChange {
    private final WorkloadMonitorManager manager;
    HealthMonitorStateChangeImpl(HealthMonitorStateChangeInner inner, WorkloadMonitorManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public WorkloadMonitorManager manager() {
        return this.manager;
    }

    @Override
    public HealthState currentMonitorState() {
        return this.inner().currentMonitorState();
    }

    @Override
    public String currentStateFirstObservedTimestamp() {
        return this.inner().currentStateFirstObservedTimestamp();
    }

    @Override
    public String evaluationTimestamp() {
        return this.inner().evaluationTimestamp();
    }

    @Override
    public Object evidence() {
        return this.inner().evidence();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Object monitorConfiguration() {
        return this.inner().monitorConfiguration();
    }

    @Override
    public String monitoredObject() {
        return this.inner().monitoredObject();
    }

    @Override
    public String monitorName() {
        return this.inner().monitorName();
    }

    @Override
    public String monitorType() {
        return this.inner().monitorType();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public HealthState previousMonitorState() {
        return this.inner().previousMonitorState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
