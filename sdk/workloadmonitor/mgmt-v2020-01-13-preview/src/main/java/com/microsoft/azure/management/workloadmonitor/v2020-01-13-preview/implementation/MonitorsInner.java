/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.DefaultErrorException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Monitors.
 */
public class MonitorsInner {
    /** The Retrofit service to perform REST calls. */
    private MonitorsService service;
    /** The service client containing this operation class. */
    private WorkloadMonitorAPIImpl client;

    /**
     * Initializes an instance of MonitorsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MonitorsInner(Retrofit retrofit, WorkloadMonitorAPIImpl client) {
        this.service = retrofit.create(MonitorsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Monitors to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MonitorsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitors list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitors get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitors listStateChanges" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history")
        Observable<Response<ResponseBody>> listStateChanges(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$expand") String expand, @Query("startTimestampUtc") DateTime startTimestampUtc, @Query("endTimestampUtc") DateTime endTimestampUtc, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitors getStateChange" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history/{timestampUnix}")
        Observable<Response<ResponseBody>> getStateChange(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Path("timestampUnix") String timestampUnix, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitors listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitors listStateChangesNext" })
        @GET
        Observable<Response<ResponseBody>> listStateChangesNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorInner&gt; object if successful.
     */
    public PagedList<MonitorInner> list(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        ServiceResponse<Page<MonitorInner>> response = listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName).toBlocking().single();
        return new PagedList<MonitorInner>(response.body()) {
            @Override
            public Page<MonitorInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final ListOperationCallback<MonitorInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorInner&gt; object
     */
    public Observable<Page<MonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName)
            .map(new Func1<ServiceResponse<Page<MonitorInner>>, Page<MonitorInner>>() {
                @Override
                public Page<MonitorInner> call(ServiceResponse<Page<MonitorInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorInner>>> listWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        return listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<MonitorInner>>, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(ServiceResponse<Page<MonitorInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorInner>>> listSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        final String filter = null;
        final String expand = null;
        return service.list(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorInner&gt; object if successful.
     */
    public PagedList<MonitorInner> list(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String filter, final String expand) {
        ServiceResponse<Page<MonitorInner>> response = listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, filter, expand).toBlocking().single();
        return new PagedList<MonitorInner>(response.body()) {
            @Override
            public Page<MonitorInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String filter, final String expand, final ListOperationCallback<MonitorInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, filter, expand),
            new Func1<String, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorInner&gt; object
     */
    public Observable<Page<MonitorInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String filter, final String expand) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, filter, expand)
            .map(new Func1<ServiceResponse<Page<MonitorInner>>, Page<MonitorInner>>() {
                @Override
                public Page<MonitorInner> call(ServiceResponse<Page<MonitorInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorInner>>> listWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String filter, final String expand) {
        return listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, filter, expand)
            .concatMap(new Func1<ServiceResponse<Page<MonitorInner>>, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(ServiceResponse<Page<MonitorInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
    ServiceResponse<PageImpl<MonitorInner>> * @param subscriptionId The subscriptionId of the resource
    ServiceResponse<PageImpl<MonitorInner>> * @param resourceGroupName The resourceGroupName of the resource
    ServiceResponse<PageImpl<MonitorInner>> * @param resourceNamespace The resourceNamespace of the resource
    ServiceResponse<PageImpl<MonitorInner>> * @param resourceType The resourceType of the resource
    ServiceResponse<PageImpl<MonitorInner>> * @param resourceName The resourceType of the resource
    ServiceResponse<PageImpl<MonitorInner>> * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
    ServiceResponse<PageImpl<MonitorInner>> * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorInner>>> listSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String filter, final String expand) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        return service.list(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MonitorInner>> listDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MonitorInner>, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MonitorInner>>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MonitorInner object if successful.
     */
    public MonitorInner get(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId).toBlocking().single().body();
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, final ServiceCallback<MonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId), serviceCallback);
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId).map(new Func1<ServiceResponse<MonitorInner>, MonitorInner>() {
            @Override
            public MonitorInner call(ServiceResponse<MonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<ServiceResponse<MonitorInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        final String expand = null;
        return service.get(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<MonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MonitorInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MonitorInner object if successful.
     */
    public MonitorInner get(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, expand).toBlocking().single().body();
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand, final ServiceCallback<MonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, expand), serviceCallback);
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, expand).map(new Func1<ServiceResponse<MonitorInner>, MonitorInner>() {
            @Override
            public MonitorInner call(ServiceResponse<MonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<ServiceResponse<MonitorInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        return service.get(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<MonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MonitorInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MonitorInner> getDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MonitorInner, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MonitorInner>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<MonitorStateChangeInner> listStateChanges(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        ServiceResponse<Page<MonitorStateChangeInner>> response = listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId).toBlocking().single();
        return new PagedList<MonitorStateChangeInner>(response.body()) {
            @Override
            public Page<MonitorStateChangeInner> nextPage(String nextPageLink) {
                return listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final ListOperationCallback<MonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId),
            new Func1<String, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(String nextPageLink) {
                    return listStateChangesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<Page<MonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        return listStateChangesWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId)
            .map(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Page<MonitorStateChangeInner>>() {
                @Override
                public Page<MonitorStateChangeInner> call(ServiceResponse<Page<MonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listStateChangesWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        return listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId)
            .concatMap(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(ServiceResponse<Page<MonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStateChangesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listStateChangesSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        final String filter = null;
        final String expand = null;
        final DateTime startTimestampUtc = null;
        final DateTime endTimestampUtc = null;
        return service.listStateChanges(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), filter, expand, startTimestampUtc, endTimestampUtc, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorStateChangeInner>> result = listStateChangesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<MonitorStateChangeInner> listStateChanges(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        ServiceResponse<Page<MonitorStateChangeInner>> response = listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc).toBlocking().single();
        return new PagedList<MonitorStateChangeInner>(response.body()) {
            @Override
            public Page<MonitorStateChangeInner> nextPage(String nextPageLink) {
                return listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc, final ListOperationCallback<MonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc),
            new Func1<String, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(String nextPageLink) {
                    return listStateChangesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<Page<MonitorStateChangeInner>> listStateChangesAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        return listStateChangesWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc)
            .map(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Page<MonitorStateChangeInner>>() {
                @Override
                public Page<MonitorStateChangeInner> call(ServiceResponse<Page<MonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listStateChangesWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        return listStateChangesSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc)
            .concatMap(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(ServiceResponse<Page<MonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStateChangesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param subscriptionId The subscriptionId of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceGroupName The resourceGroupName of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceNamespace The resourceNamespace of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceType The resourceType of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceName The resourceType of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param monitorId The monitorId of the resource (url encoded)
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param expand ex: $expand=evidence,configuration
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param startTimestampUtc The start Timestamp for the desired history
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listStateChangesSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        return service.listStateChanges(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), filter, expand, startTimestampUtc, endTimestampUtc, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorStateChangeInner>> result = listStateChangesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MonitorStateChangeInner>> listStateChangesDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MonitorStateChangeInner>, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MonitorStateChangeInner>>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MonitorStateChangeInner object if successful.
     */
    public MonitorStateChangeInner getStateChange(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix).toBlocking().single().body();
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix, final ServiceCallback<MonitorStateChangeInner> serviceCallback) {
        return ServiceFuture.fromResponse(getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix), serviceCallback);
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorStateChangeInner object
     */
    public Observable<MonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix).map(new Func1<ServiceResponse<MonitorStateChangeInner>, MonitorStateChangeInner>() {
            @Override
            public MonitorStateChangeInner call(ServiceResponse<MonitorStateChangeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorStateChangeInner object
     */
    public Observable<ServiceResponse<MonitorStateChangeInner>> getStateChangeWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        if (timestampUnix == null) {
            throw new IllegalArgumentException("Parameter timestampUnix is required and cannot be null.");
        }
        final String expand = null;
        return service.getStateChange(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MonitorStateChangeInner>>>() {
                @Override
                public Observable<ServiceResponse<MonitorStateChangeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MonitorStateChangeInner> clientResponse = getStateChangeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MonitorStateChangeInner object if successful.
     */
    public MonitorStateChangeInner getStateChange(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix, String expand) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix, expand).toBlocking().single().body();
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @param expand ex: $expand=evidence,configuration
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix, String expand, final ServiceCallback<MonitorStateChangeInner> serviceCallback) {
        return ServiceFuture.fromResponse(getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix, expand), serviceCallback);
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorStateChangeInner object
     */
    public Observable<MonitorStateChangeInner> getStateChangeAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix, String expand) {
        return getStateChangeWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix, expand).map(new Func1<ServiceResponse<MonitorStateChangeInner>, MonitorStateChangeInner>() {
            @Override
            public MonitorStateChangeInner call(ServiceResponse<MonitorStateChangeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the status of a monitor at a specific timestamp in history.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param timestampUnix The timestamp of the state change (Unix format)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorStateChangeInner object
     */
    public Observable<ServiceResponse<MonitorStateChangeInner>> getStateChangeWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String timestampUnix, String expand) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        if (timestampUnix == null) {
            throw new IllegalArgumentException("Parameter timestampUnix is required and cannot be null.");
        }
        return service.getStateChange(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MonitorStateChangeInner>>>() {
                @Override
                public Observable<ServiceResponse<MonitorStateChangeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MonitorStateChangeInner> clientResponse = getStateChangeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MonitorStateChangeInner> getStateChangeDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MonitorStateChangeInner, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MonitorStateChangeInner>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorInner&gt; object if successful.
     */
    public PagedList<MonitorInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<MonitorInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MonitorInner>(response.body()) {
            @Override
            public Page<MonitorInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<MonitorInner>> serviceFuture, final ListOperationCallback<MonitorInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorInner&gt; object
     */
    public Observable<Page<MonitorInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MonitorInner>>, Page<MonitorInner>>() {
                @Override
                public Page<MonitorInner> call(ServiceResponse<Page<MonitorInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MonitorInner>>, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(ServiceResponse<Page<MonitorInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get list of a monitors of a resource (with optional filter).
     *
    ServiceResponse<PageImpl<MonitorInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MonitorInner>> listNextDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MonitorInner>, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MonitorInner>>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<MonitorStateChangeInner> listStateChangesNext(final String nextPageLink) {
        ServiceResponse<Page<MonitorStateChangeInner>> response = listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MonitorStateChangeInner>(response.body()) {
            @Override
            public Page<MonitorStateChangeInner> nextPage(String nextPageLink) {
                return listStateChangesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorStateChangeInner>> listStateChangesNextAsync(final String nextPageLink, final ServiceFuture<List<MonitorStateChangeInner>> serviceFuture, final ListOperationCallback<MonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStateChangesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(String nextPageLink) {
                    return listStateChangesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<Page<MonitorStateChangeInner>> listStateChangesNextAsync(final String nextPageLink) {
        return listStateChangesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Page<MonitorStateChangeInner>>() {
                @Override
                public Page<MonitorStateChangeInner> call(ServiceResponse<Page<MonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listStateChangesNextWithServiceResponseAsync(final String nextPageLink) {
        return listStateChangesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(ServiceResponse<Page<MonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStateChangesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listStateChangesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listStateChangesNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorStateChangeInner>> result = listStateChangesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MonitorStateChangeInner>> listStateChangesNextDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MonitorStateChangeInner>, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MonitorStateChangeInner>>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

}
