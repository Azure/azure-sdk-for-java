/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Monitor Status.
 * Information about a monitor.
 */
@JsonFlatten
public class MonitorInner extends ProxyResource {
    /**
     * Monitor Name.
     * Human-readable name of this monitor.
     */
    @JsonProperty(value = "properties.monitorName")
    private String monitorName;

    /**
     * Monitor Type.
     * Type of this monitor.
     */
    @JsonProperty(value = "properties.monitorType")
    private String monitorType;

    /**
     * Monitored Object.
     * Dynamic monitored object of this monitor.
     */
    @JsonProperty(value = "properties.monitoredObject")
    private String monitoredObject;

    /**
     * Parent Monitor Name.
     * Name of this monitor's parent.
     */
    @JsonProperty(value = "properties.parentMonitorName")
    private String parentMonitorName;

    /**
     * Health State.
     * Current health state of this monitor. Possible values include:
     * 'Healthy', 'Critical', 'Warning', 'Unknown'.
     */
    @JsonProperty(value = "properties.previousMonitorState")
    private HealthState previousMonitorState;

    /**
     * Health State.
     * Current health state of this monitor. Possible values include:
     * 'Healthy', 'Critical', 'Warning', 'Unknown'.
     */
    @JsonProperty(value = "properties.currentMonitorState")
    private HealthState currentMonitorState;

    /**
     * Last Evaluated.
     * Timestamp that this monitor was last evaluated.
     */
    @JsonProperty(value = "properties.evaluationTimestamp")
    private String evaluationTimestamp;

    /**
     * Last State Change.
     * Timestamp of this monitor's last state change.
     */
    @JsonProperty(value = "properties.currentStateFirstObservedTimestamp")
    private String currentStateFirstObservedTimestamp;

    /**
     * Last Reported.
     * Timestamp of this monitor's last reported state.
     */
    @JsonProperty(value = "properties.lastReportedTimestamp")
    private String lastReportedTimestamp;

    /**
     * Evidence.
     * Evidence of this monitor's last state change.
     */
    @JsonProperty(value = "properties.evidence")
    private Object evidence;

    /**
     * Configuration.
     * Configuration settings at the time of this monitor's last state change.
     */
    @JsonProperty(value = "properties.monitorConfiguration")
    private Object monitorConfiguration;

    /**
     * Get human-readable name of this monitor.
     *
     * @return the monitorName value
     */
    public String monitorName() {
        return this.monitorName;
    }

    /**
     * Set human-readable name of this monitor.
     *
     * @param monitorName the monitorName value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withMonitorName(String monitorName) {
        this.monitorName = monitorName;
        return this;
    }

    /**
     * Get type of this monitor.
     *
     * @return the monitorType value
     */
    public String monitorType() {
        return this.monitorType;
    }

    /**
     * Set type of this monitor.
     *
     * @param monitorType the monitorType value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withMonitorType(String monitorType) {
        this.monitorType = monitorType;
        return this;
    }

    /**
     * Get dynamic monitored object of this monitor.
     *
     * @return the monitoredObject value
     */
    public String monitoredObject() {
        return this.monitoredObject;
    }

    /**
     * Set dynamic monitored object of this monitor.
     *
     * @param monitoredObject the monitoredObject value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withMonitoredObject(String monitoredObject) {
        this.monitoredObject = monitoredObject;
        return this;
    }

    /**
     * Get name of this monitor's parent.
     *
     * @return the parentMonitorName value
     */
    public String parentMonitorName() {
        return this.parentMonitorName;
    }

    /**
     * Set name of this monitor's parent.
     *
     * @param parentMonitorName the parentMonitorName value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withParentMonitorName(String parentMonitorName) {
        this.parentMonitorName = parentMonitorName;
        return this;
    }

    /**
     * Get current health state of this monitor. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @return the previousMonitorState value
     */
    public HealthState previousMonitorState() {
        return this.previousMonitorState;
    }

    /**
     * Set current health state of this monitor. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @param previousMonitorState the previousMonitorState value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withPreviousMonitorState(HealthState previousMonitorState) {
        this.previousMonitorState = previousMonitorState;
        return this;
    }

    /**
     * Get current health state of this monitor. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @return the currentMonitorState value
     */
    public HealthState currentMonitorState() {
        return this.currentMonitorState;
    }

    /**
     * Set current health state of this monitor. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @param currentMonitorState the currentMonitorState value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withCurrentMonitorState(HealthState currentMonitorState) {
        this.currentMonitorState = currentMonitorState;
        return this;
    }

    /**
     * Get timestamp that this monitor was last evaluated.
     *
     * @return the evaluationTimestamp value
     */
    public String evaluationTimestamp() {
        return this.evaluationTimestamp;
    }

    /**
     * Set timestamp that this monitor was last evaluated.
     *
     * @param evaluationTimestamp the evaluationTimestamp value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withEvaluationTimestamp(String evaluationTimestamp) {
        this.evaluationTimestamp = evaluationTimestamp;
        return this;
    }

    /**
     * Get timestamp of this monitor's last state change.
     *
     * @return the currentStateFirstObservedTimestamp value
     */
    public String currentStateFirstObservedTimestamp() {
        return this.currentStateFirstObservedTimestamp;
    }

    /**
     * Set timestamp of this monitor's last state change.
     *
     * @param currentStateFirstObservedTimestamp the currentStateFirstObservedTimestamp value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withCurrentStateFirstObservedTimestamp(String currentStateFirstObservedTimestamp) {
        this.currentStateFirstObservedTimestamp = currentStateFirstObservedTimestamp;
        return this;
    }

    /**
     * Get timestamp of this monitor's last reported state.
     *
     * @return the lastReportedTimestamp value
     */
    public String lastReportedTimestamp() {
        return this.lastReportedTimestamp;
    }

    /**
     * Set timestamp of this monitor's last reported state.
     *
     * @param lastReportedTimestamp the lastReportedTimestamp value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withLastReportedTimestamp(String lastReportedTimestamp) {
        this.lastReportedTimestamp = lastReportedTimestamp;
        return this;
    }

    /**
     * Get evidence of this monitor's last state change.
     *
     * @return the evidence value
     */
    public Object evidence() {
        return this.evidence;
    }

    /**
     * Set evidence of this monitor's last state change.
     *
     * @param evidence the evidence value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withEvidence(Object evidence) {
        this.evidence = evidence;
        return this;
    }

    /**
     * Get configuration settings at the time of this monitor's last state change.
     *
     * @return the monitorConfiguration value
     */
    public Object monitorConfiguration() {
        return this.monitorConfiguration;
    }

    /**
     * Set configuration settings at the time of this monitor's last state change.
     *
     * @param monitorConfiguration the monitorConfiguration value to set
     * @return the MonitorInner object itself.
     */
    public MonitorInner withMonitorConfiguration(Object monitorConfiguration) {
        this.monitorConfiguration = monitorConfiguration;
        return this;
    }

}
