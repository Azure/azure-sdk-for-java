/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Components.
 */
public class ComponentsInner {
    /** The Retrofit service to perform REST calls. */
    private ComponentsService service;
    /** The service client containing this operation class. */
    private WorkloadMonitorAPIImpl client;

    /**
     * Initializes an instance of ComponentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ComponentsInner(Retrofit retrofit, WorkloadMonitorAPIImpl client) {
        this.service = retrofit.create(ComponentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Components to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ComponentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.Components listByResource" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/components")
        Observable<Response<ResponseBody>> listByResource(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Query("$select") String select, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$orderby") String orderby, @Query("$expand") String expand, @Query("$top") String top, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.Components get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/components/{componentId}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("componentId") UUID componentId, @Query("api-version") String apiVersion, @Query("$select") String select, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.Components listByResourceNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ComponentInner&gt; object if successful.
     */
    public PagedList<ComponentInner> listByResource(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        ServiceResponse<Page<ComponentInner>> response = listByResourceSinglePageAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).toBlocking().single();
        return new PagedList<ComponentInner>(response.body()) {
            @Override
            public Page<ComponentInner> nextPage(String nextPageLink) {
                return listByResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ComponentInner>> listByResourceAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final ListOperationCallback<ComponentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceSinglePageAsync(resourceGroupName, resourceNamespace, resourceType, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(String nextPageLink) {
                    return listByResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComponentInner&gt; object
     */
    public Observable<Page<ComponentInner>> listByResourceAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        return listByResourceWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName)
            .map(new Func1<ServiceResponse<Page<ComponentInner>>, Page<ComponentInner>>() {
                @Override
                public Page<ComponentInner> call(ServiceResponse<Page<ComponentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComponentInner&gt; object
     */
    public Observable<ServiceResponse<Page<ComponentInner>>> listByResourceWithServiceResponseAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        return listByResourceSinglePageAsync(resourceGroupName, resourceNamespace, resourceType, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<ComponentInner>>, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(ServiceResponse<Page<ComponentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ComponentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ComponentInner>>> listByResourceSinglePageAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        final String select = null;
        final String filter = null;
        final String apply = null;
        final String orderby = null;
        final String expand = null;
        final String top = null;
        final String skiptoken = null;
        return service.listByResource(this.client.subscriptionId(), resourceGroupName, resourceNamespace, resourceType, resourceName, this.client.apiVersion(), select, filter, apply, orderby, expand, top, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ComponentInner>> result = listByResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ComponentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param select Properties to be returned in the response.
     * @param filter Filter to be applied on the operation.
     * @param apply Apply aggregation.
     * @param orderby Sort the result on one or more properties.
     * @param expand Include properties inline in the response.
     * @param top Limit the result to the specified number of rows.
     * @param skiptoken The page-continuation token to use with a paged version of this API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ComponentInner&gt; object if successful.
     */
    public PagedList<ComponentInner> listByResource(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String select, final String filter, final String apply, final String orderby, final String expand, final String top, final String skiptoken) {
        ServiceResponse<Page<ComponentInner>> response = listByResourceSinglePageAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, select, filter, apply, orderby, expand, top, skiptoken).toBlocking().single();
        return new PagedList<ComponentInner>(response.body()) {
            @Override
            public Page<ComponentInner> nextPage(String nextPageLink) {
                return listByResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param select Properties to be returned in the response.
     * @param filter Filter to be applied on the operation.
     * @param apply Apply aggregation.
     * @param orderby Sort the result on one or more properties.
     * @param expand Include properties inline in the response.
     * @param top Limit the result to the specified number of rows.
     * @param skiptoken The page-continuation token to use with a paged version of this API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ComponentInner>> listByResourceAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String select, final String filter, final String apply, final String orderby, final String expand, final String top, final String skiptoken, final ListOperationCallback<ComponentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceSinglePageAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, select, filter, apply, orderby, expand, top, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(String nextPageLink) {
                    return listByResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param select Properties to be returned in the response.
     * @param filter Filter to be applied on the operation.
     * @param apply Apply aggregation.
     * @param orderby Sort the result on one or more properties.
     * @param expand Include properties inline in the response.
     * @param top Limit the result to the specified number of rows.
     * @param skiptoken The page-continuation token to use with a paged version of this API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComponentInner&gt; object
     */
    public Observable<Page<ComponentInner>> listByResourceAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String select, final String filter, final String apply, final String orderby, final String expand, final String top, final String skiptoken) {
        return listByResourceWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, select, filter, apply, orderby, expand, top, skiptoken)
            .map(new Func1<ServiceResponse<Page<ComponentInner>>, Page<ComponentInner>>() {
                @Override
                public Page<ComponentInner> call(ServiceResponse<Page<ComponentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get list of components for a resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param select Properties to be returned in the response.
     * @param filter Filter to be applied on the operation.
     * @param apply Apply aggregation.
     * @param orderby Sort the result on one or more properties.
     * @param expand Include properties inline in the response.
     * @param top Limit the result to the specified number of rows.
     * @param skiptoken The page-continuation token to use with a paged version of this API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComponentInner&gt; object
     */
    public Observable<ServiceResponse<Page<ComponentInner>>> listByResourceWithServiceResponseAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String select, final String filter, final String apply, final String orderby, final String expand, final String top, final String skiptoken) {
        return listByResourceSinglePageAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, select, filter, apply, orderby, expand, top, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<ComponentInner>>, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(ServiceResponse<Page<ComponentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get list of components for a resource.
     *
    ServiceResponse<PageImpl<ComponentInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<ComponentInner>> * @param resourceNamespace The Namespace of the resource.
    ServiceResponse<PageImpl<ComponentInner>> * @param resourceType The type of the resource.
    ServiceResponse<PageImpl<ComponentInner>> * @param resourceName Name of the resource.
    ServiceResponse<PageImpl<ComponentInner>> * @param select Properties to be returned in the response.
    ServiceResponse<PageImpl<ComponentInner>> * @param filter Filter to be applied on the operation.
    ServiceResponse<PageImpl<ComponentInner>> * @param apply Apply aggregation.
    ServiceResponse<PageImpl<ComponentInner>> * @param orderby Sort the result on one or more properties.
    ServiceResponse<PageImpl<ComponentInner>> * @param expand Include properties inline in the response.
    ServiceResponse<PageImpl<ComponentInner>> * @param top Limit the result to the specified number of rows.
    ServiceResponse<PageImpl<ComponentInner>> * @param skiptoken The page-continuation token to use with a paged version of this API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ComponentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ComponentInner>>> listByResourceSinglePageAsync(final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String select, final String filter, final String apply, final String orderby, final String expand, final String top, final String skiptoken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        return service.listByResource(this.client.subscriptionId(), resourceGroupName, resourceNamespace, resourceType, resourceName, this.client.apiVersion(), select, filter, apply, orderby, expand, top, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ComponentInner>> result = listByResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ComponentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ComponentInner>> listByResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ComponentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ComponentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComponentInner object if successful.
     */
    public ComponentInner get(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId) {
        return getWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, componentId).toBlocking().single().body();
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComponentInner> getAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId, final ServiceCallback<ComponentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, componentId), serviceCallback);
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComponentInner object
     */
    public Observable<ComponentInner> getAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId) {
        return getWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, componentId).map(new Func1<ServiceResponse<ComponentInner>, ComponentInner>() {
            @Override
            public ComponentInner call(ServiceResponse<ComponentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComponentInner object
     */
    public Observable<ServiceResponse<ComponentInner>> getWithServiceResponseAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (componentId == null) {
            throw new IllegalArgumentException("Parameter componentId is required and cannot be null.");
        }
        final String select = null;
        final String expand = null;
        return service.get(this.client.subscriptionId(), resourceGroupName, resourceNamespace, resourceType, resourceName, componentId, this.client.apiVersion(), select, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ComponentInner>>>() {
                @Override
                public Observable<ServiceResponse<ComponentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ComponentInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @param select Properties to be returned in the response.
     * @param expand Include properties inline in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComponentInner object if successful.
     */
    public ComponentInner get(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId, String select, String expand) {
        return getWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, componentId, select, expand).toBlocking().single().body();
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @param select Properties to be returned in the response.
     * @param expand Include properties inline in the response.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComponentInner> getAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId, String select, String expand, final ServiceCallback<ComponentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, componentId, select, expand), serviceCallback);
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @param select Properties to be returned in the response.
     * @param expand Include properties inline in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComponentInner object
     */
    public Observable<ComponentInner> getAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId, String select, String expand) {
        return getWithServiceResponseAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, componentId, select, expand).map(new Func1<ServiceResponse<ComponentInner>, ComponentInner>() {
            @Override
            public ComponentInner call(ServiceResponse<ComponentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get details of a component.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceNamespace The Namespace of the resource.
     * @param resourceType The type of the resource.
     * @param resourceName Name of the resource.
     * @param componentId Component Id.
     * @param select Properties to be returned in the response.
     * @param expand Include properties inline in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComponentInner object
     */
    public Observable<ServiceResponse<ComponentInner>> getWithServiceResponseAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, UUID componentId, String select, String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (componentId == null) {
            throw new IllegalArgumentException("Parameter componentId is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, resourceNamespace, resourceType, resourceName, componentId, this.client.apiVersion(), select, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ComponentInner>>>() {
                @Override
                public Observable<ServiceResponse<ComponentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ComponentInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ComponentInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ComponentInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ComponentInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get list of components for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ComponentInner&gt; object if successful.
     */
    public PagedList<ComponentInner> listByResourceNext(final String nextPageLink) {
        ServiceResponse<Page<ComponentInner>> response = listByResourceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ComponentInner>(response.body()) {
            @Override
            public Page<ComponentInner> nextPage(String nextPageLink) {
                return listByResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get list of components for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ComponentInner>> listByResourceNextAsync(final String nextPageLink, final ServiceFuture<List<ComponentInner>> serviceFuture, final ListOperationCallback<ComponentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(String nextPageLink) {
                    return listByResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get list of components for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComponentInner&gt; object
     */
    public Observable<Page<ComponentInner>> listByResourceNextAsync(final String nextPageLink) {
        return listByResourceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ComponentInner>>, Page<ComponentInner>>() {
                @Override
                public Page<ComponentInner> call(ServiceResponse<Page<ComponentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get list of components for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComponentInner&gt; object
     */
    public Observable<ServiceResponse<Page<ComponentInner>>> listByResourceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ComponentInner>>, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(ServiceResponse<Page<ComponentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get list of components for a resource.
     *
    ServiceResponse<PageImpl<ComponentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ComponentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ComponentInner>>> listByResourceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ComponentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComponentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ComponentInner>> result = listByResourceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ComponentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ComponentInner>> listByResourceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ComponentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ComponentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
