/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.WorkloadType;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorType;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorCategory;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.HealthState;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.HealthStateCategory;
import java.util.List;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.HealthStateChange;
import org.joda.time.DateTime;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.AlertGeneration;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Model for monitor instance.
 */
@JsonFlatten
public class MonitorInstanceInner extends ProxyResource {
    /**
     * For optimistic concurrency control.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * ID of the workspace.
     */
    @JsonProperty(value = "properties.workspaceId", access = JsonProperty.Access.WRITE_ONLY)
    private String workspaceId;

    /**
     * ID of the OMS solution this health instance belong to.
     */
    @JsonProperty(value = "properties.solutionId", access = JsonProperty.Access.WRITE_ONLY)
    private String solutionId;

    /**
     * Type of the workload. Possible values include: 'BaseOS', 'SQL', 'IIS',
     * 'Apache'.
     */
    @JsonProperty(value = "properties.workloadType", access = JsonProperty.Access.WRITE_ONLY)
    private WorkloadType workloadType;

    /**
     * ID of the component.
     */
    @JsonProperty(value = "properties.componentId", access = JsonProperty.Access.WRITE_ONLY)
    private String componentId;

    /**
     * Name of the component.
     */
    @JsonProperty(value = "properties.componentName", access = JsonProperty.Access.WRITE_ONLY)
    private String componentName;

    /**
     * ID of the component type.
     */
    @JsonProperty(value = "properties.componentTypeId", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeId;

    /**
     * Name of the component type. Qualifies the type of component such as
     * whether it is a SQL database, logical disk, website, etc.
     */
    @JsonProperty(value = "properties.componentTypeName", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeName;

    /**
     * ID of the monitor instance.
     */
    @JsonProperty(value = "properties.monitorId", access = JsonProperty.Access.WRITE_ONLY)
    private String monitorId;

    /**
     * Name of the monitor.
     */
    @JsonProperty(value = "properties.monitorName", access = JsonProperty.Access.WRITE_ONLY)
    private String monitorName;

    /**
     * Type of the monitor. The qualifier for the health criteria depending on
     * the functionality it performs such as Unit, Aggregate, Dependency.
     * Possible values include: 'Aggregate', 'Dependency', 'Unit'.
     */
    @JsonProperty(value = "properties.monitorType", access = JsonProperty.Access.WRITE_ONLY)
    private MonitorType monitorType;

    /**
     * Monitor type category. Indicates the attribute of the component that the
     * health criteria monitors such as Performance, Availability, etc.
     * Possible values include: 'AvailabilityHealth', 'Configuration',
     * 'EntityHealth', 'PerformanceHealth', 'Security'.
     */
    @JsonProperty(value = "properties.monitorCategory", access = JsonProperty.Access.WRITE_ONLY)
    private MonitorCategory monitorCategory;

    /**
     * Health state of monitor instance. Possible values include: 'Error',
     * 'Warning', 'Success', 'Unknown', 'Uninitialized'.
     */
    @JsonProperty(value = "properties.healthState", access = JsonProperty.Access.WRITE_ONLY)
    private HealthState healthState;

    /**
     * Category of monitor instance's health state. Possible values include:
     * 'Identity', 'CustomGroup'.
     */
    @JsonProperty(value = "properties.healthStateCategory", access = JsonProperty.Access.WRITE_ONLY)
    private HealthStateCategory healthStateCategory;

    /**
     * Health state changes.
     */
    @JsonProperty(value = "properties.healthStateChanges", access = JsonProperty.Access.WRITE_ONLY)
    private List<HealthStateChange> healthStateChanges;

    /**
     * Start time for health state changes.
     */
    @JsonProperty(value = "properties.healthStateChangesStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime healthStateChangesStartTime;

    /**
     * End time for health state changes.
     */
    @JsonProperty(value = "properties.healthStateChangesEndTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime healthStateChangesEndTime;

    /**
     * Time of last health state change.
     */
    @JsonProperty(value = "properties.lastHealthStateChangeTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastHealthStateChangeTime;

    /**
     * Generates alert or not. Possible values include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "properties.alertGeneration", access = JsonProperty.Access.WRITE_ONLY)
    private AlertGeneration alertGeneration;

    /**
     * Properties requested in aggregation queries.
     */
    @JsonProperty(value = "properties.aggregateProperties", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, String> aggregateProperties;

    /**
     * Health instance children.
     */
    @JsonProperty(value = "properties.children", access = JsonProperty.Access.WRITE_ONLY)
    private List<MonitorInstanceInner> children;

    /**
     * Get for optimistic concurrency control.
     *
     * @return the etag value
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get iD of the workspace.
     *
     * @return the workspaceId value
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Get iD of the OMS solution this health instance belong to.
     *
     * @return the solutionId value
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Get type of the workload. Possible values include: 'BaseOS', 'SQL', 'IIS', 'Apache'.
     *
     * @return the workloadType value
     */
    public WorkloadType workloadType() {
        return this.workloadType;
    }

    /**
     * Get iD of the component.
     *
     * @return the componentId value
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get name of the component.
     *
     * @return the componentName value
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Get iD of the component type.
     *
     * @return the componentTypeId value
     */
    public String componentTypeId() {
        return this.componentTypeId;
    }

    /**
     * Get name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.
     *
     * @return the componentTypeName value
     */
    public String componentTypeName() {
        return this.componentTypeName;
    }

    /**
     * Get iD of the monitor instance.
     *
     * @return the monitorId value
     */
    public String monitorId() {
        return this.monitorId;
    }

    /**
     * Get name of the monitor.
     *
     * @return the monitorName value
     */
    public String monitorName() {
        return this.monitorName;
    }

    /**
     * Get type of the monitor. The qualifier for the health criteria depending on the functionality it performs such as Unit, Aggregate, Dependency. Possible values include: 'Aggregate', 'Dependency', 'Unit'.
     *
     * @return the monitorType value
     */
    public MonitorType monitorType() {
        return this.monitorType;
    }

    /**
     * Get monitor type category. Indicates the attribute of the component that the health criteria monitors such as Performance, Availability, etc. Possible values include: 'AvailabilityHealth', 'Configuration', 'EntityHealth', 'PerformanceHealth', 'Security'.
     *
     * @return the monitorCategory value
     */
    public MonitorCategory monitorCategory() {
        return this.monitorCategory;
    }

    /**
     * Get health state of monitor instance. Possible values include: 'Error', 'Warning', 'Success', 'Unknown', 'Uninitialized'.
     *
     * @return the healthState value
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Get category of monitor instance's health state. Possible values include: 'Identity', 'CustomGroup'.
     *
     * @return the healthStateCategory value
     */
    public HealthStateCategory healthStateCategory() {
        return this.healthStateCategory;
    }

    /**
     * Get health state changes.
     *
     * @return the healthStateChanges value
     */
    public List<HealthStateChange> healthStateChanges() {
        return this.healthStateChanges;
    }

    /**
     * Get start time for health state changes.
     *
     * @return the healthStateChangesStartTime value
     */
    public DateTime healthStateChangesStartTime() {
        return this.healthStateChangesStartTime;
    }

    /**
     * Get end time for health state changes.
     *
     * @return the healthStateChangesEndTime value
     */
    public DateTime healthStateChangesEndTime() {
        return this.healthStateChangesEndTime;
    }

    /**
     * Get time of last health state change.
     *
     * @return the lastHealthStateChangeTime value
     */
    public DateTime lastHealthStateChangeTime() {
        return this.lastHealthStateChangeTime;
    }

    /**
     * Get generates alert or not. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the alertGeneration value
     */
    public AlertGeneration alertGeneration() {
        return this.alertGeneration;
    }

    /**
     * Get properties requested in aggregation queries.
     *
     * @return the aggregateProperties value
     */
    public Map<String, String> aggregateProperties() {
        return this.aggregateProperties;
    }

    /**
     * Get health instance children.
     *
     * @return the children value
     */
    public List<MonitorInstanceInner> children() {
        return this.children;
    }

}
