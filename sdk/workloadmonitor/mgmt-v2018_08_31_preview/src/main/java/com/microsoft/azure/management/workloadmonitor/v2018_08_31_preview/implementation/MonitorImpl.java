/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.Monitor;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.AlertGeneration;
import java.util.List;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorCriteria;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorCategory;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorState;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorType;

class MonitorImpl extends CreatableUpdatableImpl<Monitor, MonitorInner, MonitorImpl> implements Monitor, Monitor.Update {
    private final WorkloadMonitorManager manager;
    private String resourceGroupName;
    private String resourceNamespace;
    private String resourceType;
    private String resourceName;
    private String monitorId;

    MonitorImpl(String name, WorkloadMonitorManager manager) {
        super(name, new MonitorInner());
        this.manager = manager;
        // Set resource name
        this.monitorId = name;
        //
    }

    MonitorImpl(MonitorInner inner, WorkloadMonitorManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.monitorId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.resourceNamespace = IdParsingUtils.getValueFromIdByName(inner.id(), "providers");
        this.monitorId = IdParsingUtils.getValueFromIdByName(inner.id(), "monitors");
        this.resourceType = IdParsingUtils.getValueFromIdByPosition(inner.id(), 6);
        this.resourceName = IdParsingUtils.getValueFromIdByPosition(inner.id(), 7);
        //
    }

    @Override
    public WorkloadMonitorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Monitor> createResourceAsync() {
        MonitorsInner client = this.manager().inner().monitors();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<Monitor> updateResourceAsync() {
        MonitorsInner client = this.manager().inner().monitors();
        return client.updateAsync(this.resourceGroupName, this.resourceNamespace, this.resourceType, this.resourceName, this.monitorId)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MonitorInner> getInnerAsync() {
        MonitorsInner client = this.manager().inner().monitors();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public AlertGeneration alertGeneration() {
        return this.inner().alertGeneration();
    }

    @Override
    public String componentTypeDisplayName() {
        return this.inner().componentTypeDisplayName();
    }

    @Override
    public String componentTypeId() {
        return this.inner().componentTypeId();
    }

    @Override
    public String componentTypeName() {
        return this.inner().componentTypeName();
    }

    @Override
    public List<MonitorCriteria> criteria() {
        return this.inner().criteria();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String documentationURL() {
        return this.inner().documentationURL();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public Integer frequency() {
        return this.inner().frequency();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Integer lookbackDuration() {
        return this.inner().lookbackDuration();
    }

    @Override
    public MonitorCategory monitorCategory() {
        return this.inner().monitorCategory();
    }

    @Override
    public String monitorDisplayName() {
        return this.inner().monitorDisplayName();
    }

    @Override
    public String monitorId() {
        return this.inner().monitorId();
    }

    @Override
    public String monitorName() {
        return this.inner().monitorName();
    }

    @Override
    public MonitorState monitorState() {
        return this.inner().monitorState();
    }

    @Override
    public MonitorType monitorType() {
        return this.inner().monitorType();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String parentMonitorDisplayName() {
        return this.inner().parentMonitorDisplayName();
    }

    @Override
    public String parentMonitorName() {
        return this.inner().parentMonitorName();
    }

    @Override
    public String signalName() {
        return this.inner().signalName();
    }

    @Override
    public String signalType() {
        return this.inner().signalType();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
