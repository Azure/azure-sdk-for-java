/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.WorkloadType;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.HealthState;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.HealthStateCategory;
import org.joda.time.DateTime;
import java.util.Map;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Model for component.
 */
@JsonFlatten
public class ComponentInner extends ProxyResource {
    /**
     * For optimistic concurrency control.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * ID of the workspace.
     */
    @JsonProperty(value = "properties.workspaceId", access = JsonProperty.Access.WRITE_ONLY)
    private String workspaceId;

    /**
     * ID of the OMS solution this component belong to.
     */
    @JsonProperty(value = "properties.solutionId", access = JsonProperty.Access.WRITE_ONLY)
    private String solutionId;

    /**
     * Type of the workload. Possible values include: 'BaseOS', 'SQL', 'IIS',
     * 'Apache'.
     */
    @JsonProperty(value = "properties.workloadType", access = JsonProperty.Access.WRITE_ONLY)
    private WorkloadType workloadType;

    /**
     * Name of the component.
     */
    @JsonProperty(value = "properties.componentName", access = JsonProperty.Access.WRITE_ONLY)
    private String componentName;

    /**
     * ID of the component type.
     */
    @JsonProperty(value = "properties.componentTypeId", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeId;

    /**
     * Name of the component type. Qualifies the type of component such as
     * whether it is a SQL database, logical disk, website, etc.
     */
    @JsonProperty(value = "properties.componentTypeName", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeName;

    /**
     * Component type group category. Classification of component type groups
     * into a logical category. e.g. Network, Disk, Memory, CPU.
     */
    @JsonProperty(value = "properties.componentTypeGroupCategory", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeGroupCategory;

    /**
     * Health state of the component. Possible values include: 'Error',
     * 'Warning', 'Success', 'Unknown', 'Uninitialized'.
     */
    @JsonProperty(value = "properties.healthState", access = JsonProperty.Access.WRITE_ONLY)
    private HealthState healthState;

    /**
     * Category of component's health state. Possible values include:
     * 'Identity', 'CustomGroup'.
     */
    @JsonProperty(value = "properties.healthStateCategory", access = JsonProperty.Access.WRITE_ONLY)
    private HealthStateCategory healthStateCategory;

    /**
     * Start time for health state changes.
     */
    @JsonProperty(value = "properties.healthStateChangesStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime healthStateChangesStartTime;

    /**
     * End time for health state changes.
     */
    @JsonProperty(value = "properties.healthStateChangesEndTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime healthStateChangesEndTime;

    /**
     * Time of last health state change.
     */
    @JsonProperty(value = "properties.lastHealthStateChangeTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastHealthStateChangeTime;

    /**
     * ID of the VM this component belongs to.
     */
    @JsonProperty(value = "properties.vmId", access = JsonProperty.Access.WRITE_ONLY)
    private String vmId;

    /**
     * Name of the VM this component belongs to.
     */
    @JsonProperty(value = "properties.vmName", access = JsonProperty.Access.WRITE_ONLY)
    private String vmName;

    /**
     * Tags on the VM this component belongs to.
     */
    @JsonProperty(value = "properties.vmTags", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, String> vmTags;

    /**
     * Properties requested in aggregation queries.
     */
    @JsonProperty(value = "properties.aggregateProperties", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, String> aggregateProperties;

    /**
     * component children.
     */
    @JsonProperty(value = "properties.children", access = JsonProperty.Access.WRITE_ONLY)
    private List<ComponentInner> children;

    /**
     * Get for optimistic concurrency control.
     *
     * @return the etag value
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get iD of the workspace.
     *
     * @return the workspaceId value
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Get iD of the OMS solution this component belong to.
     *
     * @return the solutionId value
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Get type of the workload. Possible values include: 'BaseOS', 'SQL', 'IIS', 'Apache'.
     *
     * @return the workloadType value
     */
    public WorkloadType workloadType() {
        return this.workloadType;
    }

    /**
     * Get name of the component.
     *
     * @return the componentName value
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Get iD of the component type.
     *
     * @return the componentTypeId value
     */
    public String componentTypeId() {
        return this.componentTypeId;
    }

    /**
     * Get name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.
     *
     * @return the componentTypeName value
     */
    public String componentTypeName() {
        return this.componentTypeName;
    }

    /**
     * Get component type group category. Classification of component type groups into a logical category. e.g. Network, Disk, Memory, CPU.
     *
     * @return the componentTypeGroupCategory value
     */
    public String componentTypeGroupCategory() {
        return this.componentTypeGroupCategory;
    }

    /**
     * Get health state of the component. Possible values include: 'Error', 'Warning', 'Success', 'Unknown', 'Uninitialized'.
     *
     * @return the healthState value
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Get category of component's health state. Possible values include: 'Identity', 'CustomGroup'.
     *
     * @return the healthStateCategory value
     */
    public HealthStateCategory healthStateCategory() {
        return this.healthStateCategory;
    }

    /**
     * Get start time for health state changes.
     *
     * @return the healthStateChangesStartTime value
     */
    public DateTime healthStateChangesStartTime() {
        return this.healthStateChangesStartTime;
    }

    /**
     * Get end time for health state changes.
     *
     * @return the healthStateChangesEndTime value
     */
    public DateTime healthStateChangesEndTime() {
        return this.healthStateChangesEndTime;
    }

    /**
     * Get time of last health state change.
     *
     * @return the lastHealthStateChangeTime value
     */
    public DateTime lastHealthStateChangeTime() {
        return this.lastHealthStateChangeTime;
    }

    /**
     * Get iD of the VM this component belongs to.
     *
     * @return the vmId value
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get name of the VM this component belongs to.
     *
     * @return the vmName value
     */
    public String vmName() {
        return this.vmName;
    }

    /**
     * Get tags on the VM this component belongs to.
     *
     * @return the vmTags value
     */
    public Map<String, String> vmTags() {
        return this.vmTags;
    }

    /**
     * Get properties requested in aggregation queries.
     *
     * @return the aggregateProperties value
     */
    public Map<String, String> aggregateProperties() {
        return this.aggregateProperties;
    }

    /**
     * Get component children.
     *
     * @return the children value
     */
    public List<ComponentInner> children() {
        return this.children;
    }

}
