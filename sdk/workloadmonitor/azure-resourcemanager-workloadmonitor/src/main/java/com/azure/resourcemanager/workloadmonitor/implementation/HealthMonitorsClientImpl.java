// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadmonitor.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadmonitor.fluent.HealthMonitorsClient;
import com.azure.resourcemanager.workloadmonitor.fluent.models.HealthMonitorInner;
import com.azure.resourcemanager.workloadmonitor.fluent.models.HealthMonitorStateChangeInner;
import com.azure.resourcemanager.workloadmonitor.models.HealthMonitorList;
import com.azure.resourcemanager.workloadmonitor.models.HealthMonitorStateChangeList;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in HealthMonitorsClient. */
public final class HealthMonitorsClientImpl implements HealthMonitorsClient {
    private final ClientLogger logger = new ClientLogger(HealthMonitorsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final HealthMonitorsService service;

    /** The service client containing this operation class. */
    private final WorkloadMonitorApiImpl client;

    /**
     * Initializes an instance of HealthMonitorsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    HealthMonitorsClientImpl(WorkloadMonitorApiImpl client) {
        this.service =
            RestProxy.create(HealthMonitorsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadMonitorApiHealthMonitors to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WorkloadMonitorApiHe")
    private interface HealthMonitorsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}"
                + "/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthMonitorList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("providerName") String providerName,
            @PathParam("resourceCollectionName") String resourceCollectionName,
            @PathParam("resourceName") String resourceName,
            @QueryParam("$filter") String filter,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}"
                + "/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthMonitorInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("providerName") String providerName,
            @PathParam("resourceCollectionName") String resourceCollectionName,
            @PathParam("resourceName") String resourceName,
            @PathParam("monitorId") String monitorId,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}"
                + "/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}"
                + "/history")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthMonitorStateChangeList>> listStateChanges(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("providerName") String providerName,
            @PathParam("resourceCollectionName") String resourceCollectionName,
            @PathParam("resourceName") String resourceName,
            @PathParam("monitorId") String monitorId,
            @QueryParam("$filter") String filter,
            @QueryParam("$expand") String expand,
            @QueryParam("startTimestampUtc") OffsetDateTime startTimestampUtc,
            @QueryParam("endTimestampUtc") OffsetDateTime endTimestampUtc,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}"
                + "/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}"
                + "/history/{timestampUnix}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthMonitorStateChangeInner>> getStateChange(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("providerName") String providerName,
            @PathParam("resourceCollectionName") String resourceCollectionName,
            @PathParam("resourceName") String resourceName,
            @PathParam("monitorId") String monitorId,
            @PathParam("timestampUnix") String timestampUnix,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthMonitorList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthMonitorStateChangeList>> listStateChangesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the
     * monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq
     *     'logical-disks|C:|disk-free-space-mb.'.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of all monitors of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorInner>> listSinglePageAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String filter,
        String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            subscriptionId,
                            resourceGroupName,
                            providerName,
                            resourceCollectionName,
                            resourceName,
                            filter,
                            expand,
                            accept,
                            context))
            .<PagedResponse<HealthMonitorInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the
     * monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq
     *     'logical-disks|C:|disk-free-space-mb.'.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of all monitors of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorInner>> listSinglePageAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String filter,
        String expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                filter,
                expand,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the
     * monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq
     *     'logical-disks|C:|disk-free-space-mb.'.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of all monitors of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthMonitorInner> listAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String filter,
        String expand) {
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    subscriptionId,
                    resourceGroupName,
                    providerName,
                    resourceCollectionName,
                    resourceName,
                    filter,
                    expand),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the
     * monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of all monitors of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthMonitorInner> listAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName) {
        final String filter = null;
        final String expand = null;
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    subscriptionId,
                    resourceGroupName,
                    providerName,
                    resourceCollectionName,
                    resourceName,
                    filter,
                    expand),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the
     * monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq
     *     'logical-disks|C:|disk-free-space-mb.'.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of all monitors of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthMonitorInner> listAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String filter,
        String expand,
        Context context) {
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    subscriptionId,
                    resourceGroupName,
                    providerName,
                    resourceCollectionName,
                    resourceName,
                    filter,
                    expand,
                    context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the
     * monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of all monitors of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HealthMonitorInner> list(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName) {
        final String filter = null;
        final String expand = null;
        return new PagedIterable<>(
            listAsync(
                subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, filter, expand));
    }

    /**
     * Get the current health status of all monitors of a virtual machine. Optional parameters: $expand (retrieve the
     * monitor's evidence and configuration) and $filter (filter by monitor name).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param filter Optionally filter by monitor name. Example: $filter=monitorName eq
     *     'logical-disks|C:|disk-free-space-mb.'.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of all monitors of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HealthMonitorInner> list(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String filter,
        String expand,
        Context context) {
        return new PagedIterable<>(
            listAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                filter,
                expand,
                context));
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the
     * monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of a monitor of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthMonitorInner>> getWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (monitorId == null) {
            return Mono.error(new IllegalArgumentException("Parameter monitorId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            subscriptionId,
                            resourceGroupName,
                            providerName,
                            resourceCollectionName,
                            resourceName,
                            monitorId,
                            expand,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the
     * monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of a monitor of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthMonitorInner>> getWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (monitorId == null) {
            return Mono.error(new IllegalArgumentException("Parameter monitorId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                expand,
                accept,
                context);
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the
     * monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of a monitor of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthMonitorInner> getAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String expand) {
        return getWithResponseAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                expand)
            .flatMap(
                (Response<HealthMonitorInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the
     * monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of a monitor of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthMonitorInner> getAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId) {
        final String expand = null;
        return getWithResponseAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                expand)
            .flatMap(
                (Response<HealthMonitorInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the
     * monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of a monitor of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HealthMonitorInner get(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId) {
        final String expand = null;
        return getAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                expand)
            .block();
    }

    /**
     * Get the current health status of a monitor of a virtual machine. Optional parameter: $expand (retrieve the
     * monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current health status of a monitor of a virtual machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HealthMonitorInner> getWithResponse(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String expand,
        Context context) {
        return getWithResponseAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                expand,
                context)
            .block();
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the
     * last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter
     * (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state changes of a monitor of a virtual machine within the provided time window (default is
     *     the last 24 hours).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorStateChangeInner>> listStateChangesSinglePageAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String filter,
        String expand,
        OffsetDateTime startTimestampUtc,
        OffsetDateTime endTimestampUtc) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (monitorId == null) {
            return Mono.error(new IllegalArgumentException("Parameter monitorId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listStateChanges(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            subscriptionId,
                            resourceGroupName,
                            providerName,
                            resourceCollectionName,
                            resourceName,
                            monitorId,
                            filter,
                            expand,
                            startTimestampUtc,
                            endTimestampUtc,
                            accept,
                            context))
            .<PagedResponse<HealthMonitorStateChangeInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the
     * last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter
     * (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state changes of a monitor of a virtual machine within the provided time window (default is
     *     the last 24 hours).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorStateChangeInner>> listStateChangesSinglePageAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String filter,
        String expand,
        OffsetDateTime startTimestampUtc,
        OffsetDateTime endTimestampUtc,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (monitorId == null) {
            return Mono.error(new IllegalArgumentException("Parameter monitorId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listStateChanges(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                filter,
                expand,
                startTimestampUtc,
                endTimestampUtc,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the
     * last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter
     * (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state changes of a monitor of a virtual machine within the provided time window (default is
     *     the last 24 hours).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthMonitorStateChangeInner> listStateChangesAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String filter,
        String expand,
        OffsetDateTime startTimestampUtc,
        OffsetDateTime endTimestampUtc) {
        return new PagedFlux<>(
            () ->
                listStateChangesSinglePageAsync(
                    subscriptionId,
                    resourceGroupName,
                    providerName,
                    resourceCollectionName,
                    resourceName,
                    monitorId,
                    filter,
                    expand,
                    startTimestampUtc,
                    endTimestampUtc),
            nextLink -> listStateChangesNextSinglePageAsync(nextLink));
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the
     * last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter
     * (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state changes of a monitor of a virtual machine within the provided time window (default is
     *     the last 24 hours).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthMonitorStateChangeInner> listStateChangesAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId) {
        final String filter = null;
        final String expand = null;
        final OffsetDateTime startTimestampUtc = null;
        final OffsetDateTime endTimestampUtc = null;
        return new PagedFlux<>(
            () ->
                listStateChangesSinglePageAsync(
                    subscriptionId,
                    resourceGroupName,
                    providerName,
                    resourceCollectionName,
                    resourceName,
                    monitorId,
                    filter,
                    expand,
                    startTimestampUtc,
                    endTimestampUtc),
            nextLink -> listStateChangesNextSinglePageAsync(nextLink));
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the
     * last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter
     * (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state changes of a monitor of a virtual machine within the provided time window (default is
     *     the last 24 hours).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthMonitorStateChangeInner> listStateChangesAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String filter,
        String expand,
        OffsetDateTime startTimestampUtc,
        OffsetDateTime endTimestampUtc,
        Context context) {
        return new PagedFlux<>(
            () ->
                listStateChangesSinglePageAsync(
                    subscriptionId,
                    resourceGroupName,
                    providerName,
                    resourceCollectionName,
                    resourceName,
                    monitorId,
                    filter,
                    expand,
                    startTimestampUtc,
                    endTimestampUtc,
                    context),
            nextLink -> listStateChangesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the
     * last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter
     * (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state changes of a monitor of a virtual machine within the provided time window (default is
     *     the last 24 hours).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HealthMonitorStateChangeInner> listStateChanges(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId) {
        final String filter = null;
        final String expand = null;
        final OffsetDateTime startTimestampUtc = null;
        final OffsetDateTime endTimestampUtc = null;
        return new PagedIterable<>(
            listStateChangesAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                filter,
                expand,
                startTimestampUtc,
                endTimestampUtc));
    }

    /**
     * Get the health state changes of a monitor of a virtual machine within the provided time window (default is the
     * last 24 hours). Optional parameters: $expand (retrieve the monitor's evidence and configuration) and $filter
     * (filter by heartbeat condition).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param filter Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false.
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param startTimestampUtc The start of the time window.
     * @param endTimestampUtc The end of the time window.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state changes of a monitor of a virtual machine within the provided time window (default is
     *     the last 24 hours).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HealthMonitorStateChangeInner> listStateChanges(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String filter,
        String expand,
        OffsetDateTime startTimestampUtc,
        OffsetDateTime endTimestampUtc,
        Context context) {
        return new PagedIterable<>(
            listStateChangesAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                filter,
                expand,
                startTimestampUtc,
                endTimestampUtc,
                context));
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter:
     * $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state change of a monitor of a virtual machine at the provided timestamp.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthMonitorStateChangeInner>> getStateChangeWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String timestampUnix,
        String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (monitorId == null) {
            return Mono.error(new IllegalArgumentException("Parameter monitorId is required and cannot be null."));
        }
        if (timestampUnix == null) {
            return Mono.error(new IllegalArgumentException("Parameter timestampUnix is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getStateChange(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            subscriptionId,
                            resourceGroupName,
                            providerName,
                            resourceCollectionName,
                            resourceName,
                            monitorId,
                            timestampUnix,
                            expand,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter:
     * $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state change of a monitor of a virtual machine at the provided timestamp.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthMonitorStateChangeInner>> getStateChangeWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String timestampUnix,
        String expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (providerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter providerName is required and cannot be null."));
        }
        if (resourceCollectionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter resourceCollectionName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (monitorId == null) {
            return Mono.error(new IllegalArgumentException("Parameter monitorId is required and cannot be null."));
        }
        if (timestampUnix == null) {
            return Mono.error(new IllegalArgumentException("Parameter timestampUnix is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getStateChange(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                timestampUnix,
                expand,
                accept,
                context);
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter:
     * $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state change of a monitor of a virtual machine at the provided timestamp.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthMonitorStateChangeInner> getStateChangeAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String timestampUnix,
        String expand) {
        return getStateChangeWithResponseAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                timestampUnix,
                expand)
            .flatMap(
                (Response<HealthMonitorStateChangeInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter:
     * $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state change of a monitor of a virtual machine at the provided timestamp.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthMonitorStateChangeInner> getStateChangeAsync(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String timestampUnix) {
        final String expand = null;
        return getStateChangeWithResponseAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                timestampUnix,
                expand)
            .flatMap(
                (Response<HealthMonitorStateChangeInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter:
     * $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state change of a monitor of a virtual machine at the provided timestamp.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HealthMonitorStateChangeInner getStateChange(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String timestampUnix) {
        final String expand = null;
        return getStateChangeAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                timestampUnix,
                expand)
            .block();
    }

    /**
     * Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter:
     * $expand (retrieve the monitor's evidence and configuration).
     *
     * @param subscriptionId The subscription Id of the virtual machine.
     * @param resourceGroupName The resource group of the virtual machine.
     * @param providerName The provider name (ex: Microsoft.Compute for virtual machines).
     * @param resourceCollectionName The resource collection name (ex: virtualMachines for virtual machines).
     * @param resourceName The name of the virtual machine.
     * @param monitorId The monitor Id of the virtual machine.
     * @param timestampUnix The timestamp of the state change (unix format).
     * @param expand Optionally expand the monitorâ€™s evidence and/or configuration. Example:
     *     $expand=evidence,configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health state change of a monitor of a virtual machine at the provided timestamp.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HealthMonitorStateChangeInner> getStateChangeWithResponse(
        String subscriptionId,
        String resourceGroupName,
        String providerName,
        String resourceCollectionName,
        String resourceName,
        String monitorId,
        String timestampUnix,
        String expand,
        Context context) {
        return getStateChangeWithResponseAsync(
                subscriptionId,
                resourceGroupName,
                providerName,
                resourceCollectionName,
                resourceName,
                monitorId,
                timestampUnix,
                expand,
                context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the current health statuses of the monitors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HealthMonitorInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the current health statuses of the monitors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the health state changes of the monitor within the provided time window.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorStateChangeInner>> listStateChangesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listStateChangesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HealthMonitorStateChangeInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the health state changes of the monitor within the provided time window.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthMonitorStateChangeInner>> listStateChangesNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listStateChangesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
