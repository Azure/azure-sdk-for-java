/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.support.v2020_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.support.v2020_04_01.implementation.SupportTicketDetailsInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.support.v2020_04_01.implementation.SupportManager;
import org.joda.time.DateTime;

/**
 * Type representing SupportTicketDetails.
 */
public interface SupportTicketDetails extends HasInner<SupportTicketDetailsInner>, Indexable, Updatable<SupportTicketDetails.Update>, Refreshable<SupportTicketDetails>, HasManager<SupportManager> {
    /**
     * @return the contactDetails value.
     */
    ContactProfile contactDetails();

    /**
     * @return the createdDate value.
     */
    DateTime createdDate();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the enrollmentId value.
     */
    String enrollmentId();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the modifiedDate value.
     */
    DateTime modifiedDate();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the problemClassificationDisplayName value.
     */
    String problemClassificationDisplayName();

    /**
     * @return the problemClassificationId value.
     */
    String problemClassificationId();

    /**
     * @return the problemStartTime value.
     */
    DateTime problemStartTime();

    /**
     * @return the quotaTicketDetails value.
     */
    QuotaTicketDetails quotaTicketDetails();

    /**
     * @return the require24X7Response value.
     */
    Boolean require24X7Response();

    /**
     * @return the serviceDisplayName value.
     */
    String serviceDisplayName();

    /**
     * @return the serviceId value.
     */
    String serviceId();

    /**
     * @return the serviceLevelAgreement value.
     */
    ServiceLevelAgreement serviceLevelAgreement();

    /**
     * @return the severity value.
     */
    SeverityLevel severity();

    /**
     * @return the status value.
     */
    String status();

    /**
     * @return the supportEngineer value.
     */
    SupportEngineer supportEngineer();

    /**
     * @return the supportPlanType value.
     */
    String supportPlanType();

    /**
     * @return the supportTicketId value.
     */
    String supportTicketId();

    /**
     * @return the technicalTicketDetails value.
     */
    TechnicalTicketDetails technicalTicketDetails();

    /**
     * @return the title value.
     */
    String title();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the SupportTicketDetails definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithContactDetails, DefinitionStages.WithDescription, DefinitionStages.WithProblemClassificationId, DefinitionStages.WithServiceId, DefinitionStages.WithSeverity, DefinitionStages.WithTitle, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of SupportTicketDetails definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a SupportTicketDetails definition.
         */
        interface Blank extends WithContactDetails {
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify ContactDetails.
         */
        interface WithContactDetails {
           /**
            * Specifies contactDetails.
            * @param contactDetails Contact information of the user requesting to create a support ticket
            * @return the next definition stage
            */
            WithDescription withContactDetails(ContactProfile contactDetails);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify Description.
         */
        interface WithDescription {
           /**
            * Specifies description.
            * @param description Detailed description of the question or issue
            * @return the next definition stage
            */
            WithProblemClassificationId withDescription(String description);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify ProblemClassificationId.
         */
        interface WithProblemClassificationId {
           /**
            * Specifies problemClassificationId.
            * @param problemClassificationId Each Azure service has its own set of issue categories, also known as problem classification. This parameter is the unique Id for the type of problem you are experiencing
            * @return the next definition stage
            */
            WithServiceId withProblemClassificationId(String problemClassificationId);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify ServiceId.
         */
        interface WithServiceId {
           /**
            * Specifies serviceId.
            * @param serviceId This is the resource Id of the Azure service resource associated with the support ticket
            * @return the next definition stage
            */
            WithSeverity withServiceId(String serviceId);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify Severity.
         */
        interface WithSeverity {
           /**
            * Specifies severity.
            * @param severity A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure. Note: 'Highest critical impact' severity is reserved only for our Premium customers. Possible values include: 'minimal', 'moderate', 'critical', 'highestcriticalimpact'
            * @return the next definition stage
            */
            WithTitle withSeverity(SeverityLevel severity);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify Title.
         */
        interface WithTitle {
           /**
            * Specifies title.
            * @param title Title of the support ticket
            * @return the next definition stage
            */
            WithCreate withTitle(String title);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify ProblemStartTime.
         */
        interface WithProblemStartTime {
            /**
             * Specifies problemStartTime.
             * @param problemStartTime Time in UTC (ISO 8601 format) when the problem started
             * @return the next definition stage
             */
            WithCreate withProblemStartTime(DateTime problemStartTime);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify QuotaTicketDetails.
         */
        interface WithQuotaTicketDetails {
            /**
             * Specifies quotaTicketDetails.
             * @param quotaTicketDetails Additional ticket details associated with a quota support ticket request
             * @return the next definition stage
             */
            WithCreate withQuotaTicketDetails(QuotaTicketDetails quotaTicketDetails);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify Require24X7Response.
         */
        interface WithRequire24X7Response {
            /**
             * Specifies require24X7Response.
             * @param require24X7Response Indicates if this requires a 24x7 response from Azure
             * @return the next definition stage
             */
            WithCreate withRequire24X7Response(Boolean require24X7Response);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify ServiceLevelAgreement.
         */
        interface WithServiceLevelAgreement {
            /**
             * Specifies serviceLevelAgreement.
             * @param serviceLevelAgreement Service Level Agreement information for this support ticket
             * @return the next definition stage
             */
            WithCreate withServiceLevelAgreement(ServiceLevelAgreement serviceLevelAgreement);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify SupportEngineer.
         */
        interface WithSupportEngineer {
            /**
             * Specifies supportEngineer.
             * @param supportEngineer Information about the support engineer working on this support ticket
             * @return the next definition stage
             */
            WithCreate withSupportEngineer(SupportEngineer supportEngineer);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify SupportTicketId.
         */
        interface WithSupportTicketId {
            /**
             * Specifies supportTicketId.
             * @param supportTicketId System generated support ticket Id that is unique
             * @return the next definition stage
             */
            WithCreate withSupportTicketId(String supportTicketId);
        }

        /**
         * The stage of the supportticketdetails definition allowing to specify TechnicalTicketDetails.
         */
        interface WithTechnicalTicketDetails {
            /**
             * Specifies technicalTicketDetails.
             * @param technicalTicketDetails Additional ticket details associated with a technical support ticket request
             * @return the next definition stage
             */
            WithCreate withTechnicalTicketDetails(TechnicalTicketDetails technicalTicketDetails);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<SupportTicketDetails>, DefinitionStages.WithProblemStartTime, DefinitionStages.WithQuotaTicketDetails, DefinitionStages.WithRequire24X7Response, DefinitionStages.WithServiceLevelAgreement, DefinitionStages.WithSupportEngineer, DefinitionStages.WithSupportTicketId, DefinitionStages.WithTechnicalTicketDetails {
        }
    }
    /**
     * The template for a SupportTicketDetails update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<SupportTicketDetails>, UpdateStages.WithContactDetails, UpdateStages.WithSeverity, UpdateStages.WithStatus {
    }

    /**
     * Grouping of SupportTicketDetails update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the supportticketdetails update allowing to specify ContactDetails.
         */
        interface WithContactDetails {
            /**
             * Specifies contactDetails.
             * @param contactDetails Contact details to be updated on the support ticket
             * @return the next update stage
             */
            Update withContactDetails(UpdateContactProfile contactDetails);
        }

        /**
         * The stage of the supportticketdetails update allowing to specify Severity.
         */
        interface WithSeverity {
            /**
             * Specifies severity.
             * @param severity Severity level. Possible values include: 'minimal', 'moderate', 'critical', 'highestcriticalimpact'
             * @return the next update stage
             */
            Update withSeverity(SeverityLevel severity);
        }

        /**
         * The stage of the supportticketdetails update allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status Status to be updated on the ticket. Possible values include: 'open', 'closed'
             * @return the next update stage
             */
            Update withStatus(Status status);
        }

    }
}
