/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.support.v2020_04_01.implementation;

import com.microsoft.azure.management.support.v2020_04_01.CommunicationDetails;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.support.v2020_04_01.CommunicationType;
import com.microsoft.azure.management.support.v2020_04_01.CommunicationDirection;
import org.joda.time.DateTime;

class CommunicationDetailsImpl extends CreatableUpdatableImpl<CommunicationDetails, CommunicationDetailsInner, CommunicationDetailsImpl> implements CommunicationDetails, CommunicationDetails.Definition, CommunicationDetails.Update {
    private final SupportManager manager;
    private String supportTicketName;
    private String communicationName;

    CommunicationDetailsImpl(String name, SupportManager manager) {
        super(name, new CommunicationDetailsInner());
        this.manager = manager;
        // Set resource name
        this.communicationName = name;
        //
    }

    CommunicationDetailsImpl(CommunicationDetailsInner inner, SupportManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.communicationName = inner.name();
        // set resource ancestor and positional variables
        this.supportTicketName = IdParsingUtils.getValueFromIdByName(inner.id(), "supportTickets");
        this.communicationName = IdParsingUtils.getValueFromIdByName(inner.id(), "communications");
        //
    }

    @Override
    public SupportManager manager() {
        return this.manager;
    }

    @Override
    public Observable<CommunicationDetails> createResourceAsync() {
        CommunicationsInner client = this.manager().inner().communications();
        return client.createAsync(this.supportTicketName, this.communicationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<CommunicationDetails> updateResourceAsync() {
        CommunicationsInner client = this.manager().inner().communications();
        return client.createAsync(this.supportTicketName, this.communicationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CommunicationDetailsInner> getInnerAsync() {
        CommunicationsInner client = this.manager().inner().communications();
        return client.getAsync(this.supportTicketName, this.communicationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String body() {
        return this.inner().body();
    }

    @Override
    public CommunicationDirection communicationDirection() {
        return this.inner().communicationDirection();
    }

    @Override
    public CommunicationType communicationType() {
        return this.inner().communicationType();
    }

    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String sender() {
        return this.inner().sender();
    }

    @Override
    public String subject() {
        return this.inner().subject();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public CommunicationDetailsImpl withExistingSupportTicket(String supportTicketName) {
        this.supportTicketName = supportTicketName;
        return this;
    }

    @Override
    public CommunicationDetailsImpl withBody(String body) {
        this.inner().withBody(body);
        return this;
    }

    @Override
    public CommunicationDetailsImpl withSubject(String subject) {
        this.inner().withSubject(subject);
        return this;
    }

    @Override
    public CommunicationDetailsImpl withSender(String sender) {
        this.inner().withSender(sender);
        return this;
    }

}
