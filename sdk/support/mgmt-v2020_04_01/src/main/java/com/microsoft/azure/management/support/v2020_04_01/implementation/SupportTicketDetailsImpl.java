/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.support.v2020_04_01.implementation;

import com.microsoft.azure.management.support.v2020_04_01.SupportTicketDetails;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.support.v2020_04_01.UpdateSupportTicket;
import com.microsoft.azure.management.support.v2020_04_01.SeverityLevel;
import com.microsoft.azure.management.support.v2020_04_01.ContactProfile;
import com.microsoft.azure.management.support.v2020_04_01.ServiceLevelAgreement;
import com.microsoft.azure.management.support.v2020_04_01.SupportEngineer;
import org.joda.time.DateTime;
import com.microsoft.azure.management.support.v2020_04_01.TechnicalTicketDetails;
import com.microsoft.azure.management.support.v2020_04_01.QuotaTicketDetails;
import com.microsoft.azure.management.support.v2020_04_01.UpdateContactProfile;
import com.microsoft.azure.management.support.v2020_04_01.Status;
import rx.functions.Func1;

class SupportTicketDetailsImpl extends CreatableUpdatableImpl<SupportTicketDetails, SupportTicketDetailsInner, SupportTicketDetailsImpl> implements SupportTicketDetails, SupportTicketDetails.Definition, SupportTicketDetails.Update {
    private String supportTicketName;
    private UpdateSupportTicket updateParameter;
    private final SupportManager manager;

    SupportTicketDetailsImpl(String name, SupportManager manager) {
        super(name, new SupportTicketDetailsInner());
        this.manager = manager;
        // Set resource name
        this.supportTicketName = name;
        //
        this.updateParameter = new UpdateSupportTicket();
    }

    SupportTicketDetailsImpl(SupportTicketDetailsInner inner, SupportManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.supportTicketName = inner.name();
        // set resource ancestor and positional variables
        this.supportTicketName = IdParsingUtils.getValueFromIdByName(inner.id(), "supportTickets");
        // set other parameters for create and update
        this.updateParameter = new UpdateSupportTicket();
    }

    @Override
    public SupportManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SupportTicketDetails> createResourceAsync() {
        SupportTicketsInner client = this.manager().inner().supportTickets();
        return client.createAsync(this.supportTicketName, this.inner())
            .map(new Func1<SupportTicketDetailsInner, SupportTicketDetailsInner>() {
               @Override
               public SupportTicketDetailsInner call(SupportTicketDetailsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SupportTicketDetails> updateResourceAsync() {
        SupportTicketsInner client = this.manager().inner().supportTickets();
        return client.updateAsync(this.supportTicketName, this.updateParameter)
            .map(new Func1<SupportTicketDetailsInner, SupportTicketDetailsInner>() {
               @Override
               public SupportTicketDetailsInner call(SupportTicketDetailsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SupportTicketDetailsInner> getInnerAsync() {
        SupportTicketsInner client = this.manager().inner().supportTickets();
        return client.getAsync(this.supportTicketName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new UpdateSupportTicket();
    }

    @Override
    public ContactProfile contactDetails() {
        return this.inner().contactDetails();
    }

    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String enrollmentId() {
        return this.inner().enrollmentId();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime modifiedDate() {
        return this.inner().modifiedDate();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String problemClassificationDisplayName() {
        return this.inner().problemClassificationDisplayName();
    }

    @Override
    public String problemClassificationId() {
        return this.inner().problemClassificationId();
    }

    @Override
    public DateTime problemStartTime() {
        return this.inner().problemStartTime();
    }

    @Override
    public QuotaTicketDetails quotaTicketDetails() {
        return this.inner().quotaTicketDetails();
    }

    @Override
    public Boolean require24X7Response() {
        return this.inner().require24X7Response();
    }

    @Override
    public String serviceDisplayName() {
        return this.inner().serviceDisplayName();
    }

    @Override
    public String serviceId() {
        return this.inner().serviceId();
    }

    @Override
    public ServiceLevelAgreement serviceLevelAgreement() {
        return this.inner().serviceLevelAgreement();
    }

    @Override
    public SeverityLevel severity() {
        return this.inner().severity();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

    @Override
    public SupportEngineer supportEngineer() {
        return this.inner().supportEngineer();
    }

    @Override
    public String supportPlanType() {
        return this.inner().supportPlanType();
    }

    @Override
    public String supportTicketId() {
        return this.inner().supportTicketId();
    }

    @Override
    public TechnicalTicketDetails technicalTicketDetails() {
        return this.inner().technicalTicketDetails();
    }

    @Override
    public String title() {
        return this.inner().title();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SupportTicketDetailsImpl withContactDetails(ContactProfile contactDetails) {
        this.inner().withContactDetails(contactDetails);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withProblemClassificationId(String problemClassificationId) {
        this.inner().withProblemClassificationId(problemClassificationId);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withServiceId(String serviceId) {
        this.inner().withServiceId(serviceId);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withTitle(String title) {
        this.inner().withTitle(title);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withProblemStartTime(DateTime problemStartTime) {
        this.inner().withProblemStartTime(problemStartTime);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withQuotaTicketDetails(QuotaTicketDetails quotaTicketDetails) {
        this.inner().withQuotaTicketDetails(quotaTicketDetails);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withRequire24X7Response(Boolean require24X7Response) {
        this.inner().withRequire24X7Response(require24X7Response);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withServiceLevelAgreement(ServiceLevelAgreement serviceLevelAgreement) {
        this.inner().withServiceLevelAgreement(serviceLevelAgreement);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withSupportEngineer(SupportEngineer supportEngineer) {
        this.inner().withSupportEngineer(supportEngineer);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withSupportTicketId(String supportTicketId) {
        this.inner().withSupportTicketId(supportTicketId);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withTechnicalTicketDetails(TechnicalTicketDetails technicalTicketDetails) {
        this.inner().withTechnicalTicketDetails(technicalTicketDetails);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withContactDetails(UpdateContactProfile contactDetails) {
        this.updateParameter.withContactDetails(contactDetails);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withStatus(Status status) {
        this.updateParameter.withStatus(status);
        return this;
    }

    @Override
    public SupportTicketDetailsImpl withSeverity(SeverityLevel severity) {
        if (isInCreateMode()) {
            this.inner().withSeverity(severity);
        } else {
            this.updateParameter.withSeverity(severity);
        }
        return this;
    }

}
