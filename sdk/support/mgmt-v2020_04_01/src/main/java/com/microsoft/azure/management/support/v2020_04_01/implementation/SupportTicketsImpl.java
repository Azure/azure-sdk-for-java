/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.support.v2020_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.support.v2020_04_01.SupportTickets;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.support.v2020_04_01.SupportTicketDetails;
import com.microsoft.azure.management.support.v2020_04_01.CheckNameAvailabilityOutput;
import com.microsoft.azure.management.support.v2020_04_01.CheckNameAvailabilityInput;
import com.microsoft.azure.arm.utils.PagedListConverter;

class SupportTicketsImpl extends WrapperImpl<SupportTicketsInner> implements SupportTickets {
    private PagedListConverter<SupportTicketDetailsInner, SupportTicketDetails> converter;
    private final SupportManager manager;

    SupportTicketsImpl(SupportManager manager) {
        super(manager.inner().supportTickets());
        this.manager = manager;
        this.converter = new PagedListConverter<SupportTicketDetailsInner, SupportTicketDetails>() {
            @Override
            public Observable<SupportTicketDetails> typeConvertAsync(SupportTicketDetailsInner inner) {
                return Observable.just((SupportTicketDetails) wrapModel(inner));
            }
        };
    }

    public SupportManager manager() {
        return this.manager;
    }

    @Override
    public SupportTicketDetailsImpl define(String name) {
        return wrapModel(name);
    }

    private SupportTicketDetailsImpl wrapModel(SupportTicketDetailsInner inner) {
        return  new SupportTicketDetailsImpl(inner, manager());
    }

    private SupportTicketDetailsImpl wrapModel(String name) {
        return new SupportTicketDetailsImpl(name, this.manager());
    }

    @Override
    public Observable<SupportTicketDetails> getAsync(String supportTicketName) {
        SupportTicketsInner client = this.inner();
        return client.getAsync(supportTicketName)
        .map(new Func1<SupportTicketDetailsInner, SupportTicketDetails>() {
            @Override
            public SupportTicketDetails call(SupportTicketDetailsInner inner) {
                return new SupportTicketDetailsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CheckNameAvailabilityOutput> checkNameAvailabilityAsync(CheckNameAvailabilityInput checkNameAvailabilityInput) {
        SupportTicketsInner client = this.inner();
        return client.checkNameAvailabilityAsync(checkNameAvailabilityInput)
        .map(new Func1<CheckNameAvailabilityOutputInner, CheckNameAvailabilityOutput>() {
            @Override
            public CheckNameAvailabilityOutput call(CheckNameAvailabilityOutputInner inner) {
                return new CheckNameAvailabilityOutputImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<SupportTicketDetails> list() {
        SupportTicketsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<SupportTicketDetails> listAsync() {
        SupportTicketsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<SupportTicketDetailsInner>, Iterable<SupportTicketDetailsInner>>() {
            @Override
            public Iterable<SupportTicketDetailsInner> call(Page<SupportTicketDetailsInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SupportTicketDetailsInner, SupportTicketDetails>() {
            @Override
            public SupportTicketDetails call(SupportTicketDetailsInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
