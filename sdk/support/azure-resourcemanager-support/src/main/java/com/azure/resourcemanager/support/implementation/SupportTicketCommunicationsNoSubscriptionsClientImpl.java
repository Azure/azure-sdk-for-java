// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.support.fluent.SupportTicketCommunicationsNoSubscriptionsClient;
import com.azure.resourcemanager.support.fluent.models.CommunicationDetailsInner;
import com.azure.resourcemanager.support.models.CommunicationsListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * SupportTicketCommunicationsNoSubscriptionsClient.
 */
public final class SupportTicketCommunicationsNoSubscriptionsClientImpl
    implements SupportTicketCommunicationsNoSubscriptionsClient {
    /** The proxy service used to perform REST calls. */
    private final SupportTicketCommunicationsNoSubscriptionsService service;

    /** The service client containing this operation class. */
    private final MicrosoftSupportImpl client;

    /**
     * Initializes an instance of SupportTicketCommunicationsNoSubscriptionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SupportTicketCommunicationsNoSubscriptionsClientImpl(MicrosoftSupportImpl client) {
        this.service =
            RestProxy
                .create(
                    SupportTicketCommunicationsNoSubscriptionsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftSupportSupportTicketCommunicationsNoSubscriptions to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftSupportSupp")
    public interface SupportTicketCommunicationsNoSubscriptionsService {
        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CommunicationsListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("supportTicketName") String supportTicketName,
            @QueryParam("$top") Integer top,
            @QueryParam("$filter") String filter,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CommunicationsListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The
     * only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which
     * you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available
     * for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might
     * cause an error.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation. You can filter by communicationType and createdDate
     *     properties. CommunicationType supports Equals ('eq') operator and createdDate supports Greater Than ('gt')
     *     and Greater Than or Equals ('ge') operators. You may combine the CommunicationType and CreatedDate filters by
     *     Logical And ('and') operator.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CommunicationDetailsInner>> listSinglePageAsync(
        String supportTicketName, Integer top, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (supportTicketName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter supportTicketName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            supportTicketName,
                            top,
                            filter,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<CommunicationDetailsInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The
     * only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which
     * you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available
     * for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might
     * cause an error.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation. You can filter by communicationType and createdDate
     *     properties. CommunicationType supports Equals ('eq') operator and createdDate supports Greater Than ('gt')
     *     and Greater Than or Equals ('ge') operators. You may combine the CommunicationType and CreatedDate filters by
     *     Logical And ('and') operator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CommunicationDetailsInner>> listSinglePageAsync(
        String supportTicketName, Integer top, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (supportTicketName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter supportTicketName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(), supportTicketName, top, filter, this.client.getApiVersion(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The
     * only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which
     * you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available
     * for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might
     * cause an error.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation. You can filter by communicationType and createdDate
     *     properties. CommunicationType supports Equals ('eq') operator and createdDate supports Greater Than ('gt')
     *     and Greater Than or Equals ('ge') operators. You may combine the CommunicationType and CreatedDate filters by
     *     Logical And ('and') operator.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CommunicationDetailsInner> listAsync(String supportTicketName, Integer top, String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(supportTicketName, top, filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The
     * only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which
     * you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available
     * for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might
     * cause an error.
     *
     * @param supportTicketName Support ticket name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CommunicationDetailsInner> listAsync(String supportTicketName) {
        final Integer top = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(supportTicketName, top, filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The
     * only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which
     * you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available
     * for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might
     * cause an error.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation. You can filter by communicationType and createdDate
     *     properties. CommunicationType supports Equals ('eq') operator and createdDate supports Greater Than ('gt')
     *     and Greater Than or Equals ('ge') operators. You may combine the CommunicationType and CreatedDate filters by
     *     Logical And ('and') operator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CommunicationDetailsInner> listAsync(
        String supportTicketName, Integer top, String filter, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(supportTicketName, top, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The
     * only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which
     * you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available
     * for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might
     * cause an error.
     *
     * @param supportTicketName Support ticket name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CommunicationDetailsInner> list(String supportTicketName) {
        final Integer top = null;
        final String filter = null;
        return new PagedIterable<>(listAsync(supportTicketName, top, filter));
    }

    /**
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The
     * only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which
     * you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available
     * for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might
     * cause an error.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation. You can filter by communicationType and createdDate
     *     properties. CommunicationType supports Equals ('eq') operator and createdDate supports Greater Than ('gt')
     *     and Greater Than or Equals ('ge') operators. You may combine the CommunicationType and CreatedDate filters by
     *     Logical And ('and') operator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CommunicationDetailsInner> list(
        String supportTicketName, Integer top, String filter, Context context) {
        return new PagedIterable<>(listAsync(supportTicketName, top, filter, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CommunicationDetailsInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<CommunicationDetailsInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Communication resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CommunicationDetailsInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
