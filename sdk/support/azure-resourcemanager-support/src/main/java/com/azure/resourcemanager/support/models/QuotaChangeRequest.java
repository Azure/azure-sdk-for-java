// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This property is required for providing the region and new quota limits.
 */
@Fluent
public final class QuotaChangeRequest implements JsonSerializable<QuotaChangeRequest> {
    /*
     * Region for which the quota increase request is being made.
     */
    private String region;

    /*
     * Payload of the quota increase request.
     */
    private String payload;

    /**
     * Creates an instance of QuotaChangeRequest class.
     */
    public QuotaChangeRequest() {
    }

    /**
     * Get the region property: Region for which the quota increase request is being made.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: Region for which the quota increase request is being made.
     * 
     * @param region the region value to set.
     * @return the QuotaChangeRequest object itself.
     */
    public QuotaChangeRequest withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the payload property: Payload of the quota increase request.
     * 
     * @return the payload value.
     */
    public String payload() {
        return this.payload;
    }

    /**
     * Set the payload property: Payload of the quota increase request.
     * 
     * @param payload the payload value to set.
     * @return the QuotaChangeRequest object itself.
     */
    public QuotaChangeRequest withPayload(String payload) {
        this.payload = payload;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("payload", this.payload);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaChangeRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaChangeRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuotaChangeRequest.
     */
    public static QuotaChangeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaChangeRequest deserializedQuotaChangeRequest = new QuotaChangeRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("region".equals(fieldName)) {
                    deserializedQuotaChangeRequest.region = reader.getString();
                } else if ("payload".equals(fieldName)) {
                    deserializedQuotaChangeRequest.payload = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaChangeRequest;
        });
    }
}
