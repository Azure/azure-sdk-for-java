// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Updates severity, ticket status, contact details, advanced diagnostic consent and secondary consent in the support
 * ticket.
 */
@Fluent
public final class UpdateSupportTicket implements JsonSerializable<UpdateSupportTicket> {
    /*
     * Severity level.
     */
    private SeverityLevel severity;

    /*
     * Status to be updated on the ticket.
     */
    private Status status;

    /*
     * Contact details to be updated on the support ticket.
     */
    private UpdateContactProfile contactDetails;

    /*
     * Advanced diagnostic consent to be updated on the support ticket.
     */
    private Consent advancedDiagnosticConsent;

    /*
     * This property indicates secondary consents for the support ticket
     */
    private List<SecondaryConsent> secondaryConsent;

    /**
     * Creates an instance of UpdateSupportTicket class.
     */
    public UpdateSupportTicket() {
    }

    /**
     * Get the severity property: Severity level.
     * 
     * @return the severity value.
     */
    public SeverityLevel severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity level.
     * 
     * @param severity the severity value to set.
     * @return the UpdateSupportTicket object itself.
     */
    public UpdateSupportTicket withSeverity(SeverityLevel severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the status property: Status to be updated on the ticket.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: Status to be updated on the ticket.
     * 
     * @param status the status value to set.
     * @return the UpdateSupportTicket object itself.
     */
    public UpdateSupportTicket withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the contactDetails property: Contact details to be updated on the support ticket.
     * 
     * @return the contactDetails value.
     */
    public UpdateContactProfile contactDetails() {
        return this.contactDetails;
    }

    /**
     * Set the contactDetails property: Contact details to be updated on the support ticket.
     * 
     * @param contactDetails the contactDetails value to set.
     * @return the UpdateSupportTicket object itself.
     */
    public UpdateSupportTicket withContactDetails(UpdateContactProfile contactDetails) {
        this.contactDetails = contactDetails;
        return this;
    }

    /**
     * Get the advancedDiagnosticConsent property: Advanced diagnostic consent to be updated on the support ticket.
     * 
     * @return the advancedDiagnosticConsent value.
     */
    public Consent advancedDiagnosticConsent() {
        return this.advancedDiagnosticConsent;
    }

    /**
     * Set the advancedDiagnosticConsent property: Advanced diagnostic consent to be updated on the support ticket.
     * 
     * @param advancedDiagnosticConsent the advancedDiagnosticConsent value to set.
     * @return the UpdateSupportTicket object itself.
     */
    public UpdateSupportTicket withAdvancedDiagnosticConsent(Consent advancedDiagnosticConsent) {
        this.advancedDiagnosticConsent = advancedDiagnosticConsent;
        return this;
    }

    /**
     * Get the secondaryConsent property: This property indicates secondary consents for the support ticket.
     * 
     * @return the secondaryConsent value.
     */
    public List<SecondaryConsent> secondaryConsent() {
        return this.secondaryConsent;
    }

    /**
     * Set the secondaryConsent property: This property indicates secondary consents for the support ticket.
     * 
     * @param secondaryConsent the secondaryConsent value to set.
     * @return the UpdateSupportTicket object itself.
     */
    public UpdateSupportTicket withSecondaryConsent(List<SecondaryConsent> secondaryConsent) {
        this.secondaryConsent = secondaryConsent;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contactDetails() != null) {
            contactDetails().validate();
        }
        if (secondaryConsent() != null) {
            secondaryConsent().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("contactDetails", this.contactDetails);
        jsonWriter.writeStringField("advancedDiagnosticConsent",
            this.advancedDiagnosticConsent == null ? null : this.advancedDiagnosticConsent.toString());
        jsonWriter.writeArrayField("secondaryConsent", this.secondaryConsent,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateSupportTicket from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateSupportTicket if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateSupportTicket.
     */
    public static UpdateSupportTicket fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateSupportTicket deserializedUpdateSupportTicket = new UpdateSupportTicket();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("severity".equals(fieldName)) {
                    deserializedUpdateSupportTicket.severity = SeverityLevel.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedUpdateSupportTicket.status = Status.fromString(reader.getString());
                } else if ("contactDetails".equals(fieldName)) {
                    deserializedUpdateSupportTicket.contactDetails = UpdateContactProfile.fromJson(reader);
                } else if ("advancedDiagnosticConsent".equals(fieldName)) {
                    deserializedUpdateSupportTicket.advancedDiagnosticConsent = Consent.fromString(reader.getString());
                } else if ("secondaryConsent".equals(fieldName)) {
                    List<SecondaryConsent> secondaryConsent
                        = reader.readArray(reader1 -> SecondaryConsent.fromJson(reader1));
                    deserializedUpdateSupportTicket.secondaryConsent = secondaryConsent;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateSupportTicket;
        });
    }
}
