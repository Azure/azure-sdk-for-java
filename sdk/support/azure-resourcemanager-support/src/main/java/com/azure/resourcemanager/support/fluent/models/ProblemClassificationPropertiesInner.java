// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.support.models.SecondaryConsentEnabled;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Details about a problem classification available for an Azure service.
 */
@Fluent
public final class ProblemClassificationPropertiesInner {
    /*
     * Localized name of problem classification.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * This property indicates whether secondary consent is present for problem classification
     */
    @JsonProperty(value = "secondaryConsentEnabled")
    private List<SecondaryConsentEnabled> secondaryConsentEnabled;

    /*
     * String-to-string dictionary for additional metadata.
     */
    @JsonProperty(value = "metadata", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> metadata;

    /*
     * Reference to the parent problem classification which has same structure as problem classification
     */
    @JsonProperty(value = "parentProblemClassification")
    private ProblemClassificationInner parentProblemClassification;

    /**
     * Creates an instance of ProblemClassificationPropertiesInner class.
     */
    public ProblemClassificationPropertiesInner() {
    }

    /**
     * Get the displayName property: Localized name of problem classification.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized name of problem classification.
     * 
     * @param displayName the displayName value to set.
     * @return the ProblemClassificationPropertiesInner object itself.
     */
    public ProblemClassificationPropertiesInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @return the secondaryConsentEnabled value.
     */
    public List<SecondaryConsentEnabled> secondaryConsentEnabled() {
        return this.secondaryConsentEnabled;
    }

    /**
     * Set the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @param secondaryConsentEnabled the secondaryConsentEnabled value to set.
     * @return the ProblemClassificationPropertiesInner object itself.
     */
    public ProblemClassificationPropertiesInner
        withSecondaryConsentEnabled(List<SecondaryConsentEnabled> secondaryConsentEnabled) {
        this.secondaryConsentEnabled = secondaryConsentEnabled;
        return this;
    }

    /**
     * Get the metadata property: String-to-string dictionary for additional metadata.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Get the parentProblemClassification property: Reference to the parent problem classification which has same
     * structure as problem classification.
     * 
     * @return the parentProblemClassification value.
     */
    public ProblemClassificationInner parentProblemClassification() {
        return this.parentProblemClassification;
    }

    /**
     * Set the parentProblemClassification property: Reference to the parent problem classification which has same
     * structure as problem classification.
     * 
     * @param parentProblemClassification the parentProblemClassification value to set.
     * @return the ProblemClassificationPropertiesInner object itself.
     */
    public ProblemClassificationPropertiesInner
        withParentProblemClassification(ProblemClassificationInner parentProblemClassification) {
        this.parentProblemClassification = parentProblemClassification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secondaryConsentEnabled() != null) {
            secondaryConsentEnabled().forEach(e -> e.validate());
        }
        if (parentProblemClassification() != null) {
            parentProblemClassification().validate();
        }
    }
}
