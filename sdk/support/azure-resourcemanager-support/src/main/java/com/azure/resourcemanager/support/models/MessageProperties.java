// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Describes the properties of a Message Details resource.
 */
@Fluent
public final class MessageProperties implements JsonSerializable<MessageProperties> {
    /*
     * Content type.
     */
    private TranscriptContentType contentType;

    /*
     * Direction of communication.
     */
    private CommunicationDirection communicationDirection;

    /*
     * Name of the sender.
     */
    private String sender;

    /*
     * Body of the communication.
     */
    private String body;

    /*
     * Time in UTC (ISO 8601 format) when the communication was created.
     */
    private OffsetDateTime createdDate;

    /**
     * Creates an instance of MessageProperties class.
     */
    public MessageProperties() {
    }

    /**
     * Get the contentType property: Content type.
     * 
     * @return the contentType value.
     */
    public TranscriptContentType contentType() {
        return this.contentType;
    }

    /**
     * Get the communicationDirection property: Direction of communication.
     * 
     * @return the communicationDirection value.
     */
    public CommunicationDirection communicationDirection() {
        return this.communicationDirection;
    }

    /**
     * Get the sender property: Name of the sender.
     * 
     * @return the sender value.
     */
    public String sender() {
        return this.sender;
    }

    /**
     * Set the sender property: Name of the sender.
     * 
     * @param sender the sender value to set.
     * @return the MessageProperties object itself.
     */
    public MessageProperties withSender(String sender) {
        this.sender = sender;
        return this;
    }

    /**
     * Get the body property: Body of the communication.
     * 
     * @return the body value.
     */
    public String body() {
        return this.body;
    }

    /**
     * Set the body property: Body of the communication.
     * 
     * @param body the body value to set.
     * @return the MessageProperties object itself.
     */
    public MessageProperties withBody(String body) {
        this.body = body;
        return this;
    }

    /**
     * Get the createdDate property: Time in UTC (ISO 8601 format) when the communication was created.
     * 
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sender", this.sender);
        jsonWriter.writeStringField("body", this.body);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MessageProperties.
     */
    public static MessageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageProperties deserializedMessageProperties = new MessageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentType".equals(fieldName)) {
                    deserializedMessageProperties.contentType = TranscriptContentType.fromString(reader.getString());
                } else if ("communicationDirection".equals(fieldName)) {
                    deserializedMessageProperties.communicationDirection
                        = CommunicationDirection.fromString(reader.getString());
                } else if ("sender".equals(fieldName)) {
                    deserializedMessageProperties.sender = reader.getString();
                } else if ("body".equals(fieldName)) {
                    deserializedMessageProperties.body = reader.getString();
                } else if ("createdDate".equals(fieldName)) {
                    deserializedMessageProperties.createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessageProperties;
        });
    }
}
