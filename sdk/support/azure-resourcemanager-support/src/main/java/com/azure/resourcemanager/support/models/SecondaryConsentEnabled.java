// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This property indicates whether secondary consent is present for problem classification.
 */
@Fluent
public final class SecondaryConsentEnabled implements JsonSerializable<SecondaryConsentEnabled> {
    /*
     * User consent description.
     */
    private String description;

    /*
     * The Azure service for which secondary consent is needed for case creation.
     */
    private String type;

    /**
     * Creates an instance of SecondaryConsentEnabled class.
     */
    public SecondaryConsentEnabled() {
    }

    /**
     * Get the description property: User consent description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User consent description.
     * 
     * @param description the description value to set.
     * @return the SecondaryConsentEnabled object itself.
     */
    public SecondaryConsentEnabled withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the type property: The Azure service for which secondary consent is needed for case creation.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The Azure service for which secondary consent is needed for case creation.
     * 
     * @param type the type value to set.
     * @return the SecondaryConsentEnabled object itself.
     */
    public SecondaryConsentEnabled withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecondaryConsentEnabled from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecondaryConsentEnabled if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecondaryConsentEnabled.
     */
    public static SecondaryConsentEnabled fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecondaryConsentEnabled deserializedSecondaryConsentEnabled = new SecondaryConsentEnabled();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedSecondaryConsentEnabled.description = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSecondaryConsentEnabled.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecondaryConsentEnabled;
        });
    }
}
