// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This property indicates secondary consent for the support ticket.
 */
@Fluent
public final class SecondaryConsent implements JsonSerializable<SecondaryConsent> {
    /*
     * User consent value provided
     */
    private UserConsent userConsent;

    /*
     * The service name for which the secondary consent is being provided. The value needs to be retrieved from the
     * Problem Classification API response.
     */
    private String type;

    /**
     * Creates an instance of SecondaryConsent class.
     */
    public SecondaryConsent() {
    }

    /**
     * Get the userConsent property: User consent value provided.
     * 
     * @return the userConsent value.
     */
    public UserConsent userConsent() {
        return this.userConsent;
    }

    /**
     * Set the userConsent property: User consent value provided.
     * 
     * @param userConsent the userConsent value to set.
     * @return the SecondaryConsent object itself.
     */
    public SecondaryConsent withUserConsent(UserConsent userConsent) {
        this.userConsent = userConsent;
        return this;
    }

    /**
     * Get the type property: The service name for which the secondary consent is being provided. The value needs to be
     * retrieved from the Problem Classification API response.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The service name for which the secondary consent is being provided. The value needs to be
     * retrieved from the Problem Classification API response.
     * 
     * @param type the type value to set.
     * @return the SecondaryConsent object itself.
     */
    public SecondaryConsent withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userConsent", this.userConsent == null ? null : this.userConsent.toString());
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecondaryConsent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecondaryConsent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecondaryConsent.
     */
    public static SecondaryConsent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecondaryConsent deserializedSecondaryConsent = new SecondaryConsent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userConsent".equals(fieldName)) {
                    deserializedSecondaryConsent.userConsent = UserConsent.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedSecondaryConsent.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecondaryConsent;
        });
    }
}
