// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of ProblemClassifications.
 */
public interface ProblemClassifications {
    /**
     * Classify the right problem classifications (categories) available for a specific Azure service.
     * 
     * @param problemServiceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationsClassificationInput Input to check.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the problem classification Classification API along with {@link Response}.
     */
    Response<ProblemClassificationsClassificationOutput> classifyProblemsWithResponse(String problemServiceName,
        ProblemClassificationsClassificationInput problemClassificationsClassificationInput, Context context);

    /**
     * Classify the right problem classifications (categories) available for a specific Azure service.
     * 
     * @param problemServiceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationsClassificationInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the problem classification Classification API.
     */
    ProblemClassificationsClassificationOutput classifyProblems(String problemServiceName,
        ProblemClassificationsClassificationInput problemClassificationsClassificationInput);

    /**
     * Lists all the problem classifications (categories) available for a specific Azure service. Always use the service
     * and problem classifications obtained programmatically. This practice ensures that you always have the most recent
     * set of service and problem classification Ids.
     * 
     * @param serviceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of ProblemClassification resources as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProblemClassification> list(String serviceName);

    /**
     * Lists all the problem classifications (categories) available for a specific Azure service. Always use the service
     * and problem classifications obtained programmatically. This practice ensures that you always have the most recent
     * set of service and problem classification Ids.
     * 
     * @param serviceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of ProblemClassification resources as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ProblemClassification> list(String serviceName, Context context);

    /**
     * Get problem classification details for a specific Azure service.
     * 
     * @param serviceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationName Name of problem classification.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return problem classification details for a specific Azure service along with {@link Response}.
     */
    Response<ProblemClassification> getWithResponse(String serviceName, String problemClassificationName,
        Context context);

    /**
     * Get problem classification details for a specific Azure service.
     * 
     * @param serviceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationName Name of problem classification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return problem classification details for a specific Azure service.
     */
    ProblemClassification get(String serviceName, String problemClassificationName);
}
