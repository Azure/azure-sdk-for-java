// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.support.fluent.FilesNoSubscriptionsClient;
import com.azure.resourcemanager.support.fluent.models.FileDetailsInner;
import com.azure.resourcemanager.support.models.FilesListResult;
import com.azure.resourcemanager.support.models.UploadFile;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in FilesNoSubscriptionsClient.
 */
public final class FilesNoSubscriptionsClientImpl implements FilesNoSubscriptionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FilesNoSubscriptionsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftSupportImpl client;

    /**
     * Initializes an instance of FilesNoSubscriptionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    FilesNoSubscriptionsClientImpl(MicrosoftSupportImpl client) {
        this.service = RestProxy.create(FilesNoSubscriptionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftSupportFilesNoSubscriptions to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftSupportFile")
    public interface FilesNoSubscriptionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Support/fileWorkspaces/{fileWorkspaceName}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FilesListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("fileWorkspaceName") String fileWorkspaceName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Support/fileWorkspaces/{fileWorkspaceName}/files/{fileName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FileDetailsInner>> get(@HostParam("$host") String endpoint,
            @PathParam("fileWorkspaceName") String fileWorkspaceName, @PathParam("fileName") String fileName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Support/fileWorkspaces/{fileWorkspaceName}/files/{fileName}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FileDetailsInner>> create(@HostParam("$host") String endpoint,
            @PathParam("fileWorkspaceName") String fileWorkspaceName, @PathParam("fileName") String fileName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") FileDetailsInner createFileParameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Support/fileWorkspaces/{fileWorkspaceName}/files/{fileName}/upload")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> upload(@HostParam("$host") String endpoint,
            @PathParam("fileWorkspaceName") String fileWorkspaceName, @PathParam("fileName") String fileName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") UploadFile uploadFile,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FilesListResult>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists all the Files information under a workspace for an Azure subscription.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileDetailsInner>> listSinglePageAsync(String fileWorkspaceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), fileWorkspaceName,
                this.client.getApiVersion(), accept, context))
            .<PagedResponse<FileDetailsInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all the Files information under a workspace for an Azure subscription.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileDetailsInner>> listSinglePageAsync(String fileWorkspaceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), fileWorkspaceName, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists all the Files information under a workspace for an Azure subscription.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FileDetailsInner> listAsync(String fileWorkspaceName) {
        return new PagedFlux<>(() -> listSinglePageAsync(fileWorkspaceName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all the Files information under a workspace for an Azure subscription.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FileDetailsInner> listAsync(String fileWorkspaceName, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(fileWorkspaceName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all the Files information under a workspace for an Azure subscription.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FileDetailsInner> list(String fileWorkspaceName) {
        return new PagedIterable<>(listAsync(fileWorkspaceName));
    }

    /**
     * Lists all the Files information under a workspace for an Azure subscription.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FileDetailsInner> list(String fileWorkspaceName, Context context) {
        return new PagedIterable<>(listAsync(fileWorkspaceName, context));
    }

    /**
     * Returns details of a specific file in a work space.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param fileName File Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FileDetailsInner>> getWithResponseAsync(String fileWorkspaceName, String fileName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), fileWorkspaceName, fileName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns details of a specific file in a work space.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param fileName File Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FileDetailsInner>> getWithResponseAsync(String fileWorkspaceName, String fileName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), fileWorkspaceName, fileName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Returns details of a specific file in a work space.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param fileName File Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileDetailsInner> getAsync(String fileWorkspaceName, String fileName) {
        return getWithResponseAsync(fileWorkspaceName, fileName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns details of a specific file in a work space.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param fileName File Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileDetailsInner> getWithResponse(String fileWorkspaceName, String fileName, Context context) {
        return getWithResponseAsync(fileWorkspaceName, fileName, context).block();
    }

    /**
     * Returns details of a specific file in a work space.
     * 
     * @param fileWorkspaceName File Workspace Name.
     * @param fileName File Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileDetailsInner get(String fileWorkspaceName, String fileName) {
        return getWithResponse(fileWorkspaceName, fileName, Context.NONE).getValue();
    }

    /**
     * Creates a new file under a workspace.
     * 
     * @param fileWorkspaceName File workspace name.
     * @param fileName File name.
     * @param createFileParameters Create file object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FileDetailsInner>> createWithResponseAsync(String fileWorkspaceName, String fileName,
        FileDetailsInner createFileParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        if (createFileParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter createFileParameters is required and cannot be null."));
        } else {
            createFileParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), fileWorkspaceName, fileName,
                this.client.getApiVersion(), createFileParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a new file under a workspace.
     * 
     * @param fileWorkspaceName File workspace name.
     * @param fileName File name.
     * @param createFileParameters Create file object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FileDetailsInner>> createWithResponseAsync(String fileWorkspaceName, String fileName,
        FileDetailsInner createFileParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        if (createFileParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter createFileParameters is required and cannot be null."));
        } else {
            createFileParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), fileWorkspaceName, fileName, this.client.getApiVersion(),
            createFileParameters, accept, context);
    }

    /**
     * Creates a new file under a workspace.
     * 
     * @param fileWorkspaceName File workspace name.
     * @param fileName File name.
     * @param createFileParameters Create file object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileDetailsInner> createAsync(String fileWorkspaceName, String fileName,
        FileDetailsInner createFileParameters) {
        return createWithResponseAsync(fileWorkspaceName, fileName, createFileParameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates a new file under a workspace.
     * 
     * @param fileWorkspaceName File workspace name.
     * @param fileName File name.
     * @param createFileParameters Create file object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileDetailsInner> createWithResponse(String fileWorkspaceName, String fileName,
        FileDetailsInner createFileParameters, Context context) {
        return createWithResponseAsync(fileWorkspaceName, fileName, createFileParameters, context).block();
    }

    /**
     * Creates a new file under a workspace.
     * 
     * @param fileWorkspaceName File workspace name.
     * @param fileName File name.
     * @param createFileParameters Create file object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents File Details resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileDetailsInner create(String fileWorkspaceName, String fileName, FileDetailsInner createFileParameters) {
        return createWithResponse(fileWorkspaceName, fileName, createFileParameters, Context.NONE).getValue();
    }

    /**
     * This API allows you to upload content to a file.
     * 
     * @param fileWorkspaceName File WorkspaceName.
     * @param fileName File Name.
     * @param uploadFile UploadFile object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> uploadWithResponseAsync(String fileWorkspaceName, String fileName,
        UploadFile uploadFile) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        if (uploadFile == null) {
            return Mono.error(new IllegalArgumentException("Parameter uploadFile is required and cannot be null."));
        } else {
            uploadFile.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.upload(this.client.getEndpoint(), fileWorkspaceName, fileName,
                this.client.getApiVersion(), uploadFile, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This API allows you to upload content to a file.
     * 
     * @param fileWorkspaceName File WorkspaceName.
     * @param fileName File Name.
     * @param uploadFile UploadFile object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> uploadWithResponseAsync(String fileWorkspaceName, String fileName,
        UploadFile uploadFile, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (fileWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter fileWorkspaceName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        if (uploadFile == null) {
            return Mono.error(new IllegalArgumentException("Parameter uploadFile is required and cannot be null."));
        } else {
            uploadFile.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.upload(this.client.getEndpoint(), fileWorkspaceName, fileName, this.client.getApiVersion(),
            uploadFile, accept, context);
    }

    /**
     * This API allows you to upload content to a file.
     * 
     * @param fileWorkspaceName File WorkspaceName.
     * @param fileName File Name.
     * @param uploadFile UploadFile object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> uploadAsync(String fileWorkspaceName, String fileName, UploadFile uploadFile) {
        return uploadWithResponseAsync(fileWorkspaceName, fileName, uploadFile).flatMap(ignored -> Mono.empty());
    }

    /**
     * This API allows you to upload content to a file.
     * 
     * @param fileWorkspaceName File WorkspaceName.
     * @param fileName File Name.
     * @param uploadFile UploadFile object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadWithResponse(String fileWorkspaceName, String fileName, UploadFile uploadFile,
        Context context) {
        return uploadWithResponseAsync(fileWorkspaceName, fileName, uploadFile, context).block();
    }

    /**
     * This API allows you to upload content to a file.
     * 
     * @param fileWorkspaceName File WorkspaceName.
     * @param fileName File Name.
     * @param uploadFile UploadFile object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void upload(String fileWorkspaceName, String fileName, UploadFile uploadFile) {
        uploadWithResponse(fileWorkspaceName, fileName, uploadFile, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileDetailsInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<FileDetailsInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that represents a collection of File resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileDetailsInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
