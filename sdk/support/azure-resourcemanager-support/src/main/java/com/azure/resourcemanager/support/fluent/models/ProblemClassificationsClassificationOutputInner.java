// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.support.models.ProblemClassificationsClassificationResult;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Output of the problem classification Classification API.
 */
@Fluent
public final class ProblemClassificationsClassificationOutputInner {
    /*
     * Set of problem classification objects classified.
     */
    @JsonProperty(value = "problemClassificationResults")
    private List<ProblemClassificationsClassificationResult> problemClassificationResults;

    /**
     * Creates an instance of ProblemClassificationsClassificationOutputInner class.
     */
    public ProblemClassificationsClassificationOutputInner() {
    }

    /**
     * Get the problemClassificationResults property: Set of problem classification objects classified.
     * 
     * @return the problemClassificationResults value.
     */
    public List<ProblemClassificationsClassificationResult> problemClassificationResults() {
        return this.problemClassificationResults;
    }

    /**
     * Set the problemClassificationResults property: Set of problem classification objects classified.
     * 
     * @param problemClassificationResults the problemClassificationResults value to set.
     * @return the ProblemClassificationsClassificationOutputInner object itself.
     */
    public ProblemClassificationsClassificationOutputInner withProblemClassificationResults(
        List<ProblemClassificationsClassificationResult> problemClassificationResults) {
        this.problemClassificationResults = problemClassificationResults;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (problemClassificationResults() != null) {
            problemClassificationResults().forEach(e -> e.validate());
        }
    }
}
