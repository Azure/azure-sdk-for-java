// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.support.models.SecondaryConsentEnabled;
import java.io.IOException;
import java.util.List;

/**
 * Details about a problem classification available for an Azure service.
 */
@Fluent
public final class ProblemClassificationProperties implements JsonSerializable<ProblemClassificationProperties> {
    /*
     * Localized name of problem classification.
     */
    private String displayName;

    /*
     * This property indicates whether secondary consent is present for problem classification
     */
    private List<SecondaryConsentEnabled> secondaryConsentEnabled;

    /**
     * Creates an instance of ProblemClassificationProperties class.
     */
    public ProblemClassificationProperties() {
    }

    /**
     * Get the displayName property: Localized name of problem classification.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized name of problem classification.
     * 
     * @param displayName the displayName value to set.
     * @return the ProblemClassificationProperties object itself.
     */
    public ProblemClassificationProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @return the secondaryConsentEnabled value.
     */
    public List<SecondaryConsentEnabled> secondaryConsentEnabled() {
        return this.secondaryConsentEnabled;
    }

    /**
     * Set the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @param secondaryConsentEnabled the secondaryConsentEnabled value to set.
     * @return the ProblemClassificationProperties object itself.
     */
    public ProblemClassificationProperties
        withSecondaryConsentEnabled(List<SecondaryConsentEnabled> secondaryConsentEnabled) {
        this.secondaryConsentEnabled = secondaryConsentEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secondaryConsentEnabled() != null) {
            secondaryConsentEnabled().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("secondaryConsentEnabled", this.secondaryConsentEnabled,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProblemClassificationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProblemClassificationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProblemClassificationProperties.
     */
    public static ProblemClassificationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProblemClassificationProperties deserializedProblemClassificationProperties
                = new ProblemClassificationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedProblemClassificationProperties.displayName = reader.getString();
                } else if ("secondaryConsentEnabled".equals(fieldName)) {
                    List<SecondaryConsentEnabled> secondaryConsentEnabled
                        = reader.readArray(reader1 -> SecondaryConsentEnabled.fromJson(reader1));
                    deserializedProblemClassificationProperties.secondaryConsentEnabled = secondaryConsentEnabled;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProblemClassificationProperties;
        });
    }
}
