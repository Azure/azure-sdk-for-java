// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.support.fluent.ProblemClassificationsNoSubscriptionsClient;
import com.azure.resourcemanager.support.fluent.models.ProblemClassificationsClassificationOutputInner;
import com.azure.resourcemanager.support.models.ProblemClassificationsClassificationInput;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ProblemClassificationsNoSubscriptionsClient.
 */
public final class ProblemClassificationsNoSubscriptionsClientImpl
    implements ProblemClassificationsNoSubscriptionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ProblemClassificationsNoSubscriptionsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftSupportImpl client;

    /**
     * Initializes an instance of ProblemClassificationsNoSubscriptionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ProblemClassificationsNoSubscriptionsClientImpl(MicrosoftSupportImpl client) {
        this.service = RestProxy.create(ProblemClassificationsNoSubscriptionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftSupportProblemClassificationsNoSubscriptions to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftSupportProb")
    public interface ProblemClassificationsNoSubscriptionsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Support/services/{problemServiceName}/classifyProblems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProblemClassificationsClassificationOutputInner>> classifyProblems(
            @HostParam("$host") String endpoint, @PathParam("problemServiceName") String problemServiceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ProblemClassificationsClassificationInput problemClassificationsClassificationInput,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Classify the right problem classifications (categories) available for a specific Azure service.
     * 
     * @param problemServiceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationsClassificationInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the problem classification Classification API along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProblemClassificationsClassificationOutputInner>> classifyProblemsWithResponseAsync(
        String problemServiceName,
        ProblemClassificationsClassificationInput problemClassificationsClassificationInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (problemServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter problemServiceName is required and cannot be null."));
        }
        if (problemClassificationsClassificationInput == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter problemClassificationsClassificationInput is required and cannot be null."));
        } else {
            problemClassificationsClassificationInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.classifyProblems(this.client.getEndpoint(), problemServiceName,
                this.client.getApiVersion(), problemClassificationsClassificationInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Classify the right problem classifications (categories) available for a specific Azure service.
     * 
     * @param problemServiceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationsClassificationInput Input to check.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the problem classification Classification API along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProblemClassificationsClassificationOutputInner>> classifyProblemsWithResponseAsync(
        String problemServiceName, ProblemClassificationsClassificationInput problemClassificationsClassificationInput,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (problemServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter problemServiceName is required and cannot be null."));
        }
        if (problemClassificationsClassificationInput == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter problemClassificationsClassificationInput is required and cannot be null."));
        } else {
            problemClassificationsClassificationInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.classifyProblems(this.client.getEndpoint(), problemServiceName, this.client.getApiVersion(),
            problemClassificationsClassificationInput, accept, context);
    }

    /**
     * Classify the right problem classifications (categories) available for a specific Azure service.
     * 
     * @param problemServiceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationsClassificationInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the problem classification Classification API on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProblemClassificationsClassificationOutputInner> classifyProblemsAsync(String problemServiceName,
        ProblemClassificationsClassificationInput problemClassificationsClassificationInput) {
        return classifyProblemsWithResponseAsync(problemServiceName, problemClassificationsClassificationInput)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Classify the right problem classifications (categories) available for a specific Azure service.
     * 
     * @param problemServiceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationsClassificationInput Input to check.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the problem classification Classification API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ProblemClassificationsClassificationOutputInner> classifyProblemsWithResponse(
        String problemServiceName, ProblemClassificationsClassificationInput problemClassificationsClassificationInput,
        Context context) {
        return classifyProblemsWithResponseAsync(problemServiceName, problemClassificationsClassificationInput, context)
            .block();
    }

    /**
     * Classify the right problem classifications (categories) available for a specific Azure service.
     * 
     * @param problemServiceName Name of the Azure service for which the problem classifications need to be retrieved.
     * @param problemClassificationsClassificationInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the problem classification Classification API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProblemClassificationsClassificationOutputInner classifyProblems(String problemServiceName,
        ProblemClassificationsClassificationInput problemClassificationsClassificationInput) {
        return classifyProblemsWithResponse(problemServiceName, problemClassificationsClassificationInput, Context.NONE)
            .getValue();
    }
}
