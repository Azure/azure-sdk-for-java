// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.support.fluent.CommunicationsNoSubscriptionsClient;
import com.azure.resourcemanager.support.fluent.models.CheckNameAvailabilityOutputInner;
import com.azure.resourcemanager.support.fluent.models.CommunicationDetailsInner;
import com.azure.resourcemanager.support.models.CheckNameAvailabilityInput;
import com.azure.resourcemanager.support.models.CheckNameAvailabilityOutput;
import com.azure.resourcemanager.support.models.CommunicationDetails;
import com.azure.resourcemanager.support.models.CommunicationsNoSubscriptions;

public final class CommunicationsNoSubscriptionsImpl implements CommunicationsNoSubscriptions {
    private static final ClientLogger LOGGER = new ClientLogger(CommunicationsNoSubscriptionsImpl.class);

    private final CommunicationsNoSubscriptionsClient innerClient;

    private final com.azure.resourcemanager.support.SupportManager serviceManager;

    public CommunicationsNoSubscriptionsImpl(CommunicationsNoSubscriptionsClient innerClient,
        com.azure.resourcemanager.support.SupportManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CheckNameAvailabilityOutput> checkNameAvailabilityWithResponse(String supportTicketName,
        CheckNameAvailabilityInput checkNameAvailabilityInput, Context context) {
        Response<CheckNameAvailabilityOutputInner> inner = this.serviceClient()
            .checkNameAvailabilityWithResponse(supportTicketName, checkNameAvailabilityInput, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckNameAvailabilityOutputImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckNameAvailabilityOutput checkNameAvailability(String supportTicketName,
        CheckNameAvailabilityInput checkNameAvailabilityInput) {
        CheckNameAvailabilityOutputInner inner
            = this.serviceClient().checkNameAvailability(supportTicketName, checkNameAvailabilityInput);
        if (inner != null) {
            return new CheckNameAvailabilityOutputImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<CommunicationDetails> list(String supportTicketName) {
        PagedIterable<CommunicationDetailsInner> inner = this.serviceClient().list(supportTicketName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunicationDetailsImpl(inner1, this.manager()));
    }

    public PagedIterable<CommunicationDetails> list(String supportTicketName, Integer top, String filter,
        Context context) {
        PagedIterable<CommunicationDetailsInner> inner
            = this.serviceClient().list(supportTicketName, top, filter, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunicationDetailsImpl(inner1, this.manager()));
    }

    public Response<CommunicationDetails> getWithResponse(String supportTicketName, String communicationName,
        Context context) {
        Response<CommunicationDetailsInner> inner
            = this.serviceClient().getWithResponse(supportTicketName, communicationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CommunicationDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CommunicationDetails get(String supportTicketName, String communicationName) {
        CommunicationDetailsInner inner = this.serviceClient().get(supportTicketName, communicationName);
        if (inner != null) {
            return new CommunicationDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommunicationDetails create(String supportTicketName, String communicationName,
        CommunicationDetailsInner createCommunicationParameters) {
        CommunicationDetailsInner inner
            = this.serviceClient().create(supportTicketName, communicationName, createCommunicationParameters);
        if (inner != null) {
            return new CommunicationDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommunicationDetails create(String supportTicketName, String communicationName,
        CommunicationDetailsInner createCommunicationParameters, Context context) {
        CommunicationDetailsInner inner
            = this.serviceClient().create(supportTicketName, communicationName, createCommunicationParameters, context);
        if (inner != null) {
            return new CommunicationDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private CommunicationsNoSubscriptionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.support.SupportManager manager() {
        return this.serviceManager;
    }
}
