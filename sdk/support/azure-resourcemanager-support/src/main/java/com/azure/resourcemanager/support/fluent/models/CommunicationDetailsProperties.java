// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.support.models.CommunicationDirection;
import com.azure.resourcemanager.support.models.CommunicationType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Describes the properties of a communication resource.
 */
@Fluent
public final class CommunicationDetailsProperties implements JsonSerializable<CommunicationDetailsProperties> {
    /*
     * Communication type.
     */
    private CommunicationType communicationType;

    /*
     * Direction of communication.
     */
    private CommunicationDirection communicationDirection;

    /*
     * Email address of the sender. This property is required if called by a service principal.
     */
    private String sender;

    /*
     * Subject of the communication.
     */
    private String subject;

    /*
     * Body of the communication.
     */
    private String body;

    /*
     * Time in UTC (ISO 8601 format) when the communication was created.
     */
    private OffsetDateTime createdDate;

    /**
     * Creates an instance of CommunicationDetailsProperties class.
     */
    public CommunicationDetailsProperties() {
    }

    /**
     * Get the communicationType property: Communication type.
     * 
     * @return the communicationType value.
     */
    public CommunicationType communicationType() {
        return this.communicationType;
    }

    /**
     * Get the communicationDirection property: Direction of communication.
     * 
     * @return the communicationDirection value.
     */
    public CommunicationDirection communicationDirection() {
        return this.communicationDirection;
    }

    /**
     * Get the sender property: Email address of the sender. This property is required if called by a service principal.
     * 
     * @return the sender value.
     */
    public String sender() {
        return this.sender;
    }

    /**
     * Set the sender property: Email address of the sender. This property is required if called by a service principal.
     * 
     * @param sender the sender value to set.
     * @return the CommunicationDetailsProperties object itself.
     */
    public CommunicationDetailsProperties withSender(String sender) {
        this.sender = sender;
        return this;
    }

    /**
     * Get the subject property: Subject of the communication.
     * 
     * @return the subject value.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * Set the subject property: Subject of the communication.
     * 
     * @param subject the subject value to set.
     * @return the CommunicationDetailsProperties object itself.
     */
    public CommunicationDetailsProperties withSubject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Get the body property: Body of the communication.
     * 
     * @return the body value.
     */
    public String body() {
        return this.body;
    }

    /**
     * Set the body property: Body of the communication.
     * 
     * @param body the body value to set.
     * @return the CommunicationDetailsProperties object itself.
     */
    public CommunicationDetailsProperties withBody(String body) {
        this.body = body;
        return this;
    }

    /**
     * Get the createdDate property: Time in UTC (ISO 8601 format) when the communication was created.
     * 
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subject() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subject in model CommunicationDetailsProperties"));
        }
        if (body() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property body in model CommunicationDetailsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CommunicationDetailsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subject", this.subject);
        jsonWriter.writeStringField("body", this.body);
        jsonWriter.writeStringField("sender", this.sender);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationDetailsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationDetailsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunicationDetailsProperties.
     */
    public static CommunicationDetailsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationDetailsProperties deserializedCommunicationDetailsProperties
                = new CommunicationDetailsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subject".equals(fieldName)) {
                    deserializedCommunicationDetailsProperties.subject = reader.getString();
                } else if ("body".equals(fieldName)) {
                    deserializedCommunicationDetailsProperties.body = reader.getString();
                } else if ("communicationType".equals(fieldName)) {
                    deserializedCommunicationDetailsProperties.communicationType
                        = CommunicationType.fromString(reader.getString());
                } else if ("communicationDirection".equals(fieldName)) {
                    deserializedCommunicationDetailsProperties.communicationDirection
                        = CommunicationDirection.fromString(reader.getString());
                } else if ("sender".equals(fieldName)) {
                    deserializedCommunicationDetailsProperties.sender = reader.getString();
                } else if ("createdDate".equals(fieldName)) {
                    deserializedCommunicationDetailsProperties.createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunicationDetailsProperties;
        });
    }
}
