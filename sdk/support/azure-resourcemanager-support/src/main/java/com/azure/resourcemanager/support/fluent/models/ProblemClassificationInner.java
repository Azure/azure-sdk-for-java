// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.support.models.SecondaryConsentEnabled;
import java.io.IOException;
import java.util.List;

/**
 * ProblemClassification resource object.
 */
@Fluent
public final class ProblemClassificationInner implements JsonSerializable<ProblemClassificationInner> {
    /*
     * Id of the resource.
     */
    private String id;

    /*
     * Name of the resource.
     */
    private String name;

    /*
     * Type of the resource 'Microsoft.Support/problemClassification'.
     */
    private String type;

    /*
     * Properties of the resource.
     */
    private ProblemClassificationProperties innerProperties;

    /**
     * Creates an instance of ProblemClassificationInner class.
     */
    public ProblemClassificationInner() {
    }

    /**
     * Get the id property: Id of the resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Type of the resource 'Microsoft.Support/problemClassification'.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: Properties of the resource.
     * 
     * @return the innerProperties value.
     */
    private ProblemClassificationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the displayName property: Localized name of problem classification.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: Localized name of problem classification.
     * 
     * @param displayName the displayName value to set.
     * @return the ProblemClassificationInner object itself.
     */
    public ProblemClassificationInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProblemClassificationProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @return the secondaryConsentEnabled value.
     */
    public List<SecondaryConsentEnabled> secondaryConsentEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().secondaryConsentEnabled();
    }

    /**
     * Set the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @param secondaryConsentEnabled the secondaryConsentEnabled value to set.
     * @return the ProblemClassificationInner object itself.
     */
    public ProblemClassificationInner
        withSecondaryConsentEnabled(List<SecondaryConsentEnabled> secondaryConsentEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProblemClassificationProperties();
        }
        this.innerProperties().withSecondaryConsentEnabled(secondaryConsentEnabled);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProblemClassificationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProblemClassificationInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProblemClassificationInner.
     */
    public static ProblemClassificationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProblemClassificationInner deserializedProblemClassificationInner = new ProblemClassificationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedProblemClassificationInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedProblemClassificationInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedProblemClassificationInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedProblemClassificationInner.innerProperties
                        = ProblemClassificationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProblemClassificationInner;
        });
    }
}
