// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.ServiceClassificationOutput;
import com.azure.resourcemanager.support.models.ServiceClassificationRequest;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServiceClassificationsNoSubscriptionsClassifyServicesWithResponseMockTests {
    @Test
    public void testClassifyServicesWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"serviceClassificationResults\":[{\"childService\":{\"serviceId\":\"co\",\"displayName\":\"hp\",\"resourceTypes\":[\"gymare\",\"n\",\"jxqugjhky\",\"ubeddg\"]},\"serviceId\":\"ofwq\",\"displayName\":\"qal\",\"resourceTypes\":[\"njijpxacqqudf\",\"byxbaaabjy\",\"ayffim\",\"zrtuzq\"]},{\"childService\":{\"serviceId\":\"exn\",\"displayName\":\"fdnw\",\"resourceTypes\":[\"ewzsyyceuzsoib\",\"ud\"]},\"serviceId\":\"rx\",\"displayName\":\"thzvaytdwkqbrqu\",\"resourceTypes\":[\"xhexiilivpdti\",\"r\",\"tdqoaxoruzfgsq\"]},{\"childService\":{\"serviceId\":\"xrxxlep\",\"displayName\":\"amxjezwlw\",\"resourceTypes\":[\"uqlcvydy\",\"atdooaojkniod\",\"oo\"]},\"serviceId\":\"wnujhemmsbvdk\",\"displayName\":\"odtji\",\"resourceTypes\":[\"jlfltkacjvefkdlf\"]},{\"childService\":{\"serviceId\":\"ggkfpagaowpul\",\"displayName\":\"blylsyxkqjnsj\",\"resourceTypes\":[\"tiagx\"]},\"serviceId\":\"sz\",\"displayName\":\"mpsbzkfzbeyv\",\"resourceTypes\":[\"icvi\"]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SupportManager manager = SupportManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        ServiceClassificationOutput response = manager.serviceClassificationsNoSubscriptions()
            .classifyServicesWithResponse(new ServiceClassificationRequest().withIssueSummary("qidbqfatpxllrxcy")
                .withResourceId("oadsuvar").withAdditionalContext("wdmjsjqbjhhyx"), com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("njijpxacqqudf", response.serviceClassificationResults().get(0).resourceTypes().get(0));
        Assertions.assertEquals("gymare",
            response.serviceClassificationResults().get(0).childService().resourceTypes().get(0));
    }
}
