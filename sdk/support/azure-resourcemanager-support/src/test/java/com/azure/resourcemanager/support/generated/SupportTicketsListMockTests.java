// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.SupportTicketDetails;
import com.azure.resourcemanager.support.models.UserConsent;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SupportTicketsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"supportTicketId\":\"bq\",\"description\":\"qvmkcxo\",\"problemClassificationId\":\"apvhelxprgly\",\"problemClassificationDisplayName\":\"dd\",\"severity\":\"moderate\",\"enrollmentId\":\"bcuejrjxgci\",\"require24X7Response\":false,\"advancedDiagnosticConsent\":\"Yes\",\"problemScopingQuestions\":\"sxsdqrhzoymibm\",\"supportPlanId\":\"yiba\",\"contactDetails\":{\"firstName\":\"wfluszdt\",\"lastName\":\"hrkwo\",\"preferredContactMethod\":\"email\",\"primaryEmailAddress\":\"yvoqa\",\"additionalEmailAddresses\":[\"expbtg\",\"wbwo\",\"nwashrtd\"],\"phoneNumber\":\"cnqxwbpokulpi\",\"preferredTimeZone\":\"jwaa\",\"country\":\"ipqiiobyuqerpq\",\"preferredSupportLanguage\":\"pqwcciuqgbdbutau\"},\"serviceLevelAgreement\":{\"startTime\":\"2021-02-05T19:32:33Z\",\"expirationTime\":\"2021-11-26T16:59:10Z\",\"slaMinutes\":752172532},\"supportEngineer\":{\"emailAddress\":\"hykojoxafnndlpic\"},\"supportPlanType\":\"o\",\"supportPlanDisplayName\":\"kcdyhbpk\",\"title\":\"pwdreqnovvqf\",\"problemStartTime\":\"2021-11-23T10:35:07Z\",\"serviceId\":\"jxywsuws\",\"serviceDisplayName\":\"s\",\"status\":\"sytgadgvraea\",\"createdDate\":\"2021-06-04T10:57:57Z\",\"modifiedDate\":\"2021-03-19T05:46:56Z\",\"fileWorkspaceName\":\"arrwlquu\",\"technicalTicketDetails\":{\"resourceId\":\"qkacewii\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"ubjibww\",\"quotaChangeRequestVersion\":\"tohqkvpuvksgp\",\"quotaChangeRequests\":[{\"region\":\"nynfsynljphuo\",\"payload\":\"odlqiyntor\"},{\"region\":\"hleosjsw\",\"payload\":\"mslyzrpzbchckqqz\"},{\"region\":\"ox\",\"payload\":\"suiizynkedyat\"},{\"region\":\"yhqmibzyhwi\",\"payload\":\"mypyynpcdpu\"}]},\"secondaryConsent\":[{\"userConsent\":\"Yes\",\"type\":\"z\"},{\"userConsent\":\"Yes\",\"type\":\"iknsorgjh\"},{\"userConsent\":\"Yes\",\"type\":\"tlwwrlk\"},{\"userConsent\":\"Yes\",\"type\":\"cvokotllxdyhg\"}]},\"id\":\"y\",\"name\":\"cogjltdtbn\",\"type\":\"hadoocrk\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SupportManager manager =
            SupportManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SupportTicketDetails> response =
            manager.supportTickets().list(10985850, "pajqgxysm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bq", response.iterator().next().supportTicketId());
        Assertions.assertEquals("qvmkcxo", response.iterator().next().description());
        Assertions.assertEquals("apvhelxprgly", response.iterator().next().problemClassificationId());
        Assertions.assertEquals(SeverityLevel.MODERATE, response.iterator().next().severity());
        Assertions.assertEquals(false, response.iterator().next().require24X7Response());
        Assertions.assertEquals(Consent.YES, response.iterator().next().advancedDiagnosticConsent());
        Assertions.assertEquals("sxsdqrhzoymibm", response.iterator().next().problemScopingQuestions());
        Assertions.assertEquals("yiba", response.iterator().next().supportPlanId());
        Assertions.assertEquals("wfluszdt", response.iterator().next().contactDetails().firstName());
        Assertions.assertEquals("hrkwo", response.iterator().next().contactDetails().lastName());
        Assertions
            .assertEquals(
                PreferredContactMethod.EMAIL, response.iterator().next().contactDetails().preferredContactMethod());
        Assertions.assertEquals("yvoqa", response.iterator().next().contactDetails().primaryEmailAddress());
        Assertions
            .assertEquals("expbtg", response.iterator().next().contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("cnqxwbpokulpi", response.iterator().next().contactDetails().phoneNumber());
        Assertions.assertEquals("jwaa", response.iterator().next().contactDetails().preferredTimeZone());
        Assertions.assertEquals("ipqiiobyuqerpq", response.iterator().next().contactDetails().country());
        Assertions
            .assertEquals("pqwcciuqgbdbutau", response.iterator().next().contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("pwdreqnovvqf", response.iterator().next().title());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-11-23T10:35:07Z"), response.iterator().next().problemStartTime());
        Assertions.assertEquals("jxywsuws", response.iterator().next().serviceId());
        Assertions.assertEquals("arrwlquu", response.iterator().next().fileWorkspaceName());
        Assertions.assertEquals("qkacewii", response.iterator().next().technicalTicketDetails().resourceId());
        Assertions.assertEquals("ubjibww", response.iterator().next().quotaTicketDetails().quotaChangeRequestSubType());
        Assertions
            .assertEquals("tohqkvpuvksgp", response.iterator().next().quotaTicketDetails().quotaChangeRequestVersion());
        Assertions
            .assertEquals(
                "nynfsynljphuo", response.iterator().next().quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions
            .assertEquals(
                "odlqiyntor", response.iterator().next().quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.YES, response.iterator().next().secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("z", response.iterator().next().secondaryConsent().get(0).type());
    }
}
