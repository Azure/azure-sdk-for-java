// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.support.fluent.models.SupportTicketDetailsProperties;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.ContactProfile;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.QuotaChangeRequest;
import com.azure.resourcemanager.support.models.QuotaTicketDetails;
import com.azure.resourcemanager.support.models.SecondaryConsent;
import com.azure.resourcemanager.support.models.ServiceLevelAgreement;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.SupportEngineer;
import com.azure.resourcemanager.support.models.TechnicalTicketDetails;
import com.azure.resourcemanager.support.models.UserConsent;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SupportTicketDetailsPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SupportTicketDetailsProperties model =
            BinaryData
                .fromString(
                    "{\"supportTicketId\":\"tdbhrbnla\",\"description\":\"kx\",\"problemClassificationId\":\"yskpbhen\",\"problemClassificationDisplayName\":\"kcxywnyt\",\"severity\":\"minimal\",\"enrollmentId\":\"yn\",\"require24X7Response\":true,\"advancedDiagnosticConsent\":\"Yes\",\"problemScopingQuestions\":\"yxczfclh\",\"supportPlanId\":\"xdbabphlwr\",\"contactDetails\":{\"firstName\":\"lfktsths\",\"lastName\":\"cocmnyyaztt\",\"preferredContactMethod\":\"email\",\"primaryEmailAddress\":\"wwrq\",\"additionalEmailAddresses\":[\"dckzywbiexz\",\"eyueaxibxujwb\",\"qwalmuzyoxaepd\",\"zjancuxr\"],\"phoneNumber\":\"wbavxbniwdj\",\"preferredTimeZone\":\"wz\",\"country\":\"s\",\"preferredSupportLanguage\":\"bpg\"},\"serviceLevelAgreement\":{\"startTime\":\"2020-12-28T21:21:46Z\",\"expirationTime\":\"2021-01-12T15:14:05Z\",\"slaMinutes\":999605731},\"supportEngineer\":{\"emailAddress\":\"zpfzabglc\"},\"supportPlanType\":\"xwtctyqiklbbovpl\",\"supportPlanDisplayName\":\"bhvgy\",\"title\":\"gu\",\"problemStartTime\":\"2021-08-08T10:54:54Z\",\"serviceId\":\"mkfssxqukkfplgm\",\"serviceDisplayName\":\"xnkjzkdesl\",\"status\":\"lopwiyig\",\"createdDate\":\"2021-09-27T18:37:59Z\",\"modifiedDate\":\"2021-07-31T13:07:30Z\",\"fileWorkspaceName\":\"zb\",\"technicalTicketDetails\":{\"resourceId\":\"ebb\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"nyqupedeojnabck\",\"quotaChangeRequestVersion\":\"mtxpsiebtfh\",\"quotaChangeRequests\":[{\"region\":\"apskrdqm\",\"payload\":\"jdhtldwkyzxu\"}]},\"secondaryConsent\":[{\"userConsent\":\"No\",\"type\":\"scwsv\"}]}")
                .toObject(SupportTicketDetailsProperties.class);
        Assertions.assertEquals("tdbhrbnla", model.supportTicketId());
        Assertions.assertEquals("kx", model.description());
        Assertions.assertEquals("yskpbhen", model.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.MINIMAL, model.severity());
        Assertions.assertEquals(true, model.require24X7Response());
        Assertions.assertEquals(Consent.YES, model.advancedDiagnosticConsent());
        Assertions.assertEquals("yxczfclh", model.problemScopingQuestions());
        Assertions.assertEquals("xdbabphlwr", model.supportPlanId());
        Assertions.assertEquals("lfktsths", model.contactDetails().firstName());
        Assertions.assertEquals("cocmnyyaztt", model.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.EMAIL, model.contactDetails().preferredContactMethod());
        Assertions.assertEquals("wwrq", model.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("dckzywbiexz", model.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("wbavxbniwdj", model.contactDetails().phoneNumber());
        Assertions.assertEquals("wz", model.contactDetails().preferredTimeZone());
        Assertions.assertEquals("s", model.contactDetails().country());
        Assertions.assertEquals("bpg", model.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("gu", model.title());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T10:54:54Z"), model.problemStartTime());
        Assertions.assertEquals("mkfssxqukkfplgm", model.serviceId());
        Assertions.assertEquals("zb", model.fileWorkspaceName());
        Assertions.assertEquals("ebb", model.technicalTicketDetails().resourceId());
        Assertions.assertEquals("nyqupedeojnabck", model.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("mtxpsiebtfh", model.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("apskrdqm", model.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("jdhtldwkyzxu", model.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.NO, model.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("scwsv", model.secondaryConsent().get(0).type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SupportTicketDetailsProperties model =
            new SupportTicketDetailsProperties()
                .withSupportTicketId("tdbhrbnla")
                .withDescription("kx")
                .withProblemClassificationId("yskpbhen")
                .withSeverity(SeverityLevel.MINIMAL)
                .withRequire24X7Response(true)
                .withAdvancedDiagnosticConsent(Consent.YES)
                .withProblemScopingQuestions("yxczfclh")
                .withSupportPlanId("xdbabphlwr")
                .withContactDetails(
                    new ContactProfile()
                        .withFirstName("lfktsths")
                        .withLastName("cocmnyyaztt")
                        .withPreferredContactMethod(PreferredContactMethod.EMAIL)
                        .withPrimaryEmailAddress("wwrq")
                        .withAdditionalEmailAddresses(
                            Arrays.asList("dckzywbiexz", "eyueaxibxujwb", "qwalmuzyoxaepd", "zjancuxr"))
                        .withPhoneNumber("wbavxbniwdj")
                        .withPreferredTimeZone("wz")
                        .withCountry("s")
                        .withPreferredSupportLanguage("bpg"))
                .withServiceLevelAgreement(new ServiceLevelAgreement())
                .withSupportEngineer(new SupportEngineer())
                .withTitle("gu")
                .withProblemStartTime(OffsetDateTime.parse("2021-08-08T10:54:54Z"))
                .withServiceId("mkfssxqukkfplgm")
                .withFileWorkspaceName("zb")
                .withTechnicalTicketDetails(new TechnicalTicketDetails().withResourceId("ebb"))
                .withQuotaTicketDetails(
                    new QuotaTicketDetails()
                        .withQuotaChangeRequestSubType("nyqupedeojnabck")
                        .withQuotaChangeRequestVersion("mtxpsiebtfh")
                        .withQuotaChangeRequests(
                            Arrays.asList(new QuotaChangeRequest().withRegion("apskrdqm").withPayload("jdhtldwkyzxu"))))
                .withSecondaryConsent(
                    Arrays.asList(new SecondaryConsent().withUserConsent(UserConsent.NO).withType("scwsv")));
        model = BinaryData.fromObject(model).toObject(SupportTicketDetailsProperties.class);
        Assertions.assertEquals("tdbhrbnla", model.supportTicketId());
        Assertions.assertEquals("kx", model.description());
        Assertions.assertEquals("yskpbhen", model.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.MINIMAL, model.severity());
        Assertions.assertEquals(true, model.require24X7Response());
        Assertions.assertEquals(Consent.YES, model.advancedDiagnosticConsent());
        Assertions.assertEquals("yxczfclh", model.problemScopingQuestions());
        Assertions.assertEquals("xdbabphlwr", model.supportPlanId());
        Assertions.assertEquals("lfktsths", model.contactDetails().firstName());
        Assertions.assertEquals("cocmnyyaztt", model.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.EMAIL, model.contactDetails().preferredContactMethod());
        Assertions.assertEquals("wwrq", model.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("dckzywbiexz", model.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("wbavxbniwdj", model.contactDetails().phoneNumber());
        Assertions.assertEquals("wz", model.contactDetails().preferredTimeZone());
        Assertions.assertEquals("s", model.contactDetails().country());
        Assertions.assertEquals("bpg", model.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("gu", model.title());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T10:54:54Z"), model.problemStartTime());
        Assertions.assertEquals("mkfssxqukkfplgm", model.serviceId());
        Assertions.assertEquals("zb", model.fileWorkspaceName());
        Assertions.assertEquals("ebb", model.technicalTicketDetails().resourceId());
        Assertions.assertEquals("nyqupedeojnabck", model.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("mtxpsiebtfh", model.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("apskrdqm", model.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("jdhtldwkyzxu", model.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.NO, model.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("scwsv", model.secondaryConsent().get(0).type());
    }
}
