// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.ServiceClassificationOutput;
import com.azure.resourcemanager.support.models.ServiceClassificationRequest;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServiceClassificationsClassifyServicesWithResponseMockTests {
    @Test
    public void testClassifyServicesWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"serviceClassificationResults\":[{\"childService\":{\"serviceId\":\"cckwyfzqwhxxbu\",\"displayName\":\"a\",\"resourceTypes\":[\"eqz\",\"ppriol\",\"or\"]},\"serviceId\":\"lt\",\"displayName\":\"mncwsobqwcsdb\",\"resourceTypes\":[\"cf\",\"ucqdpfuvglsb\",\"jcanvxbvtvudut\"]},{\"childService\":{\"serviceId\":\"rmrlxqtvcof\",\"displayName\":\"f\",\"resourceTypes\":[\"gj\",\"bgdknnqv\",\"aznqntoru\",\"sgsahmkycgr\"]},\"serviceId\":\"wjue\",\"displayName\":\"eburu\",\"resourceTypes\":[\"ovsm\",\"l\",\"wabm\",\"oefki\"]},{\"childService\":{\"serviceId\":\"tpuqujmq\",\"displayName\":\"kfbtndoaongbjc\",\"resourceTypes\":[\"jitcjedftwwaez\",\"ojvdcpzfoqo\",\"i\"]},\"serviceId\":\"bxarzgszufoxci\",\"displayName\":\"p\",\"resourceTypes\":[\"amcio\",\"hkh\"]},{\"childService\":{\"serviceId\":\"khnzbonlw\",\"displayName\":\"oegokdwbwh\",\"resourceTypes\":[\"zcmrvexztvb\"]},\"serviceId\":\"gsfraoyzkoow\",\"displayName\":\"mnguxawqaldsyu\",\"resourceTypes\":[\"merqfobwyznkb\",\"kutwpf\",\"pagmhrskdsnf\",\"sd\"]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SupportManager manager = SupportManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        ServiceClassificationOutput response = manager.serviceClassifications()
            .classifyServicesWithResponse(new ServiceClassificationRequest().withIssueSummary("kjj")
                .withResourceId("xrbuukzclew").withAdditionalContext("mlwpazt"), com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cf", response.serviceClassificationResults().get(0).resourceTypes().get(0));
        Assertions.assertEquals("eqz",
            response.serviceClassificationResults().get(0).childService().resourceTypes().get(0));
    }
}
