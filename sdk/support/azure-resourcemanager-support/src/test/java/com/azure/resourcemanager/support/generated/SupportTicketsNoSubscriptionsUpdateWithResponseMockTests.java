// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.SecondaryConsent;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.Status;
import com.azure.resourcemanager.support.models.SupportTicketDetails;
import com.azure.resourcemanager.support.models.UpdateContactProfile;
import com.azure.resourcemanager.support.models.UpdateSupportTicket;
import com.azure.resourcemanager.support.models.UserConsent;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SupportTicketsNoSubscriptionsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"supportTicketId\":\"qwogfnzjvus\",\"description\":\"zldmozuxy\",\"problemClassificationId\":\"fsbtkad\",\"problemClassificationDisplayName\":\"s\",\"severity\":\"minimal\",\"enrollmentId\":\"btgkbugrjqctoj\",\"require24X7Response\":true,\"advancedDiagnosticConsent\":\"Yes\",\"problemScopingQuestions\":\"ieypef\",\"supportPlanId\":\"yqdhcuplcplcw\",\"contactDetails\":{\"firstName\":\"hihihlhzdsqtzbsr\",\"lastName\":\"nowc\",\"preferredContactMethod\":\"phone\",\"primaryEmailAddress\":\"fgmvecactxmwo\",\"additionalEmailAddresses\":[\"owcluqo\"],\"phoneNumber\":\"kqvgqouw\",\"preferredTimeZone\":\"fzmpjwyivq\",\"country\":\"kfxcvhrfs\",\"preferredSupportLanguage\":\"huagrttikteusqc\"},\"serviceLevelAgreement\":{\"startTime\":\"2021-12-08T16:17:07Z\",\"expirationTime\":\"2021-07-05T09:11:28Z\",\"slaMinutes\":505977286},\"supportEngineer\":{\"emailAddress\":\"jaffmmfblcqcuu\"},\"supportPlanType\":\"qibrtalme\",\"supportPlanDisplayName\":\"t\",\"title\":\"gdslqxihhrmoo\",\"problemStartTime\":\"2020-12-28T03:13:13Z\",\"serviceId\":\"seypxiutcxapz\",\"serviceDisplayName\":\"rpetogebjoxsl\",\"status\":\"nhl\",\"createdDate\":\"2021-03-04T02:03:13Z\",\"modifiedDate\":\"2021-09-04T15:55:16Z\",\"fileWorkspaceName\":\"kzjcjbtrgae\",\"isTemporaryTicket\":\"Yes\",\"technicalTicketDetails\":{\"resourceId\":\"rxjjstoqbeitpk\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"moob\",\"quotaChangeRequestVersion\":\"ft\",\"quotaChangeRequests\":[{\"region\":\"cwq\",\"payload\":\"imaq\"},{\"region\":\"hemjy\",\"payload\":\"hujswtwkozzwcul\"},{\"region\":\"awpfajnjwltlwtjj\",\"payload\":\"ktalhsnvkcdmxz\"},{\"region\":\"oaimlnw\",\"payload\":\"aomylwea\"}]},\"secondaryConsent\":[{\"userConsent\":\"Yes\",\"type\":\"thwwn\"},{\"userConsent\":\"Yes\",\"type\":\"fz\"},{\"userConsent\":\"Yes\",\"type\":\"hwahfbousn\"}]},\"id\":\"epgfew\",\"name\":\"twly\",\"type\":\"gncxykxhdj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SupportManager manager = SupportManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SupportTicketDetails response = manager.supportTicketsNoSubscriptions()
            .updateWithResponse("kbunzoz",
                new UpdateSupportTicket().withSeverity(SeverityLevel.CRITICAL).withStatus(Status.OPEN)
                    .withContactDetails(new UpdateContactProfile().withFirstName("moy").withLastName("dyuib")
                        .withPreferredContactMethod(PreferredContactMethod.EMAIL).withPrimaryEmailAddress("nbzydvfvfcj")
                        .withAdditionalEmailAddresses(Arrays.asList("oisrvhmgorffu", "is", "vwmzhwplefaxvxil"))
                        .withPhoneNumber("tg").withPreferredTimeZone("nzeyqxtjj").withCountry("qlqhycavodg")
                        .withPreferredSupportLanguage("dbeesmie"))
                    .withAdvancedDiagnosticConsent(Consent.NO).withSecondaryConsent(
                        Arrays.asList(new SecondaryConsent().withUserConsent(UserConsent.YES).withType("awiuagyd"),
                            new SecondaryConsent().withUserConsent(UserConsent.YES).withType("ylyrfgiagtco"))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("qwogfnzjvus", response.supportTicketId());
        Assertions.assertEquals("zldmozuxy", response.description());
        Assertions.assertEquals("fsbtkad", response.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.MINIMAL, response.severity());
        Assertions.assertEquals("btgkbugrjqctoj", response.enrollmentId());
        Assertions.assertEquals(true, response.require24X7Response());
        Assertions.assertEquals(Consent.YES, response.advancedDiagnosticConsent());
        Assertions.assertEquals("ieypef", response.problemScopingQuestions());
        Assertions.assertEquals("yqdhcuplcplcw", response.supportPlanId());
        Assertions.assertEquals("hihihlhzdsqtzbsr", response.contactDetails().firstName());
        Assertions.assertEquals("nowc", response.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.PHONE, response.contactDetails().preferredContactMethod());
        Assertions.assertEquals("fgmvecactxmwo", response.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("owcluqo", response.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("kqvgqouw", response.contactDetails().phoneNumber());
        Assertions.assertEquals("fzmpjwyivq", response.contactDetails().preferredTimeZone());
        Assertions.assertEquals("kfxcvhrfs", response.contactDetails().country());
        Assertions.assertEquals("huagrttikteusqc", response.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("gdslqxihhrmoo", response.title());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-28T03:13:13Z"), response.problemStartTime());
        Assertions.assertEquals("seypxiutcxapz", response.serviceId());
        Assertions.assertEquals("kzjcjbtrgae", response.fileWorkspaceName());
        Assertions.assertEquals("rxjjstoqbeitpk", response.technicalTicketDetails().resourceId());
        Assertions.assertEquals("moob", response.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("ft", response.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("cwq", response.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("imaq", response.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.YES, response.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("thwwn", response.secondaryConsent().get(0).type());
    }
}
