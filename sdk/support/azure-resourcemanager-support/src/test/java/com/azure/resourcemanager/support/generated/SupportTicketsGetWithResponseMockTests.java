// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.SupportTicketDetails;
import com.azure.resourcemanager.support.models.UserConsent;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SupportTicketsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"supportTicketId\":\"qgxqquezikyw\",\"description\":\"gxk\",\"problemClassificationId\":\"lla\",\"problemClassificationDisplayName\":\"elwuipi\",\"severity\":\"highestcriticalimpact\",\"enrollmentId\":\"zkzivgvvcnay\",\"require24X7Response\":true,\"advancedDiagnosticConsent\":\"No\",\"problemScopingQuestions\":\"xmueed\",\"supportPlanId\":\"rdvstkwqqtch\",\"contactDetails\":{\"firstName\":\"alm\",\"lastName\":\"mtdaa\",\"preferredContactMethod\":\"email\",\"primaryEmailAddress\":\"dvwvgpio\",\"additionalEmailAddresses\":[\"xrtfudxep\"],\"phoneNumber\":\"yqagvrvm\",\"preferredTimeZone\":\"pkukghi\",\"country\":\"dblx\",\"preferredSupportLanguage\":\"wi\"},\"serviceLevelAgreement\":{\"startTime\":\"2021-07-20T17:44:37Z\",\"expirationTime\":\"2021-03-20T03:41:31Z\",\"slaMinutes\":510557599},\"supportEngineer\":{\"emailAddress\":\"szkkfoqre\"},\"supportPlanType\":\"kzikfjawneaivxwc\",\"supportPlanDisplayName\":\"lpcirelsf\",\"title\":\"aenwabf\",\"problemStartTime\":\"2021-11-30T23:14:45Z\",\"serviceId\":\"lddxbjhwua\",\"serviceDisplayName\":\"oz\",\"status\":\"sphyoulpjrvxa\",\"createdDate\":\"2021-02-27T18:42:29Z\",\"modifiedDate\":\"2021-11-16T13:26:47Z\",\"fileWorkspaceName\":\"jwosytxitcskfck\",\"technicalTicketDetails\":{\"resourceId\":\"miekkezzikhlyfjh\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"gge\",\"quotaChangeRequestVersion\":\"unygaeqid\",\"quotaChangeRequests\":[{\"region\":\"t\",\"payload\":\"llrxcyjmoad\"},{\"region\":\"varmywdmj\",\"payload\":\"q\"},{\"region\":\"hhyxxrw\",\"payload\":\"co\"},{\"region\":\"hp\",\"payload\":\"kgymareqnajxqug\"}]},\"secondaryConsent\":[{\"userConsent\":\"No\",\"type\":\"beddgssofw\"}]},\"id\":\"mzqa\",\"name\":\"krmnjijpxacqqud\",\"type\":\"nbyxbaaabjyv\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SupportManager manager =
            SupportManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SupportTicketDetails response =
            manager.supportTickets().getWithResponse("cikhnv", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("qgxqquezikyw", response.supportTicketId());
        Assertions.assertEquals("gxk", response.description());
        Assertions.assertEquals("lla", response.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.HIGHESTCRITICALIMPACT, response.severity());
        Assertions.assertEquals(true, response.require24X7Response());
        Assertions.assertEquals(Consent.NO, response.advancedDiagnosticConsent());
        Assertions.assertEquals("xmueed", response.problemScopingQuestions());
        Assertions.assertEquals("rdvstkwqqtch", response.supportPlanId());
        Assertions.assertEquals("alm", response.contactDetails().firstName());
        Assertions.assertEquals("mtdaa", response.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.EMAIL, response.contactDetails().preferredContactMethod());
        Assertions.assertEquals("dvwvgpio", response.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("xrtfudxep", response.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("yqagvrvm", response.contactDetails().phoneNumber());
        Assertions.assertEquals("pkukghi", response.contactDetails().preferredTimeZone());
        Assertions.assertEquals("dblx", response.contactDetails().country());
        Assertions.assertEquals("wi", response.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("aenwabf", response.title());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-30T23:14:45Z"), response.problemStartTime());
        Assertions.assertEquals("lddxbjhwua", response.serviceId());
        Assertions.assertEquals("jwosytxitcskfck", response.fileWorkspaceName());
        Assertions.assertEquals("miekkezzikhlyfjh", response.technicalTicketDetails().resourceId());
        Assertions.assertEquals("gge", response.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("unygaeqid", response.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("t", response.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("llrxcyjmoad", response.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.NO, response.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("beddgssofw", response.secondaryConsent().get(0).type());
    }
}
