// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.SupportTicketDetails;
import com.azure.resourcemanager.support.models.UserConsent;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SupportTicketsNoSubscriptionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"supportTicketId\":\"jcdh\",\"description\":\"zfjvfbgofe\",\"problemClassificationId\":\"jagrqmqhldvr\",\"problemClassificationDisplayName\":\"iojnalghfkvtv\",\"severity\":\"minimal\",\"enrollmentId\":\"sowueluqhhahhx\",\"require24X7Response\":false,\"advancedDiagnosticConsent\":\"Yes\",\"problemScopingQuestions\":\"wpjgwws\",\"supportPlanId\":\"ghftqsxhqxujxuk\",\"contactDetails\":{\"firstName\":\"dxdigr\",\"lastName\":\"guufzd\",\"preferredContactMethod\":\"email\",\"primaryEmailAddress\":\"yqtfihwh\",\"additionalEmailAddresses\":[\"z\",\"ngamvpphosz\",\"zudphqamvdkfw\"],\"phoneNumber\":\"wcvtbvkayhmtnvyq\",\"preferredTimeZone\":\"atkzwpcnpw\",\"country\":\"cjaesgvvs\",\"preferredSupportLanguage\":\"cyajguqf\"},\"serviceLevelAgreement\":{\"startTime\":\"2021-07-19T23:39:28Z\",\"expirationTime\":\"2021-05-19T13:42:09Z\",\"slaMinutes\":1249464934},\"supportEngineer\":{\"emailAddress\":\"fxusemdwzr\"},\"supportPlanType\":\"hapfcqdpsqx\",\"supportPlanDisplayName\":\"psvuoymgc\",\"title\":\"elvezrypq\",\"problemStartTime\":\"2021-06-02T23:04:04Z\",\"serviceId\":\"eokerqwkyhkobopg\",\"serviceDisplayName\":\"dkow\",\"status\":\"bqpc\",\"createdDate\":\"2021-05-26T00:48:59Z\",\"modifiedDate\":\"2021-11-07T10:36:37Z\",\"fileWorkspaceName\":\"csnjvcdwxlpqekft\",\"technicalTicketDetails\":{\"resourceId\":\"tjsyin\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"qatmtdhtmdvy\",\"quotaChangeRequestVersion\":\"ikdgszywkbir\",\"quotaChangeRequests\":[{\"region\":\"hlhkjoqrvqqaatj\",\"payload\":\"rv\"},{\"region\":\"upmfiibfg\",\"payload\":\"ioolvrwxkvtkkgll\"},{\"region\":\"jygvjayvbl\",\"payload\":\"vkzuhbxvvyhgso\"}]},\"secondaryConsent\":[{\"userConsent\":\"No\",\"type\":\"fegxuvwzfb\"},{\"userConsent\":\"Yes\",\"type\":\"ctlpdngitvgb\"},{\"userConsent\":\"No\",\"type\":\"xkw\"}]},\"id\":\"yijejvegrhbpnaix\",\"name\":\"xccbdreaxhcex\",\"type\":\"rrvqa\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SupportManager manager =
            SupportManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SupportTicketDetails response =
            manager.supportTicketsNoSubscriptions().getWithResponse("h", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("jcdh", response.supportTicketId());
        Assertions.assertEquals("zfjvfbgofe", response.description());
        Assertions.assertEquals("jagrqmqhldvr", response.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.MINIMAL, response.severity());
        Assertions.assertEquals(false, response.require24X7Response());
        Assertions.assertEquals(Consent.YES, response.advancedDiagnosticConsent());
        Assertions.assertEquals("wpjgwws", response.problemScopingQuestions());
        Assertions.assertEquals("ghftqsxhqxujxuk", response.supportPlanId());
        Assertions.assertEquals("dxdigr", response.contactDetails().firstName());
        Assertions.assertEquals("guufzd", response.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.EMAIL, response.contactDetails().preferredContactMethod());
        Assertions.assertEquals("yqtfihwh", response.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("z", response.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("wcvtbvkayhmtnvyq", response.contactDetails().phoneNumber());
        Assertions.assertEquals("atkzwpcnpw", response.contactDetails().preferredTimeZone());
        Assertions.assertEquals("cjaesgvvs", response.contactDetails().country());
        Assertions.assertEquals("cyajguqf", response.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("elvezrypq", response.title());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-02T23:04:04Z"), response.problemStartTime());
        Assertions.assertEquals("eokerqwkyhkobopg", response.serviceId());
        Assertions.assertEquals("csnjvcdwxlpqekft", response.fileWorkspaceName());
        Assertions.assertEquals("tjsyin", response.technicalTicketDetails().resourceId());
        Assertions.assertEquals("qatmtdhtmdvy", response.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("ikdgszywkbir", response.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("hlhkjoqrvqqaatj", response.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("rv", response.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.NO, response.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("fegxuvwzfb", response.secondaryConsent().get(0).type());
    }
}
