// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.SupportTicketDetails;
import com.azure.resourcemanager.support.models.UserConsent;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SupportTicketsNoSubscriptionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"supportTicketId\":\"wk\",\"description\":\"ziycslevufuztck\",\"problemClassificationId\":\"yhjtqedcgzu\",\"problemClassificationDisplayName\":\"mmrqz\",\"severity\":\"minimal\",\"enrollmentId\":\"jvpglydzgk\",\"require24X7Response\":false,\"advancedDiagnosticConsent\":\"Yes\",\"problemScopingQuestions\":\"toepryu\",\"supportPlanId\":\"wytpzdmovz\",\"contactDetails\":{\"firstName\":\"fvaawzqa\",\"lastName\":\"f\",\"preferredContactMethod\":\"phone\",\"primaryEmailAddress\":\"z\",\"additionalEmailAddresses\":[\"glae\",\"xndticokpvzmlqtm\"],\"phoneNumber\":\"gxobfirclnp\",\"preferredTimeZone\":\"ciayzriykhya\",\"country\":\"fvjlboxqvkjlmx\",\"preferredSupportLanguage\":\"omdynhdwdigum\"},\"serviceLevelAgreement\":{\"startTime\":\"2021-04-19T06:10:37Z\",\"expirationTime\":\"2021-03-17T09:36:38Z\",\"slaMinutes\":171373878},\"supportEngineer\":{\"emailAddress\":\"jazysdzhezwwvaiq\"},\"supportPlanType\":\"vv\",\"supportPlanDisplayName\":\"nk\",\"title\":\"hhqyi\",\"problemStartTime\":\"2021-06-02T22:13:33Z\",\"serviceId\":\"lauyav\",\"serviceDisplayName\":\"wmn\",\"status\":\"ttijfybvpoekrs\",\"createdDate\":\"2021-08-10T11:56:32Z\",\"modifiedDate\":\"2021-03-10T00:22:05Z\",\"fileWorkspaceName\":\"uzqgnjdgkynsc\",\"isTemporaryTicket\":\"No\",\"technicalTicketDetails\":{\"resourceId\":\"vhxnk\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"kubotppnvdxz\",\"quotaChangeRequestVersion\":\"ihfrbbcevqa\",\"quotaChangeRequests\":[{\"region\":\"dhlfkqojpykvgt\",\"payload\":\"cnifm\"}]},\"secondaryConsent\":[{\"userConsent\":\"No\",\"type\":\"brn\"},{\"userConsent\":\"Yes\",\"type\":\"m\"}]},\"id\":\"rafwgckhocxvdf\",\"name\":\"fwafqrouda\",\"type\":\"pavehhr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SupportManager manager = SupportManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SupportTicketDetails response = manager.supportTicketsNoSubscriptions()
            .getWithResponse("zapeewchpx", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("wk", response.supportTicketId());
        Assertions.assertEquals("ziycslevufuztck", response.description());
        Assertions.assertEquals("yhjtqedcgzu", response.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.MINIMAL, response.severity());
        Assertions.assertEquals("jvpglydzgk", response.enrollmentId());
        Assertions.assertEquals(false, response.require24X7Response());
        Assertions.assertEquals(Consent.YES, response.advancedDiagnosticConsent());
        Assertions.assertEquals("toepryu", response.problemScopingQuestions());
        Assertions.assertEquals("wytpzdmovz", response.supportPlanId());
        Assertions.assertEquals("fvaawzqa", response.contactDetails().firstName());
        Assertions.assertEquals("f", response.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.PHONE, response.contactDetails().preferredContactMethod());
        Assertions.assertEquals("z", response.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("glae", response.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("gxobfirclnp", response.contactDetails().phoneNumber());
        Assertions.assertEquals("ciayzriykhya", response.contactDetails().preferredTimeZone());
        Assertions.assertEquals("fvjlboxqvkjlmx", response.contactDetails().country());
        Assertions.assertEquals("omdynhdwdigum", response.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("hhqyi", response.title());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-02T22:13:33Z"), response.problemStartTime());
        Assertions.assertEquals("lauyav", response.serviceId());
        Assertions.assertEquals("uzqgnjdgkynsc", response.fileWorkspaceName());
        Assertions.assertEquals("vhxnk", response.technicalTicketDetails().resourceId());
        Assertions.assertEquals("kubotppnvdxz", response.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("ihfrbbcevqa", response.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("dhlfkqojpykvgt", response.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("cnifm", response.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.NO, response.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("brn", response.secondaryConsent().get(0).type());
    }
}
