// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.fluent.models.SupportTicketDetailsInner;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.ContactProfile;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.QuotaChangeRequest;
import com.azure.resourcemanager.support.models.QuotaTicketDetails;
import com.azure.resourcemanager.support.models.SecondaryConsent;
import com.azure.resourcemanager.support.models.ServiceLevelAgreement;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.SupportEngineer;
import com.azure.resourcemanager.support.models.SupportTicketDetails;
import com.azure.resourcemanager.support.models.TechnicalTicketDetails;
import com.azure.resourcemanager.support.models.UserConsent;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SupportTicketsNoSubscriptionsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"supportTicketId\":\"whcans\",\"description\":\"moy\",\"problemClassificationId\":\"hlwigdivbkbxg\",\"problemClassificationDisplayName\":\"fajuwas\",\"severity\":\"highestcriticalimpact\",\"enrollmentId\":\"aeyyg\",\"require24X7Response\":false,\"advancedDiagnosticConsent\":\"No\",\"problemScopingQuestions\":\"qzhzbezkgimsi\",\"supportPlanId\":\"asi\",\"contactDetails\":{\"firstName\":\"ddyvvjskgfmo\",\"lastName\":\"wa\",\"preferredContactMethod\":\"email\",\"primaryEmailAddress\":\"qgatjeaahhvjhhn\",\"additionalEmailAddresses\":[\"ybbjjidjksyx\",\"yxvxevblbjed\"],\"phoneNumber\":\"jlageu\",\"preferredTimeZone\":\"ulxunsmjbnkpp\",\"country\":\"ynenlsvxeizz\",\"preferredSupportLanguage\":\"wklnsrmffeyc\"},\"serviceLevelAgreement\":{\"startTime\":\"2021-01-27T19:40:34Z\",\"expirationTime\":\"2021-04-28T21:28:59Z\",\"slaMinutes\":1424863309},\"supportEngineer\":{\"emailAddress\":\"teeammxqiekkkzd\"},\"supportPlanType\":\"tkgdojbmxva\",\"supportPlanDisplayName\":\"efdeesve\",\"title\":\"uij\",\"problemStartTime\":\"2021-07-17T21:24:41Z\",\"serviceId\":\"xs\",\"serviceDisplayName\":\"prtujwsawdd\",\"status\":\"babxvitit\",\"createdDate\":\"2020-12-21T14:24:59Z\",\"modifiedDate\":\"2021-02-16T14:52:22Z\",\"fileWorkspaceName\":\"avoxtfg\",\"isTemporaryTicket\":\"Yes\",\"technicalTicketDetails\":{\"resourceId\":\"dqbwpypqtgsfja\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"lhhxudbxvodhtnsi\",\"quotaChangeRequestVersion\":\"dhzmmesckdlp\",\"quotaChangeRequests\":[{\"region\":\"cxfailcfxwmdboxd\",\"payload\":\"sftufqobrjlna\"},{\"region\":\"cc\",\"payload\":\"nhxk\"},{\"region\":\"v\",\"payload\":\"nrzvuljraaer\"},{\"region\":\"okqgukkjq\",\"payload\":\"broyla\"}]},\"secondaryConsent\":[{\"userConsent\":\"Yes\",\"type\":\"isdos\"},{\"userConsent\":\"Yes\",\"type\":\"svgjrwhryvy\"},{\"userConsent\":\"Yes\",\"type\":\"c\"}]},\"id\":\"xgccknfnw\",\"name\":\"btmvpdvjdhttza\",\"type\":\"fedxihchrphkm\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SupportManager manager = SupportManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SupportTicketDetails response = manager.supportTicketsNoSubscriptions().create("limmbcxf",
            new SupportTicketDetailsInner().withSupportTicketId("po").withDescription("xvxcjzhq")
                .withProblemClassificationId("zxfpxtgqsc").withSeverity(SeverityLevel.CRITICAL).withEnrollmentId("k")
                .withRequire24X7Response(false).withAdvancedDiagnosticConsent(Consent.YES)
                .withProblemScopingQuestions("pijrajcivmmghf").withSupportPlanId("iwrxgkn")
                .withContactDetails(new ContactProfile().withFirstName("uvyinzqodfvpgs").withLastName("oxgsgbpfgzdjtx")
                    .withPreferredContactMethod(PreferredContactMethod.EMAIL).withPrimaryEmailAddress("flbqvgaq")
                    .withAdditionalEmailAddresses(Arrays.asList("a", "cqusr")).withPhoneNumber("etnwsdtutnw")
                    .withPreferredTimeZone("duy").withCountry("vuzhyr").withPreferredSupportLanguage("ewipm"))
                .withServiceLevelAgreement(new ServiceLevelAgreement()).withSupportEngineer(new SupportEngineer())
                .withTitle("qsxvmhf").withProblemStartTime(OffsetDateTime.parse("2021-07-26T18:31:56Z"))
                .withServiceId("jyihsasbhudypo").withFileWorkspaceName("tyms")
                .withTechnicalTicketDetails(new TechnicalTicketDetails().withResourceId("dnfwqzdzg"))
                .withQuotaTicketDetails(new QuotaTicketDetails().withQuotaChangeRequestSubType("axhnfh")
                    .withQuotaChangeRequestVersion("yvi").withQuotaChangeRequests(
                        Arrays.asList(new QuotaChangeRequest().withRegion("iv").withPayload("oyzunbixxr"),
                            new QuotaChangeRequest().withRegion("kvcpwpgclr").withPayload("vtsoxf"))))
                .withSecondaryConsent(
                    Arrays.asList(new SecondaryConsent().withUserConsent(UserConsent.NO).withType("m"),
                        new SecondaryConsent().withUserConsent(UserConsent.YES).withType("rpmpdnqqskaw"),
                        new SecondaryConsent().withUserConsent(UserConsent.YES).withType("mmbnpqfrtql"))),
            com.azure.core.util.Context.NONE);

        Assertions.assertEquals("whcans", response.supportTicketId());
        Assertions.assertEquals("moy", response.description());
        Assertions.assertEquals("hlwigdivbkbxg", response.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.HIGHESTCRITICALIMPACT, response.severity());
        Assertions.assertEquals("aeyyg", response.enrollmentId());
        Assertions.assertEquals(false, response.require24X7Response());
        Assertions.assertEquals(Consent.NO, response.advancedDiagnosticConsent());
        Assertions.assertEquals("qzhzbezkgimsi", response.problemScopingQuestions());
        Assertions.assertEquals("asi", response.supportPlanId());
        Assertions.assertEquals("ddyvvjskgfmo", response.contactDetails().firstName());
        Assertions.assertEquals("wa", response.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.EMAIL, response.contactDetails().preferredContactMethod());
        Assertions.assertEquals("qgatjeaahhvjhhn", response.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("ybbjjidjksyx", response.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("jlageu", response.contactDetails().phoneNumber());
        Assertions.assertEquals("ulxunsmjbnkpp", response.contactDetails().preferredTimeZone());
        Assertions.assertEquals("ynenlsvxeizz", response.contactDetails().country());
        Assertions.assertEquals("wklnsrmffeyc", response.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("uij", response.title());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-17T21:24:41Z"), response.problemStartTime());
        Assertions.assertEquals("xs", response.serviceId());
        Assertions.assertEquals("avoxtfg", response.fileWorkspaceName());
        Assertions.assertEquals("dqbwpypqtgsfja", response.technicalTicketDetails().resourceId());
        Assertions.assertEquals("lhhxudbxvodhtnsi", response.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("dhzmmesckdlp", response.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("cxfailcfxwmdboxd",
            response.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("sftufqobrjlna", response.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.YES, response.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("isdos", response.secondaryConsent().get(0).type());
    }
}
