// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.fluent.models.SupportTicketDetailsInner;
import com.azure.resourcemanager.support.models.Consent;
import com.azure.resourcemanager.support.models.ContactProfile;
import com.azure.resourcemanager.support.models.PreferredContactMethod;
import com.azure.resourcemanager.support.models.QuotaChangeRequest;
import com.azure.resourcemanager.support.models.QuotaTicketDetails;
import com.azure.resourcemanager.support.models.SecondaryConsent;
import com.azure.resourcemanager.support.models.ServiceLevelAgreement;
import com.azure.resourcemanager.support.models.SeverityLevel;
import com.azure.resourcemanager.support.models.SupportEngineer;
import com.azure.resourcemanager.support.models.SupportTicketDetails;
import com.azure.resourcemanager.support.models.TechnicalTicketDetails;
import com.azure.resourcemanager.support.models.UserConsent;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SupportTicketsNoSubscriptionsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"supportTicketId\":\"hzlhplodqkdlww\",\"description\":\"fbumlkx\",\"problemClassificationId\":\"rqjfsmlm\",\"problemClassificationDisplayName\":\"xhwgfwsrtaw\",\"severity\":\"critical\",\"enrollmentId\":\"zbrhubskhudyg\",\"require24X7Response\":true,\"advancedDiagnosticConsent\":\"No\",\"problemScopingQuestions\":\"qfqjbvleorfm\",\"supportPlanId\":\"iqtqzfavyvnq\",\"contactDetails\":{\"firstName\":\"ybar\",\"lastName\":\"euayjkqabqgzsles\",\"preferredContactMethod\":\"phone\",\"primaryEmailAddress\":\"bhernntiew\",\"additionalEmailAddresses\":[\"vbquwr\"],\"phoneNumber\":\"hwagohbuffkmrqe\",\"preferredTimeZone\":\"vvhmxtdrj\",\"country\":\"utacoe\",\"preferredSupportLanguage\":\"jvewzcjznmwcp\"},\"serviceLevelAgreement\":{\"startTime\":\"2021-11-24T12:45:46Z\",\"expirationTime\":\"2021-09-25T00:56:36Z\",\"slaMinutes\":1984994243},\"supportEngineer\":{\"emailAddress\":\"actkahzovajj\"},\"supportPlanType\":\"uxxpshne\",\"supportPlanDisplayName\":\"ulfgslqu\",\"title\":\"kwdlenrdsutujba\",\"problemStartTime\":\"2021-06-27T02:39:57Z\",\"serviceId\":\"uo\",\"serviceDisplayName\":\"inyflnorwmduvwp\",\"status\":\"vxwmygd\",\"createdDate\":\"2021-04-18T03:22:57Z\",\"modifiedDate\":\"2021-01-04T00:18:57Z\",\"fileWorkspaceName\":\"hiszepnnbjcrxgib\",\"isTemporaryTicket\":\"No\",\"technicalTicketDetails\":{\"resourceId\":\"onfo\"},\"quotaTicketDetails\":{\"quotaChangeRequestSubType\":\"orsukokwbqp\",\"quotaChangeRequestVersion\":\"lvnuuepzlrph\",\"quotaChangeRequests\":[{\"region\":\"l\",\"payload\":\"eyuqdunvmnnrwr\"},{\"region\":\"ork\",\"payload\":\"lywjhh\"},{\"region\":\"nhxmsi\",\"payload\":\"omi\"},{\"region\":\"xggdufi\",\"payload\":\"dieuzaofj\"}]},\"secondaryConsent\":[{\"userConsent\":\"No\",\"type\":\"ys\"}]},\"id\":\"gdotcubiipuipwo\",\"name\":\"onmacjekniz\",\"type\":\"hqvcimpevfgmblr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SupportManager manager = SupportManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SupportTicketDetails response = manager.supportTicketsNoSubscriptions()
            .create("cotmr", new SupportTicketDetailsInner().withSupportTicketId("irctymoxoftpipiw")
                .withDescription("czuhxacpqjlihh")
                .withProblemClassificationId("usps")
                .withSeverity(SeverityLevel.CRITICAL)
                .withEnrollmentId("rsre")
                .withRequire24X7Response(true)
                .withAdvancedDiagnosticConsent(Consent.NO)
                .withProblemScopingQuestions("risjnhnytxifqjz")
                .withSupportPlanId("mrhublwpc")
                .withContactDetails(new ContactProfile().withFirstName("sutrgjup")
                    .withLastName("uutpwoqhih")
                    .withPreferredContactMethod(PreferredContactMethod.EMAIL)
                    .withPrimaryEmailAddress("qg")
                    .withAdditionalEmailAddresses(Arrays.asList("nfqn", "cypsxjv", "oimwkslirc"))
                    .withPhoneNumber("jxv")
                    .withPreferredTimeZone("dfcea")
                    .withCountry("vlhv")
                    .withPreferredSupportLanguage("gdyftumrtwna"))
                .withServiceLevelAgreement(new ServiceLevelAgreement())
                .withSupportEngineer(new SupportEngineer())
                .withTitle("ydv")
                .withProblemStartTime(OffsetDateTime.parse("2021-08-31T10:25:05Z"))
                .withServiceId("ejd")
                .withFileWorkspaceName("novqfzge")
                .withTechnicalTicketDetails(new TechnicalTicketDetails().withResourceId("uljltduceamtmcz"))
                .withQuotaTicketDetails(new QuotaTicketDetails().withQuotaChangeRequestSubType("ejwcwwqiok")
                    .withQuotaChangeRequestVersion("sx")
                    .withQuotaChangeRequests(Arrays.asList(new QuotaChangeRequest().withRegion("sv").withPayload("jpr"),
                        new QuotaChangeRequest().withRegion("wcfzqljyxgt").withPayload("heyd"))))
                .withSecondaryConsent(
                    Arrays.asList(new SecondaryConsent().withUserConsent(UserConsent.NO).withType("kx"),
                        new SecondaryConsent().withUserConsent(UserConsent.NO).withType("vbbxuripl"),
                        new SecondaryConsent().withUserConsent(UserConsent.YES).withType("tbaxk"),
                        new SecondaryConsent().withUserConsent(UserConsent.YES).withType("rc"))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hzlhplodqkdlww", response.supportTicketId());
        Assertions.assertEquals("fbumlkx", response.description());
        Assertions.assertEquals("rqjfsmlm", response.problemClassificationId());
        Assertions.assertEquals(SeverityLevel.CRITICAL, response.severity());
        Assertions.assertEquals("zbrhubskhudyg", response.enrollmentId());
        Assertions.assertEquals(true, response.require24X7Response());
        Assertions.assertEquals(Consent.NO, response.advancedDiagnosticConsent());
        Assertions.assertEquals("qfqjbvleorfm", response.problemScopingQuestions());
        Assertions.assertEquals("iqtqzfavyvnq", response.supportPlanId());
        Assertions.assertEquals("ybar", response.contactDetails().firstName());
        Assertions.assertEquals("euayjkqabqgzsles", response.contactDetails().lastName());
        Assertions.assertEquals(PreferredContactMethod.PHONE, response.contactDetails().preferredContactMethod());
        Assertions.assertEquals("bhernntiew", response.contactDetails().primaryEmailAddress());
        Assertions.assertEquals("vbquwr", response.contactDetails().additionalEmailAddresses().get(0));
        Assertions.assertEquals("hwagohbuffkmrqe", response.contactDetails().phoneNumber());
        Assertions.assertEquals("vvhmxtdrj", response.contactDetails().preferredTimeZone());
        Assertions.assertEquals("utacoe", response.contactDetails().country());
        Assertions.assertEquals("jvewzcjznmwcp", response.contactDetails().preferredSupportLanguage());
        Assertions.assertEquals("kwdlenrdsutujba", response.title());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-27T02:39:57Z"), response.problemStartTime());
        Assertions.assertEquals("uo", response.serviceId());
        Assertions.assertEquals("hiszepnnbjcrxgib", response.fileWorkspaceName());
        Assertions.assertEquals("onfo", response.technicalTicketDetails().resourceId());
        Assertions.assertEquals("orsukokwbqp", response.quotaTicketDetails().quotaChangeRequestSubType());
        Assertions.assertEquals("lvnuuepzlrph", response.quotaTicketDetails().quotaChangeRequestVersion());
        Assertions.assertEquals("l", response.quotaTicketDetails().quotaChangeRequests().get(0).region());
        Assertions.assertEquals("eyuqdunvmnnrwr", response.quotaTicketDetails().quotaChangeRequests().get(0).payload());
        Assertions.assertEquals(UserConsent.NO, response.secondaryConsent().get(0).userConsent());
        Assertions.assertEquals("ys", response.secondaryConsent().get(0).type());
    }
}
