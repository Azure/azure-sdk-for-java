// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.support.SupportManager;
import com.azure.resourcemanager.support.models.ProblemClassification;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProblemClassificationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"id\":\"vfbgofeljagrqmqh\",\"name\":\"vriiio\",\"type\":\"al\",\"properties\":{\"displayName\":\"kvtvsexso\",\"secondaryConsentEnabled\":[{\"description\":\"uqhhahhxvrh\",\"type\":\"kwpjgwwspughftqs\"}],\"metadata\":{\"digrjguufzdmsyqt\":\"xujxuknd\",\"o\":\"ihwhbotzingamvpp\",\"amvdkfwynwcvtbv\":\"zqzudph\"},\"parentProblemClassification\":{\"id\":\"hmtnvy\",\"name\":\"atkzwpcnpw\",\"type\":\"jaesgvvsccya\",\"properties\":{\"displayName\":\"qfhwyg\",\"secondaryConsentEnabled\":[{},{},{}],\"metadata\":{\"emdwzrmuhapfc\":\"kfxu\"},\"parentProblemClassification\":{\"id\":\"sqxqvp\",\"name\":\"uoymgccelvezry\",\"type\":\"lmfeokerq\",\"properties\":{}}}}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SupportManager manager = SupportManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ProblemClassification> response
            = manager.problemClassifications().list("ylwbtlhflsjcdhsz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kvtvsexso", response.iterator().next().displayName());
        Assertions.assertEquals("uqhhahhxvrh",
            response.iterator().next().secondaryConsentEnabled().get(0).description());
        Assertions.assertEquals("kwpjgwwspughftqs", response.iterator().next().secondaryConsentEnabled().get(0).type());
        Assertions.assertEquals("qfhwyg", response.iterator().next().parentProblemClassification().displayName());
    }
}
