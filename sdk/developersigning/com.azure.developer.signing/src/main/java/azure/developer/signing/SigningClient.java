// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.developer.signing;

import azure.developer.signing.implementation.CertificateProfileOperationsImpl;
import azure.developer.signing.models.ExtendedKeyUsage;
import azure.developer.signing.models.OperationStatusSignResultError;
import azure.developer.signing.models.SignResult;
import azure.developer.signing.models.SigningPayloadOptions;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollOperationDetails;
import com.azure.core.util.polling.SyncPoller;

/**
 * Initializes a new instance of the synchronous SigningClient type.
 */
@ServiceClient(builder = SigningClientBuilder.class)
public final class SigningClient {
    @Generated
    private final CertificateProfileOperationsImpl serviceClient;

    /**
     * Initializes an instance of SigningClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SigningClient(CertificateProfileOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets the status of a signing operation.
     * 
     * This status operation requires that a Sign request has been submitted and the operationId is known.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         signature: byte[] (Optional)
     *         signingCertificate: byte[] (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return provides status details for long running operations along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSigningStatusWithResponse(String accountName, String certificateProfile,
        String operationId, RequestOptions requestOptions) {
        return this.serviceClient.getSigningStatusWithResponse(accountName, certificateProfile, operationId,
            requestOptions);
    }

    /**
     * Gets the signing root certificate on the certificate chain for that account and profile name.
     * 
     * The root certificate is generated as part of the initial account creation and it is used to sign the bits for the
     * profile provided.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSignRootCertificateWithResponse(String accountName, String certificateProfile,
        RequestOptions requestOptions) {
        return this.serviceClient.getSignRootCertificateWithResponse(accountName, certificateProfile, requestOptions);
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing
     * operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     eku: String (Required)
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listExtendedKeyUsages(String accountName, String certificateProfile,
        RequestOptions requestOptions) {
        return this.serviceClient.listExtendedKeyUsages(accountName, certificateProfile, requestOptions);
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>client-version</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An optional client version.</td>
     * </tr>
     * <tr>
     * <td>x-correlation-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An identifier used to batch multiple requests.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginSign(String accountName, String certificateProfile,
        BinaryData signingPayloadOptions, RequestOptions requestOptions) {
        return this.serviceClient.beginSign(accountName, certificateProfile, signingPayloadOptions, requestOptions);
    }

    /**
     * Gets the status of a signing operation.
     * 
     * This status operation requires that a Sign request has been submitted and the operationId is known.
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusSignResultError getSigningStatus(String accountName, String certificateProfile,
        String operationId) {
        // Generated convenience method for getSigningStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSigningStatusWithResponse(accountName, certificateProfile, operationId, requestOptions).getValue()
            .toObject(OperationStatusSignResultError.class);
    }

    /**
     * Gets the signing root certificate on the certificate chain for that account and profile name.
     * 
     * The root certificate is generated as part of the initial account creation and it is used to sign the bits for the
     * profile provided.
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getSignRootCertificate(String accountName, String certificateProfile) {
        // Generated convenience method for getSignRootCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSignRootCertificateWithResponse(accountName, certificateProfile, requestOptions).getValue();
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing
     * operation.
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtendedKeyUsage> listExtendedKeyUsages(String accountName, String certificateProfile) {
        // Generated convenience method for listExtendedKeyUsages
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listExtendedKeyUsages(accountName, certificateProfile, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ExtendedKeyUsage.class));
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param clientVersion An optional client version.
     * @param xCorrelationId An identifier used to batch multiple requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollOperationDetails, SignResult> beginSign(String accountName, String certificateProfile,
        SigningPayloadOptions signingPayloadOptions, String clientVersion, String xCorrelationId) {
        // Generated convenience method for beginSignWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (clientVersion != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("client-version"), clientVersion);
        }
        if (xCorrelationId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-correlation-id"), xCorrelationId);
        }
        return serviceClient.beginSignWithModel(accountName, certificateProfile,
            BinaryData.fromObject(signingPayloadOptions), requestOptions);
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollOperationDetails, SignResult> beginSign(String accountName, String certificateProfile,
        SigningPayloadOptions signingPayloadOptions) {
        // Generated convenience method for beginSignWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginSignWithModel(accountName, certificateProfile,
            BinaryData.fromObject(signingPayloadOptions), requestOptions);
    }
}
