// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.developer.signing.implementation;

import azure.developer.signing.SigningServiceVersion;
import azure.developer.signing.models.SignResult;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollOperationDetails;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CertificateProfileOperations.
 */
public final class CertificateProfileOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CertificateProfileOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final SigningClientImpl client;

    /**
     * Initializes an instance of CertificateProfileOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CertificateProfileOperationsImpl(SigningClientImpl client) {
        this.service = RestProxy.create(CertificateProfileOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SigningServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SigningClientCertificateProfileOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("https://{region}.codesigning.azure.net/")
    @ServiceInterface(name = "SigningClientCertifi")
    public interface CertificateProfileOperationsService {
        @Get("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSigningStatus(@HostParam("region") String region,
            @QueryParam("api-version") String apiVersion, @PathParam("accountName") String accountName,
            @PathParam("certificateProfile") String certificateProfile, @PathParam("operationId") String operationId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSigningStatusSync(@HostParam("region") String region,
            @QueryParam("api-version") String apiVersion, @PathParam("accountName") String accountName,
            @PathParam("certificateProfile") String certificateProfile, @PathParam("operationId") String operationId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/rootcert")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSignRootCertificate(@HostParam("region") String region,
            @QueryParam("api-version") String apiVersion, @PathParam("accountName") String accountName,
            @PathParam("certificateProfile") String certificateProfile, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/rootcert")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSignRootCertificateSync(@HostParam("region") String region,
            @QueryParam("api-version") String apiVersion, @PathParam("accountName") String accountName,
            @PathParam("certificateProfile") String certificateProfile, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/eku")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listExtendedKeyUsages(@HostParam("region") String region,
            @QueryParam("api-version") String apiVersion, @PathParam("accountName") String accountName,
            @PathParam("certificateProfile") String certificateProfile, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/eku")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listExtendedKeyUsagesSync(@HostParam("region") String region,
            @QueryParam("api-version") String apiVersion, @PathParam("accountName") String accountName,
            @PathParam("certificateProfile") String certificateProfile, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}:sign")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> sign(@HostParam("region") String region,
            @QueryParam("api-version") String apiVersion, @PathParam("accountName") String accountName,
            @PathParam("certificateProfile") String certificateProfile, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData signingPayloadOptions, RequestOptions requestOptions,
            Context context);

        @Post("/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}:sign")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> signSync(@HostParam("region") String region, @QueryParam("api-version") String apiVersion,
            @PathParam("accountName") String accountName, @PathParam("certificateProfile") String certificateProfile,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData signingPayloadOptions,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listExtendedKeyUsagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("region") String region,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listExtendedKeyUsagesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("region") String region,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Gets the status of a signing operation.
     * 
     * This status operation requires that a Sign request has been submitted and the operationId is known.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         signature: byte[] (Optional)
     *         signingCertificate: byte[] (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return provides status details for long running operations along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSigningStatusWithResponseAsync(String accountName, String certificateProfile,
        String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getSigningStatus(this.client.getRegion(), this.client.getServiceVersion().getVersion(),
                accountName, certificateProfile, operationId, accept, requestOptions, context));
    }

    /**
     * Gets the status of a signing operation.
     * 
     * This status operation requires that a Sign request has been submitted and the operationId is known.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         signature: byte[] (Optional)
     *         signingCertificate: byte[] (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return provides status details for long running operations along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSigningStatusWithResponse(String accountName, String certificateProfile,
        String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSigningStatusSync(this.client.getRegion(), this.client.getServiceVersion().getVersion(),
            accountName, certificateProfile, operationId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the signing root certificate on the certificate chain for that account and profile name.
     * 
     * The root certificate is generated as part of the initial account creation and it is used to sign the bits for the
     * profile provided.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSignRootCertificateWithResponseAsync(String accountName,
        String certificateProfile, RequestOptions requestOptions) {
        final String accept = "application/json, application/x-x509-ca-cert";
        return FluxUtil.withContext(context -> service.getSignRootCertificate(this.client.getRegion(),
            this.client.getServiceVersion().getVersion(), accountName, certificateProfile, accept, requestOptions,
            context));
    }

    /**
     * Gets the signing root certificate on the certificate chain for that account and profile name.
     * 
     * The root certificate is generated as part of the initial account creation and it is used to sign the bits for the
     * profile provided.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param accountName Signing account name.
     * @param certificateProfile Signing Certificate profile name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSignRootCertificateWithResponse(String accountName, String certificateProfile,
        RequestOptions requestOptions) {
        final String accept = "application/json, application/x-x509-ca-cert";
        return service.getSignRootCertificateSync(this.client.getRegion(), this.client.getServiceVersion().getVersion(),
            accountName, certificateProfile, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing
     * operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     eku: String (Required)
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listExtendedKeyUsagesSinglePageAsync(String accountName,
        String certificateProfile, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listExtendedKeyUsages(this.client.getRegion(),
                this.client.getServiceVersion().getVersion(), accountName, certificateProfile, accept, requestOptions,
                context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing
     * operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     eku: String (Required)
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listExtendedKeyUsagesAsync(String accountName, String certificateProfile,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(
            () -> listExtendedKeyUsagesSinglePageAsync(accountName, certificateProfile, requestOptions),
            nextLink -> listExtendedKeyUsagesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing
     * operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     eku: String (Required)
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listExtendedKeyUsagesSinglePage(String accountName, String certificateProfile,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listExtendedKeyUsagesSync(this.client.getRegion(), this.client.getServiceVersion().getVersion(),
                accountName, certificateProfile, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing
     * operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     eku: String (Required)
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listExtendedKeyUsages(String accountName, String certificateProfile,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(
            () -> listExtendedKeyUsagesSinglePage(accountName, certificateProfile, requestOptions),
            nextLink -> listExtendedKeyUsagesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>client-version</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An optional client version.</td>
     * </tr>
     * <tr>
     * <td>x-correlation-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An identifier used to batch multiple requests.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status details for long running operations along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> signWithResponseAsync(String accountName, String certificateProfile,
        BinaryData signingPayloadOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.sign(this.client.getRegion(), this.client.getServiceVersion().getVersion(),
                accountName, certificateProfile, accept, signingPayloadOptions, requestOptions, context));
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>client-version</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An optional client version.</td>
     * </tr>
     * <tr>
     * <td>x-correlation-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An identifier used to batch multiple requests.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status details for long running operations along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> signWithResponse(String accountName, String certificateProfile,
        BinaryData signingPayloadOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.signSync(this.client.getRegion(), this.client.getServiceVersion().getVersion(), accountName,
            certificateProfile, accept, signingPayloadOptions, requestOptions, Context.NONE);
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>client-version</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An optional client version.</td>
     * </tr>
     * <tr>
     * <td>x-correlation-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An identifier used to batch multiple requests.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSignAsync(String accountName, String certificateProfile,
        BinaryData signingPayloadOptions, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.signWithResponseAsync(accountName, certificateProfile, signingPayloadOptions, requestOptions),
            new com.azure.core.experimental.util.polling.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())

                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext() : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>client-version</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An optional client version.</td>
     * </tr>
     * <tr>
     * <td>x-correlation-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An identifier used to batch multiple requests.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginSign(String accountName, String certificateProfile,
        BinaryData signingPayloadOptions, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.signWithResponse(accountName, certificateProfile, signingPayloadOptions, requestOptions),
            new com.azure.core.experimental.util.polling.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())

                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext() : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>client-version</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An optional client version.</td>
     * </tr>
     * <tr>
     * <td>x-correlation-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An identifier used to batch multiple requests.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollOperationDetails, SignResult> beginSignWithModelAsync(String accountName,
        String certificateProfile, BinaryData signingPayloadOptions, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.signWithResponseAsync(accountName, certificateProfile, signingPayloadOptions, requestOptions),
            new com.azure.core.experimental.util.polling.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())

                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext() : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(PollOperationDetails.class), TypeReference.createInstance(SignResult.class));
    }

    /**
     * Submit a sign operation.
     * 
     * Submit a sign operation under the created account and profile name provided.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>client-version</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An optional client version.</td>
     * </tr>
     * <tr>
     * <td>x-correlation-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An identifier used to batch multiple requests.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param accountName Azure Developer Signing account name.
     * @param certificateProfile Azure Developer Signing certificate profile name under an account.
     * @param signingPayloadOptions The artifact request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollOperationDetails, SignResult> beginSignWithModel(String accountName,
        String certificateProfile, BinaryData signingPayloadOptions, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.signWithResponse(accountName, certificateProfile, signingPayloadOptions, requestOptions),
            new com.azure.core.experimental.util.polling.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())

                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext() : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(PollOperationDetails.class), TypeReference.createInstance(SignResult.class));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     eku: String (Required)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listExtendedKeyUsagesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listExtendedKeyUsagesNext(nextLink, this.client.getRegion(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     * 
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     eku: String (Required)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listExtendedKeyUsagesNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listExtendedKeyUsagesNextSync(nextLink, this.client.getRegion(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
