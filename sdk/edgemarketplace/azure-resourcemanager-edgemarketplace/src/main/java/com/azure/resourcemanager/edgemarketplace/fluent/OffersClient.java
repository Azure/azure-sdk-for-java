// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.edgemarketplace.fluent.models.DiskAccessTokenInner;
import com.azure.resourcemanager.edgemarketplace.fluent.models.OfferInner;
import com.azure.resourcemanager.edgemarketplace.models.AccessTokenReadRequest;
import com.azure.resourcemanager.edgemarketplace.models.AccessTokenRequest;

/** An instance of this class provides access to all the operations defined in OffersClient. */
public interface OffersClient {
    /**
     * List Offer resources by parent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Offer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OfferInner> list(String resourceUri);

    /**
     * List Offer resources by parent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param skipToken Skip over when retrieving results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Offer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OfferInner> list(
        String resourceUri,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        String skipToken,
        Context context);

    /**
     * List Offer resources by subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Offer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OfferInner> listBySubscription();

    /**
     * List Offer resources by subscription.
     *
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param skipToken Skip over when retrieving results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Offer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OfferInner> listBySubscription(
        Integer top, Integer skip, Integer maxPageSize, String filter, String skipToken, Context context);

    /**
     * Get a Offer.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Offer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OfferInner> getWithResponse(String resourceUri, String offerId, Context context);

    /**
     * Get a Offer.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Offer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OfferInner get(String resourceUri, String offerId);

    /**
     * A long-running resource action.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the disk access token.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DiskAccessTokenInner>, DiskAccessTokenInner> beginGenerateAccessToken(
        String resourceUri, String offerId, AccessTokenRequest body);

    /**
     * A long-running resource action.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the disk access token.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DiskAccessTokenInner>, DiskAccessTokenInner> beginGenerateAccessToken(
        String resourceUri, String offerId, AccessTokenRequest body, Context context);

    /**
     * A long-running resource action.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the disk access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DiskAccessTokenInner generateAccessToken(String resourceUri, String offerId, AccessTokenRequest body);

    /**
     * A long-running resource action.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the disk access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DiskAccessTokenInner generateAccessToken(
        String resourceUri, String offerId, AccessTokenRequest body, Context context);

    /**
     * get access token.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access token along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DiskAccessTokenInner> getAccessTokenWithResponse(
        String resourceUri, String offerId, AccessTokenReadRequest body, Context context);

    /**
     * get access token.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param offerId Id of the offer.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DiskAccessTokenInner getAccessToken(String resourceUri, String offerId, AccessTokenReadRequest body);
}
