// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Publishers. */
public interface Publishers {
    /**
     * List Publisher resources by parent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Publisher list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Publisher> list(String resourceUri);

    /**
     * List Publisher resources by parent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param skipToken Skip over when retrieving results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Publisher list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Publisher> list(
        String resourceUri,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        String skipToken,
        Context context);

    /**
     * List Publisher resources in subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Publisher list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Publisher> listBySubscription();

    /**
     * List Publisher resources in subscription.
     *
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param skipToken Skip over when retrieving results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Publisher list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Publisher> listBySubscription(
        Integer top, Integer skip, Integer maxPageSize, String filter, String skipToken, Context context);

    /**
     * Get a Publisher.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param publisherName Name of the publisher.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Publisher along with {@link Response}.
     */
    Response<Publisher> getWithResponse(String resourceUri, String publisherName, Context context);

    /**
     * Get a Publisher.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param publisherName Name of the publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Publisher.
     */
    Publisher get(String resourceUri, String publisherName);
}
