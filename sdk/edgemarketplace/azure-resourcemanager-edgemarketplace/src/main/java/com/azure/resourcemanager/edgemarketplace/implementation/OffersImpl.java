// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgemarketplace.fluent.OffersClient;
import com.azure.resourcemanager.edgemarketplace.fluent.models.DiskAccessTokenInner;
import com.azure.resourcemanager.edgemarketplace.fluent.models.OfferInner;
import com.azure.resourcemanager.edgemarketplace.models.AccessTokenReadRequest;
import com.azure.resourcemanager.edgemarketplace.models.AccessTokenRequest;
import com.azure.resourcemanager.edgemarketplace.models.DiskAccessToken;
import com.azure.resourcemanager.edgemarketplace.models.Offer;
import com.azure.resourcemanager.edgemarketplace.models.Offers;

public final class OffersImpl implements Offers {
    private static final ClientLogger LOGGER = new ClientLogger(OffersImpl.class);

    private final OffersClient innerClient;

    private final com.azure.resourcemanager.edgemarketplace.EdgeMarketplaceManager serviceManager;

    public OffersImpl(
        OffersClient innerClient, com.azure.resourcemanager.edgemarketplace.EdgeMarketplaceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Offer> list(String resourceUri) {
        PagedIterable<OfferInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new OfferImpl(inner1, this.manager()));
    }

    public PagedIterable<Offer> list(
        String resourceUri,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        String skipToken,
        Context context) {
        PagedIterable<OfferInner> inner =
            this.serviceClient().list(resourceUri, top, skip, maxPageSize, filter, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new OfferImpl(inner1, this.manager()));
    }

    public PagedIterable<Offer> listBySubscription() {
        PagedIterable<OfferInner> inner = this.serviceClient().listBySubscription();
        return Utils.mapPage(inner, inner1 -> new OfferImpl(inner1, this.manager()));
    }

    public PagedIterable<Offer> listBySubscription(
        Integer top, Integer skip, Integer maxPageSize, String filter, String skipToken, Context context) {
        PagedIterable<OfferInner> inner =
            this.serviceClient().listBySubscription(top, skip, maxPageSize, filter, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new OfferImpl(inner1, this.manager()));
    }

    public Response<Offer> getWithResponse(String resourceUri, String offerId, Context context) {
        Response<OfferInner> inner = this.serviceClient().getWithResponse(resourceUri, offerId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OfferImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Offer get(String resourceUri, String offerId) {
        OfferInner inner = this.serviceClient().get(resourceUri, offerId);
        if (inner != null) {
            return new OfferImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DiskAccessToken generateAccessToken(String resourceUri, String offerId, AccessTokenRequest body) {
        DiskAccessTokenInner inner = this.serviceClient().generateAccessToken(resourceUri, offerId, body);
        if (inner != null) {
            return new DiskAccessTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DiskAccessToken generateAccessToken(
        String resourceUri, String offerId, AccessTokenRequest body, Context context) {
        DiskAccessTokenInner inner = this.serviceClient().generateAccessToken(resourceUri, offerId, body, context);
        if (inner != null) {
            return new DiskAccessTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DiskAccessToken> getAccessTokenWithResponse(
        String resourceUri, String offerId, AccessTokenReadRequest body, Context context) {
        Response<DiskAccessTokenInner> inner =
            this.serviceClient().getAccessTokenWithResponse(resourceUri, offerId, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DiskAccessTokenImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DiskAccessToken getAccessToken(String resourceUri, String offerId, AccessTokenReadRequest body) {
        DiskAccessTokenInner inner = this.serviceClient().getAccessToken(resourceUri, offerId, body);
        if (inner != null) {
            return new DiskAccessTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private OffersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.edgemarketplace.EdgeMarketplaceManager manager() {
        return this.serviceManager;
    }
}
