/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.notificationhubs.v2017_04_01.implementation;

import com.microsoft.azure.management.notificationhubs.v2017_04_01.NotificationHubResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.NotificationHubPatchParameters;
import java.util.Map;
import java.util.List;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.NotificationHubCreateOrUpdateParameters;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.AdmCredential;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.ApnsCredential;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.SharedAccessAuthorizationRuleProperties;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.BaiduCredential;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.GcmCredential;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.MpnsCredential;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.WnsCredential;
import com.microsoft.azure.management.notificationhubs.v2017_04_01.Sku;
import rx.functions.Func1;

class NotificationHubResourceImpl extends CreatableUpdatableImpl<NotificationHubResource, NotificationHubResourceInner, NotificationHubResourceImpl> implements NotificationHubResource, NotificationHubResource.Definition, NotificationHubResource.Update {
    private final NotificationHubsManager manager;
    private String resourceGroupName;
    private String namespaceName;
    private String notificationHubName;
    private NotificationHubCreateOrUpdateParameters createParameter;
    private NotificationHubPatchParameters updateParameter;

    NotificationHubResourceImpl(String name, NotificationHubsManager manager) {
        super(name, new NotificationHubResourceInner());
        this.manager = manager;
        // Set resource name
        this.notificationHubName = name;
        //
        this.createParameter = new NotificationHubCreateOrUpdateParameters();
        this.updateParameter = new NotificationHubPatchParameters();
    }

    NotificationHubResourceImpl(NotificationHubResourceInner inner, NotificationHubsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.notificationHubName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.namespaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "namespaces");
        this.notificationHubName = IdParsingUtils.getValueFromIdByName(inner.id(), "notificationHubs");
        //
        this.createParameter = new NotificationHubCreateOrUpdateParameters();
        this.updateParameter = new NotificationHubPatchParameters();
    }

    @Override
    public NotificationHubsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<NotificationHubResource> createResourceAsync() {
        NotificationHubsInner client = this.manager().inner().notificationHubs();
        return client.createOrUpdateAsync(this.resourceGroupName, this.namespaceName, this.notificationHubName, this.createParameter)
            .map(new Func1<NotificationHubResourceInner, NotificationHubResourceInner>() {
               @Override
               public NotificationHubResourceInner call(NotificationHubResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<NotificationHubResource> updateResourceAsync() {
        NotificationHubsInner client = this.manager().inner().notificationHubs();
        return client.patchAsync(this.resourceGroupName, this.namespaceName, this.notificationHubName, this.updateParameter)
            .map(new Func1<NotificationHubResourceInner, NotificationHubResourceInner>() {
               @Override
               public NotificationHubResourceInner call(NotificationHubResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<NotificationHubResourceInner> getInnerAsync() {
        NotificationHubsInner client = this.manager().inner().notificationHubs();
        return client.getAsync(this.resourceGroupName, this.namespaceName, this.notificationHubName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new NotificationHubCreateOrUpdateParameters();
        this.updateParameter = new NotificationHubPatchParameters();
    }

    @Override
    public AdmCredential admCredential() {
        return this.inner().admCredential();
    }

    @Override
    public ApnsCredential apnsCredential() {
        return this.inner().apnsCredential();
    }

    @Override
    public List<SharedAccessAuthorizationRuleProperties> authorizationRules() {
        return this.inner().authorizationRules();
    }

    @Override
    public BaiduCredential baiduCredential() {
        return this.inner().baiduCredential();
    }

    @Override
    public GcmCredential gcmCredential() {
        return this.inner().gcmCredential();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public MpnsCredential mpnsCredential() {
        return this.inner().mpnsCredential();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String notificationHubResourceName() {
        return this.inner().notificationHubResourceName();
    }

    @Override
    public String registrationTtl() {
        return this.inner().registrationTtl();
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public WnsCredential wnsCredential() {
        return this.inner().wnsCredential();
    }

    @Override
    public NotificationHubResourceImpl withExistingNamespace(String resourceGroupName, String namespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.namespaceName = namespaceName;
        return this;
    }

    @Override
    public NotificationHubResourceImpl withNotificationHubCreateOrUpdateParametersName(String notificationHubCreateOrUpdateParametersName) {
        this.createParameter.withNotificationHubCreateOrUpdateParametersName(notificationHubCreateOrUpdateParametersName);
        return this;
    }

    @Override
    public NotificationHubResourceImpl withNotificationHubPatchParametersName(String notificationHubPatchParametersName) {
        this.updateParameter.withNotificationHubPatchParametersName(notificationHubPatchParametersName);
        return this;
    }

    @Override
    public NotificationHubResourceImpl withAdmCredential(AdmCredential admCredential) {
        if (isInCreateMode()) {
            this.createParameter.withAdmCredential(admCredential);
        } else {
            this.updateParameter.withAdmCredential(admCredential);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withApnsCredential(ApnsCredential apnsCredential) {
        if (isInCreateMode()) {
            this.createParameter.withApnsCredential(apnsCredential);
        } else {
            this.updateParameter.withApnsCredential(apnsCredential);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withAuthorizationRules(List<SharedAccessAuthorizationRuleProperties> authorizationRules) {
        if (isInCreateMode()) {
            this.createParameter.withAuthorizationRules(authorizationRules);
        } else {
            this.updateParameter.withAuthorizationRules(authorizationRules);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withBaiduCredential(BaiduCredential baiduCredential) {
        if (isInCreateMode()) {
            this.createParameter.withBaiduCredential(baiduCredential);
        } else {
            this.updateParameter.withBaiduCredential(baiduCredential);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withGcmCredential(GcmCredential gcmCredential) {
        if (isInCreateMode()) {
            this.createParameter.withGcmCredential(gcmCredential);
        } else {
            this.updateParameter.withGcmCredential(gcmCredential);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withLocation(String location) {
        if (isInCreateMode()) {
            this.createParameter.withLocation(location);
        } else {
            this.updateParameter.withLocation(location);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withMpnsCredential(MpnsCredential mpnsCredential) {
        if (isInCreateMode()) {
            this.createParameter.withMpnsCredential(mpnsCredential);
        } else {
            this.updateParameter.withMpnsCredential(mpnsCredential);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withRegistrationTtl(String registrationTtl) {
        if (isInCreateMode()) {
            this.createParameter.withRegistrationTtl(registrationTtl);
        } else {
            this.updateParameter.withRegistrationTtl(registrationTtl);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withSku(Sku sku) {
        if (isInCreateMode()) {
            this.createParameter.withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createParameter.withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

    @Override
    public NotificationHubResourceImpl withWnsCredential(WnsCredential wnsCredential) {
        if (isInCreateMode()) {
            this.createParameter.withWnsCredential(wnsCredential);
        } else {
            this.updateParameter.withWnsCredential(wnsCredential);
        }
        return this;
    }

}
