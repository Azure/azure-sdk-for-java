// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description of a NotificationHub BrowserCredential.
 */
@Fluent
public final class BrowserCredentialProperties implements JsonSerializable<BrowserCredentialProperties> {
    /*
     * Gets or sets web push subject.
     */
    private String subject;

    /*
     * Gets or sets VAPID private key.
     */
    private String vapidPrivateKey;

    /*
     * Gets or sets VAPID public key.
     */
    private String vapidPublicKey;

    /**
     * Creates an instance of BrowserCredentialProperties class.
     */
    public BrowserCredentialProperties() {
    }

    /**
     * Get the subject property: Gets or sets web push subject.
     * 
     * @return the subject value.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * Set the subject property: Gets or sets web push subject.
     * 
     * @param subject the subject value to set.
     * @return the BrowserCredentialProperties object itself.
     */
    public BrowserCredentialProperties withSubject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Get the vapidPrivateKey property: Gets or sets VAPID private key.
     * 
     * @return the vapidPrivateKey value.
     */
    public String vapidPrivateKey() {
        return this.vapidPrivateKey;
    }

    /**
     * Set the vapidPrivateKey property: Gets or sets VAPID private key.
     * 
     * @param vapidPrivateKey the vapidPrivateKey value to set.
     * @return the BrowserCredentialProperties object itself.
     */
    public BrowserCredentialProperties withVapidPrivateKey(String vapidPrivateKey) {
        this.vapidPrivateKey = vapidPrivateKey;
        return this;
    }

    /**
     * Get the vapidPublicKey property: Gets or sets VAPID public key.
     * 
     * @return the vapidPublicKey value.
     */
    public String vapidPublicKey() {
        return this.vapidPublicKey;
    }

    /**
     * Set the vapidPublicKey property: Gets or sets VAPID public key.
     * 
     * @param vapidPublicKey the vapidPublicKey value to set.
     * @return the BrowserCredentialProperties object itself.
     */
    public BrowserCredentialProperties withVapidPublicKey(String vapidPublicKey) {
        this.vapidPublicKey = vapidPublicKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subject() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subject in model BrowserCredentialProperties"));
        }
        if (vapidPrivateKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vapidPrivateKey in model BrowserCredentialProperties"));
        }
        if (vapidPublicKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vapidPublicKey in model BrowserCredentialProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BrowserCredentialProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subject", this.subject);
        jsonWriter.writeStringField("vapidPrivateKey", this.vapidPrivateKey);
        jsonWriter.writeStringField("vapidPublicKey", this.vapidPublicKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrowserCredentialProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrowserCredentialProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrowserCredentialProperties.
     */
    public static BrowserCredentialProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrowserCredentialProperties deserializedBrowserCredentialProperties = new BrowserCredentialProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subject".equals(fieldName)) {
                    deserializedBrowserCredentialProperties.subject = reader.getString();
                } else if ("vapidPrivateKey".equals(fieldName)) {
                    deserializedBrowserCredentialProperties.vapidPrivateKey = reader.getString();
                } else if ("vapidPublicKey".equals(fieldName)) {
                    deserializedBrowserCredentialProperties.vapidPublicKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrowserCredentialProperties;
        });
    }
}
