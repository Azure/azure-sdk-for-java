// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.fluent.models.BaiduCredentialProperties;
import java.io.IOException;

/**
 * Description of a NotificationHub BaiduCredential.
 */
@Fluent
public final class BaiduCredential implements JsonSerializable<BaiduCredential> {
    /*
     * Description of a NotificationHub BaiduCredential.
     */
    private BaiduCredentialProperties innerProperties = new BaiduCredentialProperties();

    /**
     * Creates an instance of BaiduCredential class.
     */
    public BaiduCredential() {
    }

    /**
     * Get the innerProperties property: Description of a NotificationHub BaiduCredential.
     * 
     * @return the innerProperties value.
     */
    private BaiduCredentialProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the baiduApiKey property: Gets or sets baidu Api Key.
     * 
     * @return the baiduApiKey value.
     */
    public String baiduApiKey() {
        return this.innerProperties() == null ? null : this.innerProperties().baiduApiKey();
    }

    /**
     * Set the baiduApiKey property: Gets or sets baidu Api Key.
     * 
     * @param baiduApiKey the baiduApiKey value to set.
     * @return the BaiduCredential object itself.
     */
    public BaiduCredential withBaiduApiKey(String baiduApiKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BaiduCredentialProperties();
        }
        this.innerProperties().withBaiduApiKey(baiduApiKey);
        return this;
    }

    /**
     * Get the baiduEndPoint property: Gets or sets baidu Endpoint.
     * 
     * @return the baiduEndPoint value.
     */
    public String baiduEndPoint() {
        return this.innerProperties() == null ? null : this.innerProperties().baiduEndPoint();
    }

    /**
     * Set the baiduEndPoint property: Gets or sets baidu Endpoint.
     * 
     * @param baiduEndPoint the baiduEndPoint value to set.
     * @return the BaiduCredential object itself.
     */
    public BaiduCredential withBaiduEndPoint(String baiduEndPoint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BaiduCredentialProperties();
        }
        this.innerProperties().withBaiduEndPoint(baiduEndPoint);
        return this;
    }

    /**
     * Get the baiduSecretKey property: Gets or sets baidu Secret Key.
     * 
     * @return the baiduSecretKey value.
     */
    public String baiduSecretKey() {
        return this.innerProperties() == null ? null : this.innerProperties().baiduSecretKey();
    }

    /**
     * Set the baiduSecretKey property: Gets or sets baidu Secret Key.
     * 
     * @param baiduSecretKey the baiduSecretKey value to set.
     * @return the BaiduCredential object itself.
     */
    public BaiduCredential withBaiduSecretKey(String baiduSecretKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BaiduCredentialProperties();
        }
        this.innerProperties().withBaiduSecretKey(baiduSecretKey);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property innerProperties in model BaiduCredential"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BaiduCredential.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BaiduCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BaiduCredential if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BaiduCredential.
     */
    public static BaiduCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BaiduCredential deserializedBaiduCredential = new BaiduCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedBaiduCredential.innerProperties = BaiduCredentialProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaiduCredential;
        });
    }
}
