// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Parameters supplied to the Check Name Availability for Namespace and NotificationHubs.
 */
@Fluent
public final class CheckAvailabilityParameters implements JsonSerializable<CheckAvailabilityParameters> {
    /*
     * Resource Id
     */
    private String id;

    /*
     * Resource name
     */
    private String name;

    /*
     * Resource type
     */
    private String type;

    /*
     * Resource location
     */
    private String location;

    /*
     * Resource tags
     */
    private Map<String, String> tags;

    /*
     * The sku of the created namespace
     */
    private Sku sku;

    /*
     * True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false.
     */
    private Boolean isAvailiable;

    /**
     * Creates an instance of CheckAvailabilityParameters class.
     */
    public CheckAvailabilityParameters() {
    }

    /**
     * Get the id property: Resource Id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Resource name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource name.
     * 
     * @param name the name value to set.
     * @return the CheckAvailabilityParameters object itself.
     */
    public CheckAvailabilityParameters withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the location property: Resource location.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Resource location.
     * 
     * @param location the location value to set.
     * @return the CheckAvailabilityParameters object itself.
     */
    public CheckAvailabilityParameters withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the CheckAvailabilityParameters object itself.
     */
    public CheckAvailabilityParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the sku property: The sku of the created namespace.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The sku of the created namespace.
     * 
     * @param sku the sku value to set.
     * @return the CheckAvailabilityParameters object itself.
     */
    public CheckAvailabilityParameters withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the isAvailiable property: True if the name is available and can be used to create new
     * Namespace/NotificationHub. Otherwise false.
     * 
     * @return the isAvailiable value.
     */
    public Boolean isAvailiable() {
        return this.isAvailiable;
    }

    /**
     * Set the isAvailiable property: True if the name is available and can be used to create new
     * Namespace/NotificationHub. Otherwise false.
     * 
     * @param isAvailiable the isAvailiable value to set.
     * @return the CheckAvailabilityParameters object itself.
     */
    public CheckAvailabilityParameters withIsAvailiable(Boolean isAvailiable) {
        this.isAvailiable = isAvailiable;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model CheckAvailabilityParameters"));
        }
        if (sku() != null) {
            sku().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CheckAvailabilityParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeBooleanField("isAvailiable", this.isAvailiable);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckAvailabilityParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckAvailabilityParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CheckAvailabilityParameters.
     */
    public static CheckAvailabilityParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckAvailabilityParameters deserializedCheckAvailabilityParameters = new CheckAvailabilityParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCheckAvailabilityParameters.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedCheckAvailabilityParameters.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCheckAvailabilityParameters.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedCheckAvailabilityParameters.location = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedCheckAvailabilityParameters.tags = tags;
                } else if ("sku".equals(fieldName)) {
                    deserializedCheckAvailabilityParameters.sku = Sku.fromJson(reader);
                } else if ("isAvailiable".equals(fieldName)) {
                    deserializedCheckAvailabilityParameters.isAvailiable = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckAvailabilityParameters;
        });
    }
}
