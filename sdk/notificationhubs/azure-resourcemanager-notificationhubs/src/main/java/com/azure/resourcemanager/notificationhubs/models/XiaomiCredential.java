// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.fluent.models.XiaomiCredentialProperties;
import java.io.IOException;

/**
 * Description of a NotificationHub XiaomiCredential.
 */
@Fluent
public final class XiaomiCredential implements JsonSerializable<XiaomiCredential> {
    /*
     * Description of a NotificationHub XiaomiCredentialProperties.
     */
    private XiaomiCredentialProperties innerProperties = new XiaomiCredentialProperties();

    /**
     * Creates an instance of XiaomiCredential class.
     */
    public XiaomiCredential() {
    }

    /**
     * Get the innerProperties property: Description of a NotificationHub XiaomiCredentialProperties.
     * 
     * @return the innerProperties value.
     */
    private XiaomiCredentialProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the appSecret property: Gets or sets app secret.
     * 
     * @return the appSecret value.
     */
    public String appSecret() {
        return this.innerProperties() == null ? null : this.innerProperties().appSecret();
    }

    /**
     * Set the appSecret property: Gets or sets app secret.
     * 
     * @param appSecret the appSecret value to set.
     * @return the XiaomiCredential object itself.
     */
    public XiaomiCredential withAppSecret(String appSecret) {
        if (this.innerProperties() == null) {
            this.innerProperties = new XiaomiCredentialProperties();
        }
        this.innerProperties().withAppSecret(appSecret);
        return this;
    }

    /**
     * Get the endpoint property: Gets or sets xiaomi service endpoint.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().endpoint();
    }

    /**
     * Set the endpoint property: Gets or sets xiaomi service endpoint.
     * 
     * @param endpoint the endpoint value to set.
     * @return the XiaomiCredential object itself.
     */
    public XiaomiCredential withEndpoint(String endpoint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new XiaomiCredentialProperties();
        }
        this.innerProperties().withEndpoint(endpoint);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model XiaomiCredential"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(XiaomiCredential.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of XiaomiCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of XiaomiCredential if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the XiaomiCredential.
     */
    public static XiaomiCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            XiaomiCredential deserializedXiaomiCredential = new XiaomiCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedXiaomiCredential.innerProperties = XiaomiCredentialProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedXiaomiCredential;
        });
    }
}
