// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A network authorization rule that filters traffic based on IP address.
 */
@Fluent
public final class IpRule {
    /*
     * IP mask.
     */
    @JsonProperty(value = "ipMask", required = true)
    private String ipMask;

    /*
     * List of access rights.
     */
    @JsonProperty(value = "rights", required = true)
    private List<AccessRights> rights;

    /**
     * Creates an instance of IpRule class.
     */
    public IpRule() {
    }

    /**
     * Get the ipMask property: IP mask.
     * 
     * @return the ipMask value.
     */
    public String ipMask() {
        return this.ipMask;
    }

    /**
     * Set the ipMask property: IP mask.
     * 
     * @param ipMask the ipMask value to set.
     * @return the IpRule object itself.
     */
    public IpRule withIpMask(String ipMask) {
        this.ipMask = ipMask;
        return this;
    }

    /**
     * Get the rights property: List of access rights.
     * 
     * @return the rights value.
     */
    public List<AccessRights> rights() {
        return this.rights;
    }

    /**
     * Set the rights property: List of access rights.
     * 
     * @param rights the rights value to set.
     * @return the IpRule object itself.
     */
    public IpRule withRights(List<AccessRights> rights) {
        this.rights = rights;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipMask() == null) {
            throw LOGGER
                .logExceptionAsError(new IllegalArgumentException("Missing required property ipMask in model IpRule"));
        }
        if (rights() == null) {
            throw LOGGER
                .logExceptionAsError(new IllegalArgumentException("Missing required property rights in model IpRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IpRule.class);
}
