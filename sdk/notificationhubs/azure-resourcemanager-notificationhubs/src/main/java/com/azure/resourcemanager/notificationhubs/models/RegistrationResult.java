// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Notification result for a single registration.
 */
@Immutable
public final class RegistrationResult implements JsonSerializable<RegistrationResult> {
    /*
     * PNS type.
     */
    private String applicationPlatform;

    /*
     * PNS handle.
     */
    private String pnsHandle;

    /*
     * Registration id.
     */
    private String registrationId;

    /*
     * Notification outcome.
     */
    private String outcome;

    /**
     * Creates an instance of RegistrationResult class.
     */
    public RegistrationResult() {
    }

    /**
     * Get the applicationPlatform property: PNS type.
     * 
     * @return the applicationPlatform value.
     */
    public String applicationPlatform() {
        return this.applicationPlatform;
    }

    /**
     * Get the pnsHandle property: PNS handle.
     * 
     * @return the pnsHandle value.
     */
    public String pnsHandle() {
        return this.pnsHandle;
    }

    /**
     * Get the registrationId property: Registration id.
     * 
     * @return the registrationId value.
     */
    public String registrationId() {
        return this.registrationId;
    }

    /**
     * Get the outcome property: Notification outcome.
     * 
     * @return the outcome value.
     */
    public String outcome() {
        return this.outcome;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistrationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistrationResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegistrationResult.
     */
    public static RegistrationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistrationResult deserializedRegistrationResult = new RegistrationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationPlatform".equals(fieldName)) {
                    deserializedRegistrationResult.applicationPlatform = reader.getString();
                } else if ("pnsHandle".equals(fieldName)) {
                    deserializedRegistrationResult.pnsHandle = reader.getString();
                } else if ("registrationId".equals(fieldName)) {
                    deserializedRegistrationResult.registrationId = reader.getString();
                } else if ("outcome".equals(fieldName)) {
                    deserializedRegistrationResult.outcome = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistrationResult;
        });
    }
}
