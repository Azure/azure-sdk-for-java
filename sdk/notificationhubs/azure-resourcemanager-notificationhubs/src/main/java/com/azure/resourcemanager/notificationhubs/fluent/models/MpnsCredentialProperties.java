// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description of a NotificationHub MpnsCredential.
 */
@Fluent
public final class MpnsCredentialProperties implements JsonSerializable<MpnsCredentialProperties> {
    /*
     * The MPNS certificate.
     */
    private String mpnsCertificate;

    /*
     * The certificate key for this credential.
     */
    private String certificateKey;

    /*
     * The MPNS certificate Thumbprint
     */
    private String thumbprint;

    /**
     * Creates an instance of MpnsCredentialProperties class.
     */
    public MpnsCredentialProperties() {
    }

    /**
     * Get the mpnsCertificate property: The MPNS certificate.
     * 
     * @return the mpnsCertificate value.
     */
    public String mpnsCertificate() {
        return this.mpnsCertificate;
    }

    /**
     * Set the mpnsCertificate property: The MPNS certificate.
     * 
     * @param mpnsCertificate the mpnsCertificate value to set.
     * @return the MpnsCredentialProperties object itself.
     */
    public MpnsCredentialProperties withMpnsCertificate(String mpnsCertificate) {
        this.mpnsCertificate = mpnsCertificate;
        return this;
    }

    /**
     * Get the certificateKey property: The certificate key for this credential.
     * 
     * @return the certificateKey value.
     */
    public String certificateKey() {
        return this.certificateKey;
    }

    /**
     * Set the certificateKey property: The certificate key for this credential.
     * 
     * @param certificateKey the certificateKey value to set.
     * @return the MpnsCredentialProperties object itself.
     */
    public MpnsCredentialProperties withCertificateKey(String certificateKey) {
        this.certificateKey = certificateKey;
        return this;
    }

    /**
     * Get the thumbprint property: The MPNS certificate Thumbprint.
     * 
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: The MPNS certificate Thumbprint.
     * 
     * @param thumbprint the thumbprint value to set.
     * @return the MpnsCredentialProperties object itself.
     */
    public MpnsCredentialProperties withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mpnsCertificate", this.mpnsCertificate);
        jsonWriter.writeStringField("certificateKey", this.certificateKey);
        jsonWriter.writeStringField("thumbprint", this.thumbprint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MpnsCredentialProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MpnsCredentialProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MpnsCredentialProperties.
     */
    public static MpnsCredentialProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MpnsCredentialProperties deserializedMpnsCredentialProperties = new MpnsCredentialProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mpnsCertificate".equals(fieldName)) {
                    deserializedMpnsCredentialProperties.mpnsCertificate = reader.getString();
                } else if ("certificateKey".equals(fieldName)) {
                    deserializedMpnsCredentialProperties.certificateKey = reader.getString();
                } else if ("thumbprint".equals(fieldName)) {
                    deserializedMpnsCredentialProperties.thumbprint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMpnsCredentialProperties;
        });
    }
}
