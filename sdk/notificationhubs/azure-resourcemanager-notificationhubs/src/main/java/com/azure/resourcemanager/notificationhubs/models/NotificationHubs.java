// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of NotificationHubs.
 */
public interface NotificationHubs {
    /**
     * Checks the availability of the given notificationHub in a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param parameters Request content.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a CheckAvailability resource along with {@link Response}.
     */
    Response<CheckAvailabilityResult> checkNotificationHubAvailabilityWithResponse(String resourceGroupName,
        String namespaceName, CheckAvailabilityParameters parameters, Context context);

    /**
     * Checks the availability of the given notificationHub in a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param parameters Request content.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a CheckAvailability resource.
     */
    CheckAvailabilityResult checkNotificationHubAvailability(String resourceGroupName, String namespaceName,
        CheckAvailabilityParameters parameters);

    /**
     * Gets the notification hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the notification hub along with {@link Response}.
     */
    Response<NotificationHubResource> getWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, Context context);

    /**
     * Gets the notification hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the notification hub.
     */
    NotificationHubResource get(String resourceGroupName, String namespaceName, String notificationHubName);

    /**
     * Deletes a notification hub associated with a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String namespaceName, String notificationHubName,
        Context context);

    /**
     * Deletes a notification hub associated with a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String namespaceName, String notificationHubName);

    /**
     * Lists the notification hubs associated with a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List NotificationHub operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NotificationHubResource> list(String resourceGroupName, String namespaceName);

    /**
     * Lists the notification hubs associated with a namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param skipToken Continuation token.
     * @param top Page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List NotificationHub operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NotificationHubResource> list(String resourceGroupName, String namespaceName, String skipToken,
        Integer top, Context context);

    /**
     * Test send a push notification.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a NotificationHub Resource along with {@link Response}.
     */
    Response<DebugSendResponse> debugSendWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, Context context);

    /**
     * Test send a push notification.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a NotificationHub Resource.
     */
    DebugSendResponse debugSend(String resourceGroupName, String namespaceName, String notificationHubName);

    /**
     * Deletes a notificationHub authorization rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteAuthorizationRuleWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName, Context context);

    /**
     * Deletes a notificationHub authorization rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteAuthorizationRule(String resourceGroupName, String namespaceName, String notificationHubName,
        String authorizationRuleName);

    /**
     * Gets an authorization rule for a NotificationHub by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authorization rule for a NotificationHub by name along with {@link Response}.
     */
    Response<SharedAccessAuthorizationRuleResource> getAuthorizationRuleWithResponse(String resourceGroupName,
        String namespaceName, String notificationHubName, String authorizationRuleName, Context context);

    /**
     * Gets an authorization rule for a NotificationHub by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authorization rule for a NotificationHub by name.
     */
    SharedAccessAuthorizationRuleResource getAuthorizationRule(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName);

    /**
     * Gets the authorization rules for a NotificationHub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the authorization rules for a NotificationHub as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SharedAccessAuthorizationRuleResource> listAuthorizationRules(String resourceGroupName,
        String namespaceName, String notificationHubName);

    /**
     * Gets the authorization rules for a NotificationHub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the authorization rules for a NotificationHub as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SharedAccessAuthorizationRuleResource> listAuthorizationRules(String resourceGroupName,
        String namespaceName, String notificationHubName, Context context);

    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Primary and Secondary ConnectionStrings to the NotificationHub along with {@link Response}.
     */
    Response<ResourceListKeys> listKeysWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName, Context context);

    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Primary and Secondary ConnectionStrings to the NotificationHub.
     */
    ResourceListKeys listKeys(String resourceGroupName, String namespaceName, String notificationHubName,
        String authorizationRuleName);

    /**
     * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param parameters Request content.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the POST request that returns Namespace or NotificationHub access keys (connection strings)
     * along with {@link Response}.
     */
    Response<ResourceListKeys> regenerateKeysWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, String authorizationRuleName, PolicyKeyResource parameters, Context context);

    /**
     * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param parameters Request content.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the POST request that returns Namespace or NotificationHub access keys (connection strings).
     */
    ResourceListKeys regenerateKeys(String resourceGroupName, String namespaceName, String notificationHubName,
        String authorizationRuleName, PolicyKeyResource parameters);

    /**
     * Lists the PNS Credentials associated with a notification hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a NotificationHub PNS Credentials along with {@link Response}.
     */
    Response<PnsCredentialsResource> getPnsCredentialsWithResponse(String resourceGroupName, String namespaceName,
        String notificationHubName, Context context);

    /**
     * Lists the PNS Credentials associated with a notification hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param notificationHubName Notification Hub name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a NotificationHub PNS Credentials.
     */
    PnsCredentialsResource getPnsCredentials(String resourceGroupName, String namespaceName,
        String notificationHubName);

    /**
     * Gets the notification hub.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the notification hub along with {@link Response}.
     */
    NotificationHubResource getById(String id);

    /**
     * Gets the notification hub.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the notification hub along with {@link Response}.
     */
    Response<NotificationHubResource> getByIdWithResponse(String id, Context context);

    /**
     * Gets an authorization rule for a NotificationHub by name.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authorization rule for a NotificationHub by name along with {@link Response}.
     */
    SharedAccessAuthorizationRuleResource getAuthorizationRuleById(String id);

    /**
     * Gets an authorization rule for a NotificationHub by name.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authorization rule for a NotificationHub by name along with {@link Response}.
     */
    Response<SharedAccessAuthorizationRuleResource> getAuthorizationRuleByIdWithResponse(String id, Context context);

    /**
     * Deletes a notification hub associated with a namespace.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a notification hub associated with a namespace.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Deletes a notificationHub authorization rule.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteAuthorizationRuleById(String id);

    /**
     * Deletes a notificationHub authorization rule.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteAuthorizationRuleByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new NotificationHubResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new NotificationHubResource definition.
     */
    NotificationHubResource.DefinitionStages.Blank define(String name);

    /**
     * Begins definition for a new SharedAccessAuthorizationRuleResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new SharedAccessAuthorizationRuleResource definition.
     */
    SharedAccessAuthorizationRuleResource.DefinitionStages.Blank defineAuthorizationRule(String name);
}
