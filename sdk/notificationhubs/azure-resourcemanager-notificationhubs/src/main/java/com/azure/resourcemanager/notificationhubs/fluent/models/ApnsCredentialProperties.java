// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description of a NotificationHub ApnsCredential. Note that there is no explicit switch between Certificate and Token
 * Authentication Modes. The mode is determined based on the properties passed in.
 */
@Fluent
public final class ApnsCredentialProperties implements JsonSerializable<ApnsCredentialProperties> {
    /*
     * The APNS certificate. Specify if using Certificate Authentication Mode.
     */
    private String apnsCertificate;

    /*
     * The APNS certificate password if it exists.
     */
    private String certificateKey;

    /*
     * The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify
     * 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify
     * 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify
     * 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify
     * 'https://api.push.apple.com:443/3/device'.
     */
    private String endpoint;

    /*
     * The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
     */
    private String thumbprint;

    /*
     * A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token
     * Authentication Mode.
     */
    private String keyId;

    /*
     * The name of the application or BundleId. Specify if using Token Authentication Mode.
     */
    private String appName;

    /*
     * The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account.
     * Specify if using Token Authentication Mode.
     */
    private String appId;

    /*
     * Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication
     * Mode.
     */
    private String token;

    /**
     * Creates an instance of ApnsCredentialProperties class.
     */
    public ApnsCredentialProperties() {
    }

    /**
     * Get the apnsCertificate property: The APNS certificate. Specify if using Certificate Authentication Mode.
     * 
     * @return the apnsCertificate value.
     */
    public String apnsCertificate() {
        return this.apnsCertificate;
    }

    /**
     * Set the apnsCertificate property: The APNS certificate. Specify if using Certificate Authentication Mode.
     * 
     * @param apnsCertificate the apnsCertificate value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withApnsCertificate(String apnsCertificate) {
        this.apnsCertificate = apnsCertificate;
        return this;
    }

    /**
     * Get the certificateKey property: The APNS certificate password if it exists.
     * 
     * @return the certificateKey value.
     */
    public String certificateKey() {
        return this.certificateKey;
    }

    /**
     * Set the certificateKey property: The APNS certificate password if it exists.
     * 
     * @param certificateKey the certificateKey value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withCertificateKey(String certificateKey) {
        this.certificateKey = certificateKey;
        return this;
    }

    /**
     * Get the endpoint property: The APNS endpoint of this credential. If using Certificate Authentication Mode and
     * Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify
     * 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify
     * 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify
     * 'https://api.push.apple.com:443/3/device'.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The APNS endpoint of this credential. If using Certificate Authentication Mode and
     * Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify
     * 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify
     * 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify
     * 'https://api.push.apple.com:443/3/device'.
     * 
     * @param endpoint the endpoint value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the thumbprint property: The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
     * 
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
     * 
     * @param thumbprint the thumbprint value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Get the keyId property: A 10-character key identifier (kid) key, obtained from your developer account. Specify if
     * using Token Authentication Mode.
     * 
     * @return the keyId value.
     */
    public String keyId() {
        return this.keyId;
    }

    /**
     * Set the keyId property: A 10-character key identifier (kid) key, obtained from your developer account. Specify if
     * using Token Authentication Mode.
     * 
     * @param keyId the keyId value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withKeyId(String keyId) {
        this.keyId = keyId;
        return this;
    }

    /**
     * Get the appName property: The name of the application or BundleId. Specify if using Token Authentication Mode.
     * 
     * @return the appName value.
     */
    public String appName() {
        return this.appName;
    }

    /**
     * Set the appName property: The name of the application or BundleId. Specify if using Token Authentication Mode.
     * 
     * @param appName the appName value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withAppName(String appName) {
        this.appName = appName;
        return this;
    }

    /**
     * Get the appId property: The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from
     * your developer account. Specify if using Token Authentication Mode.
     * 
     * @return the appId value.
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Set the appId property: The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from
     * your developer account. Specify if using Token Authentication Mode.
     * 
     * @param appId the appId value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Get the token property: Provider Authentication Token, obtained through your developer account. Specify if using
     * Token Authentication Mode.
     * 
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: Provider Authentication Token, obtained through your developer account. Specify if using
     * Token Authentication Mode.
     * 
     * @param token the token value to set.
     * @return the ApnsCredentialProperties object itself.
     */
    public ApnsCredentialProperties withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("apnsCertificate", this.apnsCertificate);
        jsonWriter.writeStringField("certificateKey", this.certificateKey);
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeStringField("thumbprint", this.thumbprint);
        jsonWriter.writeStringField("keyId", this.keyId);
        jsonWriter.writeStringField("appName", this.appName);
        jsonWriter.writeStringField("appId", this.appId);
        jsonWriter.writeStringField("token", this.token);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApnsCredentialProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApnsCredentialProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApnsCredentialProperties.
     */
    public static ApnsCredentialProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApnsCredentialProperties deserializedApnsCredentialProperties = new ApnsCredentialProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apnsCertificate".equals(fieldName)) {
                    deserializedApnsCredentialProperties.apnsCertificate = reader.getString();
                } else if ("certificateKey".equals(fieldName)) {
                    deserializedApnsCredentialProperties.certificateKey = reader.getString();
                } else if ("endpoint".equals(fieldName)) {
                    deserializedApnsCredentialProperties.endpoint = reader.getString();
                } else if ("thumbprint".equals(fieldName)) {
                    deserializedApnsCredentialProperties.thumbprint = reader.getString();
                } else if ("keyId".equals(fieldName)) {
                    deserializedApnsCredentialProperties.keyId = reader.getString();
                } else if ("appName".equals(fieldName)) {
                    deserializedApnsCredentialProperties.appName = reader.getString();
                } else if ("appId".equals(fieldName)) {
                    deserializedApnsCredentialProperties.appId = reader.getString();
                } else if ("token".equals(fieldName)) {
                    deserializedApnsCredentialProperties.token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApnsCredentialProperties;
        });
    }
}
