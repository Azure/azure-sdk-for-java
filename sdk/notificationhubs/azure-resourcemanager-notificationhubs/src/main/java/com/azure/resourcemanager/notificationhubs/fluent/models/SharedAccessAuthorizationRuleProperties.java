// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.models.AccessRights;
import java.io.IOException;
import java.util.List;

/**
 * SharedAccessAuthorizationRule properties.
 */
@Fluent
public final class SharedAccessAuthorizationRuleProperties
    implements JsonSerializable<SharedAccessAuthorizationRuleProperties> {
    /*
     * The rights associated with the rule.
     */
    private List<AccessRights> rights;

    /*
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     */
    private String primaryKey;

    /*
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     */
    private String secondaryKey;

    /*
     * A string that describes the authorization rule.
     */
    private String keyName;

    /*
     * A string that describes the claim type
     */
    private String claimType;

    /*
     * A string that describes the claim value
     */
    private String claimValue;

    /*
     * The last modified time for this rule
     */
    private String modifiedTime;

    /*
     * The created time for this rule
     */
    private String createdTime;

    /*
     * The revision number for the rule
     */
    private Integer revision;

    /**
     * Creates an instance of SharedAccessAuthorizationRuleProperties class.
     */
    public SharedAccessAuthorizationRuleProperties() {
    }

    /**
     * Get the rights property: The rights associated with the rule.
     * 
     * @return the rights value.
     */
    public List<AccessRights> rights() {
        return this.rights;
    }

    /**
     * Set the rights property: The rights associated with the rule.
     * 
     * @param rights the rights value to set.
     * @return the SharedAccessAuthorizationRuleProperties object itself.
     */
    public SharedAccessAuthorizationRuleProperties withRights(List<AccessRights> rights) {
        this.rights = rights;
        return this;
    }

    /**
     * Get the primaryKey property: A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     * @return the primaryKey value.
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * Get the secondaryKey property: A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     * @return the secondaryKey value.
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }

    /**
     * Get the keyName property: A string that describes the authorization rule.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Get the claimType property: A string that describes the claim type.
     * 
     * @return the claimType value.
     */
    public String claimType() {
        return this.claimType;
    }

    /**
     * Get the claimValue property: A string that describes the claim value.
     * 
     * @return the claimValue value.
     */
    public String claimValue() {
        return this.claimValue;
    }

    /**
     * Get the modifiedTime property: The last modified time for this rule.
     * 
     * @return the modifiedTime value.
     */
    public String modifiedTime() {
        return this.modifiedTime;
    }

    /**
     * Get the createdTime property: The created time for this rule.
     * 
     * @return the createdTime value.
     */
    public String createdTime() {
        return this.createdTime;
    }

    /**
     * Get the revision property: The revision number for the rule.
     * 
     * @return the revision value.
     */
    public Integer revision() {
        return this.revision;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("rights", this.rights,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedAccessAuthorizationRuleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedAccessAuthorizationRuleProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SharedAccessAuthorizationRuleProperties.
     */
    public static SharedAccessAuthorizationRuleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SharedAccessAuthorizationRuleProperties deserializedSharedAccessAuthorizationRuleProperties
                = new SharedAccessAuthorizationRuleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rights".equals(fieldName)) {
                    List<AccessRights> rights
                        = reader.readArray(reader1 -> AccessRights.fromString(reader1.getString()));
                    deserializedSharedAccessAuthorizationRuleProperties.rights = rights;
                } else if ("primaryKey".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.primaryKey = reader.getString();
                } else if ("secondaryKey".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.secondaryKey = reader.getString();
                } else if ("keyName".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.keyName = reader.getString();
                } else if ("claimType".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.claimType = reader.getString();
                } else if ("claimValue".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.claimValue = reader.getString();
                } else if ("modifiedTime".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.modifiedTime = reader.getString();
                } else if ("createdTime".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.createdTime = reader.getString();
                } else if ("revision".equals(fieldName)) {
                    deserializedSharedAccessAuthorizationRuleProperties.revision
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSharedAccessAuthorizationRuleProperties;
        });
    }
}
