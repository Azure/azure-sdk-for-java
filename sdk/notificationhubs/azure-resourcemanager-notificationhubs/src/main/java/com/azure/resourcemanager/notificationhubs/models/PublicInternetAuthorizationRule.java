// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A default (public Internet) network authorization rule, which contains rights if no other network rule matches.
 */
@Fluent
public final class PublicInternetAuthorizationRule implements JsonSerializable<PublicInternetAuthorizationRule> {
    /*
     * List of access rights.
     */
    private List<AccessRights> rights;

    /**
     * Creates an instance of PublicInternetAuthorizationRule class.
     */
    public PublicInternetAuthorizationRule() {
    }

    /**
     * Get the rights property: List of access rights.
     * 
     * @return the rights value.
     */
    public List<AccessRights> rights() {
        return this.rights;
    }

    /**
     * Set the rights property: List of access rights.
     * 
     * @param rights the rights value to set.
     * @return the PublicInternetAuthorizationRule object itself.
     */
    public PublicInternetAuthorizationRule withRights(List<AccessRights> rights) {
        this.rights = rights;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rights() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rights in model PublicInternetAuthorizationRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PublicInternetAuthorizationRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("rights", this.rights,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicInternetAuthorizationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicInternetAuthorizationRule if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PublicInternetAuthorizationRule.
     */
    public static PublicInternetAuthorizationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicInternetAuthorizationRule deserializedPublicInternetAuthorizationRule
                = new PublicInternetAuthorizationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rights".equals(fieldName)) {
                    List<AccessRights> rights
                        = reader.readArray(reader1 -> AccessRights.fromString(reader1.getString()));
                    deserializedPublicInternetAuthorizationRule.rights = rights;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicInternetAuthorizationRule;
        });
    }
}
