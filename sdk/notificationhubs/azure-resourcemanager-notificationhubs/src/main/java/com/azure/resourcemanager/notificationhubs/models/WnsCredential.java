// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.fluent.models.WnsCredentialProperties;
import java.io.IOException;

/**
 * Description of a NotificationHub WnsCredential.
 */
@Fluent
public final class WnsCredential implements JsonSerializable<WnsCredential> {
    /*
     * Description of a NotificationHub WnsCredential.
     */
    private WnsCredentialProperties innerProperties = new WnsCredentialProperties();

    /**
     * Creates an instance of WnsCredential class.
     */
    public WnsCredential() {
    }

    /**
     * Get the innerProperties property: Description of a NotificationHub WnsCredential.
     * 
     * @return the innerProperties value.
     */
    private WnsCredentialProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the packageSid property: Gets or sets the package ID for this credential.
     * 
     * @return the packageSid value.
     */
    public String packageSid() {
        return this.innerProperties() == null ? null : this.innerProperties().packageSid();
    }

    /**
     * Set the packageSid property: Gets or sets the package ID for this credential.
     * 
     * @param packageSid the packageSid value to set.
     * @return the WnsCredential object itself.
     */
    public WnsCredential withPackageSid(String packageSid) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WnsCredentialProperties();
        }
        this.innerProperties().withPackageSid(packageSid);
        return this;
    }

    /**
     * Get the secretKey property: Gets or sets the secret key.
     * 
     * @return the secretKey value.
     */
    public String secretKey() {
        return this.innerProperties() == null ? null : this.innerProperties().secretKey();
    }

    /**
     * Set the secretKey property: Gets or sets the secret key.
     * 
     * @param secretKey the secretKey value to set.
     * @return the WnsCredential object itself.
     */
    public WnsCredential withSecretKey(String secretKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WnsCredentialProperties();
        }
        this.innerProperties().withSecretKey(secretKey);
        return this;
    }

    /**
     * Get the windowsLiveEndpoint property: Gets or sets the Windows Live endpoint.
     * 
     * @return the windowsLiveEndpoint value.
     */
    public String windowsLiveEndpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().windowsLiveEndpoint();
    }

    /**
     * Set the windowsLiveEndpoint property: Gets or sets the Windows Live endpoint.
     * 
     * @param windowsLiveEndpoint the windowsLiveEndpoint value to set.
     * @return the WnsCredential object itself.
     */
    public WnsCredential withWindowsLiveEndpoint(String windowsLiveEndpoint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WnsCredentialProperties();
        }
        this.innerProperties().withWindowsLiveEndpoint(windowsLiveEndpoint);
        return this;
    }

    /**
     * Get the certificateKey property: Ges or sets the WNS Certificate Key.
     * 
     * @return the certificateKey value.
     */
    public String certificateKey() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateKey();
    }

    /**
     * Set the certificateKey property: Ges or sets the WNS Certificate Key.
     * 
     * @param certificateKey the certificateKey value to set.
     * @return the WnsCredential object itself.
     */
    public WnsCredential withCertificateKey(String certificateKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WnsCredentialProperties();
        }
        this.innerProperties().withCertificateKey(certificateKey);
        return this;
    }

    /**
     * Get the wnsCertificate property: Gets or sets the WNS Certificate.
     * 
     * @return the wnsCertificate value.
     */
    public String wnsCertificate() {
        return this.innerProperties() == null ? null : this.innerProperties().wnsCertificate();
    }

    /**
     * Set the wnsCertificate property: Gets or sets the WNS Certificate.
     * 
     * @param wnsCertificate the wnsCertificate value to set.
     * @return the WnsCredential object itself.
     */
    public WnsCredential withWnsCertificate(String wnsCertificate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WnsCredentialProperties();
        }
        this.innerProperties().withWnsCertificate(wnsCertificate);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model WnsCredential"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WnsCredential.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WnsCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WnsCredential if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WnsCredential.
     */
    public static WnsCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WnsCredential deserializedWnsCredential = new WnsCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedWnsCredential.innerProperties = WnsCredentialProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWnsCredential;
        });
    }
}
