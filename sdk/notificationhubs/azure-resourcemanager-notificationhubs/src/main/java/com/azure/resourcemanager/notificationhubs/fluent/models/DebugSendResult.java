// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.models.RegistrationResult;
import java.io.IOException;
import java.util.List;

/**
 * Result of DebugSend operations.
 */
@Immutable
public final class DebugSendResult implements JsonSerializable<DebugSendResult> {
    /*
     * Gets or sets successful send
     */
    private Long success;

    /*
     * Gets or sets send failure
     */
    private Long failure;

    /*
     * Gets or sets actual failure description
     */
    private List<RegistrationResult> results;

    /**
     * Creates an instance of DebugSendResult class.
     */
    public DebugSendResult() {
    }

    /**
     * Get the success property: Gets or sets successful send.
     * 
     * @return the success value.
     */
    public Long success() {
        return this.success;
    }

    /**
     * Get the failure property: Gets or sets send failure.
     * 
     * @return the failure value.
     */
    public Long failure() {
        return this.failure;
    }

    /**
     * Get the results property: Gets or sets actual failure description.
     * 
     * @return the results value.
     */
    public List<RegistrationResult> results() {
        return this.results;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (results() != null) {
            results().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DebugSendResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DebugSendResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DebugSendResult.
     */
    public static DebugSendResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DebugSendResult deserializedDebugSendResult = new DebugSendResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("success".equals(fieldName)) {
                    deserializedDebugSendResult.success = reader.getNullable(JsonReader::getLong);
                } else if ("failure".equals(fieldName)) {
                    deserializedDebugSendResult.failure = reader.getNullable(JsonReader::getLong);
                } else if ("results".equals(fieldName)) {
                    List<RegistrationResult> results
                        = reader.readArray(reader1 -> RegistrationResult.fromJson(reader1));
                    deserializedDebugSendResult.results = results;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDebugSendResult;
        });
    }
}
