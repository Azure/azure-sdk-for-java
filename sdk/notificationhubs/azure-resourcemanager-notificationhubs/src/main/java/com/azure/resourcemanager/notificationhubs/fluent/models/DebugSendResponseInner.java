// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import java.io.IOException;
import java.util.Map;

/**
 * Description of a NotificationHub Resource.
 */
@Fluent
public final class DebugSendResponseInner extends Resource {
    /*
     * Properties of the NotificationHub.
     */
    private DebugSendResult innerProperties;

    /*
     * The sku of the created namespace
     */
    private Sku sku;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DebugSendResponseInner class.
     */
    public DebugSendResponseInner() {
    }

    /**
     * Get the innerProperties property: Properties of the NotificationHub.
     * 
     * @return the innerProperties value.
     */
    private DebugSendResult innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the sku property: The sku of the created namespace.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The sku of the created namespace.
     * 
     * @param sku the sku value to set.
     * @return the DebugSendResponseInner object itself.
     */
    public DebugSendResponseInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DebugSendResponseInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DebugSendResponseInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the success property: successful send.
     * 
     * @return the success value.
     */
    public Float success() {
        return this.innerProperties() == null ? null : this.innerProperties().success();
    }

    /**
     * Set the success property: successful send.
     * 
     * @param success the success value to set.
     * @return the DebugSendResponseInner object itself.
     */
    public DebugSendResponseInner withSuccess(Float success) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DebugSendResult();
        }
        this.innerProperties().withSuccess(success);
        return this;
    }

    /**
     * Get the failure property: send failure.
     * 
     * @return the failure value.
     */
    public Float failure() {
        return this.innerProperties() == null ? null : this.innerProperties().failure();
    }

    /**
     * Set the failure property: send failure.
     * 
     * @param failure the failure value to set.
     * @return the DebugSendResponseInner object itself.
     */
    public DebugSendResponseInner withFailure(Float failure) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DebugSendResult();
        }
        this.innerProperties().withFailure(failure);
        return this;
    }

    /**
     * Get the results property: actual failure description.
     * 
     * @return the results value.
     */
    public Object results() {
        return this.innerProperties() == null ? null : this.innerProperties().results();
    }

    /**
     * Set the results property: actual failure description.
     * 
     * @param results the results value to set.
     * @return the DebugSendResponseInner object itself.
     */
    public DebugSendResponseInner withResults(Object results) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DebugSendResult();
        }
        this.innerProperties().withResults(results);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DebugSendResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DebugSendResponseInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DebugSendResponseInner.
     */
    public static DebugSendResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DebugSendResponseInner deserializedDebugSendResponseInner = new DebugSendResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDebugSendResponseInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDebugSendResponseInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDebugSendResponseInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDebugSendResponseInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDebugSendResponseInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedDebugSendResponseInner.innerProperties = DebugSendResult.fromJson(reader);
                } else if ("sku".equals(fieldName)) {
                    deserializedDebugSendResponseInner.sku = Sku.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDebugSendResponseInner;
        });
    }
}
