// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Description of a NotificationHub ApnsCredential. */
@JsonFlatten
@Fluent
public class ApnsCredential {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ApnsCredential.class);

    /*
     * The APNS certificate. Specify if using Certificate Authentication Mode.
     */
    @JsonProperty(value = "properties.apnsCertificate")
    private String apnsCertificate;

    /*
     * The APNS certificate password if it exists.
     */
    @JsonProperty(value = "properties.certificateKey")
    private String certificateKey;

    /*
     * The APNS endpoint of this credential. If using Certificate
     * Authentication Mode and Sandbox specify
     * 'gateway.sandbox.push.apple.com'. If using Certificate Authentication
     * Mode and Production specify 'gateway.push.apple.com'. If using Token
     * Authentication Mode and Sandbox specify
     * 'https://api.development.push.apple.com:443/3/device'. If using Token
     * Authentication Mode and Production specify
     * 'https://api.push.apple.com:443/3/device'.
     */
    @JsonProperty(value = "properties.endpoint")
    private String endpoint;

    /*
     * The APNS certificate thumbprint. Specify if using Certificate
     * Authentication Mode.
     */
    @JsonProperty(value = "properties.thumbprint")
    private String thumbprint;

    /*
     * A 10-character key identifier (kid) key, obtained from your developer
     * account. Specify if using Token Authentication Mode.
     */
    @JsonProperty(value = "properties.keyId")
    private String keyId;

    /*
     * The name of the application or BundleId. Specify if using Token
     * Authentication Mode.
     */
    @JsonProperty(value = "properties.appName")
    private String appName;

    /*
     * The issuer (iss) registered claim key. The value is a 10-character
     * TeamId, obtained from your developer account. Specify if using Token
     * Authentication Mode.
     */
    @JsonProperty(value = "properties.appId")
    private String appId;

    /*
     * Provider Authentication Token, obtained through your developer account.
     * Specify if using Token Authentication Mode.
     */
    @JsonProperty(value = "properties.token")
    private String token;

    /**
     * Get the apnsCertificate property: The APNS certificate. Specify if using Certificate Authentication Mode.
     *
     * @return the apnsCertificate value.
     */
    public String apnsCertificate() {
        return this.apnsCertificate;
    }

    /**
     * Set the apnsCertificate property: The APNS certificate. Specify if using Certificate Authentication Mode.
     *
     * @param apnsCertificate the apnsCertificate value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withApnsCertificate(String apnsCertificate) {
        this.apnsCertificate = apnsCertificate;
        return this;
    }

    /**
     * Get the certificateKey property: The APNS certificate password if it exists.
     *
     * @return the certificateKey value.
     */
    public String certificateKey() {
        return this.certificateKey;
    }

    /**
     * Set the certificateKey property: The APNS certificate password if it exists.
     *
     * @param certificateKey the certificateKey value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withCertificateKey(String certificateKey) {
        this.certificateKey = certificateKey;
        return this;
    }

    /**
     * Get the endpoint property: The APNS endpoint of this credential. If using Certificate Authentication Mode and
     * Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify
     * 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify
     * 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify
     * 'https://api.push.apple.com:443/3/device'.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The APNS endpoint of this credential. If using Certificate Authentication Mode and
     * Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify
     * 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify
     * 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify
     * 'https://api.push.apple.com:443/3/device'.
     *
     * @param endpoint the endpoint value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the thumbprint property: The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
     *
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
     *
     * @param thumbprint the thumbprint value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Get the keyId property: A 10-character key identifier (kid) key, obtained from your developer account. Specify if
     * using Token Authentication Mode.
     *
     * @return the keyId value.
     */
    public String keyId() {
        return this.keyId;
    }

    /**
     * Set the keyId property: A 10-character key identifier (kid) key, obtained from your developer account. Specify if
     * using Token Authentication Mode.
     *
     * @param keyId the keyId value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withKeyId(String keyId) {
        this.keyId = keyId;
        return this;
    }

    /**
     * Get the appName property: The name of the application or BundleId. Specify if using Token Authentication Mode.
     *
     * @return the appName value.
     */
    public String appName() {
        return this.appName;
    }

    /**
     * Set the appName property: The name of the application or BundleId. Specify if using Token Authentication Mode.
     *
     * @param appName the appName value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withAppName(String appName) {
        this.appName = appName;
        return this;
    }

    /**
     * Get the appId property: The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from
     * your developer account. Specify if using Token Authentication Mode.
     *
     * @return the appId value.
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Set the appId property: The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from
     * your developer account. Specify if using Token Authentication Mode.
     *
     * @param appId the appId value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Get the token property: Provider Authentication Token, obtained through your developer account. Specify if using
     * Token Authentication Mode.
     *
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: Provider Authentication Token, obtained through your developer account. Specify if using
     * Token Authentication Mode.
     *
     * @param token the token value to set.
     * @return the ApnsCredential object itself.
     */
    public ApnsCredential withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
