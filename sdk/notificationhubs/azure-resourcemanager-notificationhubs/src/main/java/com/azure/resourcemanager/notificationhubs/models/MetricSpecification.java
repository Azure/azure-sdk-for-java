// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A metric specification.
 */
@Immutable
public final class MetricSpecification implements JsonSerializable<MetricSpecification> {
    /*
     * Metric name / id.
     */
    private String name;

    /*
     * User-visible metric name.
     */
    private String displayName;

    /*
     * Description of the metric.
     */
    private String displayDescription;

    /*
     * Metric unit.
     */
    private String unit;

    /*
     * Type of the aggregation (Average, Minimum, Maximum, Total or Count).
     */
    private String aggregationType;

    /*
     * List of availabilities.
     */
    private List<Availability> availabilities;

    /*
     * List of supported time grain types.
     */
    private List<String> supportedTimeGrainTypes;

    /*
     * The matching regex pattern to be applied to the field pointed by the "metricsFilterPathSelector" flag in the ARM
     * manifest.
     */
    private String metricFilterPattern;

    /*
     * Optional property. If set to true, then zero will be returned for time duration where no metric is emitted /
     * published.
     */
    private Boolean fillGapWithZero;

    /**
     * Creates an instance of MetricSpecification class.
     */
    public MetricSpecification() {
    }

    /**
     * Get the name property: Metric name / id.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the displayName property: User-visible metric name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the displayDescription property: Description of the metric.
     * 
     * @return the displayDescription value.
     */
    public String displayDescription() {
        return this.displayDescription;
    }

    /**
     * Get the unit property: Metric unit.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Get the aggregationType property: Type of the aggregation (Average, Minimum, Maximum, Total or Count).
     * 
     * @return the aggregationType value.
     */
    public String aggregationType() {
        return this.aggregationType;
    }

    /**
     * Get the availabilities property: List of availabilities.
     * 
     * @return the availabilities value.
     */
    public List<Availability> availabilities() {
        return this.availabilities;
    }

    /**
     * Get the supportedTimeGrainTypes property: List of supported time grain types.
     * 
     * @return the supportedTimeGrainTypes value.
     */
    public List<String> supportedTimeGrainTypes() {
        return this.supportedTimeGrainTypes;
    }

    /**
     * Get the metricFilterPattern property: The matching regex pattern to be applied to the field pointed by the
     * "metricsFilterPathSelector" flag in the ARM manifest.
     * 
     * @return the metricFilterPattern value.
     */
    public String metricFilterPattern() {
        return this.metricFilterPattern;
    }

    /**
     * Get the fillGapWithZero property: Optional property. If set to true, then zero will be returned for time duration
     * where no metric is emitted / published.
     * 
     * @return the fillGapWithZero value.
     */
    public Boolean fillGapWithZero() {
        return this.fillGapWithZero;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (availabilities() != null) {
            availabilities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricSpecification if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricSpecification.
     */
    public static MetricSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricSpecification deserializedMetricSpecification = new MetricSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMetricSpecification.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedMetricSpecification.displayName = reader.getString();
                } else if ("displayDescription".equals(fieldName)) {
                    deserializedMetricSpecification.displayDescription = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedMetricSpecification.unit = reader.getString();
                } else if ("aggregationType".equals(fieldName)) {
                    deserializedMetricSpecification.aggregationType = reader.getString();
                } else if ("availabilities".equals(fieldName)) {
                    List<Availability> availabilities = reader.readArray(reader1 -> Availability.fromJson(reader1));
                    deserializedMetricSpecification.availabilities = availabilities;
                } else if ("supportedTimeGrainTypes".equals(fieldName)) {
                    List<String> supportedTimeGrainTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetricSpecification.supportedTimeGrainTypes = supportedTimeGrainTypes;
                } else if ("metricFilterPattern".equals(fieldName)) {
                    deserializedMetricSpecification.metricFilterPattern = reader.getString();
                } else if ("fillGapWithZero".equals(fieldName)) {
                    deserializedMetricSpecification.fillGapWithZero = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricSpecification;
        });
    }
}
