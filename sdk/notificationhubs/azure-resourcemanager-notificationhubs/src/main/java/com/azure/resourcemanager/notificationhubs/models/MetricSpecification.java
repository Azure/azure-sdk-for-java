// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A metric specification.
 */
@Immutable
public final class MetricSpecification {
    /*
     * Metric name / id.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * User-visible metric name.
     */
    @JsonProperty(value = "displayName", access = JsonProperty.Access.WRITE_ONLY)
    private String displayName;

    /*
     * Description of the metric.
     */
    @JsonProperty(value = "displayDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String displayDescription;

    /*
     * Metric unit.
     */
    @JsonProperty(value = "unit", access = JsonProperty.Access.WRITE_ONLY)
    private String unit;

    /*
     * Type of the aggregation (Average, Minimum, Maximum, Total or Count).
     */
    @JsonProperty(value = "aggregationType", access = JsonProperty.Access.WRITE_ONLY)
    private String aggregationType;

    /*
     * List of availabilities.
     */
    @JsonProperty(value = "availabilities", access = JsonProperty.Access.WRITE_ONLY)
    private List<Availability> availabilities;

    /*
     * List of supported time grain types.
     */
    @JsonProperty(value = "supportedTimeGrainTypes", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> supportedTimeGrainTypes;

    /*
     * The matching regex pattern to be applied to the field pointed by the "metricsFilterPathSelector" flag in the ARM
     * manifest.
     */
    @JsonProperty(value = "metricFilterPattern", access = JsonProperty.Access.WRITE_ONLY)
    private String metricFilterPattern;

    /*
     * Optional property. If set to true, then zero will be returned for time duration where no metric is emitted /
     * published.
     */
    @JsonProperty(value = "fillGapWithZero", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean fillGapWithZero;

    /**
     * Creates an instance of MetricSpecification class.
     */
    public MetricSpecification() {
    }

    /**
     * Get the name property: Metric name / id.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the displayName property: User-visible metric name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the displayDescription property: Description of the metric.
     * 
     * @return the displayDescription value.
     */
    public String displayDescription() {
        return this.displayDescription;
    }

    /**
     * Get the unit property: Metric unit.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Get the aggregationType property: Type of the aggregation (Average, Minimum, Maximum, Total or Count).
     * 
     * @return the aggregationType value.
     */
    public String aggregationType() {
        return this.aggregationType;
    }

    /**
     * Get the availabilities property: List of availabilities.
     * 
     * @return the availabilities value.
     */
    public List<Availability> availabilities() {
        return this.availabilities;
    }

    /**
     * Get the supportedTimeGrainTypes property: List of supported time grain types.
     * 
     * @return the supportedTimeGrainTypes value.
     */
    public List<String> supportedTimeGrainTypes() {
        return this.supportedTimeGrainTypes;
    }

    /**
     * Get the metricFilterPattern property: The matching regex pattern to be applied to the field pointed by the
     * "metricsFilterPathSelector" flag in the ARM manifest.
     * 
     * @return the metricFilterPattern value.
     */
    public String metricFilterPattern() {
        return this.metricFilterPattern;
    }

    /**
     * Get the fillGapWithZero property: Optional property. If set to true, then zero will be returned for time
     * duration where no metric is emitted / published.
     * 
     * @return the fillGapWithZero value.
     */
    public Boolean fillGapWithZero() {
        return this.fillGapWithZero;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (availabilities() != null) {
            availabilities().forEach(e -> e.validate());
        }
    }
}
