// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.fluent.models.AdmCredentialProperties;
import java.io.IOException;

/**
 * Description of a NotificationHub AdmCredential.
 */
@Fluent
public final class AdmCredential implements JsonSerializable<AdmCredential> {
    /*
     * Properties of NotificationHub AdmCredential.
     */
    private AdmCredentialProperties innerProperties;

    /**
     * Creates an instance of AdmCredential class.
     */
    public AdmCredential() {
    }

    /**
     * Get the innerProperties property: Properties of NotificationHub AdmCredential.
     * 
     * @return the innerProperties value.
     */
    private AdmCredentialProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the clientId property: The client identifier.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.innerProperties() == null ? null : this.innerProperties().clientId();
    }

    /**
     * Set the clientId property: The client identifier.
     * 
     * @param clientId the clientId value to set.
     * @return the AdmCredential object itself.
     */
    public AdmCredential withClientId(String clientId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AdmCredentialProperties();
        }
        this.innerProperties().withClientId(clientId);
        return this;
    }

    /**
     * Get the clientSecret property: The credential secret access key.
     * 
     * @return the clientSecret value.
     */
    public String clientSecret() {
        return this.innerProperties() == null ? null : this.innerProperties().clientSecret();
    }

    /**
     * Set the clientSecret property: The credential secret access key.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the AdmCredential object itself.
     */
    public AdmCredential withClientSecret(String clientSecret) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AdmCredentialProperties();
        }
        this.innerProperties().withClientSecret(clientSecret);
        return this;
    }

    /**
     * Get the authTokenUrl property: The URL of the authorization token.
     * 
     * @return the authTokenUrl value.
     */
    public String authTokenUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().authTokenUrl();
    }

    /**
     * Set the authTokenUrl property: The URL of the authorization token.
     * 
     * @param authTokenUrl the authTokenUrl value to set.
     * @return the AdmCredential object itself.
     */
    public AdmCredential withAuthTokenUrl(String authTokenUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AdmCredentialProperties();
        }
        this.innerProperties().withAuthTokenUrl(authTokenUrl);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdmCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdmCredential if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdmCredential.
     */
    public static AdmCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdmCredential deserializedAdmCredential = new AdmCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedAdmCredential.innerProperties = AdmCredentialProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdmCredential;
        });
    }
}
