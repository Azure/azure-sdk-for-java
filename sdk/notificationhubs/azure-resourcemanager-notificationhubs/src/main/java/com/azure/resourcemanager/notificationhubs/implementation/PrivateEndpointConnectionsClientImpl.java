// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.notificationhubs.fluent.PrivateEndpointConnectionsClient;
import com.azure.resourcemanager.notificationhubs.fluent.models.PrivateEndpointConnectionResourceInner;
import com.azure.resourcemanager.notificationhubs.fluent.models.PrivateLinkResourceInner;
import com.azure.resourcemanager.notificationhubs.models.PrivateEndpointConnectionResourceListResult;
import com.azure.resourcemanager.notificationhubs.models.PrivateLinkResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in PrivateEndpointConnectionsClient.
 */
public final class PrivateEndpointConnectionsClientImpl implements PrivateEndpointConnectionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PrivateEndpointConnectionsService service;

    /**
     * The service client containing this operation class.
     */
    private final NotificationHubsRPClientImpl client;

    /**
     * Initializes an instance of PrivateEndpointConnectionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PrivateEndpointConnectionsClientImpl(NotificationHubsRPClientImpl client) {
        this.service = RestProxy.create(PrivateEndpointConnectionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NotificationHubsRPClientPrivateEndpointConnections to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NotificationHubsRPCl")
    public interface PrivateEndpointConnectionsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("namespaceName") String namespaceName,
            @PathParam("privateEndpointConnectionName") String privateEndpointConnectionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PrivateEndpointConnectionResourceInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("namespaceName") String namespaceName,
            @PathParam("privateEndpointConnectionName") String privateEndpointConnectionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PrivateEndpointConnectionResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("namespaceName") String namespaceName,
            @PathParam("privateEndpointConnectionName") String privateEndpointConnectionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PrivateEndpointConnectionResourceListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("namespaceName") String namespaceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources/{subResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PrivateLinkResourceInner>> getGroupId(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("namespaceName") String namespaceName,
            @PathParam("subResourceName") String subResourceName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PrivateLinkResourceListResult>> listGroupIds(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("namespaceName") String namespaceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace
     * along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, PrivateEndpointConnectionResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, namespaceName, privateEndpointConnectionName, this.client.getApiVersion(),
                parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace
     * along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, PrivateEndpointConnectionResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            namespaceName, privateEndpointConnectionName, this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of represents a Private Endpoint Connection ARM resource - a
     * sub-resource of Notification Hubs namespace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PrivateEndpointConnectionResourceInner>, PrivateEndpointConnectionResourceInner>
        beginUpdateAsync(String resourceGroupName, String namespaceName, String privateEndpointConnectionName,
            PrivateEndpointConnectionResourceInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters);
        return this.client.<PrivateEndpointConnectionResourceInner, PrivateEndpointConnectionResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), PrivateEndpointConnectionResourceInner.class,
            PrivateEndpointConnectionResourceInner.class, this.client.getContext());
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of represents a Private Endpoint Connection ARM resource - a
     * sub-resource of Notification Hubs namespace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PrivateEndpointConnectionResourceInner>, PrivateEndpointConnectionResourceInner>
        beginUpdateAsync(String resourceGroupName, String namespaceName, String privateEndpointConnectionName,
            PrivateEndpointConnectionResourceInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, namespaceName,
            privateEndpointConnectionName, parameters, context);
        return this.client.<PrivateEndpointConnectionResourceInner, PrivateEndpointConnectionResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), PrivateEndpointConnectionResourceInner.class,
            PrivateEndpointConnectionResourceInner.class, context);
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents a Private Endpoint Connection ARM resource - a
     * sub-resource of Notification Hubs namespace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PrivateEndpointConnectionResourceInner>, PrivateEndpointConnectionResourceInner>
        beginUpdate(String resourceGroupName, String namespaceName, String privateEndpointConnectionName,
            PrivateEndpointConnectionResourceInner parameters) {
        return this.beginUpdateAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters)
            .getSyncPoller();
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents a Private Endpoint Connection ARM resource - a
     * sub-resource of Notification Hubs namespace.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PrivateEndpointConnectionResourceInner>, PrivateEndpointConnectionResourceInner>
        beginUpdate(String resourceGroupName, String namespaceName, String privateEndpointConnectionName,
            PrivateEndpointConnectionResourceInner parameters, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PrivateEndpointConnectionResourceInner> updateAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, PrivateEndpointConnectionResourceInner parameters) {
        return beginUpdateAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PrivateEndpointConnectionResourceInner> updateAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, PrivateEndpointConnectionResourceInner parameters, Context context) {
        return beginUpdateAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters, context)
            .last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateEndpointConnectionResourceInner update(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, PrivateEndpointConnectionResourceInner parameters) {
        return updateAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters).block();
    }

    /**
     * Approves or rejects Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param parameters Description of the Private Endpoint Connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateEndpointConnectionResourceInner update(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, PrivateEndpointConnectionResourceInner parameters, Context context) {
        return updateAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters, context)
            .block();
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    namespaceName, privateEndpointConnectionName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            namespaceName, privateEndpointConnectionName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, namespaceName, privateEndpointConnectionName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName) {
        return this.beginDeleteAsync(resourceGroupName, namespaceName, privateEndpointConnectionName).getSyncPoller();
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, context)
            .getSyncPoller();
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName) {
        return beginDeleteAsync(resourceGroupName, namespaceName, privateEndpointConnectionName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String namespaceName, String privateEndpointConnectionName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String namespaceName, String privateEndpointConnectionName) {
        deleteAsync(resourceGroupName, namespaceName, privateEndpointConnectionName).block();
    }

    /**
     * Deletes the Private Endpoint Connection.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String namespaceName, String privateEndpointConnectionName,
        Context context) {
        deleteAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, context).block();
    }

    /**
     * Returns a Private Endpoint Connection with a given name.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace
     * along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionResourceInner>> getWithResponseAsync(String resourceGroupName,
        String namespaceName, String privateEndpointConnectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    namespaceName, privateEndpointConnectionName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a Private Endpoint Connection with a given name.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace
     * along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionResourceInner>> getWithResponseAsync(String resourceGroupName,
        String namespaceName, String privateEndpointConnectionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, namespaceName,
            privateEndpointConnectionName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Returns a Private Endpoint Connection with a given name.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PrivateEndpointConnectionResourceInner> getAsync(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName) {
        return getWithResponseAsync(resourceGroupName, namespaceName, privateEndpointConnectionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns a Private Endpoint Connection with a given name.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace
     * along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PrivateEndpointConnectionResourceInner> getWithResponse(String resourceGroupName,
        String namespaceName, String privateEndpointConnectionName, Context context) {
        return getWithResponseAsync(resourceGroupName, namespaceName, privateEndpointConnectionName, context).block();
    }

    /**
     * Returns a Private Endpoint Connection with a given name.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param privateEndpointConnectionName Private Endpoint Connection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs namespace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateEndpointConnectionResourceInner get(String resourceGroupName, String namespaceName,
        String privateEndpointConnectionName) {
        return getWithResponse(resourceGroupName, namespaceName, privateEndpointConnectionName, Context.NONE)
            .getValue();
    }

    /**
     * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Endpoint Connections operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PrivateEndpointConnectionResourceInner>> listSinglePageAsync(String resourceGroupName,
        String namespaceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, namespaceName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<PrivateEndpointConnectionResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Endpoint Connections operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PrivateEndpointConnectionResourceInner>> listSinglePageAsync(String resourceGroupName,
        String namespaceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, namespaceName,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), null, null));
    }

    /**
     * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Endpoint Connections operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PrivateEndpointConnectionResourceInner> listAsync(String resourceGroupName,
        String namespaceName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, namespaceName));
    }

    /**
     * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Endpoint Connections operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PrivateEndpointConnectionResourceInner> listAsync(String resourceGroupName, String namespaceName,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, namespaceName, context));
    }

    /**
     * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Endpoint Connections operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PrivateEndpointConnectionResourceInner> list(String resourceGroupName, String namespaceName) {
        return new PagedIterable<>(listAsync(resourceGroupName, namespaceName));
    }

    /**
     * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
     * This is a public API that can be called directly by Notification Hubs users.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Endpoint Connections operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PrivateEndpointConnectionResourceInner> list(String resourceGroupName, String namespaceName,
        Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, namespaceName, context));
    }

    /**
     * Returns Group Id response.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param subResourceName Name of the Private Link sub-resource. The only supported sub-resource is "namespace".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Private Link Arm Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateLinkResourceInner>> getGroupIdWithResponseAsync(String resourceGroupName,
        String namespaceName, String subResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (subResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter subResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getGroupId(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, namespaceName, subResourceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns Group Id response.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param subResourceName Name of the Private Link sub-resource. The only supported sub-resource is "namespace".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Private Link Arm Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateLinkResourceInner>> getGroupIdWithResponseAsync(String resourceGroupName,
        String namespaceName, String subResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        if (subResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter subResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getGroupId(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            namespaceName, subResourceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Returns Group Id response.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param subResourceName Name of the Private Link sub-resource. The only supported sub-resource is "namespace".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Private Link Arm Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PrivateLinkResourceInner> getGroupIdAsync(String resourceGroupName, String namespaceName,
        String subResourceName) {
        return getGroupIdWithResponseAsync(resourceGroupName, namespaceName, subResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns Group Id response.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param subResourceName Name of the Private Link sub-resource. The only supported sub-resource is "namespace".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Private Link Arm Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PrivateLinkResourceInner> getGroupIdWithResponse(String resourceGroupName, String namespaceName,
        String subResourceName, Context context) {
        return getGroupIdWithResponseAsync(resourceGroupName, namespaceName, subResourceName, context).block();
    }

    /**
     * Returns Group Id response.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param subResourceName Name of the Private Link sub-resource. The only supported sub-resource is "namespace".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Private Link Arm Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateLinkResourceInner getGroupId(String resourceGroupName, String namespaceName, String subResourceName) {
        return getGroupIdWithResponse(resourceGroupName, namespaceName, subResourceName, Context.NONE).getValue();
    }

    /**
     * Returns all Group Ids supported by the Notification Hubs RP.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Link Resources operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PrivateLinkResourceInner>> listGroupIdsSinglePageAsync(String resourceGroupName,
        String namespaceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listGroupIds(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, namespaceName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<PrivateLinkResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns all Group Ids supported by the Notification Hubs RP.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Link Resources operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PrivateLinkResourceInner>> listGroupIdsSinglePageAsync(String resourceGroupName,
        String namespaceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (namespaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter namespaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listGroupIds(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, namespaceName,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), null, null));
    }

    /**
     * Returns all Group Ids supported by the Notification Hubs RP.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Link Resources operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PrivateLinkResourceInner> listGroupIdsAsync(String resourceGroupName, String namespaceName) {
        return new PagedFlux<>(() -> listGroupIdsSinglePageAsync(resourceGroupName, namespaceName));
    }

    /**
     * Returns all Group Ids supported by the Notification Hubs RP.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Link Resources operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PrivateLinkResourceInner> listGroupIdsAsync(String resourceGroupName, String namespaceName,
        Context context) {
        return new PagedFlux<>(() -> listGroupIdsSinglePageAsync(resourceGroupName, namespaceName, context));
    }

    /**
     * Returns all Group Ids supported by the Notification Hubs RP.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Link Resources operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PrivateLinkResourceInner> listGroupIds(String resourceGroupName, String namespaceName) {
        return new PagedIterable<>(listGroupIdsAsync(resourceGroupName, namespaceName));
    }

    /**
     * Returns all Group Ids supported by the Notification Hubs RP.
     * This is a public API required by the Networking RP contract. It can be used directly by Notification Hubs users.
     * 
     * Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
     * payload (for a given namespacE) every time it's called.
     * That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the
     * request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName Namespace name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the List Private Link Resources operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PrivateLinkResourceInner> listGroupIds(String resourceGroupName, String namespaceName,
        Context context) {
        return new PagedIterable<>(listGroupIdsAsync(resourceGroupName, namespaceName, context));
    }
}
