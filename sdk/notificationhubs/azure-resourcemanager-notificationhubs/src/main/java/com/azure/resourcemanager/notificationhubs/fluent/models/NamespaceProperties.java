// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.notificationhubs.models.NamespaceType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Namespace properties.
 */
@Fluent
public final class NamespaceProperties implements JsonSerializable<NamespaceProperties> {
    /*
     * The name of the namespace.
     */
    private String name;

    /*
     * Provisioning state of the Namespace.
     */
    private String provisioningState;

    /*
     * Specifies the targeted region in which the namespace should be created. It can be any of the following values:
     * Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US,
     * East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
     */
    private String region;

    /*
     * Identifier for Azure Insights metrics
     */
    private String metricId;

    /*
     * Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
     */
    private String status;

    /*
     * The time the namespace was created.
     */
    private OffsetDateTime createdAt;

    /*
     * The time the namespace was updated.
     */
    private OffsetDateTime updatedAt;

    /*
     * Endpoint you can use to perform NotificationHub operations.
     */
    private String serviceBusEndpoint;

    /*
     * The Id of the Azure subscription associated with the namespace.
     */
    private String subscriptionId;

    /*
     * ScaleUnit where the namespace gets created
     */
    private String scaleUnit;

    /*
     * Whether or not the namespace is currently enabled.
     */
    private Boolean enabled;

    /*
     * Whether or not the namespace is set as Critical.
     */
    private Boolean critical;

    /*
     * Data center for the namespace
     */
    private String dataCenter;

    /*
     * The namespace type.
     */
    private NamespaceType namespaceType;

    /**
     * Creates an instance of NamespaceProperties class.
     */
    public NamespaceProperties() {
    }

    /**
     * Get the name property: The name of the namespace.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the namespace.
     * 
     * @param name the name value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Namespace.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state of the Namespace.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the region property: Specifies the targeted region in which the namespace should be created. It can be any of
     * the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central
     * US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: Specifies the targeted region in which the namespace should be created. It can be any of
     * the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central
     * US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe.
     * 
     * @param region the region value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the metricId property: Identifier for Azure Insights metrics.
     * 
     * @return the metricId value.
     */
    public String metricId() {
        return this.metricId;
    }

    /**
     * Get the status property: Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 =
     * Suspended4 = Deleting.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 =
     * Suspended4 = Deleting.
     * 
     * @param status the status value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the createdAt property: The time the namespace was created.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: The time the namespace was created.
     * 
     * @param createdAt the createdAt value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the updatedAt property: The time the namespace was updated.
     * 
     * @return the updatedAt value.
     */
    public OffsetDateTime updatedAt() {
        return this.updatedAt;
    }

    /**
     * Set the updatedAt property: The time the namespace was updated.
     * 
     * @param updatedAt the updatedAt value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Get the serviceBusEndpoint property: Endpoint you can use to perform NotificationHub operations.
     * 
     * @return the serviceBusEndpoint value.
     */
    public String serviceBusEndpoint() {
        return this.serviceBusEndpoint;
    }

    /**
     * Set the serviceBusEndpoint property: Endpoint you can use to perform NotificationHub operations.
     * 
     * @param serviceBusEndpoint the serviceBusEndpoint value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withServiceBusEndpoint(String serviceBusEndpoint) {
        this.serviceBusEndpoint = serviceBusEndpoint;
        return this;
    }

    /**
     * Get the subscriptionId property: The Id of the Azure subscription associated with the namespace.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: The Id of the Azure subscription associated with the namespace.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the scaleUnit property: ScaleUnit where the namespace gets created.
     * 
     * @return the scaleUnit value.
     */
    public String scaleUnit() {
        return this.scaleUnit;
    }

    /**
     * Set the scaleUnit property: ScaleUnit where the namespace gets created.
     * 
     * @param scaleUnit the scaleUnit value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withScaleUnit(String scaleUnit) {
        this.scaleUnit = scaleUnit;
        return this;
    }

    /**
     * Get the enabled property: Whether or not the namespace is currently enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Whether or not the namespace is currently enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the critical property: Whether or not the namespace is set as Critical.
     * 
     * @return the critical value.
     */
    public Boolean critical() {
        return this.critical;
    }

    /**
     * Set the critical property: Whether or not the namespace is set as Critical.
     * 
     * @param critical the critical value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withCritical(Boolean critical) {
        this.critical = critical;
        return this;
    }

    /**
     * Get the dataCenter property: Data center for the namespace.
     * 
     * @return the dataCenter value.
     */
    public String dataCenter() {
        return this.dataCenter;
    }

    /**
     * Set the dataCenter property: Data center for the namespace.
     * 
     * @param dataCenter the dataCenter value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withDataCenter(String dataCenter) {
        this.dataCenter = dataCenter;
        return this;
    }

    /**
     * Get the namespaceType property: The namespace type.
     * 
     * @return the namespaceType value.
     */
    public NamespaceType namespaceType() {
        return this.namespaceType;
    }

    /**
     * Set the namespaceType property: The namespace type.
     * 
     * @param namespaceType the namespaceType value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withNamespaceType(NamespaceType namespaceType) {
        this.namespaceType = namespaceType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("provisioningState", this.provisioningState);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("updatedAt",
            this.updatedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedAt));
        jsonWriter.writeStringField("serviceBusEndpoint", this.serviceBusEndpoint);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("scaleUnit", this.scaleUnit);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeBooleanField("critical", this.critical);
        jsonWriter.writeStringField("dataCenter", this.dataCenter);
        jsonWriter.writeStringField("namespaceType", this.namespaceType == null ? null : this.namespaceType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceProperties.
     */
    public static NamespaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceProperties deserializedNamespaceProperties = new NamespaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceProperties.name = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNamespaceProperties.provisioningState = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedNamespaceProperties.region = reader.getString();
                } else if ("metricId".equals(fieldName)) {
                    deserializedNamespaceProperties.metricId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedNamespaceProperties.status = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedNamespaceProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedNamespaceProperties.updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("serviceBusEndpoint".equals(fieldName)) {
                    deserializedNamespaceProperties.serviceBusEndpoint = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedNamespaceProperties.subscriptionId = reader.getString();
                } else if ("scaleUnit".equals(fieldName)) {
                    deserializedNamespaceProperties.scaleUnit = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedNamespaceProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("critical".equals(fieldName)) {
                    deserializedNamespaceProperties.critical = reader.getNullable(JsonReader::getBoolean);
                } else if ("dataCenter".equals(fieldName)) {
                    deserializedNamespaceProperties.dataCenter = reader.getString();
                } else if ("namespaceType".equals(fieldName)) {
                    deserializedNamespaceProperties.namespaceType = NamespaceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceProperties;
        });
    }
}
