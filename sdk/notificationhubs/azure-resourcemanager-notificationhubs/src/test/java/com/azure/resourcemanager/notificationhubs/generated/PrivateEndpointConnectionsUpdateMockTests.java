// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.notificationhubs.NotificationHubsManager;
import com.azure.resourcemanager.notificationhubs.fluent.models.PrivateEndpointConnectionResourceInner;
import com.azure.resourcemanager.notificationhubs.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.notificationhubs.models.PrivateEndpointConnectionProvisioningState;
import com.azure.resourcemanager.notificationhubs.models.PrivateEndpointConnectionResource;
import com.azure.resourcemanager.notificationhubs.models.PrivateLinkConnectionStatus;
import com.azure.resourcemanager.notificationhubs.models.RemotePrivateEndpointConnection;
import com.azure.resourcemanager.notificationhubs.models.RemotePrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{\"id\":\"hqlbjbsybbq\"},\"groupIds\":[\"t\",\"dgmfpgvmpipasl\",\"haq\",\"x\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"twbdsrezpdrhn\",\"actionsRequired\":\"yowqkdwytisibir\"}},\"id\":\"pikpz\",\"name\":\"mejzanlfzxia\",\"type\":\"rmbzo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NotificationHubsManager manager = NotificationHubsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnectionResource response = manager.privateEndpointConnections()
            .update("dbodacizsjqlhkrr", "bdeibqipqk", "hvxndzwmkrefajpj",
                new PrivateEndpointConnectionResourceInner().withProperties(new PrivateEndpointConnectionProperties()
                    .withProvisioningState(PrivateEndpointConnectionProvisioningState.CREATING)
                    .withPrivateEndpoint(new RemotePrivateEndpointConnection())
                    .withPrivateLinkServiceConnectionState(
                        new RemotePrivateLinkServiceConnectionState().withStatus(PrivateLinkConnectionStatus.PENDING))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(PrivateEndpointConnectionProvisioningState.SUCCEEDED,
            response.properties().provisioningState());
        Assertions.assertEquals(PrivateLinkConnectionStatus.APPROVED,
            response.properties().privateLinkServiceConnectionState().status());
    }
}
