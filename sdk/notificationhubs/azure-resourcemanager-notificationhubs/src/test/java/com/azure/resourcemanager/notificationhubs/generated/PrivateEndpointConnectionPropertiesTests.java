// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.notificationhubs.models.PrivateEndpointConnectionProvisioningState;
import com.azure.resourcemanager.notificationhubs.models.PrivateLinkConnectionStatus;
import com.azure.resourcemanager.notificationhubs.models.RemotePrivateEndpointConnection;
import com.azure.resourcemanager.notificationhubs.models.RemotePrivateLinkServiceConnectionState;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Deleting\",\"privateEndpoint\":{\"id\":\"opbobj\"},\"groupIds\":[\"m\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"a\",\"actionsRequired\":\"rzayv\"}}")
            .toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals(PrivateEndpointConnectionProvisioningState.DELETING, model.provisioningState());
        Assertions.assertEquals(PrivateLinkConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionProperties model = new PrivateEndpointConnectionProperties()
            .withProvisioningState(PrivateEndpointConnectionProvisioningState.DELETING)
            .withPrivateEndpoint(new RemotePrivateEndpointConnection()).withPrivateLinkServiceConnectionState(
                new RemotePrivateLinkServiceConnectionState().withStatus(PrivateLinkConnectionStatus.DISCONNECTED));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals(PrivateEndpointConnectionProvisioningState.DELETING, model.provisioningState());
        Assertions.assertEquals(PrivateLinkConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
    }
}
