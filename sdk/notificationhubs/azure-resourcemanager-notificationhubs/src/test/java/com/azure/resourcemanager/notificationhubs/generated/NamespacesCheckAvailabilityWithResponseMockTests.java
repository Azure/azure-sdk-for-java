// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.notificationhubs.NotificationHubsManager;
import com.azure.resourcemanager.notificationhubs.models.CheckAvailabilityParameters;
import com.azure.resourcemanager.notificationhubs.models.CheckAvailabilityResult;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesCheckAvailabilityWithResponseMockTests {
    @Test
    public void testCheckAvailabilityWithResponse() throws Exception {
        String responseStr
            = "{\"isAvailiable\":true,\"sku\":{\"name\":\"Free\",\"tier\":\"pfhyhl\",\"size\":\"pmopjmc\",\"family\":\"tuo\",\"capacity\":607140678},\"location\":\"fu\",\"tags\":{\"zydagfuaxbezyiuo\":\"odsfcpkvxodpuozm\",\"dxwzywqsmbsurexi\":\"ktwh\",\"yocf\":\"o\"},\"id\":\"fksymddystki\",\"name\":\"uxh\",\"type\":\"yudxorrqnbp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NotificationHubsManager manager = NotificationHubsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CheckAvailabilityResult response = manager.namespaces()
            .checkAvailabilityWithResponse(new CheckAvailabilityParameters().withName("amdecte")
                .withLocation("zrkgqhcjrefovg")
                .withTags(mapOf("yvxyqjp", "sle"))
                .withSku(new Sku().withName(SkuName.FREE)
                    .withTier("tpngjcrcczsqpjh")
                    .withSize("daj")
                    .withFamily("ysou")
                    .withCapacity(104525492))
                .withIsAvailiable(false), com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("fu", response.location());
        Assertions.assertEquals("odsfcpkvxodpuozm", response.tags().get("zydagfuaxbezyiuo"));
        Assertions.assertEquals(true, response.isAvailiable());
        Assertions.assertEquals(SkuName.FREE, response.sku().name());
        Assertions.assertEquals("pfhyhl", response.sku().tier());
        Assertions.assertEquals("pmopjmc", response.sku().size());
        Assertions.assertEquals("tuo", response.sku().family());
        Assertions.assertEquals(607140678, response.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
