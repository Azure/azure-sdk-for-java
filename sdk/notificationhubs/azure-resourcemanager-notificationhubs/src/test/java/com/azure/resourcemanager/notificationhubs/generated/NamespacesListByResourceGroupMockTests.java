// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.notificationhubs.NotificationHubsManager;
import com.azure.resourcemanager.notificationhubs.models.NamespaceResource;
import com.azure.resourcemanager.notificationhubs.models.NamespaceType;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"name\":\"gshwankixz\",\"provisioningState\":\"njeputtmrywn\",\"region\":\"oqftiyqzrnkcq\",\"metricId\":\"xlwhzlsicoh\",\"status\":\"qnwvlrya\",\"createdAt\":\"2021-12-07T06:57Z\",\"updatedAt\":\"2021-11-18T07:56:25Z\",\"serviceBusEndpoint\":\"nmmqhgyxzkon\",\"subscriptionId\":\"uko\",\"scaleUnit\":\"yaxuconuqszfkb\",\"enabled\":false,\"critical\":true,\"dataCenter\":\"mjmwvvjektcx\",\"namespaceType\":\"NotificationHub\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"rsffrzpwvlqdqgbi\",\"size\":\"lihkaetcktvfc\",\"family\":\"fsnkymuctq\",\"capacity\":361988947},\"location\":\"bebrjcxerfuwuttt\",\"tags\":{\"hfnljkyq\":\"jrbirphxepcyv\",\"uujqgidokgjljyo\":\"j\",\"bgsncghkjeszzhb\":\"gvcl\",\"mpvecxgodebfqk\":\"jhtxfvgxbfsmxne\"},\"id\":\"rbmpukgri\",\"name\":\"flz\",\"type\":\"fbxzpuzycisp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NotificationHubsManager manager = NotificationHubsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NamespaceResource> response
            = manager.namespaces().listByResourceGroup("pbuxwgipwhon", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bebrjcxerfuwuttt", response.iterator().next().location());
        Assertions.assertEquals("jrbirphxepcyv", response.iterator().next().tags().get("hfnljkyq"));
        Assertions.assertEquals(SkuName.STANDARD, response.iterator().next().sku().name());
        Assertions.assertEquals("rsffrzpwvlqdqgbi", response.iterator().next().sku().tier());
        Assertions.assertEquals("lihkaetcktvfc", response.iterator().next().sku().size());
        Assertions.assertEquals("fsnkymuctq", response.iterator().next().sku().family());
        Assertions.assertEquals(361988947, response.iterator().next().sku().capacity());
        Assertions.assertEquals("gshwankixz", response.iterator().next().namePropertiesName());
        Assertions.assertEquals("njeputtmrywn", response.iterator().next().provisioningState());
        Assertions.assertEquals("oqftiyqzrnkcq", response.iterator().next().region());
        Assertions.assertEquals("qnwvlrya", response.iterator().next().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T06:57Z"), response.iterator().next().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-18T07:56:25Z"), response.iterator().next().updatedAt());
        Assertions.assertEquals("nmmqhgyxzkon", response.iterator().next().serviceBusEndpoint());
        Assertions.assertEquals("uko", response.iterator().next().subscriptionId());
        Assertions.assertEquals("yaxuconuqszfkb", response.iterator().next().scaleUnit());
        Assertions.assertEquals(false, response.iterator().next().enabled());
        Assertions.assertEquals(true, response.iterator().next().critical());
        Assertions.assertEquals("mjmwvvjektcx", response.iterator().next().dataCenter());
        Assertions.assertEquals(NamespaceType.NOTIFICATION_HUB, response.iterator().next().namespaceType());
    }
}
