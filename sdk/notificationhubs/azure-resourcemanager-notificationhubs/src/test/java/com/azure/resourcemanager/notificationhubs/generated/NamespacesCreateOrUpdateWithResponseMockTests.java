// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.notificationhubs.NotificationHubsManager;
import com.azure.resourcemanager.notificationhubs.models.NamespaceResource;
import com.azure.resourcemanager.notificationhubs.models.NamespaceType;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"name\":\"kfrlhrxsbky\",\"provisioningState\":\"ycanuzbpzkafku\",\"region\":\"crnwbmeh\",\"metricId\":\"eyvjusrtslhspkde\",\"status\":\"aofmxagkvtme\",\"createdAt\":\"2020-12-28T20:08:12Z\",\"updatedAt\":\"2021-06-04T11:35:51Z\",\"serviceBusEndpoint\":\"hvljuahaquh\",\"subscriptionId\":\"hmdua\",\"scaleUnit\":\"exq\",\"enabled\":false,\"critical\":true,\"dataCenter\":\"ws\",\"namespaceType\":\"Messaging\"},\"sku\":{\"name\":\"Free\",\"tier\":\"pv\",\"size\":\"mzlfmisgwb\",\"family\":\"beldawkzbaliourq\",\"capacity\":997736872},\"location\":\"auhashsfwx\",\"tags\":{\"xcug\":\"w\",\"ovbvmeueciv\":\"cjooxdjebwpucwwf\"},\"id\":\"hzceuojgjrwjue\",\"name\":\"otwmcdyt\",\"type\":\"x\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NotificationHubsManager manager = NotificationHubsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NamespaceResource response = manager.namespaces()
            .define("yqupedeojnabckh")
            .withLocation("uyonobglaoc")
            .withExistingResourceGroup("m")
            .withTags(mapOf("yudxytlmoy", "ccm"))
            .withSku(new Sku().withName(SkuName.FREE)
                .withTier("uscrpabgyepsb")
                .withSize("azqugxywpmueefj")
                .withFamily("fqkquj")
                .withCapacity(1148622887))
            .withNamePropertiesName("xpsiebtfhvpes")
            .withProvisioningState("skrdqmhjj")
            .withRegion("tldwkyzxuutk")
            .withStatus("svlxotogtwrup")
            .withCreatedAt(OffsetDateTime.parse("2021-08-21T23:24:20Z"))
            .withUpdatedAt(OffsetDateTime.parse("2021-05-04T00:58:15Z"))
            .withServiceBusEndpoint("i")
            .withSubscriptionId("kvceoveilovnotyf")
            .withScaleUnit("cnjbkcnxdhbt")
            .withEnabled(false)
            .withCritical(false)
            .withDataCenter("pnvjtoqnermclf")
            .withNamespaceType(NamespaceType.MESSAGING)
            .create();

        Assertions.assertEquals("auhashsfwx", response.location());
        Assertions.assertEquals("w", response.tags().get("xcug"));
        Assertions.assertEquals(SkuName.FREE, response.sku().name());
        Assertions.assertEquals("pv", response.sku().tier());
        Assertions.assertEquals("mzlfmisgwb", response.sku().size());
        Assertions.assertEquals("beldawkzbaliourq", response.sku().family());
        Assertions.assertEquals(997736872, response.sku().capacity());
        Assertions.assertEquals("kfrlhrxsbky", response.namePropertiesName());
        Assertions.assertEquals("ycanuzbpzkafku", response.provisioningState());
        Assertions.assertEquals("crnwbmeh", response.region());
        Assertions.assertEquals("aofmxagkvtme", response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-28T20:08:12Z"), response.createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T11:35:51Z"), response.updatedAt());
        Assertions.assertEquals("hvljuahaquh", response.serviceBusEndpoint());
        Assertions.assertEquals("hmdua", response.subscriptionId());
        Assertions.assertEquals("exq", response.scaleUnit());
        Assertions.assertEquals(false, response.enabled());
        Assertions.assertEquals(true, response.critical());
        Assertions.assertEquals("ws", response.dataCenter());
        Assertions.assertEquals(NamespaceType.MESSAGING, response.namespaceType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
