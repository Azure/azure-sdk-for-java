// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.fluent.models.NamespaceResourceInner;
import com.azure.resourcemanager.notificationhubs.models.NamespaceType;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"name\":\"lljfmppeeb\",\"provisioningState\":\"gxsabkyq\",\"region\":\"ujitcjcz\",\"metricId\":\"evndh\",\"status\":\"wpdappdsbdkv\",\"createdAt\":\"2021-04-24T00:01:09Z\",\"updatedAt\":\"2021-01-30T07:52:01Z\",\"serviceBusEndpoint\":\"usnhutje\",\"subscriptionId\":\"mrldhu\",\"scaleUnit\":\"zzd\",\"enabled\":true,\"critical\":false,\"dataCenter\":\"cdgea\",\"namespaceType\":\"NotificationHub\"},\"sku\":{\"name\":\"Free\",\"tier\":\"ti\",\"size\":\"dvkaozw\",\"family\":\"ftyhxhurokf\",\"capacity\":1369496360},\"location\":\"olniwpwcukjf\",\"tags\":{\"plwckbas\":\"awxklr\",\"cph\":\"ypnddhsgcb\"},\"id\":\"jkot\",\"name\":\"nqgoulzndli\",\"type\":\"wyqkgfgibm\"}")
            .toObject(NamespaceResourceInner.class);
        Assertions.assertEquals("olniwpwcukjf", model.location());
        Assertions.assertEquals("awxklr", model.tags().get("plwckbas"));
        Assertions.assertEquals(SkuName.FREE, model.sku().name());
        Assertions.assertEquals("ti", model.sku().tier());
        Assertions.assertEquals("dvkaozw", model.sku().size());
        Assertions.assertEquals("ftyhxhurokf", model.sku().family());
        Assertions.assertEquals(1369496360, model.sku().capacity());
        Assertions.assertEquals("lljfmppeeb", model.namePropertiesName());
        Assertions.assertEquals("gxsabkyq", model.provisioningState());
        Assertions.assertEquals("ujitcjcz", model.region());
        Assertions.assertEquals("wpdappdsbdkv", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T00:01:09Z"), model.createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T07:52:01Z"), model.updatedAt());
        Assertions.assertEquals("usnhutje", model.serviceBusEndpoint());
        Assertions.assertEquals("mrldhu", model.subscriptionId());
        Assertions.assertEquals("zzd", model.scaleUnit());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(false, model.critical());
        Assertions.assertEquals("cdgea", model.dataCenter());
        Assertions.assertEquals(NamespaceType.NOTIFICATION_HUB, model.namespaceType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceResourceInner model = new NamespaceResourceInner().withLocation("olniwpwcukjf")
            .withTags(mapOf("plwckbas", "awxklr", "cph", "ypnddhsgcb"))
            .withSku(new Sku().withName(SkuName.FREE)
                .withTier("ti")
                .withSize("dvkaozw")
                .withFamily("ftyhxhurokf")
                .withCapacity(1369496360))
            .withNamePropertiesName("lljfmppeeb")
            .withProvisioningState("gxsabkyq")
            .withRegion("ujitcjcz")
            .withStatus("wpdappdsbdkv")
            .withCreatedAt(OffsetDateTime.parse("2021-04-24T00:01:09Z"))
            .withUpdatedAt(OffsetDateTime.parse("2021-01-30T07:52:01Z"))
            .withServiceBusEndpoint("usnhutje")
            .withSubscriptionId("mrldhu")
            .withScaleUnit("zzd")
            .withEnabled(true)
            .withCritical(false)
            .withDataCenter("cdgea")
            .withNamespaceType(NamespaceType.NOTIFICATION_HUB);
        model = BinaryData.fromObject(model).toObject(NamespaceResourceInner.class);
        Assertions.assertEquals("olniwpwcukjf", model.location());
        Assertions.assertEquals("awxklr", model.tags().get("plwckbas"));
        Assertions.assertEquals(SkuName.FREE, model.sku().name());
        Assertions.assertEquals("ti", model.sku().tier());
        Assertions.assertEquals("dvkaozw", model.sku().size());
        Assertions.assertEquals("ftyhxhurokf", model.sku().family());
        Assertions.assertEquals(1369496360, model.sku().capacity());
        Assertions.assertEquals("lljfmppeeb", model.namePropertiesName());
        Assertions.assertEquals("gxsabkyq", model.provisioningState());
        Assertions.assertEquals("ujitcjcz", model.region());
        Assertions.assertEquals("wpdappdsbdkv", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T00:01:09Z"), model.createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T07:52:01Z"), model.updatedAt());
        Assertions.assertEquals("usnhutje", model.serviceBusEndpoint());
        Assertions.assertEquals("mrldhu", model.subscriptionId());
        Assertions.assertEquals("zzd", model.scaleUnit());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(false, model.critical());
        Assertions.assertEquals("cdgea", model.dataCenter());
        Assertions.assertEquals(NamespaceType.NOTIFICATION_HUB, model.namespaceType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
