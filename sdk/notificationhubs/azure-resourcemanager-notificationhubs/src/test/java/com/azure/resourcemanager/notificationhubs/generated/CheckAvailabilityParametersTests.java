// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.models.CheckAvailabilityParameters;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CheckAvailabilityParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CheckAvailabilityParameters model = BinaryData.fromString(
            "{\"id\":\"mhquvgjxp\",\"name\":\"bczmeh\",\"type\":\"zopbsphrupidgs\",\"location\":\"bejhphoycmsxa\",\"tags\":{\"zehtbmu\":\"dxbmtqioq\",\"wnoi\":\"p\",\"bqsoqijg\":\"hwlrx\"},\"isAvailiable\":true,\"sku\":{\"name\":\"Standard\",\"tier\":\"zlobcufpd\",\"size\":\"rbt\",\"family\":\"qjnqglhqgnufoooj\",\"capacity\":1080301009}}")
            .toObject(CheckAvailabilityParameters.class);
        Assertions.assertEquals("bczmeh", model.name());
        Assertions.assertEquals("bejhphoycmsxa", model.location());
        Assertions.assertEquals("dxbmtqioq", model.tags().get("zehtbmu"));
        Assertions.assertEquals(true, model.isAvailiable());
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("zlobcufpd", model.sku().tier());
        Assertions.assertEquals("rbt", model.sku().size());
        Assertions.assertEquals("qjnqglhqgnufoooj", model.sku().family());
        Assertions.assertEquals(1080301009, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CheckAvailabilityParameters model = new CheckAvailabilityParameters().withName("bczmeh")
            .withLocation("bejhphoycmsxa").withTags(mapOf("zehtbmu", "dxbmtqioq", "wnoi", "p", "bqsoqijg", "hwlrx"))
            .withIsAvailiable(true).withSku(new Sku().withName(SkuName.STANDARD).withTier("zlobcufpd").withSize("rbt")
                .withFamily("qjnqglhqgnufoooj").withCapacity(1080301009));
        model = BinaryData.fromObject(model).toObject(CheckAvailabilityParameters.class);
        Assertions.assertEquals("bczmeh", model.name());
        Assertions.assertEquals("bejhphoycmsxa", model.location());
        Assertions.assertEquals("dxbmtqioq", model.tags().get("zehtbmu"));
        Assertions.assertEquals(true, model.isAvailiable());
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("zlobcufpd", model.sku().tier());
        Assertions.assertEquals("rbt", model.sku().size());
        Assertions.assertEquals("qjnqglhqgnufoooj", model.sku().family());
        Assertions.assertEquals(1080301009, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
