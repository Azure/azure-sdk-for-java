// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.models.CheckAvailabilityParameters;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CheckAvailabilityParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CheckAvailabilityParameters model = BinaryData.fromString(
            "{\"id\":\"pewnw\",\"name\":\"eitjz\",\"type\":\"lusarh\",\"location\":\"fcqhsmyurkd\",\"tags\":{\"arcryuanzwuxzdxt\":\"xhekuksjtxukcdm\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"hmwhfpmrqo\",\"size\":\"tu\",\"family\":\"nryrtihf\",\"capacity\":1773018691},\"isAvailiable\":false}")
            .toObject(CheckAvailabilityParameters.class);
        Assertions.assertEquals("eitjz", model.name());
        Assertions.assertEquals("fcqhsmyurkd", model.location());
        Assertions.assertEquals("xhekuksjtxukcdm", model.tags().get("arcryuanzwuxzdxt"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("hmwhfpmrqo", model.sku().tier());
        Assertions.assertEquals("tu", model.sku().size());
        Assertions.assertEquals("nryrtihf", model.sku().family());
        Assertions.assertEquals(1773018691, model.sku().capacity());
        Assertions.assertEquals(false, model.isAvailiable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CheckAvailabilityParameters model = new CheckAvailabilityParameters().withName("eitjz")
            .withLocation("fcqhsmyurkd")
            .withTags(mapOf("arcryuanzwuxzdxt", "xhekuksjtxukcdm"))
            .withSku(new Sku().withName(SkuName.STANDARD)
                .withTier("hmwhfpmrqo")
                .withSize("tu")
                .withFamily("nryrtihf")
                .withCapacity(1773018691))
            .withIsAvailiable(false);
        model = BinaryData.fromObject(model).toObject(CheckAvailabilityParameters.class);
        Assertions.assertEquals("eitjz", model.name());
        Assertions.assertEquals("fcqhsmyurkd", model.location());
        Assertions.assertEquals("xhekuksjtxukcdm", model.tags().get("arcryuanzwuxzdxt"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("hmwhfpmrqo", model.sku().tier());
        Assertions.assertEquals("tu", model.sku().size());
        Assertions.assertEquals("nryrtihf", model.sku().family());
        Assertions.assertEquals(1773018691, model.sku().capacity());
        Assertions.assertEquals(false, model.isAvailiable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
