// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.fluent.models.DebugSendResponseInner;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DebugSendResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DebugSendResponseInner model = BinaryData.fromString(
            "{\"properties\":{\"success\":62.422825,\"failure\":22.030466,\"results\":\"datasxlzevgbmqj\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"y\",\"size\":\"ivkwlzuvccfwnfnb\",\"family\":\"fionl\",\"capacity\":10134075},\"location\":\"etqgtzxdpnq\",\"tags\":{\"snjampmng\":\"wxrjfeallnwsub\",\"chcbonqvpkvlrxnj\":\"zscxaqwo\",\"pheoflokeyy\":\"ase\"},\"id\":\"enjbdlwtgrhp\",\"name\":\"jp\",\"type\":\"umasxazjpq\"}")
            .toObject(DebugSendResponseInner.class);
        Assertions.assertEquals("etqgtzxdpnq", model.location());
        Assertions.assertEquals("wxrjfeallnwsub", model.tags().get("snjampmng"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("y", model.sku().tier());
        Assertions.assertEquals("ivkwlzuvccfwnfnb", model.sku().size());
        Assertions.assertEquals("fionl", model.sku().family());
        Assertions.assertEquals(10134075, model.sku().capacity());
        Assertions.assertEquals(62.422825F, model.success());
        Assertions.assertEquals(22.030466F, model.failure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DebugSendResponseInner model = new DebugSendResponseInner().withLocation("etqgtzxdpnq")
            .withTags(mapOf("snjampmng", "wxrjfeallnwsub", "chcbonqvpkvlrxnj", "zscxaqwo", "pheoflokeyy",
                "fakeTokenPlaceholder"))
            .withSku(new Sku().withName(SkuName.STANDARD)
                .withTier("y")
                .withSize("ivkwlzuvccfwnfnb")
                .withFamily("fionl")
                .withCapacity(10134075))
            .withSuccess(62.422825F)
            .withFailure(22.030466F)
            .withResults("datasxlzevgbmqj");
        model = BinaryData.fromObject(model).toObject(DebugSendResponseInner.class);
        Assertions.assertEquals("etqgtzxdpnq", model.location());
        Assertions.assertEquals("wxrjfeallnwsub", model.tags().get("snjampmng"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("y", model.sku().tier());
        Assertions.assertEquals("ivkwlzuvccfwnfnb", model.sku().size());
        Assertions.assertEquals("fionl", model.sku().family());
        Assertions.assertEquals(10134075, model.sku().capacity());
        Assertions.assertEquals(62.422825F, model.success());
        Assertions.assertEquals(22.030466F, model.failure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
