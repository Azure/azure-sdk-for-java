// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.fluent.models.DebugSendResponseInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DebugSendResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DebugSendResponseInner model = BinaryData.fromString(
            "{\"properties\":{\"success\":736999913427384233,\"failure\":8894415977580296297,\"results\":[{\"applicationPlatform\":\"ntnbybkzg\",\"pnsHandle\":\"rwclxxwrljdo\",\"registrationId\":\"kcqvkocrc\",\"outcome\":\"kwt\"},{\"applicationPlatform\":\"xbnjbiksq\",\"pnsHandle\":\"lssai\",\"registrationId\":\"p\",\"outcome\":\"nzl\"},{\"applicationPlatform\":\"fmppe\",\"pnsHandle\":\"vmgxsab\",\"registrationId\":\"qduujitcjczdz\",\"outcome\":\"ndhkrw\"},{\"applicationPlatform\":\"appd\",\"pnsHandle\":\"dkvwrwjfe\",\"registrationId\":\"nhutjeltmrldhugj\",\"outcome\":\"datqxhocdgeabl\"}]},\"location\":\"huticndvkao\",\"tags\":{\"tyhxhurokft\":\"i\",\"iawxklry\":\"xolniwpwcukjfk\",\"cbacphejkotynqg\":\"lwckbasyypnddhs\"},\"id\":\"l\",\"name\":\"ndlik\",\"type\":\"yqkgfg\"}")
            .toObject(DebugSendResponseInner.class);
        Assertions.assertEquals("huticndvkao", model.location());
        Assertions.assertEquals("i", model.tags().get("tyhxhurokft"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DebugSendResponseInner model = new DebugSendResponseInner().withLocation("huticndvkao")
            .withTags(mapOf("tyhxhurokft", "i", "iawxklry", "xolniwpwcukjfk", "cbacphejkotynqg", "lwckbasyypnddhs"));
        model = BinaryData.fromObject(model).toObject(DebugSendResponseInner.class);
        Assertions.assertEquals("huticndvkao", model.location());
        Assertions.assertEquals("i", model.tags().get("tyhxhurokft"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
