// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.fluent.models.NamespaceResourceInner;
import com.azure.resourcemanager.notificationhubs.models.NamespaceListResult;
import com.azure.resourcemanager.notificationhubs.models.NamespaceType;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"name\":\"fqawrlyxw\",\"provisioningState\":\"cpr\",\"region\":\"wbxgjvt\",\"metricId\":\"p\",\"status\":\"szdnr\",\"createdAt\":\"2021-06-20T01:52:55Z\",\"updatedAt\":\"2021-10-21T17:39:02Z\",\"serviceBusEndpoint\":\"muouqfp\",\"subscriptionId\":\"zw\",\"scaleUnit\":\"g\",\"enabled\":false,\"critical\":false,\"dataCenter\":\"izgazxu\",\"namespaceType\":\"Messaging\"},\"sku\":{\"name\":\"Free\",\"tier\":\"y\",\"size\":\"hr\",\"family\":\"dfvzwdzuhty\",\"capacity\":1847084741},\"location\":\"sdkf\",\"tags\":{\"km\":\"xmnteiwaop\",\"mzidnsezcxtb\":\"jcmmxdcufufsrp\",\"dwzjeiach\":\"sgfyccsnew\"},\"id\":\"oosflnr\",\"name\":\"sfqpteehz\",\"type\":\"vypyqrimzinpv\"}],\"nextLink\":\"jdkirsoodqx\"}")
            .toObject(NamespaceListResult.class);
        Assertions.assertEquals("sdkf", model.value().get(0).location());
        Assertions.assertEquals("xmnteiwaop", model.value().get(0).tags().get("km"));
        Assertions.assertEquals(SkuName.FREE, model.value().get(0).sku().name());
        Assertions.assertEquals("y", model.value().get(0).sku().tier());
        Assertions.assertEquals("hr", model.value().get(0).sku().size());
        Assertions.assertEquals("dfvzwdzuhty", model.value().get(0).sku().family());
        Assertions.assertEquals(1847084741, model.value().get(0).sku().capacity());
        Assertions.assertEquals("fqawrlyxw", model.value().get(0).namePropertiesName());
        Assertions.assertEquals("cpr", model.value().get(0).provisioningState());
        Assertions.assertEquals("wbxgjvt", model.value().get(0).region());
        Assertions.assertEquals("szdnr", model.value().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-20T01:52:55Z"), model.value().get(0).createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-21T17:39:02Z"), model.value().get(0).updatedAt());
        Assertions.assertEquals("muouqfp", model.value().get(0).serviceBusEndpoint());
        Assertions.assertEquals("zw", model.value().get(0).subscriptionId());
        Assertions.assertEquals("g", model.value().get(0).scaleUnit());
        Assertions.assertEquals(false, model.value().get(0).enabled());
        Assertions.assertEquals(false, model.value().get(0).critical());
        Assertions.assertEquals("izgazxu", model.value().get(0).dataCenter());
        Assertions.assertEquals(NamespaceType.MESSAGING, model.value().get(0).namespaceType());
        Assertions.assertEquals("jdkirsoodqx", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceListResult model
            = new NamespaceListResult().withValue(Arrays.asList(new NamespaceResourceInner().withLocation("sdkf")
                .withTags(mapOf("km", "xmnteiwaop", "mzidnsezcxtb", "jcmmxdcufufsrp", "dwzjeiach", "sgfyccsnew"))
                .withSku(new Sku().withName(SkuName.FREE)
                    .withTier("y")
                    .withSize("hr")
                    .withFamily("dfvzwdzuhty")
                    .withCapacity(1847084741))
                .withNamePropertiesName("fqawrlyxw")
                .withProvisioningState("cpr")
                .withRegion("wbxgjvt")
                .withStatus("szdnr")
                .withCreatedAt(OffsetDateTime.parse("2021-06-20T01:52:55Z"))
                .withUpdatedAt(OffsetDateTime.parse("2021-10-21T17:39:02Z"))
                .withServiceBusEndpoint("muouqfp")
                .withSubscriptionId("zw")
                .withScaleUnit("g")
                .withEnabled(false)
                .withCritical(false)
                .withDataCenter("izgazxu")
                .withNamespaceType(NamespaceType.MESSAGING))).withNextLink("jdkirsoodqx");
        model = BinaryData.fromObject(model).toObject(NamespaceListResult.class);
        Assertions.assertEquals("sdkf", model.value().get(0).location());
        Assertions.assertEquals("xmnteiwaop", model.value().get(0).tags().get("km"));
        Assertions.assertEquals(SkuName.FREE, model.value().get(0).sku().name());
        Assertions.assertEquals("y", model.value().get(0).sku().tier());
        Assertions.assertEquals("hr", model.value().get(0).sku().size());
        Assertions.assertEquals("dfvzwdzuhty", model.value().get(0).sku().family());
        Assertions.assertEquals(1847084741, model.value().get(0).sku().capacity());
        Assertions.assertEquals("fqawrlyxw", model.value().get(0).namePropertiesName());
        Assertions.assertEquals("cpr", model.value().get(0).provisioningState());
        Assertions.assertEquals("wbxgjvt", model.value().get(0).region());
        Assertions.assertEquals("szdnr", model.value().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-20T01:52:55Z"), model.value().get(0).createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-21T17:39:02Z"), model.value().get(0).updatedAt());
        Assertions.assertEquals("muouqfp", model.value().get(0).serviceBusEndpoint());
        Assertions.assertEquals("zw", model.value().get(0).subscriptionId());
        Assertions.assertEquals("g", model.value().get(0).scaleUnit());
        Assertions.assertEquals(false, model.value().get(0).enabled());
        Assertions.assertEquals(false, model.value().get(0).critical());
        Assertions.assertEquals("izgazxu", model.value().get(0).dataCenter());
        Assertions.assertEquals(NamespaceType.MESSAGING, model.value().get(0).namespaceType());
        Assertions.assertEquals("jdkirsoodqx", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
