// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.models.NamespacePatchParameters;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespacePatchParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespacePatchParameters model = BinaryData.fromString(
            "{\"tags\":{\"xybz\":\"akeqs\",\"mnkzsmod\":\"qedqytbciqfoufl\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"ugpbkw\",\"size\":\"utduqktapspwgcu\",\"family\":\"tumkdosvqwhbm\",\"capacity\":1497620633}}")
            .toObject(NamespacePatchParameters.class);
        Assertions.assertEquals("akeqs", model.tags().get("xybz"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("ugpbkw", model.sku().tier());
        Assertions.assertEquals("utduqktapspwgcu", model.sku().size());
        Assertions.assertEquals("tumkdosvqwhbm", model.sku().family());
        Assertions.assertEquals(1497620633, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespacePatchParameters model
            = new NamespacePatchParameters().withTags(mapOf("xybz", "akeqs", "mnkzsmod", "qedqytbciqfoufl"))
                .withSku(new Sku().withName(SkuName.STANDARD)
                    .withTier("ugpbkw")
                    .withSize("utduqktapspwgcu")
                    .withFamily("tumkdosvqwhbm")
                    .withCapacity(1497620633));
        model = BinaryData.fromObject(model).toObject(NamespacePatchParameters.class);
        Assertions.assertEquals("akeqs", model.tags().get("xybz"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("ugpbkw", model.sku().tier());
        Assertions.assertEquals("utduqktapspwgcu", model.sku().size());
        Assertions.assertEquals("tumkdosvqwhbm", model.sku().family());
        Assertions.assertEquals(1497620633, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
