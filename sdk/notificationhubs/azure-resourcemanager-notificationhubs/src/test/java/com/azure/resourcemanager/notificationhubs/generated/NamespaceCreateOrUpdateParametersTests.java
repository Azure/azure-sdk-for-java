// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.models.NamespaceCreateOrUpdateParameters;
import com.azure.resourcemanager.notificationhubs.models.NamespaceType;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceCreateOrUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceCreateOrUpdateParameters model = BinaryData.fromString(
            "{\"properties\":{\"name\":\"fdatsc\",\"provisioningState\":\"vpjhulsuuv\",\"region\":\"jozkrwfndiod\",\"metricId\":\"slwejdpvw\",\"status\":\"oqpsoa\",\"createdAt\":\"2021-07-20T12:53:26Z\",\"updatedAt\":\"2021-10-30T16:42:46Z\",\"serviceBusEndpoint\":\"kljla\",\"subscriptionId\":\"cr\",\"scaleUnit\":\"fdfdosygexpa\",\"enabled\":true,\"critical\":true,\"dataCenter\":\"sbzjhcr\",\"namespaceType\":\"NotificationHub\"},\"sku\":{\"name\":\"Free\",\"tier\":\"lxaolthqtrgqjbp\",\"size\":\"fsinzgvfcjrwzoxx\",\"family\":\"felluwfzitonpe\",\"capacity\":794210755},\"location\":\"jkjlxofpdvhpfx\",\"tags\":{\"uybbkpodep\":\"ininmay\"},\"id\":\"oginuvamiheognar\",\"name\":\"zxtheotusivyevcc\",\"type\":\"qi\"}")
            .toObject(NamespaceCreateOrUpdateParameters.class);
        Assertions.assertEquals("jkjlxofpdvhpfx", model.location());
        Assertions.assertEquals("ininmay", model.tags().get("uybbkpodep"));
        Assertions.assertEquals(SkuName.FREE, model.sku().name());
        Assertions.assertEquals("lxaolthqtrgqjbp", model.sku().tier());
        Assertions.assertEquals("fsinzgvfcjrwzoxx", model.sku().size());
        Assertions.assertEquals("felluwfzitonpe", model.sku().family());
        Assertions.assertEquals(794210755, model.sku().capacity());
        Assertions.assertEquals("fdatsc", model.namePropertiesName());
        Assertions.assertEquals("vpjhulsuuv", model.provisioningState());
        Assertions.assertEquals("jozkrwfndiod", model.region());
        Assertions.assertEquals("oqpsoa", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T12:53:26Z"), model.createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T16:42:46Z"), model.updatedAt());
        Assertions.assertEquals("kljla", model.serviceBusEndpoint());
        Assertions.assertEquals("cr", model.subscriptionId());
        Assertions.assertEquals("fdfdosygexpa", model.scaleUnit());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(true, model.critical());
        Assertions.assertEquals("sbzjhcr", model.dataCenter());
        Assertions.assertEquals(NamespaceType.NOTIFICATION_HUB, model.namespaceType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceCreateOrUpdateParameters model = new NamespaceCreateOrUpdateParameters().withLocation("jkjlxofpdvhpfx")
            .withTags(mapOf("uybbkpodep", "ininmay"))
            .withSku(new Sku().withName(SkuName.FREE)
                .withTier("lxaolthqtrgqjbp")
                .withSize("fsinzgvfcjrwzoxx")
                .withFamily("felluwfzitonpe")
                .withCapacity(794210755))
            .withNamePropertiesName("fdatsc")
            .withProvisioningState("vpjhulsuuv")
            .withRegion("jozkrwfndiod")
            .withStatus("oqpsoa")
            .withCreatedAt(OffsetDateTime.parse("2021-07-20T12:53:26Z"))
            .withUpdatedAt(OffsetDateTime.parse("2021-10-30T16:42:46Z"))
            .withServiceBusEndpoint("kljla")
            .withSubscriptionId("cr")
            .withScaleUnit("fdfdosygexpa")
            .withEnabled(true)
            .withCritical(true)
            .withDataCenter("sbzjhcr")
            .withNamespaceType(NamespaceType.NOTIFICATION_HUB);
        model = BinaryData.fromObject(model).toObject(NamespaceCreateOrUpdateParameters.class);
        Assertions.assertEquals("jkjlxofpdvhpfx", model.location());
        Assertions.assertEquals("ininmay", model.tags().get("uybbkpodep"));
        Assertions.assertEquals(SkuName.FREE, model.sku().name());
        Assertions.assertEquals("lxaolthqtrgqjbp", model.sku().tier());
        Assertions.assertEquals("fsinzgvfcjrwzoxx", model.sku().size());
        Assertions.assertEquals("felluwfzitonpe", model.sku().family());
        Assertions.assertEquals(794210755, model.sku().capacity());
        Assertions.assertEquals("fdatsc", model.namePropertiesName());
        Assertions.assertEquals("vpjhulsuuv", model.provisioningState());
        Assertions.assertEquals("jozkrwfndiod", model.region());
        Assertions.assertEquals("oqpsoa", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T12:53:26Z"), model.createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T16:42:46Z"), model.updatedAt());
        Assertions.assertEquals("kljla", model.serviceBusEndpoint());
        Assertions.assertEquals("cr", model.subscriptionId());
        Assertions.assertEquals("fdfdosygexpa", model.scaleUnit());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(true, model.critical());
        Assertions.assertEquals("sbzjhcr", model.dataCenter());
        Assertions.assertEquals(NamespaceType.NOTIFICATION_HUB, model.namespaceType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
