// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.fluent.models.CheckAvailabilityResultInner;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CheckAvailabilityResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CheckAvailabilityResultInner model = BinaryData.fromString(
            "{\"isAvailiable\":true,\"location\":\"kwm\",\"tags\":{\"psqucmpoyf\":\"tsizntocipaoua\",\"knygjofjddeq\":\"kfo\",\"upewnwreitjzy\":\"rd\",\"ofcqhsm\":\"lusarh\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"dtmlxhekuksjt\",\"size\":\"kc\",\"family\":\"parcry\",\"capacity\":1654422017},\"id\":\"w\",\"name\":\"xzdxtayrlhmwh\",\"type\":\"pmrqobm\"}")
            .toObject(CheckAvailabilityResultInner.class);
        Assertions.assertEquals(true, model.isAvailiable());
        Assertions.assertEquals("kwm", model.location());
        Assertions.assertEquals("tsizntocipaoua", model.tags().get("psqucmpoyf"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("dtmlxhekuksjt", model.sku().tier());
        Assertions.assertEquals("kc", model.sku().size());
        Assertions.assertEquals("parcry", model.sku().family());
        Assertions.assertEquals(1654422017, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CheckAvailabilityResultInner model
            = new CheckAvailabilityResultInner().withIsAvailiable(true).withLocation("kwm")
                .withTags(mapOf("psqucmpoyf", "tsizntocipaoua", "knygjofjddeq", "kfo", "upewnwreitjzy", "rd", "ofcqhsm",
                    "lusarh"))
                .withSku(new Sku().withName(SkuName.STANDARD).withTier("dtmlxhekuksjt").withSize("kc")
                    .withFamily("parcry").withCapacity(1654422017));
        model = BinaryData.fromObject(model).toObject(CheckAvailabilityResultInner.class);
        Assertions.assertEquals(true, model.isAvailiable());
        Assertions.assertEquals("kwm", model.location());
        Assertions.assertEquals("tsizntocipaoua", model.tags().get("psqucmpoyf"));
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("dtmlxhekuksjt", model.sku().tier());
        Assertions.assertEquals("kc", model.sku().size());
        Assertions.assertEquals("parcry", model.sku().family());
        Assertions.assertEquals(1654422017, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
