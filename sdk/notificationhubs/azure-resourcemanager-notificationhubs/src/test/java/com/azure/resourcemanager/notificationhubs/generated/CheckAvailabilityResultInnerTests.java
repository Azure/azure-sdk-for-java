// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.notificationhubs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.notificationhubs.fluent.models.CheckAvailabilityResultInner;
import com.azure.resourcemanager.notificationhubs.models.Sku;
import com.azure.resourcemanager.notificationhubs.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CheckAvailabilityResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CheckAvailabilityResultInner model = BinaryData.fromString(
            "{\"isAvailiable\":false,\"sku\":{\"name\":\"Standard\",\"tier\":\"fpikxwczb\",\"size\":\"cnpqxuhivyqniwby\",\"family\":\"k\",\"capacity\":827133079},\"location\":\"umjgrtfwvuk\",\"tags\":{\"yejhk\":\"udccsnhsjc\",\"kkvnipjox\":\"yhtnapczwlokjye\",\"podmailzydehojwy\":\"jnchgej\"},\"id\":\"huxinpmqnj\",\"name\":\"qwixjspro\",\"type\":\"vcputegj\"}")
            .toObject(CheckAvailabilityResultInner.class);
        Assertions.assertEquals("umjgrtfwvuk", model.location());
        Assertions.assertEquals("udccsnhsjc", model.tags().get("yejhk"));
        Assertions.assertEquals(false, model.isAvailiable());
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("fpikxwczb", model.sku().tier());
        Assertions.assertEquals("cnpqxuhivyqniwby", model.sku().size());
        Assertions.assertEquals("k", model.sku().family());
        Assertions.assertEquals(827133079, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CheckAvailabilityResultInner model = new CheckAvailabilityResultInner().withLocation("umjgrtfwvuk")
            .withTags(mapOf("yejhk", "udccsnhsjc", "kkvnipjox", "yhtnapczwlokjye", "podmailzydehojwy", "jnchgej"))
            .withIsAvailiable(false)
            .withSku(new Sku().withName(SkuName.STANDARD)
                .withTier("fpikxwczb")
                .withSize("cnpqxuhivyqniwby")
                .withFamily("k")
                .withCapacity(827133079));
        model = BinaryData.fromObject(model).toObject(CheckAvailabilityResultInner.class);
        Assertions.assertEquals("umjgrtfwvuk", model.location());
        Assertions.assertEquals("udccsnhsjc", model.tags().get("yejhk"));
        Assertions.assertEquals(false, model.isAvailiable());
        Assertions.assertEquals(SkuName.STANDARD, model.sku().name());
        Assertions.assertEquals("fpikxwczb", model.sku().tier());
        Assertions.assertEquals("cnpqxuhivyqniwby", model.sku().size());
        Assertions.assertEquals("k", model.sku().family());
        Assertions.assertEquals(827133079, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
