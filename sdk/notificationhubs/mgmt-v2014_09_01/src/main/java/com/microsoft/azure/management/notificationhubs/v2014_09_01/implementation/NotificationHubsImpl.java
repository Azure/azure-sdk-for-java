/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.notificationhubs.v2014_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.notificationhubs.v2014_09_01.NotificationHubs;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.notificationhubs.v2014_09_01.NamespaceSharedAccessAuthorizationRuleResource;
import com.microsoft.azure.management.notificationhubs.v2014_09_01.NotificationHubResource;
import com.microsoft.azure.management.notificationhubs.v2014_09_01.CheckAvailabilityResource;
import com.microsoft.azure.management.notificationhubs.v2014_09_01.CheckAvailabilityParameters;
import com.microsoft.azure.management.notificationhubs.v2014_09_01.ResourceListKeys;

class NotificationHubsImpl extends WrapperImpl<NotificationHubsInner> implements NotificationHubs {
    private final NotificationHubsManager manager;

    NotificationHubsImpl(NotificationHubsManager manager) {
        super(manager.inner().notificationHubs());
        this.manager = manager;
    }

    public NotificationHubsManager manager() {
        return this.manager;
    }

    @Override
    public NotificationHubResourceImpl define(String name) {
        return wrapModel(name);
    }

    private NotificationHubResourceImpl wrapModel(NotificationHubResourceInner inner) {
        return  new NotificationHubResourceImpl(inner, manager());
    }

    private NotificationHubResourceImpl wrapModel(String name) {
        return new NotificationHubResourceImpl(name, this.manager());
    }

    @Override
    public Observable<NamespaceSharedAccessAuthorizationRuleResource> listAuthorizationRulesAsync(final String resourceGroupName, final String namespaceName, final String notificationHubName) {
        NotificationHubsInner client = this.inner();
        return client.listAuthorizationRulesAsync(resourceGroupName, namespaceName, notificationHubName)
        .flatMapIterable(new Func1<Page<SharedAccessAuthorizationRuleResourceInner>, Iterable<SharedAccessAuthorizationRuleResourceInner>>() {
            @Override
            public Iterable<SharedAccessAuthorizationRuleResourceInner> call(Page<SharedAccessAuthorizationRuleResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SharedAccessAuthorizationRuleResourceInner, NamespaceSharedAccessAuthorizationRuleResource>() {
            @Override
            public NamespaceSharedAccessAuthorizationRuleResource call(SharedAccessAuthorizationRuleResourceInner inner) {
                return new NamespaceSharedAccessAuthorizationRuleResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<NotificationHubResource> getPnsCredentialsAsync(String resourceGroupName, String namespaceName, String notificationHubName) {
        NotificationHubsInner client = this.inner();
        return client.getPnsCredentialsAsync(resourceGroupName, namespaceName, notificationHubName)
        .map(new Func1<NotificationHubResourceInner, NotificationHubResource>() {
            @Override
            public NotificationHubResource call(NotificationHubResourceInner inner) {
                return new NotificationHubResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<NotificationHubResource> listAsync(final String resourceGroupName, final String namespaceName) {
        NotificationHubsInner client = this.inner();
        return client.listAsync(resourceGroupName, namespaceName)
        .flatMapIterable(new Func1<Page<NotificationHubResourceInner>, Iterable<NotificationHubResourceInner>>() {
            @Override
            public Iterable<NotificationHubResourceInner> call(Page<NotificationHubResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<NotificationHubResourceInner, NotificationHubResource>() {
            @Override
            public NotificationHubResource call(NotificationHubResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<NotificationHubResource> getAsync(String resourceGroupName, String namespaceName, String notificationHubName) {
        NotificationHubsInner client = this.inner();
        return client.getAsync(resourceGroupName, namespaceName, notificationHubName)
        .map(new Func1<NotificationHubResourceInner, NotificationHubResource>() {
            @Override
            public NotificationHubResource call(NotificationHubResourceInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String namespaceName, String notificationHubName) {
        NotificationHubsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, namespaceName, notificationHubName).toCompletable();
    }

    @Override
    public NotificationHubNamespaceSharedAccessAuthorizationRuleResourceImpl defineAuthorizationRule(String name) {
        return wrapAuthorizationRuleModel(name);
    }

    private NotificationHubNamespaceSharedAccessAuthorizationRuleResourceImpl wrapAuthorizationRuleModel(String name) {
        return new NotificationHubNamespaceSharedAccessAuthorizationRuleResourceImpl(name, this.manager());
    }

    private NotificationHubNamespaceSharedAccessAuthorizationRuleResourceImpl wrapNotificationHubNamespaceSharedAccessAuthorizationRuleResourceModel(SharedAccessAuthorizationRuleResourceInner inner) {
        return  new NotificationHubNamespaceSharedAccessAuthorizationRuleResourceImpl(inner, manager());
    }

    @Override
    public Observable<CheckAvailabilityResource> checkAvailabilityAsync(String resourceGroupName, String namespaceName, CheckAvailabilityParameters parameters) {
        NotificationHubsInner client = this.inner();
        return client.checkAvailabilityAsync(resourceGroupName, namespaceName, parameters)
        .map(new Func1<CheckAvailabilityResourceInner, CheckAvailabilityResource>() {
            @Override
            public CheckAvailabilityResource call(CheckAvailabilityResourceInner inner) {
                return new CheckAvailabilityResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String notificationHubName, String authorizationRuleName) {
        NotificationHubsInner client = this.inner();
        return client.deleteAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName).toCompletable();
    }

    @Override
    public Observable<NamespaceSharedAccessAuthorizationRuleResource> getAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String notificationHubName, String authorizationRuleName) {
        NotificationHubsInner client = this.inner();
        return client.getAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName)
        .map(new Func1<SharedAccessAuthorizationRuleResourceInner, NamespaceSharedAccessAuthorizationRuleResource>() {
            @Override
            public NamespaceSharedAccessAuthorizationRuleResource call(SharedAccessAuthorizationRuleResourceInner inner) {
                return new NamespaceSharedAccessAuthorizationRuleResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ResourceListKeys> listKeysAsync(String resourceGroupName, String namespaceName, String notificationHubName, String authorizationRuleName) {
        NotificationHubsInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName)
        .map(new Func1<ResourceListKeysInner, ResourceListKeys>() {
            @Override
            public ResourceListKeys call(ResourceListKeysInner inner) {
                return new ResourceListKeysImpl(inner, manager());
            }
        });
    }

}
