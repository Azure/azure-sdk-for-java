// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.carbonoptimization.fluent.CarbonServicesClient;
import com.azure.resourcemanager.carbonoptimization.fluent.models.CarbonEmissionDataAvailableDateRangeInner;
import com.azure.resourcemanager.carbonoptimization.fluent.models.CarbonEmissionDataInner;
import com.azure.resourcemanager.carbonoptimization.implementation.models.CarbonEmissionDataListResult;
import com.azure.resourcemanager.carbonoptimization.models.QueryFilter;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CarbonServicesClient.
 */
public final class CarbonServicesClientImpl implements CarbonServicesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CarbonServicesService service;

    /**
     * The service client containing this operation class.
     */
    private final CarbonOptimizationManagementClientImpl client;

    /**
     * Initializes an instance of CarbonServicesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CarbonServicesClientImpl(CarbonOptimizationManagementClientImpl client) {
        this.service
            = RestProxy.create(CarbonServicesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CarbonOptimizationManagementClientCarbonServices to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "CarbonOptimizationMa")
    public interface CarbonServicesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Carbon/carbonEmissionReports")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CarbonEmissionDataListResult>> queryCarbonEmissionReports(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") QueryFilter queryParameters, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Carbon/queryCarbonEmissionDataAvailableDateRange")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CarbonEmissionDataAvailableDateRangeInner>> queryCarbonEmissionDataAvailableDateRange(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * API for Carbon Emissions Reports.
     * 
     * @param queryParameters Query parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of carbon emission results along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CarbonEmissionDataInner>>
        queryCarbonEmissionReportsSinglePageAsync(QueryFilter queryParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (queryParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter queryParameters is required and cannot be null."));
        } else {
            queryParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.queryCarbonEmissionReports(this.client.getEndpoint(),
                this.client.getApiVersion(), accept, queryParameters, context))
            .<PagedResponse<CarbonEmissionDataInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * API for Carbon Emissions Reports.
     * 
     * @param queryParameters Query parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of carbon emission results along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CarbonEmissionDataInner>>
        queryCarbonEmissionReportsSinglePageAsync(QueryFilter queryParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (queryParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter queryParameters is required and cannot be null."));
        } else {
            queryParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .queryCarbonEmissionReports(this.client.getEndpoint(), this.client.getApiVersion(), accept, queryParameters,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), null, null));
    }

    /**
     * API for Carbon Emissions Reports.
     * 
     * @param queryParameters Query parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of carbon emission results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CarbonEmissionDataInner> queryCarbonEmissionReportsAsync(QueryFilter queryParameters) {
        return new PagedFlux<>(() -> queryCarbonEmissionReportsSinglePageAsync(queryParameters));
    }

    /**
     * API for Carbon Emissions Reports.
     * 
     * @param queryParameters Query parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of carbon emission results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CarbonEmissionDataInner> queryCarbonEmissionReportsAsync(QueryFilter queryParameters,
        Context context) {
        return new PagedFlux<>(() -> queryCarbonEmissionReportsSinglePageAsync(queryParameters, context));
    }

    /**
     * API for Carbon Emissions Reports.
     * 
     * @param queryParameters Query parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of carbon emission results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CarbonEmissionDataInner> queryCarbonEmissionReports(QueryFilter queryParameters) {
        return new PagedIterable<>(queryCarbonEmissionReportsAsync(queryParameters));
    }

    /**
     * API for Carbon Emissions Reports.
     * 
     * @param queryParameters Query parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of carbon emission results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CarbonEmissionDataInner> queryCarbonEmissionReports(QueryFilter queryParameters,
        Context context) {
        return new PagedIterable<>(queryCarbonEmissionReportsAsync(queryParameters, context));
    }

    /**
     * API for query carbon emission data available date range.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for available date range of carbon emission data along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CarbonEmissionDataAvailableDateRangeInner>>
        queryCarbonEmissionDataAvailableDateRangeWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.queryCarbonEmissionDataAvailableDateRange(this.client.getEndpoint(),
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * API for query carbon emission data available date range.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for available date range of carbon emission data along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CarbonEmissionDataAvailableDateRangeInner>>
        queryCarbonEmissionDataAvailableDateRangeWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.queryCarbonEmissionDataAvailableDateRange(this.client.getEndpoint(), this.client.getApiVersion(),
            accept, context);
    }

    /**
     * API for query carbon emission data available date range.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for available date range of carbon emission data on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CarbonEmissionDataAvailableDateRangeInner> queryCarbonEmissionDataAvailableDateRangeAsync() {
        return queryCarbonEmissionDataAvailableDateRangeWithResponseAsync()
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * API for query carbon emission data available date range.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for available date range of carbon emission data along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CarbonEmissionDataAvailableDateRangeInner>
        queryCarbonEmissionDataAvailableDateRangeWithResponse(Context context) {
        return queryCarbonEmissionDataAvailableDateRangeWithResponseAsync(context).block();
    }

    /**
     * API for query carbon emission data available date range.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for available date range of carbon emission data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CarbonEmissionDataAvailableDateRangeInner queryCarbonEmissionDataAvailableDateRange() {
        return queryCarbonEmissionDataAvailableDateRangeWithResponse(Context.NONE).getValue();
    }
}
