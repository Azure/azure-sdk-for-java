// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response for Overall Carbon Emissions Summary.
 */
@Immutable
public final class CarbonEmissionOverallSummaryData extends CarbonEmissionData {
    /*
     * The data type of the query result, indicating the format of the returned response.
     */
    private ResponseDataTypeEnum dataType = ResponseDataTypeEnum.OVERALL_SUMMARY_DATA;

    /**
     * Creates an instance of CarbonEmissionOverallSummaryData class.
     */
    private CarbonEmissionOverallSummaryData() {
    }

    /**
     * Get the dataType property: The data type of the query result, indicating the format of the returned response.
     * 
     * @return the dataType value.
     */
    @Override
    public ResponseDataTypeEnum dataType() {
        return this.dataType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("latestMonthEmissions", latestMonthEmissions());
        jsonWriter.writeDoubleField("previousMonthEmissions", previousMonthEmissions());
        jsonWriter.writeNumberField("monthOverMonthEmissionsChangeRatio", monthOverMonthEmissionsChangeRatio());
        jsonWriter.writeNumberField("monthlyEmissionsChangeValue", monthlyEmissionsChangeValue());
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CarbonEmissionOverallSummaryData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CarbonEmissionOverallSummaryData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CarbonEmissionOverallSummaryData.
     */
    public static CarbonEmissionOverallSummaryData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CarbonEmissionOverallSummaryData deserializedCarbonEmissionOverallSummaryData
                = new CarbonEmissionOverallSummaryData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latestMonthEmissions".equals(fieldName)) {
                    deserializedCarbonEmissionOverallSummaryData.withLatestMonthEmissions(reader.getDouble());
                } else if ("previousMonthEmissions".equals(fieldName)) {
                    deserializedCarbonEmissionOverallSummaryData.withPreviousMonthEmissions(reader.getDouble());
                } else if ("monthOverMonthEmissionsChangeRatio".equals(fieldName)) {
                    deserializedCarbonEmissionOverallSummaryData
                        .withMonthOverMonthEmissionsChangeRatio(reader.getNullable(JsonReader::getDouble));
                } else if ("monthlyEmissionsChangeValue".equals(fieldName)) {
                    deserializedCarbonEmissionOverallSummaryData
                        .withMonthlyEmissionsChangeValue(reader.getNullable(JsonReader::getDouble));
                } else if ("dataType".equals(fieldName)) {
                    deserializedCarbonEmissionOverallSummaryData.dataType
                        = ResponseDataTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCarbonEmissionOverallSummaryData;
        });
    }
}
