// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.carbonoptimization.models.CarbonEmissionData;
import com.azure.resourcemanager.carbonoptimization.models.SubscriptionAccessDecision;
import java.io.IOException;
import java.util.List;

/**
 * List of carbon emission results.
 */
@Immutable
public final class CarbonEmissionDataListResultInner implements JsonSerializable<CarbonEmissionDataListResultInner> {
    /*
     * The CarbonEmissionData items on this page
     */
    private List<CarbonEmissionData> value;

    /*
     * The pagination token to fetch next page data, it's null or empty if it doesn't have next page data
     */
    private String skipToken;

    /*
     * The access decision list for each input subscription
     */
    private List<SubscriptionAccessDecision> subscriptionAccessDecisionList;

    /**
     * Creates an instance of CarbonEmissionDataListResultInner class.
     */
    private CarbonEmissionDataListResultInner() {
    }

    /**
     * Get the value property: The CarbonEmissionData items on this page.
     * 
     * @return the value value.
     */
    public List<CarbonEmissionData> value() {
        return this.value;
    }

    /**
     * Get the skipToken property: The pagination token to fetch next page data, it's null or empty if it doesn't have
     * next page data.
     * 
     * @return the skipToken value.
     */
    public String skipToken() {
        return this.skipToken;
    }

    /**
     * Get the subscriptionAccessDecisionList property: The access decision list for each input subscription.
     * 
     * @return the subscriptionAccessDecisionList value.
     */
    public List<SubscriptionAccessDecision> subscriptionAccessDecisionList() {
        return this.subscriptionAccessDecisionList;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property value in model CarbonEmissionDataListResultInner"));
        } else {
            value().forEach(e -> e.validate());
        }
        if (subscriptionAccessDecisionList() != null) {
            subscriptionAccessDecisionList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CarbonEmissionDataListResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("skipToken", this.skipToken);
        jsonWriter.writeArrayField("subscriptionAccessDecisionList", this.subscriptionAccessDecisionList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CarbonEmissionDataListResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CarbonEmissionDataListResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CarbonEmissionDataListResultInner.
     */
    public static CarbonEmissionDataListResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CarbonEmissionDataListResultInner deserializedCarbonEmissionDataListResultInner
                = new CarbonEmissionDataListResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<CarbonEmissionData> value = reader.readArray(reader1 -> CarbonEmissionData.fromJson(reader1));
                    deserializedCarbonEmissionDataListResultInner.value = value;
                } else if ("skipToken".equals(fieldName)) {
                    deserializedCarbonEmissionDataListResultInner.skipToken = reader.getString();
                } else if ("subscriptionAccessDecisionList".equals(fieldName)) {
                    List<SubscriptionAccessDecision> subscriptionAccessDecisionList
                        = reader.readArray(reader1 -> SubscriptionAccessDecision.fromJson(reader1));
                    deserializedCarbonEmissionDataListResultInner.subscriptionAccessDecisionList
                        = subscriptionAccessDecisionList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCarbonEmissionDataListResultInner;
        });
    }
}
