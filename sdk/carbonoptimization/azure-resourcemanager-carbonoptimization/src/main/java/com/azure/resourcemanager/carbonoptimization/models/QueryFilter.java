// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Shared query filter parameter to configure carbon emissions data queries for all different report type defined in
 * ReportTypeEnum.
 */
@Fluent
public class QueryFilter implements JsonSerializable<QueryFilter> {
    /*
     * The ReportType requested for carbon emissions data. Required. Specifies how data is aggregated and displayed in
     * the output, as explained in the ReportTypeEnum.
     */
    @Generated
    private ReportTypeEnum reportType = ReportTypeEnum.fromString("QueryFilter");

    /*
     * The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport,
     * only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g.,
     * start: 2024-06-01 and end: 2024-06-01).
     */
    @Generated
    private DateRange dateRange;

    /*
     * List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be
     * in lowercase format. The max length of list is 100.
     */
    @Generated
    private List<String> subscriptionList;

    /*
     * List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format
     * '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase.
     */
    @Generated
    private List<String> resourceGroupUrlList;

    /*
     * List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase,
     * following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'.
     */
    @Generated
    private List<String> resourceTypeList;

    /*
     * List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase
     * (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region
     * Display Names.
     */
    @Generated
    private List<String> locationList;

    /*
     * List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1,
     * Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes.
     */
    @Generated
    private List<EmissionScopeEnum> carbonScopeList;

    /**
     * Creates an instance of QueryFilter class.
     */
    @Generated
    public QueryFilter() {
    }

    /**
     * Get the reportType property: The ReportType requested for carbon emissions data. Required. Specifies how data is
     * aggregated and displayed in the output, as explained in the ReportTypeEnum.
     * 
     * @return the reportType value.
     */
    @Generated
    public ReportTypeEnum reportType() {
        return this.reportType;
    }

    /**
     * Get the dateRange property: The start and end dates for carbon emissions data. Required. For ItemDetailsReport
     * and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal
     * within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01).
     * 
     * @return the dateRange value.
     */
    @Generated
    public DateRange dateRange() {
        return this.dateRange;
    }

    /**
     * Set the dateRange property: The start and end dates for carbon emissions data. Required. For ItemDetailsReport
     * and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal
     * within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01).
     * 
     * @param dateRange the dateRange value to set.
     * @return the QueryFilter object itself.
     */
    @Generated
    public QueryFilter withDateRange(DateRange dateRange) {
        this.dateRange = dateRange;
        return this;
    }

    /**
     * Get the subscriptionList property: List of subscription IDs for which carbon emissions data is requested.
     * Required. Each subscription ID should be in lowercase format. The max length of list is 100.
     * 
     * @return the subscriptionList value.
     */
    @Generated
    public List<String> subscriptionList() {
        return this.subscriptionList;
    }

    /**
     * Set the subscriptionList property: List of subscription IDs for which carbon emissions data is requested.
     * Required. Each subscription ID should be in lowercase format. The max length of list is 100.
     * 
     * @param subscriptionList the subscriptionList value to set.
     * @return the QueryFilter object itself.
     */
    @Generated
    public QueryFilter withSubscriptionList(List<String> subscriptionList) {
        this.subscriptionList = subscriptionList;
        return this;
    }

    /**
     * Get the resourceGroupUrlList property: List of resource group URLs for carbon emissions data. Optional. Each URL
     * must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all
     * lowercase.
     * 
     * @return the resourceGroupUrlList value.
     */
    @Generated
    public List<String> resourceGroupUrlList() {
        return this.resourceGroupUrlList;
    }

    /**
     * Set the resourceGroupUrlList property: List of resource group URLs for carbon emissions data. Optional. Each URL
     * must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all
     * lowercase.
     * 
     * @param resourceGroupUrlList the resourceGroupUrlList value to set.
     * @return the QueryFilter object itself.
     */
    @Generated
    public QueryFilter withResourceGroupUrlList(List<String> resourceGroupUrlList) {
        this.resourceGroupUrlList = resourceGroupUrlList;
        return this;
    }

    /**
     * Get the resourceTypeList property: List of resource types for carbon emissions data. Optional. Each resource type
     * should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g.,
     * 'microsoft.storage/storageaccounts'.
     * 
     * @return the resourceTypeList value.
     */
    @Generated
    public List<String> resourceTypeList() {
        return this.resourceTypeList;
    }

    /**
     * Set the resourceTypeList property: List of resource types for carbon emissions data. Optional. Each resource type
     * should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g.,
     * 'microsoft.storage/storageaccounts'.
     * 
     * @param resourceTypeList the resourceTypeList value to set.
     * @return the QueryFilter object itself.
     */
    @Generated
    public QueryFilter withResourceTypeList(List<String> resourceTypeList) {
        this.resourceTypeList = resourceTypeList;
        return this;
    }

    /**
     * Get the locationList property: List of locations(Azure Region Display Name) for carbon emissions data, with each
     * location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations
     * -o table' to find Azure Region Display Names.
     * 
     * @return the locationList value.
     */
    @Generated
    public List<String> locationList() {
        return this.locationList;
    }

    /**
     * Set the locationList property: List of locations(Azure Region Display Name) for carbon emissions data, with each
     * location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations
     * -o table' to find Azure Region Display Names.
     * 
     * @param locationList the locationList value to set.
     * @return the QueryFilter object itself.
     */
    @Generated
    public QueryFilter withLocationList(List<String> locationList) {
        this.locationList = locationList;
        return this;
    }

    /**
     * Get the carbonScopeList property: List of carbon emission scopes. Required. Accepts one or more values from
     * EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for
     * the specified scopes.
     * 
     * @return the carbonScopeList value.
     */
    @Generated
    public List<EmissionScopeEnum> carbonScopeList() {
        return this.carbonScopeList;
    }

    /**
     * Set the carbonScopeList property: List of carbon emission scopes. Required. Accepts one or more values from
     * EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for
     * the specified scopes.
     * 
     * @param carbonScopeList the carbonScopeList value to set.
     * @return the QueryFilter object itself.
     */
    @Generated
    public QueryFilter withCarbonScopeList(List<EmissionScopeEnum> carbonScopeList) {
        this.carbonScopeList = carbonScopeList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dateRange() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dateRange in model QueryFilter"));
        } else {
            dateRange().validate();
        }
        if (subscriptionList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property subscriptionList in model QueryFilter"));
        }
        if (carbonScopeList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property carbonScopeList in model QueryFilter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QueryFilter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dateRange", this.dateRange);
        jsonWriter.writeArrayField("subscriptionList", this.subscriptionList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("carbonScopeList", this.carbonScopeList,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("reportType", this.reportType == null ? null : this.reportType.toString());
        jsonWriter.writeArrayField("resourceGroupUrlList", this.resourceGroupUrlList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourceTypeList", this.resourceTypeList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("locationList", this.locationList, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryFilter.
     */
    public static QueryFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("reportType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("OverallSummaryReport".equals(discriminatorValue)) {
                    return OverallSummaryReportQueryFilter.fromJson(readerToUse.reset());
                } else if ("MonthlySummaryReport".equals(discriminatorValue)) {
                    return MonthlySummaryReportQueryFilter.fromJson(readerToUse.reset());
                } else if ("TopItemsSummaryReport".equals(discriminatorValue)) {
                    return TopItemsSummaryReportQueryFilter.fromJson(readerToUse.reset());
                } else if ("TopItemsMonthlySummaryReport".equals(discriminatorValue)) {
                    return TopItemsMonthlySummaryReportQueryFilter.fromJson(readerToUse.reset());
                } else if ("ItemDetailsReport".equals(discriminatorValue)) {
                    return ItemDetailsQueryFilter.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static QueryFilter fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryFilter deserializedQueryFilter = new QueryFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dateRange".equals(fieldName)) {
                    deserializedQueryFilter.dateRange = DateRange.fromJson(reader);
                } else if ("subscriptionList".equals(fieldName)) {
                    List<String> subscriptionList = reader.readArray(reader1 -> reader1.getString());
                    deserializedQueryFilter.subscriptionList = subscriptionList;
                } else if ("carbonScopeList".equals(fieldName)) {
                    List<EmissionScopeEnum> carbonScopeList
                        = reader.readArray(reader1 -> EmissionScopeEnum.fromString(reader1.getString()));
                    deserializedQueryFilter.carbonScopeList = carbonScopeList;
                } else if ("reportType".equals(fieldName)) {
                    deserializedQueryFilter.reportType = ReportTypeEnum.fromString(reader.getString());
                } else if ("resourceGroupUrlList".equals(fieldName)) {
                    List<String> resourceGroupUrlList = reader.readArray(reader1 -> reader1.getString());
                    deserializedQueryFilter.resourceGroupUrlList = resourceGroupUrlList;
                } else if ("resourceTypeList".equals(fieldName)) {
                    List<String> resourceTypeList = reader.readArray(reader1 -> reader1.getString());
                    deserializedQueryFilter.resourceTypeList = resourceTypeList;
                } else if ("locationList".equals(fieldName)) {
                    List<String> locationList = reader.readArray(reader1 -> reader1.getString());
                    deserializedQueryFilter.locationList = locationList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryFilter;
        });
    }
}
