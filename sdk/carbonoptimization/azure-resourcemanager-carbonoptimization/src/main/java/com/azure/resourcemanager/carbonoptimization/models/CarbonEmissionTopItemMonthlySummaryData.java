// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response for Top Items Carbon Emissions by Month.
 */
@Immutable
public final class CarbonEmissionTopItemMonthlySummaryData extends CarbonEmissionData {
    /*
     * The data type of the query result, indicating the format of the returned response.
     */
    @Generated
    private ResponseDataTypeEnum dataType = ResponseDataTypeEnum.TOP_ITEMS_MONTHLY_SUMMARY_DATA;

    /*
     * Item name, it can be resource name, resource type name, location, resource group name or subscriptionId. It
     * depends on category type.
     */
    @Generated
    private String itemName;

    /*
     * Item category, see supported type value defined in CategoryTypeEnum
     */
    @Generated
    private CategoryTypeEnum categoryType;

    /*
     * The date, representing the month, for which the emissions data is reported, formatted as yyyy-MM-dd (e.g.,
     * 2024-03-01)
     */
    @Generated
    private String date;

    /**
     * Creates an instance of CarbonEmissionTopItemMonthlySummaryData class.
     */
    @Generated
    private CarbonEmissionTopItemMonthlySummaryData() {
    }

    /**
     * Get the dataType property: The data type of the query result, indicating the format of the returned response.
     * 
     * @return the dataType value.
     */
    @Generated
    @Override
    public ResponseDataTypeEnum dataType() {
        return this.dataType;
    }

    /**
     * Get the itemName property: Item name, it can be resource name, resource type name, location, resource group name
     * or subscriptionId. It depends on category type.
     * 
     * @return the itemName value.
     */
    @Generated
    public String itemName() {
        return this.itemName;
    }

    /**
     * Get the categoryType property: Item category, see supported type value defined in CategoryTypeEnum.
     * 
     * @return the categoryType value.
     */
    @Generated
    public CategoryTypeEnum categoryType() {
        return this.categoryType;
    }

    /**
     * Get the date property: The date, representing the month, for which the emissions data is reported, formatted as
     * yyyy-MM-dd (e.g., 2024-03-01).
     * 
     * @return the date value.
     */
    @Generated
    public String date() {
        return this.date;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (itemName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property itemName in model CarbonEmissionTopItemMonthlySummaryData"));
        }
        if (categoryType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property categoryType in model CarbonEmissionTopItemMonthlySummaryData"));
        }
        if (date() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property date in model CarbonEmissionTopItemMonthlySummaryData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CarbonEmissionTopItemMonthlySummaryData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("latestMonthEmissions", latestMonthEmissions());
        jsonWriter.writeDoubleField("previousMonthEmissions", previousMonthEmissions());
        jsonWriter.writeNumberField("monthOverMonthEmissionsChangeRatio", monthOverMonthEmissionsChangeRatio());
        jsonWriter.writeNumberField("monthlyEmissionsChangeValue", monthlyEmissionsChangeValue());
        jsonWriter.writeStringField("itemName", this.itemName);
        jsonWriter.writeStringField("categoryType", this.categoryType == null ? null : this.categoryType.toString());
        jsonWriter.writeStringField("date", this.date);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CarbonEmissionTopItemMonthlySummaryData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CarbonEmissionTopItemMonthlySummaryData if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CarbonEmissionTopItemMonthlySummaryData.
     */
    public static CarbonEmissionTopItemMonthlySummaryData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CarbonEmissionTopItemMonthlySummaryData deserializedCarbonEmissionTopItemMonthlySummaryData
                = new CarbonEmissionTopItemMonthlySummaryData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latestMonthEmissions".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData.withLatestMonthEmissions(reader.getDouble());
                } else if ("previousMonthEmissions".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData.withPreviousMonthEmissions(reader.getDouble());
                } else if ("monthOverMonthEmissionsChangeRatio".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData
                        .withMonthOverMonthEmissionsChangeRatio(reader.getNullable(JsonReader::getDouble));
                } else if ("monthlyEmissionsChangeValue".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData
                        .withMonthlyEmissionsChangeValue(reader.getNullable(JsonReader::getDouble));
                } else if ("itemName".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData.itemName = reader.getString();
                } else if ("categoryType".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData.categoryType
                        = CategoryTypeEnum.fromString(reader.getString());
                } else if ("date".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData.date = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedCarbonEmissionTopItemMonthlySummaryData.dataType
                        = ResponseDataTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCarbonEmissionTopItemMonthlySummaryData;
        });
    }
}
