// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Objects;

/**
 * Date range to be used with QueryParameter, it should be within 12 months between start and end date. In certain
 * cases, start and end dates must be the same date.
 */
@Fluent
public final class DateRange implements JsonSerializable<DateRange> {
    /*
     * Start date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
     */
    private LocalDate start;

    /*
     * End date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
     */
    private LocalDate end;

    /**
     * Creates an instance of DateRange class.
     */
    public DateRange() {
    }

    /**
     * Get the start property: Start date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
     * 
     * @return the start value.
     */
    public LocalDate start() {
        return this.start;
    }

    /**
     * Set the start property: Start date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
     * 
     * @param start the start value to set.
     * @return the DateRange object itself.
     */
    public DateRange withStart(LocalDate start) {
        this.start = start;
        return this;
    }

    /**
     * Get the end property: End date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
     * 
     * @return the end value.
     */
    public LocalDate end() {
        return this.end;
    }

    /**
     * Set the end property: End date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
     * 
     * @param end the end value to set.
     * @return the DateRange object itself.
     */
    public DateRange withEnd(LocalDate end) {
        this.end = end;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("start", Objects.toString(this.start, null));
        jsonWriter.writeStringField("end", Objects.toString(this.end, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DateRange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DateRange if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DateRange.
     */
    public static DateRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DateRange deserializedDateRange = new DateRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("start".equals(fieldName)) {
                    deserializedDateRange.start
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("end".equals(fieldName)) {
                    deserializedDateRange.end
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDateRange;
        });
    }
}
