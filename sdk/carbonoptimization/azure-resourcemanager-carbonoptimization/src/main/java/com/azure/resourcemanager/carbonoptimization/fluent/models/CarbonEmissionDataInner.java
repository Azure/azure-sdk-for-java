// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.carbonoptimization.models.CarbonEmissionItemDetailData;
import com.azure.resourcemanager.carbonoptimization.models.CarbonEmissionMonthlySummaryData;
import com.azure.resourcemanager.carbonoptimization.models.CarbonEmissionOverallSummaryData;
import com.azure.resourcemanager.carbonoptimization.models.CarbonEmissionTopItemMonthlySummaryData;
import com.azure.resourcemanager.carbonoptimization.models.CarbonEmissionTopItemsSummaryData;
import com.azure.resourcemanager.carbonoptimization.models.ResourceCarbonEmissionItemDetailData;
import com.azure.resourcemanager.carbonoptimization.models.ResourceCarbonEmissionTopItemMonthlySummaryData;
import com.azure.resourcemanager.carbonoptimization.models.ResourceCarbonEmissionTopItemsSummaryData;
import com.azure.resourcemanager.carbonoptimization.models.ResourceGroupCarbonEmissionItemDetailData;
import com.azure.resourcemanager.carbonoptimization.models.ResourceGroupCarbonEmissionTopItemMonthlySummaryData;
import com.azure.resourcemanager.carbonoptimization.models.ResourceGroupCarbonEmissionTopItemsSummaryData;
import com.azure.resourcemanager.carbonoptimization.models.ResponseDataTypeEnum;
import java.io.IOException;

/**
 * The basic response for different query report, all query report result will have these information.
 */
@Immutable
public class CarbonEmissionDataInner implements JsonSerializable<CarbonEmissionDataInner> {
    /*
     * The data type of the query result, indicating the format of the returned response.
     */
    private ResponseDataTypeEnum dataType = ResponseDataTypeEnum.fromString("CarbonEmissionData");

    /*
     * Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total
     * emissions over the specified date range (e.g., March-June).
     */
    private double latestMonthEmissions;

    /*
     * Total carbon emissions for the previous month’s date range, which is the same period as the specified date range
     * but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be
     * Feb - May). The value is measured in kgCO2E.
     */
    private double previousMonthEmissions;

    /*
     * The percentage change in carbon emissions between the current and previous DateRange. This is calculated as:
     * (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions.
     */
    private Double monthOverMonthEmissionsChangeRatio;

    /*
     * The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions -
     * previousMonthEmissions.
     */
    private Double monthlyEmissionsChangeValue;

    /**
     * Creates an instance of CarbonEmissionDataInner class.
     */
    protected CarbonEmissionDataInner() {
    }

    /**
     * Get the dataType property: The data type of the query result, indicating the format of the returned response.
     * 
     * @return the dataType value.
     */
    public ResponseDataTypeEnum dataType() {
        return this.dataType;
    }

    /**
     * Get the latestMonthEmissions property: Total carbon emissions for the specified query parameters, measured in
     * kgCO2E. This value represents total emissions over the specified date range (e.g., March-June).
     * 
     * @return the latestMonthEmissions value.
     */
    public double latestMonthEmissions() {
        return this.latestMonthEmissions;
    }

    /**
     * Set the latestMonthEmissions property: Total carbon emissions for the specified query parameters, measured in
     * kgCO2E. This value represents total emissions over the specified date range (e.g., March-June).
     * 
     * @param latestMonthEmissions the latestMonthEmissions value to set.
     * @return the CarbonEmissionDataInner object itself.
     */
    CarbonEmissionDataInner withLatestMonthEmissions(double latestMonthEmissions) {
        this.latestMonthEmissions = latestMonthEmissions;
        return this;
    }

    /**
     * Get the previousMonthEmissions property: Total carbon emissions for the previous month’s date range, which is the
     * same period as the specified date range but shifted left by one month (e.g., if the specified range is March -
     * June, the previous month’s range will be Feb - May). The value is measured in kgCO2E.
     * 
     * @return the previousMonthEmissions value.
     */
    public double previousMonthEmissions() {
        return this.previousMonthEmissions;
    }

    /**
     * Set the previousMonthEmissions property: Total carbon emissions for the previous month’s date range, which is the
     * same period as the specified date range but shifted left by one month (e.g., if the specified range is March -
     * June, the previous month’s range will be Feb - May). The value is measured in kgCO2E.
     * 
     * @param previousMonthEmissions the previousMonthEmissions value to set.
     * @return the CarbonEmissionDataInner object itself.
     */
    CarbonEmissionDataInner withPreviousMonthEmissions(double previousMonthEmissions) {
        this.previousMonthEmissions = previousMonthEmissions;
        return this;
    }

    /**
     * Get the monthOverMonthEmissionsChangeRatio property: The percentage change in carbon emissions between the
     * current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) /
     * previousMonthEmissions.
     * 
     * @return the monthOverMonthEmissionsChangeRatio value.
     */
    public Double monthOverMonthEmissionsChangeRatio() {
        return this.monthOverMonthEmissionsChangeRatio;
    }

    /**
     * Set the monthOverMonthEmissionsChangeRatio property: The percentage change in carbon emissions between the
     * current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) /
     * previousMonthEmissions.
     * 
     * @param monthOverMonthEmissionsChangeRatio the monthOverMonthEmissionsChangeRatio value to set.
     * @return the CarbonEmissionDataInner object itself.
     */
    CarbonEmissionDataInner withMonthOverMonthEmissionsChangeRatio(Double monthOverMonthEmissionsChangeRatio) {
        this.monthOverMonthEmissionsChangeRatio = monthOverMonthEmissionsChangeRatio;
        return this;
    }

    /**
     * Get the monthlyEmissionsChangeValue property: The change in carbon emissions between the current and previous
     * period, calculated as: latestMonthEmissions - previousMonthEmissions.
     * 
     * @return the monthlyEmissionsChangeValue value.
     */
    public Double monthlyEmissionsChangeValue() {
        return this.monthlyEmissionsChangeValue;
    }

    /**
     * Set the monthlyEmissionsChangeValue property: The change in carbon emissions between the current and previous
     * period, calculated as: latestMonthEmissions - previousMonthEmissions.
     * 
     * @param monthlyEmissionsChangeValue the monthlyEmissionsChangeValue value to set.
     * @return the CarbonEmissionDataInner object itself.
     */
    CarbonEmissionDataInner withMonthlyEmissionsChangeValue(Double monthlyEmissionsChangeValue) {
        this.monthlyEmissionsChangeValue = monthlyEmissionsChangeValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("latestMonthEmissions", this.latestMonthEmissions);
        jsonWriter.writeDoubleField("previousMonthEmissions", this.previousMonthEmissions);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeNumberField("monthOverMonthEmissionsChangeRatio", this.monthOverMonthEmissionsChangeRatio);
        jsonWriter.writeNumberField("monthlyEmissionsChangeValue", this.monthlyEmissionsChangeValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CarbonEmissionDataInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CarbonEmissionDataInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CarbonEmissionDataInner.
     */
    public static CarbonEmissionDataInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("dataType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("OverallSummaryData".equals(discriminatorValue)) {
                    return CarbonEmissionOverallSummaryData.fromJson(readerToUse.reset());
                } else if ("MonthlySummaryData".equals(discriminatorValue)) {
                    return CarbonEmissionMonthlySummaryData.fromJson(readerToUse.reset());
                } else if ("TopItemsSummaryData".equals(discriminatorValue)) {
                    return CarbonEmissionTopItemsSummaryData.fromJson(readerToUse.reset());
                } else if ("ResourceTopItemsSummaryData".equals(discriminatorValue)) {
                    return ResourceCarbonEmissionTopItemsSummaryData.fromJson(readerToUse.reset());
                } else if ("ResourceGroupTopItemsSummaryData".equals(discriminatorValue)) {
                    return ResourceGroupCarbonEmissionTopItemsSummaryData.fromJson(readerToUse.reset());
                } else if ("TopItemsMonthlySummaryData".equals(discriminatorValue)) {
                    return CarbonEmissionTopItemMonthlySummaryData.fromJson(readerToUse.reset());
                } else if ("ResourceTopItemsMonthlySummaryData".equals(discriminatorValue)) {
                    return ResourceCarbonEmissionTopItemMonthlySummaryData.fromJson(readerToUse.reset());
                } else if ("ResourceGroupTopItemsMonthlySummaryData".equals(discriminatorValue)) {
                    return ResourceGroupCarbonEmissionTopItemMonthlySummaryData.fromJson(readerToUse.reset());
                } else if ("ItemDetailsData".equals(discriminatorValue)) {
                    return CarbonEmissionItemDetailData.fromJson(readerToUse.reset());
                } else if ("ResourceItemDetailsData".equals(discriminatorValue)) {
                    return ResourceCarbonEmissionItemDetailData.fromJson(readerToUse.reset());
                } else if ("ResourceGroupItemDetailsData".equals(discriminatorValue)) {
                    return ResourceGroupCarbonEmissionItemDetailData.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static CarbonEmissionDataInner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CarbonEmissionDataInner deserializedCarbonEmissionDataInner = new CarbonEmissionDataInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latestMonthEmissions".equals(fieldName)) {
                    deserializedCarbonEmissionDataInner.latestMonthEmissions = reader.getDouble();
                } else if ("previousMonthEmissions".equals(fieldName)) {
                    deserializedCarbonEmissionDataInner.previousMonthEmissions = reader.getDouble();
                } else if ("dataType".equals(fieldName)) {
                    deserializedCarbonEmissionDataInner.dataType = ResponseDataTypeEnum.fromString(reader.getString());
                } else if ("monthOverMonthEmissionsChangeRatio".equals(fieldName)) {
                    deserializedCarbonEmissionDataInner.monthOverMonthEmissionsChangeRatio
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("monthlyEmissionsChangeValue".equals(fieldName)) {
                    deserializedCarbonEmissionDataInner.monthlyEmissionsChangeValue
                        = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCarbonEmissionDataInner;
        });
    }
}
