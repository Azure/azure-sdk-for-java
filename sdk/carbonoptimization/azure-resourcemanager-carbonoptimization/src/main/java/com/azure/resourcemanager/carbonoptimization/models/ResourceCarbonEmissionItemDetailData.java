// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response for Resource detailed carbon emissions.
 */
@Immutable
public final class ResourceCarbonEmissionItemDetailData extends CarbonEmissionData {
    /*
     * The data type of the query result, indicating the format of the returned response.
     */
    @Generated
    private ResponseDataTypeEnum dataType = ResponseDataTypeEnum.RESOURCE_ITEM_DETAILS_DATA;

    /*
     * It's resource name.
     */
    @Generated
    private String itemName;

    /*
     * Resource Item category, see supported value defined in CategoryTypeEnum
     */
    @Generated
    private CategoryTypeEnum categoryType;

    /*
     * Subscription Id
     */
    @Generated
    private String subscriptionId;

    /*
     * Resource Group
     */
    @Generated
    private String resourceGroup;

    /*
     * The fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{
     * resourceType}/{resourceName}
     */
    @Generated
    private String resourceId;

    /*
     * Resource Location (e.g., 'east us').
     */
    @Generated
    private String location;

    /*
     * The type of resource, for example: microsoft.storage/storageaccounts
     */
    @Generated
    private String resourceType;

    /**
     * Creates an instance of ResourceCarbonEmissionItemDetailData class.
     */
    @Generated
    private ResourceCarbonEmissionItemDetailData() {
    }

    /**
     * Get the dataType property: The data type of the query result, indicating the format of the returned response.
     * 
     * @return the dataType value.
     */
    @Generated
    @Override
    public ResponseDataTypeEnum dataType() {
        return this.dataType;
    }

    /**
     * Get the itemName property: It's resource name.
     * 
     * @return the itemName value.
     */
    @Generated
    public String itemName() {
        return this.itemName;
    }

    /**
     * Get the categoryType property: Resource Item category, see supported value defined in CategoryTypeEnum.
     * 
     * @return the categoryType value.
     */
    @Generated
    public CategoryTypeEnum categoryType() {
        return this.categoryType;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    @Generated
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the resourceGroup property: Resource Group.
     * 
     * @return the resourceGroup value.
     */
    @Generated
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the resourceId property: The fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @return the resourceId value.
     */
    @Generated
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the location property: Resource Location (e.g., 'east us').
     * 
     * @return the location value.
     */
    @Generated
    public String location() {
        return this.location;
    }

    /**
     * Get the resourceType property: The type of resource, for example: microsoft.storage/storageaccounts.
     * 
     * @return the resourceType value.
     */
    @Generated
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (itemName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property itemName in model ResourceCarbonEmissionItemDetailData"));
        }
        if (categoryType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property categoryType in model ResourceCarbonEmissionItemDetailData"));
        }
        if (subscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subscriptionId in model ResourceCarbonEmissionItemDetailData"));
        }
        if (resourceGroup() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceGroup in model ResourceCarbonEmissionItemDetailData"));
        }
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model ResourceCarbonEmissionItemDetailData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceCarbonEmissionItemDetailData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("latestMonthEmissions", latestMonthEmissions());
        jsonWriter.writeDoubleField("previousMonthEmissions", previousMonthEmissions());
        jsonWriter.writeNumberField("monthOverMonthEmissionsChangeRatio", monthOverMonthEmissionsChangeRatio());
        jsonWriter.writeNumberField("monthlyEmissionsChangeValue", monthlyEmissionsChangeValue());
        jsonWriter.writeStringField("itemName", this.itemName);
        jsonWriter.writeStringField("categoryType", this.categoryType == null ? null : this.categoryType.toString());
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroup", this.resourceGroup);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceCarbonEmissionItemDetailData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceCarbonEmissionItemDetailData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceCarbonEmissionItemDetailData.
     */
    public static ResourceCarbonEmissionItemDetailData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceCarbonEmissionItemDetailData deserializedResourceCarbonEmissionItemDetailData
                = new ResourceCarbonEmissionItemDetailData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latestMonthEmissions".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.withLatestMonthEmissions(reader.getDouble());
                } else if ("previousMonthEmissions".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.withPreviousMonthEmissions(reader.getDouble());
                } else if ("monthOverMonthEmissionsChangeRatio".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData
                        .withMonthOverMonthEmissionsChangeRatio(reader.getNullable(JsonReader::getDouble));
                } else if ("monthlyEmissionsChangeValue".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData
                        .withMonthlyEmissionsChangeValue(reader.getNullable(JsonReader::getDouble));
                } else if ("itemName".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.itemName = reader.getString();
                } else if ("categoryType".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.categoryType
                        = CategoryTypeEnum.fromString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.subscriptionId = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.resourceGroup = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.resourceId = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.dataType
                        = ResponseDataTypeEnum.fromString(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.location = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedResourceCarbonEmissionItemDetailData.resourceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceCarbonEmissionItemDetailData;
        });
    }
}
