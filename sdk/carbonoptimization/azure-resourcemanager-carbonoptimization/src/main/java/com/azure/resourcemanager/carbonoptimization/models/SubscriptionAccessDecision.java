// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Access Decision for each Subscription.
 */
@Immutable
public final class SubscriptionAccessDecision implements JsonSerializable<SubscriptionAccessDecision> {
    /*
     * Id of Subscription
     */
    private String subscriptionId;

    /*
     * Access decision to subscription
     */
    private AccessDecisionEnum decision;

    /*
     * The reason why access request got denied
     */
    private String denialReason;

    /**
     * Creates an instance of SubscriptionAccessDecision class.
     */
    private SubscriptionAccessDecision() {
    }

    /**
     * Get the subscriptionId property: Id of Subscription.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the decision property: Access decision to subscription.
     * 
     * @return the decision value.
     */
    public AccessDecisionEnum decision() {
        return this.decision;
    }

    /**
     * Get the denialReason property: The reason why access request got denied.
     * 
     * @return the denialReason value.
     */
    public String denialReason() {
        return this.denialReason;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("decision", this.decision == null ? null : this.decision.toString());
        jsonWriter.writeStringField("denialReason", this.denialReason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubscriptionAccessDecision from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubscriptionAccessDecision if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SubscriptionAccessDecision.
     */
    public static SubscriptionAccessDecision fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubscriptionAccessDecision deserializedSubscriptionAccessDecision = new SubscriptionAccessDecision();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionId".equals(fieldName)) {
                    deserializedSubscriptionAccessDecision.subscriptionId = reader.getString();
                } else if ("decision".equals(fieldName)) {
                    deserializedSubscriptionAccessDecision.decision = AccessDecisionEnum.fromString(reader.getString());
                } else if ("denialReason".equals(fieldName)) {
                    deserializedSubscriptionAccessDecision.denialReason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubscriptionAccessDecision;
        });
    }
}
