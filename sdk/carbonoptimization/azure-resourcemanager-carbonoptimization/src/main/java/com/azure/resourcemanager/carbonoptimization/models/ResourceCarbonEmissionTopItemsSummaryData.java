// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response for Top Items For Resource Category.
 */
@Immutable
public final class ResourceCarbonEmissionTopItemsSummaryData extends CarbonEmissionData {
    /*
     * The data type of the query result, indicating the format of the returned response.
     */
    private ResponseDataTypeEnum dataType = ResponseDataTypeEnum.RESOURCE_TOP_ITEMS_SUMMARY_DATA;

    /*
     * The resource name of the resource for the Resource Category.
     */
    private String itemName;

    /*
     * The category type of the item. This defines which dimension the emissions are aggregated by, and the supported
     * values are defined in CategoryTypeEnum (e.g., Subscription, ResourceGroup, Resource, etc.).
     */
    private CategoryTypeEnum categoryType;

    /*
     * Subscription Id
     */
    private String subscriptionId;

    /*
     * Resource group name
     */
    private String resourceGroup;

    /*
     * Resource Id, The URI of the resource for the Resource Category. This identifies the resource being reported.
     */
    private String resourceId;

    /**
     * Creates an instance of ResourceCarbonEmissionTopItemsSummaryData class.
     */
    private ResourceCarbonEmissionTopItemsSummaryData() {
    }

    /**
     * Get the dataType property: The data type of the query result, indicating the format of the returned response.
     * 
     * @return the dataType value.
     */
    @Override
    public ResponseDataTypeEnum dataType() {
        return this.dataType;
    }

    /**
     * Get the itemName property: The resource name of the resource for the Resource Category.
     * 
     * @return the itemName value.
     */
    public String itemName() {
        return this.itemName;
    }

    /**
     * Get the categoryType property: The category type of the item. This defines which dimension the emissions are
     * aggregated by, and the supported values are defined in CategoryTypeEnum (e.g., Subscription, ResourceGroup,
     * Resource, etc.).
     * 
     * @return the categoryType value.
     */
    public CategoryTypeEnum categoryType() {
        return this.categoryType;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the resourceGroup property: Resource group name.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the resourceId property: Resource Id, The URI of the resource for the Resource Category. This identifies the
     * resource being reported.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("latestMonthEmissions", latestMonthEmissions());
        jsonWriter.writeDoubleField("previousMonthEmissions", previousMonthEmissions());
        jsonWriter.writeNumberField("monthOverMonthEmissionsChangeRatio", monthOverMonthEmissionsChangeRatio());
        jsonWriter.writeNumberField("monthlyEmissionsChangeValue", monthlyEmissionsChangeValue());
        jsonWriter.writeStringField("itemName", this.itemName);
        jsonWriter.writeStringField("categoryType", this.categoryType == null ? null : this.categoryType.toString());
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroup", this.resourceGroup);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceCarbonEmissionTopItemsSummaryData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceCarbonEmissionTopItemsSummaryData if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceCarbonEmissionTopItemsSummaryData.
     */
    public static ResourceCarbonEmissionTopItemsSummaryData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceCarbonEmissionTopItemsSummaryData deserializedResourceCarbonEmissionTopItemsSummaryData
                = new ResourceCarbonEmissionTopItemsSummaryData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latestMonthEmissions".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData.withLatestMonthEmissions(reader.getDouble());
                } else if ("previousMonthEmissions".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData
                        .withPreviousMonthEmissions(reader.getDouble());
                } else if ("monthOverMonthEmissionsChangeRatio".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData
                        .withMonthOverMonthEmissionsChangeRatio(reader.getNullable(JsonReader::getDouble));
                } else if ("monthlyEmissionsChangeValue".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData
                        .withMonthlyEmissionsChangeValue(reader.getNullable(JsonReader::getDouble));
                } else if ("itemName".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData.itemName = reader.getString();
                } else if ("categoryType".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData.categoryType
                        = CategoryTypeEnum.fromString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData.subscriptionId = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData.resourceGroup = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData.resourceId = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemsSummaryData.dataType
                        = ResponseDataTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceCarbonEmissionTopItemsSummaryData;
        });
    }
}
