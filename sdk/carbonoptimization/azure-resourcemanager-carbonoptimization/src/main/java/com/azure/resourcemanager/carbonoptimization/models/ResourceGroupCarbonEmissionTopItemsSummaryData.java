// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response for Top Items For ResourceGroup.
 */
@Immutable
public final class ResourceGroupCarbonEmissionTopItemsSummaryData extends CarbonEmissionData {
    /*
     * The data type of the query result, indicating the format of the returned response.
     */
    @Generated
    private ResponseDataTypeEnum dataType = ResponseDataTypeEnum.RESOURCE_GROUP_TOP_ITEMS_SUMMARY_DATA;

    /*
     * The resourceGroup name of the resource for ResourceGroup Category
     */
    @Generated
    private String itemName;

    /*
     * ResourceGroup Item category
     */
    @Generated
    private CategoryTypeEnum categoryType;

    /*
     * Subscription Id
     */
    @Generated
    private String subscriptionId;

    /*
     * Resource Group url, value format is '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}'
     */
    @Generated
    private String resourceGroupUrl;

    /**
     * Creates an instance of ResourceGroupCarbonEmissionTopItemsSummaryData class.
     */
    @Generated
    private ResourceGroupCarbonEmissionTopItemsSummaryData() {
    }

    /**
     * Get the dataType property: The data type of the query result, indicating the format of the returned response.
     * 
     * @return the dataType value.
     */
    @Generated
    @Override
    public ResponseDataTypeEnum dataType() {
        return this.dataType;
    }

    /**
     * Get the itemName property: The resourceGroup name of the resource for ResourceGroup Category.
     * 
     * @return the itemName value.
     */
    @Generated
    public String itemName() {
        return this.itemName;
    }

    /**
     * Get the categoryType property: ResourceGroup Item category.
     * 
     * @return the categoryType value.
     */
    @Generated
    public CategoryTypeEnum categoryType() {
        return this.categoryType;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    @Generated
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the resourceGroupUrl property: Resource Group url, value format is
     * '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}'.
     * 
     * @return the resourceGroupUrl value.
     */
    @Generated
    public String resourceGroupUrl() {
        return this.resourceGroupUrl;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (itemName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property itemName in model ResourceGroupCarbonEmissionTopItemsSummaryData"));
        }
        if (categoryType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property categoryType in model ResourceGroupCarbonEmissionTopItemsSummaryData"));
        }
        if (subscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subscriptionId in model ResourceGroupCarbonEmissionTopItemsSummaryData"));
        }
        if (resourceGroupUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceGroupUrl in model ResourceGroupCarbonEmissionTopItemsSummaryData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceGroupCarbonEmissionTopItemsSummaryData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("latestMonthEmissions", latestMonthEmissions());
        jsonWriter.writeDoubleField("previousMonthEmissions", previousMonthEmissions());
        jsonWriter.writeNumberField("monthOverMonthEmissionsChangeRatio", monthOverMonthEmissionsChangeRatio());
        jsonWriter.writeNumberField("monthlyEmissionsChangeValue", monthlyEmissionsChangeValue());
        jsonWriter.writeStringField("itemName", this.itemName);
        jsonWriter.writeStringField("categoryType", this.categoryType == null ? null : this.categoryType.toString());
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroupUrl", this.resourceGroupUrl);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceGroupCarbonEmissionTopItemsSummaryData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceGroupCarbonEmissionTopItemsSummaryData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceGroupCarbonEmissionTopItemsSummaryData.
     */
    public static ResourceGroupCarbonEmissionTopItemsSummaryData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceGroupCarbonEmissionTopItemsSummaryData deserializedResourceGroupCarbonEmissionTopItemsSummaryData
                = new ResourceGroupCarbonEmissionTopItemsSummaryData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latestMonthEmissions".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData
                        .withLatestMonthEmissions(reader.getDouble());
                } else if ("previousMonthEmissions".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData
                        .withPreviousMonthEmissions(reader.getDouble());
                } else if ("monthOverMonthEmissionsChangeRatio".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData
                        .withMonthOverMonthEmissionsChangeRatio(reader.getNullable(JsonReader::getDouble));
                } else if ("monthlyEmissionsChangeValue".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData
                        .withMonthlyEmissionsChangeValue(reader.getNullable(JsonReader::getDouble));
                } else if ("itemName".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData.itemName = reader.getString();
                } else if ("categoryType".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData.categoryType
                        = CategoryTypeEnum.fromString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData.subscriptionId = reader.getString();
                } else if ("resourceGroupUrl".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData.resourceGroupUrl = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedResourceGroupCarbonEmissionTopItemsSummaryData.dataType
                        = ResponseDataTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceGroupCarbonEmissionTopItemsSummaryData;
        });
    }
}
