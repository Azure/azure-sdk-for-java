// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Query filter parameter to configure MonthlySummaryReport queries.
 */
@Fluent
public final class MonthlySummaryReportQueryFilter extends QueryFilter {
    /*
     * The ReportType requested for carbon emissions data. Required. Specifies how data is aggregated and displayed in
     * the output, as explained in the ReportTypeEnum.
     */
    @Generated
    private ReportTypeEnum reportType = ReportTypeEnum.MONTHLY_SUMMARY_REPORT;

    /**
     * Creates an instance of MonthlySummaryReportQueryFilter class.
     */
    @Generated
    public MonthlySummaryReportQueryFilter() {
    }

    /**
     * Get the reportType property: The ReportType requested for carbon emissions data. Required. Specifies how data is
     * aggregated and displayed in the output, as explained in the ReportTypeEnum.
     * 
     * @return the reportType value.
     */
    @Generated
    @Override
    public ReportTypeEnum reportType() {
        return this.reportType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlySummaryReportQueryFilter withDateRange(DateRange dateRange) {
        super.withDateRange(dateRange);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlySummaryReportQueryFilter withSubscriptionList(List<String> subscriptionList) {
        super.withSubscriptionList(subscriptionList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlySummaryReportQueryFilter withResourceGroupUrlList(List<String> resourceGroupUrlList) {
        super.withResourceGroupUrlList(resourceGroupUrlList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlySummaryReportQueryFilter withResourceTypeList(List<String> resourceTypeList) {
        super.withResourceTypeList(resourceTypeList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlySummaryReportQueryFilter withLocationList(List<String> locationList) {
        super.withLocationList(locationList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlySummaryReportQueryFilter withCarbonScopeList(List<EmissionScopeEnum> carbonScopeList) {
        super.withCarbonScopeList(carbonScopeList);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dateRange() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dateRange in model MonthlySummaryReportQueryFilter"));
        } else {
            dateRange().validate();
        }
        if (subscriptionList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subscriptionList in model MonthlySummaryReportQueryFilter"));
        }
        if (carbonScopeList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property carbonScopeList in model MonthlySummaryReportQueryFilter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonthlySummaryReportQueryFilter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dateRange", dateRange());
        jsonWriter.writeArrayField("subscriptionList", subscriptionList(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("carbonScopeList", carbonScopeList(),
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("resourceGroupUrlList", resourceGroupUrlList(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourceTypeList", resourceTypeList(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("locationList", locationList(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("reportType", this.reportType == null ? null : this.reportType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonthlySummaryReportQueryFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonthlySummaryReportQueryFilter if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonthlySummaryReportQueryFilter.
     */
    public static MonthlySummaryReportQueryFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonthlySummaryReportQueryFilter deserializedMonthlySummaryReportQueryFilter
                = new MonthlySummaryReportQueryFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dateRange".equals(fieldName)) {
                    deserializedMonthlySummaryReportQueryFilter.withDateRange(DateRange.fromJson(reader));
                } else if ("subscriptionList".equals(fieldName)) {
                    List<String> subscriptionList = reader.readArray(reader1 -> reader1.getString());
                    deserializedMonthlySummaryReportQueryFilter.withSubscriptionList(subscriptionList);
                } else if ("carbonScopeList".equals(fieldName)) {
                    List<EmissionScopeEnum> carbonScopeList
                        = reader.readArray(reader1 -> EmissionScopeEnum.fromString(reader1.getString()));
                    deserializedMonthlySummaryReportQueryFilter.withCarbonScopeList(carbonScopeList);
                } else if ("resourceGroupUrlList".equals(fieldName)) {
                    List<String> resourceGroupUrlList = reader.readArray(reader1 -> reader1.getString());
                    deserializedMonthlySummaryReportQueryFilter.withResourceGroupUrlList(resourceGroupUrlList);
                } else if ("resourceTypeList".equals(fieldName)) {
                    List<String> resourceTypeList = reader.readArray(reader1 -> reader1.getString());
                    deserializedMonthlySummaryReportQueryFilter.withResourceTypeList(resourceTypeList);
                } else if ("locationList".equals(fieldName)) {
                    List<String> locationList = reader.readArray(reader1 -> reader1.getString());
                    deserializedMonthlySummaryReportQueryFilter.withLocationList(locationList);
                } else if ("reportType".equals(fieldName)) {
                    deserializedMonthlySummaryReportQueryFilter.reportType
                        = ReportTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonthlySummaryReportQueryFilter;
        });
    }
}
