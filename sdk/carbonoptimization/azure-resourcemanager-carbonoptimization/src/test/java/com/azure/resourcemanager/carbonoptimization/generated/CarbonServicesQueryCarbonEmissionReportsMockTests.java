// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.carbonoptimization.CarbonOptimizationManager;
import com.azure.resourcemanager.carbonoptimization.models.CarbonEmissionData;
import com.azure.resourcemanager.carbonoptimization.models.DateRange;
import com.azure.resourcemanager.carbonoptimization.models.EmissionScopeEnum;
import com.azure.resourcemanager.carbonoptimization.models.QueryFilter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CarbonServicesQueryCarbonEmissionReportsMockTests {
    @Test
    public void testQueryCarbonEmissionReports() throws Exception {
        String responseStr
            = "{\"value\":[{\"dataType\":\"CarbonEmissionData\",\"latestMonthEmissions\":47.453901230584684,\"previousMonthEmissions\":39.88341647038772,\"monthOverMonthEmissionsChangeRatio\":61.07224203836401,\"monthlyEmissionsChangeValue\":62.667987966762}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CarbonOptimizationManager manager = CarbonOptimizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CarbonEmissionData> response = manager.carbonServices()
            .queryCarbonEmissionReports(
                new QueryFilter().withDateRange(new DateRange())
                    .withSubscriptionList(Arrays.asList("dtqajzyulpkudj", "rlkhbzhfepgzgq", "xzlocxscp"))
                    .withResourceGroupUrlList(Arrays.asList("rhhbcs", "l", "mmajtjaodx"))
                    .withResourceTypeList(Arrays.asList("bdxkqpxokaj", "onpimexgstxg"))
                    .withLocationList(Arrays.asList("dg", "aajrm", "djwzrlov", "clwhijcoejctbz"))
                    .withCarbonScopeList(Arrays.asList(EmissionScopeEnum.SCOPE3, EmissionScopeEnum.SCOPE1)),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(47.453901230584684, response.iterator().next().latestMonthEmissions());
        Assertions.assertEquals(39.88341647038772, response.iterator().next().previousMonthEmissions());
        Assertions.assertEquals(61.07224203836401D, response.iterator().next().monthOverMonthEmissionsChangeRatio());
        Assertions.assertEquals(62.667987966762D, response.iterator().next().monthlyEmissionsChangeValue());
    }
}
