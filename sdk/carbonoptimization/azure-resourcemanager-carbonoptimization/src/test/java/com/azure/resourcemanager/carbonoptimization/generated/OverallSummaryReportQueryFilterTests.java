// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.carbonoptimization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.carbonoptimization.models.DateRange;
import com.azure.resourcemanager.carbonoptimization.models.EmissionScopeEnum;
import com.azure.resourcemanager.carbonoptimization.models.OverallSummaryReportQueryFilter;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OverallSummaryReportQueryFilterTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OverallSummaryReportQueryFilter model = BinaryData.fromString(
            "{\"reportType\":\"OverallSummaryReport\",\"dateRange\":{},\"subscriptionList\":[\"ni\",\"joxzjnchgejspodm\"],\"resourceGroupUrlList\":[\"zyde\",\"o\",\"wyahuxinpmqnja\",\"wixjsprozvcp\"],\"resourceTypeList\":[\"gjvw\"],\"locationList\":[\"atscmd\",\"pjhulsuuvmkj\"],\"carbonScopeList\":[\"Scope1\",\"Scope2\"]}")
            .toObject(OverallSummaryReportQueryFilter.class);
        Assertions.assertEquals("ni", model.subscriptionList().get(0));
        Assertions.assertEquals("zyde", model.resourceGroupUrlList().get(0));
        Assertions.assertEquals("gjvw", model.resourceTypeList().get(0));
        Assertions.assertEquals("atscmd", model.locationList().get(0));
        Assertions.assertEquals(EmissionScopeEnum.SCOPE1, model.carbonScopeList().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OverallSummaryReportQueryFilter model = new OverallSummaryReportQueryFilter().withDateRange(new DateRange())
            .withSubscriptionList(Arrays.asList("ni", "joxzjnchgejspodm"))
            .withResourceGroupUrlList(Arrays.asList("zyde", "o", "wyahuxinpmqnja", "wixjsprozvcp"))
            .withResourceTypeList(Arrays.asList("gjvw"))
            .withLocationList(Arrays.asList("atscmd", "pjhulsuuvmkj"))
            .withCarbonScopeList(Arrays.asList(EmissionScopeEnum.SCOPE1, EmissionScopeEnum.SCOPE2));
        model = BinaryData.fromObject(model).toObject(OverallSummaryReportQueryFilter.class);
        Assertions.assertEquals("ni", model.subscriptionList().get(0));
        Assertions.assertEquals("zyde", model.resourceGroupUrlList().get(0));
        Assertions.assertEquals("gjvw", model.resourceTypeList().get(0));
        Assertions.assertEquals("atscmd", model.locationList().get(0));
        Assertions.assertEquals(EmissionScopeEnum.SCOPE1, model.carbonScopeList().get(0));
    }
}
