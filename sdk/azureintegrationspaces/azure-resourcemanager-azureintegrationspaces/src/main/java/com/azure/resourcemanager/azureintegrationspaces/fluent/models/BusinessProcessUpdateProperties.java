// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcessIdentifier;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcessMappingItem;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcessStage;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The updatable properties of the BusinessProcess. */
@Fluent
public final class BusinessProcessUpdateProperties {
    /*
     * The description of the business process.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The table name of the business process.
     */
    @JsonProperty(value = "tableName")
    private String tableName;

    /*
     * The tracking data store reference name.
     */
    @JsonProperty(value = "trackingDataStoreReferenceName")
    private String trackingDataStoreReferenceName;

    /*
     * The business process identifier.
     */
    @JsonProperty(value = "identifier")
    private BusinessProcessIdentifier identifier;

    /*
     * The business process stages.
     */
    @JsonProperty(value = "businessProcessStages")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, BusinessProcessStage> businessProcessStages;

    /*
     * The business process mapping.
     */
    @JsonProperty(value = "businessProcessMapping")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, BusinessProcessMappingItem> businessProcessMapping;

    /** Creates an instance of BusinessProcessUpdateProperties class. */
    public BusinessProcessUpdateProperties() {
    }

    /**
     * Get the description property: The description of the business process.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the business process.
     *
     * @param description the description value to set.
     * @return the BusinessProcessUpdateProperties object itself.
     */
    public BusinessProcessUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the tableName property: The table name of the business process.
     *
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: The table name of the business process.
     *
     * @param tableName the tableName value to set.
     * @return the BusinessProcessUpdateProperties object itself.
     */
    public BusinessProcessUpdateProperties withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Get the trackingDataStoreReferenceName property: The tracking data store reference name.
     *
     * @return the trackingDataStoreReferenceName value.
     */
    public String trackingDataStoreReferenceName() {
        return this.trackingDataStoreReferenceName;
    }

    /**
     * Set the trackingDataStoreReferenceName property: The tracking data store reference name.
     *
     * @param trackingDataStoreReferenceName the trackingDataStoreReferenceName value to set.
     * @return the BusinessProcessUpdateProperties object itself.
     */
    public BusinessProcessUpdateProperties withTrackingDataStoreReferenceName(String trackingDataStoreReferenceName) {
        this.trackingDataStoreReferenceName = trackingDataStoreReferenceName;
        return this;
    }

    /**
     * Get the identifier property: The business process identifier.
     *
     * @return the identifier value.
     */
    public BusinessProcessIdentifier identifier() {
        return this.identifier;
    }

    /**
     * Set the identifier property: The business process identifier.
     *
     * @param identifier the identifier value to set.
     * @return the BusinessProcessUpdateProperties object itself.
     */
    public BusinessProcessUpdateProperties withIdentifier(BusinessProcessIdentifier identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Get the businessProcessStages property: The business process stages.
     *
     * @return the businessProcessStages value.
     */
    public Map<String, BusinessProcessStage> businessProcessStages() {
        return this.businessProcessStages;
    }

    /**
     * Set the businessProcessStages property: The business process stages.
     *
     * @param businessProcessStages the businessProcessStages value to set.
     * @return the BusinessProcessUpdateProperties object itself.
     */
    public BusinessProcessUpdateProperties withBusinessProcessStages(
        Map<String, BusinessProcessStage> businessProcessStages) {
        this.businessProcessStages = businessProcessStages;
        return this;
    }

    /**
     * Get the businessProcessMapping property: The business process mapping.
     *
     * @return the businessProcessMapping value.
     */
    public Map<String, BusinessProcessMappingItem> businessProcessMapping() {
        return this.businessProcessMapping;
    }

    /**
     * Set the businessProcessMapping property: The business process mapping.
     *
     * @param businessProcessMapping the businessProcessMapping value to set.
     * @return the BusinessProcessUpdateProperties object itself.
     */
    public BusinessProcessUpdateProperties withBusinessProcessMapping(
        Map<String, BusinessProcessMappingItem> businessProcessMapping) {
        this.businessProcessMapping = businessProcessMapping;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identifier() != null) {
            identifier().validate();
        }
        if (businessProcessStages() != null) {
            businessProcessStages()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (businessProcessMapping() != null) {
            businessProcessMapping()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
