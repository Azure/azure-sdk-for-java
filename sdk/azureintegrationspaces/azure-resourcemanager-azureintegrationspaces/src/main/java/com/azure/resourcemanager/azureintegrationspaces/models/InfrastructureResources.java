// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.util.List;

/** Resource collection API of InfrastructureResources. */
public interface InfrastructureResources {
    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<InfrastructureResource> listBySpace(String resourceGroupName, String spaceName);

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<InfrastructureResource> listBySpace(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context);

    /**
     * Get a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource along with {@link Response}.
     */
    Response<InfrastructureResource> getWithResponse(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context);

    /**
     * Get a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource.
     */
    InfrastructureResource get(String resourceGroupName, String spaceName, String infrastructureResourceName);

    /**
     * Delete a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context);

    /**
     * Delete a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String spaceName, String infrastructureResourceName);

    /**
     * Get a InfrastructureResource.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource along with {@link Response}.
     */
    InfrastructureResource getById(String id);

    /**
     * Get a InfrastructureResource.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource along with {@link Response}.
     */
    Response<InfrastructureResource> getByIdWithResponse(String id, Context context);

    /**
     * Delete a InfrastructureResource.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a InfrastructureResource.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new InfrastructureResource resource.
     *
     * @param name resource name.
     * @return the first stage of the new InfrastructureResource definition.
     */
    InfrastructureResource.DefinitionStages.Blank define(String name);
}
