// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azureintegrationspaces.fluent.ApplicationsClient;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.ApplicationInner;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.ListBusinessProcessDevelopmentArtifactsResponseInner;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.SaveOrGetBusinessProcessDevelopmentArtifactResponseInner;
import com.azure.resourcemanager.azureintegrationspaces.models.ApplicationListResult;
import com.azure.resourcemanager.azureintegrationspaces.models.ApplicationUpdate;
import com.azure.resourcemanager.azureintegrationspaces.models.GetOrDeleteBusinessProcessDevelopmentArtifactRequest;
import com.azure.resourcemanager.azureintegrationspaces.models.SaveOrValidateBusinessProcessDevelopmentArtifactRequest;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ApplicationsClient. */
public final class ApplicationsClientImpl implements ApplicationsClient {
    /** The proxy service used to perform REST calls. */
    private final ApplicationsService service;

    /** The service client containing this operation class. */
    private final MicrosoftIntegrationSpacesImpl client;

    /**
     * Initializes an instance of ApplicationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ApplicationsClientImpl(MicrosoftIntegrationSpacesImpl client) {
        this.service =
            RestProxy.create(ApplicationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftIntegrationSpacesApplications to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftIntegration")
    public interface ApplicationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationListResult>> listBySpace(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("top") Integer top,
            @QueryParam("skip") Integer skip,
            @QueryParam("maxpagesize") Integer maxPageSize,
            @QueryParam("filter") String filter,
            @QueryParam(value = "select", multipleQueryParams = true) List<String> select,
            @QueryParam(value = "expand", multipleQueryParams = true) List<String> expand,
            @QueryParam(value = "orderby", multipleQueryParams = true) List<String> orderBy,
            @PathParam("spaceName") String spaceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @BodyParam("application/json") ApplicationInner resource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationInner>> patch(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @BodyParam("application/json") ApplicationUpdate properties,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/deleteBusinessProcessDevelopmentArtifact")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteBusinessProcessDevelopmentArtifact(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @BodyParam("application/json") GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/getBusinessProcessDevelopmentArtifact")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>> getBusinessProcessDevelopmentArtifact(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @BodyParam("application/json") GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/listBusinessProcessDevelopmentArtifacts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ListBusinessProcessDevelopmentArtifactsResponseInner>> listBusinessProcessDevelopmentArtifacts(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/saveBusinessProcessDevelopmentArtifact")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>> saveBusinessProcessDevelopmentArtifact(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @BodyParam("application/json") SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/validateBusinessProcessDevelopmentArtifact")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> validateBusinessProcessDevelopmentArtifact(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @BodyParam("application/json") SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationListResult>> listBySpaceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List Application resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationInner>> listBySpaceSinglePageAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> selectConverted =
            (select == null)
                ? new ArrayList<>()
                : select.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> expandConverted =
            (expand == null)
                ? new ArrayList<>()
                : expand.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> orderByConverted =
            (orderBy == null)
                ? new ArrayList<>()
                : orderBy.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listBySpace(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            top,
                            skip,
                            maxPageSize,
                            filter,
                            selectConverted,
                            expandConverted,
                            orderByConverted,
                            spaceName,
                            accept,
                            context))
            .<PagedResponse<ApplicationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Application resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationInner>> listBySpaceSinglePageAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> selectConverted =
            (select == null)
                ? new ArrayList<>()
                : select.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> expandConverted =
            (expand == null)
                ? new ArrayList<>()
                : expand.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> orderByConverted =
            (orderBy == null)
                ? new ArrayList<>()
                : orderBy.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        context = this.client.mergeContext(context);
        return service
            .listBySpace(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                top,
                skip,
                maxPageSize,
                filter,
                selectConverted,
                expandConverted,
                orderByConverted,
                spaceName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List Application resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationInner> listBySpaceAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy) {
        return new PagedFlux<>(
            () ->
                listBySpaceSinglePageAsync(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy),
            nextLink -> listBySpaceNextSinglePageAsync(nextLink));
    }

    /**
     * List Application resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationInner> listBySpaceAsync(String resourceGroupName, String spaceName) {
        final Integer top = null;
        final Integer skip = null;
        final Integer maxPageSize = null;
        final String filter = null;
        final List<String> select = null;
        final List<String> expand = null;
        final List<String> orderBy = null;
        return new PagedFlux<>(
            () ->
                listBySpaceSinglePageAsync(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy),
            nextLink -> listBySpaceNextSinglePageAsync(nextLink));
    }

    /**
     * List Application resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationInner> listBySpaceAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        return new PagedFlux<>(
            () ->
                listBySpaceSinglePageAsync(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy, context),
            nextLink -> listBySpaceNextSinglePageAsync(nextLink, context));
    }

    /**
     * List Application resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationInner> listBySpace(String resourceGroupName, String spaceName) {
        final Integer top = null;
        final Integer skip = null;
        final Integer maxPageSize = null;
        final String filter = null;
        final List<String> select = null;
        final List<String> expand = null;
        final List<String> orderBy = null;
        return new PagedIterable<>(
            listBySpaceAsync(resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy));
    }

    /**
     * List Application resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationInner> listBySpace(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        return new PagedIterable<>(
            listBySpaceAsync(
                resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy, context));
    }

    /**
     * Get a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationInner>> getWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationInner>> getWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                accept,
                context);
    }

    /**
     * Get a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationInner> getAsync(String resourceGroupName, String spaceName, String applicationName) {
        return getWithResponseAsync(resourceGroupName, spaceName, applicationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationInner> getWithResponse(
        String resourceGroupName, String spaceName, String applicationName, Context context) {
        return getWithResponseAsync(resourceGroupName, spaceName, applicationName, context).block();
    }

    /**
     * Get a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Application.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationInner get(String resourceGroupName, String spaceName, String applicationName) {
        return getWithResponse(resourceGroupName, spaceName, applicationName, Context.NONE).getValue();
    }

    /**
     * Create a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, ApplicationInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            resource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        ApplicationInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                resource,
                accept,
                context);
    }

    /**
     * Create a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationInner> createOrUpdateAsync(
        String resourceGroupName, String spaceName, String applicationName, ApplicationInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, spaceName, applicationName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        ApplicationInner resource,
        Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, spaceName, applicationName, resource, context)
            .block();
    }

    /**
     * Create a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationInner createOrUpdate(
        String resourceGroupName, String spaceName, String applicationName, ApplicationInner resource) {
        return createOrUpdateWithResponse(resourceGroupName, spaceName, applicationName, resource, Context.NONE)
            .getValue();
    }

    /**
     * Update a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationInner>> patchWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, ApplicationUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patch(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            properties,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationInner>> patchWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        ApplicationUpdate properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .patch(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                properties,
                accept,
                context);
    }

    /**
     * Update a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationInner> patchAsync(
        String resourceGroupName, String spaceName, String applicationName, ApplicationUpdate properties) {
        return patchWithResponseAsync(resourceGroupName, spaceName, applicationName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationInner> patchWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        ApplicationUpdate properties,
        Context context) {
        return patchWithResponseAsync(resourceGroupName, spaceName, applicationName, properties, context).block();
    }

    /**
     * Update a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration application under space.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationInner patch(
        String resourceGroupName, String spaceName, String applicationName, ApplicationUpdate properties) {
        return patchWithResponse(resourceGroupName, spaceName, applicationName, properties, Context.NONE).getValue();
    }

    /**
     * Delete a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                accept,
                context);
    }

    /**
     * Delete a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String spaceName, String applicationName) {
        return deleteWithResponseAsync(resourceGroupName, spaceName, applicationName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String spaceName, String applicationName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, spaceName, applicationName, context).block();
    }

    /**
     * Delete a Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String spaceName, String applicationName) {
        deleteWithResponse(resourceGroupName, spaceName, applicationName, Context.NONE);
    }

    /**
     * The delete business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteBusinessProcessDevelopmentArtifactWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteBusinessProcessDevelopmentArtifact(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The delete business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteBusinessProcessDevelopmentArtifactWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteBusinessProcessDevelopmentArtifact(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                body,
                accept,
                context);
    }

    /**
     * The delete business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteBusinessProcessDevelopmentArtifactAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        return deleteBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * The delete business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteBusinessProcessDevelopmentArtifactWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
        Context context) {
        return deleteBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body, context)
            .block();
    }

    /**
     * The delete business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        deleteBusinessProcessDevelopmentArtifactWithResponse(
            resourceGroupName, spaceName, applicationName, body, Context.NONE);
    }

    /**
     * The get business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>>
        getBusinessProcessDevelopmentArtifactWithResponseAsync(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getBusinessProcessDevelopmentArtifact(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The get business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>>
        getBusinessProcessDevelopmentArtifactWithResponseAsync(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getBusinessProcessDevelopmentArtifact(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                body,
                accept,
                context);
    }

    /**
     * The get business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner> getBusinessProcessDevelopmentArtifactAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        return getBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The get business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>
        getBusinessProcessDevelopmentArtifactWithResponse(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
            Context context) {
        return getBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body, context)
            .block();
    }

    /**
     * The get business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaveOrGetBusinessProcessDevelopmentArtifactResponseInner getBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        return getBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, Context.NONE)
            .getValue();
    }

    /**
     * The list business process development artifacts action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact get collection response along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListBusinessProcessDevelopmentArtifactsResponseInner>>
        listBusinessProcessDevelopmentArtifactsWithResponseAsync(
            String resourceGroupName, String spaceName, String applicationName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listBusinessProcessDevelopmentArtifacts(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The list business process development artifacts action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact get collection response along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListBusinessProcessDevelopmentArtifactsResponseInner>>
        listBusinessProcessDevelopmentArtifactsWithResponseAsync(
            String resourceGroupName, String spaceName, String applicationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBusinessProcessDevelopmentArtifacts(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                accept,
                context);
    }

    /**
     * The list business process development artifacts action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact get collection response on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListBusinessProcessDevelopmentArtifactsResponseInner> listBusinessProcessDevelopmentArtifactsAsync(
        String resourceGroupName, String spaceName, String applicationName) {
        return listBusinessProcessDevelopmentArtifactsWithResponseAsync(resourceGroupName, spaceName, applicationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The list business process development artifacts action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact get collection response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ListBusinessProcessDevelopmentArtifactsResponseInner>
        listBusinessProcessDevelopmentArtifactsWithResponse(
            String resourceGroupName, String spaceName, String applicationName, Context context) {
        return listBusinessProcessDevelopmentArtifactsWithResponseAsync(
                resourceGroupName, spaceName, applicationName, context)
            .block();
    }

    /**
     * The list business process development artifacts action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact get collection response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListBusinessProcessDevelopmentArtifactsResponseInner listBusinessProcessDevelopmentArtifacts(
        String resourceGroupName, String spaceName, String applicationName) {
        return listBusinessProcessDevelopmentArtifactsWithResponse(
                resourceGroupName, spaceName, applicationName, Context.NONE)
            .getValue();
    }

    /**
     * The save business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>>
        saveBusinessProcessDevelopmentArtifactWithResponseAsync(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .saveBusinessProcessDevelopmentArtifact(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The save business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>>
        saveBusinessProcessDevelopmentArtifactWithResponseAsync(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .saveBusinessProcessDevelopmentArtifact(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                body,
                accept,
                context);
    }

    /**
     * The save business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner> saveBusinessProcessDevelopmentArtifactAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        return saveBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The save business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner>
        saveBusinessProcessDevelopmentArtifactWithResponse(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
            Context context) {
        return saveBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body, context)
            .block();
    }

    /**
     * The save business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the business process development artifact save or get response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaveOrGetBusinessProcessDevelopmentArtifactResponseInner saveBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        return saveBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, Context.NONE)
            .getValue();
    }

    /**
     * The validate business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> validateBusinessProcessDevelopmentArtifactWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .validateBusinessProcessDevelopmentArtifact(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The validate business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> validateBusinessProcessDevelopmentArtifactWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .validateBusinessProcessDevelopmentArtifact(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                body,
                accept,
                context);
    }

    /**
     * The validate business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> validateBusinessProcessDevelopmentArtifactAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        return validateBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * The validate business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> validateBusinessProcessDevelopmentArtifactWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
        Context context) {
        return validateBusinessProcessDevelopmentArtifactWithResponseAsync(
                resourceGroupName, spaceName, applicationName, body, context)
            .block();
    }

    /**
     * The validate business process development artifact action.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void validateBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        validateBusinessProcessDevelopmentArtifactWithResponse(
            resourceGroupName, spaceName, applicationName, body, Context.NONE);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationInner>> listBySpaceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySpaceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ApplicationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Application list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationInner>> listBySpaceNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySpaceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
