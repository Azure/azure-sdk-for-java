// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azureintegrationspaces.fluent.BusinessProcessesClient;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.BusinessProcessInner;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcess;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcesses;
import java.util.List;

public final class BusinessProcessesImpl implements BusinessProcesses {
    private static final ClientLogger LOGGER = new ClientLogger(BusinessProcessesImpl.class);

    private final BusinessProcessesClient innerClient;

    private final com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager;

    public BusinessProcessesImpl(
        BusinessProcessesClient innerClient,
        com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BusinessProcess> listByApplication(
        String resourceGroupName, String spaceName, String applicationName) {
        PagedIterable<BusinessProcessInner> inner =
            this.serviceClient().listByApplication(resourceGroupName, spaceName, applicationName);
        return Utils.mapPage(inner, inner1 -> new BusinessProcessImpl(inner1, this.manager()));
    }

    public PagedIterable<BusinessProcess> listByApplication(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        PagedIterable<BusinessProcessInner> inner =
            this
                .serviceClient()
                .listByApplication(
                    resourceGroupName,
                    spaceName,
                    applicationName,
                    top,
                    skip,
                    maxPageSize,
                    filter,
                    select,
                    expand,
                    orderBy,
                    context);
        return Utils.mapPage(inner, inner1 -> new BusinessProcessImpl(inner1, this.manager()));
    }

    public Response<BusinessProcess> getWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String businessProcessName,
        Context context) {
        Response<BusinessProcessInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BusinessProcessImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BusinessProcess get(
        String resourceGroupName, String spaceName, String applicationName, String businessProcessName) {
        BusinessProcessInner inner =
            this.serviceClient().get(resourceGroupName, spaceName, applicationName, businessProcessName);
        if (inner != null) {
            return new BusinessProcessImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String businessProcessName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, context);
    }

    public void delete(String resourceGroupName, String spaceName, String applicationName, String businessProcessName) {
        this.serviceClient().delete(resourceGroupName, spaceName, applicationName, businessProcessName);
    }

    public BusinessProcess getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        String businessProcessName = Utils.getValueFromIdByName(id, "businessProcesses");
        if (businessProcessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'businessProcesses'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, Context.NONE)
            .getValue();
    }

    public Response<BusinessProcess> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        String businessProcessName = Utils.getValueFromIdByName(id, "businessProcesses");
        if (businessProcessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'businessProcesses'.", id)));
        }
        return this.getWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        String businessProcessName = Utils.getValueFromIdByName(id, "businessProcesses");
        if (businessProcessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'businessProcesses'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        String businessProcessName = Utils.getValueFromIdByName(id, "businessProcesses");
        if (businessProcessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'businessProcesses'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, context);
    }

    private BusinessProcessesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager manager() {
        return this.serviceManager;
    }

    public BusinessProcessImpl define(String name) {
        return new BusinessProcessImpl(name, this.manager());
    }
}
