// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azureintegrationspaces.fluent.InfrastructureResourcesClient;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.InfrastructureResourceInner;
import com.azure.resourcemanager.azureintegrationspaces.models.InfrastructureResource;
import com.azure.resourcemanager.azureintegrationspaces.models.InfrastructureResources;
import java.util.List;

public final class InfrastructureResourcesImpl implements InfrastructureResources {
    private static final ClientLogger LOGGER = new ClientLogger(InfrastructureResourcesImpl.class);

    private final InfrastructureResourcesClient innerClient;

    private final com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager;

    public InfrastructureResourcesImpl(
        InfrastructureResourcesClient innerClient,
        com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InfrastructureResource> listBySpace(String resourceGroupName, String spaceName) {
        PagedIterable<InfrastructureResourceInner> inner =
            this.serviceClient().listBySpace(resourceGroupName, spaceName);
        return Utils.mapPage(inner, inner1 -> new InfrastructureResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<InfrastructureResource> listBySpace(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        PagedIterable<InfrastructureResourceInner> inner =
            this
                .serviceClient()
                .listBySpace(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy, context);
        return Utils.mapPage(inner, inner1 -> new InfrastructureResourceImpl(inner1, this.manager()));
    }

    public Response<InfrastructureResource> getWithResponse(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context) {
        Response<InfrastructureResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, spaceName, infrastructureResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InfrastructureResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InfrastructureResource get(String resourceGroupName, String spaceName, String infrastructureResourceName) {
        InfrastructureResourceInner inner =
            this.serviceClient().get(resourceGroupName, spaceName, infrastructureResourceName);
        if (inner != null) {
            return new InfrastructureResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, spaceName, infrastructureResourceName, context);
    }

    public void delete(String resourceGroupName, String spaceName, String infrastructureResourceName) {
        this.serviceClient().delete(resourceGroupName, spaceName, infrastructureResourceName);
    }

    public InfrastructureResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String infrastructureResourceName = Utils.getValueFromIdByName(id, "infrastructureResources");
        if (infrastructureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'infrastructureResources'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, spaceName, infrastructureResourceName, Context.NONE).getValue();
    }

    public Response<InfrastructureResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String infrastructureResourceName = Utils.getValueFromIdByName(id, "infrastructureResources");
        if (infrastructureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'infrastructureResources'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, spaceName, infrastructureResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String infrastructureResourceName = Utils.getValueFromIdByName(id, "infrastructureResources");
        if (infrastructureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'infrastructureResources'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, spaceName, infrastructureResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String infrastructureResourceName = Utils.getValueFromIdByName(id, "infrastructureResources");
        if (infrastructureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'infrastructureResources'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, spaceName, infrastructureResourceName, context);
    }

    private InfrastructureResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager manager() {
        return this.serviceManager;
    }

    public InfrastructureResourceImpl define(String name) {
        return new InfrastructureResourceImpl(name, this.manager());
    }
}
