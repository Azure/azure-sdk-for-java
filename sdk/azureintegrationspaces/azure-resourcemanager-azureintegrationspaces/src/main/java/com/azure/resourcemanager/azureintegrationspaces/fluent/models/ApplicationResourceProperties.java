// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azureintegrationspaces.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties of application resource. */
@Fluent
public final class ApplicationResourceProperties {
    /*
     * The status of the last operation.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The type of the application resource.
     */
    @JsonProperty(value = "resourceType", required = true)
    private String resourceType;

    /*
     * The Arm id of the application resource.
     */
    @JsonProperty(value = "resourceId", required = true)
    private String resourceId;

    /*
     * The kind of the application resource.
     */
    @JsonProperty(value = "resourceKind")
    private String resourceKind;

    /** Creates an instance of ApplicationResourceProperties class. */
    public ApplicationResourceProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceType property: The type of the application resource.
     *
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The type of the application resource.
     *
     * @param resourceType the resourceType value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the resourceId property: The Arm id of the application resource.
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The Arm id of the application resource.
     *
     * @param resourceId the resourceId value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the resourceKind property: The kind of the application resource.
     *
     * @return the resourceKind value.
     */
    public String resourceKind() {
        return this.resourceKind;
    }

    /**
     * Set the resourceKind property: The kind of the application resource.
     *
     * @param resourceKind the resourceKind value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withResourceKind(String resourceKind) {
        this.resourceKind = resourceKind;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property resourceType in model ApplicationResourceProperties"));
        }
        if (resourceId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property resourceId in model ApplicationResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationResourceProperties.class);
}
