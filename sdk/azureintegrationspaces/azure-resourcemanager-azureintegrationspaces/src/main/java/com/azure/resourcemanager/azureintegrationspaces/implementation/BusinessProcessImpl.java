// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.BusinessProcessInner;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcess;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcessIdentifier;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcessMappingItem;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcessStage;
import com.azure.resourcemanager.azureintegrationspaces.models.BusinessProcessUpdate;
import com.azure.resourcemanager.azureintegrationspaces.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class BusinessProcessImpl implements BusinessProcess, BusinessProcess.Definition, BusinessProcess.Update {
    private BusinessProcessInner innerObject;

    private final com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String version() {
        return this.innerModel().version();
    }

    public String description() {
        return this.innerModel().description();
    }

    public String tableName() {
        return this.innerModel().tableName();
    }

    public String trackingDataStoreReferenceName() {
        return this.innerModel().trackingDataStoreReferenceName();
    }

    public BusinessProcessIdentifier identifier() {
        return this.innerModel().identifier();
    }

    public Map<String, BusinessProcessStage> businessProcessStages() {
        Map<String, BusinessProcessStage> inner = this.innerModel().businessProcessStages();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Map<String, BusinessProcessMappingItem> businessProcessMapping() {
        Map<String, BusinessProcessMappingItem> inner = this.innerModel().businessProcessMapping();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public BusinessProcessInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String spaceName;

    private String applicationName;

    private String businessProcessName;

    private BusinessProcessUpdate updateProperties;

    public BusinessProcessImpl withExistingApplication(
        String resourceGroupName, String spaceName, String applicationName) {
        this.resourceGroupName = resourceGroupName;
        this.spaceName = spaceName;
        this.applicationName = applicationName;
        return this;
    }

    public BusinessProcess create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBusinessProcesses()
                .createOrUpdateWithResponse(
                    resourceGroupName, spaceName, applicationName, businessProcessName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public BusinessProcess create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBusinessProcesses()
                .createOrUpdateWithResponse(
                    resourceGroupName, spaceName, applicationName, businessProcessName, this.innerModel(), context)
                .getValue();
        return this;
    }

    BusinessProcessImpl(
        String name, com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerObject = new BusinessProcessInner();
        this.serviceManager = serviceManager;
        this.businessProcessName = name;
    }

    public BusinessProcessImpl update() {
        this.updateProperties = new BusinessProcessUpdate();
        return this;
    }

    public BusinessProcess apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBusinessProcesses()
                .patchWithResponse(
                    resourceGroupName, spaceName, applicationName, businessProcessName, updateProperties, Context.NONE)
                .getValue();
        return this;
    }

    public BusinessProcess apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBusinessProcesses()
                .patchWithResponse(
                    resourceGroupName, spaceName, applicationName, businessProcessName, updateProperties, context)
                .getValue();
        return this;
    }

    BusinessProcessImpl(
        BusinessProcessInner innerObject,
        com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.spaceName = Utils.getValueFromIdByName(innerObject.id(), "spaces");
        this.applicationName = Utils.getValueFromIdByName(innerObject.id(), "applications");
        this.businessProcessName = Utils.getValueFromIdByName(innerObject.id(), "businessProcesses");
    }

    public BusinessProcess refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBusinessProcesses()
                .getWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, Context.NONE)
                .getValue();
        return this;
    }

    public BusinessProcess refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBusinessProcesses()
                .getWithResponse(resourceGroupName, spaceName, applicationName, businessProcessName, context)
                .getValue();
        return this;
    }

    public BusinessProcessImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateProperties.withDescription(description);
            return this;
        }
    }

    public BusinessProcessImpl withTableName(String tableName) {
        if (isInCreateMode()) {
            this.innerModel().withTableName(tableName);
            return this;
        } else {
            this.updateProperties.withTableName(tableName);
            return this;
        }
    }

    public BusinessProcessImpl withTrackingDataStoreReferenceName(String trackingDataStoreReferenceName) {
        if (isInCreateMode()) {
            this.innerModel().withTrackingDataStoreReferenceName(trackingDataStoreReferenceName);
            return this;
        } else {
            this.updateProperties.withTrackingDataStoreReferenceName(trackingDataStoreReferenceName);
            return this;
        }
    }

    public BusinessProcessImpl withIdentifier(BusinessProcessIdentifier identifier) {
        if (isInCreateMode()) {
            this.innerModel().withIdentifier(identifier);
            return this;
        } else {
            this.updateProperties.withIdentifier(identifier);
            return this;
        }
    }

    public BusinessProcessImpl withBusinessProcessStages(Map<String, BusinessProcessStage> businessProcessStages) {
        if (isInCreateMode()) {
            this.innerModel().withBusinessProcessStages(businessProcessStages);
            return this;
        } else {
            this.updateProperties.withBusinessProcessStages(businessProcessStages);
            return this;
        }
    }

    public BusinessProcessImpl withBusinessProcessMapping(
        Map<String, BusinessProcessMappingItem> businessProcessMapping) {
        if (isInCreateMode()) {
            this.innerModel().withBusinessProcessMapping(businessProcessMapping);
            return this;
        } else {
            this.updateProperties.withBusinessProcessMapping(businessProcessMapping);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
