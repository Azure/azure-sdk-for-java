// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.ApplicationInner;
import com.azure.resourcemanager.azureintegrationspaces.models.Application;
import com.azure.resourcemanager.azureintegrationspaces.models.ApplicationUpdate;
import com.azure.resourcemanager.azureintegrationspaces.models.GetOrDeleteBusinessProcessDevelopmentArtifactRequest;
import com.azure.resourcemanager.azureintegrationspaces.models.ListBusinessProcessDevelopmentArtifactsResponse;
import com.azure.resourcemanager.azureintegrationspaces.models.ProvisioningState;
import com.azure.resourcemanager.azureintegrationspaces.models.SaveOrGetBusinessProcessDevelopmentArtifactResponse;
import com.azure.resourcemanager.azureintegrationspaces.models.SaveOrValidateBusinessProcessDevelopmentArtifactRequest;
import com.azure.resourcemanager.azureintegrationspaces.models.TrackingDataStore;
import java.util.Collections;
import java.util.Map;

public final class ApplicationImpl implements Application, Application.Definition, Application.Update {
    private ApplicationInner innerObject;

    private final com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String description() {
        return this.innerModel().description();
    }

    public Map<String, TrackingDataStore> trackingDataStores() {
        Map<String, TrackingDataStore> inner = this.innerModel().trackingDataStores();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ApplicationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String spaceName;

    private String applicationName;

    private ApplicationUpdate updateProperties;

    public ApplicationImpl withExistingSpace(String resourceGroupName, String spaceName) {
        this.resourceGroupName = resourceGroupName;
        this.spaceName = spaceName;
        return this;
    }

    public Application create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .createOrUpdateWithResponse(
                    resourceGroupName, spaceName, applicationName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Application create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .createOrUpdateWithResponse(resourceGroupName, spaceName, applicationName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ApplicationImpl(
        String name, com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerObject = new ApplicationInner();
        this.serviceManager = serviceManager;
        this.applicationName = name;
    }

    public ApplicationImpl update() {
        this.updateProperties = new ApplicationUpdate();
        return this;
    }

    public Application apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .patchWithResponse(resourceGroupName, spaceName, applicationName, updateProperties, Context.NONE)
                .getValue();
        return this;
    }

    public Application apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .patchWithResponse(resourceGroupName, spaceName, applicationName, updateProperties, context)
                .getValue();
        return this;
    }

    ApplicationImpl(
        ApplicationInner innerObject,
        com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.spaceName = Utils.getValueFromIdByName(innerObject.id(), "spaces");
        this.applicationName = Utils.getValueFromIdByName(innerObject.id(), "applications");
    }

    public Application refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .getWithResponse(resourceGroupName, spaceName, applicationName, Context.NONE)
                .getValue();
        return this;
    }

    public Application refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .getWithResponse(resourceGroupName, spaceName, applicationName, context)
                .getValue();
        return this;
    }

    public Response<Void> deleteBusinessProcessDevelopmentArtifactWithResponse(
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body, Context context) {
        return serviceManager
            .applications()
            .deleteBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, context);
    }

    public void deleteBusinessProcessDevelopmentArtifact(GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        serviceManager
            .applications()
            .deleteBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
    }

    public Response<SaveOrGetBusinessProcessDevelopmentArtifactResponse>
        getBusinessProcessDevelopmentArtifactWithResponse(
            GetOrDeleteBusinessProcessDevelopmentArtifactRequest body, Context context) {
        return serviceManager
            .applications()
            .getBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, context);
    }

    public SaveOrGetBusinessProcessDevelopmentArtifactResponse getBusinessProcessDevelopmentArtifact(
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        return serviceManager
            .applications()
            .getBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
    }

    public Response<ListBusinessProcessDevelopmentArtifactsResponse>
        listBusinessProcessDevelopmentArtifactsWithResponse(Context context) {
        return serviceManager
            .applications()
            .listBusinessProcessDevelopmentArtifactsWithResponse(
                resourceGroupName, spaceName, applicationName, context);
    }

    public ListBusinessProcessDevelopmentArtifactsResponse listBusinessProcessDevelopmentArtifacts() {
        return serviceManager
            .applications()
            .listBusinessProcessDevelopmentArtifacts(resourceGroupName, spaceName, applicationName);
    }

    public Response<SaveOrGetBusinessProcessDevelopmentArtifactResponse>
        saveBusinessProcessDevelopmentArtifactWithResponse(
            SaveOrValidateBusinessProcessDevelopmentArtifactRequest body, Context context) {
        return serviceManager
            .applications()
            .saveBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, context);
    }

    public SaveOrGetBusinessProcessDevelopmentArtifactResponse saveBusinessProcessDevelopmentArtifact(
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        return serviceManager
            .applications()
            .saveBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
    }

    public Response<Void> validateBusinessProcessDevelopmentArtifactWithResponse(
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body, Context context) {
        return serviceManager
            .applications()
            .validateBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, context);
    }

    public void validateBusinessProcessDevelopmentArtifact(
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        serviceManager
            .applications()
            .validateBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
    }

    public ApplicationImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ApplicationImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ApplicationImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public ApplicationImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateProperties.withDescription(description);
            return this;
        }
    }

    public ApplicationImpl withTrackingDataStores(Map<String, TrackingDataStore> trackingDataStores) {
        if (isInCreateMode()) {
            this.innerModel().withTrackingDataStores(trackingDataStores);
            return this;
        } else {
            this.updateProperties.withTrackingDataStores(trackingDataStores);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
