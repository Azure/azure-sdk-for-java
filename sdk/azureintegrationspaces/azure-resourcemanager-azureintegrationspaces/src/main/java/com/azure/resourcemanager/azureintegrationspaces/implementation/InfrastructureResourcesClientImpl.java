// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azureintegrationspaces.fluent.InfrastructureResourcesClient;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.InfrastructureResourceInner;
import com.azure.resourcemanager.azureintegrationspaces.models.InfrastructureResourceListResult;
import com.azure.resourcemanager.azureintegrationspaces.models.InfrastructureResourceUpdate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in InfrastructureResourcesClient. */
public final class InfrastructureResourcesClientImpl implements InfrastructureResourcesClient {
    /** The proxy service used to perform REST calls. */
    private final InfrastructureResourcesService service;

    /** The service client containing this operation class. */
    private final MicrosoftIntegrationSpacesImpl client;

    /**
     * Initializes an instance of InfrastructureResourcesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    InfrastructureResourcesClientImpl(MicrosoftIntegrationSpacesImpl client) {
        this.service =
            RestProxy
                .create(InfrastructureResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftIntegrationSpacesInfrastructureResources to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftIntegration")
    public interface InfrastructureResourcesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InfrastructureResourceListResult>> listBySpace(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("top") Integer top,
            @QueryParam("skip") Integer skip,
            @QueryParam("maxpagesize") Integer maxPageSize,
            @QueryParam("filter") String filter,
            @QueryParam(value = "select", multipleQueryParams = true) List<String> select,
            @QueryParam(value = "expand", multipleQueryParams = true) List<String> expand,
            @QueryParam(value = "orderby", multipleQueryParams = true) List<String> orderBy,
            @PathParam("spaceName") String spaceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InfrastructureResourceInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("infrastructureResourceName") String infrastructureResourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InfrastructureResourceInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("infrastructureResourceName") String infrastructureResourceName,
            @BodyParam("application/json") InfrastructureResourceInner resource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InfrastructureResourceInner>> patch(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("infrastructureResourceName") String infrastructureResourceName,
            @BodyParam("application/json") InfrastructureResourceUpdate properties,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("infrastructureResourceName") String infrastructureResourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InfrastructureResourceListResult>> listBySpaceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InfrastructureResourceInner>> listBySpaceSinglePageAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> selectConverted =
            (select == null)
                ? new ArrayList<>()
                : select.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> expandConverted =
            (expand == null)
                ? new ArrayList<>()
                : expand.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> orderByConverted =
            (orderBy == null)
                ? new ArrayList<>()
                : orderBy.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listBySpace(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            top,
                            skip,
                            maxPageSize,
                            filter,
                            selectConverted,
                            expandConverted,
                            orderByConverted,
                            spaceName,
                            accept,
                            context))
            .<PagedResponse<InfrastructureResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InfrastructureResourceInner>> listBySpaceSinglePageAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> selectConverted =
            (select == null)
                ? new ArrayList<>()
                : select.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> expandConverted =
            (expand == null)
                ? new ArrayList<>()
                : expand.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> orderByConverted =
            (orderBy == null)
                ? new ArrayList<>()
                : orderBy.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        context = this.client.mergeContext(context);
        return service
            .listBySpace(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                top,
                skip,
                maxPageSize,
                filter,
                selectConverted,
                expandConverted,
                orderByConverted,
                spaceName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InfrastructureResourceInner> listBySpaceAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy) {
        return new PagedFlux<>(
            () ->
                listBySpaceSinglePageAsync(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy),
            nextLink -> listBySpaceNextSinglePageAsync(nextLink));
    }

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InfrastructureResourceInner> listBySpaceAsync(String resourceGroupName, String spaceName) {
        final Integer top = null;
        final Integer skip = null;
        final Integer maxPageSize = null;
        final String filter = null;
        final List<String> select = null;
        final List<String> expand = null;
        final List<String> orderBy = null;
        return new PagedFlux<>(
            () ->
                listBySpaceSinglePageAsync(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy),
            nextLink -> listBySpaceNextSinglePageAsync(nextLink));
    }

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InfrastructureResourceInner> listBySpaceAsync(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        return new PagedFlux<>(
            () ->
                listBySpaceSinglePageAsync(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy, context),
            nextLink -> listBySpaceNextSinglePageAsync(nextLink, context));
    }

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InfrastructureResourceInner> listBySpace(String resourceGroupName, String spaceName) {
        final Integer top = null;
        final Integer skip = null;
        final Integer maxPageSize = null;
        final String filter = null;
        final List<String> select = null;
        final List<String> expand = null;
        final List<String> orderBy = null;
        return new PagedIterable<>(
            listBySpaceAsync(resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy));
    }

    /**
     * List InfrastructureResource resources by Space.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InfrastructureResourceInner> listBySpace(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        return new PagedIterable<>(
            listBySpaceAsync(
                resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy, context));
    }

    /**
     * Get a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InfrastructureResourceInner>> getWithResponseAsync(
        String resourceGroupName, String spaceName, String infrastructureResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            infrastructureResourceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InfrastructureResourceInner>> getWithResponseAsync(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                infrastructureResourceName,
                accept,
                context);
    }

    /**
     * Get a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InfrastructureResourceInner> getAsync(
        String resourceGroupName, String spaceName, String infrastructureResourceName) {
        return getWithResponseAsync(resourceGroupName, spaceName, infrastructureResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InfrastructureResourceInner> getWithResponse(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context) {
        return getWithResponseAsync(resourceGroupName, spaceName, infrastructureResourceName, context).block();
    }

    /**
     * Get a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InfrastructureResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InfrastructureResourceInner get(
        String resourceGroupName, String spaceName, String infrastructureResourceName) {
        return getWithResponse(resourceGroupName, spaceName, infrastructureResourceName, Context.NONE).getValue();
    }

    /**
     * Create a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InfrastructureResourceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            infrastructureResourceName,
                            resource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InfrastructureResourceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                infrastructureResourceName,
                resource,
                accept,
                context);
    }

    /**
     * Create a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InfrastructureResourceInner> createOrUpdateAsync(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, spaceName, infrastructureResourceName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InfrastructureResourceInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceInner resource,
        Context context) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, spaceName, infrastructureResourceName, resource, context)
            .block();
    }

    /**
     * Create a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InfrastructureResourceInner createOrUpdate(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceInner resource) {
        return createOrUpdateWithResponse(
                resourceGroupName, spaceName, infrastructureResourceName, resource, Context.NONE)
            .getValue();
    }

    /**
     * Update a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InfrastructureResourceInner>> patchWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patch(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            infrastructureResourceName,
                            properties,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InfrastructureResourceInner>> patchWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceUpdate properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .patch(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                infrastructureResourceName,
                properties,
                accept,
                context);
    }

    /**
     * Update a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InfrastructureResourceInner> patchAsync(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceUpdate properties) {
        return patchWithResponseAsync(resourceGroupName, spaceName, infrastructureResourceName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InfrastructureResourceInner> patchWithResponse(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceUpdate properties,
        Context context) {
        return patchWithResponseAsync(resourceGroupName, spaceName, infrastructureResourceName, properties, context)
            .block();
    }

    /**
     * Update a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an infrastructure resource under Space.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InfrastructureResourceInner patch(
        String resourceGroupName,
        String spaceName,
        String infrastructureResourceName,
        InfrastructureResourceUpdate properties) {
        return patchWithResponse(resourceGroupName, spaceName, infrastructureResourceName, properties, Context.NONE)
            .getValue();
    }

    /**
     * Delete a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String spaceName, String infrastructureResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            infrastructureResourceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (infrastructureResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter infrastructureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                infrastructureResourceName,
                accept,
                context);
    }

    /**
     * Delete a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String spaceName, String infrastructureResourceName) {
        return deleteWithResponseAsync(resourceGroupName, spaceName, infrastructureResourceName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String spaceName, String infrastructureResourceName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, spaceName, infrastructureResourceName, context).block();
    }

    /**
     * Delete a InfrastructureResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param infrastructureResourceName The name of the infrastructure resource in the space.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String spaceName, String infrastructureResourceName) {
        deleteWithResponse(resourceGroupName, spaceName, infrastructureResourceName, Context.NONE);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InfrastructureResourceInner>> listBySpaceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySpaceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<InfrastructureResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InfrastructureResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InfrastructureResourceInner>> listBySpaceNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySpaceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
