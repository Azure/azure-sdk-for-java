// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azureintegrationspaces.fluent.ApplicationResourcesClient;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.ApplicationResourceInner;
import com.azure.resourcemanager.azureintegrationspaces.models.ApplicationResourceListResult;
import com.azure.resourcemanager.azureintegrationspaces.models.ApplicationResourceUpdate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ApplicationResourcesClient. */
public final class ApplicationResourcesClientImpl implements ApplicationResourcesClient {
    /** The proxy service used to perform REST calls. */
    private final ApplicationResourcesService service;

    /** The service client containing this operation class. */
    private final MicrosoftIntegrationSpacesImpl client;

    /**
     * Initializes an instance of ApplicationResourcesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ApplicationResourcesClientImpl(MicrosoftIntegrationSpacesImpl client) {
        this.service =
            RestProxy
                .create(ApplicationResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftIntegrationSpacesApplicationResources to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftIntegration")
    public interface ApplicationResourcesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/resources")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationResourceListResult>> listByApplication(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("top") Integer top,
            @QueryParam("skip") Integer skip,
            @QueryParam("maxpagesize") Integer maxPageSize,
            @QueryParam("filter") String filter,
            @QueryParam(value = "select", multipleQueryParams = true) List<String> select,
            @QueryParam(value = "expand", multipleQueryParams = true) List<String> expand,
            @QueryParam(value = "orderby", multipleQueryParams = true) List<String> orderBy,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/resources/{resourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationResourceInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @PathParam("resourceName") String resourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/resources/{resourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationResourceInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @PathParam("resourceName") String resourceName,
            @BodyParam("application/json") ApplicationResourceInner resource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/resources/{resourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationResourceInner>> patch(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @PathParam("resourceName") String resourceName,
            @BodyParam("application/json") ApplicationResourceUpdate properties,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/resources/{resourceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("spaceName") String spaceName,
            @PathParam("applicationName") String applicationName,
            @PathParam("resourceName") String resourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationResourceListResult>> listByApplicationNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List ApplicationResource resources by Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationResourceInner>> listByApplicationSinglePageAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> selectConverted =
            (select == null)
                ? new ArrayList<>()
                : select.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> expandConverted =
            (expand == null)
                ? new ArrayList<>()
                : expand.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> orderByConverted =
            (orderBy == null)
                ? new ArrayList<>()
                : orderBy.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByApplication(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            top,
                            skip,
                            maxPageSize,
                            filter,
                            selectConverted,
                            expandConverted,
                            orderByConverted,
                            spaceName,
                            applicationName,
                            accept,
                            context))
            .<PagedResponse<ApplicationResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List ApplicationResource resources by Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationResourceInner>> listByApplicationSinglePageAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> selectConverted =
            (select == null)
                ? new ArrayList<>()
                : select.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> expandConverted =
            (expand == null)
                ? new ArrayList<>()
                : expand.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> orderByConverted =
            (orderBy == null)
                ? new ArrayList<>()
                : orderBy.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        context = this.client.mergeContext(context);
        return service
            .listByApplication(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                top,
                skip,
                maxPageSize,
                filter,
                selectConverted,
                expandConverted,
                orderByConverted,
                spaceName,
                applicationName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List ApplicationResource resources by Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationResourceInner> listByApplicationAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy) {
        return new PagedFlux<>(
            () ->
                listByApplicationSinglePageAsync(
                    resourceGroupName,
                    spaceName,
                    applicationName,
                    top,
                    skip,
                    maxPageSize,
                    filter,
                    select,
                    expand,
                    orderBy),
            nextLink -> listByApplicationNextSinglePageAsync(nextLink));
    }

    /**
     * List ApplicationResource resources by Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationResourceInner> listByApplicationAsync(
        String resourceGroupName, String spaceName, String applicationName) {
        final Integer top = null;
        final Integer skip = null;
        final Integer maxPageSize = null;
        final String filter = null;
        final List<String> select = null;
        final List<String> expand = null;
        final List<String> orderBy = null;
        return new PagedFlux<>(
            () ->
                listByApplicationSinglePageAsync(
                    resourceGroupName,
                    spaceName,
                    applicationName,
                    top,
                    skip,
                    maxPageSize,
                    filter,
                    select,
                    expand,
                    orderBy),
            nextLink -> listByApplicationNextSinglePageAsync(nextLink));
    }

    /**
     * List ApplicationResource resources by Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationResourceInner> listByApplicationAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        return new PagedFlux<>(
            () ->
                listByApplicationSinglePageAsync(
                    resourceGroupName,
                    spaceName,
                    applicationName,
                    top,
                    skip,
                    maxPageSize,
                    filter,
                    select,
                    expand,
                    orderBy,
                    context),
            nextLink -> listByApplicationNextSinglePageAsync(nextLink, context));
    }

    /**
     * List ApplicationResource resources by Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationResourceInner> listByApplication(
        String resourceGroupName, String spaceName, String applicationName) {
        final Integer top = null;
        final Integer skip = null;
        final Integer maxPageSize = null;
        final String filter = null;
        final List<String> select = null;
        final List<String> expand = null;
        final List<String> orderBy = null;
        return new PagedIterable<>(
            listByApplicationAsync(
                resourceGroupName,
                spaceName,
                applicationName,
                top,
                skip,
                maxPageSize,
                filter,
                select,
                expand,
                orderBy));
    }

    /**
     * List ApplicationResource resources by Application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @param orderBy Expressions that specify the order of returned results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationResourceInner> listByApplication(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        return new PagedIterable<>(
            listByApplicationAsync(
                resourceGroupName,
                spaceName,
                applicationName,
                top,
                skip,
                maxPageSize,
                filter,
                select,
                expand,
                orderBy,
                context));
    }

    /**
     * Get a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApplicationResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationResourceInner>> getWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            resourceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApplicationResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationResourceInner>> getWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                resourceName,
                accept,
                context);
    }

    /**
     * Get a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApplicationResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationResourceInner> getAsync(
        String resourceGroupName, String spaceName, String applicationName, String resourceName) {
        return getWithResponseAsync(resourceGroupName, spaceName, applicationName, resourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApplicationResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationResourceInner> getWithResponse(
        String resourceGroupName, String spaceName, String applicationName, String resourceName, Context context) {
        return getWithResponseAsync(resourceGroupName, spaceName, applicationName, resourceName, context).block();
    }

    /**
     * Get a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApplicationResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationResourceInner get(
        String resourceGroupName, String spaceName, String applicationName, String resourceName) {
        return getWithResponse(resourceGroupName, spaceName, applicationName, resourceName, Context.NONE).getValue();
    }

    /**
     * Create a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationResourceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            resourceName,
                            resource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationResourceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                resourceName,
                resource,
                accept,
                context);
    }

    /**
     * Create a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationResourceInner> createOrUpdateAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, spaceName, applicationName, resourceName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationResourceInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceInner resource,
        Context context) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, spaceName, applicationName, resourceName, resource, context)
            .block();
    }

    /**
     * Create a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationResourceInner createOrUpdate(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceInner resource) {
        return createOrUpdateWithResponse(
                resourceGroupName, spaceName, applicationName, resourceName, resource, Context.NONE)
            .getValue();
    }

    /**
     * Update a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationResourceInner>> patchWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patch(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            resourceName,
                            properties,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationResourceInner>> patchWithResponseAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceUpdate properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .patch(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                resourceName,
                properties,
                accept,
                context);
    }

    /**
     * Update a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationResourceInner> patchAsync(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceUpdate properties) {
        return patchWithResponseAsync(resourceGroupName, spaceName, applicationName, resourceName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationResourceInner> patchWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceUpdate properties,
        Context context) {
        return patchWithResponseAsync(resourceGroupName, spaceName, applicationName, resourceName, properties, context)
            .block();
    }

    /**
     * Update a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource under application.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationResourceInner patch(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        String resourceName,
        ApplicationResourceUpdate properties) {
        return patchWithResponse(resourceGroupName, spaceName, applicationName, resourceName, properties, Context.NONE)
            .getValue();
    }

    /**
     * Delete a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            spaceName,
                            applicationName,
                            resourceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String spaceName, String applicationName, String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (spaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter spaceName is required and cannot be null."));
        }
        if (applicationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                spaceName,
                applicationName,
                resourceName,
                accept,
                context);
    }

    /**
     * Delete a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String spaceName, String applicationName, String resourceName) {
        return deleteWithResponseAsync(resourceGroupName, spaceName, applicationName, resourceName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String spaceName, String applicationName, String resourceName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, spaceName, applicationName, resourceName, context).block();
    }

    /**
     * Delete a ApplicationResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spaceName The name of the space.
     * @param applicationName The name of the Application.
     * @param resourceName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String spaceName, String applicationName, String resourceName) {
        deleteWithResponse(resourceGroupName, spaceName, applicationName, resourceName, Context.NONE);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationResourceInner>> listByApplicationNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByApplicationNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ApplicationResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApplicationResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationResourceInner>> listByApplicationNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByApplicationNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
