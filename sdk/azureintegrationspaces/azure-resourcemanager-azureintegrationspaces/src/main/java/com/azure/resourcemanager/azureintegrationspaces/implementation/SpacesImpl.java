// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azureintegrationspaces.fluent.SpacesClient;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.SpaceInner;
import com.azure.resourcemanager.azureintegrationspaces.models.Space;
import com.azure.resourcemanager.azureintegrationspaces.models.Spaces;
import java.util.List;

public final class SpacesImpl implements Spaces {
    private static final ClientLogger LOGGER = new ClientLogger(SpacesImpl.class);

    private final SpacesClient innerClient;

    private final com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager;

    public SpacesImpl(
        SpacesClient innerClient,
        com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Space> list() {
        PagedIterable<SpaceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new SpaceImpl(inner1, this.manager()));
    }

    public PagedIterable<Space> list(Context context) {
        PagedIterable<SpaceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new SpaceImpl(inner1, this.manager()));
    }

    public PagedIterable<Space> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SpaceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new SpaceImpl(inner1, this.manager()));
    }

    public PagedIterable<Space> listByResourceGroup(
        String resourceGroupName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        PagedIterable<SpaceInner> inner =
            this
                .serviceClient()
                .listByResourceGroup(
                    resourceGroupName, top, skip, maxPageSize, filter, select, expand, orderBy, context);
        return Utils.mapPage(inner, inner1 -> new SpaceImpl(inner1, this.manager()));
    }

    public Response<Space> getByResourceGroupWithResponse(String resourceGroupName, String spaceName, Context context) {
        Response<SpaceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, spaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SpaceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Space getByResourceGroup(String resourceGroupName, String spaceName) {
        SpaceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, spaceName);
        if (inner != null) {
            return new SpaceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String spaceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, spaceName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String spaceName) {
        this.serviceClient().delete(resourceGroupName, spaceName);
    }

    public Space getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, spaceName, Context.NONE).getValue();
    }

    public Response<Space> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, spaceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, spaceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, spaceName, context);
    }

    private SpacesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager manager() {
        return this.serviceManager;
    }

    public SpaceImpl define(String name) {
        return new SpaceImpl(name, this.manager());
    }
}
