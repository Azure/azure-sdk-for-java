// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties of tracking data store. */
@Fluent
public final class TrackingDataStore {
    /*
     * The database name.
     */
    @JsonProperty(value = "databaseName", required = true)
    private String databaseName;

    /*
     * The data store resource id.
     */
    @JsonProperty(value = "dataStoreResourceId", required = true)
    private String dataStoreResourceId;

    /*
     * The data store URI.
     */
    @JsonProperty(value = "dataStoreUri", required = true)
    private String dataStoreUri;

    /*
     * The data store ingestion URI.
     */
    @JsonProperty(value = "dataStoreIngestionUri", required = true)
    private String dataStoreIngestionUri;

    /** Creates an instance of TrackingDataStore class. */
    public TrackingDataStore() {
    }

    /**
     * Get the databaseName property: The database name.
     *
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The database name.
     *
     * @param databaseName the databaseName value to set.
     * @return the TrackingDataStore object itself.
     */
    public TrackingDataStore withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the dataStoreResourceId property: The data store resource id.
     *
     * @return the dataStoreResourceId value.
     */
    public String dataStoreResourceId() {
        return this.dataStoreResourceId;
    }

    /**
     * Set the dataStoreResourceId property: The data store resource id.
     *
     * @param dataStoreResourceId the dataStoreResourceId value to set.
     * @return the TrackingDataStore object itself.
     */
    public TrackingDataStore withDataStoreResourceId(String dataStoreResourceId) {
        this.dataStoreResourceId = dataStoreResourceId;
        return this;
    }

    /**
     * Get the dataStoreUri property: The data store URI.
     *
     * @return the dataStoreUri value.
     */
    public String dataStoreUri() {
        return this.dataStoreUri;
    }

    /**
     * Set the dataStoreUri property: The data store URI.
     *
     * @param dataStoreUri the dataStoreUri value to set.
     * @return the TrackingDataStore object itself.
     */
    public TrackingDataStore withDataStoreUri(String dataStoreUri) {
        this.dataStoreUri = dataStoreUri;
        return this;
    }

    /**
     * Get the dataStoreIngestionUri property: The data store ingestion URI.
     *
     * @return the dataStoreIngestionUri value.
     */
    public String dataStoreIngestionUri() {
        return this.dataStoreIngestionUri;
    }

    /**
     * Set the dataStoreIngestionUri property: The data store ingestion URI.
     *
     * @param dataStoreIngestionUri the dataStoreIngestionUri value to set.
     * @return the TrackingDataStore object itself.
     */
    public TrackingDataStore withDataStoreIngestionUri(String dataStoreIngestionUri) {
        this.dataStoreIngestionUri = dataStoreIngestionUri;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databaseName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property databaseName in model TrackingDataStore"));
        }
        if (dataStoreResourceId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataStoreResourceId in model TrackingDataStore"));
        }
        if (dataStoreUri() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property dataStoreUri in model TrackingDataStore"));
        }
        if (dataStoreIngestionUri() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataStoreIngestionUri in model TrackingDataStore"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrackingDataStore.class);
}
