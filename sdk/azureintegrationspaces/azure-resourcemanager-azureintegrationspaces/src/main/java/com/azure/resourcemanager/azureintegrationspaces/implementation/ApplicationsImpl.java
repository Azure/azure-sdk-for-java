// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureintegrationspaces.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azureintegrationspaces.fluent.ApplicationsClient;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.ApplicationInner;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.ListBusinessProcessDevelopmentArtifactsResponseInner;
import com.azure.resourcemanager.azureintegrationspaces.fluent.models.SaveOrGetBusinessProcessDevelopmentArtifactResponseInner;
import com.azure.resourcemanager.azureintegrationspaces.models.Application;
import com.azure.resourcemanager.azureintegrationspaces.models.Applications;
import com.azure.resourcemanager.azureintegrationspaces.models.GetOrDeleteBusinessProcessDevelopmentArtifactRequest;
import com.azure.resourcemanager.azureintegrationspaces.models.ListBusinessProcessDevelopmentArtifactsResponse;
import com.azure.resourcemanager.azureintegrationspaces.models.SaveOrGetBusinessProcessDevelopmentArtifactResponse;
import com.azure.resourcemanager.azureintegrationspaces.models.SaveOrValidateBusinessProcessDevelopmentArtifactRequest;
import java.util.List;

public final class ApplicationsImpl implements Applications {
    private static final ClientLogger LOGGER = new ClientLogger(ApplicationsImpl.class);

    private final ApplicationsClient innerClient;

    private final com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager;

    public ApplicationsImpl(
        ApplicationsClient innerClient,
        com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Application> listBySpace(String resourceGroupName, String spaceName) {
        PagedIterable<ApplicationInner> inner = this.serviceClient().listBySpace(resourceGroupName, spaceName);
        return Utils.mapPage(inner, inner1 -> new ApplicationImpl(inner1, this.manager()));
    }

    public PagedIterable<Application> listBySpace(
        String resourceGroupName,
        String spaceName,
        Integer top,
        Integer skip,
        Integer maxPageSize,
        String filter,
        List<String> select,
        List<String> expand,
        List<String> orderBy,
        Context context) {
        PagedIterable<ApplicationInner> inner =
            this
                .serviceClient()
                .listBySpace(
                    resourceGroupName, spaceName, top, skip, maxPageSize, filter, select, expand, orderBy, context);
        return Utils.mapPage(inner, inner1 -> new ApplicationImpl(inner1, this.manager()));
    }

    public Response<Application> getWithResponse(
        String resourceGroupName, String spaceName, String applicationName, Context context) {
        Response<ApplicationInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, spaceName, applicationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Application get(String resourceGroupName, String spaceName, String applicationName) {
        ApplicationInner inner = this.serviceClient().get(resourceGroupName, spaceName, applicationName);
        if (inner != null) {
            return new ApplicationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String spaceName, String applicationName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, spaceName, applicationName, context);
    }

    public void delete(String resourceGroupName, String spaceName, String applicationName) {
        this.serviceClient().delete(resourceGroupName, spaceName, applicationName);
    }

    public Response<Void> deleteBusinessProcessDevelopmentArtifactWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
        Context context) {
        return this
            .serviceClient()
            .deleteBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, context);
    }

    public void deleteBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        this
            .serviceClient()
            .deleteBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
    }

    public Response<SaveOrGetBusinessProcessDevelopmentArtifactResponse>
        getBusinessProcessDevelopmentArtifactWithResponse(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            GetOrDeleteBusinessProcessDevelopmentArtifactRequest body,
            Context context) {
        Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner> inner =
            this
                .serviceClient()
                .getBusinessProcessDevelopmentArtifactWithResponse(
                    resourceGroupName, spaceName, applicationName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SaveOrGetBusinessProcessDevelopmentArtifactResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SaveOrGetBusinessProcessDevelopmentArtifactResponse getBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        GetOrDeleteBusinessProcessDevelopmentArtifactRequest body) {
        SaveOrGetBusinessProcessDevelopmentArtifactResponseInner inner =
            this
                .serviceClient()
                .getBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
        if (inner != null) {
            return new SaveOrGetBusinessProcessDevelopmentArtifactResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ListBusinessProcessDevelopmentArtifactsResponse>
        listBusinessProcessDevelopmentArtifactsWithResponse(
            String resourceGroupName, String spaceName, String applicationName, Context context) {
        Response<ListBusinessProcessDevelopmentArtifactsResponseInner> inner =
            this
                .serviceClient()
                .listBusinessProcessDevelopmentArtifactsWithResponse(
                    resourceGroupName, spaceName, applicationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ListBusinessProcessDevelopmentArtifactsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListBusinessProcessDevelopmentArtifactsResponse listBusinessProcessDevelopmentArtifacts(
        String resourceGroupName, String spaceName, String applicationName) {
        ListBusinessProcessDevelopmentArtifactsResponseInner inner =
            this.serviceClient().listBusinessProcessDevelopmentArtifacts(resourceGroupName, spaceName, applicationName);
        if (inner != null) {
            return new ListBusinessProcessDevelopmentArtifactsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SaveOrGetBusinessProcessDevelopmentArtifactResponse>
        saveBusinessProcessDevelopmentArtifactWithResponse(
            String resourceGroupName,
            String spaceName,
            String applicationName,
            SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
            Context context) {
        Response<SaveOrGetBusinessProcessDevelopmentArtifactResponseInner> inner =
            this
                .serviceClient()
                .saveBusinessProcessDevelopmentArtifactWithResponse(
                    resourceGroupName, spaceName, applicationName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SaveOrGetBusinessProcessDevelopmentArtifactResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SaveOrGetBusinessProcessDevelopmentArtifactResponse saveBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        SaveOrGetBusinessProcessDevelopmentArtifactResponseInner inner =
            this
                .serviceClient()
                .saveBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
        if (inner != null) {
            return new SaveOrGetBusinessProcessDevelopmentArtifactResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> validateBusinessProcessDevelopmentArtifactWithResponse(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body,
        Context context) {
        return this
            .serviceClient()
            .validateBusinessProcessDevelopmentArtifactWithResponse(
                resourceGroupName, spaceName, applicationName, body, context);
    }

    public void validateBusinessProcessDevelopmentArtifact(
        String resourceGroupName,
        String spaceName,
        String applicationName,
        SaveOrValidateBusinessProcessDevelopmentArtifactRequest body) {
        this
            .serviceClient()
            .validateBusinessProcessDevelopmentArtifact(resourceGroupName, spaceName, applicationName, body);
    }

    public Application getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        return this.getWithResponse(resourceGroupName, spaceName, applicationName, Context.NONE).getValue();
    }

    public Response<Application> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        return this.getWithResponse(resourceGroupName, spaceName, applicationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, spaceName, applicationName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String spaceName = Utils.getValueFromIdByName(id, "spaces");
        if (spaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "applications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'applications'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, spaceName, applicationName, context);
    }

    private ApplicationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azureintegrationspaces.AzureintegrationspacesManager manager() {
        return this.serviceManager;
    }

    public ApplicationImpl define(String name) {
        return new ApplicationImpl(name, this.manager());
    }
}
