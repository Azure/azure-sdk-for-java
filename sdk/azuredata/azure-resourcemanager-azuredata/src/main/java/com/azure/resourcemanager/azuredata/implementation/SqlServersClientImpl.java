// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredata.fluent.SqlServersClient;
import com.azure.resourcemanager.azuredata.fluent.models.SqlServerInner;
import com.azure.resourcemanager.azuredata.models.SqlServerListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SqlServersClient. */
public final class SqlServersClientImpl implements SqlServersClient {
    private final ClientLogger logger = new ClientLogger(SqlServersClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SqlServersService service;

    /** The service client containing this operation class. */
    private final AzureDataManagementClientImpl client;

    /**
     * Initializes an instance of SqlServersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlServersClientImpl(AzureDataManagementClientImpl client) {
        this.service =
            RestProxy.create(SqlServersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureDataManagementClientSqlServers to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureDataManagementC")
    private interface SqlServersService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData"
                + "/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers/{sqlServerName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerRegistrationName") String sqlServerRegistrationName,
            @PathParam("sqlServerName") String sqlServerName,
            @QueryParam("$expand") String expand,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData"
                + "/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers/{sqlServerName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerRegistrationName") String sqlServerRegistrationName,
            @PathParam("sqlServerName") String sqlServerName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlServerInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData"
                + "/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers/{sqlServerName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerRegistrationName") String sqlServerRegistrationName,
            @PathParam("sqlServerName") String sqlServerName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData"
                + "/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerListResult>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerRegistrationName") String sqlServerRegistrationName,
            @QueryParam("$expand") String expand,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerInner>> getWithResponseAsync(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (sqlServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sqlServerName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlServerRegistrationName,
                            sqlServerName,
                            expand,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerInner>> getWithResponseAsync(
        String resourceGroupName,
        String sqlServerRegistrationName,
        String sqlServerName,
        String expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (sqlServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sqlServerName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlServerRegistrationName,
                sqlServerName,
                expand,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerInner> getAsync(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, String expand) {
        return getWithResponseAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand)
            .flatMap(
                (Response<SqlServerInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerInner> getAsync(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName) {
        final String expand = null;
        return getWithResponseAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand)
            .flatMap(
                (Response<SqlServerInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerInner get(String resourceGroupName, String sqlServerRegistrationName, String sqlServerName) {
        final String expand = null;
        return getAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand).block();
    }

    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerInner> getWithResponse(
        String resourceGroupName,
        String sqlServerRegistrationName,
        String sqlServerName,
        String expand,
        Context context) {
        return getWithResponseAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand, context)
            .block();
    }

    /**
     * Creates or updates a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param parameters The SQL Server to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, SqlServerInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (sqlServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sqlServerName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlServerRegistrationName,
                            sqlServerName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param parameters The SQL Server to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String sqlServerRegistrationName,
        String sqlServerName,
        SqlServerInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (sqlServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sqlServerName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlServerRegistrationName,
                sqlServerName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param parameters The SQL Server to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerInner> createOrUpdateAsync(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, SqlServerInner parameters) {
        return createOrUpdateWithResponseAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, parameters)
            .flatMap(
                (Response<SqlServerInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates or updates a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param parameters The SQL Server to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerInner createOrUpdate(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, SqlServerInner parameters) {
        return createOrUpdateAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, parameters).block();
    }

    /**
     * Creates or updates a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param parameters The SQL Server to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String sqlServerRegistrationName,
        String sqlServerName,
        SqlServerInner parameters,
        Context context) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, sqlServerRegistrationName, sqlServerName, parameters, context)
            .block();
    }

    /**
     * Deletes a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (sqlServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sqlServerName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlServerRegistrationName,
                            sqlServerName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (sqlServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sqlServerName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlServerRegistrationName,
                sqlServerName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sqlServerRegistrationName, String sqlServerName) {
        return deleteWithResponseAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlServerRegistrationName, String sqlServerName) {
        deleteAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName).block();
    }

    /**
     * Deletes a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, context).block();
    }

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String sqlServerRegistrationName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlServerRegistrationName,
                            expand,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<SqlServerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String sqlServerRegistrationName, String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerRegistrationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerRegistrationName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlServerRegistrationName,
                expand,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlServerInner> listByResourceGroupAsync(
        String resourceGroupName, String sqlServerRegistrationName, String expand) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, sqlServerRegistrationName, expand),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlServerInner> listByResourceGroupAsync(
        String resourceGroupName, String sqlServerRegistrationName) {
        final String expand = null;
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, sqlServerRegistrationName, expand),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlServerInner> listByResourceGroupAsync(
        String resourceGroupName, String sqlServerRegistrationName, String expand, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, sqlServerRegistrationName, expand, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlServerInner> listByResourceGroup(
        String resourceGroupName, String sqlServerRegistrationName) {
        final String expand = null;
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, sqlServerRegistrationName, expand));
    }

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlServerInner> listByResourceGroup(
        String resourceGroupName, String sqlServerRegistrationName, String expand, Context context) {
        return new PagedIterable<>(
            listByResourceGroupAsync(resourceGroupName, sqlServerRegistrationName, expand, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL servers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SqlServerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL servers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
