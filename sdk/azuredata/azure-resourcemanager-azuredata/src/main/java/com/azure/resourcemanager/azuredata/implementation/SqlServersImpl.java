// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredata.fluent.SqlServersClient;
import com.azure.resourcemanager.azuredata.fluent.models.SqlServerInner;
import com.azure.resourcemanager.azuredata.models.SqlServer;
import com.azure.resourcemanager.azuredata.models.SqlServers;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SqlServersImpl implements SqlServers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SqlServersImpl.class);

    private final SqlServersClient innerClient;

    private final com.azure.resourcemanager.azuredata.AzureDataManager serviceManager;

    public SqlServersImpl(
        SqlServersClient innerClient, com.azure.resourcemanager.azuredata.AzureDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public SqlServer get(String resourceGroupName, String sqlServerRegistrationName, String sqlServerName) {
        SqlServerInner inner = this.serviceClient().get(resourceGroupName, sqlServerRegistrationName, sqlServerName);
        if (inner != null) {
            return new SqlServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlServer> getWithResponse(
        String resourceGroupName,
        String sqlServerRegistrationName,
        String sqlServerName,
        String expand,
        Context context) {
        Response<SqlServerInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlServerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String sqlServerRegistrationName, String sqlServerName) {
        this.serviceClient().delete(resourceGroupName, sqlServerRegistrationName, sqlServerName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, context);
    }

    public PagedIterable<SqlServer> listByResourceGroup(String resourceGroupName, String sqlServerRegistrationName) {
        PagedIterable<SqlServerInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, sqlServerRegistrationName);
        return Utils.mapPage(inner, inner1 -> new SqlServerImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlServer> listByResourceGroup(
        String resourceGroupName, String sqlServerRegistrationName, String expand, Context context) {
        PagedIterable<SqlServerInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, sqlServerRegistrationName, expand, context);
        return Utils.mapPage(inner, inner1 -> new SqlServerImpl(inner1, this.manager()));
    }

    public SqlServer getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerRegistrationName = Utils.getValueFromIdByName(id, "sqlServerRegistrations");
        if (sqlServerRegistrationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerRegistrations'.",
                                id)));
        }
        String sqlServerName = Utils.getValueFromIdByName(id, "sqlServers");
        if (sqlServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServers'.", id)));
        }
        String localExpand = null;
        return this
            .getWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<SqlServer> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerRegistrationName = Utils.getValueFromIdByName(id, "sqlServerRegistrations");
        if (sqlServerRegistrationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerRegistrations'.",
                                id)));
        }
        String sqlServerName = Utils.getValueFromIdByName(id, "sqlServers");
        if (sqlServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerRegistrationName = Utils.getValueFromIdByName(id, "sqlServerRegistrations");
        if (sqlServerRegistrationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerRegistrations'.",
                                id)));
        }
        String sqlServerName = Utils.getValueFromIdByName(id, "sqlServers");
        if (sqlServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServers'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerRegistrationName = Utils.getValueFromIdByName(id, "sqlServerRegistrations");
        if (sqlServerRegistrationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerRegistrations'.",
                                id)));
        }
        String sqlServerName = Utils.getValueFromIdByName(id, "sqlServers");
        if (sqlServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServers'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, context);
    }

    private SqlServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuredata.AzureDataManager manager() {
        return this.serviceManager;
    }

    public SqlServerImpl define(String name) {
        return new SqlServerImpl(name, this.manager());
    }
}
