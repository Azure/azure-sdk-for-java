// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.azuredata.fluent.models.SqlServerInner;
import com.azure.resourcemanager.azuredata.models.SqlServer;

public final class SqlServerImpl implements SqlServer, SqlServer.Definition, SqlServer.Update {
    private SqlServerInner innerObject;

    private final com.azure.resourcemanager.azuredata.AzureDataManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Integer cores() {
        return this.innerModel().cores();
    }

    public String version() {
        return this.innerModel().version();
    }

    public String edition() {
        return this.innerModel().edition();
    }

    public String registrationId() {
        return this.innerModel().registrationId();
    }

    public String propertyBag() {
        return this.innerModel().propertyBag();
    }

    public SqlServerInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azuredata.AzureDataManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sqlServerRegistrationName;

    private String sqlServerName;

    public SqlServerImpl withExistingSqlServerRegistration(String resourceGroupName, String sqlServerRegistrationName) {
        this.resourceGroupName = resourceGroupName;
        this.sqlServerRegistrationName = sqlServerRegistrationName;
        return this;
    }

    public SqlServer create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlServers()
                .createOrUpdateWithResponse(
                    resourceGroupName, sqlServerRegistrationName, sqlServerName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public SqlServer create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlServers()
                .createOrUpdateWithResponse(
                    resourceGroupName, sqlServerRegistrationName, sqlServerName, this.innerModel(), context)
                .getValue();
        return this;
    }

    SqlServerImpl(String name, com.azure.resourcemanager.azuredata.AzureDataManager serviceManager) {
        this.innerObject = new SqlServerInner();
        this.serviceManager = serviceManager;
        this.sqlServerName = name;
    }

    public SqlServerImpl update() {
        return this;
    }

    public SqlServer apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlServers()
                .createOrUpdateWithResponse(
                    resourceGroupName, sqlServerRegistrationName, sqlServerName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public SqlServer apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlServers()
                .createOrUpdateWithResponse(
                    resourceGroupName, sqlServerRegistrationName, sqlServerName, this.innerModel(), context)
                .getValue();
        return this;
    }

    SqlServerImpl(SqlServerInner innerObject, com.azure.resourcemanager.azuredata.AzureDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sqlServerRegistrationName = Utils.getValueFromIdByName(innerObject.id(), "sqlServerRegistrations");
        this.sqlServerName = Utils.getValueFromIdByName(innerObject.id(), "sqlServers");
    }

    public SqlServer refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlServers()
                .getWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public SqlServer refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlServers()
                .getWithResponse(resourceGroupName, sqlServerRegistrationName, sqlServerName, localExpand, context)
                .getValue();
        return this;
    }

    public SqlServerImpl withVersion(String version) {
        this.innerModel().withVersion(version);
        return this;
    }

    public SqlServerImpl withEdition(String edition) {
        this.innerModel().withEdition(edition);
        return this;
    }

    public SqlServerImpl withRegistrationId(String registrationId) {
        this.innerModel().withRegistrationId(registrationId);
        return this;
    }

    public SqlServerImpl withPropertyBag(String propertyBag) {
        this.innerModel().withPropertyBag(propertyBag);
        return this;
    }

    public SqlServerImpl withCores(Integer cores) {
        this.innerModel().withCores(cores);
        return this;
    }
}
