// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** A SQL server registration. */
@Fluent
public final class SqlServerRegistrationInner extends Resource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties")
    private SqlServerRegistrationProperties innerProperties;

    /*
     * Read only system data
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private SqlServerRegistrationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public SqlServerRegistrationInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SqlServerRegistrationInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.innerProperties() == null ? null : this.innerProperties().subscriptionId();
    }

    /**
     * Set the subscriptionId property: Subscription Id.
     *
     * @param subscriptionId the subscriptionId value to set.
     * @return the SqlServerRegistrationInner object itself.
     */
    public SqlServerRegistrationInner withSubscriptionId(String subscriptionId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerRegistrationProperties();
        }
        this.innerProperties().withSubscriptionId(subscriptionId);
        return this;
    }

    /**
     * Get the resourceGroup property: Resource Group Name.
     *
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceGroup();
    }

    /**
     * Set the resourceGroup property: Resource Group Name.
     *
     * @param resourceGroup the resourceGroup value to set.
     * @return the SqlServerRegistrationInner object itself.
     */
    public SqlServerRegistrationInner withResourceGroup(String resourceGroup) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerRegistrationProperties();
        }
        this.innerProperties().withResourceGroup(resourceGroup);
        return this;
    }

    /**
     * Get the propertyBag property: Optional Properties as JSON string.
     *
     * @return the propertyBag value.
     */
    public String propertyBag() {
        return this.innerProperties() == null ? null : this.innerProperties().propertyBag();
    }

    /**
     * Set the propertyBag property: Optional Properties as JSON string.
     *
     * @param propertyBag the propertyBag value to set.
     * @return the SqlServerRegistrationInner object itself.
     */
    public SqlServerRegistrationInner withPropertyBag(String propertyBag) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerRegistrationProperties();
        }
        this.innerProperties().withPropertyBag(propertyBag);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
