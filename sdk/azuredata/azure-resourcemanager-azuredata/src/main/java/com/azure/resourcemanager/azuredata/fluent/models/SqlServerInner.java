// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A SQL server. */
@Fluent
public final class SqlServerInner extends ProxyResource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties")
    private SqlServerProperties innerProperties;

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private SqlServerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the cores property: Cores of the Sql Server.
     *
     * @return the cores value.
     */
    public Integer cores() {
        return this.innerProperties() == null ? null : this.innerProperties().cores();
    }

    /**
     * Set the cores property: Cores of the Sql Server.
     *
     * @param cores the cores value to set.
     * @return the SqlServerInner object itself.
     */
    public SqlServerInner withCores(Integer cores) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerProperties();
        }
        this.innerProperties().withCores(cores);
        return this;
    }

    /**
     * Get the version property: Version of the Sql Server.
     *
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Version of the Sql Server.
     *
     * @param version the version value to set.
     * @return the SqlServerInner object itself.
     */
    public SqlServerInner withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the edition property: Sql Server Edition.
     *
     * @return the edition value.
     */
    public String edition() {
        return this.innerProperties() == null ? null : this.innerProperties().edition();
    }

    /**
     * Set the edition property: Sql Server Edition.
     *
     * @param edition the edition value to set.
     * @return the SqlServerInner object itself.
     */
    public SqlServerInner withEdition(String edition) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerProperties();
        }
        this.innerProperties().withEdition(edition);
        return this;
    }

    /**
     * Get the registrationId property: ID for Parent Sql Server Registration.
     *
     * @return the registrationId value.
     */
    public String registrationId() {
        return this.innerProperties() == null ? null : this.innerProperties().registrationId();
    }

    /**
     * Set the registrationId property: ID for Parent Sql Server Registration.
     *
     * @param registrationId the registrationId value to set.
     * @return the SqlServerInner object itself.
     */
    public SqlServerInner withRegistrationId(String registrationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerProperties();
        }
        this.innerProperties().withRegistrationId(registrationId);
        return this;
    }

    /**
     * Get the propertyBag property: Sql Server Json Property Bag.
     *
     * @return the propertyBag value.
     */
    public String propertyBag() {
        return this.innerProperties() == null ? null : this.innerProperties().propertyBag();
    }

    /**
     * Set the propertyBag property: Sql Server Json Property Bag.
     *
     * @param propertyBag the propertyBag value to set.
     * @return the SqlServerInner object itself.
     */
    public SqlServerInner withPropertyBag(String propertyBag) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlServerProperties();
        }
        this.innerProperties().withPropertyBag(propertyBag);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
