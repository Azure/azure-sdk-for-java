// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azuredata.fluent.models.SqlServerInner;

/** An instance of this class provides access to all the operations defined in SqlServersClient. */
public interface SqlServersClient {
    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInner get(String resourceGroupName, String sqlServerRegistrationName, String sqlServerName);

    /**
     * Gets a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerInner> getWithResponse(
        String resourceGroupName,
        String sqlServerRegistrationName,
        String sqlServerName,
        String expand,
        Context context);

    /**
     * Creates or updates a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param parameters The SQL Server to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInner createOrUpdate(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, SqlServerInner parameters);

    /**
     * Creates or updates a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param parameters The SQL Server to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL server.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String sqlServerRegistrationName,
        String sqlServerName,
        SqlServerInner parameters,
        Context context);

    /**
     * Deletes a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlServerRegistrationName, String sqlServerName);

    /**
     * Deletes a SQL Server.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param sqlServerName Name of the SQL Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String sqlServerRegistrationName, String sqlServerName, Context context);

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerInner> listByResourceGroup(String resourceGroupName, String sqlServerRegistrationName);

    /**
     * Gets all SQL Servers in a SQL Server Registration.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlServerRegistrationName Name of the SQL Server registration.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SQL Servers in a SQL Server Registration.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerInner> listByResourceGroup(
        String resourceGroupName, String sqlServerRegistrationName, String expand, Context context);
}
