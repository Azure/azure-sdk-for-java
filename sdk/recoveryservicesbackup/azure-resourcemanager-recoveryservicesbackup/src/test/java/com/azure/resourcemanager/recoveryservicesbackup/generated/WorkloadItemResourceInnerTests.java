// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.WorkloadItemResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadItem;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkloadItemResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadItemResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"workloadItemType\":\"WorkloadItem\",\"backupManagementType\":\"dpfrxtrthzvaytdw\",\"workloadType\":\"brqubp\",\"friendlyName\":\"h\",\"protectionState\":\"NotProtected\"},\"eTag\":\"livpdt\",\"location\":\"irqtdqoa\",\"tags\":{\"squyfxrxxlep\":\"uzf\"},\"id\":\"ramxjezwlwnw\",\"name\":\"uqlcvydy\",\"type\":\"atdooaojkniod\"}")
                .toObject(WorkloadItemResourceInner.class);
        Assertions.assertEquals("irqtdqoa", model.location());
        Assertions.assertEquals("uzf", model.tags().get("squyfxrxxlep"));
        Assertions.assertEquals("dpfrxtrthzvaytdw", model.properties().backupManagementType());
        Assertions.assertEquals("brqubp", model.properties().workloadType());
        Assertions.assertEquals("h", model.properties().friendlyName());
        Assertions.assertEquals(ProtectionStatus.NOT_PROTECTED, model.properties().protectionState());
        Assertions.assertEquals("livpdt", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadItemResourceInner model =
            new WorkloadItemResourceInner()
                .withLocation("irqtdqoa")
                .withTags(mapOf("squyfxrxxlep", "uzf"))
                .withProperties(
                    new WorkloadItem()
                        .withBackupManagementType("dpfrxtrthzvaytdw")
                        .withWorkloadType("brqubp")
                        .withFriendlyName("h")
                        .withProtectionState(ProtectionStatus.NOT_PROTECTED))
                .withEtag("livpdt");
        model = BinaryData.fromObject(model).toObject(WorkloadItemResourceInner.class);
        Assertions.assertEquals("irqtdqoa", model.location());
        Assertions.assertEquals("uzf", model.tags().get("squyfxrxxlep"));
        Assertions.assertEquals("dpfrxtrthzvaytdw", model.properties().backupManagementType());
        Assertions.assertEquals("brqubp", model.properties().workloadType());
        Assertions.assertEquals("h", model.properties().friendlyName());
        Assertions.assertEquals(ProtectionStatus.NOT_PROTECTED, model.properties().protectionState());
        Assertions.assertEquals("livpdt", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
