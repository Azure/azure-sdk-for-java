// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupEngineBaseResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupEnginesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"backupEngineType\":\"BackupEngineBase\",\"friendlyName\":\"liys\",\"backupManagementType\":\"DefaultBackup\",\"registrationStatus\":\"vmwfauxxep\",\"backupEngineState\":\"wbormcqmi\",\"healthStatus\":\"ijqpkzfbojxjmcs\",\"canReRegister\":true,\"backupEngineId\":\"ixvcpwnkwywzwo\",\"dpmVersion\":\"lickduoi\",\"azureBackupAgentVersion\":\"amt\",\"isAzureBackupAgentUpgradeAvailable\":true,\"isDpmUpgradeAvailable\":true,\"extendedInfo\":{\"databaseName\":\"wzawnvsbcfhzagxn\",\"protectedItemsCount\":1729449606,\"protectedServersCount\":1098770693,\"diskCount\":1592002394,\"usedDiskSpace\":74.71663227511596,\"availableDiskSpace\":94.07358320935018,\"refreshedAt\":\"2021-08-18T00:01:16Z\",\"azureProtectedInstances\":1884652860}},\"eTag\":\"futrwpweryekzkd\",\"location\":\"meottawj\",\"tags\":{\"tfvpndpmiljpn\":\"xwwhnh\",\"zp\":\"ynudqllzsa\",\"zlrayme\":\"lxeehuxiq\"},\"id\":\"xls\",\"name\":\"ihmxrfdsajredn\",\"type\":\"yyshtuwgmevua\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BackupEngineBaseResource> response =
            manager.backupEngines().list("yh", "w", "v", "atbwbqam", Context.NONE);

        Assertions.assertEquals("meottawj", response.iterator().next().location());
        Assertions.assertEquals("xwwhnh", response.iterator().next().tags().get("tfvpndpmiljpn"));
        Assertions.assertEquals("liys", response.iterator().next().properties().friendlyName());
        Assertions
            .assertEquals(
                BackupManagementType.DEFAULT_BACKUP, response.iterator().next().properties().backupManagementType());
        Assertions.assertEquals("vmwfauxxep", response.iterator().next().properties().registrationStatus());
        Assertions.assertEquals("wbormcqmi", response.iterator().next().properties().backupEngineState());
        Assertions.assertEquals("ijqpkzfbojxjmcs", response.iterator().next().properties().healthStatus());
        Assertions.assertEquals(true, response.iterator().next().properties().canReRegister());
        Assertions.assertEquals("ixvcpwnkwywzwo", response.iterator().next().properties().backupEngineId());
        Assertions.assertEquals("lickduoi", response.iterator().next().properties().dpmVersion());
        Assertions.assertEquals("amt", response.iterator().next().properties().azureBackupAgentVersion());
        Assertions.assertEquals(true, response.iterator().next().properties().isAzureBackupAgentUpgradeAvailable());
        Assertions.assertEquals(true, response.iterator().next().properties().isDpmUpgradeAvailable());
        Assertions
            .assertEquals("wzawnvsbcfhzagxn", response.iterator().next().properties().extendedInfo().databaseName());
        Assertions
            .assertEquals(1729449606, response.iterator().next().properties().extendedInfo().protectedItemsCount());
        Assertions
            .assertEquals(1098770693, response.iterator().next().properties().extendedInfo().protectedServersCount());
        Assertions.assertEquals(1592002394, response.iterator().next().properties().extendedInfo().diskCount());
        Assertions
            .assertEquals(74.71663227511596D, response.iterator().next().properties().extendedInfo().usedDiskSpace());
        Assertions
            .assertEquals(
                94.07358320935018D, response.iterator().next().properties().extendedInfo().availableDiskSpace());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-18T00:01:16Z"),
                response.iterator().next().properties().extendedInfo().refreshedAt());
        Assertions
            .assertEquals(1884652860, response.iterator().next().properties().extendedInfo().azureProtectedInstances());
        Assertions.assertEquals("futrwpweryekzkd", response.iterator().next().etag());
    }
}
