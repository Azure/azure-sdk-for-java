// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupEngineBaseResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupEnginesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"backupEngineType\":\"BackupEngineBase\",\"friendlyName\":\"cehokw\",\"backupManagementType\":\"AzureSql\",\"registrationStatus\":\"wloesqrggvrbn\",\"backupEngineState\":\"ukoila\",\"healthStatus\":\"duwjleipjlhwy\",\"canReRegister\":false,\"backupEngineId\":\"uzythqkkwhbgxv\",\"dpmVersion\":\"lvulnxdmnitmujdt\",\"azureBackupAgentVersion\":\"clyymffhmjpddn\",\"isAzureBackupAgentUpgradeAvailable\":false,\"isDpmUpgradeAvailable\":true,\"extendedInfo\":{\"databaseName\":\"zmzqmzjqrb\",\"protectedItemsCount\":656452791,\"protectedServersCount\":660480446,\"diskCount\":1139238418,\"usedDiskSpace\":61.04347067258613,\"availableDiskSpace\":96.93135373789933,\"refreshedAt\":\"2021-10-17T01:47:41Z\",\"azureProtectedInstances\":1367688222}},\"eTag\":\"laohoqkp\",\"location\":\"t\",\"tags\":{\"syril\":\"ilaywkdcwm\",\"ylnkkbjpjvlywltm\":\"hxdqaol\",\"jw\":\"wob\",\"czeuntgx\":\"lwyjfnqzocrdz\"},\"id\":\"ncaqttiekoifu\",\"name\":\"nyttzgix\",\"type\":\"yri\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BackupEngineBaseResource> response =
            manager.backupEngines().list("r", "dqntycnawthv", "ax", "nuyeamcmhud", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("t", response.iterator().next().location());
        Assertions.assertEquals("ilaywkdcwm", response.iterator().next().tags().get("syril"));
        Assertions.assertEquals("cehokw", response.iterator().next().properties().friendlyName());
        Assertions
            .assertEquals(
                BackupManagementType.AZURE_SQL, response.iterator().next().properties().backupManagementType());
        Assertions.assertEquals("wloesqrggvrbn", response.iterator().next().properties().registrationStatus());
        Assertions.assertEquals("ukoila", response.iterator().next().properties().backupEngineState());
        Assertions.assertEquals("duwjleipjlhwy", response.iterator().next().properties().healthStatus());
        Assertions.assertEquals(false, response.iterator().next().properties().canReRegister());
        Assertions.assertEquals("uzythqkkwhbgxv", response.iterator().next().properties().backupEngineId());
        Assertions.assertEquals("lvulnxdmnitmujdt", response.iterator().next().properties().dpmVersion());
        Assertions.assertEquals("clyymffhmjpddn", response.iterator().next().properties().azureBackupAgentVersion());
        Assertions.assertEquals(false, response.iterator().next().properties().isAzureBackupAgentUpgradeAvailable());
        Assertions.assertEquals(true, response.iterator().next().properties().isDpmUpgradeAvailable());
        Assertions.assertEquals("zmzqmzjqrb", response.iterator().next().properties().extendedInfo().databaseName());
        Assertions
            .assertEquals(656452791, response.iterator().next().properties().extendedInfo().protectedItemsCount());
        Assertions
            .assertEquals(660480446, response.iterator().next().properties().extendedInfo().protectedServersCount());
        Assertions.assertEquals(1139238418, response.iterator().next().properties().extendedInfo().diskCount());
        Assertions
            .assertEquals(61.04347067258613D, response.iterator().next().properties().extendedInfo().usedDiskSpace());
        Assertions
            .assertEquals(
                96.93135373789933D, response.iterator().next().properties().extendedInfo().availableDiskSpace());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-17T01:47:41Z"),
                response.iterator().next().properties().extendedInfo().refreshedAt());
        Assertions
            .assertEquals(1367688222, response.iterator().next().properties().extendedInfo().azureProtectedInstances());
        Assertions.assertEquals("laohoqkp", response.iterator().next().etag());
    }
}
