// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementUsage;
import com.azure.resourcemanager.recoveryservicesbackup.models.UsagesUnit;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BackupUsageSummariesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"unit\":\"CountPerSecond\",\"quotaPeriod\":\"gijiitnspxlzd\",\"nextResetTime\":\"2021-08-31T17:26:18Z\",\"currentValue\":6495524474457353023,\"limit\":303813991586774149,\"name\":{\"value\":\"fanraybfu\",\"localizedValue\":\"frojsydgr\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BackupManagementUsage> response
            = manager.backupUsageSummaries().list("ewres", "moweg", "mut", "yxey", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(UsagesUnit.COUNT_PER_SECOND, response.iterator().next().unit());
        Assertions.assertEquals("gijiitnspxlzd", response.iterator().next().quotaPeriod());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-31T17:26:18Z"),
            response.iterator().next().nextResetTime());
        Assertions.assertEquals(6495524474457353023L, response.iterator().next().currentValue());
        Assertions.assertEquals(303813991586774149L, response.iterator().next().limit());
        Assertions.assertEquals("fanraybfu", response.iterator().next().name().value());
        Assertions.assertEquals("frojsydgr", response.iterator().next().name().localizedValue());
    }
}
