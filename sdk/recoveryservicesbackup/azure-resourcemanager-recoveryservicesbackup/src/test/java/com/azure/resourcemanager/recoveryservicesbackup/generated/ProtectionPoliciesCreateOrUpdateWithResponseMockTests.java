// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicyResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProtectionPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"backupManagementType\":\"ProtectionPolicy\",\"protectedItemsCount\":2005722569,\"resourceGuardOperationRequests\":[\"mwhqnucsklh\",\"i\"]},\"eTag\":\"jtdlp\",\"location\":\"ninjgazlsvbz\",\"tags\":{\"lhsyekrdrenxolr\":\"uoeedwjcci\",\"bfgrlpunytjlkes\":\"yehqbeivdlhydwb\"},\"id\":\"mpathubtah\",\"name\":\"e\",\"type\":\"niiwllbvgwz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectionPolicyResource response = manager.protectionPolicies()
            .define("dkyzbfvxov")
            .withRegion("f")
            .withExistingVault("mcrunfhiucn", "fbcpaqktkrumzu")
            .withTags(mapOf("sdxeqztvxwmwwmjs", "qrkijpeuq", "wwa", "en", "ojhtollhs", "ecleqioulndhzyo", "lxpnovyoanf",
                "idmytzln"))
            .withProperties(new ProtectionPolicy().withProtectedItemsCount(113581490)
                .withResourceGuardOperationRequests(Arrays.asList("q", "gvqrnhyhlwcj")))
            .withEtag("ggjh")
            .create();

        Assertions.assertEquals("ninjgazlsvbz", response.location());
        Assertions.assertEquals("uoeedwjcci", response.tags().get("lhsyekrdrenxolr"));
        Assertions.assertEquals(2005722569, response.properties().protectedItemsCount());
        Assertions.assertEquals("mwhqnucsklh", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("jtdlp", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
