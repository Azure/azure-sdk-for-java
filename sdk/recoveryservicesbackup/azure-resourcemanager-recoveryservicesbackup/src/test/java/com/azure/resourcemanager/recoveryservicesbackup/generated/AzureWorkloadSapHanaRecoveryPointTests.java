// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaRecoveryPoint\",\"recoveryPointTimeInUTC\":\"2021-07-20T01:16:34Z\",\"type\":\"SnapshotFull\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Valid\",\"extendedInfo\":{\"jscjpahl\":\"wtzolbaemwmdxmeb\",\"yijddtvqcttad\":\"veabfqxnmwmqtib\"}},{\"type\":\"InstantRP\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"pndzaapmudqmeq\":\"rsiee\",\"wyxebeybpmzz\":\"igpibud\"}},{\"type\":\"InstantRP\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"eufuqyrxpdlcgql\":\"qitmhheioqaqhv\"}}],\"recoveryPointMoveReadinessInfo\":{\"ivfcdisyirnx\":{\"isReadyForMove\":true,\"additionalInfo\":\"frddgamquhiosrsj\"},\"wrevkhgnlnzon\":{\"isReadyForMove\":true,\"additionalInfo\":\"exrxzbujrtrhq\"},\"yw\":{\"isReadyForMove\":true,\"additionalInfo\":\"i\"}},\"recoveryPointProperties\":{\"expiryTime\":\"jtszcof\",\"ruleName\":\"e\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadSapHanaRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T01:16:34Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.SNAPSHOT_FULL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("wtzolbaemwmdxmeb",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("jscjpahl"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("ivfcdisyirnx").isReadyForMove());
        Assertions.assertEquals("frddgamquhiosrsj",
            model.recoveryPointMoveReadinessInfo().get("ivfcdisyirnx").additionalInfo());
        Assertions.assertEquals("jtszcof", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("e", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaRecoveryPoint model
            = new AzureWorkloadSapHanaRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-07-20T01:16:34Z"))
                .withType(RestorePointType.SNAPSHOT_FULL)
                .withRecoveryPointTierDetails(Arrays.asList(
                    new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                        .withStatus(RecoveryPointTierStatus.VALID)
                        .withExtendedInfo(mapOf("jscjpahl", "wtzolbaemwmdxmeb", "yijddtvqcttad", "veabfqxnmwmqtib")),
                    new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                        .withStatus(RecoveryPointTierStatus.REHYDRATED)
                        .withExtendedInfo(mapOf("pndzaapmudqmeq", "rsiee", "wyxebeybpmzz", "igpibud")),
                    new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                        .withStatus(RecoveryPointTierStatus.REHYDRATED)
                        .withExtendedInfo(mapOf("eufuqyrxpdlcgql", "qitmhheioqaqhv"))))
                .withRecoveryPointMoveReadinessInfo(mapOf("ivfcdisyirnx",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true)
                        .withAdditionalInfo("frddgamquhiosrsj"),
                    "wrevkhgnlnzon",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("exrxzbujrtrhq"),
                    "yw", new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("i")))
                .withRecoveryPointProperties(
                    new RecoveryPointProperties().withExpiryTime("jtszcof").withRuleName("e").withIsSoftDeleted(true));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T01:16:34Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.SNAPSHOT_FULL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("wtzolbaemwmdxmeb",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("jscjpahl"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("ivfcdisyirnx").isReadyForMove());
        Assertions.assertEquals("frddgamquhiosrsj",
            model.recoveryPointMoveReadinessInfo().get("ivfcdisyirnx").additionalInfo());
        Assertions.assertEquals("jtszcof", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("e", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
