// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaRecoveryPoint\",\"recoveryPointTimeInUTC\":\"2021-11-06T22:45:13Z\",\"type\":\"SnapshotCopyOnlyFull\",\"recoveryPointTierDetails\":[{\"type\":\"Invalid\",\"status\":\"Valid\",\"extendedInfo\":{\"ptil\":\"gpr\",\"qtgdqohmcwsl\":\"ucb\",\"tpwb\":\"riz\"}},{\"type\":\"InstantRP\",\"status\":\"Disabled\",\"extendedInfo\":{\"izakak\":\"phbqz\",\"oylhjlmuoyxprimr\":\"nkjpdnjzha\",\"eislstvasylwx\":\"opteecj\",\"eoohguufuzboyj\":\"zaum\"}}],\"recoveryPointMoveReadinessInfo\":{\"ebwjscjpahlxvea\":{\"isReadyForMove\":true,\"additionalInfo\":\"olbaemwmdx\"},\"ijddtvqc\":{\"isReadyForMove\":false,\"additionalInfo\":\"nmwmqtibx\"}},\"recoveryPointProperties\":{\"expiryTime\":\"dija\",\"ruleName\":\"kmr\",\"isSoftDeleted\":false}}")
            .toObject(AzureWorkloadSapHanaRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T22:45:13Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.SNAPSHOT_COPY_ONLY_FULL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("gpr", model.recoveryPointTierDetails().get(0).extendedInfo().get("ptil"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("ebwjscjpahlxvea").isReadyForMove());
        Assertions.assertEquals("olbaemwmdx",
            model.recoveryPointMoveReadinessInfo().get("ebwjscjpahlxvea").additionalInfo());
        Assertions.assertEquals("dija", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("kmr", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaRecoveryPoint model = new AzureWorkloadSapHanaRecoveryPoint()
            .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-11-06T22:45:13Z"))
            .withType(RestorePointType.SNAPSHOT_COPY_ONLY_FULL)
            .withRecoveryPointTierDetails(Arrays.asList(
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                    .withStatus(RecoveryPointTierStatus.VALID)
                    .withExtendedInfo(mapOf("ptil", "gpr", "qtgdqohmcwsl", "ucb", "tpwb", "riz")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                    .withStatus(RecoveryPointTierStatus.DISABLED)
                    .withExtendedInfo(mapOf("izakak", "phbqz", "oylhjlmuoyxprimr", "nkjpdnjzha", "eislstvasylwx",
                        "opteecj", "eoohguufuzboyj", "zaum"))))
            .withRecoveryPointMoveReadinessInfo(mapOf("ebwjscjpahlxvea",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("olbaemwmdx"),
                "ijddtvqc",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("nmwmqtibx")))
            .withRecoveryPointProperties(
                new RecoveryPointProperties().withExpiryTime("dija").withRuleName("kmr").withIsSoftDeleted(false));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T22:45:13Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.SNAPSHOT_COPY_ONLY_FULL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("gpr", model.recoveryPointTierDetails().get(0).extendedInfo().get("ptil"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("ebwjscjpahlxvea").isReadyForMove());
        Assertions.assertEquals("olbaemwmdx",
            model.recoveryPointMoveReadinessInfo().get("ebwjscjpahlxvea").additionalInfo());
        Assertions.assertEquals("dija", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("kmr", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
