// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.PrivateEndpoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.PrivateEndpointConnection;
import com.azure.resourcemanager.recoveryservicesbackup.models.PrivateEndpointConnectionResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.PrivateEndpointConnectionStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProvisioningState;
import com.azure.resourcemanager.recoveryservicesbackup.models.VaultSubResourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsPutMockTests {
    @Test
    public void testPut() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{\"id\":\"cxn\"},\"groupIds\":[\"AzureSiteRecovery\",\"AzureSiteRecovery\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"vxisimjcea\",\"actionsRequired\":\"jqvlsumywz\"}},\"eTag\":\"hxgonoyjf\",\"location\":\"ipubyznclkfk\",\"tags\":{\"pemtuoqu\":\"gv\",\"egqavnigflqqb\":\"l\"},\"id\":\"nyjpylxdbfv\",\"name\":\"bmvmsxba\",\"type\":\"vwjcnkottlwuh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnectionResource response = manager.privateEndpointConnections()
            .define("cxetyvkunmignoh")
            .withRegion("vwypusuvjsl")
            .withExistingVault("a", "zknxkv")
            .withTags(mapOf("lfryvdmvxadqac", "ciidjs"))
            .withProperties(new PrivateEndpointConnection().withProvisioningState(ProvisioningState.PENDING)
                .withPrivateEndpoint(new PrivateEndpoint().withId("g"))
                .withGroupIds(
                    Arrays.asList(VaultSubResourceType.AZURE_BACKUP, VaultSubResourceType.AZURE_BACKUP_SECONDARY))
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointConnectionStatus.DISCONNECTED)
                        .withDescription("abbxbhmedeil")
                        .withActionRequired("ywfcfxzi")))
            .withEtag("zi")
            .create();

        Assertions.assertEquals("ipubyznclkfk", response.location());
        Assertions.assertEquals("gv", response.tags().get("pemtuoqu"));
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("cxn", response.properties().privateEndpoint().id());
        Assertions.assertEquals(VaultSubResourceType.AZURE_SITE_RECOVERY, response.properties().groupIds().get(0));
        Assertions.assertEquals(PrivateEndpointConnectionStatus.PENDING,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("vxisimjcea", response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("jqvlsumywz",
            response.properties().privateLinkServiceConnectionState().actionRequired());
        Assertions.assertEquals("hxgonoyjf", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
