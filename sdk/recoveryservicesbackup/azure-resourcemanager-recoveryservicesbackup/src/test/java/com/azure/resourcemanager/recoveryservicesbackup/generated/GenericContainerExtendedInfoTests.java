// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.ContainerIdentityInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainerExtendedInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericContainerExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericContainerExtendedInfo model =
            BinaryData
                .fromString(
                    "{\"rawCertData\":\"iexhajl\",\"containerIdentityInfo\":{\"uniqueName\":\"hiqfyuttdiy\",\"aadTenantId\":\"pvn\",\"servicePrincipalClientId\":\"wmtxkyctwwgz\",\"audience\":\"jlmec\"},\"serviceEndpoints\":{\"oqqtl\":\"ygzyvneezaifght\",\"jjjavfqnvhnq\":\"fhzbkr\"}}")
                .toObject(GenericContainerExtendedInfo.class);
        Assertions.assertEquals("iexhajl", model.rawCertData());
        Assertions.assertEquals("hiqfyuttdiy", model.containerIdentityInfo().uniqueName());
        Assertions.assertEquals("pvn", model.containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("wmtxkyctwwgz", model.containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("jlmec", model.containerIdentityInfo().audience());
        Assertions.assertEquals("ygzyvneezaifght", model.serviceEndpoints().get("oqqtl"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericContainerExtendedInfo model =
            new GenericContainerExtendedInfo()
                .withRawCertData("iexhajl")
                .withContainerIdentityInfo(
                    new ContainerIdentityInfo()
                        .withUniqueName("hiqfyuttdiy")
                        .withAadTenantId("pvn")
                        .withServicePrincipalClientId("wmtxkyctwwgz")
                        .withAudience("jlmec"))
                .withServiceEndpoints(mapOf("oqqtl", "ygzyvneezaifght", "jjjavfqnvhnq", "fhzbkr"));
        model = BinaryData.fromObject(model).toObject(GenericContainerExtendedInfo.class);
        Assertions.assertEquals("iexhajl", model.rawCertData());
        Assertions.assertEquals("hiqfyuttdiy", model.containerIdentityInfo().uniqueName());
        Assertions.assertEquals("pvn", model.containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("wmtxkyctwwgz", model.containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("jlmec", model.containerIdentityInfo().audience());
        Assertions.assertEquals("ygzyvneezaifght", model.serviceEndpoints().get("oqqtl"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
