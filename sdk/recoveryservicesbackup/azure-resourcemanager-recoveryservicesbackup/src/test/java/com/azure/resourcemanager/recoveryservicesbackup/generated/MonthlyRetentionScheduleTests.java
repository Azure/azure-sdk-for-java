// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.Day;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthlyRetentionSchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionScheduleFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeekOfMonth;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionFormat;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonthlyRetentionScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonthlyRetentionSchedule model = BinaryData.fromString(
            "{\"retentionScheduleFormatType\":\"Weekly\",\"retentionScheduleDaily\":{\"daysOfTheMonth\":[{\"date\":705670671,\"isLast\":true}]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Monday\",\"Monday\",\"Friday\"],\"weeksOfTheMonth\":[\"First\"]},\"retentionTimes\":[\"2021-08-12T00:06:39Z\",\"2021-06-16T20:51:40Z\",\"2021-09-27T14:55:54Z\"],\"retentionDuration\":{\"count\":2092352940,\"durationType\":\"Days\"}}")
            .toObject(MonthlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.retentionScheduleFormatType());
        Assertions.assertEquals(705670671, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(true, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.MONDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.FIRST, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-12T00:06:39Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(2092352940, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonthlyRetentionSchedule model
            = new MonthlyRetentionSchedule().withRetentionScheduleFormatType(RetentionScheduleFormat.WEEKLY)
                .withRetentionScheduleDaily(new DailyRetentionFormat()
                    .withDaysOfTheMonth(Arrays.asList(new Day().withDate(705670671).withIsLast(true))))
                .withRetentionScheduleWeekly(new WeeklyRetentionFormat()
                    .withDaysOfTheWeek(Arrays.asList(DayOfWeek.MONDAY, DayOfWeek.MONDAY, DayOfWeek.FRIDAY))
                    .withWeeksOfTheMonth(Arrays.asList(WeekOfMonth.FIRST)))
                .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-08-12T00:06:39Z"),
                    OffsetDateTime.parse("2021-06-16T20:51:40Z"), OffsetDateTime.parse("2021-09-27T14:55:54Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(2092352940).withDurationType(RetentionDurationType.DAYS));
        model = BinaryData.fromObject(model).toObject(MonthlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.retentionScheduleFormatType());
        Assertions.assertEquals(705670671, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(true, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.MONDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.FIRST, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-12T00:06:39Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(2092352940, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.retentionDuration().durationType());
    }
}
