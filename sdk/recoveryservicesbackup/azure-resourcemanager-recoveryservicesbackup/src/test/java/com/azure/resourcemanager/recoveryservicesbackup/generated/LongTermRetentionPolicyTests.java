// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionSchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.LongTermRetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthOfYear;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthlyRetentionSchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionScheduleFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeekOfMonth;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionSchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.YearlyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LongTermRetentionPolicyTests {
    @Test
    public void testDeserialize() {
        LongTermRetentionPolicy model =
            BinaryData
                .fromString(
                    "{\"retentionPolicyType\":\"LongTermRetentionPolicy\",\"dailySchedule\":{\"retentionTimes\":[\"2021-04-27T20:58:15Z\"],\"retentionDuration\":{\"count\":202714227,\"durationType\":\"Weeks\"}},\"weeklySchedule\":{\"daysOfTheWeek\":[\"Sunday\"],\"retentionTimes\":[\"2021-03-10T23:34:34Z\"],\"retentionDuration\":{\"count\":1666158836,\"durationType\":\"Days\"}},\"monthlySchedule\":{\"retentionScheduleFormatType\":\"Invalid\",\"retentionScheduleDaily\":{\"daysOfTheMonth\":[]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Tuesday\"],\"weeksOfTheMonth\":[\"Third\",\"Invalid\",\"First\",\"Third\"]},\"retentionTimes\":[\"2021-11-19T00:15:10Z\",\"2021-06-07T10:40:46Z\"],\"retentionDuration\":{\"count\":277381231,\"durationType\":\"Years\"}},\"yearlySchedule\":{\"retentionScheduleFormatType\":\"Weekly\",\"monthsOfYear\":[\"February\"],\"retentionScheduleDaily\":{\"daysOfTheMonth\":[]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Wednesday\",\"Wednesday\",\"Sunday\"],\"weeksOfTheMonth\":[\"Last\",\"First\",\"Last\",\"Invalid\"]},\"retentionTimes\":[\"2021-11-17T11:32:04Z\"],\"retentionDuration\":{\"count\":1734135140,\"durationType\":\"Invalid\"}}}")
                .toObject(LongTermRetentionPolicy.class);
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-04-27T20:58:15Z"), model.dailySchedule().retentionTimes().get(0));
        Assertions.assertEquals(202714227, model.dailySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.dailySchedule().retentionDuration().durationType());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.weeklySchedule().daysOfTheWeek().get(0));
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-03-10T23:34:34Z"), model.weeklySchedule().retentionTimes().get(0));
        Assertions.assertEquals(1666158836, model.weeklySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.weeklySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.INVALID, model.monthlySchedule().retentionScheduleFormatType());
        Assertions
            .assertEquals(DayOfWeek.TUESDAY, model.monthlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions
            .assertEquals(
                WeekOfMonth.THIRD, model.monthlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-19T00:15:10Z"), model.monthlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(277381231, model.monthlySchedule().retentionDuration().count());
        Assertions
            .assertEquals(RetentionDurationType.YEARS, model.monthlySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.yearlySchedule().retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.FEBRUARY, model.yearlySchedule().monthsOfYear().get(0));
        Assertions
            .assertEquals(DayOfWeek.WEDNESDAY, model.yearlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions
            .assertEquals(WeekOfMonth.LAST, model.yearlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-11-17T11:32:04Z"), model.yearlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(1734135140, model.yearlySchedule().retentionDuration().count());
        Assertions
            .assertEquals(RetentionDurationType.INVALID, model.yearlySchedule().retentionDuration().durationType());
    }

    @Test
    public void testSerialize() {
        LongTermRetentionPolicy model =
            new LongTermRetentionPolicy()
                .withDailySchedule(
                    new DailyRetentionSchedule()
                        .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-04-27T20:58:15Z")))
                        .withRetentionDuration(
                            new RetentionDuration().withCount(202714227).withDurationType(RetentionDurationType.WEEKS)))
                .withWeeklySchedule(
                    new WeeklyRetentionSchedule()
                        .withDaysOfTheWeek(Arrays.asList(DayOfWeek.SUNDAY))
                        .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-03-10T23:34:34Z")))
                        .withRetentionDuration(
                            new RetentionDuration().withCount(1666158836).withDurationType(RetentionDurationType.DAYS)))
                .withMonthlySchedule(
                    new MonthlyRetentionSchedule()
                        .withRetentionScheduleFormatType(RetentionScheduleFormat.INVALID)
                        .withRetentionScheduleDaily(new DailyRetentionFormat().withDaysOfTheMonth(Arrays.asList()))
                        .withRetentionScheduleWeekly(
                            new WeeklyRetentionFormat()
                                .withDaysOfTheWeek(Arrays.asList(DayOfWeek.TUESDAY))
                                .withWeeksOfTheMonth(
                                    Arrays
                                        .asList(
                                            WeekOfMonth.THIRD,
                                            WeekOfMonth.INVALID,
                                            WeekOfMonth.FIRST,
                                            WeekOfMonth.THIRD)))
                        .withRetentionTimes(
                            Arrays
                                .asList(
                                    OffsetDateTime.parse("2021-11-19T00:15:10Z"),
                                    OffsetDateTime.parse("2021-06-07T10:40:46Z")))
                        .withRetentionDuration(
                            new RetentionDuration().withCount(277381231).withDurationType(RetentionDurationType.YEARS)))
                .withYearlySchedule(
                    new YearlyRetentionSchedule()
                        .withRetentionScheduleFormatType(RetentionScheduleFormat.WEEKLY)
                        .withMonthsOfYear(Arrays.asList(MonthOfYear.FEBRUARY))
                        .withRetentionScheduleDaily(new DailyRetentionFormat().withDaysOfTheMonth(Arrays.asList()))
                        .withRetentionScheduleWeekly(
                            new WeeklyRetentionFormat()
                                .withDaysOfTheWeek(
                                    Arrays.asList(DayOfWeek.WEDNESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.SUNDAY))
                                .withWeeksOfTheMonth(
                                    Arrays
                                        .asList(
                                            WeekOfMonth.LAST,
                                            WeekOfMonth.FIRST,
                                            WeekOfMonth.LAST,
                                            WeekOfMonth.INVALID)))
                        .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-11-17T11:32:04Z")))
                        .withRetentionDuration(
                            new RetentionDuration()
                                .withCount(1734135140)
                                .withDurationType(RetentionDurationType.INVALID)));
        model = BinaryData.fromObject(model).toObject(LongTermRetentionPolicy.class);
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-04-27T20:58:15Z"), model.dailySchedule().retentionTimes().get(0));
        Assertions.assertEquals(202714227, model.dailySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.dailySchedule().retentionDuration().durationType());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.weeklySchedule().daysOfTheWeek().get(0));
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-03-10T23:34:34Z"), model.weeklySchedule().retentionTimes().get(0));
        Assertions.assertEquals(1666158836, model.weeklySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.weeklySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.INVALID, model.monthlySchedule().retentionScheduleFormatType());
        Assertions
            .assertEquals(DayOfWeek.TUESDAY, model.monthlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions
            .assertEquals(
                WeekOfMonth.THIRD, model.monthlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-19T00:15:10Z"), model.monthlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(277381231, model.monthlySchedule().retentionDuration().count());
        Assertions
            .assertEquals(RetentionDurationType.YEARS, model.monthlySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.yearlySchedule().retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.FEBRUARY, model.yearlySchedule().monthsOfYear().get(0));
        Assertions
            .assertEquals(DayOfWeek.WEDNESDAY, model.yearlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions
            .assertEquals(WeekOfMonth.LAST, model.yearlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-11-17T11:32:04Z"), model.yearlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(1734135140, model.yearlySchedule().retentionDuration().count());
        Assertions
            .assertEquals(RetentionDurationType.INVALID, model.yearlySchedule().retentionDuration().durationType());
    }
}
