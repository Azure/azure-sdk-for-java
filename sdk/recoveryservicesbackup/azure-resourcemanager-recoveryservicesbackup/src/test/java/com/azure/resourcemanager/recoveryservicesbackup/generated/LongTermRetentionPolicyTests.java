// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionSchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.Day;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.LongTermRetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthOfYear;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthlyRetentionSchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionScheduleFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeekOfMonth;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionSchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.YearlyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class LongTermRetentionPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LongTermRetentionPolicy model = BinaryData.fromString(
            "{\"retentionPolicyType\":\"LongTermRetentionPolicy\",\"dailySchedule\":{\"retentionTimes\":[\"2021-10-21T20:36:02Z\",\"2021-04-29T21:17:46Z\",\"2021-03-11T03:18:05Z\"],\"retentionDuration\":{\"count\":1282256848,\"durationType\":\"Weeks\"}},\"weeklySchedule\":{\"daysOfTheWeek\":[\"Sunday\"],\"retentionTimes\":[\"2021-10-25T04:16:39Z\",\"2021-08-08T18:00:09Z\"],\"retentionDuration\":{\"count\":772955822,\"durationType\":\"Invalid\"}},\"monthlySchedule\":{\"retentionScheduleFormatType\":\"Weekly\",\"retentionScheduleDaily\":{\"daysOfTheMonth\":[{\"date\":661810692,\"isLast\":false},{\"date\":923324597,\"isLast\":true},{\"date\":2020150927,\"isLast\":true},{\"date\":439727663,\"isLast\":false}]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Thursday\"],\"weeksOfTheMonth\":[\"First\",\"Second\",\"Fourth\"]},\"retentionTimes\":[\"2021-03-28T11:35:07Z\",\"2021-11-15T04:13:11Z\"],\"retentionDuration\":{\"count\":220520024,\"durationType\":\"Days\"}},\"yearlySchedule\":{\"retentionScheduleFormatType\":\"Weekly\",\"monthsOfYear\":[\"January\",\"April\"],\"retentionScheduleDaily\":{\"daysOfTheMonth\":[{\"date\":1093469503,\"isLast\":false},{\"date\":2063038318,\"isLast\":false}]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Tuesday\",\"Saturday\",\"Wednesday\"],\"weeksOfTheMonth\":[\"Fourth\",\"Fourth\",\"Second\",\"Invalid\"]},\"retentionTimes\":[\"2021-10-22T15:55:19Z\",\"2021-03-05T13:08Z\",\"2021-04-01T12:27:49Z\"],\"retentionDuration\":{\"count\":314959325,\"durationType\":\"Invalid\"}}}")
            .toObject(LongTermRetentionPolicy.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-21T20:36:02Z"),
            model.dailySchedule().retentionTimes().get(0));
        Assertions.assertEquals(1282256848, model.dailySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.dailySchedule().retentionDuration().durationType());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.weeklySchedule().daysOfTheWeek().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T04:16:39Z"),
            model.weeklySchedule().retentionTimes().get(0));
        Assertions.assertEquals(772955822, model.weeklySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.INVALID,
            model.weeklySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.monthlySchedule().retentionScheduleFormatType());
        Assertions.assertEquals(661810692,
            model.monthlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false,
            model.monthlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.THURSDAY,
            model.monthlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.FIRST,
            model.monthlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-28T11:35:07Z"),
            model.monthlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(220520024, model.monthlySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.monthlySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.yearlySchedule().retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JANUARY, model.yearlySchedule().monthsOfYear().get(0));
        Assertions.assertEquals(1093469503,
            model.yearlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false,
            model.yearlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.TUESDAY,
            model.yearlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.FOURTH,
            model.yearlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-22T15:55:19Z"),
            model.yearlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(314959325, model.yearlySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.INVALID,
            model.yearlySchedule().retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LongTermRetentionPolicy model = new LongTermRetentionPolicy()
            .withDailySchedule(new DailyRetentionSchedule()
                .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-10-21T20:36:02Z"),
                    OffsetDateTime.parse("2021-04-29T21:17:46Z"), OffsetDateTime.parse("2021-03-11T03:18:05Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(1282256848).withDurationType(RetentionDurationType.WEEKS)))
            .withWeeklySchedule(new WeeklyRetentionSchedule().withDaysOfTheWeek(Arrays.asList(DayOfWeek.SUNDAY))
                .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-10-25T04:16:39Z"),
                    OffsetDateTime.parse("2021-08-08T18:00:09Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(772955822).withDurationType(RetentionDurationType.INVALID)))
            .withMonthlySchedule(new MonthlyRetentionSchedule()
                .withRetentionScheduleFormatType(RetentionScheduleFormat.WEEKLY)
                .withRetentionScheduleDaily(new DailyRetentionFormat().withDaysOfTheMonth(Arrays.asList(
                    new Day().withDate(661810692).withIsLast(false), new Day().withDate(923324597).withIsLast(true),
                    new Day().withDate(2020150927).withIsLast(true), new Day().withDate(439727663).withIsLast(false))))
                .withRetentionScheduleWeekly(
                    new WeeklyRetentionFormat().withDaysOfTheWeek(Arrays.asList(DayOfWeek.THURSDAY))
                        .withWeeksOfTheMonth(Arrays.asList(WeekOfMonth.FIRST, WeekOfMonth.SECOND, WeekOfMonth.FOURTH)))
                .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-03-28T11:35:07Z"),
                    OffsetDateTime.parse("2021-11-15T04:13:11Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(220520024).withDurationType(RetentionDurationType.DAYS)))
            .withYearlySchedule(
                new YearlyRetentionSchedule().withRetentionScheduleFormatType(RetentionScheduleFormat.WEEKLY)
                    .withMonthsOfYear(Arrays.asList(MonthOfYear.JANUARY, MonthOfYear.APRIL))
                    .withRetentionScheduleDaily(new DailyRetentionFormat()
                        .withDaysOfTheMonth(Arrays.asList(new Day().withDate(1093469503).withIsLast(false),
                            new Day().withDate(2063038318).withIsLast(false))))
                    .withRetentionScheduleWeekly(new WeeklyRetentionFormat()
                        .withDaysOfTheWeek(Arrays.asList(DayOfWeek.TUESDAY, DayOfWeek.SATURDAY, DayOfWeek.WEDNESDAY))
                        .withWeeksOfTheMonth(Arrays.asList(WeekOfMonth.FOURTH, WeekOfMonth.FOURTH, WeekOfMonth.SECOND,
                            WeekOfMonth.INVALID)))
                    .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-10-22T15:55:19Z"),
                        OffsetDateTime.parse("2021-03-05T13:08Z"), OffsetDateTime.parse("2021-04-01T12:27:49Z")))
                    .withRetentionDuration(
                        new RetentionDuration().withCount(314959325).withDurationType(RetentionDurationType.INVALID)));
        model = BinaryData.fromObject(model).toObject(LongTermRetentionPolicy.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-21T20:36:02Z"),
            model.dailySchedule().retentionTimes().get(0));
        Assertions.assertEquals(1282256848, model.dailySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.dailySchedule().retentionDuration().durationType());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.weeklySchedule().daysOfTheWeek().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T04:16:39Z"),
            model.weeklySchedule().retentionTimes().get(0));
        Assertions.assertEquals(772955822, model.weeklySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.INVALID,
            model.weeklySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.monthlySchedule().retentionScheduleFormatType());
        Assertions.assertEquals(661810692,
            model.monthlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false,
            model.monthlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.THURSDAY,
            model.monthlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.FIRST,
            model.monthlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-28T11:35:07Z"),
            model.monthlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(220520024, model.monthlySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.monthlySchedule().retentionDuration().durationType());
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.yearlySchedule().retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JANUARY, model.yearlySchedule().monthsOfYear().get(0));
        Assertions.assertEquals(1093469503,
            model.yearlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false,
            model.yearlySchedule().retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.TUESDAY,
            model.yearlySchedule().retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.FOURTH,
            model.yearlySchedule().retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-22T15:55:19Z"),
            model.yearlySchedule().retentionTimes().get(0));
        Assertions.assertEquals(314959325, model.yearlySchedule().retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.INVALID,
            model.yearlySchedule().retentionDuration().durationType());
    }
}
