// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"fplt\",\"rehydrationPriority\":\"Standard\"},\"pointInTime\":\"2021-08-25T12:25:16Z\",\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Log\",\"sourceLogicalName\":\"cwnpqigtuujwouhd\",\"sourcePath\":\"s\",\"targetPath\":\"rb\"},{\"mappingType\":\"Data\",\"sourceLogicalName\":\"jybvit\",\"sourcePath\":\"kjyaznumtg\",\"targetPath\":\"uwdchozf\"}],\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"xlvxnoakiz\",\"propertyBag\":{\"yxl\":\"iknaqlnuwig\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"vx\",\"databaseName\":\"wxh\",\"targetDirectoryForFileRestore\":\"ejtlk\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"nwivkcqhrxh\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"lccrmmkyupi\",\"identityName\":\"byqjfkakfqfrkem\",\"userAssignedIdentityProperties\":{\"clientId\":\"dudxjascowvfdjk\",\"principalId\":\"xphlkksnmg\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"jd\"},\"targetVirtualMachineId\":\"uqnwsithu\",\"resourceGuardOperationRequests\":[\"yahluqwqulsutr\"]}")
            .toObject(AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("yahluqwqulsutr", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("xlvxnoakiz", model.sourceResourceId());
        Assertions.assertEquals("iknaqlnuwig", model.propertyBag().get("yxl"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("vx", model.targetInfo().containerId());
        Assertions.assertEquals("wxh", model.targetInfo().databaseName());
        Assertions.assertEquals("ejtlk", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nwivkcqhrxh", model.targetResourceGroupName());
        Assertions.assertEquals("lccrmmkyupi", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("byqjfkakfqfrkem", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("dudxjascowvfdjk",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("xphlkksnmg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("jd", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("uqnwsithu", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("cwnpqigtuujwouhd", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("s", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("rb", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-25T12:25:16Z"), model.pointInTime());
        Assertions.assertEquals("fplt", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.STANDARD,
            model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest model
            = new AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest()
                .withResourceGuardOperationRequests(Arrays.asList("yahluqwqulsutr"))
                .withRecoveryType(RecoveryType.INVALID)
                .withSourceResourceId("xlvxnoakiz")
                .withPropertyBag(mapOf("yxl", "iknaqlnuwig"))
                .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                    .withContainerId("vx")
                    .withDatabaseName("wxh")
                    .withTargetDirectoryForFileRestore("ejtlk"))
                .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
                .withTargetResourceGroupName("nwivkcqhrxh")
                .withUserAssignedManagedIdentityDetails(
                    new UserAssignedManagedIdentityDetails().withIdentityArmId("lccrmmkyupi")
                        .withIdentityName("byqjfkakfqfrkem")
                        .withUserAssignedIdentityProperties(
                            new UserAssignedIdentityProperties().withClientId("dudxjascowvfdjk")
                                .withPrincipalId("xphlkksnmg")))
                .withSnapshotRestoreParameters(
                    new SnapshotRestoreParameters().withSkipAttachAndMount(false).withLogPointInTimeForDBRecovery("jd"))
                .withTargetVirtualMachineId("uqnwsithu")
                .withShouldUseAlternateTargetLocation(true)
                .withIsNonRecoverable(false)
                .withAlternateDirectoryPaths(Arrays.asList(
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.LOG)
                        .withSourceLogicalName("cwnpqigtuujwouhd")
                        .withSourcePath("s")
                        .withTargetPath("rb"),
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.DATA)
                        .withSourceLogicalName("jybvit")
                        .withSourcePath("kjyaznumtg")
                        .withTargetPath("uwdchozf")))
                .withPointInTime(OffsetDateTime.parse("2021-08-25T12:25:16Z"))
                .withRecoveryPointRehydrationInfo(
                    new RecoveryPointRehydrationInfo().withRehydrationRetentionDuration("fplt")
                        .withRehydrationPriority(RehydrationPriority.STANDARD));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("yahluqwqulsutr", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("xlvxnoakiz", model.sourceResourceId());
        Assertions.assertEquals("iknaqlnuwig", model.propertyBag().get("yxl"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("vx", model.targetInfo().containerId());
        Assertions.assertEquals("wxh", model.targetInfo().databaseName());
        Assertions.assertEquals("ejtlk", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nwivkcqhrxh", model.targetResourceGroupName());
        Assertions.assertEquals("lccrmmkyupi", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("byqjfkakfqfrkem", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("dudxjascowvfdjk",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("xphlkksnmg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("jd", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("uqnwsithu", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("cwnpqigtuujwouhd", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("s", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("rb", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-25T12:25:16Z"), model.pointInTime());
        Assertions.assertEquals("fplt", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.STANDARD,
            model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
