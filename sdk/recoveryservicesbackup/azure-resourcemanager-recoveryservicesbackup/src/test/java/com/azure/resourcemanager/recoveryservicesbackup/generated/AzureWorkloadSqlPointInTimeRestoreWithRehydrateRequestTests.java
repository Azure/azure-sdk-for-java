// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"yxkyxlz\",\"rehydrationPriority\":\"Standard\"},\"pointInTime\":\"2021-10-10T00:03:26Z\",\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"ffovwmbjlzqsczp\",\"sourcePath\":\"dwnapf\",\"targetPath\":\"wow\"},{\"mappingType\":\"Data\",\"sourceLogicalName\":\"n\",\"sourcePath\":\"jtks\",\"targetPath\":\"gcgqyhleseyqrhvy\"},{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"tj\",\"sourcePath\":\"kwiswskukjtas\",\"targetPath\":\"wispkxk\"},{\"mappingType\":\"Log\",\"sourceLogicalName\":\"kndlqvtwknvg\",\"sourcePath\":\"bugtywatmqa\",\"targetPath\":\"ueatgroe\"}],\"recoveryType\":\"AlternateLocation\",\"sourceResourceId\":\"gzcbyf\",\"propertyBag\":{\"mvqmtdwckygroej\":\"faoytehqpuv\",\"eqy\":\"ndljdjuskbr\",\"ysh\":\"kceysfaqegplw\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"bxgkqusy\",\"databaseName\":\"ptdacarvvl\",\"targetDirectoryForFileRestore\":\"tymtpoiwenazer\"},\"recoveryMode\":\"SnapshotAttach\",\"targetResourceGroupName\":\"sqalsxkdn\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"pfgsdpcvessmzhh\",\"identityName\":\"uipldqq\",\"userAssignedIdentityProperties\":{\"clientId\":\"kva\",\"principalId\":\"l\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"qyv\"},\"targetVirtualMachineId\":\"hta\"}")
            .toObject(AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("gzcbyf", model.sourceResourceId());
        Assertions.assertEquals("faoytehqpuv", model.propertyBag().get("mvqmtdwckygroej"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("bxgkqusy", model.targetInfo().containerId());
        Assertions.assertEquals("ptdacarvvl", model.targetInfo().databaseName());
        Assertions.assertEquals("tymtpoiwenazer", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH, model.recoveryMode());
        Assertions.assertEquals("sqalsxkdn", model.targetResourceGroupName());
        Assertions.assertEquals("pfgsdpcvessmzhh", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("uipldqq", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("kva",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("l",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("qyv", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("hta", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("ffovwmbjlzqsczp", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("dwnapf", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("wow", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T00:03:26Z"), model.pointInTime());
        Assertions.assertEquals("yxkyxlz", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.STANDARD,
            model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest model
            = new AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest()
                .withRecoveryType(RecoveryType.ALTERNATE_LOCATION).withSourceResourceId("gzcbyf")
                .withPropertyBag(mapOf("mvqmtdwckygroej", "faoytehqpuv", "eqy", "ndljdjuskbr", "ysh", "kceysfaqegplw"))
                .withTargetInfo(
                    new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.OVERWRITE).withContainerId("bxgkqusy")
                        .withDatabaseName("ptdacarvvl").withTargetDirectoryForFileRestore("tymtpoiwenazer"))
                .withRecoveryMode(RecoveryMode.SNAPSHOT_ATTACH).withTargetResourceGroupName("sqalsxkdn")
                .withUserAssignedManagedIdentityDetails(
                    new UserAssignedManagedIdentityDetails().withIdentityArmId("pfgsdpcvessmzhh")
                        .withIdentityName("uipldqq").withUserAssignedIdentityProperties(
                            new UserAssignedIdentityProperties().withClientId("kva").withPrincipalId("l")))
                .withSnapshotRestoreParameters(
                    new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("qyv"))
                .withTargetVirtualMachineId("hta").withShouldUseAlternateTargetLocation(true)
                .withIsNonRecoverable(false)
                .withAlternateDirectoryPaths(Arrays.asList(
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.INVALID)
                        .withSourceLogicalName("ffovwmbjlzqsczp").withSourcePath("dwnapf").withTargetPath("wow"),
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.DATA).withSourceLogicalName("n")
                        .withSourcePath("jtks").withTargetPath("gcgqyhleseyqrhvy"),
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.INVALID)
                        .withSourceLogicalName("tj").withSourcePath("kwiswskukjtas").withTargetPath("wispkxk"),
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.LOG)
                        .withSourceLogicalName("kndlqvtwknvg").withSourcePath("bugtywatmqa")
                        .withTargetPath("ueatgroe")))
                .withPointInTime(OffsetDateTime.parse("2021-10-10T00:03:26Z"))
                .withRecoveryPointRehydrationInfo(new RecoveryPointRehydrationInfo()
                    .withRehydrationRetentionDuration("yxkyxlz").withRehydrationPriority(RehydrationPriority.STANDARD));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("gzcbyf", model.sourceResourceId());
        Assertions.assertEquals("faoytehqpuv", model.propertyBag().get("mvqmtdwckygroej"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("bxgkqusy", model.targetInfo().containerId());
        Assertions.assertEquals("ptdacarvvl", model.targetInfo().databaseName());
        Assertions.assertEquals("tymtpoiwenazer", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH, model.recoveryMode());
        Assertions.assertEquals("sqalsxkdn", model.targetResourceGroupName());
        Assertions.assertEquals("pfgsdpcvessmzhh", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("uipldqq", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("kva",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("l",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("qyv", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("hta", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("ffovwmbjlzqsczp", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("dwnapf", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("wow", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T00:03:26Z"), model.pointInTime());
        Assertions.assertEquals("yxkyxlz", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.STANDARD,
            model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
