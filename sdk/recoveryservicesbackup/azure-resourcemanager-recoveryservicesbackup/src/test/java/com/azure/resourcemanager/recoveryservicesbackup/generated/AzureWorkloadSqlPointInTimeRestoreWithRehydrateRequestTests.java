// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"mkfqlwxldy\",\"rehydrationPriority\":\"Standard\"},\"pointInTime\":\"2020-12-24T02:24:20Z\",\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":true,\"alternateDirectoryPaths\":[{\"mappingType\":\"Log\",\"sourceLogicalName\":\"bmjk\",\"sourcePath\":\"bjgsjjxxahmrn\",\"targetPath\":\"zyqegxyiv\"},{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"mhwbjijkgqx\",\"sourcePath\":\"mbk\",\"targetPath\":\"njaujvaan\"},{\"mappingType\":\"Log\",\"sourceLogicalName\":\"ycwkdtaawx\",\"sourcePath\":\"ekaum\",\"targetPath\":\"qmbzmq\"},{\"mappingType\":\"Data\",\"sourceLogicalName\":\"bnxwbjsidbirkf\",\"sourcePath\":\"sokdgoge\",\"targetPath\":\"jymrhbg\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"kyewnfnzhhhqo\",\"propertyBag\":{\"g\":\"fjkutycyarnroo\",\"ocnhzqrottjzcfyj\":\"abzoghktdpyczhco\",\"rl\":\"pt\",\"pqinf\":\"h\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"lqdhmrjzr\",\"databaseName\":\"cxpjbyypsj\",\"targetDirectoryForFileRestore\":\"cjenkyhfqzvsqxf\"},\"recoveryMode\":\"Invalid\",\"targetVirtualMachineId\":\"gcm\"}")
                .toObject(AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("kyewnfnzhhhqo", model.sourceResourceId());
        Assertions.assertEquals("fjkutycyarnroo", model.propertyBag().get("g"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("lqdhmrjzr", model.targetInfo().containerId());
        Assertions.assertEquals("cxpjbyypsj", model.targetInfo().databaseName());
        Assertions.assertEquals("cjenkyhfqzvsqxf", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("gcm", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(true, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("bmjk", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("bjgsjjxxahmrn", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("zyqegxyiv", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T02:24:20Z"), model.pointInTime());
        Assertions.assertEquals("mkfqlwxldy", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions
            .assertEquals(RehydrationPriority.STANDARD, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest model =
            new AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest()
                .withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("kyewnfnzhhhqo")
                .withPropertyBag(
                    mapOf("g", "fjkutycyarnroo", "ocnhzqrottjzcfyj", "abzoghktdpyczhco", "rl", "pt", "pqinf", "h"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.OVERWRITE)
                        .withContainerId("lqdhmrjzr")
                        .withDatabaseName("cxpjbyypsj")
                        .withTargetDirectoryForFileRestore("cjenkyhfqzvsqxf"))
                .withRecoveryMode(RecoveryMode.INVALID)
                .withTargetVirtualMachineId("gcm")
                .withShouldUseAlternateTargetLocation(true)
                .withIsNonRecoverable(true)
                .withAlternateDirectoryPaths(
                    Arrays
                        .asList(
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.LOG)
                                .withSourceLogicalName("bmjk")
                                .withSourcePath("bjgsjjxxahmrn")
                                .withTargetPath("zyqegxyiv"),
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.INVALID)
                                .withSourceLogicalName("mhwbjijkgqx")
                                .withSourcePath("mbk")
                                .withTargetPath("njaujvaan"),
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.LOG)
                                .withSourceLogicalName("ycwkdtaawx")
                                .withSourcePath("ekaum")
                                .withTargetPath("qmbzmq"),
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.DATA)
                                .withSourceLogicalName("bnxwbjsidbirkf")
                                .withSourcePath("sokdgoge")
                                .withTargetPath("jymrhbg")))
                .withPointInTime(OffsetDateTime.parse("2020-12-24T02:24:20Z"))
                .withRecoveryPointRehydrationInfo(
                    new RecoveryPointRehydrationInfo()
                        .withRehydrationRetentionDuration("mkfqlwxldy")
                        .withRehydrationPriority(RehydrationPriority.STANDARD));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("kyewnfnzhhhqo", model.sourceResourceId());
        Assertions.assertEquals("fjkutycyarnroo", model.propertyBag().get("g"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("lqdhmrjzr", model.targetInfo().containerId());
        Assertions.assertEquals("cxpjbyypsj", model.targetInfo().databaseName());
        Assertions.assertEquals("cjenkyhfqzvsqxf", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("gcm", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(true, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("bmjk", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("bjgsjjxxahmrn", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("zyqegxyiv", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T02:24:20Z"), model.pointInTime());
        Assertions.assertEquals("mkfqlwxldy", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions
            .assertEquals(RehydrationPriority.STANDARD, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
