// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureStorageJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureStorageJobTaskDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureStorageJobExtendedInfoTests {
    @Test
    public void testDeserialize() {
        AzureStorageJobExtendedInfo model =
            BinaryData
                .fromString(
                    "{\"tasksList\":[{\"taskId\":\"oggculapz\",\"status\":\"rpgogtqxep\"}],\"propertyBag\":{\"uajlyj\":\"b\"},\"dynamicErrorMessage\":\"vofqzhvfc\"}")
                .toObject(AzureStorageJobExtendedInfo.class);
        Assertions.assertEquals("oggculapz", model.tasksList().get(0).taskId());
        Assertions.assertEquals("rpgogtqxep", model.tasksList().get(0).status());
        Assertions.assertEquals("b", model.propertyBag().get("uajlyj"));
        Assertions.assertEquals("vofqzhvfc", model.dynamicErrorMessage());
    }

    @Test
    public void testSerialize() {
        AzureStorageJobExtendedInfo model =
            new AzureStorageJobExtendedInfo()
                .withTasksList(
                    Arrays.asList(new AzureStorageJobTaskDetails().withTaskId("oggculapz").withStatus("rpgogtqxep")))
                .withPropertyBag(mapOf("uajlyj", "b"))
                .withDynamicErrorMessage("vofqzhvfc");
        model = BinaryData.fromObject(model).toObject(AzureStorageJobExtendedInfo.class);
        Assertions.assertEquals("oggculapz", model.tasksList().get(0).taskId());
        Assertions.assertEquals("rpgogtqxep", model.tasksList().get(0).status());
        Assertions.assertEquals("b", model.propertyBag().get("uajlyj"));
        Assertions.assertEquals("vofqzhvfc", model.dynamicErrorMessage());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
