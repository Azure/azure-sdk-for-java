// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureStorageJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureStorageJobTaskDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureStorageJobExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureStorageJobExtendedInfo model = BinaryData.fromString(
            "{\"tasksList\":[{\"taskId\":\"zevwrdnhfukuv\",\"status\":\"cswsmystul\"}],\"propertyBag\":{\"babwidfcxss\":\"pfcvlerchpqbmfp\",\"i\":\"uunnoxyhkxgqdd\",\"djvlpj\":\"pfhoqcaaewdao\",\"msgeivsiykzk\":\"xkzb\"},\"dynamicErrorMessage\":\"cjdx\"}")
            .toObject(AzureStorageJobExtendedInfo.class);
        Assertions.assertEquals("zevwrdnhfukuv", model.tasksList().get(0).taskId());
        Assertions.assertEquals("cswsmystul", model.tasksList().get(0).status());
        Assertions.assertEquals("pfcvlerchpqbmfp", model.propertyBag().get("babwidfcxss"));
        Assertions.assertEquals("cjdx", model.dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureStorageJobExtendedInfo model = new AzureStorageJobExtendedInfo()
            .withTasksList(
                Arrays.asList(new AzureStorageJobTaskDetails().withTaskId("zevwrdnhfukuv").withStatus("cswsmystul")))
            .withPropertyBag(mapOf("babwidfcxss", "pfcvlerchpqbmfp", "i", "uunnoxyhkxgqdd", "djvlpj", "pfhoqcaaewdao",
                "msgeivsiykzk", "xkzb"))
            .withDynamicErrorMessage("cjdx");
        model = BinaryData.fromObject(model).toObject(AzureStorageJobExtendedInfo.class);
        Assertions.assertEquals("zevwrdnhfukuv", model.tasksList().get(0).taskId());
        Assertions.assertEquals("cswsmystul", model.tasksList().get(0).status());
        Assertions.assertEquals("pfcvlerchpqbmfp", model.propertyBag().get("babwidfcxss"));
        Assertions.assertEquals("cjdx", model.dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
