// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"ddkvbxgkqu\",\"rehydrationPriority\":\"High\"},\"recoveryType\":\"AlternateLocation\",\"sourceResourceId\":\"dacarvvlfnty\",\"propertyBag\":{\"lsxkd\":\"oiwenazerohzrsq\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"fgsdpcvessmzhhk\",\"databaseName\":\"ip\",\"targetDirectoryForFileRestore\":\"q\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetResourceGroupName\":\"kva\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"htjqvqyvw\",\"identityName\":\"tae\",\"userAssignedIdentityProperties\":{\"clientId\":\"zzy\",\"principalId\":\"vusxiv\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"veimipskdyzatv\"},\"targetVirtualMachineId\":\"zkaftjvvrux\",\"resourceGuardOperationRequests\":[\"syeipqd\",\"mjtgrqg\",\"gkkileplkcsmkn\",\"wtbbaedorvvmqf\"]}")
            .toObject(AzureWorkloadSapHanaRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("syeipqd", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("dacarvvlfnty", model.sourceResourceId());
        Assertions.assertEquals("oiwenazerohzrsq", model.propertyBag().get("lsxkd"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("fgsdpcvessmzhhk", model.targetInfo().containerId());
        Assertions.assertEquals("ip", model.targetInfo().databaseName());
        Assertions.assertEquals("q", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("kva", model.targetResourceGroupName());
        Assertions.assertEquals("htjqvqyvw", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("tae", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("zzy",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("vusxiv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("veimipskdyzatv", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("zkaftjvvrux", model.targetVirtualMachineId());
        Assertions.assertEquals("ddkvbxgkqu", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaRestoreWithRehydrateRequest model = new AzureWorkloadSapHanaRestoreWithRehydrateRequest()
            .withResourceGuardOperationRequests(Arrays.asList("syeipqd", "mjtgrqg", "gkkileplkcsmkn", "wtbbaedorvvmqf"))
            .withRecoveryType(RecoveryType.ALTERNATE_LOCATION)
            .withSourceResourceId("dacarvvlfnty")
            .withPropertyBag(mapOf("lsxkd", "oiwenazerohzrsq"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID)
                .withContainerId("fgsdpcvessmzhhk")
                .withDatabaseName("ip")
                .withTargetDirectoryForFileRestore("q"))
            .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY)
            .withTargetResourceGroupName("kva")
            .withUserAssignedManagedIdentityDetails(
                new UserAssignedManagedIdentityDetails().withIdentityArmId("htjqvqyvw")
                    .withIdentityName("tae")
                    .withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("zzy").withPrincipalId("vusxiv")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(false)
                .withLogPointInTimeForDBRecovery("veimipskdyzatv"))
            .withTargetVirtualMachineId("zkaftjvvrux")
            .withRecoveryPointRehydrationInfo(
                new RecoveryPointRehydrationInfo().withRehydrationRetentionDuration("ddkvbxgkqu")
                    .withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("syeipqd", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("dacarvvlfnty", model.sourceResourceId());
        Assertions.assertEquals("oiwenazerohzrsq", model.propertyBag().get("lsxkd"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("fgsdpcvessmzhhk", model.targetInfo().containerId());
        Assertions.assertEquals("ip", model.targetInfo().databaseName());
        Assertions.assertEquals("q", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("kva", model.targetResourceGroupName());
        Assertions.assertEquals("htjqvqyvw", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("tae", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("zzy",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("vusxiv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("veimipskdyzatv", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("zkaftjvvrux", model.targetVirtualMachineId());
        Assertions.assertEquals("ddkvbxgkqu", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
