// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"rmgjfbpkuwx\",\"rehydrationPriority\":\"High\"},\"recoveryType\":\"RestoreDisks\",\"sourceResourceId\":\"izfavkjzwf\",\"propertyBag\":{\"sbfwxr\":\"aykmmf\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"wsrsxkrplbja\",\"databaseName\":\"jwwviy\",\"targetDirectoryForFileRestore\":\"ps\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"nnhj\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"wjh\",\"identityName\":\"biwetpo\",\"userAssignedIdentityProperties\":{\"clientId\":\"yqiq\",\"principalId\":\"gfsetzlexbsfled\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"ziu\"},\"targetVirtualMachineId\":\"bzkkd\",\"resourceGuardOperationRequests\":[\"qsyclj\",\"elpkpbafvafhlbyl\",\"cbevxrhyzdfw\"]}")
            .toObject(AzureWorkloadSapHanaRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("qsyclj", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("izfavkjzwf", model.sourceResourceId());
        Assertions.assertEquals("aykmmf", model.propertyBag().get("sbfwxr"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("wsrsxkrplbja", model.targetInfo().containerId());
        Assertions.assertEquals("jwwviy", model.targetInfo().databaseName());
        Assertions.assertEquals("ps", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nnhj", model.targetResourceGroupName());
        Assertions.assertEquals("wjh", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("biwetpo", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("yqiq",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("gfsetzlexbsfled",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("ziu", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("bzkkd", model.targetVirtualMachineId());
        Assertions.assertEquals("rmgjfbpkuwx", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaRestoreWithRehydrateRequest model = new AzureWorkloadSapHanaRestoreWithRehydrateRequest()
            .withResourceGuardOperationRequests(Arrays.asList("qsyclj", "elpkpbafvafhlbyl", "cbevxrhyzdfw"))
            .withRecoveryType(RecoveryType.RESTORE_DISKS)
            .withSourceResourceId("izfavkjzwf")
            .withPropertyBag(mapOf("sbfwxr", "aykmmf"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                .withContainerId("wsrsxkrplbja")
                .withDatabaseName("jwwviy")
                .withTargetDirectoryForFileRestore("ps"))
            .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
            .withTargetResourceGroupName("nnhj")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("wjh")
                .withIdentityName("biwetpo")
                .withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("yqiq").withPrincipalId("gfsetzlexbsfled")))
            .withSnapshotRestoreParameters(
                new SnapshotRestoreParameters().withSkipAttachAndMount(false).withLogPointInTimeForDBRecovery("ziu"))
            .withTargetVirtualMachineId("bzkkd")
            .withRecoveryPointRehydrationInfo(
                new RecoveryPointRehydrationInfo().withRehydrationRetentionDuration("rmgjfbpkuwx")
                    .withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("qsyclj", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("izfavkjzwf", model.sourceResourceId());
        Assertions.assertEquals("aykmmf", model.propertyBag().get("sbfwxr"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("wsrsxkrplbja", model.targetInfo().containerId());
        Assertions.assertEquals("jwwviy", model.targetInfo().databaseName());
        Assertions.assertEquals("ps", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nnhj", model.targetResourceGroupName());
        Assertions.assertEquals("wjh", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("biwetpo", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("yqiq",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("gfsetzlexbsfled",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("ziu", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("bzkkd", model.targetVirtualMachineId());
        Assertions.assertEquals("rmgjfbpkuwx", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
