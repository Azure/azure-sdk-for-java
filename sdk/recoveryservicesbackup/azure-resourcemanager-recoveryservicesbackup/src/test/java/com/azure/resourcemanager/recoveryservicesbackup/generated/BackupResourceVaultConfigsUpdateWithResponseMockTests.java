// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.BackupResourceVaultConfigResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupResourceVaultConfig;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupResourceVaultConfigResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.EnhancedSecurityState;
import com.azure.resourcemanager.recoveryservicesbackup.models.SoftDeleteFeatureState;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageType;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageTypeState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupResourceVaultConfigsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"storageModelType\":\"ReadAccessGeoZoneRedundant\",\"storageType\":\"Invalid\",\"storageTypeState\":\"Invalid\",\"enhancedSecurityState\":\"Invalid\",\"softDeleteFeatureState\":\"AlwaysON\",\"softDeleteRetentionPeriodInDays\":544365118,\"resourceGuardOperationRequests\":[\"fqiu\",\"sigrowsocnequygd\",\"bo\"],\"isSoftDeleteFeatureStateEditable\":true},\"eTag\":\"tqjkqevad\",\"location\":\"mmwiuawvcmjz\",\"tags\":{\"qiqazugamxzkr\":\"idisczskosw\",\"u\":\"coiisbamnppcce\",\"f\":\"tdsbezax\",\"y\":\"kzxuiz\"},\"id\":\"nepk\",\"name\":\"etiarxqiubxdukec\",\"type\":\"xdazv\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupResourceVaultConfigResource response = manager.backupResourceVaultConfigs().updateWithResponse("eumoqod",
            "adppyibn",
            new BackupResourceVaultConfigResourceInner().withLocation("lgmokzkl")
                .withTags(mapOf("rqcrjidhftukvh", "owtdvrfmvlihcvj", "fqz", "xlwyoj", "xmbjroum", "kfnjyixhafrat", "l",
                    "znv"))
                .withProperties(
                    new BackupResourceVaultConfig().withStorageModelType(StorageType.READ_ACCESS_GEO_ZONE_REDUNDANT)
                        .withStorageType(StorageType.LOCALLY_REDUNDANT).withStorageTypeState(StorageTypeState.UNLOCKED)
                        .withEnhancedSecurityState(EnhancedSecurityState.ENABLED)
                        .withSoftDeleteFeatureState(SoftDeleteFeatureState.INVALID)
                        .withSoftDeleteRetentionPeriodInDays(775084498)
                        .withResourceGuardOperationRequests(Arrays.asList("vvadswzs", "uyem", "owuowh"))
                        .withIsSoftDeleteFeatureStateEditable(false))
                .withEtag("wyrmouv"),
            com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("mmwiuawvcmjz", response.location());
        Assertions.assertEquals("idisczskosw", response.tags().get("qiqazugamxzkr"));
        Assertions.assertEquals(StorageType.READ_ACCESS_GEO_ZONE_REDUNDANT, response.properties().storageModelType());
        Assertions.assertEquals(StorageType.INVALID, response.properties().storageType());
        Assertions.assertEquals(StorageTypeState.INVALID, response.properties().storageTypeState());
        Assertions.assertEquals(EnhancedSecurityState.INVALID, response.properties().enhancedSecurityState());
        Assertions.assertEquals(SoftDeleteFeatureState.ALWAYS_ON, response.properties().softDeleteFeatureState());
        Assertions.assertEquals(544365118, response.properties().softDeleteRetentionPeriodInDays());
        Assertions.assertEquals("fqiu", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, response.properties().isSoftDeleteFeatureStateEditable());
        Assertions.assertEquals("tqjkqevad", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
