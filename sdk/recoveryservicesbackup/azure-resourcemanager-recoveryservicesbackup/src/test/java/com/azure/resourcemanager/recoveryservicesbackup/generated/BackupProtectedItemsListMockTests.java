// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupProtectedItemsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureWorkload\",\"workloadType\":\"Exchange\",\"containerName\":\"xolriy\",\"sourceResourceId\":\"qbeiv\",\"policyId\":\"hydwbdbfgrlp\",\"lastRecoveryPoint\":\"2021-04-14T08:24:05Z\",\"backupSetName\":\"jlkesmmpath\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2021-04-15T07:19:42Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"niiwllbvgwz\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"us\",\"ktjtgra\"],\"isArchiveEnabled\":true,\"policyName\":\"gfkbebauzlqbtxx\",\"softDeleteRetentionPeriod\":165984446},\"eTag\":\"njzudr\",\"location\":\"pzkg\",\"tags\":{\"ygisrz\":\"oywhczzqrhmngqbe\"},\"id\":\"nykdi\",\"name\":\"jch\",\"type\":\"rmpwctofld\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ProtectedItemResource> response =
            manager
                .backupProtectedItems()
                .list("gazlsvbz", "cpuo", "e", "wjcciklhsy", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pzkg", response.iterator().next().location());
        Assertions.assertEquals("oywhczzqrhmngqbe", response.iterator().next().tags().get("ygisrz"));
        Assertions.assertEquals("xolriy", response.iterator().next().properties().containerName());
        Assertions.assertEquals("qbeiv", response.iterator().next().properties().sourceResourceId());
        Assertions.assertEquals("hydwbdbfgrlp", response.iterator().next().properties().policyId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-14T08:24:05Z"),
                response.iterator().next().properties().lastRecoveryPoint());
        Assertions.assertEquals("jlkesmmpath", response.iterator().next().properties().backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, response.iterator().next().properties().createMode());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-15T07:19:42Z"),
                response.iterator().next().properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, response.iterator().next().properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("niiwllbvgwz", response.iterator().next().properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, response.iterator().next().properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, response.iterator().next().properties().isRehydrate());
        Assertions.assertEquals("us", response.iterator().next().properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, response.iterator().next().properties().isArchiveEnabled());
        Assertions.assertEquals("gfkbebauzlqbtxx", response.iterator().next().properties().policyName());
        Assertions.assertEquals(165984446, response.iterator().next().properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("njzudr", response.iterator().next().etag());
    }
}
