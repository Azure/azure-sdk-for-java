// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapAseRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapAseRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapAseRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPAseRestoreRequest\",\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"tijv\",\"propertyBag\":{\"cevehjkuyxoafg\":\"bmqzbqqxlajrnwx\",\"linmfgv\":\"oqltfae\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"hriypoqeyhlqhy\",\"databaseName\":\"rlpyznuciqdsmexi\",\"targetDirectoryForFileRestore\":\"dfuxtya\"},\"recoveryMode\":\"Invalid\",\"targetResourceGroupName\":\"miybnn\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"gnljhnmgixhcm\",\"identityName\":\"mqfoudorh\",\"userAssignedIdentityProperties\":{\"clientId\":\"yprotwyp\",\"principalId\":\"d\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"gcmjkavl\"},\"targetVirtualMachineId\":\"rb\",\"resourceGuardOperationRequests\":[\"pmdtz\"]}")
            .toObject(AzureWorkloadSapAseRestoreRequest.class);
        Assertions.assertEquals("pmdtz", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("tijv", model.sourceResourceId());
        Assertions.assertEquals("bmqzbqqxlajrnwx", model.propertyBag().get("cevehjkuyxoafg"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("hriypoqeyhlqhy", model.targetInfo().containerId());
        Assertions.assertEquals("rlpyznuciqdsmexi", model.targetInfo().databaseName());
        Assertions.assertEquals("dfuxtya", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("miybnn", model.targetResourceGroupName());
        Assertions.assertEquals("gnljhnmgixhcm", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("mqfoudorh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("yprotwyp",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("d",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("gcmjkavl", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("rb", model.targetVirtualMachineId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapAseRestoreRequest model
            = new AzureWorkloadSapAseRestoreRequest().withResourceGuardOperationRequests(Arrays.asList("pmdtz"))
                .withRecoveryType(RecoveryType.INVALID)
                .withSourceResourceId("tijv")
                .withPropertyBag(mapOf("cevehjkuyxoafg", "bmqzbqqxlajrnwx", "linmfgv", "oqltfae"))
                .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                    .withContainerId("hriypoqeyhlqhy")
                    .withDatabaseName("rlpyznuciqdsmexi")
                    .withTargetDirectoryForFileRestore("dfuxtya"))
                .withRecoveryMode(RecoveryMode.INVALID)
                .withTargetResourceGroupName("miybnn")
                .withUserAssignedManagedIdentityDetails(
                    new UserAssignedManagedIdentityDetails().withIdentityArmId("gnljhnmgixhcm")
                        .withIdentityName("mqfoudorh")
                        .withUserAssignedIdentityProperties(
                            new UserAssignedIdentityProperties().withClientId("yprotwyp").withPrincipalId("d")))
                .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(false)
                    .withLogPointInTimeForDBRecovery("gcmjkavl"))
                .withTargetVirtualMachineId("rb");
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapAseRestoreRequest.class);
        Assertions.assertEquals("pmdtz", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("tijv", model.sourceResourceId());
        Assertions.assertEquals("bmqzbqqxlajrnwx", model.propertyBag().get("cevehjkuyxoafg"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("hriypoqeyhlqhy", model.targetInfo().containerId());
        Assertions.assertEquals("rlpyznuciqdsmexi", model.targetInfo().databaseName());
        Assertions.assertEquals("dfuxtya", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("miybnn", model.targetResourceGroupName());
        Assertions.assertEquals("gnljhnmgixhcm", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("mqfoudorh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("yprotwyp",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("d",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("gcmjkavl", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("rb", model.targetVirtualMachineId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
