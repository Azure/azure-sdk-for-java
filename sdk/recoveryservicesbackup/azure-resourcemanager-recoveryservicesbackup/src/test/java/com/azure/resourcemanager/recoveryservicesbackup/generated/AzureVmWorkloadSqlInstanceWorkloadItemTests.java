// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureVmWorkloadSqlInstanceWorkloadItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectory;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AzureVmWorkloadSqlInstanceWorkloadItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureVmWorkloadSqlInstanceWorkloadItem model = BinaryData.fromString(
            "{\"workloadItemType\":\"SQLInstance\",\"dataDirectoryPaths\":[{\"type\":\"Log\",\"path\":\"pxqwo\",\"logicalName\":\"ffjxcjrmmuabwib\"}],\"parentName\":\"ogjo\",\"serverName\":\"cyefoyzbamwine\",\"isAutoProtectable\":true,\"subinquireditemcount\":693534983,\"subWorkloadItemCount\":1060241392,\"backupManagementType\":\"oldtvevboclzhz\",\"workloadType\":\"n\",\"friendlyName\":\"xgvttxp\",\"protectionState\":\"ProtectionFailed\"}")
            .toObject(AzureVmWorkloadSqlInstanceWorkloadItem.class);
        Assertions.assertEquals("oldtvevboclzhz", model.backupManagementType());
        Assertions.assertEquals("n", model.workloadType());
        Assertions.assertEquals("xgvttxp", model.friendlyName());
        Assertions.assertEquals(ProtectionStatus.PROTECTION_FAILED, model.protectionState());
        Assertions.assertEquals("ogjo", model.parentName());
        Assertions.assertEquals("cyefoyzbamwine", model.serverName());
        Assertions.assertEquals(true, model.isAutoProtectable());
        Assertions.assertEquals(693534983, model.subinquireditemcount());
        Assertions.assertEquals(1060241392, model.subWorkloadItemCount());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("pxqwo", model.dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("ffjxcjrmmuabwib", model.dataDirectoryPaths().get(0).logicalName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureVmWorkloadSqlInstanceWorkloadItem model
            = new AzureVmWorkloadSqlInstanceWorkloadItem().withBackupManagementType("oldtvevboclzhz")
                .withWorkloadType("n")
                .withFriendlyName("xgvttxp")
                .withProtectionState(ProtectionStatus.PROTECTION_FAILED)
                .withParentName("ogjo")
                .withServerName("cyefoyzbamwine")
                .withIsAutoProtectable(true)
                .withSubinquireditemcount(693534983)
                .withSubWorkloadItemCount(1060241392)
                .withDataDirectoryPaths(Arrays.asList(new SqlDataDirectory().withType(SqlDataDirectoryType.LOG)
                    .withPath("pxqwo")
                    .withLogicalName("ffjxcjrmmuabwib")));
        model = BinaryData.fromObject(model).toObject(AzureVmWorkloadSqlInstanceWorkloadItem.class);
        Assertions.assertEquals("oldtvevboclzhz", model.backupManagementType());
        Assertions.assertEquals("n", model.workloadType());
        Assertions.assertEquals("xgvttxp", model.friendlyName());
        Assertions.assertEquals(ProtectionStatus.PROTECTION_FAILED, model.protectionState());
        Assertions.assertEquals("ogjo", model.parentName());
        Assertions.assertEquals("cyefoyzbamwine", model.serverName());
        Assertions.assertEquals(true, model.isAutoProtectable());
        Assertions.assertEquals(693534983, model.subinquireditemcount());
        Assertions.assertEquals(1060241392, model.subWorkloadItemCount());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("pxqwo", model.dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("ffjxcjrmmuabwib", model.dataDirectoryPaths().get(0).logicalName());
    }
}
