// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobTaskDetails;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MabJobExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MabJobExtendedInfo model = BinaryData.fromString(
            "{\"tasksList\":[{\"taskId\":\"ehewhoqh\",\"startTime\":\"2021-07-22T20:31:39Z\",\"endTime\":\"2021-02-23T10:26:16Z\",\"duration\":\"PT58H48M1S\",\"status\":\"xeaclgsc\"}],\"propertyBag\":{\"ofldpuviyfcaa\":\"imkrsrrmouc\"},\"dynamicErrorMessage\":\"olhbhlvb\"}")
            .toObject(MabJobExtendedInfo.class);
        Assertions.assertEquals("ehewhoqh", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T20:31:39Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T10:26:16Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT58H48M1S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("xeaclgsc", model.tasksList().get(0).status());
        Assertions.assertEquals("imkrsrrmouc", model.propertyBag().get("ofldpuviyfcaa"));
        Assertions.assertEquals("olhbhlvb", model.dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MabJobExtendedInfo model = new MabJobExtendedInfo()
            .withTasksList(Arrays.asList(new MabJobTaskDetails().withTaskId("ehewhoqh")
                .withStartTime(OffsetDateTime.parse("2021-07-22T20:31:39Z"))
                .withEndTime(OffsetDateTime.parse("2021-02-23T10:26:16Z"))
                .withDuration(Duration.parse("PT58H48M1S"))
                .withStatus("xeaclgsc")))
            .withPropertyBag(mapOf("ofldpuviyfcaa", "imkrsrrmouc"))
            .withDynamicErrorMessage("olhbhlvb");
        model = BinaryData.fromObject(model).toObject(MabJobExtendedInfo.class);
        Assertions.assertEquals("ehewhoqh", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T20:31:39Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T10:26:16Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT58H48M1S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("xeaclgsc", model.tasksList().get(0).status());
        Assertions.assertEquals("imkrsrrmouc", model.propertyBag().get("ofldpuviyfcaa"));
        Assertions.assertEquals("olhbhlvb", model.dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
