// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobTaskDetails;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MabJobExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MabJobExtendedInfo model = BinaryData.fromString(
            "{\"tasksList\":[{\"taskId\":\"rr\",\"startTime\":\"2021-09-26T10:44:20Z\",\"endTime\":\"2021-04-08T08:51:31Z\",\"duration\":\"PT56H52M7S\",\"status\":\"kzudn\"},{\"taskId\":\"rfih\",\"startTime\":\"2021-08-14T07:35:37Z\",\"endTime\":\"2021-11-27T01:46:36Z\",\"duration\":\"PT80H59M41S\",\"status\":\"uzzjgnrefq\"},{\"taskId\":\"qotoihiqakydiwfb\",\"startTime\":\"2021-01-24T08:46:06Z\",\"endTime\":\"2021-07-02T17:59:05Z\",\"duration\":\"PT191H55M41S\",\"status\":\"vhcspodaqaxsip\"},{\"taskId\":\"tgbebj\",\"startTime\":\"2021-04-15T14:48:50Z\",\"endTime\":\"2021-09-18T23:08:53Z\",\"duration\":\"PT192H52M50S\",\"status\":\"h\"}],\"propertyBag\":{\"iqsowsaaelc\":\"nfpubntnbatz\",\"mjvlgfgg\":\"ttcjuhplrvkmjc\",\"sfuztlvtmv\":\"vkyylizrzbjpsf\"},\"dynamicErrorMessage\":\"bwidql\"}")
            .toObject(MabJobExtendedInfo.class);
        Assertions.assertEquals("rr", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T10:44:20Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-08T08:51:31Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT56H52M7S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("kzudn", model.tasksList().get(0).status());
        Assertions.assertEquals("nfpubntnbatz", model.propertyBag().get("iqsowsaaelc"));
        Assertions.assertEquals("bwidql", model.dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MabJobExtendedInfo model = new MabJobExtendedInfo()
            .withTasksList(Arrays.asList(
                new MabJobTaskDetails().withTaskId("rr")
                    .withStartTime(OffsetDateTime.parse("2021-09-26T10:44:20Z"))
                    .withEndTime(OffsetDateTime.parse("2021-04-08T08:51:31Z"))
                    .withDuration(Duration.parse("PT56H52M7S"))
                    .withStatus("kzudn"),
                new MabJobTaskDetails().withTaskId("rfih")
                    .withStartTime(OffsetDateTime.parse("2021-08-14T07:35:37Z"))
                    .withEndTime(OffsetDateTime.parse("2021-11-27T01:46:36Z"))
                    .withDuration(Duration.parse("PT80H59M41S"))
                    .withStatus("uzzjgnrefq"),
                new MabJobTaskDetails().withTaskId("qotoihiqakydiwfb")
                    .withStartTime(OffsetDateTime.parse("2021-01-24T08:46:06Z"))
                    .withEndTime(OffsetDateTime.parse("2021-07-02T17:59:05Z"))
                    .withDuration(Duration.parse("PT191H55M41S"))
                    .withStatus("vhcspodaqaxsip"),
                new MabJobTaskDetails().withTaskId("tgbebj")
                    .withStartTime(OffsetDateTime.parse("2021-04-15T14:48:50Z"))
                    .withEndTime(OffsetDateTime.parse("2021-09-18T23:08:53Z"))
                    .withDuration(Duration.parse("PT192H52M50S"))
                    .withStatus("h")))
            .withPropertyBag(
                mapOf("iqsowsaaelc", "nfpubntnbatz", "mjvlgfgg", "ttcjuhplrvkmjc", "sfuztlvtmv", "vkyylizrzbjpsf"))
            .withDynamicErrorMessage("bwidql");
        model = BinaryData.fromObject(model).toObject(MabJobExtendedInfo.class);
        Assertions.assertEquals("rr", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T10:44:20Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-08T08:51:31Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT56H52M7S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("kzudn", model.tasksList().get(0).status());
        Assertions.assertEquals("nfpubntnbatz", model.propertyBag().get("iqsowsaaelc"));
        Assertions.assertEquals("bwidql", model.dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
