// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobTaskDetails;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MabJobExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MabJobExtendedInfo model =
            BinaryData
                .fromString(
                    "{\"tasksList\":[{\"taskId\":\"otoebnfxofv\",\"startTime\":\"2021-09-15T14:39:53Z\",\"endTime\":\"2021-09-28T16:04:02Z\",\"duration\":\"PT5H22M10S\",\"status\":\"zft\"},{\"taskId\":\"jwabmd\",\"startTime\":\"2020-12-30T22:06:45Z\",\"endTime\":\"2021-09-05T22:04:34Z\",\"duration\":\"PT221H25M36S\",\"status\":\"excmjurbuhhl\"},{\"taskId\":\"ql\",\"startTime\":\"2021-09-15T19:03:26Z\",\"endTime\":\"2020-12-29T06:02:05Z\",\"duration\":\"PT131H33M12S\",\"status\":\"wkffdjkt\"},{\"taskId\":\"sidfv\",\"startTime\":\"2021-03-08T02:03:27Z\",\"endTime\":\"2021-04-19T23:13:15Z\",\"duration\":\"PT221H9M43S\",\"status\":\"ijtk\"}],\"propertyBag\":{\"haru\":\"qogsfikayian\"},\"dynamicErrorMessage\":\"ji\"}")
                .toObject(MabJobExtendedInfo.class);
        Assertions.assertEquals("otoebnfxofv", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T14:39:53Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-28T16:04:02Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT5H22M10S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("zft", model.tasksList().get(0).status());
        Assertions.assertEquals("qogsfikayian", model.propertyBag().get("haru"));
        Assertions.assertEquals("ji", model.dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MabJobExtendedInfo model =
            new MabJobExtendedInfo()
                .withTasksList(
                    Arrays
                        .asList(
                            new MabJobTaskDetails()
                                .withTaskId("otoebnfxofv")
                                .withStartTime(OffsetDateTime.parse("2021-09-15T14:39:53Z"))
                                .withEndTime(OffsetDateTime.parse("2021-09-28T16:04:02Z"))
                                .withDuration(Duration.parse("PT5H22M10S"))
                                .withStatus("zft"),
                            new MabJobTaskDetails()
                                .withTaskId("jwabmd")
                                .withStartTime(OffsetDateTime.parse("2020-12-30T22:06:45Z"))
                                .withEndTime(OffsetDateTime.parse("2021-09-05T22:04:34Z"))
                                .withDuration(Duration.parse("PT221H25M36S"))
                                .withStatus("excmjurbuhhl"),
                            new MabJobTaskDetails()
                                .withTaskId("ql")
                                .withStartTime(OffsetDateTime.parse("2021-09-15T19:03:26Z"))
                                .withEndTime(OffsetDateTime.parse("2020-12-29T06:02:05Z"))
                                .withDuration(Duration.parse("PT131H33M12S"))
                                .withStatus("wkffdjkt"),
                            new MabJobTaskDetails()
                                .withTaskId("sidfv")
                                .withStartTime(OffsetDateTime.parse("2021-03-08T02:03:27Z"))
                                .withEndTime(OffsetDateTime.parse("2021-04-19T23:13:15Z"))
                                .withDuration(Duration.parse("PT221H9M43S"))
                                .withStatus("ijtk")))
                .withPropertyBag(mapOf("haru", "qogsfikayian"))
                .withDynamicErrorMessage("ji");
        model = BinaryData.fromObject(model).toObject(MabJobExtendedInfo.class);
        Assertions.assertEquals("otoebnfxofv", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T14:39:53Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-28T16:04:02Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT5H22M10S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("zft", model.tasksList().get(0).status());
        Assertions.assertEquals("qogsfikayian", model.propertyBag().get("haru"));
        Assertions.assertEquals("ji", model.dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
