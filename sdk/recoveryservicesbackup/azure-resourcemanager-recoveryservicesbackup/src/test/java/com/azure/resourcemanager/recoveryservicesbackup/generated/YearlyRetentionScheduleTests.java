// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.Day;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthOfYear;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionScheduleFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeekOfMonth;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.YearlyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class YearlyRetentionScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        YearlyRetentionSchedule model = BinaryData.fromString(
            "{\"retentionScheduleFormatType\":\"Invalid\",\"monthsOfYear\":[\"June\",\"February\",\"September\"],\"retentionScheduleDaily\":{\"daysOfTheMonth\":[{\"date\":155784561,\"isLast\":true},{\"date\":1520508810,\"isLast\":true}]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Friday\",\"Tuesday\"],\"weeksOfTheMonth\":[\"Second\",\"Invalid\",\"Third\",\"Invalid\"]},\"retentionTimes\":[\"2021-02-08T14:31:19Z\"],\"retentionDuration\":{\"count\":292519472,\"durationType\":\"Weeks\"}}")
            .toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.INVALID, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JUNE, model.monthsOfYear().get(0));
        Assertions.assertEquals(155784561, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(true, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.SECOND, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T14:31:19Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(292519472, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        YearlyRetentionSchedule model
            = new YearlyRetentionSchedule().withRetentionScheduleFormatType(RetentionScheduleFormat.INVALID)
                .withMonthsOfYear(Arrays.asList(MonthOfYear.JUNE, MonthOfYear.FEBRUARY, MonthOfYear.SEPTEMBER))
                .withRetentionScheduleDaily(new DailyRetentionFormat().withDaysOfTheMonth(Arrays.asList(
                    new Day().withDate(155784561).withIsLast(true), new Day().withDate(1520508810).withIsLast(true))))
                .withRetentionScheduleWeekly(
                    new WeeklyRetentionFormat().withDaysOfTheWeek(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.TUESDAY))
                        .withWeeksOfTheMonth(Arrays.asList(WeekOfMonth.SECOND, WeekOfMonth.INVALID, WeekOfMonth.THIRD,
                            WeekOfMonth.INVALID)))
                .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-02-08T14:31:19Z"))).withRetentionDuration(
                    new RetentionDuration().withCount(292519472).withDurationType(RetentionDurationType.WEEKS));
        model = BinaryData.fromObject(model).toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.INVALID, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JUNE, model.monthsOfYear().get(0));
        Assertions.assertEquals(155784561, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(true, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.SECOND, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T14:31:19Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(292519472, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.retentionDuration().durationType());
    }
}
