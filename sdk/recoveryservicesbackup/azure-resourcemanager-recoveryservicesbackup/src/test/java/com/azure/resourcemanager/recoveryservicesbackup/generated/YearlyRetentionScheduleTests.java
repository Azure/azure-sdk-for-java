// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.Day;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthOfYear;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionScheduleFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeekOfMonth;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.YearlyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class YearlyRetentionScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        YearlyRetentionSchedule model =
            BinaryData
                .fromString(
                    "{\"retentionScheduleFormatType\":\"Weekly\",\"monthsOfYear\":[\"June\"],\"retentionScheduleDaily\":{\"daysOfTheMonth\":[{\"date\":468941309,\"isLast\":true}]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Thursday\",\"Friday\"],\"weeksOfTheMonth\":[\"Third\",\"Invalid\"]},\"retentionTimes\":[\"2021-07-15T16:39:33Z\",\"2021-10-27T23:36:18Z\",\"2021-02-05T10:32:17Z\",\"2020-12-29T10:58:54Z\"],\"retentionDuration\":{\"count\":1836510862,\"durationType\":\"Days\"}}")
                .toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JUNE, model.monthsOfYear().get(0));
        Assertions.assertEquals(468941309, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(true, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.THIRD, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T16:39:33Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(1836510862, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        YearlyRetentionSchedule model =
            new YearlyRetentionSchedule()
                .withRetentionScheduleFormatType(RetentionScheduleFormat.WEEKLY)
                .withMonthsOfYear(Arrays.asList(MonthOfYear.JUNE))
                .withRetentionScheduleDaily(
                    new DailyRetentionFormat()
                        .withDaysOfTheMonth(Arrays.asList(new Day().withDate(468941309).withIsLast(true))))
                .withRetentionScheduleWeekly(
                    new WeeklyRetentionFormat()
                        .withDaysOfTheWeek(Arrays.asList(DayOfWeek.THURSDAY, DayOfWeek.FRIDAY))
                        .withWeeksOfTheMonth(Arrays.asList(WeekOfMonth.THIRD, WeekOfMonth.INVALID)))
                .withRetentionTimes(
                    Arrays
                        .asList(
                            OffsetDateTime.parse("2021-07-15T16:39:33Z"),
                            OffsetDateTime.parse("2021-10-27T23:36:18Z"),
                            OffsetDateTime.parse("2021-02-05T10:32:17Z"),
                            OffsetDateTime.parse("2020-12-29T10:58:54Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(1836510862).withDurationType(RetentionDurationType.DAYS));
        model = BinaryData.fromObject(model).toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.WEEKLY, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JUNE, model.monthsOfYear().get(0));
        Assertions.assertEquals(468941309, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(true, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.THIRD, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T16:39:33Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(1836510862, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.DAYS, model.retentionDuration().durationType());
    }
}
