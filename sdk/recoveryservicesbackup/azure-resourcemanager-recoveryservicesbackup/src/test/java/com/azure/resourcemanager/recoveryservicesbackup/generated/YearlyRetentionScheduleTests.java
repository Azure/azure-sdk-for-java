// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.Day;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthOfYear;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionScheduleFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeekOfMonth;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.YearlyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class YearlyRetentionScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        YearlyRetentionSchedule model =
            BinaryData
                .fromString(
                    "{\"retentionScheduleFormatType\":\"Daily\",\"monthsOfYear\":[\"June\",\"August\",\"March\",\"November\"],\"retentionScheduleDaily\":{\"daysOfTheMonth\":[{\"date\":703161426,\"isLast\":false},{\"date\":172898691,\"isLast\":false},{\"date\":1241682628,\"isLast\":false},{\"date\":125495169,\"isLast\":false}]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Friday\",\"Thursday\",\"Sunday\"],\"weeksOfTheMonth\":[\"Last\",\"Fourth\"]},\"retentionTimes\":[\"2021-09-02T19:32:53Z\",\"2021-10-22T02:54:53Z\"],\"retentionDuration\":{\"count\":2022448357,\"durationType\":\"Years\"}}")
                .toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.DAILY, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JUNE, model.monthsOfYear().get(0));
        Assertions.assertEquals(703161426, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.LAST, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T19:32:53Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(2022448357, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.YEARS, model.retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        YearlyRetentionSchedule model =
            new YearlyRetentionSchedule()
                .withRetentionScheduleFormatType(RetentionScheduleFormat.DAILY)
                .withMonthsOfYear(
                    Arrays.asList(MonthOfYear.JUNE, MonthOfYear.AUGUST, MonthOfYear.MARCH, MonthOfYear.NOVEMBER))
                .withRetentionScheduleDaily(
                    new DailyRetentionFormat()
                        .withDaysOfTheMonth(
                            Arrays
                                .asList(
                                    new Day().withDate(703161426).withIsLast(false),
                                    new Day().withDate(172898691).withIsLast(false),
                                    new Day().withDate(1241682628).withIsLast(false),
                                    new Day().withDate(125495169).withIsLast(false))))
                .withRetentionScheduleWeekly(
                    new WeeklyRetentionFormat()
                        .withDaysOfTheWeek(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.THURSDAY, DayOfWeek.SUNDAY))
                        .withWeeksOfTheMonth(Arrays.asList(WeekOfMonth.LAST, WeekOfMonth.FOURTH)))
                .withRetentionTimes(
                    Arrays
                        .asList(
                            OffsetDateTime.parse("2021-09-02T19:32:53Z"), OffsetDateTime.parse("2021-10-22T02:54:53Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(2022448357).withDurationType(RetentionDurationType.YEARS));
        model = BinaryData.fromObject(model).toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.DAILY, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.JUNE, model.monthsOfYear().get(0));
        Assertions.assertEquals(703161426, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.LAST, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T19:32:53Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(2022448357, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.YEARS, model.retentionDuration().durationType());
    }
}
