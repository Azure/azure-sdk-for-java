// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.Day;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.MonthOfYear;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionScheduleFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeekOfMonth;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionFormat;
import com.azure.resourcemanager.recoveryservicesbackup.models.YearlyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class YearlyRetentionScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        YearlyRetentionSchedule model = BinaryData.fromString(
            "{\"retentionScheduleFormatType\":\"Invalid\",\"monthsOfYear\":[\"October\",\"November\"],\"retentionScheduleDaily\":{\"daysOfTheMonth\":[{\"date\":1046360086,\"isLast\":false}]},\"retentionScheduleWeekly\":{\"daysOfTheWeek\":[\"Monday\",\"Saturday\",\"Sunday\",\"Saturday\"],\"weeksOfTheMonth\":[\"Third\",\"Third\",\"Fourth\",\"Third\"]},\"retentionTimes\":[\"2021-03-22T04:29:22Z\"],\"retentionDuration\":{\"count\":328440164,\"durationType\":\"Weeks\"}}")
            .toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.INVALID, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.OCTOBER, model.monthsOfYear().get(0));
        Assertions.assertEquals(1046360086, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.MONDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.THIRD, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T04:29:22Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(328440164, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        YearlyRetentionSchedule model
            = new YearlyRetentionSchedule().withRetentionScheduleFormatType(RetentionScheduleFormat.INVALID)
                .withMonthsOfYear(Arrays.asList(MonthOfYear.OCTOBER, MonthOfYear.NOVEMBER))
                .withRetentionScheduleDaily(new DailyRetentionFormat()
                    .withDaysOfTheMonth(Arrays.asList(new Day().withDate(1046360086).withIsLast(false))))
                .withRetentionScheduleWeekly(new WeeklyRetentionFormat()
                    .withDaysOfTheWeek(
                        Arrays.asList(DayOfWeek.MONDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY, DayOfWeek.SATURDAY))
                    .withWeeksOfTheMonth(
                        Arrays.asList(WeekOfMonth.THIRD, WeekOfMonth.THIRD, WeekOfMonth.FOURTH, WeekOfMonth.THIRD)))
                .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-03-22T04:29:22Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(328440164).withDurationType(RetentionDurationType.WEEKS));
        model = BinaryData.fromObject(model).toObject(YearlyRetentionSchedule.class);
        Assertions.assertEquals(RetentionScheduleFormat.INVALID, model.retentionScheduleFormatType());
        Assertions.assertEquals(MonthOfYear.OCTOBER, model.monthsOfYear().get(0));
        Assertions.assertEquals(1046360086, model.retentionScheduleDaily().daysOfTheMonth().get(0).date());
        Assertions.assertEquals(false, model.retentionScheduleDaily().daysOfTheMonth().get(0).isLast());
        Assertions.assertEquals(DayOfWeek.MONDAY, model.retentionScheduleWeekly().daysOfTheWeek().get(0));
        Assertions.assertEquals(WeekOfMonth.THIRD, model.retentionScheduleWeekly().weeksOfTheMonth().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T04:29:22Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(328440164, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.retentionDuration().durationType());
    }
}
