// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobTaskDetails;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DpmJobExtendedInfoTests {
    @Test
    public void testDeserialize() {
        DpmJobExtendedInfo model =
            BinaryData
                .fromString(
                    "{\"tasksList\":[{\"taskId\":\"mlrqryxynqnz\",\"startTime\":\"2021-02-04T14:35:25Z\",\"endTime\":\"2021-03-13T11:56:36Z\",\"duration\":\"PT216H29M31S\",\"status\":\"zn\"}],\"propertyBag\":{\"b\":\"oeiy\",\"hv\":\"bp\",\"igjkskyrio\":\"slkvntjl\",\"mifrygznmma\":\"vzidsxwaab\"},\"dynamicErrorMessage\":\"izkzobgo\"}")
                .toObject(DpmJobExtendedInfo.class);
        Assertions.assertEquals("mlrqryxynqnz", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T14:35:25Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-13T11:56:36Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT216H29M31S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("zn", model.tasksList().get(0).status());
        Assertions.assertEquals("oeiy", model.propertyBag().get("b"));
        Assertions.assertEquals("izkzobgo", model.dynamicErrorMessage());
    }

    @Test
    public void testSerialize() {
        DpmJobExtendedInfo model =
            new DpmJobExtendedInfo()
                .withTasksList(
                    Arrays
                        .asList(
                            new DpmJobTaskDetails()
                                .withTaskId("mlrqryxynqnz")
                                .withStartTime(OffsetDateTime.parse("2021-02-04T14:35:25Z"))
                                .withEndTime(OffsetDateTime.parse("2021-03-13T11:56:36Z"))
                                .withDuration(Duration.parse("PT216H29M31S"))
                                .withStatus("zn")))
                .withPropertyBag(mapOf("b", "oeiy", "hv", "bp", "igjkskyrio", "slkvntjl", "mifrygznmma", "vzidsxwaab"))
                .withDynamicErrorMessage("izkzobgo");
        model = BinaryData.fromObject(model).toObject(DpmJobExtendedInfo.class);
        Assertions.assertEquals("mlrqryxynqnz", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T14:35:25Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-13T11:56:36Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT216H29M31S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("zn", model.tasksList().get(0).status());
        Assertions.assertEquals("oeiy", model.propertyBag().get("b"));
        Assertions.assertEquals("izkzobgo", model.dynamicErrorMessage());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
