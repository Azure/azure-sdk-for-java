// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobTaskDetails;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmJobExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmJobExtendedInfo model = BinaryData.fromString(
            "{\"tasksList\":[{\"taskId\":\"qtobaxkjeyt\",\"startTime\":\"2021-10-31T09:27:21Z\",\"endTime\":\"2021-07-22T08:57:15Z\",\"duration\":\"PT40H53M57S\",\"status\":\"rusnk\"},{\"taskId\":\"hsyrqunj\",\"startTime\":\"2021-06-10T18:51:05Z\",\"endTime\":\"2021-04-30T12:14:16Z\",\"duration\":\"PT90H56M59S\",\"status\":\"l\"},{\"taskId\":\"akdkifmjnnawtqab\",\"startTime\":\"2021-06-23T13:06:59Z\",\"endTime\":\"2021-05-18T06:32:42Z\",\"duration\":\"PT68H55M51S\",\"status\":\"qoweyirdhl\"}],\"propertyBag\":{\"mpizru\":\"gwflq\",\"qxpxiwfcngjsaa\":\"n\",\"kv\":\"iixtmkzj\",\"ra\":\"irhgfgrwsdp\"},\"dynamicErrorMessage\":\"vzbglbyvi\"}")
            .toObject(DpmJobExtendedInfo.class);
        Assertions.assertEquals("qtobaxkjeyt", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T09:27:21Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T08:57:15Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT40H53M57S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("rusnk", model.tasksList().get(0).status());
        Assertions.assertEquals("gwflq", model.propertyBag().get("mpizru"));
        Assertions.assertEquals("vzbglbyvi", model.dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmJobExtendedInfo model = new DpmJobExtendedInfo()
            .withTasksList(Arrays.asList(
                new DpmJobTaskDetails().withTaskId("qtobaxkjeyt")
                    .withStartTime(OffsetDateTime.parse("2021-10-31T09:27:21Z"))
                    .withEndTime(OffsetDateTime.parse("2021-07-22T08:57:15Z"))
                    .withDuration(Duration.parse("PT40H53M57S"))
                    .withStatus("rusnk"),
                new DpmJobTaskDetails().withTaskId("hsyrqunj")
                    .withStartTime(OffsetDateTime.parse("2021-06-10T18:51:05Z"))
                    .withEndTime(OffsetDateTime.parse("2021-04-30T12:14:16Z"))
                    .withDuration(Duration.parse("PT90H56M59S"))
                    .withStatus("l"),
                new DpmJobTaskDetails().withTaskId("akdkifmjnnawtqab")
                    .withStartTime(OffsetDateTime.parse("2021-06-23T13:06:59Z"))
                    .withEndTime(OffsetDateTime.parse("2021-05-18T06:32:42Z"))
                    .withDuration(Duration.parse("PT68H55M51S"))
                    .withStatus("qoweyirdhl")))
            .withPropertyBag(mapOf("mpizru", "gwflq", "qxpxiwfcngjsaa", "n", "kv", "iixtmkzj", "ra", "irhgfgrwsdp"))
            .withDynamicErrorMessage("vzbglbyvi");
        model = BinaryData.fromObject(model).toObject(DpmJobExtendedInfo.class);
        Assertions.assertEquals("qtobaxkjeyt", model.tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T09:27:21Z"), model.tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T08:57:15Z"), model.tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT40H53M57S"), model.tasksList().get(0).duration());
        Assertions.assertEquals("rusnk", model.tasksList().get(0).status());
        Assertions.assertEquals("gwflq", model.propertyBag().get("mpizru"));
        Assertions.assertEquals("vzbglbyvi", model.dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
