// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadPointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadPointInTimeRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadPointInTimeRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadPointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-10-23T15:17:09Z\",\"endTime\":\"2021-07-08T19:53:14Z\"},{\"startTime\":\"2021-02-03T00:44:07Z\",\"endTime\":\"2021-09-14T23:20:53Z\"}],\"recoveryPointTimeInUTC\":\"2021-09-18T20:37:44Z\",\"type\":\"Invalid\",\"recoveryPointTierDetails\":[{\"type\":\"InstantRP\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"ieknl\":\"ycavodggxdbees\",\"agy\":\"ariaawi\"}},{\"type\":\"Invalid\",\"status\":\"Valid\",\"extendedInfo\":{\"giagtcojo\":\"yr\"}},{\"type\":\"HardenedRP\",\"status\":\"Valid\",\"extendedInfo\":{\"uxylfsbtkadpy\":\"zjvusfzldmo\",\"tgkbugrjqctojc\":\"own\",\"cuplcplcwkhih\":\"isofieypefojyqd\"}},{\"type\":\"HardenedRP\",\"status\":\"Valid\",\"extendedInfo\":{\"s\":\"qtz\",\"txmwoteyow\":\"gnowcjhfgmveca\"}}],\"recoveryPointMoveReadinessInfo\":{\"mpjw\":{\"isReadyForMove\":true,\"additionalInfo\":\"ekqvgqouwif\"},\"cvhrfsp\":{\"isReadyForMove\":true,\"additionalInfo\":\"ikf\"},\"kvyklxubyjaffmm\":{\"isReadyForMove\":false,\"additionalInfo\":\"rttikteusqc\"},\"metttwgd\":{\"isReadyForMove\":true,\"additionalInfo\":\"qcuubgqibrta\"}},\"recoveryPointProperties\":{\"expiryTime\":\"xih\",\"ruleName\":\"moo\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T20:37:44Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("ycavodggxdbees", model.recoveryPointTierDetails().get(0).extendedInfo().get("ieknl"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("mpjw").isReadyForMove());
        Assertions.assertEquals("ekqvgqouwif", model.recoveryPointMoveReadinessInfo().get("mpjw").additionalInfo());
        Assertions.assertEquals("xih", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("moo", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-23T15:17:09Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T19:53:14Z"), model.timeRanges().get(0).endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadPointInTimeRecoveryPoint model = new AzureWorkloadPointInTimeRecoveryPoint()
            .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-09-18T20:37:44Z")).withType(RestorePointType.INVALID)
            .withRecoveryPointTierDetails(Arrays.asList(
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                    .withStatus(RecoveryPointTierStatus.REHYDRATED)
                    .withExtendedInfo(mapOf("ieknl", "ycavodggxdbees", "agy", "ariaawi")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                    .withStatus(RecoveryPointTierStatus.VALID).withExtendedInfo(mapOf("giagtcojo", "yr")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                    .withStatus(RecoveryPointTierStatus.VALID)
                    .withExtendedInfo(mapOf("uxylfsbtkadpy", "zjvusfzldmo", "tgkbugrjqctojc", "own", "cuplcplcwkhih",
                        "isofieypefojyqd")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                    .withStatus(RecoveryPointTierStatus.VALID)
                    .withExtendedInfo(mapOf("s", "qtz", "txmwoteyow", "gnowcjhfgmveca"))))
            .withRecoveryPointMoveReadinessInfo(mapOf("mpjw",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("ekqvgqouwif"),
                "cvhrfsp", new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("ikf"),
                "kvyklxubyjaffmm",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("rttikteusqc"),
                "metttwgd",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("qcuubgqibrta")))
            .withRecoveryPointProperties(
                new RecoveryPointProperties().withExpiryTime("xih").withRuleName("moo").withIsSoftDeleted(true))
            .withTimeRanges(Arrays.asList(
                new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-10-23T15:17:09Z"))
                    .withEndTime(OffsetDateTime.parse("2021-07-08T19:53:14Z")),
                new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-02-03T00:44:07Z"))
                    .withEndTime(OffsetDateTime.parse("2021-09-14T23:20:53Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T20:37:44Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("ycavodggxdbees", model.recoveryPointTierDetails().get(0).extendedInfo().get("ieknl"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("mpjw").isReadyForMove());
        Assertions.assertEquals("ekqvgqouwif", model.recoveryPointMoveReadinessInfo().get("mpjw").additionalInfo());
        Assertions.assertEquals("xih", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("moo", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-23T15:17:09Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T19:53:14Z"), model.timeRanges().get(0).endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
