// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectedItemResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItem;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectedItemResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectedItemResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureWorkload\",\"workloadType\":\"SQLDataBase\",\"containerName\":\"pjhvmdajvnys\",\"sourceResourceId\":\"nqecanoaeup\",\"policyId\":\"yhltrpmopjmcm\",\"lastRecoveryPoint\":\"2020-12-22T02:02:43Z\",\"backupSetName\":\"kthfui\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-10-17T19:18:45Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"kvxod\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"ydagfuaxbe\",\"yiuokktwh\",\"dxwzywqsmbsurexi\",\"o\"],\"isArchiveEnabled\":false,\"policyName\":\"fsfksymddyst\",\"softDeleteRetentionPeriodInDays\":980316888,\"vaultId\":\"xhqyudxorrqnb\"},\"eTag\":\"czvyifq\",\"location\":\"vkd\",\"tags\":{\"vvdfwatkpnpul\":\"llr\"},\"id\":\"xxbczwtr\",\"name\":\"wiqzbqjvsovmyo\",\"type\":\"acspkwl\"}")
            .toObject(ProtectedItemResourceInner.class);
        Assertions.assertEquals("vkd", model.location());
        Assertions.assertEquals("llr", model.tags().get("vvdfwatkpnpul"));
        Assertions.assertEquals("pjhvmdajvnys", model.properties().containerName());
        Assertions.assertEquals("nqecanoaeup", model.properties().sourceResourceId());
        Assertions.assertEquals("yhltrpmopjmcm", model.properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T02:02:43Z"), model.properties().lastRecoveryPoint());
        Assertions.assertEquals("kthfui", model.properties().backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T19:18:45Z"),
            model.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("kvxod", model.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.properties().isRehydrate());
        Assertions.assertEquals("ydagfuaxbe", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.properties().isArchiveEnabled());
        Assertions.assertEquals("fsfksymddyst", model.properties().policyName());
        Assertions.assertEquals(980316888, model.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("czvyifq", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectedItemResourceInner model = new ProtectedItemResourceInner().withLocation("vkd")
            .withTags(mapOf("vvdfwatkpnpul", "llr"))
            .withProperties(new ProtectedItem().withContainerName("pjhvmdajvnys")
                .withSourceResourceId("nqecanoaeup")
                .withPolicyId("yhltrpmopjmcm")
                .withLastRecoveryPoint(OffsetDateTime.parse("2020-12-22T02:02:43Z"))
                .withBackupSetName("kthfui")
                .withCreateMode(CreateMode.RECOVER)
                .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-10-17T19:18:45Z"))
                .withIsScheduledForDeferredDelete(false)
                .withDeferredDeleteTimeRemaining("kvxod")
                .withIsDeferredDeleteScheduleUpcoming(true)
                .withIsRehydrate(true)
                .withResourceGuardOperationRequests(Arrays.asList("ydagfuaxbe", "yiuokktwh", "dxwzywqsmbsurexi", "o"))
                .withIsArchiveEnabled(false)
                .withPolicyName("fsfksymddyst")
                .withSoftDeleteRetentionPeriod(980316888))
            .withEtag("czvyifq");
        model = BinaryData.fromObject(model).toObject(ProtectedItemResourceInner.class);
        Assertions.assertEquals("vkd", model.location());
        Assertions.assertEquals("llr", model.tags().get("vvdfwatkpnpul"));
        Assertions.assertEquals("pjhvmdajvnys", model.properties().containerName());
        Assertions.assertEquals("nqecanoaeup", model.properties().sourceResourceId());
        Assertions.assertEquals("yhltrpmopjmcm", model.properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T02:02:43Z"), model.properties().lastRecoveryPoint());
        Assertions.assertEquals("kthfui", model.properties().backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T19:18:45Z"),
            model.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("kvxod", model.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.properties().isRehydrate());
        Assertions.assertEquals("ydagfuaxbe", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.properties().isArchiveEnabled());
        Assertions.assertEquals("fsfksymddyst", model.properties().policyName());
        Assertions.assertEquals(980316888, model.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("czvyifq", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
