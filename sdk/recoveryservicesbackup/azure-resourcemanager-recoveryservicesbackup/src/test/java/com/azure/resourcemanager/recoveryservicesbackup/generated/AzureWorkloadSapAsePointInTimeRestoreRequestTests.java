// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapAsePointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapAsePointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapAsePointInTimeRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPAsePointInTimeRestoreRequest\",\"pointInTime\":\"2021-10-20T20:49:39Z\",\"recoveryType\":\"AlternateLocation\",\"sourceResourceId\":\"psttexoq\",\"propertyBag\":{\"uncuw\":\"cyyufmh\",\"unqndyfpchrqb\":\"qspkcdqzhlctd\",\"boxjumvq\":\"jjrcgegydc\",\"ouau\":\"olihrra\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"oq\",\"databaseName\":\"uojrngiflr\",\"targetDirectoryForFileRestore\":\"asccbiui\"},\"recoveryMode\":\"SnapshotAttach\",\"targetResourceGroupName\":\"yjdfqwmky\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"fdvruz\",\"identityName\":\"zojhpctfnmd\",\"userAssignedIdentityProperties\":{\"clientId\":\"ngfdgugeyzihgrky\",\"principalId\":\"zabs\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"hojeevy\"},\"targetVirtualMachineId\":\"hsgz\",\"resourceGuardOperationRequests\":[\"bgomfgbegl\",\"gleohi\",\"etnluankrrfx\"]}")
            .toObject(AzureWorkloadSapAsePointInTimeRestoreRequest.class);
        Assertions.assertEquals("bgomfgbegl", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("psttexoq", model.sourceResourceId());
        Assertions.assertEquals("cyyufmh", model.propertyBag().get("uncuw"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("oq", model.targetInfo().containerId());
        Assertions.assertEquals("uojrngiflr", model.targetInfo().databaseName());
        Assertions.assertEquals("asccbiui", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH, model.recoveryMode());
        Assertions.assertEquals("yjdfqwmky", model.targetResourceGroupName());
        Assertions.assertEquals("fdvruz", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("zojhpctfnmd", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("ngfdgugeyzihgrky",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("zabs",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("hojeevy", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("hsgz", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T20:49:39Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapAsePointInTimeRestoreRequest model = new AzureWorkloadSapAsePointInTimeRestoreRequest()
            .withResourceGuardOperationRequests(Arrays.asList("bgomfgbegl", "gleohi", "etnluankrrfx"))
            .withRecoveryType(RecoveryType.ALTERNATE_LOCATION)
            .withSourceResourceId("psttexoq")
            .withPropertyBag(mapOf("uncuw", "cyyufmh", "unqndyfpchrqb", "qspkcdqzhlctd", "boxjumvq", "jjrcgegydc",
                "ouau", "olihrra"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID)
                .withContainerId("oq")
                .withDatabaseName("uojrngiflr")
                .withTargetDirectoryForFileRestore("asccbiui"))
            .withRecoveryMode(RecoveryMode.SNAPSHOT_ATTACH)
            .withTargetResourceGroupName("yjdfqwmky")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("fdvruz")
                .withIdentityName("zojhpctfnmd")
                .withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("ngfdgugeyzihgrky").withPrincipalId("zabs")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(false)
                .withLogPointInTimeForDBRecovery("hojeevy"))
            .withTargetVirtualMachineId("hsgz")
            .withPointInTime(OffsetDateTime.parse("2021-10-20T20:49:39Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapAsePointInTimeRestoreRequest.class);
        Assertions.assertEquals("bgomfgbegl", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("psttexoq", model.sourceResourceId());
        Assertions.assertEquals("cyyufmh", model.propertyBag().get("uncuw"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("oq", model.targetInfo().containerId());
        Assertions.assertEquals("uojrngiflr", model.targetInfo().databaseName());
        Assertions.assertEquals("asccbiui", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH, model.recoveryMode());
        Assertions.assertEquals("yjdfqwmky", model.targetResourceGroupName());
        Assertions.assertEquals("fdvruz", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("zojhpctfnmd", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("ngfdgugeyzihgrky",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("zabs",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("hojeevy", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("hsgz", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T20:49:39Z"), model.pointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
