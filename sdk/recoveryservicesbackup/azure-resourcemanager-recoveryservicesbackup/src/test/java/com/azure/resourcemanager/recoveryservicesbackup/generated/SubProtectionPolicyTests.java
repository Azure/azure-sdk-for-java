// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.PolicyType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SchedulePolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotBackupAdditionalDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.SubProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SubProtectionPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubProtectionPolicy model = BinaryData.fromString(
            "{\"policyType\":\"Log\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"ftul\":{\"tieringMode\":\"DoNotTier\",\"duration\":1600023368,\"durationType\":\"Weeks\"}},\"snapshotBackupAdditionalDetails\":{\"instantRpRetentionRangeInDays\":184092911,\"instantRPDetails\":\"ceamtm\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"o\",\"identityName\":\"jw\",\"userAssignedIdentityProperties\":{\"clientId\":\"qioknssxmojm\",\"principalId\":\"p\"}}}}")
            .toObject(SubProtectionPolicy.class);
        Assertions.assertEquals(PolicyType.LOG, model.policyType());
        Assertions.assertEquals(TieringMode.DO_NOT_TIER, model.tieringPolicy().get("ftul").tieringMode());
        Assertions.assertEquals(1600023368, model.tieringPolicy().get("ftul").duration());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.tieringPolicy().get("ftul").durationType());
        Assertions.assertEquals(184092911, model.snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("ceamtm", model.snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("o",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("jw",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("qioknssxmojm",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .clientId());
        Assertions.assertEquals("p",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubProtectionPolicy model = new SubProtectionPolicy().withPolicyType(PolicyType.LOG)
            .withSchedulePolicy(new SchedulePolicy())
            .withRetentionPolicy(new RetentionPolicy())
            .withTieringPolicy(mapOf("ftul",
                new TieringPolicy().withTieringMode(TieringMode.DO_NOT_TIER)
                    .withDuration(1600023368)
                    .withDurationType(RetentionDurationType.WEEKS)))
            .withSnapshotBackupAdditionalDetails(new SnapshotBackupAdditionalDetails()
                .withInstantRpRetentionRangeInDays(184092911)
                .withInstantRPDetails("ceamtm")
                .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("o")
                    .withIdentityName("jw")
                    .withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("qioknssxmojm").withPrincipalId("p"))));
        model = BinaryData.fromObject(model).toObject(SubProtectionPolicy.class);
        Assertions.assertEquals(PolicyType.LOG, model.policyType());
        Assertions.assertEquals(TieringMode.DO_NOT_TIER, model.tieringPolicy().get("ftul").tieringMode());
        Assertions.assertEquals(1600023368, model.tieringPolicy().get("ftul").duration());
        Assertions.assertEquals(RetentionDurationType.WEEKS, model.tieringPolicy().get("ftul").durationType());
        Assertions.assertEquals(184092911, model.snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("ceamtm", model.snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("o",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("jw",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("qioknssxmojm",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .clientId());
        Assertions.assertEquals("p",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
