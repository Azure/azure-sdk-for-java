// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.PolicyType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SchedulePolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotBackupAdditionalDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.SubProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SubProtectionPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubProtectionPolicy model = BinaryData.fromString(
            "{\"policyType\":\"SnapshotCopyOnlyFull\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"slbi\":{\"tieringMode\":\"TierAfter\",\"duration\":1069475083,\"durationType\":\"Invalid\"},\"ztsfmznbaeqp\":{\"tieringMode\":\"TierRecommended\",\"duration\":1225451286,\"durationType\":\"Invalid\"},\"rpxeh\":{\"tieringMode\":\"TierRecommended\",\"duration\":1311384548,\"durationType\":\"Days\"}},\"snapshotBackupAdditionalDetails\":{\"instantRpRetentionRangeInDays\":550390162,\"instantRPDetails\":\"qgaifmviklbydv\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"ejd\",\"identityName\":\"xcv\",\"userAssignedIdentityProperties\":{\"clientId\":\"hnjivo\",\"principalId\":\"tnovqfzgemjdftul\"}}}}")
            .toObject(SubProtectionPolicy.class);
        Assertions.assertEquals(PolicyType.SNAPSHOT_COPY_ONLY_FULL, model.policyType());
        Assertions.assertEquals(TieringMode.TIER_AFTER, model.tieringPolicy().get("slbi").tieringMode());
        Assertions.assertEquals(1069475083, model.tieringPolicy().get("slbi").duration());
        Assertions.assertEquals(RetentionDurationType.INVALID, model.tieringPolicy().get("slbi").durationType());
        Assertions.assertEquals(550390162, model.snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("qgaifmviklbydv", model.snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("ejd",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("xcv",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("hnjivo", model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails()
            .userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("tnovqfzgemjdftul", model.snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubProtectionPolicy model = new SubProtectionPolicy().withPolicyType(PolicyType.SNAPSHOT_COPY_ONLY_FULL)
            .withSchedulePolicy(new SchedulePolicy()).withRetentionPolicy(new RetentionPolicy())
            .withTieringPolicy(mapOf("slbi",
                new TieringPolicy().withTieringMode(TieringMode.TIER_AFTER).withDuration(1069475083)
                    .withDurationType(RetentionDurationType.INVALID),
                "ztsfmznbaeqp",
                new TieringPolicy().withTieringMode(TieringMode.TIER_RECOMMENDED).withDuration(1225451286)
                    .withDurationType(RetentionDurationType.INVALID),
                "rpxeh",
                new TieringPolicy().withTieringMode(TieringMode.TIER_RECOMMENDED).withDuration(1311384548)
                    .withDurationType(RetentionDurationType.DAYS)))
            .withSnapshotBackupAdditionalDetails(
                new SnapshotBackupAdditionalDetails().withInstantRpRetentionRangeInDays(550390162)
                    .withInstantRPDetails("qgaifmviklbydv").withUserAssignedManagedIdentityDetails(
                        new UserAssignedManagedIdentityDetails().withIdentityArmId("ejd").withIdentityName("xcv")
                            .withUserAssignedIdentityProperties(new UserAssignedIdentityProperties()
                                .withClientId("hnjivo").withPrincipalId("tnovqfzgemjdftul"))));
        model = BinaryData.fromObject(model).toObject(SubProtectionPolicy.class);
        Assertions.assertEquals(PolicyType.SNAPSHOT_COPY_ONLY_FULL, model.policyType());
        Assertions.assertEquals(TieringMode.TIER_AFTER, model.tieringPolicy().get("slbi").tieringMode());
        Assertions.assertEquals(1069475083, model.tieringPolicy().get("slbi").duration());
        Assertions.assertEquals(RetentionDurationType.INVALID, model.tieringPolicy().get("slbi").durationType());
        Assertions.assertEquals(550390162, model.snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("qgaifmviklbydv", model.snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("ejd",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("xcv",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("hnjivo", model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails()
            .userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("tnovqfzgemjdftul", model.snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
