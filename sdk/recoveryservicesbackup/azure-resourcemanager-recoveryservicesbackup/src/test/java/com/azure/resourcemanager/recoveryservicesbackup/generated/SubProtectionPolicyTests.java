// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.PolicyType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SchedulePolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotBackupAdditionalDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.SubProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SubProtectionPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubProtectionPolicy model = BinaryData.fromString(
            "{\"policyType\":\"Incremental\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"xu\":{\"tieringMode\":\"TierAfter\",\"duration\":250012247,\"durationType\":\"Months\"},\"htba\":{\"tieringMode\":\"TierAfter\",\"duration\":1576541562,\"durationType\":\"Invalid\"},\"ckpyklyhplu\":{\"tieringMode\":\"Invalid\",\"duration\":1532025762,\"durationType\":\"Invalid\"}},\"snapshotBackupAdditionalDetails\":{\"instantRpRetentionRangeInDays\":1007815098,\"instantRPDetails\":\"uudl\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"bth\",\"identityName\":\"tgk\",\"userAssignedIdentityProperties\":{\"clientId\":\"vdxec\",\"principalId\":\"edqbc\"}}}}")
            .toObject(SubProtectionPolicy.class);
        Assertions.assertEquals(PolicyType.INCREMENTAL, model.policyType());
        Assertions.assertEquals(TieringMode.TIER_AFTER, model.tieringPolicy().get("xu").tieringMode());
        Assertions.assertEquals(250012247, model.tieringPolicy().get("xu").duration());
        Assertions.assertEquals(RetentionDurationType.MONTHS, model.tieringPolicy().get("xu").durationType());
        Assertions.assertEquals(1007815098, model.snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("uudl", model.snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("bth",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("tgk",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("vdxec",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .clientId());
        Assertions.assertEquals("edqbc",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubProtectionPolicy model
            = new SubProtectionPolicy().withPolicyType(PolicyType.INCREMENTAL)
                .withSchedulePolicy(new SchedulePolicy())
                .withRetentionPolicy(new RetentionPolicy())
                .withTieringPolicy(mapOf("xu",
                    new TieringPolicy().withTieringMode(TieringMode.TIER_AFTER)
                        .withDuration(250012247)
                        .withDurationType(RetentionDurationType.MONTHS),
                    "htba",
                    new TieringPolicy().withTieringMode(TieringMode.TIER_AFTER)
                        .withDuration(1576541562)
                        .withDurationType(RetentionDurationType.INVALID),
                    "ckpyklyhplu",
                    new TieringPolicy().withTieringMode(TieringMode.INVALID)
                        .withDuration(1532025762)
                        .withDurationType(RetentionDurationType.INVALID)))
                .withSnapshotBackupAdditionalDetails(
                    new SnapshotBackupAdditionalDetails().withInstantRpRetentionRangeInDays(1007815098)
                        .withInstantRPDetails("uudl")
                        .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                            .withIdentityArmId("bth")
                            .withIdentityName("tgk")
                            .withUserAssignedIdentityProperties(
                                new UserAssignedIdentityProperties().withClientId("vdxec").withPrincipalId("edqbc"))));
        model = BinaryData.fromObject(model).toObject(SubProtectionPolicy.class);
        Assertions.assertEquals(PolicyType.INCREMENTAL, model.policyType());
        Assertions.assertEquals(TieringMode.TIER_AFTER, model.tieringPolicy().get("xu").tieringMode());
        Assertions.assertEquals(250012247, model.tieringPolicy().get("xu").duration());
        Assertions.assertEquals(RetentionDurationType.MONTHS, model.tieringPolicy().get("xu").durationType());
        Assertions.assertEquals(1007815098, model.snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("uudl", model.snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("bth",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("tgk",
            model.snapshotBackupAdditionalDetails().userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("vdxec",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .clientId());
        Assertions.assertEquals("edqbc",
            model.snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
