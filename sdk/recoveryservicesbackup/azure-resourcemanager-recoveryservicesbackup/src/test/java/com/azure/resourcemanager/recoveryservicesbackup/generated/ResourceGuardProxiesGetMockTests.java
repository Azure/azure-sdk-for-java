// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBaseResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourceGuardProxiesGetMockTests {
    @Test
    public void testGet() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"resourceGuardResourceId\":\"ibb\",\"resourceGuardOperationDetails\":[{\"vaultCriticalOperation\":\"pkl\",\"defaultResourceRequest\":\"ydgnha\"},{\"vaultCriticalOperation\":\"wuk\",\"defaultResourceRequest\":\"zgpmnma\"},{\"vaultCriticalOperation\":\"ddqil\",\"defaultResourceRequest\":\"d\"},{\"vaultCriticalOperation\":\"fqfp\",\"defaultResourceRequest\":\"stcl\"}],\"lastUpdatedTime\":\"rvwerfwxbsmtb\",\"description\":\"jehhci\"},\"eTag\":\"wdv\",\"location\":\"tbrekqhsqhtf\",\"tags\":{\"yqwdqi\":\"qbyeju\",\"nztxlujkh\":\"mghg\"},\"id\":\"jcmrnkfm\",\"name\":\"h\",\"type\":\"qtwmlmhjnqtqeahj\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ResourceGuardProxyBaseResource> response =
            manager.resourceGuardProxies().get("mvpsimioyo", "glkmiqwnnr", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tbrekqhsqhtf", response.iterator().next().location());
        Assertions.assertEquals("qbyeju", response.iterator().next().tags().get("yqwdqi"));
        Assertions.assertEquals("ibb", response.iterator().next().properties().resourceGuardResourceId());
        Assertions
            .assertEquals(
                "pkl",
                response
                    .iterator()
                    .next()
                    .properties()
                    .resourceGuardOperationDetails()
                    .get(0)
                    .vaultCriticalOperation());
        Assertions
            .assertEquals(
                "ydgnha",
                response
                    .iterator()
                    .next()
                    .properties()
                    .resourceGuardOperationDetails()
                    .get(0)
                    .defaultResourceRequest());
        Assertions.assertEquals("rvwerfwxbsmtb", response.iterator().next().properties().lastUpdatedTime());
        Assertions.assertEquals("jehhci", response.iterator().next().properties().description());
        Assertions.assertEquals("wdv", response.iterator().next().etag());
    }
}
