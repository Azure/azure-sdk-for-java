// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectedItemResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResourceList;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectedItemResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectedItemResourceList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"Invalid\",\"workloadType\":\"Client\",\"containerName\":\"euojgjrwju\",\"sourceResourceId\":\"otwmcdyt\",\"policyId\":\"wit\",\"lastRecoveryPoint\":\"2021-05-14T21:36:27Z\",\"backupSetName\":\"awgqwgxhni\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2021-05-28T01:48:43Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"cg\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"jdauwhvy\",\"wzbtdhxu\",\"znbmpowuwprzq\"],\"isArchiveEnabled\":true,\"policyName\":\"alupjm\",\"softDeleteRetentionPeriodInDays\":46275154},\"eTag\":\"obbc\",\"location\":\"wsrtjriplrbpbe\",\"tags\":{\"wxzvlvqhjkb\":\"hfgblc\"},\"id\":\"gibtnm\",\"name\":\"iebwwaloayqcgwrt\",\"type\":\"j\"},{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"Invalid\",\"workloadType\":\"FileFolder\",\"containerName\":\"htxongmtsavjc\",\"sourceResourceId\":\"wxqpsrknftguvri\",\"policyId\":\"prwmdyvxqt\",\"lastRecoveryPoint\":\"2021-09-21T09:24:54Z\",\"backupSetName\":\"ww\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-02-13T03:31:18Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"mcqibycnojv\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"gzva\",\"apj\",\"zhpvgqzcjrvxd\",\"zlmwlxkvugfhz\"],\"isArchiveEnabled\":true,\"policyName\":\"jvzunluthnnp\",\"softDeleteRetentionPeriodInDays\":1427151650},\"eTag\":\"peilpjzuaejxdu\",\"location\":\"tskzbbtdzumveek\",\"tags\":{\"sjyofdx\":\"ozuhkfp\",\"oekqvk\":\"uusdttouwa\"},\"id\":\"lns\",\"name\":\"vbxwyjsflhh\",\"type\":\"aalnjixi\"},{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureBackupServer\",\"workloadType\":\"AzureSqlDb\",\"containerName\":\"yaqcslyjpkiidz\",\"sourceResourceId\":\"xznelixhnrztf\",\"policyId\":\"hb\",\"lastRecoveryPoint\":\"2021-09-08T07:53:31Z\",\"backupSetName\":\"alaulppggdtpnapn\",\"createMode\":\"Default\",\"deferredDeleteTimeInUTC\":\"2021-05-11T07:31:24Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"igvpgylg\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"djvcsl\",\"n\",\"wwncwzzhxgk\"],\"isArchiveEnabled\":false,\"policyName\":\"ucnapkteoellwp\",\"softDeleteRetentionPeriodInDays\":220477618},\"eTag\":\"gpfqbuace\",\"location\":\"pzfqrhhuaoppp\",\"tags\":{\"t\":\"qxolzdahzx\"},\"id\":\"bgbkdmoizpost\",\"name\":\"grcfb\",\"type\":\"nrmfqjhhk\"}],\"nextLink\":\"pvjymjhxxjyng\"}")
                .toObject(ProtectedItemResourceList.class);
        Assertions.assertEquals("pvjymjhxxjyng", model.nextLink());
        Assertions.assertEquals("wsrtjriplrbpbe", model.value().get(0).location());
        Assertions.assertEquals("hfgblc", model.value().get(0).tags().get("wxzvlvqhjkb"));
        Assertions.assertEquals("euojgjrwju", model.value().get(0).properties().containerName());
        Assertions.assertEquals("otwmcdyt", model.value().get(0).properties().sourceResourceId());
        Assertions.assertEquals("wit", model.value().get(0).properties().policyId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-14T21:36:27Z"), model.value().get(0).properties().lastRecoveryPoint());
        Assertions.assertEquals("awgqwgxhni", model.value().get(0).properties().backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.value().get(0).properties().createMode());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-28T01:48:43Z"),
                model.value().get(0).properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.value().get(0).properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("cg", model.value().get(0).properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.value().get(0).properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.value().get(0).properties().isRehydrate());
        Assertions.assertEquals("jdauwhvy", model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.value().get(0).properties().isArchiveEnabled());
        Assertions.assertEquals("alupjm", model.value().get(0).properties().policyName());
        Assertions.assertEquals(46275154, model.value().get(0).properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("obbc", model.value().get(0).etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectedItemResourceList model =
            new ProtectedItemResourceList()
                .withNextLink("pvjymjhxxjyng")
                .withValue(
                    Arrays
                        .asList(
                            new ProtectedItemResourceInner()
                                .withLocation("wsrtjriplrbpbe")
                                .withTags(mapOf("wxzvlvqhjkb", "hfgblc"))
                                .withProperties(
                                    new ProtectedItem()
                                        .withContainerName("euojgjrwju")
                                        .withSourceResourceId("otwmcdyt")
                                        .withPolicyId("wit")
                                        .withLastRecoveryPoint(OffsetDateTime.parse("2021-05-14T21:36:27Z"))
                                        .withBackupSetName("awgqwgxhni")
                                        .withCreateMode(CreateMode.INVALID)
                                        .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-05-28T01:48:43Z"))
                                        .withIsScheduledForDeferredDelete(false)
                                        .withDeferredDeleteTimeRemaining("cg")
                                        .withIsDeferredDeleteScheduleUpcoming(false)
                                        .withIsRehydrate(true)
                                        .withResourceGuardOperationRequests(
                                            Arrays.asList("jdauwhvy", "wzbtdhxu", "znbmpowuwprzq"))
                                        .withIsArchiveEnabled(true)
                                        .withPolicyName("alupjm")
                                        .withSoftDeleteRetentionPeriod(46275154))
                                .withEtag("obbc"),
                            new ProtectedItemResourceInner()
                                .withLocation("tskzbbtdzumveek")
                                .withTags(mapOf("sjyofdx", "ozuhkfp", "oekqvk", "uusdttouwa"))
                                .withProperties(
                                    new ProtectedItem()
                                        .withContainerName("htxongmtsavjc")
                                        .withSourceResourceId("wxqpsrknftguvri")
                                        .withPolicyId("prwmdyvxqt")
                                        .withLastRecoveryPoint(OffsetDateTime.parse("2021-09-21T09:24:54Z"))
                                        .withBackupSetName("ww")
                                        .withCreateMode(CreateMode.RECOVER)
                                        .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-02-13T03:31:18Z"))
                                        .withIsScheduledForDeferredDelete(true)
                                        .withDeferredDeleteTimeRemaining("mcqibycnojv")
                                        .withIsDeferredDeleteScheduleUpcoming(true)
                                        .withIsRehydrate(true)
                                        .withResourceGuardOperationRequests(
                                            Arrays.asList("gzva", "apj", "zhpvgqzcjrvxd", "zlmwlxkvugfhz"))
                                        .withIsArchiveEnabled(true)
                                        .withPolicyName("jvzunluthnnp")
                                        .withSoftDeleteRetentionPeriod(1427151650))
                                .withEtag("peilpjzuaejxdu"),
                            new ProtectedItemResourceInner()
                                .withLocation("pzfqrhhuaoppp")
                                .withTags(mapOf("t", "qxolzdahzx"))
                                .withProperties(
                                    new ProtectedItem()
                                        .withContainerName("yaqcslyjpkiidz")
                                        .withSourceResourceId("xznelixhnrztf")
                                        .withPolicyId("hb")
                                        .withLastRecoveryPoint(OffsetDateTime.parse("2021-09-08T07:53:31Z"))
                                        .withBackupSetName("alaulppggdtpnapn")
                                        .withCreateMode(CreateMode.DEFAULT)
                                        .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-05-11T07:31:24Z"))
                                        .withIsScheduledForDeferredDelete(false)
                                        .withDeferredDeleteTimeRemaining("igvpgylg")
                                        .withIsDeferredDeleteScheduleUpcoming(true)
                                        .withIsRehydrate(true)
                                        .withResourceGuardOperationRequests(Arrays.asList("djvcsl", "n", "wwncwzzhxgk"))
                                        .withIsArchiveEnabled(false)
                                        .withPolicyName("ucnapkteoellwp")
                                        .withSoftDeleteRetentionPeriod(220477618))
                                .withEtag("gpfqbuace")));
        model = BinaryData.fromObject(model).toObject(ProtectedItemResourceList.class);
        Assertions.assertEquals("pvjymjhxxjyng", model.nextLink());
        Assertions.assertEquals("wsrtjriplrbpbe", model.value().get(0).location());
        Assertions.assertEquals("hfgblc", model.value().get(0).tags().get("wxzvlvqhjkb"));
        Assertions.assertEquals("euojgjrwju", model.value().get(0).properties().containerName());
        Assertions.assertEquals("otwmcdyt", model.value().get(0).properties().sourceResourceId());
        Assertions.assertEquals("wit", model.value().get(0).properties().policyId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-14T21:36:27Z"), model.value().get(0).properties().lastRecoveryPoint());
        Assertions.assertEquals("awgqwgxhni", model.value().get(0).properties().backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.value().get(0).properties().createMode());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-28T01:48:43Z"),
                model.value().get(0).properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.value().get(0).properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("cg", model.value().get(0).properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.value().get(0).properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.value().get(0).properties().isRehydrate());
        Assertions.assertEquals("jdauwhvy", model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.value().get(0).properties().isArchiveEnabled());
        Assertions.assertEquals("alupjm", model.value().get(0).properties().policyName());
        Assertions.assertEquals(46275154, model.value().get(0).properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("obbc", model.value().get(0).etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
