// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectedItemResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResourceList;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectedItemResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectedItemResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureWorkload\",\"workloadType\":\"Sharepoint\",\"containerName\":\"y\",\"sourceResourceId\":\"pvgqzcjrvxdjzlm\",\"policyId\":\"xkvugfhzov\",\"lastRecoveryPoint\":\"2021-04-06T17:45:34Z\",\"backupSetName\":\"zunlu\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2021-01-21T11:08:17Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"i\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"uaejxdultsk\",\"bbtdzumvee\"],\"isArchiveEnabled\":false,\"policyName\":\"ozuhkfp\",\"softDeleteRetentionPeriodInDays\":1369679233,\"vaultId\":\"ofd\"},\"eTag\":\"uusdttouwa\",\"location\":\"oekqvk\",\"tags\":{\"xwyjsflhhc\":\"smv\",\"ixisxyawjoy\":\"aln\",\"yexz\":\"qcslyjpkiid\"},\"id\":\"eli\",\"name\":\"hnrztfol\",\"type\":\"bnxknalaulppg\"},{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"Invalid\",\"workloadType\":\"AzureFileShare\",\"containerName\":\"nyiropuhpi\",\"sourceResourceId\":\"pgylg\",\"policyId\":\"itxmedjvcslynqww\",\"lastRecoveryPoint\":\"2021-09-17T17:00:46Z\",\"backupSetName\":\"zhxgktrmgucn\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-05-25T00:20:27Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"lwptfdy\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"ceopzfqrhhuaopp\"],\"isArchiveEnabled\":false,\"policyName\":\"qxolzdahzx\",\"softDeleteRetentionPeriodInDays\":792773086,\"vaultId\":\"gbkdmoizpos\"},\"eTag\":\"grcfb\",\"location\":\"nrmfqjhhk\",\"tags\":{\"vkr\":\"vjymjhxxjyngud\",\"szjfauvjfdxxivet\":\"swbxqz\",\"qaqtdoqmcbxvwvxy\":\"t\",\"obl\":\"lqbhsf\"},\"id\":\"tkblmpewww\",\"name\":\"bkrvrnsvshqj\",\"type\":\"hxcr\"}],\"nextLink\":\"fovasr\"}")
            .toObject(ProtectedItemResourceList.class);
        Assertions.assertEquals("fovasr", model.nextLink());
        Assertions.assertEquals("oekqvk", model.value().get(0).location());
        Assertions.assertEquals("smv", model.value().get(0).tags().get("xwyjsflhhc"));
        Assertions.assertEquals("y", model.value().get(0).properties().containerName());
        Assertions.assertEquals("pvgqzcjrvxdjzlm", model.value().get(0).properties().sourceResourceId());
        Assertions.assertEquals("xkvugfhzov", model.value().get(0).properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T17:45:34Z"),
            model.value().get(0).properties().lastRecoveryPoint());
        Assertions.assertEquals("zunlu", model.value().get(0).properties().backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.value().get(0).properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T11:08:17Z"),
            model.value().get(0).properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.value().get(0).properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("i", model.value().get(0).properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.value().get(0).properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, model.value().get(0).properties().isRehydrate());
        Assertions.assertEquals("uaejxdultsk",
            model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.value().get(0).properties().isArchiveEnabled());
        Assertions.assertEquals("ozuhkfp", model.value().get(0).properties().policyName());
        Assertions.assertEquals(1369679233, model.value().get(0).properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("uusdttouwa", model.value().get(0).etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectedItemResourceList model = new ProtectedItemResourceList().withNextLink("fovasr")
            .withValue(Arrays.asList(
                new ProtectedItemResourceInner().withLocation("oekqvk")
                    .withTags(mapOf("xwyjsflhhc", "smv", "ixisxyawjoy", "aln", "yexz", "qcslyjpkiid"))
                    .withProperties(new ProtectedItem().withContainerName("y")
                        .withSourceResourceId("pvgqzcjrvxdjzlm")
                        .withPolicyId("xkvugfhzov")
                        .withLastRecoveryPoint(OffsetDateTime.parse("2021-04-06T17:45:34Z"))
                        .withBackupSetName("zunlu")
                        .withCreateMode(CreateMode.INVALID)
                        .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-01-21T11:08:17Z"))
                        .withIsScheduledForDeferredDelete(false)
                        .withDeferredDeleteTimeRemaining("i")
                        .withIsDeferredDeleteScheduleUpcoming(true)
                        .withIsRehydrate(false)
                        .withResourceGuardOperationRequests(Arrays.asList("uaejxdultsk", "bbtdzumvee"))
                        .withIsArchiveEnabled(false)
                        .withPolicyName("ozuhkfp")
                        .withSoftDeleteRetentionPeriod(1369679233))
                    .withEtag("uusdttouwa"),
                new ProtectedItemResourceInner().withLocation("nrmfqjhhk")
                    .withTags(mapOf("vkr", "vjymjhxxjyngud", "szjfauvjfdxxivet", "swbxqz", "qaqtdoqmcbxvwvxy", "t",
                        "obl", "lqbhsf"))
                    .withProperties(new ProtectedItem().withContainerName("nyiropuhpi")
                        .withSourceResourceId("pgylg")
                        .withPolicyId("itxmedjvcslynqww")
                        .withLastRecoveryPoint(OffsetDateTime.parse("2021-09-17T17:00:46Z"))
                        .withBackupSetName("zhxgktrmgucn")
                        .withCreateMode(CreateMode.RECOVER)
                        .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-05-25T00:20:27Z"))
                        .withIsScheduledForDeferredDelete(true)
                        .withDeferredDeleteTimeRemaining("lwptfdy")
                        .withIsDeferredDeleteScheduleUpcoming(true)
                        .withIsRehydrate(false)
                        .withResourceGuardOperationRequests(Arrays.asList("ceopzfqrhhuaopp"))
                        .withIsArchiveEnabled(false)
                        .withPolicyName("qxolzdahzx")
                        .withSoftDeleteRetentionPeriod(792773086))
                    .withEtag("grcfb")));
        model = BinaryData.fromObject(model).toObject(ProtectedItemResourceList.class);
        Assertions.assertEquals("fovasr", model.nextLink());
        Assertions.assertEquals("oekqvk", model.value().get(0).location());
        Assertions.assertEquals("smv", model.value().get(0).tags().get("xwyjsflhhc"));
        Assertions.assertEquals("y", model.value().get(0).properties().containerName());
        Assertions.assertEquals("pvgqzcjrvxdjzlm", model.value().get(0).properties().sourceResourceId());
        Assertions.assertEquals("xkvugfhzov", model.value().get(0).properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T17:45:34Z"),
            model.value().get(0).properties().lastRecoveryPoint());
        Assertions.assertEquals("zunlu", model.value().get(0).properties().backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.value().get(0).properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T11:08:17Z"),
            model.value().get(0).properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.value().get(0).properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("i", model.value().get(0).properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.value().get(0).properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, model.value().get(0).properties().isRehydrate());
        Assertions.assertEquals("uaejxdultsk",
            model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.value().get(0).properties().isArchiveEnabled());
        Assertions.assertEquals("ozuhkfp", model.value().get(0).properties().policyName());
        Assertions.assertEquals(1369679233, model.value().get(0).properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("uusdttouwa", model.value().get(0).etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
