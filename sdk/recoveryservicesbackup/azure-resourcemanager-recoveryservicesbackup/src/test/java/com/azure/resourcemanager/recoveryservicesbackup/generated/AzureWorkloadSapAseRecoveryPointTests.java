// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapAseRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapAseRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapAseRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPAseRecoveryPoint\",\"recoveryPointTimeInUTC\":\"2021-10-13T23:00:43Z\",\"type\":\"Invalid\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Disabled\",\"extendedInfo\":{\"qgqqihedsvqwthmk\":\"tpvopvpbdb\"}},{\"type\":\"InstantRP\",\"status\":\"Invalid\",\"extendedInfo\":{\"dhohsdtmcdzsuf\":\"hsgqc\",\"pcvhdbevwqqxeys\":\"ohdxbzlmcmu\"}},{\"type\":\"Invalid\",\"status\":\"Valid\",\"extendedInfo\":{\"mygvkzqkj\":\"kfkbgbzbowxeqocl\",\"ezrxcczurtleipqx\":\"eokbze\",\"gnzvdfbzdixzm\":\"kwv\"}}],\"recoveryPointMoveReadinessInfo\":{\"ostzelndlatu\":{\"isReadyForMove\":false,\"additionalInfo\":\"wopqhewjptmcgs\"}},\"recoveryPointProperties\":{\"expiryTime\":\"lbiojlvfhrb\",\"ruleName\":\"neqvcwwyyurmo\",\"isSoftDeleted\":false}}")
            .toObject(AzureWorkloadSapAseRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-13T23:00:43Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("tpvopvpbdb",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("qgqqihedsvqwthmk"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("ostzelndlatu").isReadyForMove());
        Assertions.assertEquals("wopqhewjptmcgs",
            model.recoveryPointMoveReadinessInfo().get("ostzelndlatu").additionalInfo());
        Assertions.assertEquals("lbiojlvfhrb", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("neqvcwwyyurmo", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapAseRecoveryPoint model
            = new AzureWorkloadSapAseRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-10-13T23:00:43Z"))
                .withType(RestorePointType.INVALID)
                .withRecoveryPointTierDetails(Arrays.asList(
                    new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                        .withStatus(RecoveryPointTierStatus.DISABLED)
                        .withExtendedInfo(mapOf("qgqqihedsvqwthmk", "tpvopvpbdb")),
                    new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                        .withStatus(RecoveryPointTierStatus.INVALID)
                        .withExtendedInfo(mapOf("dhohsdtmcdzsuf", "hsgqc", "pcvhdbevwqqxeys", "ohdxbzlmcmu")),
                    new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                        .withStatus(RecoveryPointTierStatus.VALID)
                        .withExtendedInfo(mapOf("mygvkzqkj", "kfkbgbzbowxeqocl", "ezrxcczurtleipqx", "eokbze",
                            "gnzvdfbzdixzm", "kwv"))))
                .withRecoveryPointMoveReadinessInfo(mapOf("ostzelndlatu",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false)
                        .withAdditionalInfo("wopqhewjptmcgs")))
                .withRecoveryPointProperties(new RecoveryPointProperties().withExpiryTime("lbiojlvfhrb")
                    .withRuleName("neqvcwwyyurmo")
                    .withIsSoftDeleted(false));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapAseRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-13T23:00:43Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("tpvopvpbdb",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("qgqqihedsvqwthmk"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("ostzelndlatu").isReadyForMove());
        Assertions.assertEquals("wopqhewjptmcgs",
            model.recoveryPointMoveReadinessInfo().get("ostzelndlatu").additionalInfo());
        Assertions.assertEquals("lbiojlvfhrb", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("neqvcwwyyurmo", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
