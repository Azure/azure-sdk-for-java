// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectionPolicyResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectionPolicyResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionPolicyResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"backupManagementType\":\"ProtectionPolicy\",\"protectedItemsCount\":208644200,\"resourceGuardOperationRequests\":[\"kvceoveilovnotyf\",\"fcnj\",\"k\"]},\"eTag\":\"x\",\"location\":\"hbttkphyw\",\"tags\":{\"mclfplphoxuscr\":\"jtoqne\",\"psbjta\":\"abgy\",\"kqujidsuyono\":\"qugxywpmueefjzwf\",\"tcc\":\"glaocq\"},\"id\":\"g\",\"name\":\"udxytlmoyrx\",\"type\":\"wfudwpzntxhdzhl\"}")
            .toObject(ProtectionPolicyResourceInner.class);
        Assertions.assertEquals("hbttkphyw", model.location());
        Assertions.assertEquals("jtoqne", model.tags().get("mclfplphoxuscr"));
        Assertions.assertEquals(208644200, model.properties().protectedItemsCount());
        Assertions.assertEquals("kvceoveilovnotyf", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("x", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionPolicyResourceInner model = new ProtectionPolicyResourceInner().withLocation("hbttkphyw")
            .withTags(mapOf("mclfplphoxuscr", "jtoqne", "psbjta", "abgy", "kqujidsuyono", "qugxywpmueefjzwf", "tcc",
                "glaocq"))
            .withProperties(new ProtectionPolicy().withProtectedItemsCount(208644200)
                .withResourceGuardOperationRequests(Arrays.asList("kvceoveilovnotyf", "fcnj", "k")))
            .withEtag("x");
        model = BinaryData.fromObject(model).toObject(ProtectionPolicyResourceInner.class);
        Assertions.assertEquals("hbttkphyw", model.location());
        Assertions.assertEquals("jtoqne", model.tags().get("mclfplphoxuscr"));
        Assertions.assertEquals(208644200, model.properties().protectedItemsCount());
        Assertions.assertEquals("kvceoveilovnotyf", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("x", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
