// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectionPolicyResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectionPolicyResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionPolicyResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"backupManagementType\":\"ProtectionPolicy\",\"protectedItemsCount\":1565866782,\"resourceGuardOperationRequests\":[\"qik\",\"bbovplwzbhvgyugu\",\"svmkfssxquk\",\"fpl\"]},\"eTag\":\"gsxnkjzkdeslpv\",\"location\":\"opwi\",\"tags\":{\"zb\":\"hxpkd\",\"upedeojnabckhs\":\"iuebbaumny\"},\"id\":\"txp\",\"name\":\"ie\",\"type\":\"tfhvpesapskrdqmh\"}")
                .toObject(ProtectionPolicyResourceInner.class);
        Assertions.assertEquals("opwi", model.location());
        Assertions.assertEquals("hxpkd", model.tags().get("zb"));
        Assertions.assertEquals(1565866782, model.properties().protectedItemsCount());
        Assertions.assertEquals("qik", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("gsxnkjzkdeslpv", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionPolicyResourceInner model =
            new ProtectionPolicyResourceInner()
                .withLocation("opwi")
                .withTags(mapOf("zb", "hxpkd", "upedeojnabckhs", "iuebbaumny"))
                .withProperties(
                    new ProtectionPolicy()
                        .withProtectedItemsCount(1565866782)
                        .withResourceGuardOperationRequests(
                            Arrays.asList("qik", "bbovplwzbhvgyugu", "svmkfssxquk", "fpl")))
                .withEtag("gsxnkjzkdeslpv");
        model = BinaryData.fromObject(model).toObject(ProtectionPolicyResourceInner.class);
        Assertions.assertEquals("opwi", model.location());
        Assertions.assertEquals("hxpkd", model.tags().get("zb"));
        Assertions.assertEquals(1565866782, model.properties().protectedItemsCount());
        Assertions.assertEquals("qik", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("gsxnkjzkdeslpv", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
