// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectionPolicyResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectionPolicyResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionPolicyResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"backupManagementType\":\"ProtectionPolicy\",\"protectedItemsCount\":670634549,\"resourceGuardOperationRequests\":[\"gnxytxhpzxbz\"]},\"eTag\":\"zabglcuhxwt\",\"location\":\"tyq\",\"tags\":{\"svmkfssxquk\":\"bbovplwzbhvgyugu\",\"mg\":\"fpl\"},\"id\":\"xnkjzkdesl\",\"name\":\"vlopwiyighx\",\"type\":\"kdwzbaiuebbaumny\"}")
            .toObject(ProtectionPolicyResourceInner.class);
        Assertions.assertEquals("tyq", model.location());
        Assertions.assertEquals("bbovplwzbhvgyugu", model.tags().get("svmkfssxquk"));
        Assertions.assertEquals(670634549, model.properties().protectedItemsCount());
        Assertions.assertEquals("gnxytxhpzxbz", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("zabglcuhxwt", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionPolicyResourceInner model = new ProtectionPolicyResourceInner().withLocation("tyq")
            .withTags(mapOf("svmkfssxquk", "bbovplwzbhvgyugu", "mg", "fpl")).withProperties(new ProtectionPolicy()
                .withProtectedItemsCount(670634549).withResourceGuardOperationRequests(Arrays.asList("gnxytxhpzxbz")))
            .withEtag("zabglcuhxwt");
        model = BinaryData.fromObject(model).toObject(ProtectionPolicyResourceInner.class);
        Assertions.assertEquals("tyq", model.location());
        Assertions.assertEquals("bbovplwzbhvgyugu", model.tags().get("svmkfssxquk"));
        Assertions.assertEquals(670634549, model.properties().protectedItemsCount());
        Assertions.assertEquals("gnxytxhpzxbz", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("zabglcuhxwt", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
