// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ContainerIdentityInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainer;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainerExtendedInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericContainerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericContainer model = BinaryData.fromString(
            "{\"containerType\":\"GenericContainer\",\"fabricName\":\"fkmbtsuahxsgxj\",\"extendedInformation\":{\"rawCertData\":\"zrrscub\",\"containerIdentityInfo\":{\"uniqueName\":\"drnpxqwodiff\",\"aadTenantId\":\"cjrmmua\",\"servicePrincipalClientId\":\"ibvjogjonmcy\",\"audience\":\"oyzbamwineofvf\"},\"serviceEndpoints\":{\"t\":\"pol\",\"ttxpnrupza\":\"evboclzhzjknyuxg\",\"swyskbruffg\":\"mrdixtreki\"}},\"friendlyName\":\"ukkutvl\",\"backupManagementType\":\"DPM\",\"registrationStatus\":\"qhvmblcouqe\",\"healthStatus\":\"hbcdsziry\",\"protectableObjectType\":\"ndo\"}")
            .toObject(GenericContainer.class);
        Assertions.assertEquals("ukkutvl", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.DPM, model.backupManagementType());
        Assertions.assertEquals("qhvmblcouqe", model.registrationStatus());
        Assertions.assertEquals("hbcdsziry", model.healthStatus());
        Assertions.assertEquals("ndo", model.protectableObjectType());
        Assertions.assertEquals("fkmbtsuahxsgxj", model.fabricName());
        Assertions.assertEquals("zrrscub", model.extendedInformation().rawCertData());
        Assertions.assertEquals("drnpxqwodiff", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("cjrmmua", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("ibvjogjonmcy",
            model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("oyzbamwineofvf", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("pol", model.extendedInformation().serviceEndpoints().get("t"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericContainer model = new GenericContainer().withFriendlyName("ukkutvl")
            .withBackupManagementType(BackupManagementType.DPM)
            .withRegistrationStatus("qhvmblcouqe")
            .withHealthStatus("hbcdsziry")
            .withProtectableObjectType("ndo")
            .withFabricName("fkmbtsuahxsgxj")
            .withExtendedInformation(new GenericContainerExtendedInfo().withRawCertData("zrrscub")
                .withContainerIdentityInfo(new ContainerIdentityInfo().withUniqueName("drnpxqwodiff")
                    .withAadTenantId("cjrmmua")
                    .withServicePrincipalClientId("ibvjogjonmcy")
                    .withAudience("oyzbamwineofvf"))
                .withServiceEndpoints(
                    mapOf("t", "pol", "ttxpnrupza", "evboclzhzjknyuxg", "swyskbruffg", "mrdixtreki")));
        model = BinaryData.fromObject(model).toObject(GenericContainer.class);
        Assertions.assertEquals("ukkutvl", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.DPM, model.backupManagementType());
        Assertions.assertEquals("qhvmblcouqe", model.registrationStatus());
        Assertions.assertEquals("hbcdsziry", model.healthStatus());
        Assertions.assertEquals("ndo", model.protectableObjectType());
        Assertions.assertEquals("fkmbtsuahxsgxj", model.fabricName());
        Assertions.assertEquals("zrrscub", model.extendedInformation().rawCertData());
        Assertions.assertEquals("drnpxqwodiff", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("cjrmmua", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("ibvjogjonmcy",
            model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("oyzbamwineofvf", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("pol", model.extendedInformation().serviceEndpoints().get("t"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
