// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ContainerIdentityInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainer;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainerExtendedInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericContainerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericContainer model = BinaryData.fromString(
            "{\"containerType\":\"GenericContainer\",\"fabricName\":\"nlzijiufe\",\"extendedInformation\":{\"rawCertData\":\"vflnwyvqkxrerln\",\"containerIdentityInfo\":{\"uniqueName\":\"yl\",\"aadTenantId\":\"wxzut\",\"servicePrincipalClientId\":\"ztwhghmupg\",\"audience\":\"jtcdxabbujftaben\"},\"serviceEndpoints\":{\"ucafedd\":\"lqpx\",\"gnhgook\":\"wnlzafwxu\"}},\"friendlyName\":\"alvnbwgpb\",\"backupManagementType\":\"DefaultBackup\",\"registrationStatus\":\"uclvdjj\",\"healthStatus\":\"yrdnqod\",\"protectableObjectType\":\"hhxhq\"}")
            .toObject(GenericContainer.class);
        Assertions.assertEquals("alvnbwgpb", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.DEFAULT_BACKUP, model.backupManagementType());
        Assertions.assertEquals("uclvdjj", model.registrationStatus());
        Assertions.assertEquals("yrdnqod", model.healthStatus());
        Assertions.assertEquals("hhxhq", model.protectableObjectType());
        Assertions.assertEquals("nlzijiufe", model.fabricName());
        Assertions.assertEquals("vflnwyvqkxrerln", model.extendedInformation().rawCertData());
        Assertions.assertEquals("yl", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("wxzut", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("ztwhghmupg",
            model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("jtcdxabbujftaben", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("lqpx", model.extendedInformation().serviceEndpoints().get("ucafedd"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericContainer model = new GenericContainer().withFriendlyName("alvnbwgpb")
            .withBackupManagementType(BackupManagementType.DEFAULT_BACKUP)
            .withRegistrationStatus("uclvdjj")
            .withHealthStatus("yrdnqod")
            .withProtectableObjectType("hhxhq")
            .withFabricName("nlzijiufe")
            .withExtendedInformation(new GenericContainerExtendedInfo().withRawCertData("vflnwyvqkxrerln")
                .withContainerIdentityInfo(new ContainerIdentityInfo().withUniqueName("yl")
                    .withAadTenantId("wxzut")
                    .withServicePrincipalClientId("ztwhghmupg")
                    .withAudience("jtcdxabbujftaben"))
                .withServiceEndpoints(mapOf("ucafedd", "lqpx", "gnhgook", "wnlzafwxu")));
        model = BinaryData.fromObject(model).toObject(GenericContainer.class);
        Assertions.assertEquals("alvnbwgpb", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.DEFAULT_BACKUP, model.backupManagementType());
        Assertions.assertEquals("uclvdjj", model.registrationStatus());
        Assertions.assertEquals("yrdnqod", model.healthStatus());
        Assertions.assertEquals("hhxhq", model.protectableObjectType());
        Assertions.assertEquals("nlzijiufe", model.fabricName());
        Assertions.assertEquals("vflnwyvqkxrerln", model.extendedInformation().rawCertData());
        Assertions.assertEquals("yl", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("wxzut", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("ztwhghmupg",
            model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("jtcdxabbujftaben", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("lqpx", model.extendedInformation().serviceEndpoints().get("ucafedd"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
