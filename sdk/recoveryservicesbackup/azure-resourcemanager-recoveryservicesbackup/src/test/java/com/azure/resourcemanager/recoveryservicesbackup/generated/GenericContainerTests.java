// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ContainerIdentityInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainer;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainerExtendedInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class GenericContainerTests {
    @Test
    public void testDeserialize() {
        GenericContainer model =
            BinaryData
                .fromString(
                    "{\"containerType\":\"GenericContainer\",\"fabricName\":\"ele\",\"extendedInformation\":{\"rawCertData\":\"bvqvwzkjopwbeo\",\"containerIdentityInfo\":{\"uniqueName\":\"kwzdqybxcea\",\"aadTenantId\":\"cptsoqfyiase\",\"servicePrincipalClientId\":\"hkrttzrazis\",\"audience\":\"kiuemv\"},\"serviceEndpoints\":{\"rx\":\"wzohm\",\"inhmdptys\":\"bsojk\",\"jp\":\"rqsgnzx\"}},\"friendlyName\":\"svjgpliufiqwoyxq\",\"backupManagementType\":\"DefaultBackup\",\"registrationStatus\":\"ohhoucqpqojxcxz\",\"healthStatus\":\"dcgdzbenribca\",\"protectableObjectType\":\"tzqdd\"}")
                .toObject(GenericContainer.class);
        Assertions.assertEquals("svjgpliufiqwoyxq", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.DEFAULT_BACKUP, model.backupManagementType());
        Assertions.assertEquals("ohhoucqpqojxcxz", model.registrationStatus());
        Assertions.assertEquals("dcgdzbenribca", model.healthStatus());
        Assertions.assertEquals("tzqdd", model.protectableObjectType());
        Assertions.assertEquals("ele", model.fabricName());
        Assertions.assertEquals("bvqvwzkjopwbeo", model.extendedInformation().rawCertData());
        Assertions.assertEquals("kwzdqybxcea", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("cptsoqfyiase", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions
            .assertEquals(
                "hkrttzrazis", model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("kiuemv", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("wzohm", model.extendedInformation().serviceEndpoints().get("rx"));
    }

    @Test
    public void testSerialize() {
        GenericContainer model =
            new GenericContainer()
                .withFriendlyName("svjgpliufiqwoyxq")
                .withBackupManagementType(BackupManagementType.DEFAULT_BACKUP)
                .withRegistrationStatus("ohhoucqpqojxcxz")
                .withHealthStatus("dcgdzbenribca")
                .withProtectableObjectType("tzqdd")
                .withFabricName("ele")
                .withExtendedInformation(
                    new GenericContainerExtendedInfo()
                        .withRawCertData("bvqvwzkjopwbeo")
                        .withContainerIdentityInfo(
                            new ContainerIdentityInfo()
                                .withUniqueName("kwzdqybxcea")
                                .withAadTenantId("cptsoqfyiase")
                                .withServicePrincipalClientId("hkrttzrazis")
                                .withAudience("kiuemv"))
                        .withServiceEndpoints(mapOf("rx", "wzohm", "inhmdptys", "bsojk", "jp", "rqsgnzx")));
        model = BinaryData.fromObject(model).toObject(GenericContainer.class);
        Assertions.assertEquals("svjgpliufiqwoyxq", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.DEFAULT_BACKUP, model.backupManagementType());
        Assertions.assertEquals("ohhoucqpqojxcxz", model.registrationStatus());
        Assertions.assertEquals("dcgdzbenribca", model.healthStatus());
        Assertions.assertEquals("tzqdd", model.protectableObjectType());
        Assertions.assertEquals("ele", model.fabricName());
        Assertions.assertEquals("bvqvwzkjopwbeo", model.extendedInformation().rawCertData());
        Assertions.assertEquals("kwzdqybxcea", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("cptsoqfyiase", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions
            .assertEquals(
                "hkrttzrazis", model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("kiuemv", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("wzohm", model.extendedInformation().serviceEndpoints().get("rx"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
