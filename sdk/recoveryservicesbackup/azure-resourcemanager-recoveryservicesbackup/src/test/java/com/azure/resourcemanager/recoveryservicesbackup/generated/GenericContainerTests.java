// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ContainerIdentityInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainer;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericContainerExtendedInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericContainerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericContainer model = BinaryData.fromString(
            "{\"containerType\":\"GenericContainer\",\"fabricName\":\"juhpsprkzyau\",\"extendedInformation\":{\"rawCertData\":\"ccxnafbwqroohtuo\",\"containerIdentityInfo\":{\"uniqueName\":\"onurjtumghihpv\",\"aadTenantId\":\"mslclblyjxlt\",\"servicePrincipalClientId\":\"juscvsfx\",\"audience\":\"ctmgxuupbezqccy\"},\"serviceEndpoints\":{\"qm\":\"ceukdqkkyihztg\"}},\"friendlyName\":\"zgwldoychillcec\",\"backupManagementType\":\"AzureBackupServer\",\"registrationStatus\":\"waoaguhi\",\"healthStatus\":\"llizs\",\"protectableObjectType\":\"csjvhrwef\"}")
            .toObject(GenericContainer.class);
        Assertions.assertEquals("zgwldoychillcec", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_BACKUP_SERVER, model.backupManagementType());
        Assertions.assertEquals("waoaguhi", model.registrationStatus());
        Assertions.assertEquals("llizs", model.healthStatus());
        Assertions.assertEquals("csjvhrwef", model.protectableObjectType());
        Assertions.assertEquals("juhpsprkzyau", model.fabricName());
        Assertions.assertEquals("ccxnafbwqroohtuo", model.extendedInformation().rawCertData());
        Assertions.assertEquals("onurjtumghihpv", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("mslclblyjxlt", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("juscvsfx",
            model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("ctmgxuupbezqccy", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("ceukdqkkyihztg", model.extendedInformation().serviceEndpoints().get("qm"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericContainer model = new GenericContainer().withFriendlyName("zgwldoychillcec")
            .withBackupManagementType(BackupManagementType.AZURE_BACKUP_SERVER).withRegistrationStatus("waoaguhi")
            .withHealthStatus("llizs").withProtectableObjectType("csjvhrwef").withFabricName("juhpsprkzyau")
            .withExtendedInformation(new GenericContainerExtendedInfo().withRawCertData("ccxnafbwqroohtuo")
                .withContainerIdentityInfo(
                    new ContainerIdentityInfo().withUniqueName("onurjtumghihpv").withAadTenantId("mslclblyjxlt")
                        .withServicePrincipalClientId("juscvsfx").withAudience("ctmgxuupbezqccy"))
                .withServiceEndpoints(mapOf("qm", "ceukdqkkyihztg")));
        model = BinaryData.fromObject(model).toObject(GenericContainer.class);
        Assertions.assertEquals("zgwldoychillcec", model.friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_BACKUP_SERVER, model.backupManagementType());
        Assertions.assertEquals("waoaguhi", model.registrationStatus());
        Assertions.assertEquals("llizs", model.healthStatus());
        Assertions.assertEquals("csjvhrwef", model.protectableObjectType());
        Assertions.assertEquals("juhpsprkzyau", model.fabricName());
        Assertions.assertEquals("ccxnafbwqroohtuo", model.extendedInformation().rawCertData());
        Assertions.assertEquals("onurjtumghihpv", model.extendedInformation().containerIdentityInfo().uniqueName());
        Assertions.assertEquals("mslclblyjxlt", model.extendedInformation().containerIdentityInfo().aadTenantId());
        Assertions.assertEquals("juscvsfx",
            model.extendedInformation().containerIdentityInfo().servicePrincipalClientId());
        Assertions.assertEquals("ctmgxuupbezqccy", model.extendedInformation().containerIdentityInfo().audience());
        Assertions.assertEquals("ceukdqkkyihztg", model.extendedInformation().serviceEndpoints().get("qm"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
