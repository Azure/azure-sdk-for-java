// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapAsePointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapAsePointInTimeRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapAsePointInTimeRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPAsePointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-06-03T18:41:03Z\",\"endTime\":\"2021-07-13T22:45Z\"},{\"startTime\":\"2021-04-12T08:11:42Z\",\"endTime\":\"2021-10-31T09:17:43Z\"},{\"startTime\":\"2021-02-14T11:03:13Z\",\"endTime\":\"2021-03-20T15:11:50Z\"}],\"recoveryPointTimeInUTC\":\"2021-02-23T18:39:19Z\",\"type\":\"Differential\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"zonzlrpiqywnc\":\"gnl\"}},{\"type\":\"ArchivedRP\",\"status\":\"Valid\",\"extendedInfo\":{\"reljeamur\":\"fizehtdhgbjk\",\"xlpm\":\"zmlovuanash\",\"lvidizozs\":\"erbdk\"}},{\"type\":\"InstantRP\",\"status\":\"Invalid\",\"extendedInfo\":{\"dgnwncypuuwwlt\":\"on\",\"tzenk\":\"uqj\",\"zhmkdasvflyh\":\"if\",\"oldforobw\":\"xcudchxgsr\"}},{\"type\":\"InstantRP\",\"status\":\"Disabled\",\"extendedInfo\":{\"dxe\":\"hfovvacqpbtu\",\"elawumu\":\"zab\"}}],\"recoveryPointMoveReadinessInfo\":{\"mdr\":{\"isReadyForMove\":false,\"additionalInfo\":\"rrwoycqucwyhahn\"},\"rutlwexxwlalniex\":{\"isReadyForMove\":true,\"additionalInfo\":\"hpsvfu\"},\"chzyvlixqnrk\":{\"isReadyForMove\":false,\"additionalInfo\":\"pgepqtybbwwpgda\"}},\"recoveryPointProperties\":{\"expiryTime\":\"jibnxmysu\",\"ruleName\":\"wq\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadSapAsePointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T18:39:19Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("gnl", model.recoveryPointTierDetails().get(0).extendedInfo().get("zonzlrpiqywnc"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("mdr").isReadyForMove());
        Assertions.assertEquals("rrwoycqucwyhahn", model.recoveryPointMoveReadinessInfo().get("mdr").additionalInfo());
        Assertions.assertEquals("jibnxmysu", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("wq", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-03T18:41:03Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T22:45Z"), model.timeRanges().get(0).endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapAsePointInTimeRecoveryPoint model = new AzureWorkloadSapAsePointInTimeRecoveryPoint()
            .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-02-23T18:39:19Z"))
            .withType(RestorePointType.DIFFERENTIAL)
            .withRecoveryPointTierDetails(Arrays.asList(
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                    .withStatus(RecoveryPointTierStatus.REHYDRATED)
                    .withExtendedInfo(mapOf("zonzlrpiqywnc", "gnl")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.ARCHIVED_RP)
                    .withStatus(RecoveryPointTierStatus.VALID)
                    .withExtendedInfo(mapOf("reljeamur", "fizehtdhgbjk", "xlpm", "zmlovuanash", "lvidizozs", "erbdk")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                    .withStatus(RecoveryPointTierStatus.INVALID)
                    .withExtendedInfo(
                        mapOf("dgnwncypuuwwlt", "on", "tzenk", "uqj", "zhmkdasvflyh", "if", "oldforobw", "xcudchxgsr")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                    .withStatus(RecoveryPointTierStatus.DISABLED)
                    .withExtendedInfo(mapOf("dxe", "hfovvacqpbtu", "elawumu", "zab"))))
            .withRecoveryPointMoveReadinessInfo(mapOf("mdr",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("rrwoycqucwyhahn"),
                "rutlwexxwlalniex",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("hpsvfu"),
                "chzyvlixqnrk",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("pgepqtybbwwpgda")))
            .withRecoveryPointProperties(
                new RecoveryPointProperties().withExpiryTime("jibnxmysu").withRuleName("wq").withIsSoftDeleted(true))
            .withTimeRanges(Arrays.asList(
                new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-06-03T18:41:03Z"))
                    .withEndTime(OffsetDateTime.parse("2021-07-13T22:45Z")),
                new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-04-12T08:11:42Z"))
                    .withEndTime(OffsetDateTime.parse("2021-10-31T09:17:43Z")),
                new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-02-14T11:03:13Z"))
                    .withEndTime(OffsetDateTime.parse("2021-03-20T15:11:50Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapAsePointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T18:39:19Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("gnl", model.recoveryPointTierDetails().get(0).extendedInfo().get("zonzlrpiqywnc"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("mdr").isReadyForMove());
        Assertions.assertEquals("rrwoycqucwyhahn", model.recoveryPointMoveReadinessInfo().get("mdr").additionalInfo());
        Assertions.assertEquals("jibnxmysu", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("wq", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-03T18:41:03Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T22:45Z"), model.timeRanges().get(0).endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
