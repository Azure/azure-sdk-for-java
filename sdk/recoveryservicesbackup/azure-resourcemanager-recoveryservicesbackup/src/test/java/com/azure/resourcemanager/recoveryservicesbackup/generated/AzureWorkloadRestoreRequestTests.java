// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadRestoreRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadRestoreRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadRestoreRequest\",\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"yinzqodfvpgs\",\"propertyBag\":{\"vzflbq\":\"gsgbpfgzdjt\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"lgafcqusrdve\",\"databaseName\":\"wsdtutnwl\",\"targetDirectoryForFileRestore\":\"ycvuzhyrmewipmv\"},\"recoveryMode\":\"FileRecovery\",\"targetVirtualMachineId\":\"ukuqgsj\"}")
                .toObject(AzureWorkloadRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("yinzqodfvpgs", model.sourceResourceId());
        Assertions.assertEquals("gsgbpfgzdjt", model.propertyBag().get("vzflbq"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("lgafcqusrdve", model.targetInfo().containerId());
        Assertions.assertEquals("wsdtutnwl", model.targetInfo().databaseName());
        Assertions.assertEquals("ycvuzhyrmewipmv", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ukuqgsj", model.targetVirtualMachineId());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadRestoreRequest model =
            new AzureWorkloadRestoreRequest()
                .withRecoveryType(RecoveryType.INVALID)
                .withSourceResourceId("yinzqodfvpgs")
                .withPropertyBag(mapOf("vzflbq", "gsgbpfgzdjt"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                        .withContainerId("lgafcqusrdve")
                        .withDatabaseName("wsdtutnwl")
                        .withTargetDirectoryForFileRestore("ycvuzhyrmewipmv"))
                .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
                .withTargetVirtualMachineId("ukuqgsj");
        model = BinaryData.fromObject(model).toObject(AzureWorkloadRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("yinzqodfvpgs", model.sourceResourceId());
        Assertions.assertEquals("gsgbpfgzdjt", model.propertyBag().get("vzflbq"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("lgafcqusrdve", model.targetInfo().containerId());
        Assertions.assertEquals("wsdtutnwl", model.targetInfo().databaseName());
        Assertions.assertEquals("ycvuzhyrmewipmv", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ukuqgsj", model.targetVirtualMachineId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
