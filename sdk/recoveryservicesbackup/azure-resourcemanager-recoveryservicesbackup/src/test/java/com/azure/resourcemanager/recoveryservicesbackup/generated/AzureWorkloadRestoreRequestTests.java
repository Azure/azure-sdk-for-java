// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadRestoreRequest\",\"recoveryType\":\"RestoreDisks\",\"sourceResourceId\":\"axhnfh\",\"propertyBag\":{\"ouwivkxoyzunbixx\":\"vi\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"cpwpg\",\"databaseName\":\"rc\",\"targetDirectoryForFileRestore\":\"tso\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"enxpmyyefr\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"dnqqskawaoqvmmb\",\"identityName\":\"qfr\",\"userAssignedIdentityProperties\":{\"clientId\":\"kzmegnitgvkxlz\",\"principalId\":\"drf\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"lzxwhcansy\"},\"targetVirtualMachineId\":\"yqhlwigdivbkbx\",\"resourceGuardOperationRequests\":[\"fajuwas\"]}")
            .toObject(AzureWorkloadRestoreRequest.class);
        Assertions.assertEquals("fajuwas", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("axhnfh", model.sourceResourceId());
        Assertions.assertEquals("vi", model.propertyBag().get("ouwivkxoyzunbixx"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("cpwpg", model.targetInfo().containerId());
        Assertions.assertEquals("rc", model.targetInfo().databaseName());
        Assertions.assertEquals("tso", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("enxpmyyefr", model.targetResourceGroupName());
        Assertions.assertEquals("dnqqskawaoqvmmb", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("qfr", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("kzmegnitgvkxlz",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("drf",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("lzxwhcansy", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yqhlwigdivbkbx", model.targetVirtualMachineId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadRestoreRequest model
            = new AzureWorkloadRestoreRequest().withResourceGuardOperationRequests(Arrays.asList("fajuwas"))
                .withRecoveryType(RecoveryType.RESTORE_DISKS)
                .withSourceResourceId("axhnfh")
                .withPropertyBag(mapOf("ouwivkxoyzunbixx", "vi"))
                .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                    .withContainerId("cpwpg")
                    .withDatabaseName("rc")
                    .withTargetDirectoryForFileRestore("tso"))
                .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
                .withTargetResourceGroupName("enxpmyyefr")
                .withUserAssignedManagedIdentityDetails(
                    new UserAssignedManagedIdentityDetails().withIdentityArmId("dnqqskawaoqvmmb")
                        .withIdentityName("qfr")
                        .withUserAssignedIdentityProperties(
                            new UserAssignedIdentityProperties().withClientId("kzmegnitgvkxlz").withPrincipalId("drf")))
                .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(true)
                    .withLogPointInTimeForDBRecovery("lzxwhcansy"))
                .withTargetVirtualMachineId("yqhlwigdivbkbx");
        model = BinaryData.fromObject(model).toObject(AzureWorkloadRestoreRequest.class);
        Assertions.assertEquals("fajuwas", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("axhnfh", model.sourceResourceId());
        Assertions.assertEquals("vi", model.propertyBag().get("ouwivkxoyzunbixx"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("cpwpg", model.targetInfo().containerId());
        Assertions.assertEquals("rc", model.targetInfo().databaseName());
        Assertions.assertEquals("tso", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("enxpmyyefr", model.targetResourceGroupName());
        Assertions.assertEquals("dnqqskawaoqvmmb", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("qfr", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("kzmegnitgvkxlz",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("drf",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("lzxwhcansy", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yqhlwigdivbkbx", model.targetVirtualMachineId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
