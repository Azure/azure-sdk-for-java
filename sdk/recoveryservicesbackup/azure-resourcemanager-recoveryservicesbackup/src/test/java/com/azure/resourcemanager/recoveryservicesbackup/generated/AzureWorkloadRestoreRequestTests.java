// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadRestoreRequest\",\"recoveryType\":\"RestoreDisks\",\"sourceResourceId\":\"clrcivtsox\",\"propertyBag\":{\"mpdnqqskawa\":\"enxpmyyefr\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"bnpqfrtqlkzme\",\"databaseName\":\"itgvkx\",\"targetDirectoryForFileRestore\":\"yqdrf\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetResourceGroupName\":\"alzxwhcan\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"oyqhlwig\",\"identityName\":\"vbkbxgomf\",\"userAssignedIdentityProperties\":{\"clientId\":\"wasqvdaeyyg\",\"principalId\":\"akjsqz\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"kgimsidxasic\"},\"targetVirtualMachineId\":\"yvvjskgfmo\"}")
            .toObject(AzureWorkloadRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("clrcivtsox", model.sourceResourceId());
        Assertions.assertEquals("enxpmyyefr", model.propertyBag().get("mpdnqqskawa"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("bnpqfrtqlkzme", model.targetInfo().containerId());
        Assertions.assertEquals("itgvkx", model.targetInfo().databaseName());
        Assertions.assertEquals("yqdrf", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("alzxwhcan", model.targetResourceGroupName());
        Assertions.assertEquals("oyqhlwig", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("vbkbxgomf", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("wasqvdaeyyg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("akjsqz",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("kgimsidxasic", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yvvjskgfmo", model.targetVirtualMachineId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadRestoreRequest model = new AzureWorkloadRestoreRequest()
            .withRecoveryType(RecoveryType.RESTORE_DISKS).withSourceResourceId("clrcivtsox")
            .withPropertyBag(mapOf("mpdnqqskawa", "enxpmyyefr"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.OVERWRITE)
                .withContainerId("bnpqfrtqlkzme").withDatabaseName("itgvkx").withTargetDirectoryForFileRestore("yqdrf"))
            .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY).withTargetResourceGroupName("alzxwhcan")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                .withIdentityArmId("oyqhlwig").withIdentityName("vbkbxgomf").withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("wasqvdaeyyg").withPrincipalId("akjsqz")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(false)
                .withLogPointInTimeForDBRecovery("kgimsidxasic"))
            .withTargetVirtualMachineId("yvvjskgfmo");
        model = BinaryData.fromObject(model).toObject(AzureWorkloadRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("clrcivtsox", model.sourceResourceId());
        Assertions.assertEquals("enxpmyyefr", model.propertyBag().get("mpdnqqskawa"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("bnpqfrtqlkzme", model.targetInfo().containerId());
        Assertions.assertEquals("itgvkx", model.targetInfo().databaseName());
        Assertions.assertEquals("yqdrf", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("alzxwhcan", model.targetResourceGroupName());
        Assertions.assertEquals("oyqhlwig", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("vbkbxgomf", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("wasqvdaeyyg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("akjsqz",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("kgimsidxasic", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yvvjskgfmo", model.targetVirtualMachineId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
