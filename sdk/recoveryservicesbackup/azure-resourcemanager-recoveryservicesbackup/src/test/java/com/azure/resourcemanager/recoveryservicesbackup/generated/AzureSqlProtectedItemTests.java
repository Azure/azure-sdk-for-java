// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureSqlProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureSqlProtectedItemExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlProtectedItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlProtectedItem model = BinaryData.fromString(
            "{\"protectedItemType\":\"Microsoft.Sql/servers/databases\",\"protectedItemDataId\":\"udtjuewbc\",\"protectionState\":\"Protected\",\"extendedInfo\":{\"oldestRecoveryPoint\":\"2021-03-30T06:07:22Z\",\"recoveryPointCount\":143136567,\"policyState\":\"yxccyb\"},\"backupManagementType\":\"AzureStorage\",\"workloadType\":\"SQLDB\",\"containerName\":\"kudzpxgwj\",\"sourceResourceId\":\"mag\",\"policyId\":\"cyohpfkyrkdbd\",\"lastRecoveryPoint\":\"2021-11-23T10:21:46Z\",\"backupSetName\":\"sjkmnwqj\",\"createMode\":\"Default\",\"deferredDeleteTimeInUTC\":\"2021-01-19T13:37:50Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"d\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"n\",\"ntfpmvmemfnc\",\"dwvvba\",\"xlllchp\"],\"isArchiveEnabled\":false,\"policyName\":\"evwrdnhfuk\",\"softDeleteRetentionPeriodInDays\":1934709471,\"vaultId\":\"cswsmystul\"}")
            .toObject(AzureSqlProtectedItem.class);
        Assertions.assertEquals("kudzpxgwj", model.containerName());
        Assertions.assertEquals("mag", model.sourceResourceId());
        Assertions.assertEquals("cyohpfkyrkdbd", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-23T10:21:46Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("sjkmnwqj", model.backupSetName());
        Assertions.assertEquals(CreateMode.DEFAULT, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T13:37:50Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("d", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("n", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.isArchiveEnabled());
        Assertions.assertEquals("evwrdnhfuk", model.policyName());
        Assertions.assertEquals(1934709471, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("udtjuewbc", model.protectedItemDataId());
        Assertions.assertEquals(ProtectedItemState.PROTECTED, model.protectionState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-30T06:07:22Z"),
            model.extendedInfo().oldestRecoveryPoint());
        Assertions.assertEquals(143136567, model.extendedInfo().recoveryPointCount());
        Assertions.assertEquals("yxccyb", model.extendedInfo().policyState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlProtectedItem model = new AzureSqlProtectedItem().withContainerName("kudzpxgwj")
            .withSourceResourceId("mag")
            .withPolicyId("cyohpfkyrkdbd")
            .withLastRecoveryPoint(OffsetDateTime.parse("2021-11-23T10:21:46Z"))
            .withBackupSetName("sjkmnwqj")
            .withCreateMode(CreateMode.DEFAULT)
            .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-01-19T13:37:50Z"))
            .withIsScheduledForDeferredDelete(false)
            .withDeferredDeleteTimeRemaining("d")
            .withIsDeferredDeleteScheduleUpcoming(true)
            .withIsRehydrate(true)
            .withResourceGuardOperationRequests(Arrays.asList("n", "ntfpmvmemfnc", "dwvvba", "xlllchp"))
            .withIsArchiveEnabled(false)
            .withPolicyName("evwrdnhfuk")
            .withSoftDeleteRetentionPeriod(1934709471)
            .withProtectedItemDataId("udtjuewbc")
            .withProtectionState(ProtectedItemState.PROTECTED)
            .withExtendedInfo(new AzureSqlProtectedItemExtendedInfo()
                .withOldestRecoveryPoint(OffsetDateTime.parse("2021-03-30T06:07:22Z"))
                .withRecoveryPointCount(143136567)
                .withPolicyState("yxccyb"));
        model = BinaryData.fromObject(model).toObject(AzureSqlProtectedItem.class);
        Assertions.assertEquals("kudzpxgwj", model.containerName());
        Assertions.assertEquals("mag", model.sourceResourceId());
        Assertions.assertEquals("cyohpfkyrkdbd", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-23T10:21:46Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("sjkmnwqj", model.backupSetName());
        Assertions.assertEquals(CreateMode.DEFAULT, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T13:37:50Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("d", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("n", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.isArchiveEnabled());
        Assertions.assertEquals("evwrdnhfuk", model.policyName());
        Assertions.assertEquals(1934709471, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("udtjuewbc", model.protectedItemDataId());
        Assertions.assertEquals(ProtectedItemState.PROTECTED, model.protectionState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-30T06:07:22Z"),
            model.extendedInfo().oldestRecoveryPoint());
        Assertions.assertEquals(143136567, model.extendedInfo().recoveryPointCount());
        Assertions.assertEquals("yxccyb", model.extendedInfo().policyState());
    }
}
