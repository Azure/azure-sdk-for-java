// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItem;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ProtectedItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectedItem model = BinaryData.fromString(
            "{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureBackupServer\",\"workloadType\":\"Sharepoint\",\"containerName\":\"xjmflbvv\",\"sourceResourceId\":\"hrk\",\"policyId\":\"iwwzjuqk\",\"lastRecoveryPoint\":\"2021-05-03T11:30:29Z\",\"backupSetName\":\"jiwkuofoskghsau\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2021-01-11T01:27:45Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"eduugi\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"y\"],\"isArchiveEnabled\":true,\"policyName\":\"e\",\"softDeleteRetentionPeriodInDays\":981492544,\"vaultId\":\"npc\"}")
            .toObject(ProtectedItem.class);
        Assertions.assertEquals("xjmflbvv", model.containerName());
        Assertions.assertEquals("hrk", model.sourceResourceId());
        Assertions.assertEquals("iwwzjuqk", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T11:30:29Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("jiwkuofoskghsau", model.backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T01:27:45Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("eduugi", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("y", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("e", model.policyName());
        Assertions.assertEquals(981492544, model.softDeleteRetentionPeriod());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectedItem model = new ProtectedItem().withContainerName("xjmflbvv")
            .withSourceResourceId("hrk")
            .withPolicyId("iwwzjuqk")
            .withLastRecoveryPoint(OffsetDateTime.parse("2021-05-03T11:30:29Z"))
            .withBackupSetName("jiwkuofoskghsau")
            .withCreateMode(CreateMode.INVALID)
            .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-01-11T01:27:45Z"))
            .withIsScheduledForDeferredDelete(true)
            .withDeferredDeleteTimeRemaining("eduugi")
            .withIsDeferredDeleteScheduleUpcoming(true)
            .withIsRehydrate(true)
            .withResourceGuardOperationRequests(Arrays.asList("y"))
            .withIsArchiveEnabled(true)
            .withPolicyName("e")
            .withSoftDeleteRetentionPeriod(981492544);
        model = BinaryData.fromObject(model).toObject(ProtectedItem.class);
        Assertions.assertEquals("xjmflbvv", model.containerName());
        Assertions.assertEquals("hrk", model.sourceResourceId());
        Assertions.assertEquals("iwwzjuqk", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T11:30:29Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("jiwkuofoskghsau", model.backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T01:27:45Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("eduugi", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("y", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("e", model.policyName());
        Assertions.assertEquals(981492544, model.softDeleteRetentionPeriod());
    }
}
