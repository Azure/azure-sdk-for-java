// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ResourceGuardProxyBaseResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardOperationDetail;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBase;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceGuardProxyBaseResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceGuardProxyBaseResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"resourceGuardResourceId\":\"ejvegrhbpnaixex\",\"resourceGuardOperationDetails\":[{\"vaultCriticalOperation\":\"reaxhcexdr\",\"defaultResourceRequest\":\"qahqkghtpwijn\"}],\"lastUpdatedTime\":\"jsvfycxzbfvoowv\",\"description\":\"mtg\"},\"eTag\":\"ppyostronzmyhgf\",\"location\":\"pnsxkmcwaek\",\"tags\":{\"ikkx\":\"reafxtsgumhjg\",\"qpvuzlmvfelf\":\"slol\",\"crpw\":\"tgp\"},\"id\":\"xeznoi\",\"name\":\"brnjwmw\",\"type\":\"pn\"}")
            .toObject(ResourceGuardProxyBaseResourceInner.class);
        Assertions.assertEquals("pnsxkmcwaek", model.location());
        Assertions.assertEquals("reafxtsgumhjg", model.tags().get("ikkx"));
        Assertions.assertEquals("ejvegrhbpnaixex", model.properties().resourceGuardResourceId());
        Assertions.assertEquals("reaxhcexdr",
            model.properties().resourceGuardOperationDetails().get(0).vaultCriticalOperation());
        Assertions.assertEquals("qahqkghtpwijn",
            model.properties().resourceGuardOperationDetails().get(0).defaultResourceRequest());
        Assertions.assertEquals("jsvfycxzbfvoowv", model.properties().lastUpdatedTime());
        Assertions.assertEquals("mtg", model.properties().description());
        Assertions.assertEquals("ppyostronzmyhgf", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceGuardProxyBaseResourceInner model
            = new ResourceGuardProxyBaseResourceInner().withLocation("pnsxkmcwaek")
                .withTags(mapOf("ikkx", "reafxtsgumhjg", "qpvuzlmvfelf", "slol", "crpw", "tgp"))
                .withProperties(new ResourceGuardProxyBase().withResourceGuardResourceId("ejvegrhbpnaixex")
                    .withResourceGuardOperationDetails(
                        Arrays.asList(new ResourceGuardOperationDetail().withVaultCriticalOperation("reaxhcexdr")
                            .withDefaultResourceRequest("qahqkghtpwijn")))
                    .withLastUpdatedTime("jsvfycxzbfvoowv")
                    .withDescription("mtg"))
                .withEtag("ppyostronzmyhgf");
        model = BinaryData.fromObject(model).toObject(ResourceGuardProxyBaseResourceInner.class);
        Assertions.assertEquals("pnsxkmcwaek", model.location());
        Assertions.assertEquals("reafxtsgumhjg", model.tags().get("ikkx"));
        Assertions.assertEquals("ejvegrhbpnaixex", model.properties().resourceGuardResourceId());
        Assertions.assertEquals("reaxhcexdr",
            model.properties().resourceGuardOperationDetails().get(0).vaultCriticalOperation());
        Assertions.assertEquals("qahqkghtpwijn",
            model.properties().resourceGuardOperationDetails().get(0).defaultResourceRequest());
        Assertions.assertEquals("jsvfycxzbfvoowv", model.properties().lastUpdatedTime());
        Assertions.assertEquals("mtg", model.properties().description());
        Assertions.assertEquals("ppyostronzmyhgf", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
