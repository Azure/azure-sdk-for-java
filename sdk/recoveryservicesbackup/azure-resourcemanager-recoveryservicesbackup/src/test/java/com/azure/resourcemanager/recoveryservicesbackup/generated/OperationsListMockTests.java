// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.ClientDiscoveryValueForSingleApi;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"dkygywezski\",\"display\":{\"provider\":\"f\",\"resource\":\"zmxieqvdsmaklix\",\"operation\":\"ah\",\"description\":\"xalybxawoijpo\"},\"origin\":\"blxpkkwjdjodq\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"n\",\"displayName\":\"mehllizhceu\",\"blobDuration\":\"qodkadppyibngql\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ClientDiscoveryValueForSingleApi> response
            = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dkygywezski", response.iterator().next().name());
        Assertions.assertEquals("f", response.iterator().next().display().provider());
        Assertions.assertEquals("zmxieqvdsmaklix", response.iterator().next().display().resource());
        Assertions.assertEquals("ah", response.iterator().next().display().operation());
        Assertions.assertEquals("xalybxawoijpo", response.iterator().next().display().description());
        Assertions.assertEquals("blxpkkwjdjodq", response.iterator().next().origin());
        Assertions.assertEquals("n",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("mehllizhceu",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("qodkadppyibngql",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).blobDuration());
    }
}
