// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProtectedItemsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"MAB\",\"workloadType\":\"SQLDB\",\"containerName\":\"ef\",\"sourceResourceId\":\"absol\",\"policyId\":\"nqqlmgnl\",\"lastRecoveryPoint\":\"2021-02-08T02:13:29Z\",\"backupSetName\":\"xtelexhvu\",\"createMode\":\"Default\",\"deferredDeleteTimeInUTC\":\"2021-02-12T14:02:41Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"qocarkuzlbc\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"awqytllhdyzm\",\"ckze\"],\"isArchiveEnabled\":false,\"policyName\":\"kck\",\"softDeleteRetentionPeriodInDays\":789963505,\"vaultId\":\"x\"},\"eTag\":\"abjkdtfohfao\",\"location\":\"zvkiwrsiwdy\",\"tags\":{\"ogd\":\"rykcrraueekcsue\",\"ydl\":\"acbcb\",\"fbnrq\":\"idywmhmptyril\",\"omals\":\"xvztpbnfnqtxj\"},\"id\":\"bnfddep\",\"name\":\"dwq\",\"type\":\"ns\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectedItemResource response = manager.protectedItems().getWithResponse("ibtyibuyvpirfqjp", "qnoowsbedenrex",
            "xbhxvucnulgmnhj", "vdyznf", "jsvkskmqozzkivy", "jrliiz", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("zvkiwrsiwdy", response.location());
        Assertions.assertEquals("rykcrraueekcsue", response.tags().get("ogd"));
        Assertions.assertEquals("ef", response.properties().containerName());
        Assertions.assertEquals("absol", response.properties().sourceResourceId());
        Assertions.assertEquals("nqqlmgnl", response.properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T02:13:29Z"),
            response.properties().lastRecoveryPoint());
        Assertions.assertEquals("xtelexhvu", response.properties().backupSetName());
        Assertions.assertEquals(CreateMode.DEFAULT, response.properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T14:02:41Z"),
            response.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, response.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("qocarkuzlbc", response.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, response.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, response.properties().isRehydrate());
        Assertions.assertEquals("awqytllhdyzm", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, response.properties().isArchiveEnabled());
        Assertions.assertEquals("kck", response.properties().policyName());
        Assertions.assertEquals(789963505, response.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("abjkdtfohfao", response.etag());
    }
}
