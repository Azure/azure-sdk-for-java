// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProtectedItemsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureBackupServer\",\"workloadType\":\"AzureFileShare\",\"containerName\":\"igdaqqilzd\",\"sourceResourceId\":\"uwjoedxnguca\",\"policyId\":\"pa\",\"lastRecoveryPoint\":\"2021-11-09T12:26:01Z\",\"backupSetName\":\"gilfjqqacdmkxw\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2021-07-21T00:42:11Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"z\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"chxrtuicdsiwdfm\",\"p\",\"hzzwvywrgyngy\"],\"isArchiveEnabled\":false,\"policyName\":\"x\",\"softDeleteRetentionPeriodInDays\":1331398488},\"eTag\":\"iqao\",\"location\":\"djrkclamggl\",\"tags\":{\"xhqf\":\"fejdoqeykglty\",\"sxtlg\":\"qkaye\",\"ijjcea\":\"lwfgziiu\",\"a\":\"lijjjrtvam\"},\"id\":\"zknxkv\",\"name\":\"cxetyvkunmignoh\",\"type\":\"k\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectedItemResource response =
            manager
                .protectedItems()
                .getWithResponse(
                    "waafrqulh",
                    "zyqbhd",
                    "afjrqpjiyrqjcrg",
                    "xwmzwdfkbnrz",
                    "rpdltbq",
                    "tqjfgxxsaet",
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("djrkclamggl", response.location());
        Assertions.assertEquals("fejdoqeykglty", response.tags().get("xhqf"));
        Assertions.assertEquals("igdaqqilzd", response.properties().containerName());
        Assertions.assertEquals("uwjoedxnguca", response.properties().sourceResourceId());
        Assertions.assertEquals("pa", response.properties().policyId());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-11-09T12:26:01Z"), response.properties().lastRecoveryPoint());
        Assertions.assertEquals("gilfjqqacdmkxw", response.properties().backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, response.properties().createMode());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-21T00:42:11Z"), response.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, response.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("z", response.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, response.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, response.properties().isRehydrate());
        Assertions.assertEquals("chxrtuicdsiwdfm", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, response.properties().isArchiveEnabled());
        Assertions.assertEquals("x", response.properties().policyName());
        Assertions.assertEquals(1331398488, response.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("iqao", response.etag());
    }
}
