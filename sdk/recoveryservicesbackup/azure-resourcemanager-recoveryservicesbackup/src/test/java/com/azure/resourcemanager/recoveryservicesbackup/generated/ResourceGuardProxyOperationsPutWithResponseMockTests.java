// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardOperationDetail;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBase;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBaseResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ResourceGuardProxyOperationsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceGuardResourceId\":\"niucbdaombwiinj\",\"resourceGuardOperationDetails\":[{\"vaultCriticalOperation\":\"ktl\",\"defaultResourceRequest\":\"owavvqxuajgcqw\"}],\"lastUpdatedTime\":\"ynkgfcfd\",\"description\":\"wsikxxtclhuulr\"},\"eTag\":\"byokvjgbzsxe\",\"location\":\"rsltt\",\"tags\":{\"ardnagttpufpbpgn\":\"cdjwsu\",\"iplkysolsyjprxs\":\"holhujbfw\",\"hfvhuwzbxpcqz\":\"whdmcvhtbbz\",\"lrrskap\":\"ihotjecohmxv\"},\"id\":\"xwieexuyade\",\"name\":\"ltfokyksyim\",\"type\":\"ccgrvkcxzznn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ResourceGuardProxyBaseResource response = manager.resourceGuardProxyOperations()
            .define("bwwzvdajf")
            .withRegion("pb")
            .withExistingVault("mpyzgleo", "jsb")
            .withTags(mapOf("pu", "vzfjm", "zjljmphfk", "zfe"))
            .withProperties(new ResourceGuardProxyBase().withResourceGuardResourceId("n")
                .withResourceGuardOperationDetails(Arrays.asList(
                    new ResourceGuardOperationDetail().withVaultCriticalOperation("ciqgjjrlhiqlwixv")
                        .withDefaultResourceRequest("ougu"),
                    new ResourceGuardOperationDetail().withVaultCriticalOperation("n").withDefaultResourceRequest("pg"),
                    new ResourceGuardOperationDetail().withVaultCriticalOperation("tbasu")
                        .withDefaultResourceRequest("ap")))
                .withLastUpdatedTime("n")
                .withDescription("eaqbkixv"))
            .withEtag("wy")
            .create();

        Assertions.assertEquals("rsltt", response.location());
        Assertions.assertEquals("cdjwsu", response.tags().get("ardnagttpufpbpgn"));
        Assertions.assertEquals("niucbdaombwiinj", response.properties().resourceGuardResourceId());
        Assertions.assertEquals("ktl",
            response.properties().resourceGuardOperationDetails().get(0).vaultCriticalOperation());
        Assertions.assertEquals("owavvqxuajgcqw",
            response.properties().resourceGuardOperationDetails().get(0).defaultResourceRequest());
        Assertions.assertEquals("ynkgfcfd", response.properties().lastUpdatedTime());
        Assertions.assertEquals("wsikxxtclhuulr", response.properties().description());
        Assertions.assertEquals("byokvjgbzsxe", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
