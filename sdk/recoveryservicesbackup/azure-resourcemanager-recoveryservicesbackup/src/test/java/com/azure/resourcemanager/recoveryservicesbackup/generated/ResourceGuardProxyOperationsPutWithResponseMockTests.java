// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardOperationDetail;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBase;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBaseResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourceGuardProxyOperationsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"resourceGuardResourceId\":\"gzseznuxkeua\",\"resourceGuardOperationDetails\":[{\"vaultCriticalOperation\":\"bmdlqjbed\",\"defaultResourceRequest\":\"ixlhupm\"},{\"vaultCriticalOperation\":\"ihzbdnpxpk\",\"defaultResourceRequest\":\"pre\"},{\"vaultCriticalOperation\":\"elyicghf\",\"defaultResourceRequest\":\"ufssjyghsfxr\"}],\"lastUpdatedTime\":\"hammgmqfmefgv\",\"description\":\"pd\"},\"eTag\":\"gquxweysland\",\"location\":\"dcdjhunh\",\"tags\":{\"sotirei\":\"gawnrrnquo\",\"sxstcyilbvzmm\":\"seob\",\"b\":\"cjzlquzexokjxebj\"},\"id\":\"inzabwmvoglj\",\"name\":\"v\",\"type\":\"pgidnw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ResourceGuardProxyBaseResource response =
            manager
                .resourceGuardProxyOperations()
                .define("wrczfjjnnuxxrk")
                .withRegion("wuyqaeo")
                .withExistingVault("fqnh", "twd")
                .withTags(mapOf("oxae", "hgejkbvhhdaurgh"))
                .withProperties(
                    new ResourceGuardProxyBase()
                        .withResourceGuardResourceId("mnulwe")
                        .withResourceGuardOperationDetails(
                            Arrays
                                .asList(
                                    new ResourceGuardOperationDetail()
                                        .withVaultCriticalOperation("ifrhjulrsul")
                                        .withDefaultResourceRequest("pflu"),
                                    new ResourceGuardOperationDetail()
                                        .withVaultCriticalOperation("awmhh")
                                        .withDefaultResourceRequest("ot"),
                                    new ResourceGuardOperationDetail()
                                        .withVaultCriticalOperation("iyrgkoek")
                                        .withDefaultResourceRequest("wxxyxhighctx"),
                                    new ResourceGuardOperationDetail()
                                        .withVaultCriticalOperation("molpcqyde")
                                        .withDefaultResourceRequest("vskiczd")))
                        .withLastUpdatedTime("jei")
                        .withDescription("kgqaboo"))
                .withEtag("bmsgycqsxrmdv")
                .create();

        Assertions.assertEquals("dcdjhunh", response.location());
        Assertions.assertEquals("gawnrrnquo", response.tags().get("sotirei"));
        Assertions.assertEquals("gzseznuxkeua", response.properties().resourceGuardResourceId());
        Assertions
            .assertEquals(
                "bmdlqjbed", response.properties().resourceGuardOperationDetails().get(0).vaultCriticalOperation());
        Assertions
            .assertEquals(
                "ixlhupm", response.properties().resourceGuardOperationDetails().get(0).defaultResourceRequest());
        Assertions.assertEquals("hammgmqfmefgv", response.properties().lastUpdatedTime());
        Assertions.assertEquals("pd", response.properties().description());
        Assertions.assertEquals("gquxweysland", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
