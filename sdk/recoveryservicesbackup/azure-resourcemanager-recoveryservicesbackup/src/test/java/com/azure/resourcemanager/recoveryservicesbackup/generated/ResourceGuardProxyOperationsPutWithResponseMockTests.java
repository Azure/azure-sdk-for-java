// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardOperationDetail;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBase;
import com.azure.resourcemanager.recoveryservicesbackup.models.ResourceGuardProxyBaseResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ResourceGuardProxyOperationsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceGuardResourceId\":\"lkfhglhrfoxqwec\",\"resourceGuardOperationDetails\":[{\"vaultCriticalOperation\":\"pcs\",\"defaultResourceRequest\":\"qxovppqibukk\"},{\"vaultCriticalOperation\":\"zrlrmlccmetjs\",\"defaultResourceRequest\":\"ivfqbqnasdsy\"},{\"vaultCriticalOperation\":\"zsieuscplhyvd\",\"defaultResourceRequest\":\"lyzkxitds\"}],\"lastUpdatedTime\":\"zsvko\",\"description\":\"upjo\"},\"eTag\":\"ozsaye\",\"location\":\"razwzlpzbt\",\"tags\":{\"bezacfpztga\":\"kykipfsdyepfnoc\",\"ctgkppgkqzkcyzmf\":\"wyqejgaao\"},\"id\":\"ngdyfcixrhlcq\",\"name\":\"hoe\",\"type\":\"goiutgw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ResourceGuardProxyBaseResource response = manager.resourceGuardProxyOperations()
            .define("byfg")
            .withRegion("rgvtsh")
            .withExistingVault("cauwazcgwdfriwg", "bjpozokscvgllixd")
            .withTags(mapOf("ai", "t"))
            .withProperties(new ResourceGuardProxyBase().withResourceGuardResourceId("wqkjvx")
                .withResourceGuardOperationDetails(Arrays.asList(
                    new ResourceGuardOperationDetail().withVaultCriticalOperation("xsooh")
                        .withDefaultResourceRequest("xlcskltez"),
                    new ResourceGuardOperationDetail().withVaultCriticalOperation("ggg")
                        .withDefaultResourceRequest("fbgrdcgubsrt")))
                .withLastUpdatedTime("ylpe")
                .withDescription("ilttjzgczfcmfpfb"))
            .withEtag("etre")
            .create();

        Assertions.assertEquals("razwzlpzbt", response.location());
        Assertions.assertEquals("kykipfsdyepfnoc", response.tags().get("bezacfpztga"));
        Assertions.assertEquals("lkfhglhrfoxqwec", response.properties().resourceGuardResourceId());
        Assertions.assertEquals("pcs",
            response.properties().resourceGuardOperationDetails().get(0).vaultCriticalOperation());
        Assertions.assertEquals("qxovppqibukk",
            response.properties().resourceGuardOperationDetails().get(0).defaultResourceRequest());
        Assertions.assertEquals("zsvko", response.properties().lastUpdatedTime());
        Assertions.assertEquals("upjo", response.properties().description());
        Assertions.assertEquals("ozsaye", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
