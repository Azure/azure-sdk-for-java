// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectionPolicyResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicyResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectionPolicyResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionPolicyResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"backupManagementType\":\"ProtectionPolicy\",\"protectedItemsCount\":815551540,\"resourceGuardOperationRequests\":[\"idybyxczf\",\"lhaaxdbabp\"]},\"eTag\":\"wrqlfktsthsuco\",\"location\":\"mnyyazt\",\"tags\":{\"uedck\":\"wwrq\",\"bxu\":\"ywbiexzfeyueax\"},\"id\":\"wbhqwal\",\"name\":\"uzyoxaep\",\"type\":\"kzjancuxrhdwbav\"}],\"nextLink\":\"niwdjsw\"}")
            .toObject(ProtectionPolicyResourceList.class);
        Assertions.assertEquals("niwdjsw", model.nextLink());
        Assertions.assertEquals("mnyyazt", model.value().get(0).location());
        Assertions.assertEquals("wwrq", model.value().get(0).tags().get("uedck"));
        Assertions.assertEquals(815551540, model.value().get(0).properties().protectedItemsCount());
        Assertions.assertEquals("idybyxczf", model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("wrqlfktsthsuco", model.value().get(0).etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionPolicyResourceList model = new ProtectionPolicyResourceList().withNextLink("niwdjsw")
            .withValue(Arrays.asList(new ProtectionPolicyResourceInner().withLocation("mnyyazt")
                .withTags(mapOf("uedck", "wwrq", "bxu", "ywbiexzfeyueax"))
                .withProperties(new ProtectionPolicy().withProtectedItemsCount(815551540)
                    .withResourceGuardOperationRequests(Arrays.asList("idybyxczf", "lhaaxdbabp")))
                .withEtag("wrqlfktsthsuco")));
        model = BinaryData.fromObject(model).toObject(ProtectionPolicyResourceList.class);
        Assertions.assertEquals("niwdjsw", model.nextLink());
        Assertions.assertEquals("mnyyazt", model.value().get(0).location());
        Assertions.assertEquals("wwrq", model.value().get(0).tags().get("uedck"));
        Assertions.assertEquals(815551540, model.value().get(0).properties().protectedItemsCount());
        Assertions.assertEquals("idybyxczf", model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("wrqlfktsthsuco", model.value().get(0).etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
