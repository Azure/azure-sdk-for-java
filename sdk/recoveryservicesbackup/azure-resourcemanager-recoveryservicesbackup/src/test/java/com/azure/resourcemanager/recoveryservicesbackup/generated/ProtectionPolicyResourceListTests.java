// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectionPolicyResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionPolicyResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectionPolicyResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionPolicyResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"backupManagementType\":\"ProtectionPolicy\",\"protectedItemsCount\":712970145,\"resourceGuardOperationRequests\":[\"jwbhqwalmuz\"]},\"eTag\":\"xaepdkzjancuxr\",\"location\":\"d\",\"tags\":{\"bniwdj\":\"v\",\"s\":\"wz\",\"xytxhpzxbz\":\"bpg\",\"lcuhxwtctyqiklb\":\"fzab\"},\"id\":\"ovplw\",\"name\":\"bhvgy\",\"type\":\"gu\"},{\"properties\":{\"backupManagementType\":\"ProtectionPolicy\",\"protectedItemsCount\":1732351990,\"resourceGuardOperationRequests\":[\"ss\",\"qukkfp\",\"gmgsxnkjzkde\"]},\"eTag\":\"pvlopwiyighxpkd\",\"location\":\"zb\",\"tags\":{\"umnyqu\":\"ebb\",\"hsmtxpsiebtfhvp\":\"edeojnabc\",\"qmhjjdhtld\":\"sapskr\"},\"id\":\"kyzxuutk\",\"name\":\"cwscwsvlx\",\"type\":\"togt\"}],\"nextLink\":\"upqsx\"}")
            .toObject(ProtectionPolicyResourceList.class);
        Assertions.assertEquals("upqsx", model.nextLink());
        Assertions.assertEquals("d", model.value().get(0).location());
        Assertions.assertEquals("v", model.value().get(0).tags().get("bniwdj"));
        Assertions.assertEquals(712970145, model.value().get(0).properties().protectedItemsCount());
        Assertions.assertEquals("jwbhqwalmuz",
            model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("xaepdkzjancuxr", model.value().get(0).etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionPolicyResourceList model = new ProtectionPolicyResourceList().withNextLink("upqsx")
            .withValue(Arrays.asList(
                new ProtectionPolicyResourceInner().withLocation("d")
                    .withTags(mapOf("bniwdj", "v", "s", "wz", "xytxhpzxbz", "bpg", "lcuhxwtctyqiklb", "fzab"))
                    .withProperties(new ProtectionPolicy().withProtectedItemsCount(712970145)
                        .withResourceGuardOperationRequests(Arrays.asList("jwbhqwalmuz")))
                    .withEtag("xaepdkzjancuxr"),
                new ProtectionPolicyResourceInner().withLocation("zb")
                    .withTags(mapOf("umnyqu", "ebb", "hsmtxpsiebtfhvp", "edeojnabc", "qmhjjdhtld", "sapskr"))
                    .withProperties(new ProtectionPolicy().withProtectedItemsCount(1732351990)
                        .withResourceGuardOperationRequests(Arrays.asList("ss", "qukkfp", "gmgsxnkjzkde")))
                    .withEtag("pvlopwiyighxpkd")));
        model = BinaryData.fromObject(model).toObject(ProtectionPolicyResourceList.class);
        Assertions.assertEquals("upqsx", model.nextLink());
        Assertions.assertEquals("d", model.value().get(0).location());
        Assertions.assertEquals("v", model.value().get(0).tags().get("bniwdj"));
        Assertions.assertEquals(712970145, model.value().get(0).properties().protectedItemsCount());
        Assertions.assertEquals("jwbhqwalmuz",
            model.value().get(0).properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals("xaepdkzjancuxr", model.value().get(0).etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
