// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaPointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRestoreRequest\",\"pointInTime\":\"2021-10-13T21:26:08Z\",\"recoveryType\":\"RestoreDisks\",\"sourceResourceId\":\"qbw\",\"propertyBag\":{\"gsfjac\":\"q\",\"d\":\"slhhxudbxv\",\"ud\":\"tnsi\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"sckdlp\",\"databaseName\":\"zrcxfailcfxwmdbo\",\"targetDirectoryForFileRestore\":\"fgsftufqob\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"acgcckknhx\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"v\",\"identityName\":\"nrzvuljraaer\",\"userAssignedIdentityProperties\":{\"clientId\":\"kqg\",\"principalId\":\"kjq\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"ylaxxulcdi\"},\"targetVirtualMachineId\":\"osfjbjsv\"}")
            .toObject(AzureWorkloadSapHanaPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("qbw", model.sourceResourceId());
        Assertions.assertEquals("q", model.propertyBag().get("gsfjac"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("sckdlp", model.targetInfo().containerId());
        Assertions.assertEquals("zrcxfailcfxwmdbo", model.targetInfo().databaseName());
        Assertions.assertEquals("fgsftufqob", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("acgcckknhx", model.targetResourceGroupName());
        Assertions.assertEquals("v", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("nrzvuljraaer", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("kqg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("kjq",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("ylaxxulcdi", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("osfjbjsv", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-13T21:26:08Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreRequest model
            = new AzureWorkloadSapHanaPointInTimeRestoreRequest().withRecoveryType(RecoveryType.RESTORE_DISKS)
                .withSourceResourceId("qbw").withPropertyBag(mapOf("gsfjac", "q", "d", "slhhxudbxv", "ud", "tnsi"))
                .withTargetInfo(
                    new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.OVERWRITE).withContainerId("sckdlp")
                        .withDatabaseName("zrcxfailcfxwmdbo").withTargetDirectoryForFileRestore("fgsftufqob"))
                .withRecoveryMode(RecoveryMode.FILE_RECOVERY).withTargetResourceGroupName("acgcckknhx")
                .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("v")
                    .withIdentityName("nrzvuljraaer").withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("kqg").withPrincipalId("kjq")))
                .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(false)
                    .withLogPointInTimeForDBRecovery("ylaxxulcdi"))
                .withTargetVirtualMachineId("osfjbjsv").withPointInTime(OffsetDateTime.parse("2021-10-13T21:26:08Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("qbw", model.sourceResourceId());
        Assertions.assertEquals("q", model.propertyBag().get("gsfjac"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("sckdlp", model.targetInfo().containerId());
        Assertions.assertEquals("zrcxfailcfxwmdbo", model.targetInfo().databaseName());
        Assertions.assertEquals("fgsftufqob", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("acgcckknhx", model.targetResourceGroupName());
        Assertions.assertEquals("v", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("nrzvuljraaer", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("kqg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("kjq",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("ylaxxulcdi", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("osfjbjsv", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-13T21:26:08Z"), model.pointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
