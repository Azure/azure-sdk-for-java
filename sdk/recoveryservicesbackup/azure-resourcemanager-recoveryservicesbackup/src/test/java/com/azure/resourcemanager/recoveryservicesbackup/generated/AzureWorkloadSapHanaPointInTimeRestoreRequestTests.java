// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaPointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRestoreRequest\",\"pointInTime\":\"2021-05-10T09:40:25Z\",\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"sckdlp\",\"propertyBag\":{\"xdfgsftufqobr\":\"rcxfailcfxwmdb\",\"knh\":\"lnacgcc\",\"zvulj\":\"kizvytn\",\"qnvb\":\"aaeranokqgukk\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"xxulcdi\",\"databaseName\":\"osfjbjsv\",\"targetDirectoryForFileRestore\":\"rwhryvycytd\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"ccknfnwmbtmvp\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"dhttzaefedxihchr\",\"identityName\":\"k\",\"userAssignedIdentityProperties\":{\"clientId\":\"jdqnsdfzpbgt\",\"principalId\":\"ylkdghrje\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"xezw\"},\"targetVirtualMachineId\":\"okvbwnhhtqlgehg\",\"resourceGuardOperationRequests\":[\"pifhpfeoajvgcxtx\",\"csheafidltugsr\",\"smkss\",\"h\"]}")
            .toObject(AzureWorkloadSapHanaPointInTimeRestoreRequest.class);
        Assertions.assertEquals("pifhpfeoajvgcxtx", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("sckdlp", model.sourceResourceId());
        Assertions.assertEquals("rcxfailcfxwmdb", model.propertyBag().get("xdfgsftufqobr"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("xxulcdi", model.targetInfo().containerId());
        Assertions.assertEquals("osfjbjsv", model.targetInfo().databaseName());
        Assertions.assertEquals("rwhryvycytd", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ccknfnwmbtmvp", model.targetResourceGroupName());
        Assertions.assertEquals("dhttzaefedxihchr", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("k", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("jdqnsdfzpbgt",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ylkdghrje",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("xezw", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("okvbwnhhtqlgehg", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T09:40:25Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreRequest model = new AzureWorkloadSapHanaPointInTimeRestoreRequest()
            .withResourceGuardOperationRequests(Arrays.asList("pifhpfeoajvgcxtx", "csheafidltugsr", "smkss", "h"))
            .withRecoveryType(RecoveryType.INVALID)
            .withSourceResourceId("sckdlp")
            .withPropertyBag(
                mapOf("xdfgsftufqobr", "rcxfailcfxwmdb", "knh", "lnacgcc", "zvulj", "kizvytn", "qnvb", "aaeranokqgukk"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                .withContainerId("xxulcdi")
                .withDatabaseName("osfjbjsv")
                .withTargetDirectoryForFileRestore("rwhryvycytd"))
            .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
            .withTargetResourceGroupName("ccknfnwmbtmvp")
            .withUserAssignedManagedIdentityDetails(
                new UserAssignedManagedIdentityDetails().withIdentityArmId("dhttzaefedxihchr")
                    .withIdentityName("k")
                    .withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("jdqnsdfzpbgt").withPrincipalId("ylkdghrje")))
            .withSnapshotRestoreParameters(
                new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("xezw"))
            .withTargetVirtualMachineId("okvbwnhhtqlgehg")
            .withPointInTime(OffsetDateTime.parse("2021-05-10T09:40:25Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRestoreRequest.class);
        Assertions.assertEquals("pifhpfeoajvgcxtx", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("sckdlp", model.sourceResourceId());
        Assertions.assertEquals("rcxfailcfxwmdb", model.propertyBag().get("xdfgsftufqobr"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("xxulcdi", model.targetInfo().containerId());
        Assertions.assertEquals("osfjbjsv", model.targetInfo().databaseName());
        Assertions.assertEquals("rwhryvycytd", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ccknfnwmbtmvp", model.targetResourceGroupName());
        Assertions.assertEquals("dhttzaefedxihchr", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("k", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("jdqnsdfzpbgt",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ylkdghrje",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("xezw", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("okvbwnhhtqlgehg", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T09:40:25Z"), model.pointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
