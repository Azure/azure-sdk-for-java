// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WeeklyRetentionScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WeeklyRetentionSchedule model = BinaryData.fromString(
            "{\"daysOfTheWeek\":[\"Monday\"],\"retentionTimes\":[\"2021-02-26T02:25:43Z\",\"2021-06-11T14:56:28Z\"],\"retentionDuration\":{\"count\":93927862,\"durationType\":\"Years\"}}")
            .toObject(WeeklyRetentionSchedule.class);
        Assertions.assertEquals(DayOfWeek.MONDAY, model.daysOfTheWeek().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T02:25:43Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(93927862, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.YEARS, model.retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WeeklyRetentionSchedule model = new WeeklyRetentionSchedule().withDaysOfTheWeek(Arrays.asList(DayOfWeek.MONDAY))
            .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-02-26T02:25:43Z"),
                OffsetDateTime.parse("2021-06-11T14:56:28Z")))
            .withRetentionDuration(
                new RetentionDuration().withCount(93927862).withDurationType(RetentionDurationType.YEARS));
        model = BinaryData.fromObject(model).toObject(WeeklyRetentionSchedule.class);
        Assertions.assertEquals(DayOfWeek.MONDAY, model.daysOfTheWeek().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T02:25:43Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(93927862, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.YEARS, model.retentionDuration().durationType());
    }
}
