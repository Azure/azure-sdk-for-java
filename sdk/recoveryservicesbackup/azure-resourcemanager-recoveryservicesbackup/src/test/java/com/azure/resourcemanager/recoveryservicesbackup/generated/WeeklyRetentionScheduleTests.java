// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDuration;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklyRetentionSchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WeeklyRetentionScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WeeklyRetentionSchedule model =
            BinaryData
                .fromString(
                    "{\"daysOfTheWeek\":[\"Monday\",\"Saturday\"],\"retentionTimes\":[\"2021-08-29T15:14:45Z\"],\"retentionDuration\":{\"count\":1795509017,\"durationType\":\"Invalid\"}}")
                .toObject(WeeklyRetentionSchedule.class);
        Assertions.assertEquals(DayOfWeek.MONDAY, model.daysOfTheWeek().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T15:14:45Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(1795509017, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.INVALID, model.retentionDuration().durationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WeeklyRetentionSchedule model =
            new WeeklyRetentionSchedule()
                .withDaysOfTheWeek(Arrays.asList(DayOfWeek.MONDAY, DayOfWeek.SATURDAY))
                .withRetentionTimes(Arrays.asList(OffsetDateTime.parse("2021-08-29T15:14:45Z")))
                .withRetentionDuration(
                    new RetentionDuration().withCount(1795509017).withDurationType(RetentionDurationType.INVALID));
        model = BinaryData.fromObject(model).toObject(WeeklyRetentionSchedule.class);
        Assertions.assertEquals(DayOfWeek.MONDAY, model.daysOfTheWeek().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T15:14:45Z"), model.retentionTimes().get(0));
        Assertions.assertEquals(1795509017, model.retentionDuration().count());
        Assertions.assertEquals(RetentionDurationType.INVALID, model.retentionDuration().durationType());
    }
}
