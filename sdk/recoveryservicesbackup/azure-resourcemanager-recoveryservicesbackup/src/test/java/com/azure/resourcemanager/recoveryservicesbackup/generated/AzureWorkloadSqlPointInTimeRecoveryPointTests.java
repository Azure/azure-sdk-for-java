// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRecoveryPointExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectory;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlPointInTimeRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlPointInTimeRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLPointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-03-21T22:02:33Z\",\"endTime\":\"2021-05-10T16:06:39Z\"}],\"extendedInfo\":{\"dataDirectoryTimeInUTC\":\"2021-01-05T02:04:14Z\",\"dataDirectoryPaths\":[{\"type\":\"Invalid\",\"path\":\"eqw\",\"logicalName\":\"pibudqwyxebeybpm\"},{\"type\":\"Log\",\"path\":\"tffyaqit\",\"logicalName\":\"heioqa\"},{\"type\":\"Data\",\"path\":\"eufuqyrxpdlcgql\",\"logicalName\":\"smjqfrddgam\"},{\"type\":\"Data\",\"path\":\"os\",\"logicalName\":\"ju\"}]},\"recoveryPointTimeInUTC\":\"2021-07-11T04:09:49Z\",\"type\":\"SnapshotCopyOnlyFull\",\"recoveryPointTierDetails\":[{\"type\":\"InstantRP\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"xrxzbujrtr\":\"hcz\",\"khgn\":\"qvwre\",\"piqywnc\":\"nzonzl\",\"zehtdhgb\":\"jtszcof\"}},{\"type\":\"InstantRP\",\"status\":\"Valid\",\"extendedInfo\":{\"uanashcxlp\":\"eamurvzmlo\",\"bccxjmonfdgn\":\"jerbdkelvidizozs\"}}],\"recoveryPointMoveReadinessInfo\":{\"nkeifz\":{\"isReadyForMove\":false,\"additionalInfo\":\"uwwltvuqjctz\"},\"hbxcu\":{\"isReadyForMove\":false,\"additionalInfo\":\"dasvfl\"},\"lvizb\":{\"isReadyForMove\":true,\"additionalInfo\":\"gsrboldforobw\"}},\"recoveryPointProperties\":{\"expiryTime\":\"ovvacqpbt\",\"ruleName\":\"dxe\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadSqlPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T04:09:49Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.SNAPSHOT_COPY_ONLY_FULL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("hcz", model.recoveryPointTierDetails().get(0).extendedInfo().get("xrxzbujrtr"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("nkeifz").isReadyForMove());
        Assertions.assertEquals("uwwltvuqjctz", model.recoveryPointMoveReadinessInfo().get("nkeifz").additionalInfo());
        Assertions.assertEquals("ovvacqpbt", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("dxe", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T02:04:14Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("eqw", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("pibudqwyxebeybpm", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-21T22:02:33Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T16:06:39Z"), model.timeRanges().get(0).endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlPointInTimeRecoveryPoint model
            = new AzureWorkloadSqlPointInTimeRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-07-11T04:09:49Z"))
                .withType(RestorePointType.SNAPSHOT_COPY_ONLY_FULL)
                .withRecoveryPointTierDetails(
                    Arrays.asList(
                        new RecoveryPointTierInformationV2()
                            .withType(RecoveryPointTierType.INSTANT_RP).withStatus(RecoveryPointTierStatus.REHYDRATED)
                            .withExtendedInfo(mapOf("xrxzbujrtr", "hcz", "khgn", "qvwre", "piqywnc", "nzonzl",
                                "zehtdhgb", "jtszcof")),
                        new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                            .withStatus(RecoveryPointTierStatus.VALID)
                            .withExtendedInfo(mapOf("uanashcxlp", "eamurvzmlo", "bccxjmonfdgn", "jerbdkelvidizozs"))))
                .withRecoveryPointMoveReadinessInfo(mapOf("nkeifz",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("uwwltvuqjctz"),
                    "hbxcu",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("dasvfl"),
                    "lvizb",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("gsrboldforobw")))
                .withRecoveryPointProperties(new RecoveryPointProperties().withExpiryTime("ovvacqpbt")
                    .withRuleName("dxe").withIsSoftDeleted(true))
                .withExtendedInfo(new AzureWorkloadSqlRecoveryPointExtendedInfo()
                    .withDataDirectoryTimeInUtc(OffsetDateTime.parse("2021-01-05T02:04:14Z"))
                    .withDataDirectoryPaths(Arrays.asList(
                        new SqlDataDirectory().withType(SqlDataDirectoryType.INVALID).withPath("eqw")
                            .withLogicalName("pibudqwyxebeybpm"),
                        new SqlDataDirectory()
                            .withType(SqlDataDirectoryType.LOG).withPath("tffyaqit").withLogicalName("heioqa"),
                        new SqlDataDirectory()
                            .withType(SqlDataDirectoryType.DATA).withPath("eufuqyrxpdlcgql")
                            .withLogicalName("smjqfrddgam"),
                        new SqlDataDirectory().withType(SqlDataDirectoryType.DATA).withPath("os")
                            .withLogicalName("ju"))))
                .withTimeRanges(
                    Arrays.asList(new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-03-21T22:02:33Z"))
                        .withEndTime(OffsetDateTime.parse("2021-05-10T16:06:39Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T04:09:49Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.SNAPSHOT_COPY_ONLY_FULL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("hcz", model.recoveryPointTierDetails().get(0).extendedInfo().get("xrxzbujrtr"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("nkeifz").isReadyForMove());
        Assertions.assertEquals("uwwltvuqjctz", model.recoveryPointMoveReadinessInfo().get("nkeifz").additionalInfo());
        Assertions.assertEquals("ovvacqpbt", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("dxe", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T02:04:14Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("eqw", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("pibudqwyxebeybpm", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-21T22:02:33Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T16:06:39Z"), model.timeRanges().get(0).endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
