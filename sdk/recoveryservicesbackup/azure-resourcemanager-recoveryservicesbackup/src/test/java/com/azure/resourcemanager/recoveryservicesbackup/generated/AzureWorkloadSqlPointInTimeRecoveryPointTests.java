// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRecoveryPointExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectory;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSqlPointInTimeRecoveryPointTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSqlPointInTimeRecoveryPoint model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSQLPointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-08-06T16:32:23Z\",\"endTime\":\"2021-03-15T05:07:25Z\"}],\"extendedInfo\":{\"dataDirectoryTimeInUTC\":\"2021-05-27T05:55:18Z\",\"dataDirectoryPaths\":[{\"type\":\"Invalid\",\"path\":\"mbtmvpdvjdhttzae\",\"logicalName\":\"dxihc\"}]},\"recoveryPointTimeInUTC\":\"2021-05-03T20:49:03Z\",\"type\":\"Invalid\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Disabled\",\"extendedInfo\":{\"rjeuut\":\"dfzpbgtgkylkdg\"}},{\"type\":\"Invalid\",\"status\":\"Deleted\",\"extendedInfo\":{\"tqlgehgppi\":\"hokvbwnh\",\"oajvgcxtxjcs\":\"ifhpf\",\"ssjhoiftxfkf\":\"eafidltugsresm\"}},{\"type\":\"Invalid\",\"status\":\"Deleted\",\"extendedInfo\":{\"q\":\"tillucbiqtg\"}},{\"type\":\"ArchivedRP\",\"status\":\"Invalid\",\"extendedInfo\":{\"lllibph\":\"drizetpwbr\",\"a\":\"qzmiza\",\"joylh\":\"ankjpdnjzh\"}}],\"recoveryPointMoveReadinessInfo\":{\"eecjmeis\":{\"isReadyForMove\":false,\"additionalInfo\":\"xprimrsop\"},\"zaum\":{\"isReadyForMove\":false,\"additionalInfo\":\"asylwx\"},\"zboyjathwt\":{\"isReadyForMove\":false,\"additionalInfo\":\"hguuf\"}}}")
                .toObject(AzureWorkloadSqlPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T20:49:03Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("dfzpbgtgkylkdg", model.recoveryPointTierDetails().get(0).extendedInfo().get("rjeuut"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("eecjmeis").isReadyForMove());
        Assertions.assertEquals("xprimrsop", model.recoveryPointMoveReadinessInfo().get("eecjmeis").additionalInfo());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-27T05:55:18Z"), model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("mbtmvpdvjdhttzae", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("dxihc", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T16:32:23Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-15T05:07:25Z"), model.timeRanges().get(0).endTime());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSqlPointInTimeRecoveryPoint model =
            new AzureWorkloadSqlPointInTimeRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-05-03T20:49:03Z"))
                .withType(RestorePointType.INVALID)
                .withRecoveryPointTierDetails(
                    Arrays
                        .asList(
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.HARDENED_RP)
                                .withStatus(RecoveryPointTierStatus.DISABLED)
                                .withExtendedInfo(mapOf("rjeuut", "dfzpbgtgkylkdg")),
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.INVALID)
                                .withStatus(RecoveryPointTierStatus.DELETED)
                                .withExtendedInfo(
                                    mapOf(
                                        "tqlgehgppi",
                                        "hokvbwnh",
                                        "oajvgcxtxjcs",
                                        "ifhpf",
                                        "ssjhoiftxfkf",
                                        "eafidltugsresm")),
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.INVALID)
                                .withStatus(RecoveryPointTierStatus.DELETED)
                                .withExtendedInfo(mapOf("q", "tillucbiqtg")),
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.ARCHIVED_RP)
                                .withStatus(RecoveryPointTierStatus.INVALID)
                                .withExtendedInfo(
                                    mapOf("lllibph", "drizetpwbr", "a", "qzmiza", "joylh", "ankjpdnjzh"))))
                .withRecoveryPointMoveReadinessInfo(
                    mapOf(
                        "eecjmeis",
                        new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("xprimrsop"),
                        "zaum",
                        new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("asylwx"),
                        "zboyjathwt",
                        new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("hguuf")))
                .withExtendedInfo(
                    new AzureWorkloadSqlRecoveryPointExtendedInfo()
                        .withDataDirectoryTimeInUtc(OffsetDateTime.parse("2021-05-27T05:55:18Z"))
                        .withDataDirectoryPaths(
                            Arrays
                                .asList(
                                    new SqlDataDirectory()
                                        .withType(SqlDataDirectoryType.INVALID)
                                        .withPath("mbtmvpdvjdhttzae")
                                        .withLogicalName("dxihc"))))
                .withTimeRanges(
                    Arrays
                        .asList(
                            new PointInTimeRange()
                                .withStartTime(OffsetDateTime.parse("2021-08-06T16:32:23Z"))
                                .withEndTime(OffsetDateTime.parse("2021-03-15T05:07:25Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T20:49:03Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("dfzpbgtgkylkdg", model.recoveryPointTierDetails().get(0).extendedInfo().get("rjeuut"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("eecjmeis").isReadyForMove());
        Assertions.assertEquals("xprimrsop", model.recoveryPointMoveReadinessInfo().get("eecjmeis").additionalInfo());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-27T05:55:18Z"), model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("mbtmvpdvjdhttzae", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("dxihc", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T16:32:23Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-15T05:07:25Z"), model.timeRanges().get(0).endTime());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
