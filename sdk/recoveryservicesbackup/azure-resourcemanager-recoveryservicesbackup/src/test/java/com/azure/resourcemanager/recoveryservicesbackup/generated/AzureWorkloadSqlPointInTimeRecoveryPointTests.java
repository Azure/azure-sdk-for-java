// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRecoveryPointExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectory;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlPointInTimeRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlPointInTimeRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLPointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-03-24T07:32:19Z\",\"endTime\":\"2021-02-03T01:21:36Z\"},{\"startTime\":\"2021-04-27T07:05:12Z\",\"endTime\":\"2021-07-18T02:05:58Z\"}],\"extendedInfo\":{\"dataDirectoryTimeInUTC\":\"2021-02-19T22:42:25Z\",\"dataDirectoryPaths\":[{\"type\":\"Invalid\",\"path\":\"kpbz\",\"logicalName\":\"piljhahzvech\"}]},\"recoveryPointTimeInUTC\":\"2021-11-07T12:28:01Z\",\"type\":\"Incremental\",\"recoveryPointTierDetails\":[{\"type\":\"InstantRP\",\"status\":\"Disabled\",\"extendedInfo\":{\"efqsfapaqtferrqw\":\"wiuub\",\"kmfx\":\"x\",\"pud\":\"pjwogqqno\",\"yawbzasqbu\":\"dabtqwp\"}}],\"recoveryPointMoveReadinessInfo\":{\"p\":{\"isReadyForMove\":true,\"additionalInfo\":\"exaoguya\"}},\"recoveryPointProperties\":{\"expiryTime\":\"daultxijjumfq\",\"ruleName\":\"z\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadSqlPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T12:28:01Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INCREMENTAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("wiuub",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("efqsfapaqtferrqw"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("p").isReadyForMove());
        Assertions.assertEquals("exaoguya", model.recoveryPointMoveReadinessInfo().get("p").additionalInfo());
        Assertions.assertEquals("daultxijjumfq", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("z", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T22:42:25Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("kpbz", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("piljhahzvech", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-24T07:32:19Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T01:21:36Z"), model.timeRanges().get(0).endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlPointInTimeRecoveryPoint model
            = new AzureWorkloadSqlPointInTimeRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-11-07T12:28:01Z"))
                .withType(RestorePointType.INCREMENTAL)
                .withRecoveryPointTierDetails(
                    Arrays.asList(new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INSTANT_RP)
                        .withStatus(RecoveryPointTierStatus.DISABLED)
                        .withExtendedInfo(mapOf("efqsfapaqtferrqw", "wiuub", "kmfx", "x", "pud", "pjwogqqno",
                            "yawbzasqbu", "dabtqwp"))))
                .withRecoveryPointMoveReadinessInfo(mapOf("p",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("exaoguya")))
                .withRecoveryPointProperties(new RecoveryPointProperties().withExpiryTime("daultxijjumfq")
                    .withRuleName("z")
                    .withIsSoftDeleted(true))
                .withExtendedInfo(new AzureWorkloadSqlRecoveryPointExtendedInfo()
                    .withDataDirectoryTimeInUtc(OffsetDateTime.parse("2021-02-19T22:42:25Z"))
                    .withDataDirectoryPaths(Arrays.asList(new SqlDataDirectory().withType(SqlDataDirectoryType.INVALID)
                        .withPath("kpbz")
                        .withLogicalName("piljhahzvech"))))
                .withTimeRanges(Arrays.asList(
                    new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-03-24T07:32:19Z"))
                        .withEndTime(OffsetDateTime.parse("2021-02-03T01:21:36Z")),
                    new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-04-27T07:05:12Z"))
                        .withEndTime(OffsetDateTime.parse("2021-07-18T02:05:58Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T12:28:01Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INCREMENTAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("wiuub",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("efqsfapaqtferrqw"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("p").isReadyForMove());
        Assertions.assertEquals("exaoguya", model.recoveryPointMoveReadinessInfo().get("p").additionalInfo());
        Assertions.assertEquals("daultxijjumfq", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("z", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T22:42:25Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("kpbz", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("piljhahzvech", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-24T07:32:19Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T01:21:36Z"), model.timeRanges().get(0).endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
