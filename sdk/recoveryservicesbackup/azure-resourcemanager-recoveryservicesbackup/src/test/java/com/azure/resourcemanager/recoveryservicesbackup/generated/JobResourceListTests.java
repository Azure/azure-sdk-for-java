// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.JobResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.Job;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobResourceList;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"jobType\":\"Job\",\"entityFriendlyName\":\"uzbpzkafku\",\"backupManagementType\":\"AzureIaasVM\",\"operation\":\"nwbmeh\",\"status\":\"eyvjusrtslhspkde\",\"startTime\":\"2021-01-28T17:00:30Z\",\"endTime\":\"2021-02-20T10:46:34Z\",\"activityId\":\"xagkvtmelmqkrh\"},\"eTag\":\"vljua\",\"location\":\"aquhcdhm\",\"tags\":{\"fadmws\":\"laexqp\",\"lf\":\"crgvxpvgom\",\"ali\":\"isgwbnbbeldawkz\",\"hashsfwxosow\":\"urqhaka\"},\"id\":\"xcug\",\"name\":\"cjooxdjebwpucwwf\",\"type\":\"ovbvmeueciv\"}],\"nextLink\":\"zceuojgjrw\"}")
            .toObject(JobResourceList.class);
        Assertions.assertEquals("zceuojgjrw", model.nextLink());
        Assertions.assertEquals("aquhcdhm", model.value().get(0).location());
        Assertions.assertEquals("laexqp", model.value().get(0).tags().get("fadmws"));
        Assertions.assertEquals("uzbpzkafku", model.value().get(0).properties().entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_IAAS_VM,
            model.value().get(0).properties().backupManagementType());
        Assertions.assertEquals("nwbmeh", model.value().get(0).properties().operation());
        Assertions.assertEquals("eyvjusrtslhspkde", model.value().get(0).properties().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-28T17:00:30Z"),
            model.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T10:46:34Z"),
            model.value().get(0).properties().endTime());
        Assertions.assertEquals("xagkvtmelmqkrh", model.value().get(0).properties().activityId());
        Assertions.assertEquals("vljua", model.value().get(0).etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobResourceList model = new JobResourceList().withNextLink("zceuojgjrw")
            .withValue(Arrays.asList(new JobResourceInner().withLocation("aquhcdhm")
                .withTags(
                    mapOf("fadmws", "laexqp", "lf", "crgvxpvgom", "ali", "isgwbnbbeldawkz", "hashsfwxosow", "urqhaka"))
                .withProperties(new Job().withEntityFriendlyName("uzbpzkafku")
                    .withBackupManagementType(BackupManagementType.AZURE_IAAS_VM)
                    .withOperation("nwbmeh")
                    .withStatus("eyvjusrtslhspkde")
                    .withStartTime(OffsetDateTime.parse("2021-01-28T17:00:30Z"))
                    .withEndTime(OffsetDateTime.parse("2021-02-20T10:46:34Z"))
                    .withActivityId("xagkvtmelmqkrh"))
                .withEtag("vljua")));
        model = BinaryData.fromObject(model).toObject(JobResourceList.class);
        Assertions.assertEquals("zceuojgjrw", model.nextLink());
        Assertions.assertEquals("aquhcdhm", model.value().get(0).location());
        Assertions.assertEquals("laexqp", model.value().get(0).tags().get("fadmws"));
        Assertions.assertEquals("uzbpzkafku", model.value().get(0).properties().entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_IAAS_VM,
            model.value().get(0).properties().backupManagementType());
        Assertions.assertEquals("nwbmeh", model.value().get(0).properties().operation());
        Assertions.assertEquals("eyvjusrtslhspkde", model.value().get(0).properties().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-28T17:00:30Z"),
            model.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T10:46:34Z"),
            model.value().get(0).properties().endTime());
        Assertions.assertEquals("xagkvtmelmqkrh", model.value().get(0).properties().activityId());
        Assertions.assertEquals("vljua", model.value().get(0).etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
