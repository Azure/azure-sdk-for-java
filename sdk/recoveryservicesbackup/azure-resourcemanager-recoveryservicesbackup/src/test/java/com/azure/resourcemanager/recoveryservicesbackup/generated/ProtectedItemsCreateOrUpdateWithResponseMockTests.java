// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProtectedItemsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureBackupServer\",\"workloadType\":\"SAPAseDatabase\",\"containerName\":\"acvumepj\",\"sourceResourceId\":\"ibnzp\",\"policyId\":\"epifexleqirccjc\",\"lastRecoveryPoint\":\"2021-02-09T02:05:06Z\",\"backupSetName\":\"gxvrpjl\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-01-19T12:24:20Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"punettepdjxq\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"iylpck\",\"ewsedveskwxe\"],\"isArchiveEnabled\":true,\"policyName\":\"rgfnz\",\"softDeleteRetentionPeriodInDays\":2145117005,\"vaultId\":\"jts\"},\"eTag\":\"pbcbcpzar\",\"location\":\"zeq\",\"tags\":{\"zshnuqndaizup\":\"ldtzmpypefcp\",\"ytus\":\"kh\",\"tvegwqiukvzwy\":\"xhmt\"},\"id\":\"wtthaokgksk\",\"name\":\"i\",\"type\":\"bs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectedItemResource response = manager.protectedItems()
            .define("x")
            .withRegion("kmdskjhhxd")
            .withExistingProtectionContainer("fp", "qwtygevgwmseharx", "fv", "n")
            .withTags(mapOf("cvslxlhuavkrmukm", "foxcx", "qid", "jmkxettcslojf", "tkbtnqlrngl", "qtoqxjhqxcsq", "nxhhl",
                "mbiipsnawwlqk"))
            .withProperties(new ProtectedItem().withContainerName("nvwjhrsidqpxl")
                .withSourceResourceId("pakftngatwm")
                .withPolicyId("yutrymd")
                .withLastRecoveryPoint(OffsetDateTime.parse("2021-01-07T14:10:42Z"))
                .withBackupSetName("hpycvjqdvdwkq")
                .withCreateMode(CreateMode.DEFAULT)
                .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-11-05T00:29:15Z"))
                .withIsScheduledForDeferredDelete(true)
                .withDeferredDeleteTimeRemaining("naa")
                .withIsDeferredDeleteScheduleUpcoming(false)
                .withIsRehydrate(false)
                .withResourceGuardOperationRequests(Arrays.asList("taoutnpdct", "hspfefyihd", "yeuyldph"))
                .withIsArchiveEnabled(true)
                .withPolicyName("kcgsuthhl")
                .withSoftDeleteRetentionPeriod(2039915439))
            .withEtag("fxexlfciatxtjrr")
            .withXMsAuthorizationAuxiliary("rceqnkbrupob")
            .create();

        Assertions.assertEquals("zeq", response.location());
        Assertions.assertEquals("ldtzmpypefcp", response.tags().get("zshnuqndaizup"));
        Assertions.assertEquals("acvumepj", response.properties().containerName());
        Assertions.assertEquals("ibnzp", response.properties().sourceResourceId());
        Assertions.assertEquals("epifexleqirccjc", response.properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-09T02:05:06Z"),
            response.properties().lastRecoveryPoint());
        Assertions.assertEquals("gxvrpjl", response.properties().backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, response.properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T12:24:20Z"),
            response.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, response.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("punettepdjxq", response.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, response.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, response.properties().isRehydrate());
        Assertions.assertEquals("iylpck", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, response.properties().isArchiveEnabled());
        Assertions.assertEquals("rgfnz", response.properties().policyName());
        Assertions.assertEquals(2145117005, response.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("pbcbcpzar", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
