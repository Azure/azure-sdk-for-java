// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProtectedItemsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureStorage\",\"workloadType\":\"SQLDB\",\"containerName\":\"g\",\"sourceResourceId\":\"quv\",\"policyId\":\"gglpmcrdcuelj\",\"lastRecoveryPoint\":\"2021-09-29T07:33:04Z\",\"backupSetName\":\"xmfqryarvsxzqbg\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2021-03-31T05:28:16Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"thzodubtlmjtgbl\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"kmfd\",\"xyxgbkkqv\",\"cteoedlrslsk\",\"zpxvjnzdpvoc\"],\"isArchiveEnabled\":true,\"policyName\":\"cnabxzf\",\"softDeleteRetentionPeriodInDays\":1683245202,\"vaultId\":\"ytexvzilmhivzk\"},\"eTag\":\"wncknr\",\"location\":\"dajlskzpt\",\"tags\":{\"cyrthxqlehm\":\"lwe\",\"inue\":\"gcj\",\"vfejvqnttmbqda\":\"oka\"},\"id\":\"zfivfokpysthhzag\",\"name\":\"fwy\",\"type\":\"rlhgenuze\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ProtectedItemResource response = manager.protectedItems()
            .define("xegqphr")
            .withRegion("dbzsx")
            .withExistingProtectionContainer("punettepdjxq", "skoynuiylpc", "aewse", "vesk")
            .withTags(mapOf("pcbbprtugav", "qrs", "fogdrtbfcm", "zbcyksiv", "mb", "rftsjcwjjxs", "xkecifhocj", "wvif"))
            .withProperties(new ProtectedItem().withContainerName("mjtsgh")
                .withSourceResourceId("c")
                .withPolicyId("pzarpzeqacdld")
                .withLastRecoveryPoint(OffsetDateTime.parse("2021-02-18T13:35:29Z"))
                .withBackupSetName("ypefcpczshnuqnda")
                .withCreateMode(CreateMode.DEFAULT)
                .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-05-16T16:02:29Z"))
                .withIsScheduledForDeferredDelete(false)
                .withDeferredDeleteTimeRemaining("ytus")
                .withIsDeferredDeleteScheduleUpcoming(false)
                .withIsRehydrate(false)
                .withResourceGuardOperationRequests(Arrays.asList("vegwqiukvz", "ydwtthao", "gkskjivbss", "ajq"))
                .withIsArchiveEnabled(true)
                .withPolicyName("eexpgeumi")
                .withSoftDeleteRetentionPeriod(926167439))
            .withEtag("nofnin")
            .create();

        Assertions.assertEquals("dajlskzpt", response.location());
        Assertions.assertEquals("lwe", response.tags().get("cyrthxqlehm"));
        Assertions.assertEquals("g", response.properties().containerName());
        Assertions.assertEquals("quv", response.properties().sourceResourceId());
        Assertions.assertEquals("gglpmcrdcuelj", response.properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-29T07:33:04Z"),
            response.properties().lastRecoveryPoint());
        Assertions.assertEquals("xmfqryarvsxzqbg", response.properties().backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, response.properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-31T05:28:16Z"),
            response.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, response.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("thzodubtlmjtgbl", response.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, response.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, response.properties().isRehydrate());
        Assertions.assertEquals("kmfd", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, response.properties().isArchiveEnabled());
        Assertions.assertEquals("cnabxzf", response.properties().policyName());
        Assertions.assertEquals(1683245202, response.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("wncknr", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
