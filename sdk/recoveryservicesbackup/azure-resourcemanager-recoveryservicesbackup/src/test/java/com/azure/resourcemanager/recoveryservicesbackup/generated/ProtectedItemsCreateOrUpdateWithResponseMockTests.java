// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProtectedItemsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureStorage\",\"workloadType\":\"Sharepoint\",\"containerName\":\"xricctkwmuqq\",\"sourceResourceId\":\"jxeiy\",\"policyId\":\"esrw\",\"lastRecoveryPoint\":\"2021-09-23T00:22:38Z\",\"backupSetName\":\"hdctrceqn\",\"createMode\":\"Default\",\"deferredDeleteTimeInUTC\":\"2021-01-22T20:14:34Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"hdmljz\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"jpbi\",\"nzpphepife\",\"leqirccjclykcgxv\"],\"isArchiveEnabled\":false,\"policyName\":\"vczuodacpune\",\"softDeleteRetentionPeriodInDays\":1031387254,\"vaultId\":\"djxqeskoynuiylpc\"},\"eTag\":\"ewsedveskwxe\",\"location\":\"qphr\",\"tags\":{\"tsghpbcbcp\":\"zhctm\",\"ypefcpczshnuqnda\":\"arpzeqacdldtzm\",\"vtvegwqiukvzw\":\"zupfkhuytuszxhm\"},\"id\":\"dwttha\",\"name\":\"kgkskjivbsshaj\",\"type\":\"fukpeexpgeu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectedItemResource response = manager.protectedItems()
            .define("gcwn")
            .withRegion("phm")
            .withExistingProtectionContainer("gybpmfb", "ununm", "zkrvfyi", "kdschlzvfictnkjj")
            .withTags(mapOf("nmwynefxexl", "kcgsuthhl", "mdskjhhxdlajfoxc", "ciatxtjrrl", "lxlhuavkrm", "scv",
                "slojfkqidnqt", "kmyjmkxett"))
            .withProperties(new ProtectedItem().withContainerName("rtogmhmj")
                .withSourceResourceId("scdfpdqw")
                .withPolicyId("gevgwmse")
                .withLastRecoveryPoint(OffsetDateTime.parse("2021-06-22T21:43:44Z"))
                .withBackupSetName("ifvqnr")
                .withCreateMode(CreateMode.DEFAULT)
                .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-10-28T06:45:39Z"))
                .withIsScheduledForDeferredDelete(false)
                .withDeferredDeleteTimeRemaining("nvwjhrsidqpxl")
                .withIsDeferredDeleteScheduleUpcoming(true)
                .withIsRehydrate(false)
                .withResourceGuardOperationRequests(Arrays.asList("ngatwmy", "yutrymd", "mfjhpycvjqdvdwkq"))
                .withIsArchiveEnabled(true)
                .withPolicyName("lefgnaavuagnte")
                .withSoftDeleteRetentionPeriod(2121929864))
            .withEtag("duyeuyl")
            .create();

        Assertions.assertEquals("qphr", response.location());
        Assertions.assertEquals("zhctm", response.tags().get("tsghpbcbcp"));
        Assertions.assertEquals("xricctkwmuqq", response.properties().containerName());
        Assertions.assertEquals("jxeiy", response.properties().sourceResourceId());
        Assertions.assertEquals("esrw", response.properties().policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-23T00:22:38Z"),
            response.properties().lastRecoveryPoint());
        Assertions.assertEquals("hdctrceqn", response.properties().backupSetName());
        Assertions.assertEquals(CreateMode.DEFAULT, response.properties().createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-22T20:14:34Z"),
            response.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, response.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("hdmljz", response.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, response.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, response.properties().isRehydrate());
        Assertions.assertEquals("jpbi", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, response.properties().isArchiveEnabled());
        Assertions.assertEquals("vczuodacpune", response.properties().policyName());
        Assertions.assertEquals(1031387254, response.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("ewsedveskwxe", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
