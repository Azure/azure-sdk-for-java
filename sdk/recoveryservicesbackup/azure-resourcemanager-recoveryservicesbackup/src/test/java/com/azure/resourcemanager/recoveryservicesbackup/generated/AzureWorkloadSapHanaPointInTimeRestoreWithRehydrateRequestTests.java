// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"g\",\"rehydrationPriority\":\"High\"},\"pointInTime\":\"2021-03-31T21:29:13Z\",\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"bmjk\",\"propertyBag\":{\"dzyqe\":\"jgsjjxxahmrn\",\"wbjijkgq\":\"xyivpinbm\",\"jauj\":\"nhmbkez\",\"ggiycwkdtaawxwf\":\"aan\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"rrqmbzmqk\",\"databaseName\":\"tbnxwbjsid\",\"targetDirectoryForFileRestore\":\"rkfpks\"},\"recoveryMode\":\"FileRecovery\",\"targetVirtualMachineId\":\"ogewij\"}")
                .toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("bmjk", model.sourceResourceId());
        Assertions.assertEquals("jgsjjxxahmrn", model.propertyBag().get("dzyqe"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("rrqmbzmqk", model.targetInfo().containerId());
        Assertions.assertEquals("tbnxwbjsid", model.targetInfo().databaseName());
        Assertions.assertEquals("rkfpks", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ogewij", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-31T21:29:13Z"), model.pointInTime());
        Assertions.assertEquals("g", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model =
            new AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest()
                .withRecoveryType(RecoveryType.INVALID)
                .withSourceResourceId("bmjk")
                .withPropertyBag(
                    mapOf(
                        "dzyqe", "jgsjjxxahmrn", "wbjijkgq", "xyivpinbm", "jauj", "nhmbkez", "ggiycwkdtaawxwf", "aan"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                        .withContainerId("rrqmbzmqk")
                        .withDatabaseName("tbnxwbjsid")
                        .withTargetDirectoryForFileRestore("rkfpks"))
                .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
                .withTargetVirtualMachineId("ogewij")
                .withPointInTime(OffsetDateTime.parse("2021-03-31T21:29:13Z"))
                .withRecoveryPointRehydrationInfo(
                    new RecoveryPointRehydrationInfo()
                        .withRehydrationRetentionDuration("g")
                        .withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("bmjk", model.sourceResourceId());
        Assertions.assertEquals("jgsjjxxahmrn", model.propertyBag().get("dzyqe"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("rrqmbzmqk", model.targetInfo().containerId());
        Assertions.assertEquals("tbnxwbjsid", model.targetInfo().databaseName());
        Assertions.assertEquals("rkfpks", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ogewij", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-31T21:29:13Z"), model.pointInTime());
        Assertions.assertEquals("g", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
