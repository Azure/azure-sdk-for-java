// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"fnozoeoqbvjh\",\"rehydrationPriority\":\"Standard\"},\"pointInTime\":\"2021-08-30T03:42:20Z\",\"recoveryType\":\"Offline\",\"sourceResourceId\":\"jchnta\",\"propertyBag\":{\"qkyojwyvf\":\"ymxbulpzealb\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"uahxs\",\"databaseName\":\"jcmmzrrscub\",\"targetDirectoryForFileRestore\":\"sd\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetVirtualMachineId\":\"qwodiffjx\"}")
                .toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("jchnta", model.sourceResourceId());
        Assertions.assertEquals("ymxbulpzealb", model.propertyBag().get("qkyojwyvf"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("uahxs", model.targetInfo().containerId());
        Assertions.assertEquals("jcmmzrrscub", model.targetInfo().databaseName());
        Assertions.assertEquals("sd", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("qwodiffjx", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T03:42:20Z"), model.pointInTime());
        Assertions.assertEquals("fnozoeoqbvjh", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions
            .assertEquals(RehydrationPriority.STANDARD, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model =
            new AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest()
                .withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("jchnta")
                .withPropertyBag(mapOf("qkyojwyvf", "ymxbulpzealb"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.INVALID)
                        .withContainerId("uahxs")
                        .withDatabaseName("jcmmzrrscub")
                        .withTargetDirectoryForFileRestore("sd"))
                .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY)
                .withTargetVirtualMachineId("qwodiffjx")
                .withPointInTime(OffsetDateTime.parse("2021-08-30T03:42:20Z"))
                .withRecoveryPointRehydrationInfo(
                    new RecoveryPointRehydrationInfo()
                        .withRehydrationRetentionDuration("fnozoeoqbvjh")
                        .withRehydrationPriority(RehydrationPriority.STANDARD));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("jchnta", model.sourceResourceId());
        Assertions.assertEquals("ymxbulpzealb", model.propertyBag().get("qkyojwyvf"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("uahxs", model.targetInfo().containerId());
        Assertions.assertEquals("jcmmzrrscub", model.targetInfo().databaseName());
        Assertions.assertEquals("sd", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("qwodiffjx", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T03:42:20Z"), model.pointInTime());
        Assertions.assertEquals("fnozoeoqbvjh", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions
            .assertEquals(RehydrationPriority.STANDARD, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
