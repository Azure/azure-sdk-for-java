// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"pldqqct\",\"rehydrationPriority\":\"High\"},\"pointInTime\":\"2021-11-28T20:48:06Z\",\"recoveryType\":\"Offline\",\"sourceResourceId\":\"tjqvqyvweht\",\"propertyBag\":{\"usxivzrrryvei\":\"xhzzyse\",\"yzatvfuzkaft\":\"ipsk\",\"syeipqd\":\"vvruxwi\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"rqgdgkkil\",\"databaseName\":\"lkcsmknhwtbbae\",\"targetDirectoryForFileRestore\":\"rvvmqfloygb\"},\"recoveryMode\":\"Invalid\",\"targetResourceGroupName\":\"mgxdgdhpabgd\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"ddvjsaqwotmmw\",\"identityName\":\"colsrsxaptefhex\",\"userAssignedIdentityProperties\":{\"clientId\":\"okjljnhvlqjbekp\",\"principalId\":\"ksnbksdqhjv\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"sl\"},\"targetVirtualMachineId\":\"hustcpoqmavnwqjw\",\"resourceGuardOperationRequests\":[\"nlejjjkxybwf\",\"bkjbz\",\"ensvkzykjtj\",\"nsxfwu\"]}")
            .toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("nlejjjkxybwf", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("tjqvqyvweht", model.sourceResourceId());
        Assertions.assertEquals("xhzzyse", model.propertyBag().get("usxivzrrryvei"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("rqgdgkkil", model.targetInfo().containerId());
        Assertions.assertEquals("lkcsmknhwtbbae", model.targetInfo().databaseName());
        Assertions.assertEquals("rvvmqfloygb", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("mgxdgdhpabgd", model.targetResourceGroupName());
        Assertions.assertEquals("ddvjsaqwotmmw", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("colsrsxaptefhex", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("okjljnhvlqjbekp",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ksnbksdqhjv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("sl", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("hustcpoqmavnwqjw", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-28T20:48:06Z"), model.pointInTime());
        Assertions.assertEquals("pldqqct", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model
            = new AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest()
                .withResourceGuardOperationRequests(Arrays.asList("nlejjjkxybwf", "bkjbz", "ensvkzykjtj", "nsxfwu"))
                .withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("tjqvqyvweht")
                .withPropertyBag(mapOf("usxivzrrryvei", "xhzzyse", "yzatvfuzkaft", "ipsk", "syeipqd", "vvruxwi"))
                .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID)
                    .withContainerId("rqgdgkkil")
                    .withDatabaseName("lkcsmknhwtbbae")
                    .withTargetDirectoryForFileRestore("rvvmqfloygb"))
                .withRecoveryMode(RecoveryMode.INVALID)
                .withTargetResourceGroupName("mgxdgdhpabgd")
                .withUserAssignedManagedIdentityDetails(
                    new UserAssignedManagedIdentityDetails().withIdentityArmId("ddvjsaqwotmmw")
                        .withIdentityName("colsrsxaptefhex")
                        .withUserAssignedIdentityProperties(
                            new UserAssignedIdentityProperties().withClientId("okjljnhvlqjbekp")
                                .withPrincipalId("ksnbksdqhjv")))
                .withSnapshotRestoreParameters(
                    new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("sl"))
                .withTargetVirtualMachineId("hustcpoqmavnwqjw")
                .withPointInTime(OffsetDateTime.parse("2021-11-28T20:48:06Z"))
                .withRecoveryPointRehydrationInfo(
                    new RecoveryPointRehydrationInfo().withRehydrationRetentionDuration("pldqqct")
                        .withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("nlejjjkxybwf", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("tjqvqyvweht", model.sourceResourceId());
        Assertions.assertEquals("xhzzyse", model.propertyBag().get("usxivzrrryvei"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("rqgdgkkil", model.targetInfo().containerId());
        Assertions.assertEquals("lkcsmknhwtbbae", model.targetInfo().databaseName());
        Assertions.assertEquals("rvvmqfloygb", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("mgxdgdhpabgd", model.targetResourceGroupName());
        Assertions.assertEquals("ddvjsaqwotmmw", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("colsrsxaptefhex", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("okjljnhvlqjbekp",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ksnbksdqhjv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("sl", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("hustcpoqmavnwqjw", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-28T20:48:06Z"), model.pointInTime());
        Assertions.assertEquals("pldqqct", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
