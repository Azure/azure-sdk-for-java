// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"zusjsz\",\"rehydrationPriority\":\"High\"},\"pointInTime\":\"2021-03-28T16:44:26Z\",\"recoveryType\":\"Offline\",\"sourceResourceId\":\"ijiufehgmvfln\",\"propertyBag\":{\"iylylyfw\":\"qkxrerl\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"qztw\",\"databaseName\":\"hmupgxyjtcdxabbu\",\"targetDirectoryForFileRestore\":\"tabenbbk\"},\"recoveryMode\":\"RecoveryUsingSnapshot\",\"targetResourceGroupName\":\"zucafeddww\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"a\",\"identityName\":\"xud\",\"userAssignedIdentityProperties\":{\"clientId\":\"gookrtalvnb\",\"principalId\":\"pbeme\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"djj\"},\"targetVirtualMachineId\":\"yrdnqod\"}")
            .toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("ijiufehgmvfln", model.sourceResourceId());
        Assertions.assertEquals("qkxrerl", model.propertyBag().get("iylylyfw"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("qztw", model.targetInfo().containerId());
        Assertions.assertEquals("hmupgxyjtcdxabbu", model.targetInfo().databaseName());
        Assertions.assertEquals("tabenbbk", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.RECOVERY_USING_SNAPSHOT, model.recoveryMode());
        Assertions.assertEquals("zucafeddww", model.targetResourceGroupName());
        Assertions.assertEquals("a", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("xud", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("gookrtalvnb",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("pbeme",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("djj", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yrdnqod", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-28T16:44:26Z"), model.pointInTime());
        Assertions.assertEquals("zusjsz", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest model
            = new AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest().withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("ijiufehgmvfln").withPropertyBag(mapOf("iylylyfw", "qkxrerl"))
                .withTargetInfo(
                    new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID).withContainerId("qztw")
                        .withDatabaseName("hmupgxyjtcdxabbu").withTargetDirectoryForFileRestore("tabenbbk"))
                .withRecoveryMode(RecoveryMode.RECOVERY_USING_SNAPSHOT).withTargetResourceGroupName("zucafeddww")
                .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("a")
                    .withIdentityName("xud").withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("gookrtalvnb").withPrincipalId("pbeme")))
                .withSnapshotRestoreParameters(
                    new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("djj"))
                .withTargetVirtualMachineId("yrdnqod").withPointInTime(OffsetDateTime.parse("2021-03-28T16:44:26Z"))
                .withRecoveryPointRehydrationInfo(new RecoveryPointRehydrationInfo()
                    .withRehydrationRetentionDuration("zusjsz").withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("ijiufehgmvfln", model.sourceResourceId());
        Assertions.assertEquals("qkxrerl", model.propertyBag().get("iylylyfw"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("qztw", model.targetInfo().containerId());
        Assertions.assertEquals("hmupgxyjtcdxabbu", model.targetInfo().databaseName());
        Assertions.assertEquals("tabenbbk", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.RECOVERY_USING_SNAPSHOT, model.recoveryMode());
        Assertions.assertEquals("zucafeddww", model.targetResourceGroupName());
        Assertions.assertEquals("a", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("xud", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("gookrtalvnb",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("pbeme",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("djj", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yrdnqod", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-28T16:44:26Z"), model.pointInTime());
        Assertions.assertEquals("zusjsz", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
