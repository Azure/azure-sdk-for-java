// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItemExtendedInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmProtectedItemExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmProtectedItemExtendedInfo model =
            BinaryData
                .fromString(
                    "{\"protectableObjectLoadPath\":{\"xzv\":\"znvfbycjsxjww\",\"ehaohdjhh\":\"mwmxqhndvnoamld\"},\"protected\":false,\"isPresentOnCloud\":true,\"lastBackupStatus\":\"coxpelnjeta\",\"lastRefreshedAt\":\"2021-01-18T20:04:57Z\",\"oldestRecoveryPoint\":\"2021-04-30T09:20:06Z\",\"recoveryPointCount\":836185484,\"onPremiseOldestRecoveryPoint\":\"2021-11-25T21:29:51Z\",\"onPremiseLatestRecoveryPoint\":\"2020-12-20T09:27:03Z\",\"onPremiseRecoveryPointCount\":1097989023,\"isCollocated\":true,\"protectionGroupName\":\"swvefloccsrmoz\",\"diskStorageUsedInBytes\":\"m\",\"totalDiskStorageSizeInBytes\":\"g\"}")
                .toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("znvfbycjsxjww", model.protectableObjectLoadPath().get("xzv"));
        Assertions.assertEquals(false, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("coxpelnjeta", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T20:04:57Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T09:20:06Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(836185484, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T21:29:51Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T09:27:03Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1097989023, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("swvefloccsrmoz", model.protectionGroupName());
        Assertions.assertEquals("m", model.diskStorageUsedInBytes());
        Assertions.assertEquals("g", model.totalDiskStorageSizeInBytes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmProtectedItemExtendedInfo model =
            new DpmProtectedItemExtendedInfo()
                .withProtectableObjectLoadPath(mapOf("xzv", "znvfbycjsxjww", "ehaohdjhh", "mwmxqhndvnoamld"))
                .withProtectedProperty(false)
                .withIsPresentOnCloud(true)
                .withLastBackupStatus("coxpelnjeta")
                .withLastRefreshedAt(OffsetDateTime.parse("2021-01-18T20:04:57Z"))
                .withOldestRecoveryPoint(OffsetDateTime.parse("2021-04-30T09:20:06Z"))
                .withRecoveryPointCount(836185484)
                .withOnPremiseOldestRecoveryPoint(OffsetDateTime.parse("2021-11-25T21:29:51Z"))
                .withOnPremiseLatestRecoveryPoint(OffsetDateTime.parse("2020-12-20T09:27:03Z"))
                .withOnPremiseRecoveryPointCount(1097989023)
                .withIsCollocated(true)
                .withProtectionGroupName("swvefloccsrmoz")
                .withDiskStorageUsedInBytes("m")
                .withTotalDiskStorageSizeInBytes("g");
        model = BinaryData.fromObject(model).toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("znvfbycjsxjww", model.protectableObjectLoadPath().get("xzv"));
        Assertions.assertEquals(false, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("coxpelnjeta", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T20:04:57Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T09:20:06Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(836185484, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T21:29:51Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T09:27:03Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1097989023, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("swvefloccsrmoz", model.protectionGroupName());
        Assertions.assertEquals("m", model.diskStorageUsedInBytes());
        Assertions.assertEquals("g", model.totalDiskStorageSizeInBytes());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
