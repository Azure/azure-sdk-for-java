// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItemExtendedInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmProtectedItemExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmProtectedItemExtendedInfo model = BinaryData.fromString(
            "{\"protectableObjectLoadPath\":{\"hgshe\":\"gstmninwjizciln\",\"zvners\":\"jtbxqmuluxlx\",\"qbsms\":\"ycucrwnamikzeb\",\"kzruswh\":\"ziqgfuh\"},\"protected\":true,\"isPresentOnCloud\":true,\"lastBackupStatus\":\"vfbyc\",\"lastRefreshedAt\":\"2021-06-06T05:04:32Z\",\"oldestRecoveryPoint\":\"2021-05-05T04:31:59Z\",\"recoveryPointCount\":139843072,\"onPremiseOldestRecoveryPoint\":\"2020-12-22T14:20:25Z\",\"onPremiseLatestRecoveryPoint\":\"2021-05-29T07:40:45Z\",\"onPremiseRecoveryPointCount\":1790440808,\"isCollocated\":true,\"protectionGroupName\":\"hndvnoamldsehao\",\"diskStorageUsedInBytes\":\"jhhflzokxcoxpel\",\"totalDiskStorageSizeInBytes\":\"eta\"}")
            .toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("gstmninwjizciln", model.protectableObjectLoadPath().get("hgshe"));
        Assertions.assertEquals(true, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("vfbyc", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-06T05:04:32Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-05T04:31:59Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(139843072, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T14:20:25Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-29T07:40:45Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1790440808, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("hndvnoamldsehao", model.protectionGroupName());
        Assertions.assertEquals("jhhflzokxcoxpel", model.diskStorageUsedInBytes());
        Assertions.assertEquals("eta", model.totalDiskStorageSizeInBytes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmProtectedItemExtendedInfo model = new DpmProtectedItemExtendedInfo()
            .withProtectableObjectLoadPath(mapOf("hgshe", "gstmninwjizciln", "zvners", "jtbxqmuluxlx", "qbsms",
                "ycucrwnamikzeb", "kzruswh", "ziqgfuh"))
            .withProtectedProperty(true).withIsPresentOnCloud(true).withLastBackupStatus("vfbyc")
            .withLastRefreshedAt(OffsetDateTime.parse("2021-06-06T05:04:32Z"))
            .withOldestRecoveryPoint(OffsetDateTime.parse("2021-05-05T04:31:59Z")).withRecoveryPointCount(139843072)
            .withOnPremiseOldestRecoveryPoint(OffsetDateTime.parse("2020-12-22T14:20:25Z"))
            .withOnPremiseLatestRecoveryPoint(OffsetDateTime.parse("2021-05-29T07:40:45Z"))
            .withOnPremiseRecoveryPointCount(1790440808).withIsCollocated(true)
            .withProtectionGroupName("hndvnoamldsehao").withDiskStorageUsedInBytes("jhhflzokxcoxpel")
            .withTotalDiskStorageSizeInBytes("eta");
        model = BinaryData.fromObject(model).toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("gstmninwjizciln", model.protectableObjectLoadPath().get("hgshe"));
        Assertions.assertEquals(true, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("vfbyc", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-06T05:04:32Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-05T04:31:59Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(139843072, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T14:20:25Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-29T07:40:45Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1790440808, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("hndvnoamldsehao", model.protectionGroupName());
        Assertions.assertEquals("jhhflzokxcoxpel", model.diskStorageUsedInBytes());
        Assertions.assertEquals("eta", model.totalDiskStorageSizeInBytes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
