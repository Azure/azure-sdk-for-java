// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItemExtendedInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmProtectedItemExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmProtectedItemExtendedInfo model = BinaryData.fromString(
            "{\"protectableObjectLoadPath\":{\"vuporqzdfuydzv\":\"vfgpikqmhhaowjrm\"},\"protected\":true,\"isPresentOnCloud\":true,\"lastBackupStatus\":\"qmxq\",\"lastRefreshedAt\":\"2021-06-24T21:59:48Z\",\"oldestRecoveryPoint\":\"2020-12-21T19:56:22Z\",\"recoveryPointCount\":1002449917,\"onPremiseOldestRecoveryPoint\":\"2021-01-11T11:04:44Z\",\"onPremiseLatestRecoveryPoint\":\"2021-12-01T08:12:15Z\",\"onPremiseRecoveryPointCount\":998809541,\"isCollocated\":true,\"protectionGroupName\":\"mzqkz\",\"diskStorageUsedInBytes\":\"uwiwtglxxhljfpg\",\"totalDiskStorageSizeInBytes\":\"crmnzhrgmqgjs\"}")
            .toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("vfgpikqmhhaowjrm", model.protectableObjectLoadPath().get("vuporqzdfuydzv"));
        Assertions.assertEquals(true, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("qmxq", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-24T21:59:48Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-21T19:56:22Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(1002449917, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T11:04:44Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T08:12:15Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(998809541, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("mzqkz", model.protectionGroupName());
        Assertions.assertEquals("uwiwtglxxhljfpg", model.diskStorageUsedInBytes());
        Assertions.assertEquals("crmnzhrgmqgjs", model.totalDiskStorageSizeInBytes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmProtectedItemExtendedInfo model = new DpmProtectedItemExtendedInfo()
            .withProtectableObjectLoadPath(mapOf("vuporqzdfuydzv", "vfgpikqmhhaowjrm"))
            .withProtectedProperty(true)
            .withIsPresentOnCloud(true)
            .withLastBackupStatus("qmxq")
            .withLastRefreshedAt(OffsetDateTime.parse("2021-06-24T21:59:48Z"))
            .withOldestRecoveryPoint(OffsetDateTime.parse("2020-12-21T19:56:22Z"))
            .withRecoveryPointCount(1002449917)
            .withOnPremiseOldestRecoveryPoint(OffsetDateTime.parse("2021-01-11T11:04:44Z"))
            .withOnPremiseLatestRecoveryPoint(OffsetDateTime.parse("2021-12-01T08:12:15Z"))
            .withOnPremiseRecoveryPointCount(998809541)
            .withIsCollocated(true)
            .withProtectionGroupName("mzqkz")
            .withDiskStorageUsedInBytes("uwiwtglxxhljfpg")
            .withTotalDiskStorageSizeInBytes("crmnzhrgmqgjs");
        model = BinaryData.fromObject(model).toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("vfgpikqmhhaowjrm", model.protectableObjectLoadPath().get("vuporqzdfuydzv"));
        Assertions.assertEquals(true, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("qmxq", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-24T21:59:48Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-21T19:56:22Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(1002449917, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T11:04:44Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T08:12:15Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(998809541, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("mzqkz", model.protectionGroupName());
        Assertions.assertEquals("uwiwtglxxhljfpg", model.diskStorageUsedInBytes());
        Assertions.assertEquals("crmnzhrgmqgjs", model.totalDiskStorageSizeInBytes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
