// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItemExtendedInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmProtectedItemExtendedInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmProtectedItemExtendedInfo model = BinaryData.fromString(
            "{\"protectableObjectLoadPath\":{\"vkfvxcnqmxqpswok\":\"dfuyd\",\"kzsz\":\"vkhlggdhbemz\",\"fpgpicrmnzhrgm\":\"wiwtglxxhl\",\"qcbfrmbodths\":\"gjsxv\"},\"protected\":true,\"isPresentOnCloud\":true,\"lastBackupStatus\":\"i\",\"lastRefreshedAt\":\"2021-01-20T04:23:32Z\",\"oldestRecoveryPoint\":\"2021-06-17T12:23:54Z\",\"recoveryPointCount\":47418436,\"onPremiseOldestRecoveryPoint\":\"2021-05-28T16:52:57Z\",\"onPremiseLatestRecoveryPoint\":\"2021-11-04T08:18:17Z\",\"onPremiseRecoveryPointCount\":1419015231,\"isCollocated\":true,\"protectionGroupName\":\"au\",\"diskStorageUsedInBytes\":\"wvsgmwohqfzizvu\",\"totalDiskStorageSizeInBytes\":\"mk\"}")
            .toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("dfuyd", model.protectableObjectLoadPath().get("vkfvxcnqmxqpswok"));
        Assertions.assertEquals(true, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("i", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T04:23:32Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T12:23:54Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(47418436, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-28T16:52:57Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T08:18:17Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1419015231, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("au", model.protectionGroupName());
        Assertions.assertEquals("wvsgmwohqfzizvu", model.diskStorageUsedInBytes());
        Assertions.assertEquals("mk", model.totalDiskStorageSizeInBytes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmProtectedItemExtendedInfo model = new DpmProtectedItemExtendedInfo()
            .withProtectableObjectLoadPath(mapOf("vkfvxcnqmxqpswok", "dfuyd", "kzsz", "vkhlggdhbemz", "fpgpicrmnzhrgm",
                "wiwtglxxhl", "qcbfrmbodths", "gjsxv"))
            .withProtectedProperty(true)
            .withIsPresentOnCloud(true)
            .withLastBackupStatus("i")
            .withLastRefreshedAt(OffsetDateTime.parse("2021-01-20T04:23:32Z"))
            .withOldestRecoveryPoint(OffsetDateTime.parse("2021-06-17T12:23:54Z"))
            .withRecoveryPointCount(47418436)
            .withOnPremiseOldestRecoveryPoint(OffsetDateTime.parse("2021-05-28T16:52:57Z"))
            .withOnPremiseLatestRecoveryPoint(OffsetDateTime.parse("2021-11-04T08:18:17Z"))
            .withOnPremiseRecoveryPointCount(1419015231)
            .withIsCollocated(true)
            .withProtectionGroupName("au")
            .withDiskStorageUsedInBytes("wvsgmwohqfzizvu")
            .withTotalDiskStorageSizeInBytes("mk");
        model = BinaryData.fromObject(model).toObject(DpmProtectedItemExtendedInfo.class);
        Assertions.assertEquals("dfuyd", model.protectableObjectLoadPath().get("vkfvxcnqmxqpswok"));
        Assertions.assertEquals(true, model.protectedProperty());
        Assertions.assertEquals(true, model.isPresentOnCloud());
        Assertions.assertEquals("i", model.lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T04:23:32Z"), model.lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T12:23:54Z"), model.oldestRecoveryPoint());
        Assertions.assertEquals(47418436, model.recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-28T16:52:57Z"), model.onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T08:18:17Z"), model.onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1419015231, model.onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.isCollocated());
        Assertions.assertEquals("au", model.protectionGroupName());
        Assertions.assertEquals("wvsgmwohqfzizvu", model.diskStorageUsedInBytes());
        Assertions.assertEquals("mk", model.totalDiskStorageSizeInBytes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
