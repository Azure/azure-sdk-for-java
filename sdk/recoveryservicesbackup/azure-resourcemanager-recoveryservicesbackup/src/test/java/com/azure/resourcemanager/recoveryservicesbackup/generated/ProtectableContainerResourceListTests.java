// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectableContainerResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectableContainer;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectableContainerResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectableContainerResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectableContainerResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"protectableContainerType\":\"ProtectableContainer\",\"friendlyName\":\"zapvhelx\",\"backupManagementType\":\"MAB\",\"healthStatus\":\"yat\",\"containerId\":\"ckcb\"},\"eTag\":\"ejrjxgciqibrho\",\"location\":\"xsdqrhzoymibmrqy\",\"tags\":{\"zdtmhrkwofy\":\"hwflu\",\"iwbwoenwashrtdtk\":\"voqacpiexpbt\",\"kulpiujwaasi\":\"nqxwbp\",\"qlpqwcciuq\":\"qiiobyuqer\"},\"id\":\"bdbutauvf\",\"name\":\"tkuwhhmhykojo\",\"type\":\"afnn\"},{\"properties\":{\"protectableContainerType\":\"ProtectableContainer\",\"friendlyName\":\"ichkoymkcdyhb\",\"backupManagementType\":\"AzureSql\",\"healthStatus\":\"wdreqnovvqfovl\",\"containerId\":\"ywsuwsy\"},\"eTag\":\"ndsytgadg\",\"location\":\"r\",\"tags\":{\"qnzarrwl\":\"en\",\"jfqka\":\"uu\",\"iipfpubj\":\"e\"},\"id\":\"bwwift\",\"name\":\"hqkvpuvksgplsak\",\"type\":\"ynfs\"},{\"properties\":{\"protectableContainerType\":\"ProtectableContainer\",\"friendlyName\":\"jphuopxodlqi\",\"backupManagementType\":\"AzureStorage\",\"healthStatus\":\"rz\",\"containerId\":\"leosjswsrms\"},\"eTag\":\"zrpzb\",\"location\":\"hckqqzqioxiy\",\"tags\":{\"ynkedyatrwyhqmib\":\"i\",\"mnzgmwznmabi\":\"yhwitsmypyynpcdp\",\"wwrlkdmtncv\":\"nsorgjhxbldt\",\"xdy\":\"kotl\"},\"id\":\"gsyocogj\",\"name\":\"tdtbnnhadooc\",\"type\":\"kvci\"}],\"nextLink\":\"nvpamq\"}")
            .toObject(ProtectableContainerResourceList.class);
        Assertions.assertEquals("nvpamq", model.nextLink());
        Assertions.assertEquals("xsdqrhzoymibmrqy", model.value().get(0).location());
        Assertions.assertEquals("hwflu", model.value().get(0).tags().get("zdtmhrkwofy"));
        Assertions.assertEquals("zapvhelx", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.value().get(0).properties().backupManagementType());
        Assertions.assertEquals("yat", model.value().get(0).properties().healthStatus());
        Assertions.assertEquals("ckcb", model.value().get(0).properties().containerId());
        Assertions.assertEquals("ejrjxgciqibrho", model.value().get(0).etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectableContainerResourceList model = new ProtectableContainerResourceList().withNextLink("nvpamq")
            .withValue(Arrays.asList(
                new ProtectableContainerResourceInner().withLocation("xsdqrhzoymibmrqy")
                    .withTags(mapOf("zdtmhrkwofy", "hwflu", "iwbwoenwashrtdtk", "voqacpiexpbt", "kulpiujwaasi",
                        "nqxwbp", "qlpqwcciuq", "qiiobyuqer"))
                    .withProperties(new ProtectableContainer().withFriendlyName("zapvhelx")
                        .withBackupManagementType(BackupManagementType.MAB)
                        .withHealthStatus("yat")
                        .withContainerId("ckcb"))
                    .withEtag("ejrjxgciqibrho"),
                new ProtectableContainerResourceInner().withLocation("r")
                    .withTags(mapOf("qnzarrwl", "en", "jfqka", "uu", "iipfpubj", "e"))
                    .withProperties(new ProtectableContainer().withFriendlyName("ichkoymkcdyhb")
                        .withBackupManagementType(BackupManagementType.AZURE_SQL)
                        .withHealthStatus("wdreqnovvqfovl")
                        .withContainerId("ywsuwsy"))
                    .withEtag("ndsytgadg"),
                new ProtectableContainerResourceInner().withLocation("hckqqzqioxiy")
                    .withTags(mapOf("ynkedyatrwyhqmib", "i", "mnzgmwznmabi", "yhwitsmypyynpcdp", "wwrlkdmtncv",
                        "nsorgjhxbldt", "xdy", "kotl"))
                    .withProperties(new ProtectableContainer().withFriendlyName("jphuopxodlqi")
                        .withBackupManagementType(BackupManagementType.AZURE_STORAGE)
                        .withHealthStatus("rz")
                        .withContainerId("leosjswsrms"))
                    .withEtag("zrpzb")));
        model = BinaryData.fromObject(model).toObject(ProtectableContainerResourceList.class);
        Assertions.assertEquals("nvpamq", model.nextLink());
        Assertions.assertEquals("xsdqrhzoymibmrqy", model.value().get(0).location());
        Assertions.assertEquals("hwflu", model.value().get(0).tags().get("zdtmhrkwofy"));
        Assertions.assertEquals("zapvhelx", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.value().get(0).properties().backupManagementType());
        Assertions.assertEquals("yat", model.value().get(0).properties().healthStatus());
        Assertions.assertEquals("ckcb", model.value().get(0).properties().containerId());
        Assertions.assertEquals("ejrjxgciqibrho", model.value().get(0).etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
