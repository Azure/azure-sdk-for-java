// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailySchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.HourlySchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.ScheduleRunType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SimpleSchedulePolicyV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklySchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SimpleSchedulePolicyV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimpleSchedulePolicyV2 model =
            BinaryData
                .fromString(
                    "{\"schedulePolicyType\":\"SimpleSchedulePolicyV2\",\"scheduleRunFrequency\":\"Weekly\",\"hourlySchedule\":{\"interval\":95734174,\"scheduleWindowStartTime\":\"2021-02-08T02:34:27Z\",\"scheduleWindowDuration\":44892577},\"dailySchedule\":{\"scheduleRunTimes\":[\"2021-05-21T00:47:40Z\",\"2021-01-29T13:25:56Z\"]},\"weeklySchedule\":{\"scheduleRunDays\":[\"Tuesday\",\"Sunday\"],\"scheduleRunTimes\":[\"2021-03-11T03:18:05Z\",\"2021-05-17T14:27:16Z\",\"2021-04-09T11:30:43Z\",\"2021-10-16T11:13:44Z\"]}}")
                .toObject(SimpleSchedulePolicyV2.class);
        Assertions.assertEquals(ScheduleRunType.WEEKLY, model.scheduleRunFrequency());
        Assertions.assertEquals(95734174, model.hourlySchedule().interval());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-08T02:34:27Z"), model.hourlySchedule().scheduleWindowStartTime());
        Assertions.assertEquals(44892577, model.hourlySchedule().scheduleWindowDuration());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-21T00:47:40Z"), model.dailySchedule().scheduleRunTimes().get(0));
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.weeklySchedule().scheduleRunDays().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-11T03:18:05Z"), model.weeklySchedule().scheduleRunTimes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimpleSchedulePolicyV2 model =
            new SimpleSchedulePolicyV2()
                .withScheduleRunFrequency(ScheduleRunType.WEEKLY)
                .withHourlySchedule(
                    new HourlySchedule()
                        .withInterval(95734174)
                        .withScheduleWindowStartTime(OffsetDateTime.parse("2021-02-08T02:34:27Z"))
                        .withScheduleWindowDuration(44892577))
                .withDailySchedule(
                    new DailySchedule()
                        .withScheduleRunTimes(
                            Arrays
                                .asList(
                                    OffsetDateTime.parse("2021-05-21T00:47:40Z"),
                                    OffsetDateTime.parse("2021-01-29T13:25:56Z"))))
                .withWeeklySchedule(
                    new WeeklySchedule()
                        .withScheduleRunDays(Arrays.asList(DayOfWeek.TUESDAY, DayOfWeek.SUNDAY))
                        .withScheduleRunTimes(
                            Arrays
                                .asList(
                                    OffsetDateTime.parse("2021-03-11T03:18:05Z"),
                                    OffsetDateTime.parse("2021-05-17T14:27:16Z"),
                                    OffsetDateTime.parse("2021-04-09T11:30:43Z"),
                                    OffsetDateTime.parse("2021-10-16T11:13:44Z"))));
        model = BinaryData.fromObject(model).toObject(SimpleSchedulePolicyV2.class);
        Assertions.assertEquals(ScheduleRunType.WEEKLY, model.scheduleRunFrequency());
        Assertions.assertEquals(95734174, model.hourlySchedule().interval());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-08T02:34:27Z"), model.hourlySchedule().scheduleWindowStartTime());
        Assertions.assertEquals(44892577, model.hourlySchedule().scheduleWindowDuration());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-21T00:47:40Z"), model.dailySchedule().scheduleRunTimes().get(0));
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.weeklySchedule().scheduleRunDays().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-11T03:18:05Z"), model.weeklySchedule().scheduleRunTimes().get(0));
    }
}
