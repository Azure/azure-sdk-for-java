// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailySchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.HourlySchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.ScheduleRunType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SimpleSchedulePolicyV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklySchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SimpleSchedulePolicyV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimpleSchedulePolicyV2 model = BinaryData.fromString(
            "{\"schedulePolicyType\":\"SimpleSchedulePolicyV2\",\"scheduleRunFrequency\":\"Hourly\",\"hourlySchedule\":{\"interval\":118504398,\"scheduleWindowStartTime\":\"2021-05-26T00:13:29Z\",\"scheduleWindowDuration\":1699127103},\"dailySchedule\":{\"scheduleRunTimes\":[\"2021-09-29T23:38:37Z\"]},\"weeklySchedule\":{\"scheduleRunDays\":[\"Thursday\",\"Tuesday\",\"Friday\"],\"scheduleRunTimes\":[\"2021-03-08T07:10:50Z\",\"2021-08-20T17:36:59Z\"]}}")
            .toObject(SimpleSchedulePolicyV2.class);
        Assertions.assertEquals(ScheduleRunType.HOURLY, model.scheduleRunFrequency());
        Assertions.assertEquals(118504398, model.hourlySchedule().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-26T00:13:29Z"),
            model.hourlySchedule().scheduleWindowStartTime());
        Assertions.assertEquals(1699127103, model.hourlySchedule().scheduleWindowDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-29T23:38:37Z"),
            model.dailySchedule().scheduleRunTimes().get(0));
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.weeklySchedule().scheduleRunDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T07:10:50Z"),
            model.weeklySchedule().scheduleRunTimes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimpleSchedulePolicyV2 model = new SimpleSchedulePolicyV2().withScheduleRunFrequency(ScheduleRunType.HOURLY)
            .withHourlySchedule(new HourlySchedule().withInterval(118504398)
                .withScheduleWindowStartTime(OffsetDateTime.parse("2021-05-26T00:13:29Z"))
                .withScheduleWindowDuration(1699127103))
            .withDailySchedule(
                new DailySchedule().withScheduleRunTimes(Arrays.asList(OffsetDateTime.parse("2021-09-29T23:38:37Z"))))
            .withWeeklySchedule(new WeeklySchedule()
                .withScheduleRunDays(Arrays.asList(DayOfWeek.THURSDAY, DayOfWeek.TUESDAY, DayOfWeek.FRIDAY))
                .withScheduleRunTimes(Arrays.asList(OffsetDateTime.parse("2021-03-08T07:10:50Z"),
                    OffsetDateTime.parse("2021-08-20T17:36:59Z"))));
        model = BinaryData.fromObject(model).toObject(SimpleSchedulePolicyV2.class);
        Assertions.assertEquals(ScheduleRunType.HOURLY, model.scheduleRunFrequency());
        Assertions.assertEquals(118504398, model.hourlySchedule().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-26T00:13:29Z"),
            model.hourlySchedule().scheduleWindowStartTime());
        Assertions.assertEquals(1699127103, model.hourlySchedule().scheduleWindowDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-29T23:38:37Z"),
            model.dailySchedule().scheduleRunTimes().get(0));
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.weeklySchedule().scheduleRunDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T07:10:50Z"),
            model.weeklySchedule().scheduleRunTimes().get(0));
    }
}
