// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.DailySchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.DayOfWeek;
import com.azure.resourcemanager.recoveryservicesbackup.models.HourlySchedule;
import com.azure.resourcemanager.recoveryservicesbackup.models.ScheduleRunType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SimpleSchedulePolicyV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.WeeklySchedule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SimpleSchedulePolicyV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimpleSchedulePolicyV2 model = BinaryData.fromString(
            "{\"schedulePolicyType\":\"SimpleSchedulePolicyV2\",\"scheduleRunFrequency\":\"Invalid\",\"hourlySchedule\":{\"interval\":2068748786,\"scheduleWindowStartTime\":\"2021-10-08T05:36:48Z\",\"scheduleWindowDuration\":1306675913},\"dailySchedule\":{\"scheduleRunTimes\":[\"2021-11-02T01:12:01Z\"]},\"weeklySchedule\":{\"scheduleRunDays\":[\"Saturday\",\"Friday\",\"Wednesday\"],\"scheduleRunTimes\":[\"2021-09-01T06:41:41Z\"]}}")
            .toObject(SimpleSchedulePolicyV2.class);
        Assertions.assertEquals(ScheduleRunType.INVALID, model.scheduleRunFrequency());
        Assertions.assertEquals(2068748786, model.hourlySchedule().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-08T05:36:48Z"),
            model.hourlySchedule().scheduleWindowStartTime());
        Assertions.assertEquals(1306675913, model.hourlySchedule().scheduleWindowDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-02T01:12:01Z"),
            model.dailySchedule().scheduleRunTimes().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.weeklySchedule().scheduleRunDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T06:41:41Z"),
            model.weeklySchedule().scheduleRunTimes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimpleSchedulePolicyV2 model = new SimpleSchedulePolicyV2().withScheduleRunFrequency(ScheduleRunType.INVALID)
            .withHourlySchedule(new HourlySchedule().withInterval(2068748786)
                .withScheduleWindowStartTime(OffsetDateTime.parse("2021-10-08T05:36:48Z"))
                .withScheduleWindowDuration(1306675913))
            .withDailySchedule(
                new DailySchedule().withScheduleRunTimes(Arrays.asList(OffsetDateTime.parse("2021-11-02T01:12:01Z"))))
            .withWeeklySchedule(new WeeklySchedule()
                .withScheduleRunDays(Arrays.asList(DayOfWeek.SATURDAY, DayOfWeek.FRIDAY, DayOfWeek.WEDNESDAY))
                .withScheduleRunTimes(Arrays.asList(OffsetDateTime.parse("2021-09-01T06:41:41Z"))));
        model = BinaryData.fromObject(model).toObject(SimpleSchedulePolicyV2.class);
        Assertions.assertEquals(ScheduleRunType.INVALID, model.scheduleRunFrequency());
        Assertions.assertEquals(2068748786, model.hourlySchedule().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-08T05:36:48Z"),
            model.hourlySchedule().scheduleWindowStartTime());
        Assertions.assertEquals(1306675913, model.hourlySchedule().scheduleWindowDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-02T01:12:01Z"),
            model.dailySchedule().scheduleRunTimes().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.weeklySchedule().scheduleRunDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T06:41:41Z"),
            model.weeklySchedule().scheduleRunTimes().get(0));
    }
}
