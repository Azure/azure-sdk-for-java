// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlPointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLPointInTimeRestoreRequest\",\"pointInTime\":\"2021-06-28T21:13:43Z\",\"shouldUseAlternateTargetLocation\":false,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Data\",\"sourceLogicalName\":\"vxirpghriypo\",\"sourcePath\":\"yhlqhykprlpyznu\",\"targetPath\":\"qdsmexiit\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"tyasiibmiybnnust\",\"propertyBag\":{\"mgixhcmavmqfou\":\"jh\",\"cgyypro\":\"or\",\"undmbx\":\"wy\",\"ftpmdtzfjltfv\":\"ugcmjkavlgorb\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"t\",\"databaseName\":\"p\",\"targetDirectoryForFileRestore\":\"pvpbdbzqgqqiheds\"},\"recoveryMode\":\"RecoveryUsingSnapshot\",\"targetResourceGroupName\":\"hmkyibc\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"hsgqc\",\"identityName\":\"hohsd\",\"userAssignedIdentityProperties\":{\"clientId\":\"dzsufc\",\"principalId\":\"dxbzlmcmuap\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"evwqqxeyskonq\"},\"targetVirtualMachineId\":\"nkfkbgbzb\"}")
            .toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("tyasiibmiybnnust", model.sourceResourceId());
        Assertions.assertEquals("jh", model.propertyBag().get("mgixhcmavmqfou"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("t", model.targetInfo().containerId());
        Assertions.assertEquals("p", model.targetInfo().databaseName());
        Assertions.assertEquals("pvpbdbzqgqqiheds", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.RECOVERY_USING_SNAPSHOT, model.recoveryMode());
        Assertions.assertEquals("hmkyibc", model.targetResourceGroupName());
        Assertions.assertEquals("hsgqc", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("hohsd", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("dzsufc",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("dxbzlmcmuap",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("evwqqxeyskonq", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("nkfkbgbzb", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.DATA, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("vxirpghriypo", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("yhlqhykprlpyznu", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("qdsmexiit", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T21:13:43Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreRequest model = new AzureWorkloadSqlPointInTimeRestoreRequest()
            .withRecoveryType(RecoveryType.OFFLINE).withSourceResourceId("tyasiibmiybnnust")
            .withPropertyBag(
                mapOf("mgixhcmavmqfou", "jh", "cgyypro", "or", "undmbx", "wy", "ftpmdtzfjltfv", "ugcmjkavlgorb"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID).withContainerId("t")
                .withDatabaseName("p").withTargetDirectoryForFileRestore("pvpbdbzqgqqiheds"))
            .withRecoveryMode(RecoveryMode.RECOVERY_USING_SNAPSHOT).withTargetResourceGroupName("hmkyibc")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("hsgqc")
                .withIdentityName("hohsd").withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("dzsufc").withPrincipalId("dxbzlmcmuap")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(true)
                .withLogPointInTimeForDBRecovery("evwqqxeyskonq"))
            .withTargetVirtualMachineId("nkfkbgbzb").withShouldUseAlternateTargetLocation(false)
            .withIsNonRecoverable(false)
            .withAlternateDirectoryPaths(Arrays.asList(new SqlDataDirectoryMapping()
                .withMappingType(SqlDataDirectoryType.DATA).withSourceLogicalName("vxirpghriypo")
                .withSourcePath("yhlqhykprlpyznu").withTargetPath("qdsmexiit")))
            .withPointInTime(OffsetDateTime.parse("2021-06-28T21:13:43Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("tyasiibmiybnnust", model.sourceResourceId());
        Assertions.assertEquals("jh", model.propertyBag().get("mgixhcmavmqfou"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("t", model.targetInfo().containerId());
        Assertions.assertEquals("p", model.targetInfo().databaseName());
        Assertions.assertEquals("pvpbdbzqgqqiheds", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.RECOVERY_USING_SNAPSHOT, model.recoveryMode());
        Assertions.assertEquals("hmkyibc", model.targetResourceGroupName());
        Assertions.assertEquals("hsgqc", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("hohsd", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("dzsufc",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("dxbzlmcmuap",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("evwqqxeyskonq", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("nkfkbgbzb", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.DATA, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("vxirpghriypo", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("yhlqhykprlpyznu", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("qdsmexiit", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T21:13:43Z"), model.pointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
