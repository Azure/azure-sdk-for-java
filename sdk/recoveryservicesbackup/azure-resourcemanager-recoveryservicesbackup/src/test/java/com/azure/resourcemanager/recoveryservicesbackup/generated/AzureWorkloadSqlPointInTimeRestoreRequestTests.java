// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlPointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSQLPointInTimeRestoreRequest\",\"pointInTime\":\"2021-01-04T09:37:39Z\",\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"vbmqzbqq\",\"sourcePath\":\"aj\",\"targetPath\":\"wxacevehj\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"oafgaoql\",\"propertyBag\":{\"nm\":\"eyl\",\"irpghriypoqeyh\":\"gv\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"prlpy\",\"databaseName\":\"uciqdsme\",\"targetDirectoryForFileRestore\":\"itdfuxtyasiib\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetVirtualMachineId\":\"nnust\"}")
                .toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("oafgaoql", model.sourceResourceId());
        Assertions.assertEquals("eyl", model.propertyBag().get("nm"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("prlpy", model.targetInfo().containerId());
        Assertions.assertEquals("uciqdsme", model.targetInfo().databaseName());
        Assertions.assertEquals("itdfuxtyasiib", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nnust", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("vbmqzbqq", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("aj", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("wxacevehj", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-04T09:37:39Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreRequest model =
            new AzureWorkloadSqlPointInTimeRestoreRequest()
                .withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("oafgaoql")
                .withPropertyBag(mapOf("nm", "eyl", "irpghriypoqeyh", "gv"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.INVALID)
                        .withContainerId("prlpy")
                        .withDatabaseName("uciqdsme")
                        .withTargetDirectoryForFileRestore("itdfuxtyasiib"))
                .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY)
                .withTargetVirtualMachineId("nnust")
                .withShouldUseAlternateTargetLocation(true)
                .withIsNonRecoverable(false)
                .withAlternateDirectoryPaths(
                    Arrays
                        .asList(
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.INVALID)
                                .withSourceLogicalName("vbmqzbqq")
                                .withSourcePath("aj")
                                .withTargetPath("wxacevehj")))
                .withPointInTime(OffsetDateTime.parse("2021-01-04T09:37:39Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("oafgaoql", model.sourceResourceId());
        Assertions.assertEquals("eyl", model.propertyBag().get("nm"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("prlpy", model.targetInfo().containerId());
        Assertions.assertEquals("uciqdsme", model.targetInfo().databaseName());
        Assertions.assertEquals("itdfuxtyasiib", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nnust", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("vbmqzbqq", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("aj", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("wxacevehj", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-04T09:37:39Z"), model.pointInTime());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
