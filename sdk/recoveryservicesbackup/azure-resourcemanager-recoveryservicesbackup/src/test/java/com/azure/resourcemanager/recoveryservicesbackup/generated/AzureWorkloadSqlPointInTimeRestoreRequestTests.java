// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSqlPointInTimeRestoreRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSqlPointInTimeRestoreRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSQLPointInTimeRestoreRequest\",\"pointInTime\":\"2021-04-30T04:43:06Z\",\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Log\",\"sourceLogicalName\":\"qrntv\",\"sourcePath\":\"ijpstte\",\"targetPath\":\"qqpwcyyuf\"},{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"nc\",\"sourcePath\":\"mqspkcdqzhlctdd\",\"targetPath\":\"qn\"},{\"mappingType\":\"Log\",\"sourceLogicalName\":\"chrqb\",\"sourcePath\":\"jrcg\",\"targetPath\":\"ydcwboxjumv\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"ihrraiouaub\",\"propertyBag\":{\"rzpasccbiuimzdly\":\"loqxfuojrngif\",\"fdvruz\":\"dfqwmkyoq\",\"hpc\":\"lzo\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"xotngfdguge\",\"databaseName\":\"i\",\"targetDirectoryForFileRestore\":\"rkyui\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetVirtualMachineId\":\"nmfpp\"}")
                .toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("ihrraiouaub", model.sourceResourceId());
        Assertions.assertEquals("loqxfuojrngif", model.propertyBag().get("rzpasccbiuimzdly"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("xotngfdguge", model.targetInfo().containerId());
        Assertions.assertEquals("i", model.targetInfo().databaseName());
        Assertions.assertEquals("rkyui", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nmfpp", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("qrntv", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("ijpstte", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("qqpwcyyuf", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T04:43:06Z"), model.pointInTime());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSqlPointInTimeRestoreRequest model =
            new AzureWorkloadSqlPointInTimeRestoreRequest()
                .withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("ihrraiouaub")
                .withPropertyBag(mapOf("rzpasccbiuimzdly", "loqxfuojrngif", "fdvruz", "dfqwmkyoq", "hpc", "lzo"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.INVALID)
                        .withContainerId("xotngfdguge")
                        .withDatabaseName("i")
                        .withTargetDirectoryForFileRestore("rkyui"))
                .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY)
                .withTargetVirtualMachineId("nmfpp")
                .withShouldUseAlternateTargetLocation(true)
                .withIsNonRecoverable(false)
                .withAlternateDirectoryPaths(
                    Arrays
                        .asList(
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.LOG)
                                .withSourceLogicalName("qrntv")
                                .withSourcePath("ijpstte")
                                .withTargetPath("qqpwcyyuf"),
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.INVALID)
                                .withSourceLogicalName("nc")
                                .withSourcePath("mqspkcdqzhlctdd")
                                .withTargetPath("qn"),
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.LOG)
                                .withSourceLogicalName("chrqb")
                                .withSourcePath("jrcg")
                                .withTargetPath("ydcwboxjumv")))
                .withPointInTime(OffsetDateTime.parse("2021-04-30T04:43:06Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("ihrraiouaub", model.sourceResourceId());
        Assertions.assertEquals("loqxfuojrngif", model.propertyBag().get("rzpasccbiuimzdly"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("xotngfdguge", model.targetInfo().containerId());
        Assertions.assertEquals("i", model.targetInfo().databaseName());
        Assertions.assertEquals("rkyui", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nmfpp", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("qrntv", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("ijpstte", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("qqpwcyyuf", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T04:43:06Z"), model.pointInTime());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
