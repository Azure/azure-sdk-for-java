// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlPointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLPointInTimeRestoreRequest\",\"pointInTime\":\"2021-03-19T19:23:29Z\",\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Data\",\"sourceLogicalName\":\"oi\",\"sourcePath\":\"nsmjbl\",\"targetPath\":\"jhlnymzotqyryu\"},{\"mappingType\":\"Data\",\"sourceLogicalName\":\"qqvxmvwfgtayxons\",\"sourcePath\":\"e\",\"targetPath\":\"lzqnhcvs\"}],\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"zoibgsxg\",\"propertyBag\":{\"mpqoxw\":\"yqo\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"xiqxeiiqbimh\",\"databaseName\":\"wwinhehf\",\"targetDirectoryForFileRestore\":\"ofvwbcb\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetResourceGroupName\":\"nkbwvqv\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"ivqiheb\",\"identityName\":\"swbzuwfmdurage\",\"userAssignedIdentityProperties\":{\"clientId\":\"vcjfelisdjubggb\",\"principalId\":\"gkxkbsazgakg\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"m\"},\"targetVirtualMachineId\":\"mspofapvuhryl\",\"resourceGuardOperationRequests\":[\"frzgbzjed\",\"st\"]}")
            .toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals("frzgbzjed", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("zoibgsxg", model.sourceResourceId());
        Assertions.assertEquals("yqo", model.propertyBag().get("mpqoxw"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("xiqxeiiqbimh", model.targetInfo().containerId());
        Assertions.assertEquals("wwinhehf", model.targetInfo().databaseName());
        Assertions.assertEquals("ofvwbcb", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nkbwvqv", model.targetResourceGroupName());
        Assertions.assertEquals("ivqiheb", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("swbzuwfmdurage", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("vcjfelisdjubggb",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("gkxkbsazgakg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("m", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("mspofapvuhryl", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.DATA, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("oi", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("nsmjbl", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("jhlnymzotqyryu", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T19:23:29Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlPointInTimeRestoreRequest model = new AzureWorkloadSqlPointInTimeRestoreRequest()
            .withResourceGuardOperationRequests(Arrays.asList("frzgbzjed", "st"))
            .withRecoveryType(RecoveryType.INVALID)
            .withSourceResourceId("zoibgsxg")
            .withPropertyBag(mapOf("mpqoxw", "yqo"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID)
                .withContainerId("xiqxeiiqbimh")
                .withDatabaseName("wwinhehf")
                .withTargetDirectoryForFileRestore("ofvwbcb"))
            .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY)
            .withTargetResourceGroupName("nkbwvqv")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                .withIdentityArmId("ivqiheb")
                .withIdentityName("swbzuwfmdurage")
                .withUserAssignedIdentityProperties(new UserAssignedIdentityProperties().withClientId("vcjfelisdjubggb")
                    .withPrincipalId("gkxkbsazgakg")))
            .withSnapshotRestoreParameters(
                new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("m"))
            .withTargetVirtualMachineId("mspofapvuhryl")
            .withShouldUseAlternateTargetLocation(true)
            .withIsNonRecoverable(false)
            .withAlternateDirectoryPaths(Arrays.asList(
                new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.DATA)
                    .withSourceLogicalName("oi")
                    .withSourcePath("nsmjbl")
                    .withTargetPath("jhlnymzotqyryu"),
                new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.DATA)
                    .withSourceLogicalName("qqvxmvwfgtayxons")
                    .withSourcePath("e")
                    .withTargetPath("lzqnhcvs")))
            .withPointInTime(OffsetDateTime.parse("2021-03-19T19:23:29Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlPointInTimeRestoreRequest.class);
        Assertions.assertEquals("frzgbzjed", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("zoibgsxg", model.sourceResourceId());
        Assertions.assertEquals("yqo", model.propertyBag().get("mpqoxw"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("xiqxeiiqbimh", model.targetInfo().containerId());
        Assertions.assertEquals("wwinhehf", model.targetInfo().databaseName());
        Assertions.assertEquals("ofvwbcb", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("nkbwvqv", model.targetResourceGroupName());
        Assertions.assertEquals("ivqiheb", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("swbzuwfmdurage", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("vcjfelisdjubggb",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("gkxkbsazgakg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("m", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("mspofapvuhryl", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.DATA, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("oi", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("nsmjbl", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("jhlnymzotqyryu", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T19:23:29Z"), model.pointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
