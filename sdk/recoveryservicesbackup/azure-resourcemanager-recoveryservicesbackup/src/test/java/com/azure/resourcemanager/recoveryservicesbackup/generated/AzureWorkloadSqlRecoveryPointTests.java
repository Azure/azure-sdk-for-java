// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRecoveryPointExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectory;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLRecoveryPoint\",\"extendedInfo\":{\"dataDirectoryTimeInUTC\":\"2021-10-31T23:23:29Z\",\"dataDirectoryPaths\":[{\"type\":\"Invalid\",\"path\":\"ua\",\"logicalName\":\"zkwrrwoyc\"},{\"type\":\"Invalid\",\"path\":\"yhahnomdrkyw\",\"logicalName\":\"psvfuurutlwexxwl\"},{\"type\":\"Log\",\"path\":\"exzsrz\",\"logicalName\":\"epqtybb\"},{\"type\":\"Invalid\",\"path\":\"dakchzyvl\",\"logicalName\":\"q\"}]},\"recoveryPointTimeInUTC\":\"2021-03-17T12:53:51Z\",\"type\":\"Differential\",\"recoveryPointTierDetails\":[{\"type\":\"Invalid\",\"status\":\"Invalid\",\"extendedInfo\":{\"ttexoqqpwcyyufmh\":\"suxswqrntvlwijp\"}},{\"type\":\"Invalid\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"unqndyfpchrqb\":\"qspkcdqzhlctd\",\"boxjumvq\":\"jjrcgegydc\",\"ouau\":\"olihrra\",\"fuojrngif\":\"rjtloq\"}},{\"type\":\"Invalid\",\"status\":\"Deleted\",\"extendedInfo\":{\"uimzdlyjd\":\"cb\",\"vruzslzojhpctfnm\":\"qwmkyoquf\",\"zihgrkyu\":\"xotngfdguge\",\"mfp\":\"zabs\"}}],\"recoveryPointMoveReadinessInfo\":{\"bgomfgbegl\":{\"isReadyForMove\":false,\"additionalInfo\":\"vyhyhsgzfc\"},\"i\":{\"isReadyForMove\":true,\"additionalInfo\":\"o\"}},\"recoveryPointProperties\":{\"expiryTime\":\"nlu\",\"ruleName\":\"krrfx\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadSqlRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-17T12:53:51Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.INVALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("suxswqrntvlwijp",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("ttexoqqpwcyyufmh"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("bgomfgbegl").isReadyForMove());
        Assertions.assertEquals("vyhyhsgzfc",
            model.recoveryPointMoveReadinessInfo().get("bgomfgbegl").additionalInfo());
        Assertions.assertEquals("nlu", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("krrfx", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T23:23:29Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("ua", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("zkwrrwoyc", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlRecoveryPoint model = new AzureWorkloadSqlRecoveryPoint()
            .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-03-17T12:53:51Z"))
            .withType(RestorePointType.DIFFERENTIAL)
            .withRecoveryPointTierDetails(Arrays.asList(
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                    .withStatus(RecoveryPointTierStatus.INVALID)
                    .withExtendedInfo(mapOf("ttexoqqpwcyyufmh", "suxswqrntvlwijp")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                    .withStatus(RecoveryPointTierStatus.REHYDRATED)
                    .withExtendedInfo(mapOf("unqndyfpchrqb", "qspkcdqzhlctd", "boxjumvq", "jjrcgegydc", "ouau",
                        "olihrra", "fuojrngif", "rjtloq")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                    .withStatus(RecoveryPointTierStatus.DELETED)
                    .withExtendedInfo(mapOf("uimzdlyjd", "cb", "vruzslzojhpctfnm", "qwmkyoquf", "zihgrkyu",
                        "xotngfdguge", "mfp", "zabs"))))
            .withRecoveryPointMoveReadinessInfo(mapOf("bgomfgbegl",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("vyhyhsgzfc"), "i",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("o")))
            .withRecoveryPointProperties(
                new RecoveryPointProperties().withExpiryTime("nlu").withRuleName("krrfx").withIsSoftDeleted(true))
            .withExtendedInfo(new AzureWorkloadSqlRecoveryPointExtendedInfo()
                .withDataDirectoryTimeInUtc(OffsetDateTime.parse("2021-10-31T23:23:29Z"))
                .withDataDirectoryPaths(Arrays.asList(
                    new SqlDataDirectory().withType(SqlDataDirectoryType.INVALID).withPath("ua")
                        .withLogicalName("zkwrrwoyc"),
                    new SqlDataDirectory().withType(SqlDataDirectoryType.INVALID).withPath("yhahnomdrkyw")
                        .withLogicalName("psvfuurutlwexxwl"),
                    new SqlDataDirectory().withType(SqlDataDirectoryType.LOG).withPath("exzsrz")
                        .withLogicalName("epqtybb"),
                    new SqlDataDirectory().withType(SqlDataDirectoryType.INVALID).withPath("dakchzyvl")
                        .withLogicalName("q"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-17T12:53:51Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.INVALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("suxswqrntvlwijp",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("ttexoqqpwcyyufmh"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("bgomfgbegl").isReadyForMove());
        Assertions.assertEquals("vyhyhsgzfc",
            model.recoveryPointMoveReadinessInfo().get("bgomfgbegl").additionalInfo());
        Assertions.assertEquals("nlu", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("krrfx", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T23:23:29Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("ua", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("zkwrrwoyc", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
