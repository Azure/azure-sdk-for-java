// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRecoveryPointExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectory;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLRecoveryPoint\",\"extendedInfo\":{\"dataDirectoryTimeInUTC\":\"2021-02-15T20:04:06Z\",\"dataDirectoryPaths\":[{\"type\":\"Data\",\"path\":\"dqxtbjwgnyf\",\"logicalName\":\"fzsvtuikzh\"}]},\"recoveryPointTimeInUTC\":\"2021-02-02T06:21:41Z\",\"type\":\"Invalid\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Invalid\",\"extendedInfo\":{\"zrdpsovwxznptgoe\":\"yxynq\",\"vntjlrigjk\":\"ybbabpfhvfsl\",\"xwaabzmifrygznmm\":\"kyrioovzid\"}}],\"recoveryPointMoveReadinessInfo\":{\"opxlhslnelxieixy\":{\"isReadyForMove\":true,\"additionalInfo\":\"zob\"}},\"recoveryPointProperties\":{\"expiryTime\":\"xecwcro\",\"ruleName\":\"hslhca\",\"isSoftDeleted\":false}}")
            .toObject(AzureWorkloadSqlRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-02T06:21:41Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.INVALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("yxynq",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("zrdpsovwxznptgoe"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("opxlhslnelxieixy").isReadyForMove());
        Assertions.assertEquals("zob", model.recoveryPointMoveReadinessInfo().get("opxlhslnelxieixy").additionalInfo());
        Assertions.assertEquals("xecwcro", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("hslhca", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-15T20:04:06Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.DATA, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("dqxtbjwgnyf", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("fzsvtuikzh", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlRecoveryPoint model = new AzureWorkloadSqlRecoveryPoint()
            .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-02-02T06:21:41Z"))
            .withType(RestorePointType.INVALID)
            .withRecoveryPointTierDetails(
                Arrays.asList(new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                    .withStatus(RecoveryPointTierStatus.INVALID)
                    .withExtendedInfo(mapOf("zrdpsovwxznptgoe", "yxynq", "vntjlrigjk", "ybbabpfhvfsl",
                        "xwaabzmifrygznmm", "kyrioovzid"))))
            .withRecoveryPointMoveReadinessInfo(mapOf("opxlhslnelxieixy",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("zob")))
            .withRecoveryPointProperties(
                new RecoveryPointProperties().withExpiryTime("xecwcro").withRuleName("hslhca").withIsSoftDeleted(false))
            .withExtendedInfo(new AzureWorkloadSqlRecoveryPointExtendedInfo()
                .withDataDirectoryTimeInUtc(OffsetDateTime.parse("2021-02-15T20:04:06Z"))
                .withDataDirectoryPaths(Arrays.asList(new SqlDataDirectory().withType(SqlDataDirectoryType.DATA)
                    .withPath("dqxtbjwgnyf")
                    .withLogicalName("fzsvtuikzh"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-02T06:21:41Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.INVALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("yxynq",
            model.recoveryPointTierDetails().get(0).extendedInfo().get("zrdpsovwxznptgoe"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("opxlhslnelxieixy").isReadyForMove());
        Assertions.assertEquals("zob", model.recoveryPointMoveReadinessInfo().get("opxlhslnelxieixy").additionalInfo());
        Assertions.assertEquals("xecwcro", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("hslhca", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-15T20:04:06Z"),
            model.extendedInfo().dataDirectoryTimeInUtc());
        Assertions.assertEquals(SqlDataDirectoryType.DATA, model.extendedInfo().dataDirectoryPaths().get(0).type());
        Assertions.assertEquals("dqxtbjwgnyf", model.extendedInfo().dataDirectoryPaths().get(0).path());
        Assertions.assertEquals("fzsvtuikzh", model.extendedInfo().dataDirectoryPaths().get(0).logicalName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
