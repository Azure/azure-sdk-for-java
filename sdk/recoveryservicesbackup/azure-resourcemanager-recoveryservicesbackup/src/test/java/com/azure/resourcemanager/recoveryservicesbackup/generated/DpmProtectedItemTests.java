// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItemExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmProtectedItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmProtectedItem model = BinaryData.fromString(
            "{\"protectedItemType\":\"DPMProtectedItem\",\"friendlyName\":\"twfans\",\"backupEngineName\":\"pdibmikostbzbki\",\"protectionState\":\"BackupsSuspended\",\"extendedInfo\":{\"protectableObjectLoadPath\":{\"bcunezzceze\":\"ophzfylsgcrp\",\"psihcla\":\"fwyfwlwxjwet\"},\"protected\":false,\"isPresentOnCloud\":true,\"lastBackupStatus\":\"pt\",\"lastRefreshedAt\":\"2021-01-27T06:49:32Z\",\"oldestRecoveryPoint\":\"2021-10-26T12:31:30Z\",\"recoveryPointCount\":105779102,\"onPremiseOldestRecoveryPoint\":\"2021-09-09T08:43:34Z\",\"onPremiseLatestRecoveryPoint\":\"2021-10-18T08:54:32Z\",\"onPremiseRecoveryPointCount\":899185817,\"isCollocated\":true,\"protectionGroupName\":\"waxfewzjkj\",\"diskStorageUsedInBytes\":\"fdeqvhpsyl\",\"totalDiskStorageSizeInBytes\":\"shk\"},\"backupManagementType\":\"AzureStorage\",\"workloadType\":\"SQLDataBase\",\"containerName\":\"xzjrgy\",\"sourceResourceId\":\"pgjxsnptfujgicga\",\"policyId\":\"epttaqu\",\"lastRecoveryPoint\":\"2020-12-29T06:23:03Z\",\"backupSetName\":\"emxswvruu\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-01-20T04:43:39Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"fkimrtix\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"nljqepqwhixmons\",\"shiy\",\"gvelfc\",\"du\"],\"isArchiveEnabled\":true,\"policyName\":\"rds\",\"softDeleteRetentionPeriodInDays\":1544209565,\"vaultId\":\"o\"}")
            .toObject(DpmProtectedItem.class);
        Assertions.assertEquals("xzjrgy", model.containerName());
        Assertions.assertEquals("pgjxsnptfujgicga", model.sourceResourceId());
        Assertions.assertEquals("epttaqu", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T06:23:03Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("emxswvruu", model.backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T04:43:39Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("fkimrtix", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, model.isRehydrate());
        Assertions.assertEquals("nljqepqwhixmons", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("rds", model.policyName());
        Assertions.assertEquals(1544209565, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("twfans", model.friendlyName());
        Assertions.assertEquals("pdibmikostbzbki", model.backupEngineName());
        Assertions.assertEquals(ProtectedItemState.BACKUPS_SUSPENDED, model.protectionState());
        Assertions.assertEquals("ophzfylsgcrp", model.extendedInfo().protectableObjectLoadPath().get("bcunezzceze"));
        Assertions.assertEquals(false, model.extendedInfo().protectedProperty());
        Assertions.assertEquals(true, model.extendedInfo().isPresentOnCloud());
        Assertions.assertEquals("pt", model.extendedInfo().lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T06:49:32Z"), model.extendedInfo().lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T12:31:30Z"),
            model.extendedInfo().oldestRecoveryPoint());
        Assertions.assertEquals(105779102, model.extendedInfo().recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-09T08:43:34Z"),
            model.extendedInfo().onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-18T08:54:32Z"),
            model.extendedInfo().onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(899185817, model.extendedInfo().onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.extendedInfo().isCollocated());
        Assertions.assertEquals("waxfewzjkj", model.extendedInfo().protectionGroupName());
        Assertions.assertEquals("fdeqvhpsyl", model.extendedInfo().diskStorageUsedInBytes());
        Assertions.assertEquals("shk", model.extendedInfo().totalDiskStorageSizeInBytes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmProtectedItem model = new DpmProtectedItem().withContainerName("xzjrgy")
            .withSourceResourceId("pgjxsnptfujgicga").withPolicyId("epttaqu")
            .withLastRecoveryPoint(OffsetDateTime.parse("2020-12-29T06:23:03Z")).withBackupSetName("emxswvruu")
            .withCreateMode(CreateMode.RECOVER)
            .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-01-20T04:43:39Z"))
            .withIsScheduledForDeferredDelete(true).withDeferredDeleteTimeRemaining("fkimrtix")
            .withIsDeferredDeleteScheduleUpcoming(false).withIsRehydrate(false)
            .withResourceGuardOperationRequests(Arrays.asList("nljqepqwhixmons", "shiy", "gvelfc", "du"))
            .withIsArchiveEnabled(true).withPolicyName("rds").withSoftDeleteRetentionPeriod(1544209565)
            .withFriendlyName("twfans").withBackupEngineName("pdibmikostbzbki")
            .withProtectionState(ProtectedItemState.BACKUPS_SUSPENDED)
            .withExtendedInfo(new DpmProtectedItemExtendedInfo()
                .withProtectableObjectLoadPath(mapOf("bcunezzceze", "ophzfylsgcrp", "psihcla", "fwyfwlwxjwet"))
                .withProtectedProperty(false).withIsPresentOnCloud(true).withLastBackupStatus("pt")
                .withLastRefreshedAt(OffsetDateTime.parse("2021-01-27T06:49:32Z"))
                .withOldestRecoveryPoint(OffsetDateTime.parse("2021-10-26T12:31:30Z")).withRecoveryPointCount(105779102)
                .withOnPremiseOldestRecoveryPoint(OffsetDateTime.parse("2021-09-09T08:43:34Z"))
                .withOnPremiseLatestRecoveryPoint(OffsetDateTime.parse("2021-10-18T08:54:32Z"))
                .withOnPremiseRecoveryPointCount(899185817).withIsCollocated(true).withProtectionGroupName("waxfewzjkj")
                .withDiskStorageUsedInBytes("fdeqvhpsyl").withTotalDiskStorageSizeInBytes("shk"));
        model = BinaryData.fromObject(model).toObject(DpmProtectedItem.class);
        Assertions.assertEquals("xzjrgy", model.containerName());
        Assertions.assertEquals("pgjxsnptfujgicga", model.sourceResourceId());
        Assertions.assertEquals("epttaqu", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T06:23:03Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("emxswvruu", model.backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T04:43:39Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("fkimrtix", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, model.isRehydrate());
        Assertions.assertEquals("nljqepqwhixmons", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("rds", model.policyName());
        Assertions.assertEquals(1544209565, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("twfans", model.friendlyName());
        Assertions.assertEquals("pdibmikostbzbki", model.backupEngineName());
        Assertions.assertEquals(ProtectedItemState.BACKUPS_SUSPENDED, model.protectionState());
        Assertions.assertEquals("ophzfylsgcrp", model.extendedInfo().protectableObjectLoadPath().get("bcunezzceze"));
        Assertions.assertEquals(false, model.extendedInfo().protectedProperty());
        Assertions.assertEquals(true, model.extendedInfo().isPresentOnCloud());
        Assertions.assertEquals("pt", model.extendedInfo().lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T06:49:32Z"), model.extendedInfo().lastRefreshedAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T12:31:30Z"),
            model.extendedInfo().oldestRecoveryPoint());
        Assertions.assertEquals(105779102, model.extendedInfo().recoveryPointCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-09T08:43:34Z"),
            model.extendedInfo().onPremiseOldestRecoveryPoint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-18T08:54:32Z"),
            model.extendedInfo().onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(899185817, model.extendedInfo().onPremiseRecoveryPointCount());
        Assertions.assertEquals(true, model.extendedInfo().isCollocated());
        Assertions.assertEquals("waxfewzjkj", model.extendedInfo().protectionGroupName());
        Assertions.assertEquals("fdeqvhpsyl", model.extendedInfo().diskStorageUsedInBytes());
        Assertions.assertEquals("shk", model.extendedInfo().totalDiskStorageSizeInBytes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
