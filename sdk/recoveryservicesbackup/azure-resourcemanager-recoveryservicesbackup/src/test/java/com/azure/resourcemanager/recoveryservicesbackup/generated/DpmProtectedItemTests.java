// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmProtectedItemExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DpmProtectedItemTests {
    @Test
    public void testDeserialize() {
        DpmProtectedItem model =
            BinaryData
                .fromString(
                    "{\"protectedItemType\":\"DPMProtectedItem\",\"friendlyName\":\"jutifdwfmvigorqj\",\"backupEngineName\":\"tzh\",\"protectionState\":\"Protected\",\"extendedInfo\":{\"protectableObjectLoadPath\":{\"opmx\":\"fhonqjujeickpzvc\",\"xxmlfmkqscazua\":\"lnwcltyjed\"},\"protected\":true,\"isPresentOnCloud\":false,\"lastBackupStatus\":\"uamwabzxrvxc\",\"lastRefreshedAt\":\"2021-11-23T17:17:10Z\",\"oldestRecoveryPoint\":\"2021-05-14T08:17:22Z\",\"recoveryPointCount\":1333151238,\"onPremiseOldestRecoveryPoint\":\"2021-09-14T20:20:24Z\",\"onPremiseLatestRecoveryPoint\":\"2021-08-02T22:27:38Z\",\"onPremiseRecoveryPointCount\":1448410077,\"isCollocated\":false,\"protectionGroupName\":\"vgsgzwywakoihkn\",\"diskStorageUsedInBytes\":\"jblmljhlnymz\",\"totalDiskStorageSizeInBytes\":\"qyryuzcbmqqvxm\"},\"backupManagementType\":\"Invalid\",\"workloadType\":\"AzureSqlDb\",\"containerName\":\"yxonsupe\",\"sourceResourceId\":\"lzqnhcvs\",\"policyId\":\"tnzoibgsxgnxfy\",\"lastRecoveryPoint\":\"2021-03-20T13:56:14Z\",\"backupSetName\":\"p\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-08-14T04:57:20Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"bxiqxeiiqbimht\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":false,\"resourceGuardOperationRequests\":[\"hfqpofv\",\"bcblemb\",\"kbwvqvxkdiv\"],\"isArchiveEnabled\":false,\"policyName\":\"b\",\"softDeleteRetentionPeriod\":1610520770}")
                .toObject(DpmProtectedItem.class);
        Assertions.assertEquals("yxonsupe", model.containerName());
        Assertions.assertEquals("lzqnhcvs", model.sourceResourceId());
        Assertions.assertEquals("tnzoibgsxgnxfy", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T13:56:14Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("p", model.backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-14T04:57:20Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("bxiqxeiiqbimht", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, model.isRehydrate());
        Assertions.assertEquals("hfqpofv", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.isArchiveEnabled());
        Assertions.assertEquals("b", model.policyName());
        Assertions.assertEquals(1610520770, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("jutifdwfmvigorqj", model.friendlyName());
        Assertions.assertEquals("tzh", model.backupEngineName());
        Assertions.assertEquals(ProtectedItemState.PROTECTED, model.protectionState());
        Assertions.assertEquals("fhonqjujeickpzvc", model.extendedInfo().protectableObjectLoadPath().get("opmx"));
        Assertions.assertEquals(true, model.extendedInfo().protectedProperty());
        Assertions.assertEquals(false, model.extendedInfo().isPresentOnCloud());
        Assertions.assertEquals("uamwabzxrvxc", model.extendedInfo().lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-23T17:17:10Z"), model.extendedInfo().lastRefreshedAt());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-14T08:17:22Z"), model.extendedInfo().oldestRecoveryPoint());
        Assertions.assertEquals(1333151238, model.extendedInfo().recoveryPointCount());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-14T20:20:24Z"), model.extendedInfo().onPremiseOldestRecoveryPoint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-02T22:27:38Z"), model.extendedInfo().onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1448410077, model.extendedInfo().onPremiseRecoveryPointCount());
        Assertions.assertEquals(false, model.extendedInfo().isCollocated());
        Assertions.assertEquals("vgsgzwywakoihkn", model.extendedInfo().protectionGroupName());
        Assertions.assertEquals("jblmljhlnymz", model.extendedInfo().diskStorageUsedInBytes());
        Assertions.assertEquals("qyryuzcbmqqvxm", model.extendedInfo().totalDiskStorageSizeInBytes());
    }

    @Test
    public void testSerialize() {
        DpmProtectedItem model =
            new DpmProtectedItem()
                .withContainerName("yxonsupe")
                .withSourceResourceId("lzqnhcvs")
                .withPolicyId("tnzoibgsxgnxfy")
                .withLastRecoveryPoint(OffsetDateTime.parse("2021-03-20T13:56:14Z"))
                .withBackupSetName("p")
                .withCreateMode(CreateMode.RECOVER)
                .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-08-14T04:57:20Z"))
                .withIsScheduledForDeferredDelete(true)
                .withDeferredDeleteTimeRemaining("bxiqxeiiqbimht")
                .withIsDeferredDeleteScheduleUpcoming(true)
                .withIsRehydrate(false)
                .withResourceGuardOperationRequests(Arrays.asList("hfqpofv", "bcblemb", "kbwvqvxkdiv"))
                .withIsArchiveEnabled(false)
                .withPolicyName("b")
                .withSoftDeleteRetentionPeriod(1610520770)
                .withFriendlyName("jutifdwfmvigorqj")
                .withBackupEngineName("tzh")
                .withProtectionState(ProtectedItemState.PROTECTED)
                .withExtendedInfo(
                    new DpmProtectedItemExtendedInfo()
                        .withProtectableObjectLoadPath(
                            mapOf("opmx", "fhonqjujeickpzvc", "xxmlfmkqscazua", "lnwcltyjed"))
                        .withProtectedProperty(true)
                        .withIsPresentOnCloud(false)
                        .withLastBackupStatus("uamwabzxrvxc")
                        .withLastRefreshedAt(OffsetDateTime.parse("2021-11-23T17:17:10Z"))
                        .withOldestRecoveryPoint(OffsetDateTime.parse("2021-05-14T08:17:22Z"))
                        .withRecoveryPointCount(1333151238)
                        .withOnPremiseOldestRecoveryPoint(OffsetDateTime.parse("2021-09-14T20:20:24Z"))
                        .withOnPremiseLatestRecoveryPoint(OffsetDateTime.parse("2021-08-02T22:27:38Z"))
                        .withOnPremiseRecoveryPointCount(1448410077)
                        .withIsCollocated(false)
                        .withProtectionGroupName("vgsgzwywakoihkn")
                        .withDiskStorageUsedInBytes("jblmljhlnymz")
                        .withTotalDiskStorageSizeInBytes("qyryuzcbmqqvxm"));
        model = BinaryData.fromObject(model).toObject(DpmProtectedItem.class);
        Assertions.assertEquals("yxonsupe", model.containerName());
        Assertions.assertEquals("lzqnhcvs", model.sourceResourceId());
        Assertions.assertEquals("tnzoibgsxgnxfy", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T13:56:14Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("p", model.backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-14T04:57:20Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("bxiqxeiiqbimht", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(false, model.isRehydrate());
        Assertions.assertEquals("hfqpofv", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.isArchiveEnabled());
        Assertions.assertEquals("b", model.policyName());
        Assertions.assertEquals(1610520770, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("jutifdwfmvigorqj", model.friendlyName());
        Assertions.assertEquals("tzh", model.backupEngineName());
        Assertions.assertEquals(ProtectedItemState.PROTECTED, model.protectionState());
        Assertions.assertEquals("fhonqjujeickpzvc", model.extendedInfo().protectableObjectLoadPath().get("opmx"));
        Assertions.assertEquals(true, model.extendedInfo().protectedProperty());
        Assertions.assertEquals(false, model.extendedInfo().isPresentOnCloud());
        Assertions.assertEquals("uamwabzxrvxc", model.extendedInfo().lastBackupStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-23T17:17:10Z"), model.extendedInfo().lastRefreshedAt());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-14T08:17:22Z"), model.extendedInfo().oldestRecoveryPoint());
        Assertions.assertEquals(1333151238, model.extendedInfo().recoveryPointCount());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-14T20:20:24Z"), model.extendedInfo().onPremiseOldestRecoveryPoint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-02T22:27:38Z"), model.extendedInfo().onPremiseLatestRecoveryPoint());
        Assertions.assertEquals(1448410077, model.extendedInfo().onPremiseRecoveryPointCount());
        Assertions.assertEquals(false, model.extendedInfo().isCollocated());
        Assertions.assertEquals("vgsgzwywakoihkn", model.extendedInfo().protectionGroupName());
        Assertions.assertEquals("jblmljhlnymz", model.extendedInfo().diskStorageUsedInBytes());
        Assertions.assertEquals("qyryuzcbmqqvxm", model.extendedInfo().totalDiskStorageSizeInBytes());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
