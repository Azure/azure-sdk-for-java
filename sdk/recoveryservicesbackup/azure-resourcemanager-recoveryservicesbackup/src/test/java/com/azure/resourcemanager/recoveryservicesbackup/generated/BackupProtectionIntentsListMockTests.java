// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionIntentResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupProtectionIntentsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"protectionIntentItemType\":\"ProtectionIntent\",\"backupManagementType\":\"AzureIaasVM\",\"sourceResourceId\":\"eryekzkdhmeottaw\",\"itemId\":\"osxw\",\"policyId\":\"nhjtf\",\"protectionState\":\"NotProtected\"},\"eTag\":\"pmil\",\"location\":\"pnwy\",\"tags\":{\"iqhzlr\":\"qllzsauzpjlxeehu\",\"xls\":\"yme\",\"yyshtuwgmevua\":\"ihmxrfdsajredn\",\"rkgwltxeqip\":\"pwzyi\"},\"id\":\"gzdyimsfayorp\",\"name\":\"avkjog\",\"type\":\"sl\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ProtectionIntentResource> response =
            manager
                .backupProtectionIntents()
                .list("kn", "rwzawnvs", "cfhzagxnvhycv", "imwrzregzgyufu", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pnwy", response.iterator().next().location());
        Assertions.assertEquals("qllzsauzpjlxeehu", response.iterator().next().tags().get("iqhzlr"));
        Assertions
            .assertEquals(
                BackupManagementType.AZURE_IAAS_VM, response.iterator().next().properties().backupManagementType());
        Assertions.assertEquals("eryekzkdhmeottaw", response.iterator().next().properties().sourceResourceId());
        Assertions.assertEquals("osxw", response.iterator().next().properties().itemId());
        Assertions.assertEquals("nhjtf", response.iterator().next().properties().policyId());
        Assertions
            .assertEquals(ProtectionStatus.NOT_PROTECTED, response.iterator().next().properties().protectionState());
        Assertions.assertEquals("pmil", response.iterator().next().etag());
    }
}
