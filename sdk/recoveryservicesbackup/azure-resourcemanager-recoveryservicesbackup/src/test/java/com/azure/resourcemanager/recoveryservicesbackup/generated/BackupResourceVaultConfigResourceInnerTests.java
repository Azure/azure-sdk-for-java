// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.BackupResourceVaultConfigResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupResourceVaultConfig;
import com.azure.resourcemanager.recoveryservicesbackup.models.EnhancedSecurityState;
import com.azure.resourcemanager.recoveryservicesbackup.models.SoftDeleteFeatureState;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageType;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageTypeState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupResourceVaultConfigResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupResourceVaultConfigResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"storageModelType\":\"Invalid\",\"storageType\":\"ReadAccessGeoZoneRedundant\",\"storageTypeState\":\"Invalid\",\"enhancedSecurityState\":\"Invalid\",\"softDeleteFeatureState\":\"AlwaysON\",\"softDeleteRetentionPeriodInDays\":1491222167,\"resourceGuardOperationRequests\":[\"zaqsqsycbkbfk\",\"ukdkexxppofmxa\",\"c\",\"jpgd\"],\"isSoftDeleteFeatureStateEditable\":true},\"eTag\":\"jjxhvpmo\",\"location\":\"exhd\",\"tags\":{\"jnxqbzvddntwn\":\"bqe\"},\"id\":\"eic\",\"name\":\"twnpzaoqvuhrhcf\",\"type\":\"cyddglmjthjqk\"}")
            .toObject(BackupResourceVaultConfigResourceInner.class);
        Assertions.assertEquals("exhd", model.location());
        Assertions.assertEquals("bqe", model.tags().get("jnxqbzvddntwn"));
        Assertions.assertEquals(StorageType.INVALID, model.properties().storageModelType());
        Assertions.assertEquals(StorageType.READ_ACCESS_GEO_ZONE_REDUNDANT, model.properties().storageType());
        Assertions.assertEquals(StorageTypeState.INVALID, model.properties().storageTypeState());
        Assertions.assertEquals(EnhancedSecurityState.INVALID, model.properties().enhancedSecurityState());
        Assertions.assertEquals(SoftDeleteFeatureState.ALWAYS_ON, model.properties().softDeleteFeatureState());
        Assertions.assertEquals(1491222167, model.properties().softDeleteRetentionPeriodInDays());
        Assertions.assertEquals("zaqsqsycbkbfk", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.properties().isSoftDeleteFeatureStateEditable());
        Assertions.assertEquals("jjxhvpmo", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupResourceVaultConfigResourceInner model = new BackupResourceVaultConfigResourceInner().withLocation("exhd")
            .withTags(mapOf("jnxqbzvddntwn", "bqe"))
            .withProperties(new BackupResourceVaultConfig().withStorageModelType(StorageType.INVALID)
                .withStorageType(StorageType.READ_ACCESS_GEO_ZONE_REDUNDANT)
                .withStorageTypeState(StorageTypeState.INVALID)
                .withEnhancedSecurityState(EnhancedSecurityState.INVALID)
                .withSoftDeleteFeatureState(SoftDeleteFeatureState.ALWAYS_ON)
                .withSoftDeleteRetentionPeriodInDays(1491222167)
                .withResourceGuardOperationRequests(Arrays.asList("zaqsqsycbkbfk", "ukdkexxppofmxa", "c", "jpgd"))
                .withIsSoftDeleteFeatureStateEditable(true))
            .withEtag("jjxhvpmo");
        model = BinaryData.fromObject(model).toObject(BackupResourceVaultConfigResourceInner.class);
        Assertions.assertEquals("exhd", model.location());
        Assertions.assertEquals("bqe", model.tags().get("jnxqbzvddntwn"));
        Assertions.assertEquals(StorageType.INVALID, model.properties().storageModelType());
        Assertions.assertEquals(StorageType.READ_ACCESS_GEO_ZONE_REDUNDANT, model.properties().storageType());
        Assertions.assertEquals(StorageTypeState.INVALID, model.properties().storageTypeState());
        Assertions.assertEquals(EnhancedSecurityState.INVALID, model.properties().enhancedSecurityState());
        Assertions.assertEquals(SoftDeleteFeatureState.ALWAYS_ON, model.properties().softDeleteFeatureState());
        Assertions.assertEquals(1491222167, model.properties().softDeleteRetentionPeriodInDays());
        Assertions.assertEquals("zaqsqsycbkbfk", model.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.properties().isSoftDeleteFeatureStateEditable());
        Assertions.assertEquals("jjxhvpmo", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
