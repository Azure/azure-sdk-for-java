// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectionContainerResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionContainer;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionContainerResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectionContainerResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionContainerResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"containerType\":\"ProtectionContainer\",\"friendlyName\":\"bqwrvtldgm\",\"backupManagementType\":\"AzureStorage\",\"registrationStatus\":\"mpipaslthaqfxs\",\"healthStatus\":\"wutwbdsre\",\"protectableObjectType\":\"drhneuyow\"},\"eTag\":\"d\",\"location\":\"ytisibir\",\"tags\":{\"lfzxiavrmbzonoki\":\"ikpzimejza\",\"rgz\":\"rjqc\"},\"id\":\"frl\",\"name\":\"zszrnwoiindfpw\",\"type\":\"jylwbtlhflsj\"},{\"properties\":{\"containerType\":\"ProtectionContainer\",\"friendlyName\":\"szfjvfbgofelja\",\"backupManagementType\":\"AzureSql\",\"registrationStatus\":\"qhl\",\"healthStatus\":\"riiiojnalghfkv\",\"protectableObjectType\":\"sexso\"},\"eTag\":\"el\",\"location\":\"qhhahhxvrhmzkwpj\",\"tags\":{\"ujxukndxd\":\"spughftqsxhq\",\"syqtfi\":\"grjguufzd\",\"phoszqz\":\"whbotzingamv\",\"kfwynw\":\"dphqamv\"},\"id\":\"vtbvkayh\",\"name\":\"tnvyqiatkzwp\",\"type\":\"npwzcjaes\"}],\"nextLink\":\"v\"}")
            .toObject(ProtectionContainerResourceList.class);
        Assertions.assertEquals("v", model.nextLink());
        Assertions.assertEquals("ytisibir", model.value().get(0).location());
        Assertions.assertEquals("ikpzimejza", model.value().get(0).tags().get("lfzxiavrmbzonoki"));
        Assertions.assertEquals("bqwrvtldgm", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_STORAGE,
            model.value().get(0).properties().backupManagementType());
        Assertions.assertEquals("mpipaslthaqfxs", model.value().get(0).properties().registrationStatus());
        Assertions.assertEquals("wutwbdsre", model.value().get(0).properties().healthStatus());
        Assertions.assertEquals("drhneuyow", model.value().get(0).properties().protectableObjectType());
        Assertions.assertEquals("d", model.value().get(0).etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionContainerResourceList model = new ProtectionContainerResourceList().withNextLink("v")
            .withValue(Arrays.asList(
                new ProtectionContainerResourceInner().withLocation("ytisibir")
                    .withTags(mapOf("lfzxiavrmbzonoki", "ikpzimejza", "rgz", "rjqc"))
                    .withProperties(new ProtectionContainer().withFriendlyName("bqwrvtldgm")
                        .withBackupManagementType(BackupManagementType.AZURE_STORAGE)
                        .withRegistrationStatus("mpipaslthaqfxs")
                        .withHealthStatus("wutwbdsre")
                        .withProtectableObjectType("drhneuyow"))
                    .withEtag("d"),
                new ProtectionContainerResourceInner().withLocation("qhhahhxvrhmzkwpj")
                    .withTags(mapOf("ujxukndxd", "spughftqsxhq", "syqtfi", "grjguufzd", "phoszqz", "whbotzingamv",
                        "kfwynw", "dphqamv"))
                    .withProperties(new ProtectionContainer().withFriendlyName("szfjvfbgofelja")
                        .withBackupManagementType(BackupManagementType.AZURE_SQL)
                        .withRegistrationStatus("qhl")
                        .withHealthStatus("riiiojnalghfkv")
                        .withProtectableObjectType("sexso"))
                    .withEtag("el")));
        model = BinaryData.fromObject(model).toObject(ProtectionContainerResourceList.class);
        Assertions.assertEquals("v", model.nextLink());
        Assertions.assertEquals("ytisibir", model.value().get(0).location());
        Assertions.assertEquals("ikpzimejza", model.value().get(0).tags().get("lfzxiavrmbzonoki"));
        Assertions.assertEquals("bqwrvtldgm", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_STORAGE,
            model.value().get(0).properties().backupManagementType());
        Assertions.assertEquals("mpipaslthaqfxs", model.value().get(0).properties().registrationStatus());
        Assertions.assertEquals("wutwbdsre", model.value().get(0).properties().healthStatus());
        Assertions.assertEquals("drhneuyow", model.value().get(0).properties().protectableObjectType());
        Assertions.assertEquals("d", model.value().get(0).etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
