// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.BackupEngineBaseResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupEngineBase;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupEngineExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupEngineBaseResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupEngineBaseResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"backupEngineType\":\"BackupEngineBase\",\"friendlyName\":\"kfgohdneue\",\"backupManagementType\":\"DPM\",\"registrationStatus\":\"sdyhtozfikdowwq\",\"backupEngineState\":\"v\",\"healthStatus\":\"xclvit\",\"canReRegister\":true,\"backupEngineId\":\"o\",\"dpmVersion\":\"sg\",\"azureBackupAgentVersion\":\"hcohfwdsjnk\",\"isAzureBackupAgentUpgradeAvailable\":true,\"isDpmUpgradeAvailable\":true,\"extendedInfo\":{\"databaseName\":\"swacffgdkzz\",\"protectedItemsCount\":1258640156,\"protectedServersCount\":2137392775,\"diskCount\":1769895546,\"usedDiskSpace\":70.37932285828938,\"availableDiskSpace\":37.34096330096411,\"refreshedAt\":\"2021-02-08T12:34:09Z\",\"azureProtectedInstances\":1681889122}},\"eTag\":\"uflrwd\",\"location\":\"hdlxyjrxsagafcn\",\"tags\":{\"vq\":\"wqapnedgfbcvk\"},\"id\":\"pkeqdcvdrhvoo\",\"name\":\"sotbob\",\"type\":\"dopcjwvnh\"}")
            .toObject(BackupEngineBaseResourceInner.class);
        Assertions.assertEquals("hdlxyjrxsagafcn", model.location());
        Assertions.assertEquals("wqapnedgfbcvk", model.tags().get("vq"));
        Assertions.assertEquals("kfgohdneue", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.DPM, model.properties().backupManagementType());
        Assertions.assertEquals("sdyhtozfikdowwq", model.properties().registrationStatus());
        Assertions.assertEquals("v", model.properties().backupEngineState());
        Assertions.assertEquals("xclvit", model.properties().healthStatus());
        Assertions.assertEquals(true, model.properties().canReRegister());
        Assertions.assertEquals("o", model.properties().backupEngineId());
        Assertions.assertEquals("sg", model.properties().dpmVersion());
        Assertions.assertEquals("hcohfwdsjnk", model.properties().azureBackupAgentVersion());
        Assertions.assertEquals(true, model.properties().isAzureBackupAgentUpgradeAvailable());
        Assertions.assertEquals(true, model.properties().isDpmUpgradeAvailable());
        Assertions.assertEquals("swacffgdkzz", model.properties().extendedInfo().databaseName());
        Assertions.assertEquals(1258640156, model.properties().extendedInfo().protectedItemsCount());
        Assertions.assertEquals(2137392775, model.properties().extendedInfo().protectedServersCount());
        Assertions.assertEquals(1769895546, model.properties().extendedInfo().diskCount());
        Assertions.assertEquals(70.37932285828938D, model.properties().extendedInfo().usedDiskSpace());
        Assertions.assertEquals(37.34096330096411D, model.properties().extendedInfo().availableDiskSpace());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T12:34:09Z"),
            model.properties().extendedInfo().refreshedAt());
        Assertions.assertEquals(1681889122, model.properties().extendedInfo().azureProtectedInstances());
        Assertions.assertEquals("uflrwd", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupEngineBaseResourceInner model = new BackupEngineBaseResourceInner().withLocation("hdlxyjrxsagafcn")
            .withTags(mapOf("vq", "wqapnedgfbcvk"))
            .withProperties(new BackupEngineBase().withFriendlyName("kfgohdneue")
                .withBackupManagementType(BackupManagementType.DPM)
                .withRegistrationStatus("sdyhtozfikdowwq")
                .withBackupEngineState("v")
                .withHealthStatus("xclvit")
                .withCanReRegister(true)
                .withBackupEngineId("o")
                .withDpmVersion("sg")
                .withAzureBackupAgentVersion("hcohfwdsjnk")
                .withIsAzureBackupAgentUpgradeAvailable(true)
                .withIsDpmUpgradeAvailable(true)
                .withExtendedInfo(new BackupEngineExtendedInfo().withDatabaseName("swacffgdkzz")
                    .withProtectedItemsCount(1258640156)
                    .withProtectedServersCount(2137392775)
                    .withDiskCount(1769895546)
                    .withUsedDiskSpace(70.37932285828938D)
                    .withAvailableDiskSpace(37.34096330096411D)
                    .withRefreshedAt(OffsetDateTime.parse("2021-02-08T12:34:09Z"))
                    .withAzureProtectedInstances(1681889122)))
            .withEtag("uflrwd");
        model = BinaryData.fromObject(model).toObject(BackupEngineBaseResourceInner.class);
        Assertions.assertEquals("hdlxyjrxsagafcn", model.location());
        Assertions.assertEquals("wqapnedgfbcvk", model.tags().get("vq"));
        Assertions.assertEquals("kfgohdneue", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.DPM, model.properties().backupManagementType());
        Assertions.assertEquals("sdyhtozfikdowwq", model.properties().registrationStatus());
        Assertions.assertEquals("v", model.properties().backupEngineState());
        Assertions.assertEquals("xclvit", model.properties().healthStatus());
        Assertions.assertEquals(true, model.properties().canReRegister());
        Assertions.assertEquals("o", model.properties().backupEngineId());
        Assertions.assertEquals("sg", model.properties().dpmVersion());
        Assertions.assertEquals("hcohfwdsjnk", model.properties().azureBackupAgentVersion());
        Assertions.assertEquals(true, model.properties().isAzureBackupAgentUpgradeAvailable());
        Assertions.assertEquals(true, model.properties().isDpmUpgradeAvailable());
        Assertions.assertEquals("swacffgdkzz", model.properties().extendedInfo().databaseName());
        Assertions.assertEquals(1258640156, model.properties().extendedInfo().protectedItemsCount());
        Assertions.assertEquals(2137392775, model.properties().extendedInfo().protectedServersCount());
        Assertions.assertEquals(1769895546, model.properties().extendedInfo().diskCount());
        Assertions.assertEquals(70.37932285828938D, model.properties().extendedInfo().usedDiskSpace());
        Assertions.assertEquals(37.34096330096411D, model.properties().extendedInfo().availableDiskSpace());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T12:34:09Z"),
            model.properties().extendedInfo().refreshedAt());
        Assertions.assertEquals(1681889122, model.properties().extendedInfo().azureProtectedInstances());
        Assertions.assertEquals("uflrwd", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
