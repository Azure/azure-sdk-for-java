// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.BackupEngineBaseResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupEngineBase;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupEngineExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupEngineBaseResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupEngineBaseResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"backupEngineType\":\"BackupEngineBase\",\"friendlyName\":\"iplbpodxunkbebxm\",\"backupManagementType\":\"MAB\",\"registrationStatus\":\"ntwlrbqtkoie\",\"backupEngineState\":\"eotg\",\"healthStatus\":\"l\",\"canReRegister\":true,\"backupEngineId\":\"wlauwzizxbmpg\",\"dpmVersion\":\"efuzmuvpbttd\",\"azureBackupAgentVersion\":\"orppxebmnzbtb\",\"isAzureBackupAgentUpgradeAvailable\":false,\"isDpmUpgradeAvailable\":false,\"extendedInfo\":{\"databaseName\":\"gohdneuelfphsd\",\"protectedItemsCount\":58245942,\"protectedServersCount\":1295837012,\"diskCount\":743689634,\"usedDiskSpace\":94.95778912443798,\"availableDiskSpace\":11.493071228396957,\"refreshedAt\":\"2021-03-30T20:31:18Z\",\"azureProtectedInstances\":1098606122}},\"eTag\":\"xclvit\",\"location\":\"hqzonosggbhcoh\",\"tags\":{\"utiiswacf\":\"sjnkal\",\"ewkfvhqcrai\":\"gdkz\"},\"id\":\"vpnpp\",\"name\":\"uflrwd\",\"type\":\"hdlxyjrxsagafcn\"}")
                .toObject(BackupEngineBaseResourceInner.class);
        Assertions.assertEquals("hqzonosggbhcoh", model.location());
        Assertions.assertEquals("sjnkal", model.tags().get("utiiswacf"));
        Assertions.assertEquals("iplbpodxunkbebxm", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.properties().backupManagementType());
        Assertions.assertEquals("ntwlrbqtkoie", model.properties().registrationStatus());
        Assertions.assertEquals("eotg", model.properties().backupEngineState());
        Assertions.assertEquals("l", model.properties().healthStatus());
        Assertions.assertEquals(true, model.properties().canReRegister());
        Assertions.assertEquals("wlauwzizxbmpg", model.properties().backupEngineId());
        Assertions.assertEquals("efuzmuvpbttd", model.properties().dpmVersion());
        Assertions.assertEquals("orppxebmnzbtb", model.properties().azureBackupAgentVersion());
        Assertions.assertEquals(false, model.properties().isAzureBackupAgentUpgradeAvailable());
        Assertions.assertEquals(false, model.properties().isDpmUpgradeAvailable());
        Assertions.assertEquals("gohdneuelfphsd", model.properties().extendedInfo().databaseName());
        Assertions.assertEquals(58245942, model.properties().extendedInfo().protectedItemsCount());
        Assertions.assertEquals(1295837012, model.properties().extendedInfo().protectedServersCount());
        Assertions.assertEquals(743689634, model.properties().extendedInfo().diskCount());
        Assertions.assertEquals(94.95778912443798D, model.properties().extendedInfo().usedDiskSpace());
        Assertions.assertEquals(11.493071228396957D, model.properties().extendedInfo().availableDiskSpace());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-30T20:31:18Z"), model.properties().extendedInfo().refreshedAt());
        Assertions.assertEquals(1098606122, model.properties().extendedInfo().azureProtectedInstances());
        Assertions.assertEquals("xclvit", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupEngineBaseResourceInner model =
            new BackupEngineBaseResourceInner()
                .withLocation("hqzonosggbhcoh")
                .withTags(mapOf("utiiswacf", "sjnkal", "ewkfvhqcrai", "gdkz"))
                .withProperties(
                    new BackupEngineBase()
                        .withFriendlyName("iplbpodxunkbebxm")
                        .withBackupManagementType(BackupManagementType.MAB)
                        .withRegistrationStatus("ntwlrbqtkoie")
                        .withBackupEngineState("eotg")
                        .withHealthStatus("l")
                        .withCanReRegister(true)
                        .withBackupEngineId("wlauwzizxbmpg")
                        .withDpmVersion("efuzmuvpbttd")
                        .withAzureBackupAgentVersion("orppxebmnzbtb")
                        .withIsAzureBackupAgentUpgradeAvailable(false)
                        .withIsDpmUpgradeAvailable(false)
                        .withExtendedInfo(
                            new BackupEngineExtendedInfo()
                                .withDatabaseName("gohdneuelfphsd")
                                .withProtectedItemsCount(58245942)
                                .withProtectedServersCount(1295837012)
                                .withDiskCount(743689634)
                                .withUsedDiskSpace(94.95778912443798D)
                                .withAvailableDiskSpace(11.493071228396957D)
                                .withRefreshedAt(OffsetDateTime.parse("2021-03-30T20:31:18Z"))
                                .withAzureProtectedInstances(1098606122)))
                .withEtag("xclvit");
        model = BinaryData.fromObject(model).toObject(BackupEngineBaseResourceInner.class);
        Assertions.assertEquals("hqzonosggbhcoh", model.location());
        Assertions.assertEquals("sjnkal", model.tags().get("utiiswacf"));
        Assertions.assertEquals("iplbpodxunkbebxm", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.properties().backupManagementType());
        Assertions.assertEquals("ntwlrbqtkoie", model.properties().registrationStatus());
        Assertions.assertEquals("eotg", model.properties().backupEngineState());
        Assertions.assertEquals("l", model.properties().healthStatus());
        Assertions.assertEquals(true, model.properties().canReRegister());
        Assertions.assertEquals("wlauwzizxbmpg", model.properties().backupEngineId());
        Assertions.assertEquals("efuzmuvpbttd", model.properties().dpmVersion());
        Assertions.assertEquals("orppxebmnzbtb", model.properties().azureBackupAgentVersion());
        Assertions.assertEquals(false, model.properties().isAzureBackupAgentUpgradeAvailable());
        Assertions.assertEquals(false, model.properties().isDpmUpgradeAvailable());
        Assertions.assertEquals("gohdneuelfphsd", model.properties().extendedInfo().databaseName());
        Assertions.assertEquals(58245942, model.properties().extendedInfo().protectedItemsCount());
        Assertions.assertEquals(1295837012, model.properties().extendedInfo().protectedServersCount());
        Assertions.assertEquals(743689634, model.properties().extendedInfo().diskCount());
        Assertions.assertEquals(94.95778912443798D, model.properties().extendedInfo().usedDiskSpace());
        Assertions.assertEquals(11.493071228396957D, model.properties().extendedInfo().availableDiskSpace());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-30T20:31:18Z"), model.properties().extendedInfo().refreshedAt());
        Assertions.assertEquals(1098606122, model.properties().extendedInfo().azureProtectedInstances());
        Assertions.assertEquals("xclvit", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
