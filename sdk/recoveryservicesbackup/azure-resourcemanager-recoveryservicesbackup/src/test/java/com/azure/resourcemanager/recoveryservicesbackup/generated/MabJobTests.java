// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabServerType;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MabJobTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MabJob model = BinaryData.fromString(
            "{\"jobType\":\"MabJob\",\"duration\":\"PT157H59M25S\",\"actionsInfo\":[\"Cancellable\",\"Invalid\",\"Invalid\",\"Retriable\"],\"mabServerName\":\"ev\",\"mabServerType\":\"IaasVMServiceContainer\",\"workloadType\":\"Client\",\"errorDetails\":[{\"errorString\":\"rouuxvnsasbcry\",\"recommendations\":[\"izrxklob\"]},{\"errorString\":\"nazpmk\",\"recommendations\":[\"vevfxz\"]},{\"errorString\":\"jhbzxliohrdddtf\",\"recommendations\":[\"ba\",\"pcbbnzqcykna\",\"qofyuicdhzbdy\",\"wwgbdv\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"hmwffplfmuv\",\"startTime\":\"2021-03-20T18:52:11Z\",\"endTime\":\"2021-10-24T12:17:10Z\",\"duration\":\"PT58H47M20S\",\"status\":\"vwe\"}],\"propertyBag\":{\"ukphaimmoiroq\":\"oy\"},\"dynamicErrorMessage\":\"shbraga\"},\"entityFriendlyName\":\"yrmfsvbpav\",\"backupManagementType\":\"AzureStorage\",\"operation\":\"ppdbwnupgahxkum\",\"status\":\"jcaacfdmmcpugm\",\"startTime\":\"2021-06-17T13:12:39Z\",\"endTime\":\"2021-09-30T04:22:30Z\",\"activityId\":\"u\"}")
            .toObject(MabJob.class);
        Assertions.assertEquals("yrmfsvbpav", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_STORAGE, model.backupManagementType());
        Assertions.assertEquals("ppdbwnupgahxkum", model.operation());
        Assertions.assertEquals("jcaacfdmmcpugm", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T13:12:39Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-30T04:22:30Z"), model.endTime());
        Assertions.assertEquals("u", model.activityId());
        Assertions.assertEquals(Duration.parse("PT157H59M25S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.CANCELLABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("ev", model.mabServerName());
        Assertions.assertEquals(MabServerType.IAAS_VMSERVICE_CONTAINER, model.mabServerType());
        Assertions.assertEquals(WorkloadType.CLIENT, model.workloadType());
        Assertions.assertEquals("hmwffplfmuv", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T18:52:11Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-24T12:17:10Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT58H47M20S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("vwe", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("oy", model.extendedInfo().propertyBag().get("ukphaimmoiroq"));
        Assertions.assertEquals("shbraga", model.extendedInfo().dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MabJob model = new MabJob().withEntityFriendlyName("yrmfsvbpav")
            .withBackupManagementType(BackupManagementType.AZURE_STORAGE)
            .withOperation("ppdbwnupgahxkum")
            .withStatus("jcaacfdmmcpugm")
            .withStartTime(OffsetDateTime.parse("2021-06-17T13:12:39Z"))
            .withEndTime(OffsetDateTime.parse("2021-09-30T04:22:30Z"))
            .withActivityId("u")
            .withDuration(Duration.parse("PT157H59M25S"))
            .withActionsInfo(Arrays.asList(JobSupportedAction.CANCELLABLE, JobSupportedAction.INVALID,
                JobSupportedAction.INVALID, JobSupportedAction.RETRIABLE))
            .withMabServerName("ev")
            .withMabServerType(MabServerType.IAAS_VMSERVICE_CONTAINER)
            .withWorkloadType(WorkloadType.CLIENT)
            .withErrorDetails(Arrays.asList(new MabErrorInfo(), new MabErrorInfo(), new MabErrorInfo()))
            .withExtendedInfo(new MabJobExtendedInfo()
                .withTasksList(Arrays.asList(new MabJobTaskDetails().withTaskId("hmwffplfmuv")
                    .withStartTime(OffsetDateTime.parse("2021-03-20T18:52:11Z"))
                    .withEndTime(OffsetDateTime.parse("2021-10-24T12:17:10Z"))
                    .withDuration(Duration.parse("PT58H47M20S"))
                    .withStatus("vwe")))
                .withPropertyBag(mapOf("ukphaimmoiroq", "oy"))
                .withDynamicErrorMessage("shbraga"));
        model = BinaryData.fromObject(model).toObject(MabJob.class);
        Assertions.assertEquals("yrmfsvbpav", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_STORAGE, model.backupManagementType());
        Assertions.assertEquals("ppdbwnupgahxkum", model.operation());
        Assertions.assertEquals("jcaacfdmmcpugm", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T13:12:39Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-30T04:22:30Z"), model.endTime());
        Assertions.assertEquals("u", model.activityId());
        Assertions.assertEquals(Duration.parse("PT157H59M25S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.CANCELLABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("ev", model.mabServerName());
        Assertions.assertEquals(MabServerType.IAAS_VMSERVICE_CONTAINER, model.mabServerType());
        Assertions.assertEquals(WorkloadType.CLIENT, model.workloadType());
        Assertions.assertEquals("hmwffplfmuv", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T18:52:11Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-24T12:17:10Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT58H47M20S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("vwe", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("oy", model.extendedInfo().propertyBag().get("ukphaimmoiroq"));
        Assertions.assertEquals("shbraga", model.extendedInfo().dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
