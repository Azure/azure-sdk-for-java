// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabServerType;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MabJobTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MabJob model = BinaryData.fromString(
            "{\"jobType\":\"MabJob\",\"duration\":\"PT31H21M14S\",\"actionsInfo\":[\"Retriable\"],\"mabServerName\":\"mmoiroqboshbra\",\"mabServerType\":\"SQLAGWorkLoadContainer\",\"workloadType\":\"Client\",\"errorDetails\":[{\"errorString\":\"svbpavbopfppdbwn\",\"recommendations\":[\"ahxku\",\"asjcaacfdmmcpu\",\"mehqepvufh\",\"zeh\"]},{\"errorString\":\"hoqhnl\",\"recommendations\":[\"bldxeaclgscho\",\"imkrsrrmouc\",\"ofldpuviyfcaa\",\"eolhbhlvbmx\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"xtkcudfbsfar\",\"startTime\":\"2021-06-06T17:38:54Z\",\"endTime\":\"2021-04-06T00:55:24Z\",\"duration\":\"PT194H13S\",\"status\":\"xnq\"},{\"taskId\":\"wgfstmhqykizm\",\"startTime\":\"2021-02-16T03:38:42Z\",\"endTime\":\"2020-12-22T10:08:06Z\",\"duration\":\"PT113H39M6S\",\"status\":\"luqvoxmycjimryv\"},{\"taskId\":\"cwwp\",\"startTime\":\"2021-10-27T09:31:22Z\",\"endTime\":\"2021-01-20T21:01:08Z\",\"duration\":\"PT70H10S\",\"status\":\"dsxwefoh\"},{\"taskId\":\"bvopwndyqle\",\"startTime\":\"2021-03-08T13:30:31Z\",\"endTime\":\"2021-11-12T21:46:28Z\",\"duration\":\"PT181H48M10S\",\"status\":\"hlowkx\"}],\"propertyBag\":{\"fjmzsyzfho\":\"br\",\"pjrtws\":\"lhikcyychunsj\",\"uic\":\"hv\",\"ubhvj\":\"hvtrrmhwrbfdpyf\"},\"dynamicErrorMessage\":\"r\"},\"entityFriendlyName\":\"uyzlw\",\"backupManagementType\":\"MAB\",\"operation\":\"mhoocl\",\"status\":\"n\",\"startTime\":\"2021-11-26T19:05Z\",\"endTime\":\"2021-08-15T12:03:46Z\",\"activityId\":\"zjkmmykyujxs\"}")
            .toObject(MabJob.class);
        Assertions.assertEquals("uyzlw", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.backupManagementType());
        Assertions.assertEquals("mhoocl", model.operation());
        Assertions.assertEquals("n", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T19:05Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T12:03:46Z"), model.endTime());
        Assertions.assertEquals("zjkmmykyujxs", model.activityId());
        Assertions.assertEquals(Duration.parse("PT31H21M14S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.RETRIABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("mmoiroqboshbra", model.mabServerName());
        Assertions.assertEquals(MabServerType.SQLAGWORK_LOAD_CONTAINER, model.mabServerType());
        Assertions.assertEquals(WorkloadType.CLIENT, model.workloadType());
        Assertions.assertEquals("xtkcudfbsfar", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-06T17:38:54Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T00:55:24Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT194H13S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("xnq", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("br", model.extendedInfo().propertyBag().get("fjmzsyzfho"));
        Assertions.assertEquals("r", model.extendedInfo().dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MabJob model = new MabJob().withEntityFriendlyName("uyzlw")
            .withBackupManagementType(BackupManagementType.MAB)
            .withOperation("mhoocl")
            .withStatus("n")
            .withStartTime(OffsetDateTime.parse("2021-11-26T19:05Z"))
            .withEndTime(OffsetDateTime.parse("2021-08-15T12:03:46Z"))
            .withActivityId("zjkmmykyujxs")
            .withDuration(Duration.parse("PT31H21M14S"))
            .withActionsInfo(Arrays.asList(JobSupportedAction.RETRIABLE))
            .withMabServerName("mmoiroqboshbra")
            .withMabServerType(MabServerType.SQLAGWORK_LOAD_CONTAINER)
            .withWorkloadType(WorkloadType.CLIENT)
            .withErrorDetails(Arrays.asList(new MabErrorInfo(), new MabErrorInfo()))
            .withExtendedInfo(new MabJobExtendedInfo()
                .withTasksList(Arrays.asList(
                    new MabJobTaskDetails().withTaskId("xtkcudfbsfar")
                        .withStartTime(OffsetDateTime.parse("2021-06-06T17:38:54Z"))
                        .withEndTime(OffsetDateTime.parse("2021-04-06T00:55:24Z"))
                        .withDuration(Duration.parse("PT194H13S"))
                        .withStatus("xnq"),
                    new MabJobTaskDetails().withTaskId("wgfstmhqykizm")
                        .withStartTime(OffsetDateTime.parse("2021-02-16T03:38:42Z"))
                        .withEndTime(OffsetDateTime.parse("2020-12-22T10:08:06Z"))
                        .withDuration(Duration.parse("PT113H39M6S"))
                        .withStatus("luqvoxmycjimryv"),
                    new MabJobTaskDetails().withTaskId("cwwp")
                        .withStartTime(OffsetDateTime.parse("2021-10-27T09:31:22Z"))
                        .withEndTime(OffsetDateTime.parse("2021-01-20T21:01:08Z"))
                        .withDuration(Duration.parse("PT70H10S"))
                        .withStatus("dsxwefoh"),
                    new MabJobTaskDetails().withTaskId("bvopwndyqle")
                        .withStartTime(OffsetDateTime.parse("2021-03-08T13:30:31Z"))
                        .withEndTime(OffsetDateTime.parse("2021-11-12T21:46:28Z"))
                        .withDuration(Duration.parse("PT181H48M10S"))
                        .withStatus("hlowkx")))
                .withPropertyBag(
                    mapOf("fjmzsyzfho", "br", "pjrtws", "lhikcyychunsj", "uic", "hv", "ubhvj", "hvtrrmhwrbfdpyf"))
                .withDynamicErrorMessage("r"));
        model = BinaryData.fromObject(model).toObject(MabJob.class);
        Assertions.assertEquals("uyzlw", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.backupManagementType());
        Assertions.assertEquals("mhoocl", model.operation());
        Assertions.assertEquals("n", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T19:05Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T12:03:46Z"), model.endTime());
        Assertions.assertEquals("zjkmmykyujxs", model.activityId());
        Assertions.assertEquals(Duration.parse("PT31H21M14S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.RETRIABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("mmoiroqboshbra", model.mabServerName());
        Assertions.assertEquals(MabServerType.SQLAGWORK_LOAD_CONTAINER, model.mabServerType());
        Assertions.assertEquals(WorkloadType.CLIENT, model.workloadType());
        Assertions.assertEquals("xtkcudfbsfar", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-06T17:38:54Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T00:55:24Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT194H13S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("xnq", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("br", model.extendedInfo().propertyBag().get("fjmzsyzfho"));
        Assertions.assertEquals("r", model.extendedInfo().dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
