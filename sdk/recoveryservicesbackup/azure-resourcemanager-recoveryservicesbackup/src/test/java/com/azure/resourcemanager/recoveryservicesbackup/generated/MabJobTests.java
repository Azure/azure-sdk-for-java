// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabServerType;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MabJobTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MabJob model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"MabJob\",\"duration\":\"PT111H33M7S\",\"actionsInfo\":[\"Retriable\",\"Retriable\",\"Retriable\"],\"mabServerName\":\"gsnnf\",\"mabServerType\":\"Invalid\",\"workloadType\":\"FileFolder\",\"errorDetails\":[{\"errorString\":\"oc\",\"recommendations\":[\"fjgtixrjvzuy\",\"urmlmuo\"]},{\"errorString\":\"lbau\",\"recommendations\":[\"p\",\"ons\",\"onwpnga\"]},{\"errorString\":\"n\",\"recommendations\":[\"jawrtmjfjmyc\",\"xlzhcoxovnekh\"]},{\"errorString\":\"lusfnrdtjxtxrdcq\",\"recommendations\":[\"idttgepus\",\"vyjtcvu\",\"kasizie\",\"fuughtuqfec\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"tuhxuicb\",\"startTime\":\"2021-01-07T03:05:08Z\",\"endTime\":\"2021-02-07T12:33:22Z\",\"duration\":\"PT58H56M\",\"status\":\"jlxuz\"},{\"taskId\":\"wpusxjbaqehg\",\"startTime\":\"2021-10-27T15:34:23Z\",\"endTime\":\"2021-03-02T08:23:47Z\",\"duration\":\"PT23H19M33S\",\"status\":\"tu\"}],\"propertyBag\":{\"cnwfepbnwgfmxjg\":\"gebx\",\"jbgdlfgtdysnaquf\":\"g\",\"zjrwdkqze\":\"qbctqha\",\"fza\":\"yjleziunjx\"},\"dynamicErrorMessage\":\"kwcegyamlbn\"},\"entityFriendlyName\":\"qa\",\"backupManagementType\":\"DefaultBackup\",\"operation\":\"pilguooqjag\",\"status\":\"itgueiookjbs\",\"startTime\":\"2021-07-06T01:23:43Z\",\"endTime\":\"2021-10-29T22:51:49Z\",\"activityId\":\"pdelqa\"}")
                .toObject(MabJob.class);
        Assertions.assertEquals("qa", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.DEFAULT_BACKUP, model.backupManagementType());
        Assertions.assertEquals("pilguooqjag", model.operation());
        Assertions.assertEquals("itgueiookjbs", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T01:23:43Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T22:51:49Z"), model.endTime());
        Assertions.assertEquals("pdelqa", model.activityId());
        Assertions.assertEquals(Duration.parse("PT111H33M7S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.RETRIABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("gsnnf", model.mabServerName());
        Assertions.assertEquals(MabServerType.INVALID, model.mabServerType());
        Assertions.assertEquals(WorkloadType.FILE_FOLDER, model.workloadType());
        Assertions.assertEquals("tuhxuicb", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-07T03:05:08Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-07T12:33:22Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT58H56M"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("jlxuz", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("gebx", model.extendedInfo().propertyBag().get("cnwfepbnwgfmxjg"));
        Assertions.assertEquals("kwcegyamlbn", model.extendedInfo().dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MabJob model =
            new MabJob()
                .withEntityFriendlyName("qa")
                .withBackupManagementType(BackupManagementType.DEFAULT_BACKUP)
                .withOperation("pilguooqjag")
                .withStatus("itgueiookjbs")
                .withStartTime(OffsetDateTime.parse("2021-07-06T01:23:43Z"))
                .withEndTime(OffsetDateTime.parse("2021-10-29T22:51:49Z"))
                .withActivityId("pdelqa")
                .withDuration(Duration.parse("PT111H33M7S"))
                .withActionsInfo(
                    Arrays
                        .asList(
                            JobSupportedAction.RETRIABLE, JobSupportedAction.RETRIABLE, JobSupportedAction.RETRIABLE))
                .withMabServerName("gsnnf")
                .withMabServerType(MabServerType.INVALID)
                .withWorkloadType(WorkloadType.FILE_FOLDER)
                .withErrorDetails(
                    Arrays.asList(new MabErrorInfo(), new MabErrorInfo(), new MabErrorInfo(), new MabErrorInfo()))
                .withExtendedInfo(
                    new MabJobExtendedInfo()
                        .withTasksList(
                            Arrays
                                .asList(
                                    new MabJobTaskDetails()
                                        .withTaskId("tuhxuicb")
                                        .withStartTime(OffsetDateTime.parse("2021-01-07T03:05:08Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-02-07T12:33:22Z"))
                                        .withDuration(Duration.parse("PT58H56M"))
                                        .withStatus("jlxuz"),
                                    new MabJobTaskDetails()
                                        .withTaskId("wpusxjbaqehg")
                                        .withStartTime(OffsetDateTime.parse("2021-10-27T15:34:23Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-03-02T08:23:47Z"))
                                        .withDuration(Duration.parse("PT23H19M33S"))
                                        .withStatus("tu")))
                        .withPropertyBag(
                            mapOf(
                                "cnwfepbnwgfmxjg",
                                "gebx",
                                "jbgdlfgtdysnaquf",
                                "g",
                                "zjrwdkqze",
                                "qbctqha",
                                "fza",
                                "yjleziunjx"))
                        .withDynamicErrorMessage("kwcegyamlbn"));
        model = BinaryData.fromObject(model).toObject(MabJob.class);
        Assertions.assertEquals("qa", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.DEFAULT_BACKUP, model.backupManagementType());
        Assertions.assertEquals("pilguooqjag", model.operation());
        Assertions.assertEquals("itgueiookjbs", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T01:23:43Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T22:51:49Z"), model.endTime());
        Assertions.assertEquals("pdelqa", model.activityId());
        Assertions.assertEquals(Duration.parse("PT111H33M7S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.RETRIABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("gsnnf", model.mabServerName());
        Assertions.assertEquals(MabServerType.INVALID, model.mabServerType());
        Assertions.assertEquals(WorkloadType.FILE_FOLDER, model.workloadType());
        Assertions.assertEquals("tuhxuicb", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-07T03:05:08Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-07T12:33:22Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT58H56M"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("jlxuz", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("gebx", model.extendedInfo().propertyBag().get("cnwfepbnwgfmxjg"));
        Assertions.assertEquals("kwcegyamlbn", model.extendedInfo().dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
