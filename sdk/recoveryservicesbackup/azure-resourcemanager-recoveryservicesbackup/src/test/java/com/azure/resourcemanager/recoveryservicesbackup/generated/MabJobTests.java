// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.MabServerType;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MabJobTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MabJob model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"MabJob\",\"duration\":\"PT217H52M33S\",\"actionsInfo\":[\"Invalid\"],\"mabServerName\":\"rjvzuyt\",\"mabServerType\":\"DPMContainer\",\"workloadType\":\"SQLDataBase\",\"errorDetails\":[{\"errorString\":\"olbauirop\",\"recommendations\":[\"szonwpngajinn\",\"xjawrt\",\"jfjmyccxlzh\"]},{\"errorString\":\"x\",\"recommendations\":[\"ekhenl\",\"sfnrdtjxt\",\"r\",\"cq\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"ttgepuslvyjtcv\",\"startTime\":\"2021-03-17T17:29:52Z\",\"endTime\":\"2021-11-30T03:54:44Z\",\"duration\":\"PT196H2M24S\",\"status\":\"esfuught\"},{\"taskId\":\"fecjxeygtuhx\",\"startTime\":\"2021-01-12T18:06:14Z\",\"endTime\":\"2021-07-12T08:32:17Z\",\"duration\":\"PT99H5M8S\",\"status\":\"rswnjlxuzrhwp\"},{\"taskId\":\"xjbaqehgpdohzjq\",\"startTime\":\"2021-01-23T00:13:53Z\",\"endTime\":\"2021-09-29T08:51:04Z\",\"duration\":\"PT153H41M48S\",\"status\":\"bxncnwfepbnw\"}],\"propertyBag\":{\"g\":\"xjg\"},\"dynamicErrorMessage\":\"bgdlfgtdysna\"},\"entityFriendlyName\":\"flq\",\"backupManagementType\":\"AzureIaasVM\",\"operation\":\"hamzjrwdkqze\",\"status\":\"jleziunjx\",\"startTime\":\"2021-07-29T05:37:17Z\",\"endTime\":\"2021-11-25T20:40:46Z\",\"activityId\":\"kwcegyamlbn\"}")
                .toObject(MabJob.class);
        Assertions.assertEquals("flq", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_IAAS_VM, model.backupManagementType());
        Assertions.assertEquals("hamzjrwdkqze", model.operation());
        Assertions.assertEquals("jleziunjx", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-29T05:37:17Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T20:40:46Z"), model.endTime());
        Assertions.assertEquals("kwcegyamlbn", model.activityId());
        Assertions.assertEquals(Duration.parse("PT217H52M33S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("rjvzuyt", model.mabServerName());
        Assertions.assertEquals(MabServerType.DPMCONTAINER, model.mabServerType());
        Assertions.assertEquals(WorkloadType.SQLDATA_BASE, model.workloadType());
        Assertions.assertEquals("ttgepuslvyjtcv", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-17T17:29:52Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-30T03:54:44Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT196H2M24S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("esfuught", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("xjg", model.extendedInfo().propertyBag().get("g"));
        Assertions.assertEquals("bgdlfgtdysna", model.extendedInfo().dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MabJob model =
            new MabJob()
                .withEntityFriendlyName("flq")
                .withBackupManagementType(BackupManagementType.AZURE_IAAS_VM)
                .withOperation("hamzjrwdkqze")
                .withStatus("jleziunjx")
                .withStartTime(OffsetDateTime.parse("2021-07-29T05:37:17Z"))
                .withEndTime(OffsetDateTime.parse("2021-11-25T20:40:46Z"))
                .withActivityId("kwcegyamlbn")
                .withDuration(Duration.parse("PT217H52M33S"))
                .withActionsInfo(Arrays.asList(JobSupportedAction.INVALID))
                .withMabServerName("rjvzuyt")
                .withMabServerType(MabServerType.DPMCONTAINER)
                .withWorkloadType(WorkloadType.SQLDATA_BASE)
                .withErrorDetails(Arrays.asList(new MabErrorInfo(), new MabErrorInfo()))
                .withExtendedInfo(
                    new MabJobExtendedInfo()
                        .withTasksList(
                            Arrays
                                .asList(
                                    new MabJobTaskDetails()
                                        .withTaskId("ttgepuslvyjtcv")
                                        .withStartTime(OffsetDateTime.parse("2021-03-17T17:29:52Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-11-30T03:54:44Z"))
                                        .withDuration(Duration.parse("PT196H2M24S"))
                                        .withStatus("esfuught"),
                                    new MabJobTaskDetails()
                                        .withTaskId("fecjxeygtuhx")
                                        .withStartTime(OffsetDateTime.parse("2021-01-12T18:06:14Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-07-12T08:32:17Z"))
                                        .withDuration(Duration.parse("PT99H5M8S"))
                                        .withStatus("rswnjlxuzrhwp"),
                                    new MabJobTaskDetails()
                                        .withTaskId("xjbaqehgpdohzjq")
                                        .withStartTime(OffsetDateTime.parse("2021-01-23T00:13:53Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-09-29T08:51:04Z"))
                                        .withDuration(Duration.parse("PT153H41M48S"))
                                        .withStatus("bxncnwfepbnw")))
                        .withPropertyBag(mapOf("g", "xjg"))
                        .withDynamicErrorMessage("bgdlfgtdysna"));
        model = BinaryData.fromObject(model).toObject(MabJob.class);
        Assertions.assertEquals("flq", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_IAAS_VM, model.backupManagementType());
        Assertions.assertEquals("hamzjrwdkqze", model.operation());
        Assertions.assertEquals("jleziunjx", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-29T05:37:17Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T20:40:46Z"), model.endTime());
        Assertions.assertEquals("kwcegyamlbn", model.activityId());
        Assertions.assertEquals(Duration.parse("PT217H52M33S"), model.duration());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("rjvzuyt", model.mabServerName());
        Assertions.assertEquals(MabServerType.DPMCONTAINER, model.mabServerType());
        Assertions.assertEquals(WorkloadType.SQLDATA_BASE, model.workloadType());
        Assertions.assertEquals("ttgepuslvyjtcv", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-17T17:29:52Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-30T03:54:44Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT196H2M24S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("esfuught", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("xjg", model.extendedInfo().propertyBag().get("g"));
        Assertions.assertEquals("bgdlfgtdysna", model.extendedInfo().dynamicErrorMessage());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
