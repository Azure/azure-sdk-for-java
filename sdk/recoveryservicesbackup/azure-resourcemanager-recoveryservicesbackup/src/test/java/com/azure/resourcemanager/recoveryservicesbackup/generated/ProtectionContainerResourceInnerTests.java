// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectionContainerResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionContainer;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectionContainerResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionContainerResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"containerType\":\"ProtectionContainer\",\"friendlyName\":\"d\",\"backupManagementType\":\"AzureSql\",\"registrationStatus\":\"y\",\"healthStatus\":\"ogjltdtbnnhad\",\"protectableObjectType\":\"crkvcikhnv\"},\"eTag\":\"mqg\",\"location\":\"qqu\",\"tags\":{\"uipiccjzk\":\"kywggxkallatmel\"},\"id\":\"ivgvvcna\",\"name\":\"rhyrnxxmueed\",\"type\":\"drd\"}")
                .toObject(ProtectionContainerResourceInner.class);
        Assertions.assertEquals("qqu", model.location());
        Assertions.assertEquals("kywggxkallatmel", model.tags().get("uipiccjzk"));
        Assertions.assertEquals("d", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_SQL, model.properties().backupManagementType());
        Assertions.assertEquals("y", model.properties().registrationStatus());
        Assertions.assertEquals("ogjltdtbnnhad", model.properties().healthStatus());
        Assertions.assertEquals("crkvcikhnv", model.properties().protectableObjectType());
        Assertions.assertEquals("mqg", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionContainerResourceInner model =
            new ProtectionContainerResourceInner()
                .withLocation("qqu")
                .withTags(mapOf("uipiccjzk", "kywggxkallatmel"))
                .withProperties(
                    new ProtectionContainer()
                        .withFriendlyName("d")
                        .withBackupManagementType(BackupManagementType.AZURE_SQL)
                        .withRegistrationStatus("y")
                        .withHealthStatus("ogjltdtbnnhad")
                        .withProtectableObjectType("crkvcikhnv"))
                .withEtag("mqg");
        model = BinaryData.fromObject(model).toObject(ProtectionContainerResourceInner.class);
        Assertions.assertEquals("qqu", model.location());
        Assertions.assertEquals("kywggxkallatmel", model.tags().get("uipiccjzk"));
        Assertions.assertEquals("d", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_SQL, model.properties().backupManagementType());
        Assertions.assertEquals("y", model.properties().registrationStatus());
        Assertions.assertEquals("ogjltdtbnnhad", model.properties().healthStatus());
        Assertions.assertEquals("crkvcikhnv", model.properties().protectableObjectType());
        Assertions.assertEquals("mqg", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
