// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectableContainerResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectableContainer;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectableContainerResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectableContainerResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"protectableContainerType\":\"ProtectableContainer\",\"friendlyName\":\"queziky\",\"backupManagementType\":\"AzureWorkload\",\"healthStatus\":\"kallatmel\",\"containerId\":\"ipicc\"},\"eTag\":\"kzivgvvcnayrh\",\"location\":\"rnxxmueed\",\"tags\":{\"qtc\":\"dvstkw\",\"piohgwxrtfu\":\"ealmfmtdaaygdvwv\",\"k\":\"xepxgyqagvrvmn\"},\"id\":\"kghimdblxgwimfnj\",\"name\":\"fjxwmsz\",\"type\":\"kfoqreyfkzikfj\"}")
            .toObject(ProtectableContainerResourceInner.class);
        Assertions.assertEquals("rnxxmueed", model.location());
        Assertions.assertEquals("dvstkw", model.tags().get("qtc"));
        Assertions.assertEquals("queziky", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_WORKLOAD, model.properties().backupManagementType());
        Assertions.assertEquals("kallatmel", model.properties().healthStatus());
        Assertions.assertEquals("ipicc", model.properties().containerId());
        Assertions.assertEquals("kzivgvvcnayrh", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectableContainerResourceInner model = new ProtectableContainerResourceInner().withLocation("rnxxmueed")
            .withTags(mapOf("qtc", "dvstkw", "piohgwxrtfu", "ealmfmtdaaygdvwv", "k", "xepxgyqagvrvmn"))
            .withProperties(new ProtectableContainer().withFriendlyName("queziky")
                .withBackupManagementType(BackupManagementType.AZURE_WORKLOAD)
                .withHealthStatus("kallatmel")
                .withContainerId("ipicc"))
            .withEtag("kzivgvvcnayrh");
        model = BinaryData.fromObject(model).toObject(ProtectableContainerResourceInner.class);
        Assertions.assertEquals("rnxxmueed", model.location());
        Assertions.assertEquals("dvstkw", model.tags().get("qtc"));
        Assertions.assertEquals("queziky", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_WORKLOAD, model.properties().backupManagementType());
        Assertions.assertEquals("kallatmel", model.properties().healthStatus());
        Assertions.assertEquals("ipicc", model.properties().containerId());
        Assertions.assertEquals("kzivgvvcnayrh", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
