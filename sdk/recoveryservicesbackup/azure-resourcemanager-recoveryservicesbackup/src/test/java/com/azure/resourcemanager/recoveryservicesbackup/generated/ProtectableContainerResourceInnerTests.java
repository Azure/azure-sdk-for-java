// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.ProtectableContainerResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectableContainer;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProtectableContainerResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectableContainerResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"protectableContainerType\":\"ProtectableContainer\",\"friendlyName\":\"rsndsytgadgvra\",\"backupManagementType\":\"Invalid\",\"healthStatus\":\"e\",\"containerId\":\"zar\"},\"eTag\":\"lquuijfqkacewii\",\"location\":\"fpubjibwwi\",\"tags\":{\"ynfs\":\"hqkvpuvksgplsak\",\"jphuopxodlqi\":\"n\",\"slyzrpzbchckqq\":\"ntorzihleosjswsr\",\"suiizynkedyat\":\"qioxi\"},\"id\":\"wyhqmibzyhwits\",\"name\":\"ypyynpcdpumnzg\",\"type\":\"wznm\"}")
                .toObject(ProtectableContainerResourceInner.class);
        Assertions.assertEquals("fpubjibwwi", model.location());
        Assertions.assertEquals("hqkvpuvksgplsak", model.tags().get("ynfs"));
        Assertions.assertEquals("rsndsytgadgvra", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.INVALID, model.properties().backupManagementType());
        Assertions.assertEquals("e", model.properties().healthStatus());
        Assertions.assertEquals("zar", model.properties().containerId());
        Assertions.assertEquals("lquuijfqkacewii", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectableContainerResourceInner model =
            new ProtectableContainerResourceInner()
                .withLocation("fpubjibwwi")
                .withTags(
                    mapOf(
                        "ynfs",
                        "hqkvpuvksgplsak",
                        "jphuopxodlqi",
                        "n",
                        "slyzrpzbchckqq",
                        "ntorzihleosjswsr",
                        "suiizynkedyat",
                        "qioxi"))
                .withProperties(
                    new ProtectableContainer()
                        .withFriendlyName("rsndsytgadgvra")
                        .withBackupManagementType(BackupManagementType.INVALID)
                        .withHealthStatus("e")
                        .withContainerId("zar"))
                .withEtag("lquuijfqkacewii");
        model = BinaryData.fromObject(model).toObject(ProtectableContainerResourceInner.class);
        Assertions.assertEquals("fpubjibwwi", model.location());
        Assertions.assertEquals("hqkvpuvksgplsak", model.tags().get("ynfs"));
        Assertions.assertEquals("rsndsytgadgvra", model.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.INVALID, model.properties().backupManagementType());
        Assertions.assertEquals("e", model.properties().healthStatus());
        Assertions.assertEquals("zar", model.properties().containerId());
        Assertions.assertEquals("lquuijfqkacewii", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
