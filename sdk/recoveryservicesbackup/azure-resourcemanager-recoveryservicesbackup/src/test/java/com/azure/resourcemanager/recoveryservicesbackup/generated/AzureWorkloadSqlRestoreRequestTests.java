// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLRestoreRequest\",\"shouldUseAlternateTargetLocation\":false,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"ygvkzqkjj\",\"sourcePath\":\"kbzefezrxcczurt\",\"targetPath\":\"ipqxbkwvzgnzv\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"d\",\"propertyBag\":{\"opqhewjptmc\":\"mqpnoda\",\"dlat\":\"sbostzel\",\"hrbbpneqvcwwyy\":\"tmzlbiojlv\",\"ochpprpr\":\"r\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"ayzejnhlbkpbz\",\"databaseName\":\"piljhahzvech\",\"targetDirectoryForFileRestore\":\"bnwieholew\"},\"recoveryMode\":\"Invalid\",\"targetResourceGroupName\":\"ubwefqs\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"aqtferr\",\"identityName\":\"ex\",\"userAssignedIdentityProperties\":{\"clientId\":\"fxapjwogqqnobpu\",\"principalId\":\"dabtqwp\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"zasqbucljgkyexao\"},\"targetVirtualMachineId\":\"yaipidsda\"}")
            .toObject(AzureWorkloadSqlRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("d", model.sourceResourceId());
        Assertions.assertEquals("mqpnoda", model.propertyBag().get("opqhewjptmc"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("ayzejnhlbkpbz", model.targetInfo().containerId());
        Assertions.assertEquals("piljhahzvech", model.targetInfo().databaseName());
        Assertions.assertEquals("bnwieholew", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("ubwefqs", model.targetResourceGroupName());
        Assertions.assertEquals("aqtferr", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("ex", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("fxapjwogqqnobpu",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("dabtqwp",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("zasqbucljgkyexao", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yaipidsda", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("ygvkzqkjj", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("kbzefezrxcczurt", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("ipqxbkwvzgnzv", model.alternateDirectoryPaths().get(0).targetPath());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlRestoreRequest model = new AzureWorkloadSqlRestoreRequest()
            .withRecoveryType(RecoveryType.OFFLINE).withSourceResourceId("d")
            .withPropertyBag(
                mapOf("opqhewjptmc", "mqpnoda", "dlat", "sbostzel", "hrbbpneqvcwwyy", "tmzlbiojlv", "ochpprpr", "r"))
            .withTargetInfo(
                new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID).withContainerId("ayzejnhlbkpbz")
                    .withDatabaseName("piljhahzvech").withTargetDirectoryForFileRestore("bnwieholew"))
            .withRecoveryMode(RecoveryMode.INVALID).withTargetResourceGroupName("ubwefqs")
            .withUserAssignedManagedIdentityDetails(
                new UserAssignedManagedIdentityDetails().withIdentityArmId("aqtferr").withIdentityName("ex")
                    .withUserAssignedIdentityProperties(new UserAssignedIdentityProperties()
                        .withClientId("fxapjwogqqnobpu").withPrincipalId("dabtqwp")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(true)
                .withLogPointInTimeForDBRecovery("zasqbucljgkyexao"))
            .withTargetVirtualMachineId("yaipidsda").withShouldUseAlternateTargetLocation(false)
            .withIsNonRecoverable(false)
            .withAlternateDirectoryPaths(Arrays.asList(new SqlDataDirectoryMapping()
                .withMappingType(SqlDataDirectoryType.INVALID).withSourceLogicalName("ygvkzqkjj")
                .withSourcePath("kbzefezrxcczurt").withTargetPath("ipqxbkwvzgnzv")));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("d", model.sourceResourceId());
        Assertions.assertEquals("mqpnoda", model.propertyBag().get("opqhewjptmc"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("ayzejnhlbkpbz", model.targetInfo().containerId());
        Assertions.assertEquals("piljhahzvech", model.targetInfo().databaseName());
        Assertions.assertEquals("bnwieholew", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("ubwefqs", model.targetResourceGroupName());
        Assertions.assertEquals("aqtferr", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("ex", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("fxapjwogqqnobpu",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("dabtqwp",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("zasqbucljgkyexao", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yaipidsda", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("ygvkzqkjj", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("kbzefezrxcczurt", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("ipqxbkwvzgnzv", model.alternateDirectoryPaths().get(0).targetPath());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
