// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSqlRestoreRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSqlRestoreRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSQLRestoreRequest\",\"shouldUseAlternateTargetLocation\":false,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Log\",\"sourceLogicalName\":\"sgzfczbg\",\"sourcePath\":\"fgbegl\",\"targetPath\":\"leohibetnluankr\"},{\"mappingType\":\"Data\",\"sourceLogicalName\":\"eebtijvacvb\",\"sourcePath\":\"z\",\"targetPath\":\"q\"},{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"rnwxacevehjkuyxo\",\"sourcePath\":\"gaoql\",\"targetPath\":\"aeylinm\"}],\"recoveryType\":\"OriginalLocation\",\"sourceResourceId\":\"irpghriypoqeyh\",\"propertyBag\":{\"iq\":\"ykprlpyznu\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"iitdfuxt\",\"databaseName\":\"siibmiybnnustgn\",\"targetDirectoryForFileRestore\":\"hnmgixhcm\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetVirtualMachineId\":\"foudor\"}")
                .toObject(AzureWorkloadSqlRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.ORIGINAL_LOCATION, model.recoveryType());
        Assertions.assertEquals("irpghriypoqeyh", model.sourceResourceId());
        Assertions.assertEquals("ykprlpyznu", model.propertyBag().get("iq"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("iitdfuxt", model.targetInfo().containerId());
        Assertions.assertEquals("siibmiybnnustgn", model.targetInfo().databaseName());
        Assertions.assertEquals("hnmgixhcm", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("foudor", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("sgzfczbg", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("fgbegl", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("leohibetnluankr", model.alternateDirectoryPaths().get(0).targetPath());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSqlRestoreRequest model =
            new AzureWorkloadSqlRestoreRequest()
                .withRecoveryType(RecoveryType.ORIGINAL_LOCATION)
                .withSourceResourceId("irpghriypoqeyh")
                .withPropertyBag(mapOf("iq", "ykprlpyznu"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.OVERWRITE)
                        .withContainerId("iitdfuxt")
                        .withDatabaseName("siibmiybnnustgn")
                        .withTargetDirectoryForFileRestore("hnmgixhcm"))
                .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY)
                .withTargetVirtualMachineId("foudor")
                .withShouldUseAlternateTargetLocation(false)
                .withIsNonRecoverable(false)
                .withAlternateDirectoryPaths(
                    Arrays
                        .asList(
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.LOG)
                                .withSourceLogicalName("sgzfczbg")
                                .withSourcePath("fgbegl")
                                .withTargetPath("leohibetnluankr"),
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.DATA)
                                .withSourceLogicalName("eebtijvacvb")
                                .withSourcePath("z")
                                .withTargetPath("q"),
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.INVALID)
                                .withSourceLogicalName("rnwxacevehjkuyxo")
                                .withSourcePath("gaoql")
                                .withTargetPath("aeylinm")));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.ORIGINAL_LOCATION, model.recoveryType());
        Assertions.assertEquals("irpghriypoqeyh", model.sourceResourceId());
        Assertions.assertEquals("ykprlpyznu", model.propertyBag().get("iq"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("iitdfuxt", model.targetInfo().containerId());
        Assertions.assertEquals("siibmiybnnustgn", model.targetInfo().databaseName());
        Assertions.assertEquals("hnmgixhcm", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("foudor", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("sgzfczbg", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("fgbegl", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("leohibetnluankr", model.alternateDirectoryPaths().get(0).targetPath());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
