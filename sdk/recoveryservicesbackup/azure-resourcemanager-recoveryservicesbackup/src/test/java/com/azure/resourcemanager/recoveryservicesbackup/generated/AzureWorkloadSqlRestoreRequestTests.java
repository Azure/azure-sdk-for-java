// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLRestoreRequest\",\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Log\",\"sourceLogicalName\":\"iznk\",\"sourcePath\":\"f\",\"targetPath\":\"snvpdibmi\"},{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"bzbkiw\",\"sourcePath\":\"qnyophzfyls\",\"targetPath\":\"rpfbcunezz\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"lfwyfwlwxjwetn\",\"propertyBag\":{\"qwztcmwqkc\":\"hclafzvaylptrs\",\"kjexfdeqvhp\":\"cxwaxfewz\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"shk\",\"databaseName\":\"f\",\"targetDirectoryForFileRestore\":\"mxzjrgywwpgjx\"},\"recoveryMode\":\"SnapshotAttach\",\"targetResourceGroupName\":\"fujg\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"aaoepttaqut\",\"identityName\":\"wemxswvruunzz\",\"userAssignedIdentityProperties\":{\"clientId\":\"hkfkimrtixokf\",\"principalId\":\"yinljqe\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"xmonstshi\"},\"targetVirtualMachineId\":\"gvelfc\",\"resourceGuardOperationRequests\":[\"ccbi\",\"ds\",\"uwc\"]}")
            .toObject(AzureWorkloadSqlRestoreRequest.class);
        Assertions.assertEquals("ccbi", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("lfwyfwlwxjwetn", model.sourceResourceId());
        Assertions.assertEquals("hclafzvaylptrs", model.propertyBag().get("qwztcmwqkc"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("shk", model.targetInfo().containerId());
        Assertions.assertEquals("f", model.targetInfo().databaseName());
        Assertions.assertEquals("mxzjrgywwpgjx", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH, model.recoveryMode());
        Assertions.assertEquals("fujg", model.targetResourceGroupName());
        Assertions.assertEquals("aaoepttaqut", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("wemxswvruunzz", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("hkfkimrtixokf",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("yinljqe",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("xmonstshi", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("gvelfc", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("iznk", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("f", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("snvpdibmi", model.alternateDirectoryPaths().get(0).targetPath());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlRestoreRequest model
            = new AzureWorkloadSqlRestoreRequest()
                .withResourceGuardOperationRequests(Arrays.asList("ccbi", "ds", "uwc"))
                .withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("lfwyfwlwxjwetn")
                .withPropertyBag(mapOf("qwztcmwqkc", "hclafzvaylptrs", "kjexfdeqvhp", "cxwaxfewz"))
                .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                    .withContainerId("shk")
                    .withDatabaseName("f")
                    .withTargetDirectoryForFileRestore("mxzjrgywwpgjx"))
                .withRecoveryMode(RecoveryMode.SNAPSHOT_ATTACH)
                .withTargetResourceGroupName("fujg")
                .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                    .withIdentityArmId("aaoepttaqut")
                    .withIdentityName("wemxswvruunzz")
                    .withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("hkfkimrtixokf").withPrincipalId("yinljqe")))
                .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(false)
                    .withLogPointInTimeForDBRecovery("xmonstshi"))
                .withTargetVirtualMachineId("gvelfc")
                .withShouldUseAlternateTargetLocation(true)
                .withIsNonRecoverable(false)
                .withAlternateDirectoryPaths(Arrays.asList(
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.LOG)
                        .withSourceLogicalName("iznk")
                        .withSourcePath("f")
                        .withTargetPath("snvpdibmi"),
                    new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.INVALID)
                        .withSourceLogicalName("bzbkiw")
                        .withSourcePath("qnyophzfyls")
                        .withTargetPath("rpfbcunezz")));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRestoreRequest.class);
        Assertions.assertEquals("ccbi", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("lfwyfwlwxjwetn", model.sourceResourceId());
        Assertions.assertEquals("hclafzvaylptrs", model.propertyBag().get("qwztcmwqkc"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("shk", model.targetInfo().containerId());
        Assertions.assertEquals("f", model.targetInfo().databaseName());
        Assertions.assertEquals("mxzjrgywwpgjx", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH, model.recoveryMode());
        Assertions.assertEquals("fujg", model.targetResourceGroupName());
        Assertions.assertEquals("aaoepttaqut", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("wemxswvruunzz", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("hkfkimrtixokf",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("yinljqe",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("xmonstshi", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("gvelfc", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("iznk", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("f", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("snvpdibmi", model.alternateDirectoryPaths().get(0).targetPath());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
