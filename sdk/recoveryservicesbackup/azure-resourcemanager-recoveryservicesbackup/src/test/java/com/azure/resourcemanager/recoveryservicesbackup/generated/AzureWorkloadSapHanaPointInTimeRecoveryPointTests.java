// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSapHanaPointInTimeRecoveryPointTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSapHanaPointInTimeRecoveryPoint model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-05-19T22:03:11Z\",\"endTime\":\"2021-07-26T18:31:56Z\"},{\"startTime\":\"2021-12-05T00:17:31Z\",\"endTime\":\"2021-03-10T08:15:44Z\"},{\"startTime\":\"2021-12-07T19:13:24Z\",\"endTime\":\"2020-12-23T10:26:10Z\"},{\"startTime\":\"2021-03-26T08:46:35Z\",\"endTime\":\"2021-02-11T17:22:49Z\"}],\"recoveryPointTimeInUTC\":\"2021-01-01T22:27:05Z\",\"type\":\"Invalid\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Disabled\",\"extendedInfo\":{\"oobrlttyms\":\"qyrp\"}},{\"type\":\"HardenedRP\",\"status\":\"Deleted\",\"extendedInfo\":{\"tilaxh\":\"fwqzdz\",\"ouwivkxoyzunbixx\":\"fhqlyvi\",\"vcpwpgclrc\":\"ti\",\"kenx\":\"vtsoxf\"}},{\"type\":\"ArchivedRP\",\"status\":\"Disabled\",\"extendedInfo\":{\"qskaw\":\"pmpdn\",\"bnpqfrtqlkzme\":\"oqvm\",\"qdrfegcealzxwhc\":\"nitgvkxlz\"}}],\"recoveryPointMoveReadinessInfo\":{\"omfaj\":{\"isReadyForMove\":false,\"additionalInfo\":\"yqhlwigdivbkbx\"},\"hzbezkgi\":{\"isReadyForMove\":false,\"additionalInfo\":\"qvdaeyyguxakjsq\"}}}")
                .toObject(AzureWorkloadSapHanaPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-01T22:27:05Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("qyrp", model.recoveryPointTierDetails().get(0).extendedInfo().get("oobrlttyms"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("omfaj").isReadyForMove());
        Assertions.assertEquals("yqhlwigdivbkbx", model.recoveryPointMoveReadinessInfo().get("omfaj").additionalInfo());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-19T22:03:11Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-26T18:31:56Z"), model.timeRanges().get(0).endTime());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSapHanaPointInTimeRecoveryPoint model =
            new AzureWorkloadSapHanaPointInTimeRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-01-01T22:27:05Z"))
                .withType(RestorePointType.INVALID)
                .withRecoveryPointTierDetails(
                    Arrays
                        .asList(
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.HARDENED_RP)
                                .withStatus(RecoveryPointTierStatus.DISABLED)
                                .withExtendedInfo(mapOf("oobrlttyms", "qyrp")),
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.HARDENED_RP)
                                .withStatus(RecoveryPointTierStatus.DELETED)
                                .withExtendedInfo(
                                    mapOf(
                                        "tilaxh",
                                        "fwqzdz",
                                        "ouwivkxoyzunbixx",
                                        "fhqlyvi",
                                        "vcpwpgclrc",
                                        "ti",
                                        "kenx",
                                        "vtsoxf")),
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.ARCHIVED_RP)
                                .withStatus(RecoveryPointTierStatus.DISABLED)
                                .withExtendedInfo(
                                    mapOf("qskaw", "pmpdn", "bnpqfrtqlkzme", "oqvm", "qdrfegcealzxwhc", "nitgvkxlz"))))
                .withRecoveryPointMoveReadinessInfo(
                    mapOf(
                        "omfaj",
                        new RecoveryPointMoveReadinessInfo()
                            .withIsReadyForMove(false)
                            .withAdditionalInfo("yqhlwigdivbkbx"),
                        "hzbezkgi",
                        new RecoveryPointMoveReadinessInfo()
                            .withIsReadyForMove(false)
                            .withAdditionalInfo("qvdaeyyguxakjsq")))
                .withTimeRanges(
                    Arrays
                        .asList(
                            new PointInTimeRange()
                                .withStartTime(OffsetDateTime.parse("2021-05-19T22:03:11Z"))
                                .withEndTime(OffsetDateTime.parse("2021-07-26T18:31:56Z")),
                            new PointInTimeRange()
                                .withStartTime(OffsetDateTime.parse("2021-12-05T00:17:31Z"))
                                .withEndTime(OffsetDateTime.parse("2021-03-10T08:15:44Z")),
                            new PointInTimeRange()
                                .withStartTime(OffsetDateTime.parse("2021-12-07T19:13:24Z"))
                                .withEndTime(OffsetDateTime.parse("2020-12-23T10:26:10Z")),
                            new PointInTimeRange()
                                .withStartTime(OffsetDateTime.parse("2021-03-26T08:46:35Z"))
                                .withEndTime(OffsetDateTime.parse("2021-02-11T17:22:49Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-01T22:27:05Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.DISABLED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("qyrp", model.recoveryPointTierDetails().get(0).extendedInfo().get("oobrlttyms"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("omfaj").isReadyForMove());
        Assertions.assertEquals("yqhlwigdivbkbx", model.recoveryPointMoveReadinessInfo().get("omfaj").additionalInfo());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-19T22:03:11Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-26T18:31:56Z"), model.timeRanges().get(0).endTime());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
