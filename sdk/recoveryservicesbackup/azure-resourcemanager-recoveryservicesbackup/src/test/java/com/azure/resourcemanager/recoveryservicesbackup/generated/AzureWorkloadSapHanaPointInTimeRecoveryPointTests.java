// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaPointInTimeRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-01-23T20:53:22Z\",\"endTime\":\"2021-09-10T10:22:32Z\"}],\"recoveryPointTimeInUTC\":\"2021-07-27T04:50:29Z\",\"type\":\"Invalid\",\"recoveryPointTierDetails\":[{\"type\":\"Invalid\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"jjidjk\":\"kzyb\"}},{\"type\":\"HardenedRP\",\"status\":\"Invalid\",\"extendedInfo\":{\"jednlj\":\"xevbl\",\"aulx\":\"age\"}},{\"type\":\"HardenedRP\",\"status\":\"Invalid\",\"extendedInfo\":{\"gwklnsr\":\"kppxynenlsvxeiz\",\"ktp\":\"ffeycx\",\"ekkkzd\":\"ymerteeammxq\"}}],\"recoveryPointMoveReadinessInfo\":{\"vrefdeesv\":{\"isReadyForMove\":false,\"additionalInfo\":\"ojbmxv\"},\"sawddjibabxvi\":{\"isReadyForMove\":false,\"additionalInfo\":\"jpxtxsuwprtuj\"},\"xtfglecdmdqb\":{\"isReadyForMove\":true,\"additionalInfo\":\"tzeexav\"}},\"recoveryPointProperties\":{\"expiryTime\":\"pqtgsfjac\",\"ruleName\":\"lhhxudbxvodhtnsi\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadSapHanaPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T04:50:29Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("kzyb", model.recoveryPointTierDetails().get(0).extendedInfo().get("jjidjk"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("vrefdeesv").isReadyForMove());
        Assertions.assertEquals("ojbmxv", model.recoveryPointMoveReadinessInfo().get("vrefdeesv").additionalInfo());
        Assertions.assertEquals("pqtgsfjac", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("lhhxudbxvodhtnsi", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-23T20:53:22Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-10T10:22:32Z"), model.timeRanges().get(0).endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRecoveryPoint model = new AzureWorkloadSapHanaPointInTimeRecoveryPoint()
            .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-07-27T04:50:29Z"))
            .withType(RestorePointType.INVALID)
            .withRecoveryPointTierDetails(Arrays.asList(
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                    .withStatus(RecoveryPointTierStatus.REHYDRATED)
                    .withExtendedInfo(mapOf("jjidjk", "kzyb")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                    .withStatus(RecoveryPointTierStatus.INVALID)
                    .withExtendedInfo(mapOf("jednlj", "xevbl", "aulx", "age")),
                new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.HARDENED_RP)
                    .withStatus(RecoveryPointTierStatus.INVALID)
                    .withExtendedInfo(mapOf("gwklnsr", "kppxynenlsvxeiz", "ktp", "ffeycx", "ekkkzd", "ymerteeammxq"))))
            .withRecoveryPointMoveReadinessInfo(mapOf("vrefdeesv",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("ojbmxv"),
                "sawddjibabxvi",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("jpxtxsuwprtuj"),
                "xtfglecdmdqb",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("tzeexav")))
            .withRecoveryPointProperties(new RecoveryPointProperties().withExpiryTime("pqtgsfjac")
                .withRuleName("lhhxudbxvodhtnsi")
                .withIsSoftDeleted(true))
            .withTimeRanges(
                Arrays.asList(new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-01-23T20:53:22Z"))
                    .withEndTime(OffsetDateTime.parse("2021-09-10T10:22:32Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T04:50:29Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("kzyb", model.recoveryPointTierDetails().get(0).extendedInfo().get("jjidjk"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("vrefdeesv").isReadyForMove());
        Assertions.assertEquals("ojbmxv", model.recoveryPointMoveReadinessInfo().get("vrefdeesv").additionalInfo());
        Assertions.assertEquals("pqtgsfjac", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("lhhxudbxvodhtnsi", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-23T20:53:22Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-10T10:22:32Z"), model.timeRanges().get(0).endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
