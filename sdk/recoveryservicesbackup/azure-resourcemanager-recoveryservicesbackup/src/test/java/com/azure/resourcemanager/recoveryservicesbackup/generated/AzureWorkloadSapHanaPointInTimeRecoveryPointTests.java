// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaPointInTimeRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.PointInTimeRange;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaPointInTimeRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaPointInTimeRecoveryPoint\",\"timeRanges\":[{\"startTime\":\"2021-03-20T23:34:25Z\",\"endTime\":\"2021-02-03T19:42:10Z\"},{\"startTime\":\"2021-06-14T02:15:17Z\",\"endTime\":\"2021-09-27T05:48:08Z\"}],\"recoveryPointTimeInUTC\":\"2021-01-08T06:53:43Z\",\"type\":\"Differential\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Valid\",\"extendedInfo\":{\"smjbnkppxyn\":\"euaulxu\",\"gwklnsr\":\"nlsvxeiz\"}}],\"recoveryPointMoveReadinessInfo\":{\"qiekkkzddrt\":{\"isReadyForMove\":true,\"additionalInfo\":\"xcktpiymerteeamm\"},\"de\":{\"isReadyForMove\":false,\"additionalInfo\":\"jbmxvavre\"},\"s\":{\"isReadyForMove\":false,\"additionalInfo\":\"cuijpxt\"}},\"recoveryPointProperties\":{\"expiryTime\":\"rtujwsawddjibab\",\"ruleName\":\"ititvtzeexavoxt\",\"isSoftDeleted\":true}}")
            .toObject(AzureWorkloadSapHanaPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T06:53:43Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("euaulxu", model.recoveryPointTierDetails().get(0).extendedInfo().get("smjbnkppxyn"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("qiekkkzddrt").isReadyForMove());
        Assertions.assertEquals("xcktpiymerteeamm",
            model.recoveryPointMoveReadinessInfo().get("qiekkkzddrt").additionalInfo());
        Assertions.assertEquals("rtujwsawddjibab", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("ititvtzeexavoxt", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T23:34:25Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T19:42:10Z"), model.timeRanges().get(0).endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaPointInTimeRecoveryPoint model = new AzureWorkloadSapHanaPointInTimeRecoveryPoint()
            .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-01-08T06:53:43Z"))
            .withType(RestorePointType.DIFFERENTIAL)
            .withRecoveryPointTierDetails(Arrays.asList(new RecoveryPointTierInformationV2()
                .withType(RecoveryPointTierType.HARDENED_RP).withStatus(RecoveryPointTierStatus.VALID)
                .withExtendedInfo(mapOf("smjbnkppxyn", "euaulxu", "gwklnsr", "nlsvxeiz"))))
            .withRecoveryPointMoveReadinessInfo(mapOf("qiekkkzddrt",
                new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("xcktpiymerteeamm"),
                "de", new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("jbmxvavre"),
                "s", new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("cuijpxt")))
            .withRecoveryPointProperties(new RecoveryPointProperties().withExpiryTime("rtujwsawddjibab")
                .withRuleName("ititvtzeexavoxt").withIsSoftDeleted(true))
            .withTimeRanges(Arrays.asList(
                new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-03-20T23:34:25Z"))
                    .withEndTime(OffsetDateTime.parse("2021-02-03T19:42:10Z")),
                new PointInTimeRange().withStartTime(OffsetDateTime.parse("2021-06-14T02:15:17Z"))
                    .withEndTime(OffsetDateTime.parse("2021-09-27T05:48:08Z"))));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaPointInTimeRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T06:53:43Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("euaulxu", model.recoveryPointTierDetails().get(0).extendedInfo().get("smjbnkppxyn"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("qiekkkzddrt").isReadyForMove());
        Assertions.assertEquals("xcktpiymerteeamm",
            model.recoveryPointMoveReadinessInfo().get("qiekkkzddrt").additionalInfo());
        Assertions.assertEquals("rtujwsawddjibab", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("ititvtzeexavoxt", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(true, model.recoveryPointProperties().isSoftDeleted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T23:34:25Z"), model.timeRanges().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T19:42:10Z"), model.timeRanges().get(0).endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
