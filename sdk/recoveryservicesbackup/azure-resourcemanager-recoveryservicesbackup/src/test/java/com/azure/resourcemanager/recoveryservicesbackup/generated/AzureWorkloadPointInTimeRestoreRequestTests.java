// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadPointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadPointInTimeRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadPointInTimeRestoreRequest\",\"pointInTime\":\"2021-07-22T19:55:46Z\",\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"mewip\",\"propertyBag\":{\"xukuqgsj\":\"k\",\"twzhhzjhfjmhv\":\"xundxgk\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"pmuneqsx\",\"databaseName\":\"hfbuzjyihsasbhud\",\"targetDirectoryForFileRestore\":\"ohyuemslynsq\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"oobrlttyms\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"gqdnfwqzd\",\"identityName\":\"tilaxh\",\"userAssignedIdentityProperties\":{\"clientId\":\"qlyvijo\",\"principalId\":\"iv\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"un\"},\"targetVirtualMachineId\":\"xxrtikvc\"}")
            .toObject(AzureWorkloadPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("mewip", model.sourceResourceId());
        Assertions.assertEquals("k", model.propertyBag().get("xukuqgsj"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("pmuneqsx", model.targetInfo().containerId());
        Assertions.assertEquals("hfbuzjyihsasbhud", model.targetInfo().databaseName());
        Assertions.assertEquals("ohyuemslynsq", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("oobrlttyms", model.targetResourceGroupName());
        Assertions.assertEquals("gqdnfwqzd", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("tilaxh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("qlyvijo",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("iv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("un", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("xxrtikvc", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T19:55:46Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadPointInTimeRestoreRequest model
            = new AzureWorkloadPointInTimeRestoreRequest().withRecoveryType(RecoveryType.INVALID)
                .withSourceResourceId("mewip").withPropertyBag(mapOf("xukuqgsj", "k", "twzhhzjhfjmhv", "xundxgk"))
                .withTargetInfo(
                    new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID).withContainerId("pmuneqsx")
                        .withDatabaseName("hfbuzjyihsasbhud").withTargetDirectoryForFileRestore("ohyuemslynsq"))
                .withRecoveryMode(RecoveryMode.FILE_RECOVERY).withTargetResourceGroupName("oobrlttyms")
                .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                    .withIdentityArmId("gqdnfwqzd").withIdentityName("tilaxh").withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("qlyvijo").withPrincipalId("iv")))
                .withSnapshotRestoreParameters(
                    new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("un"))
                .withTargetVirtualMachineId("xxrtikvc").withPointInTime(OffsetDateTime.parse("2021-07-22T19:55:46Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("mewip", model.sourceResourceId());
        Assertions.assertEquals("k", model.propertyBag().get("xukuqgsj"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("pmuneqsx", model.targetInfo().containerId());
        Assertions.assertEquals("hfbuzjyihsasbhud", model.targetInfo().databaseName());
        Assertions.assertEquals("ohyuemslynsq", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("oobrlttyms", model.targetResourceGroupName());
        Assertions.assertEquals("gqdnfwqzd", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("tilaxh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("qlyvijo",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("iv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("un", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("xxrtikvc", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T19:55:46Z"), model.pointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
