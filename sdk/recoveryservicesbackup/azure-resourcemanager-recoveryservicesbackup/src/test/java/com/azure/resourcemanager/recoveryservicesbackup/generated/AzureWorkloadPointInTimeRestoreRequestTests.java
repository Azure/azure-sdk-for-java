// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadPointInTimeRestoreRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadPointInTimeRestoreRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadPointInTimeRestoreRequest\",\"pointInTime\":\"2021-04-13T21:57:14Z\",\"recoveryType\":\"AlternateLocation\",\"sourceResourceId\":\"ahfbous\",\"propertyBag\":{\"ncxykxhdjhlimm\":\"pgfewetwlyx\",\"cjzhqi\":\"cxfhbcporxv\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"tgqscjavftjuh\",\"databaseName\":\"azkmtgguwp\",\"targetDirectoryForFileRestore\":\"r\"},\"recoveryMode\":\"Invalid\",\"targetVirtualMachineId\":\"vmmghfcfiwrxgk\"}")
                .toObject(AzureWorkloadPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("ahfbous", model.sourceResourceId());
        Assertions.assertEquals("pgfewetwlyx", model.propertyBag().get("ncxykxhdjhlimm"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("tgqscjavftjuh", model.targetInfo().containerId());
        Assertions.assertEquals("azkmtgguwp", model.targetInfo().databaseName());
        Assertions.assertEquals("r", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("vmmghfcfiwrxgk", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T21:57:14Z"), model.pointInTime());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadPointInTimeRestoreRequest model =
            new AzureWorkloadPointInTimeRestoreRequest()
                .withRecoveryType(RecoveryType.ALTERNATE_LOCATION)
                .withSourceResourceId("ahfbous")
                .withPropertyBag(mapOf("ncxykxhdjhlimm", "pgfewetwlyx", "cjzhqi", "cxfhbcporxv"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.INVALID)
                        .withContainerId("tgqscjavftjuh")
                        .withDatabaseName("azkmtgguwp")
                        .withTargetDirectoryForFileRestore("r"))
                .withRecoveryMode(RecoveryMode.INVALID)
                .withTargetVirtualMachineId("vmmghfcfiwrxgk")
                .withPointInTime(OffsetDateTime.parse("2021-04-13T21:57:14Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadPointInTimeRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("ahfbous", model.sourceResourceId());
        Assertions.assertEquals("pgfewetwlyx", model.propertyBag().get("ncxykxhdjhlimm"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("tgqscjavftjuh", model.targetInfo().containerId());
        Assertions.assertEquals("azkmtgguwp", model.targetInfo().databaseName());
        Assertions.assertEquals("r", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("vmmghfcfiwrxgk", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T21:57:14Z"), model.pointInTime());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
