// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadPointInTimeRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadPointInTimeRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadPointInTimeRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadPointInTimeRestoreRequest\",\"pointInTime\":\"2020-12-24T17:11:07Z\",\"recoveryType\":\"Invalid\",\"sourceResourceId\":\"pijrajcivmmghf\",\"propertyBag\":{\"nzqodfvpg\":\"wrxgkneuvy\",\"zdjtxvzflbqv\":\"hoxgsgbpf\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"gafcqu\",\"databaseName\":\"dvetnws\",\"targetDirectoryForFileRestore\":\"utnw\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"cvuzhyrmewipmve\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"ukuqgsj\",\"identityName\":\"undxgketw\",\"userAssignedIdentityProperties\":{\"clientId\":\"zjhfjmhvv\",\"principalId\":\"vgpmun\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"mhfbuzjy\"},\"targetVirtualMachineId\":\"sasbhu\",\"resourceGuardOperationRequests\":[\"ohyuemslynsq\",\"rpfoobr\",\"ttymsjny\",\"qdnfwqzdz\"]}")
            .toObject(AzureWorkloadPointInTimeRestoreRequest.class);
        Assertions.assertEquals("ohyuemslynsq", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("pijrajcivmmghf", model.sourceResourceId());
        Assertions.assertEquals("wrxgkneuvy", model.propertyBag().get("nzqodfvpg"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("gafcqu", model.targetInfo().containerId());
        Assertions.assertEquals("dvetnws", model.targetInfo().databaseName());
        Assertions.assertEquals("utnw", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("cvuzhyrmewipmve", model.targetResourceGroupName());
        Assertions.assertEquals("ukuqgsj", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("undxgketw", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("zjhfjmhvv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("vgpmun",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("mhfbuzjy", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("sasbhu", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T17:11:07Z"), model.pointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadPointInTimeRestoreRequest model = new AzureWorkloadPointInTimeRestoreRequest()
            .withResourceGuardOperationRequests(Arrays.asList("ohyuemslynsq", "rpfoobr", "ttymsjny", "qdnfwqzdz"))
            .withRecoveryType(RecoveryType.INVALID)
            .withSourceResourceId("pijrajcivmmghf")
            .withPropertyBag(mapOf("nzqodfvpg", "wrxgkneuvy", "zdjtxvzflbqv", "hoxgsgbpf"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                .withContainerId("gafcqu")
                .withDatabaseName("dvetnws")
                .withTargetDirectoryForFileRestore("utnw"))
            .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
            .withTargetResourceGroupName("cvuzhyrmewipmve")
            .withUserAssignedManagedIdentityDetails(
                new UserAssignedManagedIdentityDetails().withIdentityArmId("ukuqgsj")
                    .withIdentityName("undxgketw")
                    .withUserAssignedIdentityProperties(
                        new UserAssignedIdentityProperties().withClientId("zjhfjmhvv").withPrincipalId("vgpmun")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(false)
                .withLogPointInTimeForDBRecovery("mhfbuzjy"))
            .withTargetVirtualMachineId("sasbhu")
            .withPointInTime(OffsetDateTime.parse("2020-12-24T17:11:07Z"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadPointInTimeRestoreRequest.class);
        Assertions.assertEquals("ohyuemslynsq", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.INVALID, model.recoveryType());
        Assertions.assertEquals("pijrajcivmmghf", model.sourceResourceId());
        Assertions.assertEquals("wrxgkneuvy", model.propertyBag().get("nzqodfvpg"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("gafcqu", model.targetInfo().containerId());
        Assertions.assertEquals("dvetnws", model.targetInfo().databaseName());
        Assertions.assertEquals("utnw", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("cvuzhyrmewipmve", model.targetResourceGroupName());
        Assertions.assertEquals("ukuqgsj", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("undxgketw", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("zjhfjmhvv",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("vgpmun",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("mhfbuzjy", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("sasbhu", model.targetVirtualMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T17:11:07Z"), model.pointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
