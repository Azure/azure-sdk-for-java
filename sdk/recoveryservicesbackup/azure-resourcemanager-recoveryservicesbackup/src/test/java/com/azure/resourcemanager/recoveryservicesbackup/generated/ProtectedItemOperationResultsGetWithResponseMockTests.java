// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectedItemResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProtectedItemOperationResultsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"protectedItemType\":\"ProtectedItem\",\"backupManagementType\":\"AzureSql\",\"workloadType\":\"SQLDB\",\"containerName\":\"qfhefkwabsol\",\"sourceResourceId\":\"nqqlmgnl\",\"policyId\":\"sjxtel\",\"lastRecoveryPoint\":\"2021-08-30T10:48:05Z\",\"backupSetName\":\"uqbo\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-11-18T16:01:37Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"arkuzl\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"nx\",\"wqy\"],\"isArchiveEnabled\":true,\"policyName\":\"dyz\",\"softDeleteRetentionPeriodInDays\":1026321813},\"eTag\":\"zexnxakcky\",\"location\":\"ymx\",\"tags\":{\"ogzvk\":\"bjkdtfohf\",\"raueekcsueh\":\"wrsiwdyjqurykc\",\"bcbgydlqidywmhm\":\"gdda\"},\"id\":\"tyrilkfbnrqqxvz\",\"name\":\"pbnfnqtx\",\"type\":\"to\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectedItemResource response =
            manager
                .protectedItemOperationResults()
                .getWithResponse(
                    "yibuyvpirfqjpnqn",
                    "owsbedenrexkxbh",
                    "vucnulgmnh",
                    "evdyz",
                    "fajs",
                    "kskmqozzkivyhjrl",
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ymx", response.location());
        Assertions.assertEquals("bjkdtfohf", response.tags().get("ogzvk"));
        Assertions.assertEquals("qfhefkwabsol", response.properties().containerName());
        Assertions.assertEquals("nqqlmgnl", response.properties().sourceResourceId());
        Assertions.assertEquals("sjxtel", response.properties().policyId());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-30T10:48:05Z"), response.properties().lastRecoveryPoint());
        Assertions.assertEquals("uqbo", response.properties().backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, response.properties().createMode());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-18T16:01:37Z"), response.properties().deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, response.properties().isScheduledForDeferredDelete());
        Assertions.assertEquals("arkuzl", response.properties().deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, response.properties().isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, response.properties().isRehydrate());
        Assertions.assertEquals("nx", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, response.properties().isArchiveEnabled());
        Assertions.assertEquals("dyz", response.properties().policyName());
        Assertions.assertEquals(1026321813, response.properties().softDeleteRetentionPeriod());
        Assertions.assertEquals("zexnxakcky", response.etag());
    }
}
