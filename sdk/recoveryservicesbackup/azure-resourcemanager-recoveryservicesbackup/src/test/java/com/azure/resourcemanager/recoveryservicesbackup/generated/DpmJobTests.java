// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmJobTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmJob model = BinaryData.fromString(
            "{\"jobType\":\"DpmJob\",\"duration\":\"PT188H4M57S\",\"dpmServerName\":\"xo\",\"containerName\":\"ftgz\",\"containerType\":\"pbswvefloccsrm\",\"workloadType\":\"ihmipgawtxxpk\",\"actionsInfo\":[\"Invalid\",\"Cancellable\"],\"errorDetails\":[{\"errorString\":\"rytfmpcycil\",\"recommendations\":[\"aykggnoxu\",\"t\",\"ksxwpnd\"]},{\"errorString\":\"pfnznthjtwkj\",\"recommendations\":[\"rxuzvoam\",\"tcqiosmg\",\"zah\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"yrtltlaprltzkat\",\"startTime\":\"2021-01-26T08:01:35Z\",\"endTime\":\"2021-11-05T23:53:12Z\",\"duration\":\"PT141H27M7S\",\"status\":\"s\"}],\"propertyBag\":{\"ebwlnbmhyreeudzq\":\"qalarvlagunbtg\"},\"dynamicErrorMessage\":\"bpdqmjxlyy\"},\"entityFriendlyName\":\"lgouwtlmjj\",\"backupManagementType\":\"MAB\",\"operation\":\"qtobaxkjeyt\",\"status\":\"lbfjkwr\",\"startTime\":\"2021-05-29T11:10:20Z\",\"endTime\":\"2021-06-19T00:14:04Z\",\"activityId\":\"hsyrqunj\"}")
            .toObject(DpmJob.class);
        Assertions.assertEquals("lgouwtlmjj", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.backupManagementType());
        Assertions.assertEquals("qtobaxkjeyt", model.operation());
        Assertions.assertEquals("lbfjkwr", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-29T11:10:20Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-19T00:14:04Z"), model.endTime());
        Assertions.assertEquals("hsyrqunj", model.activityId());
        Assertions.assertEquals(Duration.parse("PT188H4M57S"), model.duration());
        Assertions.assertEquals("xo", model.dpmServerName());
        Assertions.assertEquals("ftgz", model.containerName());
        Assertions.assertEquals("pbswvefloccsrm", model.containerType());
        Assertions.assertEquals("ihmipgawtxxpk", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("rytfmpcycil", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("aykggnoxu", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("yrtltlaprltzkat", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-26T08:01:35Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-05T23:53:12Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT141H27M7S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("s", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("qalarvlagunbtg", model.extendedInfo().propertyBag().get("ebwlnbmhyreeudzq"));
        Assertions.assertEquals("bpdqmjxlyy", model.extendedInfo().dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmJob model = new DpmJob().withEntityFriendlyName("lgouwtlmjj")
            .withBackupManagementType(BackupManagementType.MAB)
            .withOperation("qtobaxkjeyt")
            .withStatus("lbfjkwr")
            .withStartTime(OffsetDateTime.parse("2021-05-29T11:10:20Z"))
            .withEndTime(OffsetDateTime.parse("2021-06-19T00:14:04Z"))
            .withActivityId("hsyrqunj")
            .withDuration(Duration.parse("PT188H4M57S"))
            .withDpmServerName("xo")
            .withContainerName("ftgz")
            .withContainerType("pbswvefloccsrm")
            .withWorkloadType("ihmipgawtxxpk")
            .withActionsInfo(Arrays.asList(JobSupportedAction.INVALID, JobSupportedAction.CANCELLABLE))
            .withErrorDetails(Arrays.asList(
                new DpmErrorInfo().withErrorString("rytfmpcycil")
                    .withRecommendations(Arrays.asList("aykggnoxu", "t", "ksxwpnd")),
                new DpmErrorInfo().withErrorString("pfnznthjtwkj")
                    .withRecommendations(Arrays.asList("rxuzvoam", "tcqiosmg", "zah"))))
            .withExtendedInfo(new DpmJobExtendedInfo()
                .withTasksList(Arrays.asList(new DpmJobTaskDetails().withTaskId("yrtltlaprltzkat")
                    .withStartTime(OffsetDateTime.parse("2021-01-26T08:01:35Z"))
                    .withEndTime(OffsetDateTime.parse("2021-11-05T23:53:12Z"))
                    .withDuration(Duration.parse("PT141H27M7S"))
                    .withStatus("s")))
                .withPropertyBag(mapOf("ebwlnbmhyreeudzq", "qalarvlagunbtg"))
                .withDynamicErrorMessage("bpdqmjxlyy"));
        model = BinaryData.fromObject(model).toObject(DpmJob.class);
        Assertions.assertEquals("lgouwtlmjj", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.backupManagementType());
        Assertions.assertEquals("qtobaxkjeyt", model.operation());
        Assertions.assertEquals("lbfjkwr", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-29T11:10:20Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-19T00:14:04Z"), model.endTime());
        Assertions.assertEquals("hsyrqunj", model.activityId());
        Assertions.assertEquals(Duration.parse("PT188H4M57S"), model.duration());
        Assertions.assertEquals("xo", model.dpmServerName());
        Assertions.assertEquals("ftgz", model.containerName());
        Assertions.assertEquals("pbswvefloccsrm", model.containerType());
        Assertions.assertEquals("ihmipgawtxxpk", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("rytfmpcycil", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("aykggnoxu", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("yrtltlaprltzkat", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-26T08:01:35Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-05T23:53:12Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT141H27M7S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("s", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("qalarvlagunbtg", model.extendedInfo().propertyBag().get("ebwlnbmhyreeudzq"));
        Assertions.assertEquals("bpdqmjxlyy", model.extendedInfo().dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
