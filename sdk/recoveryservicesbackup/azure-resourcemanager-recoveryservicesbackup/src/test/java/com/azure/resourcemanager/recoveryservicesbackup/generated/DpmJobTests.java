// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmJobTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmJob model = BinaryData.fromString(
            "{\"jobType\":\"DpmJob\",\"duration\":\"PT177H19M41S\",\"dpmServerName\":\"gywwpgjxs\",\"containerName\":\"tf\",\"containerType\":\"gicgaaoepttaq\",\"workloadType\":\"dewemxswv\",\"actionsInfo\":[\"Invalid\",\"Invalid\",\"Retriable\"],\"errorDetails\":[{\"errorString\":\"hkfkimrtixokf\",\"recommendations\":[\"inljqepqwhixmo\",\"stshiy\"]},{\"errorString\":\"velfcldu\",\"recommendations\":[\"irdsvuwcob\",\"egstmninwjizci\",\"nghgshej\",\"tbxqmuluxlxq\"]},{\"errorString\":\"nersb\",\"recommendations\":[\"crwnamikz\",\"brqbsmswzi\"]},{\"errorString\":\"fuhok\",\"recommendations\":[\"swhvhczznvfbycj\",\"xjww\",\"xzv\",\"mwmxqhndvnoamld\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"hdjhhflz\",\"startTime\":\"2021-09-01T03:30:12Z\",\"endTime\":\"2021-01-13T01:47:16Z\",\"duration\":\"PT140H9M21S\",\"status\":\"lnjetaglt\"},{\"taskId\":\"oatftgzpnpbswvef\",\"startTime\":\"2021-04-22T04:47:20Z\",\"endTime\":\"2021-01-31T21:33:12Z\",\"duration\":\"PT230H41M15S\",\"status\":\"zihmipgawtxxpky\"}],\"propertyBag\":{\"pcycilrmcaykg\":\"cjxgrytf\",\"pndfcpfnznt\":\"noxuztrksx\",\"xuzvoamktcqi\":\"jtwkjaos\",\"rtltla\":\"smgbzahgxqdl\"},\"dynamicErrorMessage\":\"ltzkatbhjmznnb\"},\"entityFriendlyName\":\"qeqala\",\"backupManagementType\":\"MAB\",\"operation\":\"gunbtgfebwlnbm\",\"status\":\"reeudzqavb\",\"startTime\":\"2021-04-18T03:24:53Z\",\"endTime\":\"2021-05-03T15:28:46Z\",\"activityId\":\"lyyzglgouwtlmjj\"}")
            .toObject(DpmJob.class);
        Assertions.assertEquals("qeqala", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.backupManagementType());
        Assertions.assertEquals("gunbtgfebwlnbm", model.operation());
        Assertions.assertEquals("reeudzqavb", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-18T03:24:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T15:28:46Z"), model.endTime());
        Assertions.assertEquals("lyyzglgouwtlmjj", model.activityId());
        Assertions.assertEquals(Duration.parse("PT177H19M41S"), model.duration());
        Assertions.assertEquals("gywwpgjxs", model.dpmServerName());
        Assertions.assertEquals("tf", model.containerName());
        Assertions.assertEquals("gicgaaoepttaq", model.containerType());
        Assertions.assertEquals("dewemxswv", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("hkfkimrtixokf", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("inljqepqwhixmo", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("hdjhhflz", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T03:30:12Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T01:47:16Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT140H9M21S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("lnjetaglt", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("cjxgrytf", model.extendedInfo().propertyBag().get("pcycilrmcaykg"));
        Assertions.assertEquals("ltzkatbhjmznnb", model.extendedInfo().dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmJob model = new DpmJob().withEntityFriendlyName("qeqala")
            .withBackupManagementType(BackupManagementType.MAB)
            .withOperation("gunbtgfebwlnbm")
            .withStatus("reeudzqavb")
            .withStartTime(OffsetDateTime.parse("2021-04-18T03:24:53Z"))
            .withEndTime(OffsetDateTime.parse("2021-05-03T15:28:46Z"))
            .withActivityId("lyyzglgouwtlmjj")
            .withDuration(Duration.parse("PT177H19M41S"))
            .withDpmServerName("gywwpgjxs")
            .withContainerName("tf")
            .withContainerType("gicgaaoepttaq")
            .withWorkloadType("dewemxswv")
            .withActionsInfo(
                Arrays.asList(JobSupportedAction.INVALID, JobSupportedAction.INVALID, JobSupportedAction.RETRIABLE))
            .withErrorDetails(Arrays.asList(
                new DpmErrorInfo().withErrorString("hkfkimrtixokf")
                    .withRecommendations(Arrays.asList("inljqepqwhixmo", "stshiy")),
                new DpmErrorInfo().withErrorString("velfcldu")
                    .withRecommendations(Arrays.asList("irdsvuwcob", "egstmninwjizci", "nghgshej", "tbxqmuluxlxq")),
                new DpmErrorInfo().withErrorString("nersb")
                    .withRecommendations(Arrays.asList("crwnamikz", "brqbsmswzi")),
                new DpmErrorInfo().withErrorString("fuhok")
                    .withRecommendations(Arrays.asList("swhvhczznvfbycj", "xjww", "xzv", "mwmxqhndvnoamld"))))
            .withExtendedInfo(new DpmJobExtendedInfo()
                .withTasksList(Arrays.asList(
                    new DpmJobTaskDetails().withTaskId("hdjhhflz")
                        .withStartTime(OffsetDateTime.parse("2021-09-01T03:30:12Z"))
                        .withEndTime(OffsetDateTime.parse("2021-01-13T01:47:16Z"))
                        .withDuration(Duration.parse("PT140H9M21S"))
                        .withStatus("lnjetaglt"),
                    new DpmJobTaskDetails().withTaskId("oatftgzpnpbswvef")
                        .withStartTime(OffsetDateTime.parse("2021-04-22T04:47:20Z"))
                        .withEndTime(OffsetDateTime.parse("2021-01-31T21:33:12Z"))
                        .withDuration(Duration.parse("PT230H41M15S"))
                        .withStatus("zihmipgawtxxpky")))
                .withPropertyBag(mapOf("pcycilrmcaykg", "cjxgrytf", "pndfcpfnznt", "noxuztrksx", "xuzvoamktcqi",
                    "jtwkjaos", "rtltla", "smgbzahgxqdl"))
                .withDynamicErrorMessage("ltzkatbhjmznnb"));
        model = BinaryData.fromObject(model).toObject(DpmJob.class);
        Assertions.assertEquals("qeqala", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.MAB, model.backupManagementType());
        Assertions.assertEquals("gunbtgfebwlnbm", model.operation());
        Assertions.assertEquals("reeudzqavb", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-18T03:24:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T15:28:46Z"), model.endTime());
        Assertions.assertEquals("lyyzglgouwtlmjj", model.activityId());
        Assertions.assertEquals(Duration.parse("PT177H19M41S"), model.duration());
        Assertions.assertEquals("gywwpgjxs", model.dpmServerName());
        Assertions.assertEquals("tf", model.containerName());
        Assertions.assertEquals("gicgaaoepttaq", model.containerType());
        Assertions.assertEquals("dewemxswv", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("hkfkimrtixokf", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("inljqepqwhixmo", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("hdjhhflz", model.extendedInfo().tasksList().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T03:30:12Z"),
            model.extendedInfo().tasksList().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T01:47:16Z"),
            model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT140H9M21S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("lnjetaglt", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("cjxgrytf", model.extendedInfo().propertyBag().get("pcycilrmcaykg"));
        Assertions.assertEquals("ltzkatbhjmznnb", model.extendedInfo().dynamicErrorMessage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
