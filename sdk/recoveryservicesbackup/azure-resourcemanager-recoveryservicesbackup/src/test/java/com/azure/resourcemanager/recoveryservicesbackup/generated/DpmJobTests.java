// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DpmJobTests {
    @Test
    public void testDeserialize() {
        DpmJob model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"DpmJob\",\"duration\":\"PT198H48M45S\",\"dpmServerName\":\"evwqqxeyskonq\",\"containerName\":\"nkfkbgbzb\",\"containerType\":\"xeqoc\",\"workloadType\":\"mygvkzqkj\",\"actionsInfo\":[\"Invalid\",\"Invalid\"],\"errorDetails\":[{\"errorString\":\"ezrxcczurtleipqx\",\"recommendations\":[\"vz\"]},{\"errorString\":\"zvd\",\"recommendations\":[\"d\"]},{\"errorString\":\"zmqpnodawopqhewj\",\"recommendations\":[\"cgsbost\",\"eln\",\"la\",\"utmzlbiojlvfhrbb\"]},{\"errorString\":\"eqvcwwyyurmoch\",\"recommendations\":[\"prsnmokayzejn\",\"lbkpb\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"ljhah\",\"startTime\":\"2021-06-15T01:10:11Z\",\"endTime\":\"2021-01-17T08:38:30Z\",\"duration\":\"PT39H19M57S\",\"status\":\"nwieholewjw\"},{\"taskId\":\"ubwefqs\",\"startTime\":\"2021-09-02T16:11:18Z\",\"endTime\":\"2021-06-03T00:57:38Z\",\"duration\":\"PT18H36M33S\",\"status\":\"rrqwexjk\"},{\"taskId\":\"xap\",\"startTime\":\"2021-06-27T06:12:14Z\",\"endTime\":\"2021-10-30T06:15:08Z\",\"duration\":\"PT204H40S\",\"status\":\"bpudcdab\"}],\"propertyBag\":{\"sqbuc\":\"pwyawbz\",\"yexaoguy\":\"jg\"},\"dynamicErrorMessage\":\"p\"},\"entityFriendlyName\":\"sdaultxij\",\"backupManagementType\":\"AzureWorkload\",\"operation\":\"qwazlnqnmcjngzq\",\"status\":\"xtbjwgnyfusfzsv\",\"startTime\":\"2021-04-20T08:13:28Z\",\"endTime\":\"2021-03-01T07:50:01Z\",\"activityId\":\"jqg\"}")
                .toObject(DpmJob.class);
        Assertions.assertEquals("sdaultxij", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_WORKLOAD, model.backupManagementType());
        Assertions.assertEquals("qwazlnqnmcjngzq", model.operation());
        Assertions.assertEquals("xtbjwgnyfusfzsv", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-20T08:13:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-01T07:50:01Z"), model.endTime());
        Assertions.assertEquals("jqg", model.activityId());
        Assertions.assertEquals(Duration.parse("PT198H48M45S"), model.duration());
        Assertions.assertEquals("evwqqxeyskonq", model.dpmServerName());
        Assertions.assertEquals("nkfkbgbzb", model.containerName());
        Assertions.assertEquals("xeqoc", model.containerType());
        Assertions.assertEquals("mygvkzqkj", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("ezrxcczurtleipqx", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("vz", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("ljhah", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-15T01:10:11Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-17T08:38:30Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT39H19M57S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("nwieholewjw", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("pwyawbz", model.extendedInfo().propertyBag().get("sqbuc"));
        Assertions.assertEquals("p", model.extendedInfo().dynamicErrorMessage());
    }

    @Test
    public void testSerialize() {
        DpmJob model =
            new DpmJob()
                .withEntityFriendlyName("sdaultxij")
                .withBackupManagementType(BackupManagementType.AZURE_WORKLOAD)
                .withOperation("qwazlnqnmcjngzq")
                .withStatus("xtbjwgnyfusfzsv")
                .withStartTime(OffsetDateTime.parse("2021-04-20T08:13:28Z"))
                .withEndTime(OffsetDateTime.parse("2021-03-01T07:50:01Z"))
                .withActivityId("jqg")
                .withDuration(Duration.parse("PT198H48M45S"))
                .withDpmServerName("evwqqxeyskonq")
                .withContainerName("nkfkbgbzb")
                .withContainerType("xeqoc")
                .withWorkloadType("mygvkzqkj")
                .withActionsInfo(Arrays.asList(JobSupportedAction.INVALID, JobSupportedAction.INVALID))
                .withErrorDetails(
                    Arrays
                        .asList(
                            new DpmErrorInfo()
                                .withErrorString("ezrxcczurtleipqx")
                                .withRecommendations(Arrays.asList("vz")),
                            new DpmErrorInfo().withErrorString("zvd").withRecommendations(Arrays.asList("d")),
                            new DpmErrorInfo()
                                .withErrorString("zmqpnodawopqhewj")
                                .withRecommendations(Arrays.asList("cgsbost", "eln", "la", "utmzlbiojlvfhrbb")),
                            new DpmErrorInfo()
                                .withErrorString("eqvcwwyyurmoch")
                                .withRecommendations(Arrays.asList("prsnmokayzejn", "lbkpb"))))
                .withExtendedInfo(
                    new DpmJobExtendedInfo()
                        .withTasksList(
                            Arrays
                                .asList(
                                    new DpmJobTaskDetails()
                                        .withTaskId("ljhah")
                                        .withStartTime(OffsetDateTime.parse("2021-06-15T01:10:11Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-01-17T08:38:30Z"))
                                        .withDuration(Duration.parse("PT39H19M57S"))
                                        .withStatus("nwieholewjw"),
                                    new DpmJobTaskDetails()
                                        .withTaskId("ubwefqs")
                                        .withStartTime(OffsetDateTime.parse("2021-09-02T16:11:18Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-06-03T00:57:38Z"))
                                        .withDuration(Duration.parse("PT18H36M33S"))
                                        .withStatus("rrqwexjk"),
                                    new DpmJobTaskDetails()
                                        .withTaskId("xap")
                                        .withStartTime(OffsetDateTime.parse("2021-06-27T06:12:14Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-10-30T06:15:08Z"))
                                        .withDuration(Duration.parse("PT204H40S"))
                                        .withStatus("bpudcdab")))
                        .withPropertyBag(mapOf("sqbuc", "pwyawbz", "yexaoguy", "jg"))
                        .withDynamicErrorMessage("p"));
        model = BinaryData.fromObject(model).toObject(DpmJob.class);
        Assertions.assertEquals("sdaultxij", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_WORKLOAD, model.backupManagementType());
        Assertions.assertEquals("qwazlnqnmcjngzq", model.operation());
        Assertions.assertEquals("xtbjwgnyfusfzsv", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-20T08:13:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-01T07:50:01Z"), model.endTime());
        Assertions.assertEquals("jqg", model.activityId());
        Assertions.assertEquals(Duration.parse("PT198H48M45S"), model.duration());
        Assertions.assertEquals("evwqqxeyskonq", model.dpmServerName());
        Assertions.assertEquals("nkfkbgbzb", model.containerName());
        Assertions.assertEquals("xeqoc", model.containerType());
        Assertions.assertEquals("mygvkzqkj", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.INVALID, model.actionsInfo().get(0));
        Assertions.assertEquals("ezrxcczurtleipqx", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("vz", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("ljhah", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-15T01:10:11Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-17T08:38:30Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT39H19M57S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("nwieholewjw", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("pwyawbz", model.extendedInfo().propertyBag().get("sqbuc"));
        Assertions.assertEquals("p", model.extendedInfo().dynamicErrorMessage());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
