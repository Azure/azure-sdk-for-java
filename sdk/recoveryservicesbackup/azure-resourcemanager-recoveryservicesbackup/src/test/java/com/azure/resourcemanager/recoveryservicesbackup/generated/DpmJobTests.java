// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmErrorInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJob;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobExtendedInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.DpmJobTaskDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.JobSupportedAction;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DpmJobTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DpmJob model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"DpmJob\",\"duration\":\"PT80H30M8S\",\"dpmServerName\":\"dsdaultxijjumf\",\"containerName\":\"azlnqnmcjngzqdqx\",\"containerType\":\"jw\",\"workloadType\":\"yfu\",\"actionsInfo\":[\"Cancellable\",\"Invalid\",\"Cancellable\",\"Cancellable\"],\"errorDetails\":[{\"errorString\":\"hajqglcfh\",\"recommendations\":[\"qryxyn\",\"nzrdpsovwxz\",\"ptgoeiybbabp\"]},{\"errorString\":\"vf\",\"recommendations\":[\"vntjlrigjk\",\"kyrioovzid\",\"xwaabzmifrygznmm\",\"xrizkzobgop\"]},{\"errorString\":\"hsln\",\"recommendations\":[\"ieixynllxe\",\"wcrojphslhcaw\",\"u\"]}],\"extendedInfo\":{\"tasksList\":[{\"taskId\":\"fmvigorqjbttzh\",\"startTime\":\"2021-01-05T10:30:14Z\",\"endTime\":\"2021-06-26T20:46:59Z\",\"duration\":\"PT86H11M32S\",\"status\":\"onqjujeickpzvcpo\"},{\"taskId\":\"xelnwc\",\"startTime\":\"2021-11-21T15:33:29Z\",\"endTime\":\"2021-01-02T00:23:01Z\",\"duration\":\"PT72H52M43S\",\"status\":\"xm\"},{\"taskId\":\"mkqscaz\",\"startTime\":\"2021-02-06T07:38:24Z\",\"endTime\":\"2021-01-07T08:40:37Z\",\"duration\":\"PT82H8M45S\",\"status\":\"uamwabzxrvxc\"}],\"propertyBag\":{\"gzwywak\":\"sphaivmxyasflvg\",\"ljhlnymzotq\":\"ihknsmjbl\",\"mv\":\"ryuzcbmqqv\"},\"dynamicErrorMessage\":\"gtayxonsupeujlz\"},\"entityFriendlyName\":\"hcvsqltnzoi\",\"backupManagementType\":\"AzureStorage\",\"operation\":\"gnxf\",\"status\":\"onmpqoxwdof\",\"startTime\":\"2021-04-15T20:45:57Z\",\"endTime\":\"2020-12-26T13:10:46Z\",\"activityId\":\"eiiqbim\"}")
                .toObject(DpmJob.class);
        Assertions.assertEquals("hcvsqltnzoi", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_STORAGE, model.backupManagementType());
        Assertions.assertEquals("gnxf", model.operation());
        Assertions.assertEquals("onmpqoxwdof", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T20:45:57Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T13:10:46Z"), model.endTime());
        Assertions.assertEquals("eiiqbim", model.activityId());
        Assertions.assertEquals(Duration.parse("PT80H30M8S"), model.duration());
        Assertions.assertEquals("dsdaultxijjumf", model.dpmServerName());
        Assertions.assertEquals("azlnqnmcjngzqdqx", model.containerName());
        Assertions.assertEquals("jw", model.containerType());
        Assertions.assertEquals("yfu", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.CANCELLABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("hajqglcfh", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("qryxyn", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("fmvigorqjbttzh", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-05T10:30:14Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-26T20:46:59Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT86H11M32S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("onqjujeickpzvcpo", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("sphaivmxyasflvg", model.extendedInfo().propertyBag().get("gzwywak"));
        Assertions.assertEquals("gtayxonsupeujlz", model.extendedInfo().dynamicErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DpmJob model =
            new DpmJob()
                .withEntityFriendlyName("hcvsqltnzoi")
                .withBackupManagementType(BackupManagementType.AZURE_STORAGE)
                .withOperation("gnxf")
                .withStatus("onmpqoxwdof")
                .withStartTime(OffsetDateTime.parse("2021-04-15T20:45:57Z"))
                .withEndTime(OffsetDateTime.parse("2020-12-26T13:10:46Z"))
                .withActivityId("eiiqbim")
                .withDuration(Duration.parse("PT80H30M8S"))
                .withDpmServerName("dsdaultxijjumf")
                .withContainerName("azlnqnmcjngzqdqx")
                .withContainerType("jw")
                .withWorkloadType("yfu")
                .withActionsInfo(
                    Arrays
                        .asList(
                            JobSupportedAction.CANCELLABLE,
                            JobSupportedAction.INVALID,
                            JobSupportedAction.CANCELLABLE,
                            JobSupportedAction.CANCELLABLE))
                .withErrorDetails(
                    Arrays
                        .asList(
                            new DpmErrorInfo()
                                .withErrorString("hajqglcfh")
                                .withRecommendations(Arrays.asList("qryxyn", "nzrdpsovwxz", "ptgoeiybbabp")),
                            new DpmErrorInfo()
                                .withErrorString("vf")
                                .withRecommendations(
                                    Arrays.asList("vntjlrigjk", "kyrioovzid", "xwaabzmifrygznmm", "xrizkzobgop")),
                            new DpmErrorInfo()
                                .withErrorString("hsln")
                                .withRecommendations(Arrays.asList("ieixynllxe", "wcrojphslhcaw", "u"))))
                .withExtendedInfo(
                    new DpmJobExtendedInfo()
                        .withTasksList(
                            Arrays
                                .asList(
                                    new DpmJobTaskDetails()
                                        .withTaskId("fmvigorqjbttzh")
                                        .withStartTime(OffsetDateTime.parse("2021-01-05T10:30:14Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-06-26T20:46:59Z"))
                                        .withDuration(Duration.parse("PT86H11M32S"))
                                        .withStatus("onqjujeickpzvcpo"),
                                    new DpmJobTaskDetails()
                                        .withTaskId("xelnwc")
                                        .withStartTime(OffsetDateTime.parse("2021-11-21T15:33:29Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-01-02T00:23:01Z"))
                                        .withDuration(Duration.parse("PT72H52M43S"))
                                        .withStatus("xm"),
                                    new DpmJobTaskDetails()
                                        .withTaskId("mkqscaz")
                                        .withStartTime(OffsetDateTime.parse("2021-02-06T07:38:24Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-01-07T08:40:37Z"))
                                        .withDuration(Duration.parse("PT82H8M45S"))
                                        .withStatus("uamwabzxrvxc")))
                        .withPropertyBag(
                            mapOf("gzwywak", "sphaivmxyasflvg", "ljhlnymzotq", "ihknsmjbl", "mv", "ryuzcbmqqv"))
                        .withDynamicErrorMessage("gtayxonsupeujlz"));
        model = BinaryData.fromObject(model).toObject(DpmJob.class);
        Assertions.assertEquals("hcvsqltnzoi", model.entityFriendlyName());
        Assertions.assertEquals(BackupManagementType.AZURE_STORAGE, model.backupManagementType());
        Assertions.assertEquals("gnxf", model.operation());
        Assertions.assertEquals("onmpqoxwdof", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T20:45:57Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T13:10:46Z"), model.endTime());
        Assertions.assertEquals("eiiqbim", model.activityId());
        Assertions.assertEquals(Duration.parse("PT80H30M8S"), model.duration());
        Assertions.assertEquals("dsdaultxijjumf", model.dpmServerName());
        Assertions.assertEquals("azlnqnmcjngzqdqx", model.containerName());
        Assertions.assertEquals("jw", model.containerType());
        Assertions.assertEquals("yfu", model.workloadType());
        Assertions.assertEquals(JobSupportedAction.CANCELLABLE, model.actionsInfo().get(0));
        Assertions.assertEquals("hajqglcfh", model.errorDetails().get(0).errorString());
        Assertions.assertEquals("qryxyn", model.errorDetails().get(0).recommendations().get(0));
        Assertions.assertEquals("fmvigorqjbttzh", model.extendedInfo().tasksList().get(0).taskId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-05T10:30:14Z"), model.extendedInfo().tasksList().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-26T20:46:59Z"), model.extendedInfo().tasksList().get(0).endTime());
        Assertions.assertEquals(Duration.parse("PT86H11M32S"), model.extendedInfo().tasksList().get(0).duration());
        Assertions.assertEquals("onqjujeickpzvcpo", model.extendedInfo().tasksList().get(0).status());
        Assertions.assertEquals("sphaivmxyasflvg", model.extendedInfo().propertyBag().get("gzwywak"));
        Assertions.assertEquals("gtayxonsupeujlz", model.extendedInfo().dynamicErrorMessage());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
