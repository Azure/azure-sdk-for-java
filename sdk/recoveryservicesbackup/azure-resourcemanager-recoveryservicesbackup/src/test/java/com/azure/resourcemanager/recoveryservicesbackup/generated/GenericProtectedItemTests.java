// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericProtectedItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericProtectedItem model =
            BinaryData
                .fromString(
                    "{\"protectedItemType\":\"GenericProtectedItem\",\"friendlyName\":\"rqunjq\",\"policyState\":\"enx\",\"protectionState\":\"ProtectionPaused\",\"protectedItemId\":6042228062929468639,\"sourceAssociations\":{\"awtqabpxuckpgg\":\"kifmjn\"},\"fabricName\":\"wey\",\"backupManagementType\":\"DefaultBackup\",\"workloadType\":\"AzureSqlDb\",\"containerName\":\"sn\",\"sourceResourceId\":\"fl\",\"policyId\":\"mpizru\",\"lastRecoveryPoint\":\"2021-06-07T16:10:29Z\",\"backupSetName\":\"xpxiwfcngjs\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2020-12-29T21:58:50Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"kzjv\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"fgrwsdpgratzvz\",\"glbyvi\"],\"isArchiveEnabled\":true,\"policyName\":\"brxkjzwr\",\"softDeleteRetentionPeriodInDays\":734526411}")
                .toObject(GenericProtectedItem.class);
        Assertions.assertEquals("sn", model.containerName());
        Assertions.assertEquals("fl", model.sourceResourceId());
        Assertions.assertEquals("mpizru", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-07T16:10:29Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("xpxiwfcngjs", model.backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T21:58:50Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("kzjv", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("fgrwsdpgratzvz", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("brxkjzwr", model.policyName());
        Assertions.assertEquals(734526411, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("rqunjq", model.friendlyName());
        Assertions.assertEquals("enx", model.policyState());
        Assertions.assertEquals(ProtectionState.PROTECTION_PAUSED, model.protectionState());
        Assertions.assertEquals(6042228062929468639L, model.protectedItemId());
        Assertions.assertEquals("kifmjn", model.sourceAssociations().get("awtqabpxuckpgg"));
        Assertions.assertEquals("wey", model.fabricName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericProtectedItem model =
            new GenericProtectedItem()
                .withContainerName("sn")
                .withSourceResourceId("fl")
                .withPolicyId("mpizru")
                .withLastRecoveryPoint(OffsetDateTime.parse("2021-06-07T16:10:29Z"))
                .withBackupSetName("xpxiwfcngjs")
                .withCreateMode(CreateMode.INVALID)
                .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2020-12-29T21:58:50Z"))
                .withIsScheduledForDeferredDelete(true)
                .withDeferredDeleteTimeRemaining("kzjv")
                .withIsDeferredDeleteScheduleUpcoming(true)
                .withIsRehydrate(true)
                .withResourceGuardOperationRequests(Arrays.asList("fgrwsdpgratzvz", "glbyvi"))
                .withIsArchiveEnabled(true)
                .withPolicyName("brxkjzwr")
                .withSoftDeleteRetentionPeriod(734526411)
                .withFriendlyName("rqunjq")
                .withPolicyState("enx")
                .withProtectionState(ProtectionState.PROTECTION_PAUSED)
                .withProtectedItemId(6042228062929468639L)
                .withSourceAssociations(mapOf("awtqabpxuckpgg", "kifmjn"))
                .withFabricName("wey");
        model = BinaryData.fromObject(model).toObject(GenericProtectedItem.class);
        Assertions.assertEquals("sn", model.containerName());
        Assertions.assertEquals("fl", model.sourceResourceId());
        Assertions.assertEquals("mpizru", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-07T16:10:29Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("xpxiwfcngjs", model.backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T21:58:50Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("kzjv", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("fgrwsdpgratzvz", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("brxkjzwr", model.policyName());
        Assertions.assertEquals(734526411, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("rqunjq", model.friendlyName());
        Assertions.assertEquals("enx", model.policyState());
        Assertions.assertEquals(ProtectionState.PROTECTION_PAUSED, model.protectionState());
        Assertions.assertEquals(6042228062929468639L, model.protectedItemId());
        Assertions.assertEquals("kifmjn", model.sourceAssociations().get("awtqabpxuckpgg"));
        Assertions.assertEquals("wey", model.fabricName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
