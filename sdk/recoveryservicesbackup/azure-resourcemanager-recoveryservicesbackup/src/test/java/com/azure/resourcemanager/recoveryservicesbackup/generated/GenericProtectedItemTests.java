// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericProtectedItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericProtectedItem model = BinaryData.fromString(
            "{\"protectedItemType\":\"GenericProtectedItem\",\"friendlyName\":\"ffm\",\"policyState\":\"kwfbkgo\",\"protectionState\":\"IRPending\",\"protectedItemId\":4651299949849624927,\"sourceAssociations\":{\"clnapxbiygnugjkn\":\"dpizq\"},\"fabricName\":\"mfcttux\",\"backupManagementType\":\"Invalid\",\"workloadType\":\"VMwareVM\",\"containerName\":\"lq\",\"sourceResourceId\":\"quvre\",\"policyId\":\"rnjhvsujztczytqj\",\"lastRecoveryPoint\":\"2021-01-25T05:03:18Z\",\"backupSetName\":\"uunfprnjletlxsm\",\"createMode\":\"Invalid\",\"deferredDeleteTimeInUTC\":\"2021-04-17T08:00:01Z\",\"isScheduledForDeferredDelete\":true,\"deferredDeleteTimeRemaining\":\"amowaziynknlqwzd\",\"isDeferredDeleteScheduleUpcoming\":true,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"szdtmaajquh\",\"xylrjvmtygjbmz\",\"ospspshckf\",\"yjpmspbpssdfppyo\"],\"isArchiveEnabled\":false,\"policyName\":\"yujtvczkcnyx\",\"softDeleteRetentionPeriodInDays\":1296078027,\"vaultId\":\"njdxvglnkvxl\"}")
            .toObject(GenericProtectedItem.class);
        Assertions.assertEquals("lq", model.containerName());
        Assertions.assertEquals("quvre", model.sourceResourceId());
        Assertions.assertEquals("rnjhvsujztczytqj", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-25T05:03:18Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("uunfprnjletlxsm", model.backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-17T08:00:01Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("amowaziynknlqwzd", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("szdtmaajquh", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.isArchiveEnabled());
        Assertions.assertEquals("yujtvczkcnyx", model.policyName());
        Assertions.assertEquals(1296078027, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("ffm", model.friendlyName());
        Assertions.assertEquals("kwfbkgo", model.policyState());
        Assertions.assertEquals(ProtectionState.IRPENDING, model.protectionState());
        Assertions.assertEquals(4651299949849624927L, model.protectedItemId());
        Assertions.assertEquals("dpizq", model.sourceAssociations().get("clnapxbiygnugjkn"));
        Assertions.assertEquals("mfcttux", model.fabricName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericProtectedItem model = new GenericProtectedItem().withContainerName("lq").withSourceResourceId("quvre")
            .withPolicyId("rnjhvsujztczytqj").withLastRecoveryPoint(OffsetDateTime.parse("2021-01-25T05:03:18Z"))
            .withBackupSetName("uunfprnjletlxsm").withCreateMode(CreateMode.INVALID)
            .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-04-17T08:00:01Z"))
            .withIsScheduledForDeferredDelete(true).withDeferredDeleteTimeRemaining("amowaziynknlqwzd")
            .withIsDeferredDeleteScheduleUpcoming(true).withIsRehydrate(true)
            .withResourceGuardOperationRequests(
                Arrays.asList("szdtmaajquh", "xylrjvmtygjbmz", "ospspshckf", "yjpmspbpssdfppyo"))
            .withIsArchiveEnabled(false).withPolicyName("yujtvczkcnyx").withSoftDeleteRetentionPeriod(1296078027)
            .withFriendlyName("ffm").withPolicyState("kwfbkgo").withProtectionState(ProtectionState.IRPENDING)
            .withProtectedItemId(4651299949849624927L).withSourceAssociations(mapOf("clnapxbiygnugjkn", "dpizq"))
            .withFabricName("mfcttux");
        model = BinaryData.fromObject(model).toObject(GenericProtectedItem.class);
        Assertions.assertEquals("lq", model.containerName());
        Assertions.assertEquals("quvre", model.sourceResourceId());
        Assertions.assertEquals("rnjhvsujztczytqj", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-25T05:03:18Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("uunfprnjletlxsm", model.backupSetName());
        Assertions.assertEquals(CreateMode.INVALID, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-17T08:00:01Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(true, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("amowaziynknlqwzd", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(true, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("szdtmaajquh", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(false, model.isArchiveEnabled());
        Assertions.assertEquals("yujtvczkcnyx", model.policyName());
        Assertions.assertEquals(1296078027, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("ffm", model.friendlyName());
        Assertions.assertEquals("kwfbkgo", model.policyState());
        Assertions.assertEquals(ProtectionState.IRPENDING, model.protectionState());
        Assertions.assertEquals(4651299949849624927L, model.protectedItemId());
        Assertions.assertEquals("dpizq", model.sourceAssociations().get("clnapxbiygnugjkn"));
        Assertions.assertEquals("mfcttux", model.fabricName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
