// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericProtectedItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericProtectedItem model = BinaryData.fromString(
            "{\"protectedItemType\":\"GenericProtectedItem\",\"friendlyName\":\"hs\",\"policyState\":\"koj\",\"protectionState\":\"BackupsSuspended\",\"protectedItemId\":1910453689912487458,\"sourceAssociations\":{\"yetefyp\":\"wrpqafgfugsnnf\",\"fjgtixrjvzuy\":\"coc\",\"olbauirop\":\"urmlmuo\",\"onwpnga\":\"ons\"},\"fabricName\":\"n\",\"backupManagementType\":\"AzureStorage\",\"workloadType\":\"SAPAseDatabase\",\"containerName\":\"rtmjfj\",\"sourceResourceId\":\"ccxlzhcoxovnek\",\"policyId\":\"nlusfnrd\",\"lastRecoveryPoint\":\"2021-11-01T20:24:07Z\",\"backupSetName\":\"xrdcqtj\",\"createMode\":\"Default\",\"deferredDeleteTimeInUTC\":\"2021-08-09T19:44:37Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"uslvyjtcvuwkasi\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"ghtuqfecjxey\",\"tuhxuicb\",\"ewmrswnjlxu\",\"rhwpus\"],\"isArchiveEnabled\":true,\"policyName\":\"qehgpd\",\"softDeleteRetentionPeriodInDays\":448724007,\"vaultId\":\"qatucoigebxnc\"}")
            .toObject(GenericProtectedItem.class);
        Assertions.assertEquals("rtmjfj", model.containerName());
        Assertions.assertEquals("ccxlzhcoxovnek", model.sourceResourceId());
        Assertions.assertEquals("nlusfnrd", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-01T20:24:07Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("xrdcqtj", model.backupSetName());
        Assertions.assertEquals(CreateMode.DEFAULT, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-09T19:44:37Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("uslvyjtcvuwkasi", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("ghtuqfecjxey", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("qehgpd", model.policyName());
        Assertions.assertEquals(448724007, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("hs", model.friendlyName());
        Assertions.assertEquals("koj", model.policyState());
        Assertions.assertEquals(ProtectionState.BACKUPS_SUSPENDED, model.protectionState());
        Assertions.assertEquals(1910453689912487458L, model.protectedItemId());
        Assertions.assertEquals("wrpqafgfugsnnf", model.sourceAssociations().get("yetefyp"));
        Assertions.assertEquals("n", model.fabricName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericProtectedItem model = new GenericProtectedItem().withContainerName("rtmjfj")
            .withSourceResourceId("ccxlzhcoxovnek")
            .withPolicyId("nlusfnrd")
            .withLastRecoveryPoint(OffsetDateTime.parse("2021-11-01T20:24:07Z"))
            .withBackupSetName("xrdcqtj")
            .withCreateMode(CreateMode.DEFAULT)
            .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-08-09T19:44:37Z"))
            .withIsScheduledForDeferredDelete(false)
            .withDeferredDeleteTimeRemaining("uslvyjtcvuwkasi")
            .withIsDeferredDeleteScheduleUpcoming(false)
            .withIsRehydrate(true)
            .withResourceGuardOperationRequests(Arrays.asList("ghtuqfecjxey", "tuhxuicb", "ewmrswnjlxu", "rhwpus"))
            .withIsArchiveEnabled(true)
            .withPolicyName("qehgpd")
            .withSoftDeleteRetentionPeriod(448724007)
            .withFriendlyName("hs")
            .withPolicyState("koj")
            .withProtectionState(ProtectionState.BACKUPS_SUSPENDED)
            .withProtectedItemId(1910453689912487458L)
            .withSourceAssociations(
                mapOf("yetefyp", "wrpqafgfugsnnf", "fjgtixrjvzuy", "coc", "olbauirop", "urmlmuo", "onwpnga", "ons"))
            .withFabricName("n");
        model = BinaryData.fromObject(model).toObject(GenericProtectedItem.class);
        Assertions.assertEquals("rtmjfj", model.containerName());
        Assertions.assertEquals("ccxlzhcoxovnek", model.sourceResourceId());
        Assertions.assertEquals("nlusfnrd", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-01T20:24:07Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("xrdcqtj", model.backupSetName());
        Assertions.assertEquals(CreateMode.DEFAULT, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-09T19:44:37Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("uslvyjtcvuwkasi", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("ghtuqfecjxey", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("qehgpd", model.policyName());
        Assertions.assertEquals(448724007, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("hs", model.friendlyName());
        Assertions.assertEquals("koj", model.policyState());
        Assertions.assertEquals(ProtectionState.BACKUPS_SUSPENDED, model.protectionState());
        Assertions.assertEquals(1910453689912487458L, model.protectedItemId());
        Assertions.assertEquals("wrpqafgfugsnnf", model.sourceAssociations().get("yetefyp"));
        Assertions.assertEquals("n", model.fabricName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
