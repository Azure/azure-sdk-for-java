// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.CreateMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.GenericProtectedItem;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenericProtectedItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenericProtectedItem model = BinaryData.fromString(
            "{\"protectedItemType\":\"GenericProtectedItem\",\"friendlyName\":\"sycxhxzgaz\",\"policyState\":\"abo\",\"protectionState\":\"Protected\",\"protectedItemId\":4301721887615555119,\"sourceAssociations\":{\"mtdherngb\":\"pubowsepdfg\"},\"fabricName\":\"juahokqto\",\"backupManagementType\":\"MAB\",\"workloadType\":\"FileFolder\",\"containerName\":\"fshfph\",\"sourceResourceId\":\"nulaiywzejywhsl\",\"policyId\":\"ojpllndnpdwrpqaf\",\"lastRecoveryPoint\":\"2021-05-07T14:23:25Z\",\"backupSetName\":\"snnfhyetefyp\",\"createMode\":\"Recover\",\"deferredDeleteTimeInUTC\":\"2021-10-29T02:50:04Z\",\"isScheduledForDeferredDelete\":false,\"deferredDeleteTimeRemaining\":\"tixr\",\"isDeferredDeleteScheduleUpcoming\":false,\"isRehydrate\":true,\"resourceGuardOperationRequests\":[\"rmlmuowo\",\"bauiropi\"],\"isArchiveEnabled\":true,\"policyName\":\"onwpnga\",\"softDeleteRetentionPeriodInDays\":39519861,\"vaultId\":\"ixjawrtm\"}")
            .toObject(GenericProtectedItem.class);
        Assertions.assertEquals("fshfph", model.containerName());
        Assertions.assertEquals("nulaiywzejywhsl", model.sourceResourceId());
        Assertions.assertEquals("ojpllndnpdwrpqaf", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-07T14:23:25Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("snnfhyetefyp", model.backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T02:50:04Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("tixr", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("rmlmuowo", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("onwpnga", model.policyName());
        Assertions.assertEquals(39519861, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("sycxhxzgaz", model.friendlyName());
        Assertions.assertEquals("abo", model.policyState());
        Assertions.assertEquals(ProtectionState.PROTECTED, model.protectionState());
        Assertions.assertEquals(4301721887615555119L, model.protectedItemId());
        Assertions.assertEquals("pubowsepdfg", model.sourceAssociations().get("mtdherngb"));
        Assertions.assertEquals("juahokqto", model.fabricName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenericProtectedItem model = new GenericProtectedItem().withContainerName("fshfph")
            .withSourceResourceId("nulaiywzejywhsl")
            .withPolicyId("ojpllndnpdwrpqaf")
            .withLastRecoveryPoint(OffsetDateTime.parse("2021-05-07T14:23:25Z"))
            .withBackupSetName("snnfhyetefyp")
            .withCreateMode(CreateMode.RECOVER)
            .withDeferredDeleteTimeInUtc(OffsetDateTime.parse("2021-10-29T02:50:04Z"))
            .withIsScheduledForDeferredDelete(false)
            .withDeferredDeleteTimeRemaining("tixr")
            .withIsDeferredDeleteScheduleUpcoming(false)
            .withIsRehydrate(true)
            .withResourceGuardOperationRequests(Arrays.asList("rmlmuowo", "bauiropi"))
            .withIsArchiveEnabled(true)
            .withPolicyName("onwpnga")
            .withSoftDeleteRetentionPeriod(39519861)
            .withFriendlyName("sycxhxzgaz")
            .withPolicyState("abo")
            .withProtectionState(ProtectionState.PROTECTED)
            .withProtectedItemId(4301721887615555119L)
            .withSourceAssociations(mapOf("mtdherngb", "pubowsepdfg"))
            .withFabricName("juahokqto");
        model = BinaryData.fromObject(model).toObject(GenericProtectedItem.class);
        Assertions.assertEquals("fshfph", model.containerName());
        Assertions.assertEquals("nulaiywzejywhsl", model.sourceResourceId());
        Assertions.assertEquals("ojpllndnpdwrpqaf", model.policyId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-07T14:23:25Z"), model.lastRecoveryPoint());
        Assertions.assertEquals("snnfhyetefyp", model.backupSetName());
        Assertions.assertEquals(CreateMode.RECOVER, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T02:50:04Z"), model.deferredDeleteTimeInUtc());
        Assertions.assertEquals(false, model.isScheduledForDeferredDelete());
        Assertions.assertEquals("tixr", model.deferredDeleteTimeRemaining());
        Assertions.assertEquals(false, model.isDeferredDeleteScheduleUpcoming());
        Assertions.assertEquals(true, model.isRehydrate());
        Assertions.assertEquals("rmlmuowo", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, model.isArchiveEnabled());
        Assertions.assertEquals("onwpnga", model.policyName());
        Assertions.assertEquals(39519861, model.softDeleteRetentionPeriod());
        Assertions.assertEquals("sycxhxzgaz", model.friendlyName());
        Assertions.assertEquals("abo", model.policyState());
        Assertions.assertEquals(ProtectionState.PROTECTED, model.protectionState());
        Assertions.assertEquals(4301721887615555119L, model.protectedItemId());
        Assertions.assertEquals("pubowsepdfg", model.sourceAssociations().get("mtdherngb"));
        Assertions.assertEquals("juahokqto", model.fabricName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
