// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureVmWorkloadProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.PolicyType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SchedulePolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.Settings;
import com.azure.resourcemanager.recoveryservicesbackup.models.SubProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureVmWorkloadProtectionPolicyTests {
    @Test
    public void testDeserialize() {
        AzureVmWorkloadProtectionPolicy model =
            BinaryData
                .fromString(
                    "{\"backupManagementType\":\"AzureWorkload\",\"workLoadType\":\"SAPHanaDBInstance\",\"settings\":{\"timeZone\":\"shmkxmaehvbbxur\",\"issqlcompression\":true,\"isCompression\":true},\"subProtectionPolicy\":[{\"policyType\":\"Full\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{}}],\"makePolicyConsistent\":false,\"protectedItemsCount\":338199100,\"resourceGuardOperationRequests\":[\"pyklyhpluodpvru\",\"dlgzibthostgkt\"]}")
                .toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(338199100, model.protectedItemsCount());
        Assertions.assertEquals("pyklyhpluodpvru", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.SAPHANA_DBINSTANCE, model.workLoadType());
        Assertions.assertEquals("shmkxmaehvbbxur", model.settings().timeZone());
        Assertions.assertEquals(true, model.settings().issqlcompression());
        Assertions.assertEquals(true, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.FULL, model.subProtectionPolicy().get(0).policyType());
        Assertions.assertEquals(false, model.makePolicyConsistent());
    }

    @Test
    public void testSerialize() {
        AzureVmWorkloadProtectionPolicy model =
            new AzureVmWorkloadProtectionPolicy()
                .withProtectedItemsCount(338199100)
                .withResourceGuardOperationRequests(Arrays.asList("pyklyhpluodpvru", "dlgzibthostgkt"))
                .withWorkLoadType(WorkloadType.SAPHANA_DBINSTANCE)
                .withSettings(
                    new Settings().withTimeZone("shmkxmaehvbbxur").withIssqlcompression(true).withIsCompression(true))
                .withSubProtectionPolicy(
                    Arrays
                        .asList(
                            new SubProtectionPolicy()
                                .withPolicyType(PolicyType.FULL)
                                .withSchedulePolicy(new SchedulePolicy())
                                .withRetentionPolicy(new RetentionPolicy())
                                .withTieringPolicy(mapOf())))
                .withMakePolicyConsistent(false);
        model = BinaryData.fromObject(model).toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(338199100, model.protectedItemsCount());
        Assertions.assertEquals("pyklyhpluodpvru", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.SAPHANA_DBINSTANCE, model.workLoadType());
        Assertions.assertEquals("shmkxmaehvbbxur", model.settings().timeZone());
        Assertions.assertEquals(true, model.settings().issqlcompression());
        Assertions.assertEquals(true, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.FULL, model.subProtectionPolicy().get(0).policyType());
        Assertions.assertEquals(false, model.makePolicyConsistent());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
