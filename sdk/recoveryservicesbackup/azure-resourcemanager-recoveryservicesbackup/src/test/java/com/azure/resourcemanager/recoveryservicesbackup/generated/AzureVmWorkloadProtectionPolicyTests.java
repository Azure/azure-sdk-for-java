// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureVmWorkloadProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.PolicyType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SchedulePolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.Settings;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotBackupAdditionalDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.SubProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureVmWorkloadProtectionPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureVmWorkloadProtectionPolicy model = BinaryData.fromString(
            "{\"backupManagementType\":\"AzureWorkload\",\"workLoadType\":\"Sharepoint\",\"settings\":{\"timeZone\":\"grvk\",\"issqlcompression\":true,\"isCompression\":true},\"subProtectionPolicy\":[{\"policyType\":\"Differential\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"vfcluyovwxnbkfe\":{\"tieringMode\":\"DoNotTier\",\"duration\":938334267,\"durationType\":\"Months\"},\"wzdgirujbzbo\":{\"tieringMode\":\"DoNotTier\",\"duration\":357757853,\"durationType\":\"Days\"},\"c\":{\"tieringMode\":\"DoNotTier\",\"duration\":1397036239,\"durationType\":\"Days\"}},\"snapshotBackupAdditionalDetails\":{\"instantRpRetentionRangeInDays\":1359383511,\"instantRPDetails\":\"yujviylwdshfssn\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"ye\",\"identityName\":\"ymsgaojfmwnc\",\"userAssignedIdentityProperties\":{\"clientId\":\"rfh\",\"principalId\":\"ctymoxoftp\"}}}},{\"policyType\":\"Log\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"qjlihhyuspska\":{\"tieringMode\":\"DoNotTier\",\"duration\":148157875,\"durationType\":\"Months\"}},\"snapshotBackupAdditionalDetails\":{\"instantRpRetentionRangeInDays\":2119274239,\"instantRPDetails\":\"fwdgzxulucvp\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"sreuzvxurisjnh\",\"identityName\":\"txifqj\",\"userAssignedIdentityProperties\":{\"clientId\":\"mrhublwpc\",\"principalId\":\"utr\"}}}}],\"makePolicyConsistent\":false,\"protectedItemsCount\":955392211,\"resourceGuardOperationRequests\":[\"tpwoqhihejq\",\"w\",\"pnfqntcyp\",\"xjvfoimwksl\"]}")
            .toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(955392211, model.protectedItemsCount());
        Assertions.assertEquals("tpwoqhihejq", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.SHAREPOINT, model.workLoadType());
        Assertions.assertEquals("grvk", model.settings().timeZone());
        Assertions.assertEquals(true, model.settings().issqlcompression());
        Assertions.assertEquals(true, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.DIFFERENTIAL, model.subProtectionPolicy().get(0).policyType());
        Assertions.assertEquals(TieringMode.DO_NOT_TIER,
            model.subProtectionPolicy().get(0).tieringPolicy().get("vfcluyovwxnbkfe").tieringMode());
        Assertions.assertEquals(938334267,
            model.subProtectionPolicy().get(0).tieringPolicy().get("vfcluyovwxnbkfe").duration());
        Assertions.assertEquals(RetentionDurationType.MONTHS,
            model.subProtectionPolicy().get(0).tieringPolicy().get("vfcluyovwxnbkfe").durationType());
        Assertions.assertEquals(1359383511,
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("yujviylwdshfssn",
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("ye", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("ymsgaojfmwnc", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("rfh", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ctymoxoftp", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.makePolicyConsistent());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureVmWorkloadProtectionPolicy model
            = new AzureVmWorkloadProtectionPolicy().withProtectedItemsCount(955392211)
                .withResourceGuardOperationRequests(Arrays.asList("tpwoqhihejq", "w", "pnfqntcyp", "xjvfoimwksl"))
                .withWorkLoadType(WorkloadType.SHAREPOINT)
                .withSettings(new Settings().withTimeZone("grvk").withIssqlcompression(
                    true).withIsCompression(
                        true))
                .withSubProtectionPolicy(
                    Arrays.asList(
                        new SubProtectionPolicy().withPolicyType(PolicyType.DIFFERENTIAL)
                            .withSchedulePolicy(new SchedulePolicy()).withRetentionPolicy(new RetentionPolicy())
                            .withTieringPolicy(mapOf(
                                "vfcluyovwxnbkfe", new TieringPolicy().withTieringMode(TieringMode.DO_NOT_TIER)
                                    .withDuration(938334267).withDurationType(RetentionDurationType.MONTHS),
                                "wzdgirujbzbo",
                                new TieringPolicy().withTieringMode(TieringMode.DO_NOT_TIER).withDuration(357757853)
                                    .withDurationType(RetentionDurationType.DAYS),
                                "c",
                                new TieringPolicy().withTieringMode(TieringMode.DO_NOT_TIER).withDuration(1397036239)
                                    .withDurationType(RetentionDurationType.DAYS)))
                            .withSnapshotBackupAdditionalDetails(new SnapshotBackupAdditionalDetails()
                                .withInstantRpRetentionRangeInDays(1359383511).withInstantRPDetails("yujviylwdshfssn")
                                .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                                    .withIdentityArmId("ye").withIdentityName("ymsgaojfmwnc")
                                    .withUserAssignedIdentityProperties(new UserAssignedIdentityProperties()
                                        .withClientId("rfh").withPrincipalId("ctymoxoftp")))),
                        new SubProtectionPolicy().withPolicyType(PolicyType.LOG)
                            .withSchedulePolicy(new SchedulePolicy()).withRetentionPolicy(new RetentionPolicy())
                            .withTieringPolicy(mapOf("qjlihhyuspska",
                                new TieringPolicy().withTieringMode(TieringMode.DO_NOT_TIER).withDuration(148157875)
                                    .withDurationType(RetentionDurationType.MONTHS)))
                            .withSnapshotBackupAdditionalDetails(new SnapshotBackupAdditionalDetails()
                                .withInstantRpRetentionRangeInDays(2119274239).withInstantRPDetails("fwdgzxulucvp")
                                .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                                    .withIdentityArmId("sreuzvxurisjnh").withIdentityName("txifqj")
                                    .withUserAssignedIdentityProperties(new UserAssignedIdentityProperties()
                                        .withClientId("mrhublwpc").withPrincipalId("utr"))))))
                .withMakePolicyConsistent(false);
        model = BinaryData.fromObject(model).toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(955392211, model.protectedItemsCount());
        Assertions.assertEquals("tpwoqhihejq", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.SHAREPOINT, model.workLoadType());
        Assertions.assertEquals("grvk", model.settings().timeZone());
        Assertions.assertEquals(true, model.settings().issqlcompression());
        Assertions.assertEquals(true, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.DIFFERENTIAL, model.subProtectionPolicy().get(0).policyType());
        Assertions.assertEquals(TieringMode.DO_NOT_TIER,
            model.subProtectionPolicy().get(0).tieringPolicy().get("vfcluyovwxnbkfe").tieringMode());
        Assertions.assertEquals(938334267,
            model.subProtectionPolicy().get(0).tieringPolicy().get("vfcluyovwxnbkfe").duration());
        Assertions.assertEquals(RetentionDurationType.MONTHS,
            model.subProtectionPolicy().get(0).tieringPolicy().get("vfcluyovwxnbkfe").durationType());
        Assertions.assertEquals(1359383511,
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("yujviylwdshfssn",
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("ye", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("ymsgaojfmwnc", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("rfh", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ctymoxoftp", model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails()
            .userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.makePolicyConsistent());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
