// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureVmWorkloadProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.PolicyType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SchedulePolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.Settings;
import com.azure.resourcemanager.recoveryservicesbackup.models.SubProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureVmWorkloadProtectionPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureVmWorkloadProtectionPolicy model =
            BinaryData
                .fromString(
                    "{\"backupManagementType\":\"AzureWorkload\",\"workLoadType\":\"Exchange\",\"settings\":{\"timeZone\":\"uutpwoqhih\",\"issqlcompression\":false,\"isCompression\":false},\"subProtectionPolicy\":[{\"policyType\":\"Log\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"foimwkslircizjxv\":{\"tieringMode\":\"TierRecommended\",\"duration\":613728557,\"durationType\":\"Days\"},\"vlhv\":{\"tieringMode\":\"TierAfter\",\"duration\":1161175344,\"durationType\":\"Days\"}}},{\"policyType\":\"Incremental\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"wjslbiwkojgcyzt\":{\"tieringMode\":\"TierAfter\",\"duration\":381355743,\"durationType\":\"Days\"},\"eqphchqnrnr\":{\"tieringMode\":\"TierAfter\",\"duration\":672857926,\"durationType\":\"Invalid\"},\"ykqgaifmvik\":{\"tieringMode\":\"DoNotTier\",\"duration\":1644281123,\"durationType\":\"Weeks\"}}},{\"policyType\":\"Full\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"xcv\":{\"tieringMode\":\"Invalid\",\"duration\":1006090143,\"durationType\":\"Years\"},\"volvtn\":{\"tieringMode\":\"Invalid\",\"duration\":986033506,\"durationType\":\"Days\"},\"mjdftu\":{\"tieringMode\":\"TierAfter\",\"duration\":1191725223,\"durationType\":\"Months\"},\"eamtmcz\":{\"tieringMode\":\"TierRecommended\",\"duration\":184092911,\"durationType\":\"Invalid\"}}}],\"makePolicyConsistent\":false,\"protectedItemsCount\":418634069,\"resourceGuardOperationRequests\":[\"w\",\"qioknssxmojm\"]}")
                .toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(418634069, model.protectedItemsCount());
        Assertions.assertEquals("w", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.EXCHANGE, model.workLoadType());
        Assertions.assertEquals("uutpwoqhih", model.settings().timeZone());
        Assertions.assertEquals(false, model.settings().issqlcompression());
        Assertions.assertEquals(false, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.LOG, model.subProtectionPolicy().get(0).policyType());
        Assertions
            .assertEquals(
                TieringMode.TIER_RECOMMENDED,
                model.subProtectionPolicy().get(0).tieringPolicy().get("foimwkslircizjxv").tieringMode());
        Assertions
            .assertEquals(
                613728557, model.subProtectionPolicy().get(0).tieringPolicy().get("foimwkslircizjxv").duration());
        Assertions
            .assertEquals(
                RetentionDurationType.DAYS,
                model.subProtectionPolicy().get(0).tieringPolicy().get("foimwkslircizjxv").durationType());
        Assertions.assertEquals(false, model.makePolicyConsistent());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureVmWorkloadProtectionPolicy model =
            new AzureVmWorkloadProtectionPolicy()
                .withProtectedItemsCount(418634069)
                .withResourceGuardOperationRequests(Arrays.asList("w", "qioknssxmojm"))
                .withWorkLoadType(WorkloadType.EXCHANGE)
                .withSettings(
                    new Settings().withTimeZone("uutpwoqhih").withIssqlcompression(false).withIsCompression(false))
                .withSubProtectionPolicy(
                    Arrays
                        .asList(
                            new SubProtectionPolicy()
                                .withPolicyType(PolicyType.LOG)
                                .withSchedulePolicy(new SchedulePolicy())
                                .withRetentionPolicy(new RetentionPolicy())
                                .withTieringPolicy(
                                    mapOf(
                                        "foimwkslircizjxv",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.TIER_RECOMMENDED)
                                            .withDuration(613728557)
                                            .withDurationType(RetentionDurationType.DAYS),
                                        "vlhv",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.TIER_AFTER)
                                            .withDuration(1161175344)
                                            .withDurationType(RetentionDurationType.DAYS))),
                            new SubProtectionPolicy()
                                .withPolicyType(PolicyType.INCREMENTAL)
                                .withSchedulePolicy(new SchedulePolicy())
                                .withRetentionPolicy(new RetentionPolicy())
                                .withTieringPolicy(
                                    mapOf(
                                        "wjslbiwkojgcyzt",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.TIER_AFTER)
                                            .withDuration(381355743)
                                            .withDurationType(RetentionDurationType.DAYS),
                                        "eqphchqnrnr",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.TIER_AFTER)
                                            .withDuration(672857926)
                                            .withDurationType(RetentionDurationType.INVALID),
                                        "ykqgaifmvik",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.DO_NOT_TIER)
                                            .withDuration(1644281123)
                                            .withDurationType(RetentionDurationType.WEEKS))),
                            new SubProtectionPolicy()
                                .withPolicyType(PolicyType.FULL)
                                .withSchedulePolicy(new SchedulePolicy())
                                .withRetentionPolicy(new RetentionPolicy())
                                .withTieringPolicy(
                                    mapOf(
                                        "xcv",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.INVALID)
                                            .withDuration(1006090143)
                                            .withDurationType(RetentionDurationType.YEARS),
                                        "volvtn",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.INVALID)
                                            .withDuration(986033506)
                                            .withDurationType(RetentionDurationType.DAYS),
                                        "mjdftu",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.TIER_AFTER)
                                            .withDuration(1191725223)
                                            .withDurationType(RetentionDurationType.MONTHS),
                                        "eamtmcz",
                                        new TieringPolicy()
                                            .withTieringMode(TieringMode.TIER_RECOMMENDED)
                                            .withDuration(184092911)
                                            .withDurationType(RetentionDurationType.INVALID)))))
                .withMakePolicyConsistent(false);
        model = BinaryData.fromObject(model).toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(418634069, model.protectedItemsCount());
        Assertions.assertEquals("w", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.EXCHANGE, model.workLoadType());
        Assertions.assertEquals("uutpwoqhih", model.settings().timeZone());
        Assertions.assertEquals(false, model.settings().issqlcompression());
        Assertions.assertEquals(false, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.LOG, model.subProtectionPolicy().get(0).policyType());
        Assertions
            .assertEquals(
                TieringMode.TIER_RECOMMENDED,
                model.subProtectionPolicy().get(0).tieringPolicy().get("foimwkslircizjxv").tieringMode());
        Assertions
            .assertEquals(
                613728557, model.subProtectionPolicy().get(0).tieringPolicy().get("foimwkslircizjxv").duration());
        Assertions
            .assertEquals(
                RetentionDurationType.DAYS,
                model.subProtectionPolicy().get(0).tieringPolicy().get("foimwkslircizjxv").durationType());
        Assertions.assertEquals(false, model.makePolicyConsistent());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
