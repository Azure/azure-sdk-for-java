// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureVmWorkloadProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.PolicyType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionDurationType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RetentionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.SchedulePolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.Settings;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotBackupAdditionalDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.SubProtectionPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.TieringPolicy;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import com.azure.resourcemanager.recoveryservicesbackup.models.WorkloadType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureVmWorkloadProtectionPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureVmWorkloadProtectionPolicy model = BinaryData.fromString(
            "{\"backupManagementType\":\"AzureWorkload\",\"workLoadType\":\"AzureSqlDb\",\"settings\":{\"timeZone\":\"n\",\"issqlcompression\":true,\"isCompression\":false},\"subProtectionPolicy\":[{\"policyType\":\"SnapshotCopyOnlyFull\",\"schedulePolicy\":{\"schedulePolicyType\":\"SchedulePolicy\"},\"retentionPolicy\":{\"retentionPolicyType\":\"RetentionPolicy\"},\"tieringPolicy\":{\"izjx\":{\"tieringMode\":\"TierRecommended\",\"duration\":37072566,\"durationType\":\"Weeks\"},\"cvlhv\":{\"tieringMode\":\"TierRecommended\",\"duration\":843222419,\"durationType\":\"Days\"}},\"snapshotBackupAdditionalDetails\":{\"instantRpRetentionRangeInDays\":370516258,\"instantRPDetails\":\"t\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"twnawjslbiwkojgc\",\"identityName\":\"tsf\",\"userAssignedIdentityProperties\":{\"clientId\":\"baeqphc\",\"principalId\":\"nrnrp\"}}}}],\"makePolicyConsistent\":true,\"protectedItemsCount\":1909534369,\"resourceGuardOperationRequests\":[\"k\",\"gaifmvik\",\"bydvkhbejdz\"]}")
            .toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(1909534369, model.protectedItemsCount());
        Assertions.assertEquals("k", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.AZURE_SQL_DB, model.workLoadType());
        Assertions.assertEquals("n", model.settings().timeZone());
        Assertions.assertEquals(true, model.settings().issqlcompression());
        Assertions.assertEquals(false, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.SNAPSHOT_COPY_ONLY_FULL, model.subProtectionPolicy().get(0).policyType());
        Assertions.assertEquals(TieringMode.TIER_RECOMMENDED,
            model.subProtectionPolicy().get(0).tieringPolicy().get("izjx").tieringMode());
        Assertions.assertEquals(37072566, model.subProtectionPolicy().get(0).tieringPolicy().get("izjx").duration());
        Assertions.assertEquals(RetentionDurationType.WEEKS,
            model.subProtectionPolicy().get(0).tieringPolicy().get("izjx").durationType());
        Assertions.assertEquals(370516258,
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("t",
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("twnawjslbiwkojgc",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .identityArmId());
        Assertions.assertEquals("tsf",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .identityName());
        Assertions.assertEquals("baeqphc",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .clientId());
        Assertions.assertEquals("nrnrp",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .principalId());
        Assertions.assertEquals(true, model.makePolicyConsistent());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureVmWorkloadProtectionPolicy model = new AzureVmWorkloadProtectionPolicy()
            .withProtectedItemsCount(1909534369)
            .withResourceGuardOperationRequests(Arrays.asList("k", "gaifmvik", "bydvkhbejdz"))
            .withWorkLoadType(WorkloadType.AZURE_SQL_DB)
            .withSettings(new Settings().withTimeZone("n").withIssqlcompression(true).withIsCompression(false))
            .withSubProtectionPolicy(Arrays.asList(new SubProtectionPolicy()
                .withPolicyType(PolicyType.SNAPSHOT_COPY_ONLY_FULL)
                .withSchedulePolicy(new SchedulePolicy())
                .withRetentionPolicy(new RetentionPolicy())
                .withTieringPolicy(mapOf("izjx",
                    new TieringPolicy().withTieringMode(TieringMode.TIER_RECOMMENDED)
                        .withDuration(37072566)
                        .withDurationType(RetentionDurationType.WEEKS),
                    "cvlhv",
                    new TieringPolicy().withTieringMode(TieringMode.TIER_RECOMMENDED)
                        .withDuration(843222419)
                        .withDurationType(RetentionDurationType.DAYS)))
                .withSnapshotBackupAdditionalDetails(new SnapshotBackupAdditionalDetails()
                    .withInstantRpRetentionRangeInDays(370516258)
                    .withInstantRPDetails("t")
                    .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails()
                        .withIdentityArmId("twnawjslbiwkojgc")
                        .withIdentityName("tsf")
                        .withUserAssignedIdentityProperties(
                            new UserAssignedIdentityProperties().withClientId("baeqphc").withPrincipalId("nrnrp"))))))
            .withMakePolicyConsistent(true);
        model = BinaryData.fromObject(model).toObject(AzureVmWorkloadProtectionPolicy.class);
        Assertions.assertEquals(1909534369, model.protectedItemsCount());
        Assertions.assertEquals("k", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(WorkloadType.AZURE_SQL_DB, model.workLoadType());
        Assertions.assertEquals("n", model.settings().timeZone());
        Assertions.assertEquals(true, model.settings().issqlcompression());
        Assertions.assertEquals(false, model.settings().isCompression());
        Assertions.assertEquals(PolicyType.SNAPSHOT_COPY_ONLY_FULL, model.subProtectionPolicy().get(0).policyType());
        Assertions.assertEquals(TieringMode.TIER_RECOMMENDED,
            model.subProtectionPolicy().get(0).tieringPolicy().get("izjx").tieringMode());
        Assertions.assertEquals(37072566, model.subProtectionPolicy().get(0).tieringPolicy().get("izjx").duration());
        Assertions.assertEquals(RetentionDurationType.WEEKS,
            model.subProtectionPolicy().get(0).tieringPolicy().get("izjx").durationType());
        Assertions.assertEquals(370516258,
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRpRetentionRangeInDays());
        Assertions.assertEquals("t",
            model.subProtectionPolicy().get(0).snapshotBackupAdditionalDetails().instantRPDetails());
        Assertions.assertEquals("twnawjslbiwkojgc",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .identityArmId());
        Assertions.assertEquals("tsf",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .identityName());
        Assertions.assertEquals("baeqphc",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .clientId());
        Assertions.assertEquals("nrnrp",
            model.subProtectionPolicy()
                .get(0)
                .snapshotBackupAdditionalDetails()
                .userAssignedManagedIdentityDetails()
                .userAssignedIdentityProperties()
                .principalId());
        Assertions.assertEquals(true, model.makePolicyConsistent());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
