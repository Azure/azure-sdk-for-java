// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionIntent;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionIntentResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProtectionIntentsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"protectionIntentItemType\":\"ProtectionIntent\",\"backupManagementType\":\"DPM\",\"sourceResourceId\":\"ymvqdbpbhfckdvez\",\"itemId\":\"cssbzhddu\",\"policyId\":\"nqfblhkalehpava\",\"protectionState\":\"NotProtected\"},\"eTag\":\"qjtiogqgdm\",\"location\":\"nictteajo\",\"tags\":{\"tp\":\"gspnbonhpczykm\",\"mqyjgy\":\"wxqcsehchkhufmpq\",\"saeuzanhsfnhsenw\":\"zulo\",\"lidftujwjj\":\"hpzfngqj\"},\"id\":\"fwbeqrkuorh\",\"name\":\"ssruqnmdvhazcvj\",\"type\":\"tiq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ProtectionIntentResource response = manager.protectionIntents()
            .define("zrltixldzyyf")
            .withRegion("gvmxnok")
            .withExistingBackupFabric("obcancdexxqcw", "a", "fgvaknokzwj")
            .withTags(mapOf("vcuartrhun", "lubses"))
            .withProperties(new ProtectionIntent().withBackupManagementType(BackupManagementType.AZURE_BACKUP_SERVER)
                .withSourceResourceId("ixymmpujivyql")
                .withItemId("uvsmbms")
                .withPolicyId("oyovwz")
                .withProtectionState(ProtectionStatus.PROTECTION_FAILED))
            .withEtag("vybe")
            .create();

        Assertions.assertEquals("nictteajo", response.location());
        Assertions.assertEquals("gspnbonhpczykm", response.tags().get("tp"));
        Assertions.assertEquals(BackupManagementType.DPM, response.properties().backupManagementType());
        Assertions.assertEquals("ymvqdbpbhfckdvez", response.properties().sourceResourceId());
        Assertions.assertEquals("cssbzhddu", response.properties().itemId());
        Assertions.assertEquals("nqfblhkalehpava", response.properties().policyId());
        Assertions.assertEquals(ProtectionStatus.NOT_PROTECTED, response.properties().protectionState());
        Assertions.assertEquals("qjtiogqgdm", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
