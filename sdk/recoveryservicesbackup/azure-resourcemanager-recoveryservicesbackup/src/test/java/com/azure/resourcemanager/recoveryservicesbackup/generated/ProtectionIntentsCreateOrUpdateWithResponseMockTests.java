// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionIntent;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionIntentResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.ProtectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProtectionIntentsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"protectionIntentItemType\":\"ProtectionIntent\",\"backupManagementType\":\"AzureBackupServer\",\"sourceResourceId\":\"djyibqbnaomhjrm\",\"itemId\":\"hmaxljalfi\",\"policyId\":\"jmobca\",\"protectionState\":\"NotProtected\"},\"eTag\":\"xxqcwgaxf\",\"location\":\"vaknokzwjj\",\"tags\":{\"x\":\"tixldzyyfytpqs\",\"vyqlkjuvsmbmslzo\":\"mmpuj\",\"mx\":\"ovwzdbpqvybefg\",\"vcuartrhun\":\"okcvtlubses\"},\"id\":\"pirykycndzfqiv\",\"name\":\"reuykbbmnwagl\",\"type\":\"bxoeeonql\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectionIntentResource response = manager.protectionIntents()
            .define("rcyrucpcunnu")
            .withRegion("hblkwqpatvbq")
            .withExistingBackupFabric("l", "ytoithgygvfl", "gvdihoynkrxwetwk")
            .withTags(mapOf("zqymtuowogtgits", "cjbctviv"))
            .withProperties(new ProtectionIntent().withBackupManagementType(BackupManagementType.MAB)
                .withSourceResourceId("oenodnaienh")
                .withItemId("skndnelqkaadlknw")
                .withPolicyId("anniyopetxivcnr")
                .withProtectionState(ProtectionStatus.INVALID))
            .withEtag("ucae")
            .create();

        Assertions.assertEquals("vaknokzwjj", response.location());
        Assertions.assertEquals("tixldzyyfytpqs", response.tags().get("x"));
        Assertions.assertEquals(BackupManagementType.AZURE_BACKUP_SERVER, response.properties().backupManagementType());
        Assertions.assertEquals("djyibqbnaomhjrm", response.properties().sourceResourceId());
        Assertions.assertEquals("hmaxljalfi", response.properties().itemId());
        Assertions.assertEquals("jmobca", response.properties().policyId());
        Assertions.assertEquals(ProtectionStatus.NOT_PROTECTED, response.properties().protectionState());
        Assertions.assertEquals("xxqcwgaxf", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
