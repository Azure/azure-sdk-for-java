// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaRestoreRequest\",\"recoveryType\":\"AlternateLocation\",\"sourceResourceId\":\"xfkfwegprhptill\",\"propertyBag\":{\"cwsldri\":\"iqtgdqoh\",\"bphbqzmizakakank\":\"etpwbralll\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"zhajoylhjlmuo\",\"databaseName\":\"primr\",\"targetDirectoryForFileRestore\":\"pteecjme\"},\"recoveryMode\":\"RecoveryUsingSnapshot\",\"targetResourceGroupName\":\"tvasy\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"dzaumweooh\",\"identityName\":\"ufuzboy\",\"userAssignedIdentityProperties\":{\"clientId\":\"hwtzolb\",\"principalId\":\"mwmdxmebwjscjpa\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"a\"},\"targetVirtualMachineId\":\"qxnmwmqt\",\"resourceGuardOperationRequests\":[\"yijddtvqcttad\"]}")
            .toObject(AzureWorkloadSapHanaRestoreRequest.class);
        Assertions.assertEquals("yijddtvqcttad", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("xfkfwegprhptill", model.sourceResourceId());
        Assertions.assertEquals("iqtgdqoh", model.propertyBag().get("cwsldri"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("zhajoylhjlmuo", model.targetInfo().containerId());
        Assertions.assertEquals("primr", model.targetInfo().databaseName());
        Assertions.assertEquals("pteecjme", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.RECOVERY_USING_SNAPSHOT, model.recoveryMode());
        Assertions.assertEquals("tvasy", model.targetResourceGroupName());
        Assertions.assertEquals("dzaumweooh", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("ufuzboy", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("hwtzolb",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("mwmdxmebwjscjpa",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("a", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("qxnmwmqt", model.targetVirtualMachineId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaRestoreRequest model = new AzureWorkloadSapHanaRestoreRequest()
            .withResourceGuardOperationRequests(Arrays.asList("yijddtvqcttad"))
            .withRecoveryType(RecoveryType.ALTERNATE_LOCATION)
            .withSourceResourceId("xfkfwegprhptill")
            .withPropertyBag(mapOf("cwsldri", "iqtgdqoh", "bphbqzmizakakank", "etpwbralll"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.OVERWRITE)
                .withContainerId("zhajoylhjlmuo")
                .withDatabaseName("primr")
                .withTargetDirectoryForFileRestore("pteecjme"))
            .withRecoveryMode(RecoveryMode.RECOVERY_USING_SNAPSHOT)
            .withTargetResourceGroupName("tvasy")
            .withUserAssignedManagedIdentityDetails(
                new UserAssignedManagedIdentityDetails().withIdentityArmId("dzaumweooh")
                    .withIdentityName("ufuzboy")
                    .withUserAssignedIdentityProperties(new UserAssignedIdentityProperties().withClientId("hwtzolb")
                        .withPrincipalId("mwmdxmebwjscjpa")))
            .withSnapshotRestoreParameters(
                new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("a"))
            .withTargetVirtualMachineId("qxnmwmqt");
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaRestoreRequest.class);
        Assertions.assertEquals("yijddtvqcttad", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("xfkfwegprhptill", model.sourceResourceId());
        Assertions.assertEquals("iqtgdqoh", model.propertyBag().get("cwsldri"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("zhajoylhjlmuo", model.targetInfo().containerId());
        Assertions.assertEquals("primr", model.targetInfo().databaseName());
        Assertions.assertEquals("pteecjme", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.RECOVERY_USING_SNAPSHOT, model.recoveryMode());
        Assertions.assertEquals("tvasy", model.targetResourceGroupName());
        Assertions.assertEquals("dzaumweooh", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("ufuzboy", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("hwtzolb",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("mwmdxmebwjscjpa",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("a", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("qxnmwmqt", model.targetVirtualMachineId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
