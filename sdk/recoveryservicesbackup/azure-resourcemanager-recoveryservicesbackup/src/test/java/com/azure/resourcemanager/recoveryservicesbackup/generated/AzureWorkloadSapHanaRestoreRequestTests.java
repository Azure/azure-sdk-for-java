// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSapHanaRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSapHanaRestoreRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSAPHanaRestoreRequest\",\"recoveryType\":\"AlternateLocation\",\"sourceResourceId\":\"hryvy\",\"propertyBag\":{\"knfnwmbtmvpdv\":\"dclxgc\"},\"targetInfo\":{\"overwriteOption\":\"FailOnConflict\",\"containerId\":\"zaefedxihc\",\"databaseName\":\"phkmcrjdqnsdfz\",\"targetDirectoryForFileRestore\":\"gtgkylkdghr\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetResourceGroupName\":\"tl\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"z\",\"identityName\":\"hokvbwnh\",\"userAssignedIdentityProperties\":{\"clientId\":\"lgehg\",\"principalId\":\"ipifhpfeoajvg\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"csheafidltugsr\"},\"targetVirtualMachineId\":\"mks\"}")
            .toObject(AzureWorkloadSapHanaRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("hryvy", model.sourceResourceId());
        Assertions.assertEquals("dclxgc", model.propertyBag().get("knfnwmbtmvpdv"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("zaefedxihc", model.targetInfo().containerId());
        Assertions.assertEquals("phkmcrjdqnsdfz", model.targetInfo().databaseName());
        Assertions.assertEquals("gtgkylkdghr", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("tl", model.targetResourceGroupName());
        Assertions.assertEquals("z", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("hokvbwnh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("lgehg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ipifhpfeoajvg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("csheafidltugsr", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("mks", model.targetVirtualMachineId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSapHanaRestoreRequest model = new AzureWorkloadSapHanaRestoreRequest()
            .withRecoveryType(RecoveryType.ALTERNATE_LOCATION).withSourceResourceId("hryvy")
            .withPropertyBag(mapOf("knfnwmbtmvpdv", "dclxgc"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.FAIL_ON_CONFLICT)
                .withContainerId("zaefedxihc").withDatabaseName("phkmcrjdqnsdfz")
                .withTargetDirectoryForFileRestore("gtgkylkdghr"))
            .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY).withTargetResourceGroupName("tl")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("z")
                .withIdentityName("hokvbwnh").withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("lgehg").withPrincipalId("ipifhpfeoajvg")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(true)
                .withLogPointInTimeForDBRecovery("csheafidltugsr"))
            .withTargetVirtualMachineId("mks");
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.ALTERNATE_LOCATION, model.recoveryType());
        Assertions.assertEquals("hryvy", model.sourceResourceId());
        Assertions.assertEquals("dclxgc", model.propertyBag().get("knfnwmbtmvpdv"));
        Assertions.assertEquals(OverwriteOptions.FAIL_ON_CONFLICT, model.targetInfo().overwriteOption());
        Assertions.assertEquals("zaefedxihc", model.targetInfo().containerId());
        Assertions.assertEquals("phkmcrjdqnsdfz", model.targetInfo().databaseName());
        Assertions.assertEquals("gtgkylkdghr", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("tl", model.targetResourceGroupName());
        Assertions.assertEquals("z", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("hokvbwnh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("lgehg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ipifhpfeoajvg",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("csheafidltugsr", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("mks", model.targetVirtualMachineId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
