// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSapHanaRestoreRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSapHanaRestoreRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSapHanaRestoreRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSAPHanaRestoreRequest\",\"recoveryType\":\"RestoreDisks\",\"sourceResourceId\":\"nsrmffeycx\",\"propertyBag\":{\"mx\":\"piymerteea\",\"xv\":\"iekkkzddrtkgdojb\",\"cuijpxt\":\"vrefdeesv\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"rtujwsawddjibab\",\"databaseName\":\"ititvtzeexavoxt\",\"targetDirectoryForFileRestore\":\"lecdmdqbw\"},\"recoveryMode\":\"Invalid\",\"targetVirtualMachineId\":\"tgsfja\"}")
                .toObject(AzureWorkloadSapHanaRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("nsrmffeycx", model.sourceResourceId());
        Assertions.assertEquals("piymerteea", model.propertyBag().get("mx"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("rtujwsawddjibab", model.targetInfo().containerId());
        Assertions.assertEquals("ititvtzeexavoxt", model.targetInfo().databaseName());
        Assertions.assertEquals("lecdmdqbw", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("tgsfja", model.targetVirtualMachineId());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSapHanaRestoreRequest model =
            new AzureWorkloadSapHanaRestoreRequest()
                .withRecoveryType(RecoveryType.RESTORE_DISKS)
                .withSourceResourceId("nsrmffeycx")
                .withPropertyBag(mapOf("mx", "piymerteea", "xv", "iekkkzddrtkgdojb", "cuijpxt", "vrefdeesv"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.OVERWRITE)
                        .withContainerId("rtujwsawddjibab")
                        .withDatabaseName("ititvtzeexavoxt")
                        .withTargetDirectoryForFileRestore("lecdmdqbw"))
                .withRecoveryMode(RecoveryMode.INVALID)
                .withTargetVirtualMachineId("tgsfja");
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSapHanaRestoreRequest.class);
        Assertions.assertEquals(RecoveryType.RESTORE_DISKS, model.recoveryType());
        Assertions.assertEquals("nsrmffeycx", model.sourceResourceId());
        Assertions.assertEquals("piymerteea", model.propertyBag().get("mx"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("rtujwsawddjibab", model.targetInfo().containerId());
        Assertions.assertEquals("ititvtzeexavoxt", model.targetInfo().databaseName());
        Assertions.assertEquals("lecdmdqbw", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.INVALID, model.recoveryMode());
        Assertions.assertEquals("tgsfja", model.targetVirtualMachineId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
