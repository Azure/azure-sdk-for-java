// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.BackupResourceVaultConfigResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupResourceVaultConfig;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupResourceVaultConfigResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.EnhancedSecurityState;
import com.azure.resourcemanager.recoveryservicesbackup.models.SoftDeleteFeatureState;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageType;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageTypeState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupResourceVaultConfigsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"storageModelType\":\"LocallyRedundant\",\"storageType\":\"ZoneRedundant\",\"storageTypeState\":\"Locked\",\"enhancedSecurityState\":\"Invalid\",\"softDeleteFeatureState\":\"AlwaysON\",\"softDeleteRetentionPeriodInDays\":304312927,\"resourceGuardOperationRequests\":[\"jwjj\"],\"isSoftDeleteFeatureStateEditable\":true},\"eTag\":\"eqrkuorhtss\",\"location\":\"uqnmdvhazcvj\",\"tags\":{\"ytxtdgu\":\"qswbqerzwx\",\"mbewreswmo\":\"vlbpktgdstyou\"},\"id\":\"egmmuteyxe\",\"name\":\"guqigijiitns\",\"type\":\"xlzdesygrijwa\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupResourceVaultConfigResource response =
            manager
                .backupResourceVaultConfigs()
                .putWithResponse(
                    "ovwzdbpqvybefg",
                    "mx",
                    new BackupResourceVaultConfigResourceInner()
                        .withLocation("nqlnfwmyymvqd")
                        .withTags(
                            mapOf(
                                "ddubbnqfblhkal",
                                "hfckdvezcrcssbz",
                                "iqjtiogqgdmin",
                                "hpavawu",
                                "gspnbonhpczykm",
                                "ctteajohi",
                                "wxqcsehchkhufmpq",
                                "tp"))
                        .withProperties(
                            new BackupResourceVaultConfig()
                                .withStorageModelType(StorageType.ZONE_REDUNDANT)
                                .withStorageType(StorageType.LOCALLY_REDUNDANT)
                                .withStorageTypeState(StorageTypeState.LOCKED)
                                .withEnhancedSecurityState(EnhancedSecurityState.DISABLED)
                                .withSoftDeleteFeatureState(SoftDeleteFeatureState.ALWAYS_ON)
                                .withSoftDeleteRetentionPeriodInDays(451453804)
                                .withResourceGuardOperationRequests(
                                    Arrays.asList("artr", "unlpirykycndz", "qi", "jreuykbbmn"))
                                .withIsSoftDeleteFeatureStateEditable(true))
                        .withEtag("tbxoee"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("uqnmdvhazcvj", response.location());
        Assertions.assertEquals("qswbqerzwx", response.tags().get("ytxtdgu"));
        Assertions.assertEquals(StorageType.LOCALLY_REDUNDANT, response.properties().storageModelType());
        Assertions.assertEquals(StorageType.ZONE_REDUNDANT, response.properties().storageType());
        Assertions.assertEquals(StorageTypeState.LOCKED, response.properties().storageTypeState());
        Assertions.assertEquals(EnhancedSecurityState.INVALID, response.properties().enhancedSecurityState());
        Assertions.assertEquals(SoftDeleteFeatureState.ALWAYS_ON, response.properties().softDeleteFeatureState());
        Assertions.assertEquals(304312927, response.properties().softDeleteRetentionPeriodInDays());
        Assertions.assertEquals("jwjj", response.properties().resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(true, response.properties().isSoftDeleteFeatureStateEditable());
        Assertions.assertEquals("eqrkuorhtss", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
