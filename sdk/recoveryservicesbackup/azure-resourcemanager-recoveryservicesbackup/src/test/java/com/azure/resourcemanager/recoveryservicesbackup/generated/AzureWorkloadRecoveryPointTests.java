// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadRecoveryPoint model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadRecoveryPoint\",\"recoveryPointTimeInUTC\":\"2021-05-17T21:24:33Z\",\"type\":\"Differential\",\"recoveryPointTierDetails\":[{\"type\":\"Invalid\",\"status\":\"Valid\",\"extendedInfo\":{\"bklftidgfcwqmpim\":\"eitpkxztmo\",\"yhohujswtwkozzwc\":\"qxzhem\"}}],\"recoveryPointMoveReadinessInfo\":{\"uktalhsnvkcdmxz\":{\"isReadyForMove\":true,\"additionalInfo\":\"pfajnjwltlwtjj\"}},\"recoveryPointProperties\":{\"expiryTime\":\"aimlnwiaaom\",\"ruleName\":\"weazul\"}}")
                .toObject(AzureWorkloadRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T21:24:33Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions
            .assertEquals("eitpkxztmo", model.recoveryPointTierDetails().get(0).extendedInfo().get("bklftidgfcwqmpim"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("uktalhsnvkcdmxz").isReadyForMove());
        Assertions
            .assertEquals(
                "pfajnjwltlwtjj", model.recoveryPointMoveReadinessInfo().get("uktalhsnvkcdmxz").additionalInfo());
        Assertions.assertEquals("aimlnwiaaom", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("weazul", model.recoveryPointProperties().ruleName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadRecoveryPoint model =
            new AzureWorkloadRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-05-17T21:24:33Z"))
                .withType(RestorePointType.DIFFERENTIAL)
                .withRecoveryPointTierDetails(
                    Arrays
                        .asList(
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.INVALID)
                                .withStatus(RecoveryPointTierStatus.VALID)
                                .withExtendedInfo(
                                    mapOf("bklftidgfcwqmpim", "eitpkxztmo", "yhohujswtwkozzwc", "qxzhem"))))
                .withRecoveryPointMoveReadinessInfo(
                    mapOf(
                        "uktalhsnvkcdmxz",
                        new RecoveryPointMoveReadinessInfo()
                            .withIsReadyForMove(true)
                            .withAdditionalInfo("pfajnjwltlwtjj")))
                .withRecoveryPointProperties(
                    new RecoveryPointProperties().withExpiryTime("aimlnwiaaom").withRuleName("weazul"));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T21:24:33Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INVALID, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.VALID, model.recoveryPointTierDetails().get(0).status());
        Assertions
            .assertEquals("eitpkxztmo", model.recoveryPointTierDetails().get(0).extendedInfo().get("bklftidgfcwqmpim"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("uktalhsnvkcdmxz").isReadyForMove());
        Assertions
            .assertEquals(
                "pfajnjwltlwtjj", model.recoveryPointMoveReadinessInfo().get("uktalhsnvkcdmxz").additionalInfo());
        Assertions.assertEquals("aimlnwiaaom", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("weazul", model.recoveryPointProperties().ruleName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
