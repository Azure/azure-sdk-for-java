// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadRecoveryPointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadRecoveryPoint model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadRecoveryPoint\",\"recoveryPointTimeInUTC\":\"2021-09-06T02:43:55Z\",\"type\":\"Differential\",\"recoveryPointTierDetails\":[{\"type\":\"InstantRP\",\"status\":\"Invalid\",\"extendedInfo\":{\"lhvnhlab\":\"petogebjox\",\"kkzjcjbtrga\":\"q\",\"brxjjsto\":\"hvv\",\"tmo\":\"beitpkx\"}},{\"type\":\"Invalid\",\"status\":\"Deleted\",\"extendedInfo\":{\"maqxzhemjyh\":\"dgfcwqmp\",\"bawpfajnjwltlwt\":\"hujswtwkozzwcul\"}},{\"type\":\"Invalid\",\"status\":\"Valid\",\"extendedInfo\":{\"rpoaimlnwi\":\"lhsnvkcdmx\",\"ulcsethwwnpj\":\"aomylwea\"}}],\"recoveryPointMoveReadinessInfo\":{\"fb\":{\"isReadyForMove\":true,\"additionalInfo\":\"pchwa\"}},\"recoveryPointProperties\":{\"expiryTime\":\"nfepgf\",\"ruleName\":\"etwlyxgncx\",\"isSoftDeleted\":false}}")
            .toObject(AzureWorkloadRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-06T02:43:55Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.INVALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("petogebjox", model.recoveryPointTierDetails().get(0).extendedInfo().get("lhvnhlab"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("fb").isReadyForMove());
        Assertions.assertEquals("pchwa", model.recoveryPointMoveReadinessInfo().get("fb").additionalInfo());
        Assertions.assertEquals("nfepgf", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("etwlyxgncx", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadRecoveryPoint model
            = new AzureWorkloadRecoveryPoint().withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-09-06T02:43:55Z"))
                .withType(RestorePointType.DIFFERENTIAL)
                .withRecoveryPointTierDetails(
                    Arrays.asList(
                        new RecoveryPointTierInformationV2()
                            .withType(RecoveryPointTierType.INSTANT_RP).withStatus(RecoveryPointTierStatus.INVALID)
                            .withExtendedInfo(mapOf("lhvnhlab", "petogebjox", "kkzjcjbtrga", "q", "brxjjsto", "hvv",
                                "tmo", "beitpkx")),
                        new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                            .withStatus(RecoveryPointTierStatus.DELETED)
                            .withExtendedInfo(mapOf("maqxzhemjyh", "dgfcwqmp", "bawpfajnjwltlwt", "hujswtwkozzwcul")),
                        new RecoveryPointTierInformationV2().withType(RecoveryPointTierType.INVALID)
                            .withStatus(RecoveryPointTierStatus.VALID)
                            .withExtendedInfo(mapOf("rpoaimlnwi", "lhsnvkcdmx", "ulcsethwwnpj", "aomylwea"))))
                .withRecoveryPointMoveReadinessInfo(mapOf("fb",
                    new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("pchwa")))
                .withRecoveryPointProperties(new RecoveryPointProperties().withExpiryTime("nfepgf")
                    .withRuleName("etwlyxgncx").withIsSoftDeleted(false));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-06T02:43:55Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.DIFFERENTIAL, model.type());
        Assertions.assertEquals(RecoveryPointTierType.INSTANT_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.INVALID, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("petogebjox", model.recoveryPointTierDetails().get(0).extendedInfo().get("lhvnhlab"));
        Assertions.assertEquals(true, model.recoveryPointMoveReadinessInfo().get("fb").isReadyForMove());
        Assertions.assertEquals("pchwa", model.recoveryPointMoveReadinessInfo().get("fb").additionalInfo());
        Assertions.assertEquals("nfepgf", model.recoveryPointProperties().expiryTime());
        Assertions.assertEquals("etwlyxgncx", model.recoveryPointProperties().ruleName());
        Assertions.assertEquals(false, model.recoveryPointProperties().isSoftDeleted());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
