// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadRecoveryPoint;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointMoveReadinessInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierInformationV2;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierStatus;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointTierType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RestorePointType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadRecoveryPointTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadRecoveryPoint model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadRecoveryPoint\",\"recoveryPointTimeInUTC\":\"2021-01-08T11:03:25Z\",\"type\":\"Invalid\",\"recoveryPointTierDetails\":[{\"type\":\"HardenedRP\",\"status\":\"Rehydrated\",\"extendedInfo\":{\"rgaehvvibrxjj\":\"b\"}}],\"recoveryPointMoveReadinessInfo\":{\"kxzt\":{\"isReadyForMove\":false,\"additionalInfo\":\"it\"},\"idgfc\":{\"isReadyForMove\":false,\"additionalInfo\":\"klf\"},\"zhe\":{\"isReadyForMove\":true,\"additionalInfo\":\"imaq\"}}}")
                .toObject(AzureWorkloadRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T11:03:25Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("b", model.recoveryPointTierDetails().get(0).extendedInfo().get("rgaehvvibrxjj"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("kxzt").isReadyForMove());
        Assertions.assertEquals("it", model.recoveryPointMoveReadinessInfo().get("kxzt").additionalInfo());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadRecoveryPoint model =
            new AzureWorkloadRecoveryPoint()
                .withRecoveryPointTimeInUtc(OffsetDateTime.parse("2021-01-08T11:03:25Z"))
                .withType(RestorePointType.INVALID)
                .withRecoveryPointTierDetails(
                    Arrays
                        .asList(
                            new RecoveryPointTierInformationV2()
                                .withType(RecoveryPointTierType.HARDENED_RP)
                                .withStatus(RecoveryPointTierStatus.REHYDRATED)
                                .withExtendedInfo(mapOf("rgaehvvibrxjj", "b"))))
                .withRecoveryPointMoveReadinessInfo(
                    mapOf(
                        "kxzt",
                        new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("it"),
                        "idgfc",
                        new RecoveryPointMoveReadinessInfo().withIsReadyForMove(false).withAdditionalInfo("klf"),
                        "zhe",
                        new RecoveryPointMoveReadinessInfo().withIsReadyForMove(true).withAdditionalInfo("imaq")));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadRecoveryPoint.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T11:03:25Z"), model.recoveryPointTimeInUtc());
        Assertions.assertEquals(RestorePointType.INVALID, model.type());
        Assertions.assertEquals(RecoveryPointTierType.HARDENED_RP, model.recoveryPointTierDetails().get(0).type());
        Assertions.assertEquals(RecoveryPointTierStatus.REHYDRATED, model.recoveryPointTierDetails().get(0).status());
        Assertions.assertEquals("b", model.recoveryPointTierDetails().get(0).extendedInfo().get("rgaehvvibrxjj"));
        Assertions.assertEquals(false, model.recoveryPointMoveReadinessInfo().get("kxzt").isReadyForMove());
        Assertions.assertEquals("it", model.recoveryPointMoveReadinessInfo().get("kxzt").additionalInfo());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
