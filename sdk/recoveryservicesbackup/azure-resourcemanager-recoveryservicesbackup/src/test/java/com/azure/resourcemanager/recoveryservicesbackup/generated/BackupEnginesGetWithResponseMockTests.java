// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupEngineBaseResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupManagementType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupEnginesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"backupEngineType\":\"BackupEngineBase\",\"friendlyName\":\"umljcirvpef\",\"backupManagementType\":\"DefaultBackup\",\"registrationStatus\":\"ei\",\"backupEngineState\":\"tjnsx\",\"healthStatus\":\"jlnsj\",\"canReRegister\":false,\"backupEngineId\":\"yxxbxqvmvuayt\",\"dpmVersion\":\"dxk\",\"azureBackupAgentVersion\":\"qbwpntghyk\",\"isAzureBackupAgentUpgradeAvailable\":true,\"isDpmUpgradeAvailable\":true,\"extendedInfo\":{\"databaseName\":\"xsl\",\"protectedItemsCount\":1131788859,\"protectedServersCount\":1439367982,\"diskCount\":1905486596,\"usedDiskSpace\":3.0373201705101716,\"availableDiskSpace\":75.8033614350649,\"refreshedAt\":\"2021-11-25T06:52:08Z\",\"azureProtectedInstances\":748877186}},\"eTag\":\"qqjwkrh\",\"location\":\"zdanojis\",\"tags\":{\"jctibpvbkae\":\"mvokatuz\",\"akw\":\"xsmzygdf\"},\"id\":\"eivmak\",\"name\":\"hysowljuxlkbect\",\"type\":\"tfjmskdchmaiub\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesBackupManager manager =
            RecoveryServicesBackupManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupEngineBaseResource response =
            manager
                .backupEngines()
                .getWithResponse(
                    "lgmgbe",
                    "lqtxnrflkndrn",
                    "pgfjo",
                    "hdaqotwfhipxwg",
                    "abvcipowzaf",
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("zdanojis", response.location());
        Assertions.assertEquals("mvokatuz", response.tags().get("jctibpvbkae"));
        Assertions.assertEquals("umljcirvpef", response.properties().friendlyName());
        Assertions.assertEquals(BackupManagementType.DEFAULT_BACKUP, response.properties().backupManagementType());
        Assertions.assertEquals("ei", response.properties().registrationStatus());
        Assertions.assertEquals("tjnsx", response.properties().backupEngineState());
        Assertions.assertEquals("jlnsj", response.properties().healthStatus());
        Assertions.assertEquals(false, response.properties().canReRegister());
        Assertions.assertEquals("yxxbxqvmvuayt", response.properties().backupEngineId());
        Assertions.assertEquals("dxk", response.properties().dpmVersion());
        Assertions.assertEquals("qbwpntghyk", response.properties().azureBackupAgentVersion());
        Assertions.assertEquals(true, response.properties().isAzureBackupAgentUpgradeAvailable());
        Assertions.assertEquals(true, response.properties().isDpmUpgradeAvailable());
        Assertions.assertEquals("xsl", response.properties().extendedInfo().databaseName());
        Assertions.assertEquals(1131788859, response.properties().extendedInfo().protectedItemsCount());
        Assertions.assertEquals(1439367982, response.properties().extendedInfo().protectedServersCount());
        Assertions.assertEquals(1905486596, response.properties().extendedInfo().diskCount());
        Assertions.assertEquals(3.0373201705101716D, response.properties().extendedInfo().usedDiskSpace());
        Assertions.assertEquals(75.8033614350649D, response.properties().extendedInfo().availableDiskSpace());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-25T06:52:08Z"), response.properties().extendedInfo().refreshedAt());
        Assertions.assertEquals(748877186, response.properties().extendedInfo().azureProtectedInstances());
        Assertions.assertEquals("qqjwkrh", response.etag());
    }
}
