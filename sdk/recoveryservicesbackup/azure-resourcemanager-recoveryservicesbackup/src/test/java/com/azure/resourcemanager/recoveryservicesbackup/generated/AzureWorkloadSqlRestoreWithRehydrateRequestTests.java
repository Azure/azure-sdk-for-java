// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureWorkloadSqlRestoreWithRehydrateRequestTests {
    @Test
    public void testDeserialize() {
        AzureWorkloadSqlRestoreWithRehydrateRequest model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"AzureWorkloadSQLRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"jhhhqxu\",\"rehydrationPriority\":\"Standard\"},\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":true,\"alternateDirectoryPaths\":[{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"s\",\"sourcePath\":\"usjszlbscm\",\"targetPath\":\"zijiufehgmv\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"yvqkxr\",\"propertyBag\":{\"wxzut\":\"niylyly\",\"gh\":\"qztw\",\"abe\":\"upgxyjtcdxabbujf\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"qpxzucafeddwwn\",\"databaseName\":\"a\",\"targetDirectoryForFileRestore\":\"xud\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetVirtualMachineId\":\"ookrtalvnbw\"}")
                .toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("yvqkxr", model.sourceResourceId());
        Assertions.assertEquals("niylyly", model.propertyBag().get("wxzut"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("qpxzucafeddwwn", model.targetInfo().containerId());
        Assertions.assertEquals("a", model.targetInfo().databaseName());
        Assertions.assertEquals("xud", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ookrtalvnbw", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(true, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("s", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("usjszlbscm", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("zijiufehgmv", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("jhhhqxu", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions
            .assertEquals(RehydrationPriority.STANDARD, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @Test
    public void testSerialize() {
        AzureWorkloadSqlRestoreWithRehydrateRequest model =
            new AzureWorkloadSqlRestoreWithRehydrateRequest()
                .withRecoveryType(RecoveryType.OFFLINE)
                .withSourceResourceId("yvqkxr")
                .withPropertyBag(mapOf("wxzut", "niylyly", "gh", "qztw", "abe", "upgxyjtcdxabbujf"))
                .withTargetInfo(
                    new TargetRestoreInfo()
                        .withOverwriteOption(OverwriteOptions.OVERWRITE)
                        .withContainerId("qpxzucafeddwwn")
                        .withDatabaseName("a")
                        .withTargetDirectoryForFileRestore("xud"))
                .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY)
                .withTargetVirtualMachineId("ookrtalvnbw")
                .withShouldUseAlternateTargetLocation(true)
                .withIsNonRecoverable(true)
                .withAlternateDirectoryPaths(
                    Arrays
                        .asList(
                            new SqlDataDirectoryMapping()
                                .withMappingType(SqlDataDirectoryType.INVALID)
                                .withSourceLogicalName("s")
                                .withSourcePath("usjszlbscm")
                                .withTargetPath("zijiufehgmv")))
                .withRecoveryPointRehydrationInfo(
                    new RecoveryPointRehydrationInfo()
                        .withRehydrationRetentionDuration("jhhhqxu")
                        .withRehydrationPriority(RehydrationPriority.STANDARD));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("yvqkxr", model.sourceResourceId());
        Assertions.assertEquals("niylyly", model.propertyBag().get("wxzut"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("qpxzucafeddwwn", model.targetInfo().containerId());
        Assertions.assertEquals("a", model.targetInfo().databaseName());
        Assertions.assertEquals("xud", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ookrtalvnbw", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(true, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("s", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("usjszlbscm", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("zijiufehgmv", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("jhhhqxu", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions
            .assertEquals(RehydrationPriority.STANDARD, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
