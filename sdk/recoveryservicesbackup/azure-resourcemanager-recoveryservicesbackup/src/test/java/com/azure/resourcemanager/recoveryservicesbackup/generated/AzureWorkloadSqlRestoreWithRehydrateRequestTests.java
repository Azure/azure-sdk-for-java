// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"hzzysevusxiv\",\"rehydrationPriority\":\"High\"},\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Log\",\"sourceLogicalName\":\"kdyzatvfuzk\",\"sourcePath\":\"tjvv\",\"targetPath\":\"xwigsye\"},{\"mappingType\":\"Data\",\"sourceLogicalName\":\"smjtgrqgdg\",\"sourcePath\":\"ileplk\",\"targetPath\":\"mknhwtbbaedor\"},{\"mappingType\":\"Data\",\"sourceLogicalName\":\"floygbdgwumg\",\"sourcePath\":\"gdhpabgdexjddv\",\"targetPath\":\"aqwotmmwl\"}],\"recoveryType\":\"OriginalLocation\",\"sourceResourceId\":\"srsxaptefh\",\"propertyBag\":{\"eeksnbksdqhjvyk\":\"gjokjljnhvlqjbek\",\"vnwqjwgo\":\"xeslkhhustcpoqm\",\"bkjbz\":\"nlejjjkxybwf\",\"nsxfwu\":\"ensvkzykjtj\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"kupnqrmgjfbpk\",\"databaseName\":\"xeoio\",\"targetDirectoryForFileRestore\":\"izfavkjzwf\"},\"recoveryMode\":\"WorkloadRecovery\",\"targetResourceGroupName\":\"y\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"fz\",\"identityName\":\"fwxrzxmdew\",\"userAssignedIdentityProperties\":{\"clientId\":\"xkrplbjaz\",\"principalId\":\"wwviyo\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"brnnhjxsqw\"},\"targetVirtualMachineId\":\"qkbiwet\"}")
            .toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.ORIGINAL_LOCATION, model.recoveryType());
        Assertions.assertEquals("srsxaptefh", model.sourceResourceId());
        Assertions.assertEquals("gjokjljnhvlqjbek", model.propertyBag().get("eeksnbksdqhjvyk"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("kupnqrmgjfbpk", model.targetInfo().containerId());
        Assertions.assertEquals("xeoio", model.targetInfo().databaseName());
        Assertions.assertEquals("izfavkjzwf", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("y", model.targetResourceGroupName());
        Assertions.assertEquals("fz", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("fwxrzxmdew", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("xkrplbjaz",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("wwviyo",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("brnnhjxsqw", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("qkbiwet", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("kdyzatvfuzk", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("tjvv", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("xwigsye", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("hzzysevusxiv", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlRestoreWithRehydrateRequest model = new AzureWorkloadSqlRestoreWithRehydrateRequest()
            .withRecoveryType(RecoveryType.ORIGINAL_LOCATION).withSourceResourceId("srsxaptefh")
            .withPropertyBag(mapOf("eeksnbksdqhjvyk", "gjokjljnhvlqjbek", "vnwqjwgo", "xeslkhhustcpoqm", "bkjbz",
                "nlejjjkxybwf", "nsxfwu", "ensvkzykjtj"))
            .withTargetInfo(
                new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.OVERWRITE).withContainerId("kupnqrmgjfbpk")
                    .withDatabaseName("xeoio").withTargetDirectoryForFileRestore("izfavkjzwf"))
            .withRecoveryMode(RecoveryMode.WORKLOAD_RECOVERY).withTargetResourceGroupName("y")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("fz")
                .withIdentityName("fwxrzxmdew").withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("xkrplbjaz").withPrincipalId("wwviyo")))
            .withSnapshotRestoreParameters(new SnapshotRestoreParameters().withSkipAttachAndMount(true)
                .withLogPointInTimeForDBRecovery("brnnhjxsqw"))
            .withTargetVirtualMachineId("qkbiwet").withShouldUseAlternateTargetLocation(true)
            .withIsNonRecoverable(false)
            .withAlternateDirectoryPaths(Arrays.asList(
                new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.LOG)
                    .withSourceLogicalName("kdyzatvfuzk").withSourcePath("tjvv").withTargetPath("xwigsye"),
                new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.DATA)
                    .withSourceLogicalName("smjtgrqgdg").withSourcePath("ileplk").withTargetPath("mknhwtbbaedor"),
                new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.DATA)
                    .withSourceLogicalName("floygbdgwumg").withSourcePath("gdhpabgdexjddv")
                    .withTargetPath("aqwotmmwl")))
            .withRecoveryPointRehydrationInfo(new RecoveryPointRehydrationInfo()
                .withRehydrationRetentionDuration("hzzysevusxiv").withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals(RecoveryType.ORIGINAL_LOCATION, model.recoveryType());
        Assertions.assertEquals("srsxaptefh", model.sourceResourceId());
        Assertions.assertEquals("gjokjljnhvlqjbek", model.propertyBag().get("eeksnbksdqhjvyk"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("kupnqrmgjfbpk", model.targetInfo().containerId());
        Assertions.assertEquals("xeoio", model.targetInfo().databaseName());
        Assertions.assertEquals("izfavkjzwf", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.WORKLOAD_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("y", model.targetResourceGroupName());
        Assertions.assertEquals("fz", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("fwxrzxmdew", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("xkrplbjaz",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("wwviyo",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("brnnhjxsqw", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("qkbiwet", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("kdyzatvfuzk", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("tjvv", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("xwigsye", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("hzzysevusxiv", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
