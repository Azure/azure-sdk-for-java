// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"jhqkbiwetpozy\",\"rehydrationPriority\":\"High\"},\"shouldUseAlternateTargetLocation\":false,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Log\",\"sourceLogicalName\":\"zlex\",\"sourcePath\":\"fledynojpziu\",\"targetPath\":\"bzkkd\"},{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"sycljsel\",\"sourcePath\":\"pbafvafhlbylc\",\"targetPath\":\"evxrhyz\"}],\"recoveryType\":\"Offline\",\"sourceResourceId\":\"sofpltd\",\"propertyBag\":{\"fnrac\":\"irrhv\",\"g\":\"npq\",\"ouhdawsigrb\":\"uuj\",\"az\":\"bxsjybvitvqkj\"},\"targetInfo\":{\"overwriteOption\":\"Invalid\",\"containerId\":\"gmuwdchozfnkf\",\"databaseName\":\"lv\",\"targetDirectoryForFileRestore\":\"oakizvoai\"},\"recoveryMode\":\"SnapshotAttachAndRecover\",\"targetResourceGroupName\":\"lnuwiguy\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"kwph\",\"identityName\":\"zc\",\"userAssignedIdentityProperties\":{\"clientId\":\"mpe\",\"principalId\":\"lkexaonwivkcqh\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":false,\"logPointInTimeForDBRecovery\":\"nlccrm\"},\"targetVirtualMachineId\":\"yupiju\",\"resourceGuardOperationRequests\":[\"jfkakfqfrke\",\"yildudxjascow\",\"f\",\"jkpdxphlkksnm\"]}")
            .toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("jfkakfqfrke", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("sofpltd", model.sourceResourceId());
        Assertions.assertEquals("irrhv", model.propertyBag().get("fnrac"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("gmuwdchozfnkf", model.targetInfo().containerId());
        Assertions.assertEquals("lv", model.targetInfo().databaseName());
        Assertions.assertEquals("oakizvoai", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH_AND_RECOVER, model.recoveryMode());
        Assertions.assertEquals("lnuwiguy", model.targetResourceGroupName());
        Assertions.assertEquals("kwph", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("zc", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("mpe",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("lkexaonwivkcqh",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("nlccrm", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yupiju", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("zlex", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("fledynojpziu", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("bzkkd", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("jhqkbiwetpozy", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlRestoreWithRehydrateRequest model = new AzureWorkloadSqlRestoreWithRehydrateRequest()
            .withResourceGuardOperationRequests(Arrays.asList("jfkakfqfrke", "yildudxjascow", "f", "jkpdxphlkksnm"))
            .withRecoveryType(RecoveryType.OFFLINE)
            .withSourceResourceId("sofpltd")
            .withPropertyBag(mapOf("fnrac", "irrhv", "g", "npq", "ouhdawsigrb", "uuj", "az", "bxsjybvitvqkj"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.INVALID)
                .withContainerId("gmuwdchozfnkf")
                .withDatabaseName("lv")
                .withTargetDirectoryForFileRestore("oakizvoai"))
            .withRecoveryMode(RecoveryMode.SNAPSHOT_ATTACH_AND_RECOVER)
            .withTargetResourceGroupName("lnuwiguy")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("kwph")
                .withIdentityName("zc")
                .withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("mpe").withPrincipalId("lkexaonwivkcqh")))
            .withSnapshotRestoreParameters(
                new SnapshotRestoreParameters().withSkipAttachAndMount(false).withLogPointInTimeForDBRecovery("nlccrm"))
            .withTargetVirtualMachineId("yupiju")
            .withShouldUseAlternateTargetLocation(false)
            .withIsNonRecoverable(false)
            .withAlternateDirectoryPaths(Arrays.asList(
                new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.LOG)
                    .withSourceLogicalName("zlex")
                    .withSourcePath("fledynojpziu")
                    .withTargetPath("bzkkd"),
                new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.INVALID)
                    .withSourceLogicalName("sycljsel")
                    .withSourcePath("pbafvafhlbylc")
                    .withTargetPath("evxrhyz")))
            .withRecoveryPointRehydrationInfo(
                new RecoveryPointRehydrationInfo().withRehydrationRetentionDuration("jhqkbiwetpozy")
                    .withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("jfkakfqfrke", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.OFFLINE, model.recoveryType());
        Assertions.assertEquals("sofpltd", model.sourceResourceId());
        Assertions.assertEquals("irrhv", model.propertyBag().get("fnrac"));
        Assertions.assertEquals(OverwriteOptions.INVALID, model.targetInfo().overwriteOption());
        Assertions.assertEquals("gmuwdchozfnkf", model.targetInfo().containerId());
        Assertions.assertEquals("lv", model.targetInfo().databaseName());
        Assertions.assertEquals("oakizvoai", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.SNAPSHOT_ATTACH_AND_RECOVER, model.recoveryMode());
        Assertions.assertEquals("lnuwiguy", model.targetResourceGroupName());
        Assertions.assertEquals("kwph", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("zc", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("mpe",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("lkexaonwivkcqh",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(false, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("nlccrm", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("yupiju", model.targetVirtualMachineId());
        Assertions.assertEquals(false, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.LOG, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("zlex", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("fledynojpziu", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("bzkkd", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("jhqkbiwetpozy", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
