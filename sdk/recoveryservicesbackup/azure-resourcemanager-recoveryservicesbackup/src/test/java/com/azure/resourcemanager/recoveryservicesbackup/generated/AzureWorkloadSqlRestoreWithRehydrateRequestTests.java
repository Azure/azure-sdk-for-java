// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesbackup.models.AzureWorkloadSqlRestoreWithRehydrateRequest;
import com.azure.resourcemanager.recoveryservicesbackup.models.OverwriteOptions;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryMode;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryPointRehydrationInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.RecoveryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.RehydrationPriority;
import com.azure.resourcemanager.recoveryservicesbackup.models.SnapshotRestoreParameters;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryMapping;
import com.azure.resourcemanager.recoveryservicesbackup.models.SqlDataDirectoryType;
import com.azure.resourcemanager.recoveryservicesbackup.models.TargetRestoreInfo;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedIdentityProperties;
import com.azure.resourcemanager.recoveryservicesbackup.models.UserAssignedManagedIdentityDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureWorkloadSqlRestoreWithRehydrateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureWorkloadSqlRestoreWithRehydrateRequest model = BinaryData.fromString(
            "{\"objectType\":\"AzureWorkloadSQLRestoreWithRehydrateRequest\",\"recoveryPointRehydrationInfo\":{\"rehydrationRetentionDuration\":\"xykfhyq\",\"rehydrationPriority\":\"High\"},\"shouldUseAlternateTargetLocation\":true,\"isNonRecoverable\":false,\"alternateDirectoryPaths\":[{\"mappingType\":\"Invalid\",\"sourceLogicalName\":\"cvexreuqu\",\"sourcePath\":\"tljvfwhreagkhyx\",\"targetPath\":\"qtvbczsu\"}],\"recoveryType\":\"OriginalLocation\",\"sourceResourceId\":\"glmep\",\"propertyBag\":{\"ykgsangpszng\":\"s\"},\"targetInfo\":{\"overwriteOption\":\"Overwrite\",\"containerId\":\"lkvec\",\"databaseName\":\"jcngoadyed\",\"targetDirectoryForFileRestore\":\"rgjfoknubnoi\"},\"recoveryMode\":\"FileRecovery\",\"targetResourceGroupName\":\"ztrgdgxvcoq\",\"userAssignedManagedIdentityDetails\":{\"identityArmId\":\"wugyx\",\"identityName\":\"itweialwvskbuh\",\"userAssignedIdentityProperties\":{\"clientId\":\"aq\",\"principalId\":\"ltcoqc\"}},\"snapshotRestoreParameters\":{\"skipAttachAndMount\":true,\"logPointInTimeForDBRecovery\":\"xzak\"},\"targetVirtualMachineId\":\"jkmvbi\",\"resourceGuardOperationRequests\":[\"ofqcvovjufycsjm\",\"bemyeji\",\"iuxegth\",\"rtudawlpjfel\"]}")
            .toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("ofqcvovjufycsjm", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ORIGINAL_LOCATION, model.recoveryType());
        Assertions.assertEquals("glmep", model.sourceResourceId());
        Assertions.assertEquals("s", model.propertyBag().get("ykgsangpszng"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("lkvec", model.targetInfo().containerId());
        Assertions.assertEquals("jcngoadyed", model.targetInfo().databaseName());
        Assertions.assertEquals("rgjfoknubnoi", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ztrgdgxvcoq", model.targetResourceGroupName());
        Assertions.assertEquals("wugyx", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("itweialwvskbuh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("aq",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ltcoqc",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("xzak", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("jkmvbi", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("cvexreuqu", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("tljvfwhreagkhyx", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("qtvbczsu", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("xykfhyq", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureWorkloadSqlRestoreWithRehydrateRequest model = new AzureWorkloadSqlRestoreWithRehydrateRequest()
            .withResourceGuardOperationRequests(Arrays.asList("ofqcvovjufycsjm", "bemyeji", "iuxegth", "rtudawlpjfel"))
            .withRecoveryType(RecoveryType.ORIGINAL_LOCATION)
            .withSourceResourceId("glmep")
            .withPropertyBag(mapOf("ykgsangpszng", "s"))
            .withTargetInfo(new TargetRestoreInfo().withOverwriteOption(OverwriteOptions.OVERWRITE)
                .withContainerId("lkvec")
                .withDatabaseName("jcngoadyed")
                .withTargetDirectoryForFileRestore("rgjfoknubnoi"))
            .withRecoveryMode(RecoveryMode.FILE_RECOVERY)
            .withTargetResourceGroupName("ztrgdgxvcoq")
            .withUserAssignedManagedIdentityDetails(new UserAssignedManagedIdentityDetails().withIdentityArmId("wugyx")
                .withIdentityName("itweialwvskbuh")
                .withUserAssignedIdentityProperties(
                    new UserAssignedIdentityProperties().withClientId("aq").withPrincipalId("ltcoqc")))
            .withSnapshotRestoreParameters(
                new SnapshotRestoreParameters().withSkipAttachAndMount(true).withLogPointInTimeForDBRecovery("xzak"))
            .withTargetVirtualMachineId("jkmvbi")
            .withShouldUseAlternateTargetLocation(true)
            .withIsNonRecoverable(false)
            .withAlternateDirectoryPaths(
                Arrays.asList(new SqlDataDirectoryMapping().withMappingType(SqlDataDirectoryType.INVALID)
                    .withSourceLogicalName("cvexreuqu")
                    .withSourcePath("tljvfwhreagkhyx")
                    .withTargetPath("qtvbczsu")))
            .withRecoveryPointRehydrationInfo(
                new RecoveryPointRehydrationInfo().withRehydrationRetentionDuration("xykfhyq")
                    .withRehydrationPriority(RehydrationPriority.HIGH));
        model = BinaryData.fromObject(model).toObject(AzureWorkloadSqlRestoreWithRehydrateRequest.class);
        Assertions.assertEquals("ofqcvovjufycsjm", model.resourceGuardOperationRequests().get(0));
        Assertions.assertEquals(RecoveryType.ORIGINAL_LOCATION, model.recoveryType());
        Assertions.assertEquals("glmep", model.sourceResourceId());
        Assertions.assertEquals("s", model.propertyBag().get("ykgsangpszng"));
        Assertions.assertEquals(OverwriteOptions.OVERWRITE, model.targetInfo().overwriteOption());
        Assertions.assertEquals("lkvec", model.targetInfo().containerId());
        Assertions.assertEquals("jcngoadyed", model.targetInfo().databaseName());
        Assertions.assertEquals("rgjfoknubnoi", model.targetInfo().targetDirectoryForFileRestore());
        Assertions.assertEquals(RecoveryMode.FILE_RECOVERY, model.recoveryMode());
        Assertions.assertEquals("ztrgdgxvcoq", model.targetResourceGroupName());
        Assertions.assertEquals("wugyx", model.userAssignedManagedIdentityDetails().identityArmId());
        Assertions.assertEquals("itweialwvskbuh", model.userAssignedManagedIdentityDetails().identityName());
        Assertions.assertEquals("aq",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().clientId());
        Assertions.assertEquals("ltcoqc",
            model.userAssignedManagedIdentityDetails().userAssignedIdentityProperties().principalId());
        Assertions.assertEquals(true, model.snapshotRestoreParameters().skipAttachAndMount());
        Assertions.assertEquals("xzak", model.snapshotRestoreParameters().logPointInTimeForDBRecovery());
        Assertions.assertEquals("jkmvbi", model.targetVirtualMachineId());
        Assertions.assertEquals(true, model.shouldUseAlternateTargetLocation());
        Assertions.assertEquals(false, model.isNonRecoverable());
        Assertions.assertEquals(SqlDataDirectoryType.INVALID, model.alternateDirectoryPaths().get(0).mappingType());
        Assertions.assertEquals("cvexreuqu", model.alternateDirectoryPaths().get(0).sourceLogicalName());
        Assertions.assertEquals("tljvfwhreagkhyx", model.alternateDirectoryPaths().get(0).sourcePath());
        Assertions.assertEquals("qtvbczsu", model.alternateDirectoryPaths().get(0).targetPath());
        Assertions.assertEquals("xykfhyq", model.recoveryPointRehydrationInfo().rehydrationRetentionDuration());
        Assertions.assertEquals(RehydrationPriority.HIGH, model.recoveryPointRehydrationInfo().rehydrationPriority());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
