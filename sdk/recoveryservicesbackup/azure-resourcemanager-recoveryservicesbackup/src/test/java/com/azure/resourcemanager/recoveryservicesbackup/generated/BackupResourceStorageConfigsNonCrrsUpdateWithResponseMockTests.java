// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesbackup.RecoveryServicesBackupManager;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.BackupResourceConfigResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupResourceConfig;
import com.azure.resourcemanager.recoveryservicesbackup.models.BackupResourceConfigResource;
import com.azure.resourcemanager.recoveryservicesbackup.models.DedupState;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageType;
import com.azure.resourcemanager.recoveryservicesbackup.models.StorageTypeState;
import com.azure.resourcemanager.recoveryservicesbackup.models.XcoolState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BackupResourceStorageConfigsNonCrrsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"storageModelType\":\"Invalid\",\"storageType\":\"Invalid\",\"storageTypeState\":\"Unlocked\",\"crossRegionRestoreFlag\":true,\"dedupState\":\"Enabled\",\"xcoolState\":\"Enabled\"},\"eTag\":\"qdurelyujlfyoum\",\"location\":\"ckyeclcdigpta\",\"tags\":{\"oclxiut\":\"zmqxucyci\"},\"id\":\"jc\",\"name\":\"z\",\"type\":\"zjd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesBackupManager manager = RecoveryServicesBackupManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupResourceConfigResource response = manager.backupResourceStorageConfigsNonCrrs()
            .updateWithResponse("byubhiqdxyurnpn", "hza",
                new BackupResourceConfigResourceInner().withLocation("rkdlb")
                    .withTags(mapOf("hzlwxaea", "xvhcs", "ndsbdw", "vurex", "t", "aderzmw", "tmvmmagoaqylkjz", "pag"))
                    .withProperties(new BackupResourceConfig().withStorageModelType(StorageType.GEO_REDUNDANT)
                        .withStorageType(StorageType.LOCALLY_REDUNDANT)
                        .withStorageTypeState(StorageTypeState.INVALID)
                        .withCrossRegionRestoreFlag(false)
                        .withDedupState(DedupState.ENABLED)
                        .withXcoolState(XcoolState.DISABLED))
                    .withEtag("gvxvatv"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ckyeclcdigpta", response.location());
        Assertions.assertEquals("zmqxucyci", response.tags().get("oclxiut"));
        Assertions.assertEquals(StorageType.INVALID, response.properties().storageModelType());
        Assertions.assertEquals(StorageType.INVALID, response.properties().storageType());
        Assertions.assertEquals(StorageTypeState.UNLOCKED, response.properties().storageTypeState());
        Assertions.assertEquals(true, response.properties().crossRegionRestoreFlag());
        Assertions.assertEquals(DedupState.ENABLED, response.properties().dedupState());
        Assertions.assertEquals(XcoolState.ENABLED, response.properties().xcoolState());
        Assertions.assertEquals("qdurelyujlfyoum", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
