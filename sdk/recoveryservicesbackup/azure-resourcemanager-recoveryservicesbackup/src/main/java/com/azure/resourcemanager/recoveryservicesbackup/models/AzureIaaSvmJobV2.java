// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Azure IaaS VM workload-specific job object.
 */
@Fluent
public final class AzureIaaSvmJobV2 extends Job {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String jobType = "AzureIaaSVMJobV2";

    /*
     * Gets or sets the state/actions applicable on this job like cancel/retry.
     */
    private List<JobSupportedAction> actionsInfo;

    /*
     * Container name of the entity on which the current job is executing.
     */
    private String containerName;

    /*
     * Time elapsed during the execution of this job.
     */
    private Duration duration;

    /*
     * Error details on execution of this job.
     */
    private List<AzureIaaSvmErrorInfo> errorDetails;

    /*
     * Specifies whether the backup item is a Classic or an Azure Resource Manager VM.
     */
    private String virtualMachineVersion;

    /*
     * Additional information for this job.
     */
    private AzureIaaSvmJobExtendedInfo extendedInfo;

    /**
     * Creates an instance of AzureIaaSvmJobV2 class.
     */
    public AzureIaaSvmJobV2() {
    }

    /**
     * Get the jobType property: This property will be used as the discriminator for deciding the specific types in the
     * polymorphic chain of types.
     * 
     * @return the jobType value.
     */
    @Override
    public String jobType() {
        return this.jobType;
    }

    /**
     * Get the actionsInfo property: Gets or sets the state/actions applicable on this job like cancel/retry.
     * 
     * @return the actionsInfo value.
     */
    public List<JobSupportedAction> actionsInfo() {
        return this.actionsInfo;
    }

    /**
     * Set the actionsInfo property: Gets or sets the state/actions applicable on this job like cancel/retry.
     * 
     * @param actionsInfo the actionsInfo value to set.
     * @return the AzureIaaSvmJobV2 object itself.
     */
    public AzureIaaSvmJobV2 withActionsInfo(List<JobSupportedAction> actionsInfo) {
        this.actionsInfo = actionsInfo;
        return this;
    }

    /**
     * Get the containerName property: Container name of the entity on which the current job is executing.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: Container name of the entity on which the current job is executing.
     * 
     * @param containerName the containerName value to set.
     * @return the AzureIaaSvmJobV2 object itself.
     */
    public AzureIaaSvmJobV2 withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get the duration property: Time elapsed during the execution of this job.
     * 
     * @return the duration value.
     */
    public Duration duration() {
        return this.duration;
    }

    /**
     * Set the duration property: Time elapsed during the execution of this job.
     * 
     * @param duration the duration value to set.
     * @return the AzureIaaSvmJobV2 object itself.
     */
    public AzureIaaSvmJobV2 withDuration(Duration duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the errorDetails property: Error details on execution of this job.
     * 
     * @return the errorDetails value.
     */
    public List<AzureIaaSvmErrorInfo> errorDetails() {
        return this.errorDetails;
    }

    /**
     * Set the errorDetails property: Error details on execution of this job.
     * 
     * @param errorDetails the errorDetails value to set.
     * @return the AzureIaaSvmJobV2 object itself.
     */
    public AzureIaaSvmJobV2 withErrorDetails(List<AzureIaaSvmErrorInfo> errorDetails) {
        this.errorDetails = errorDetails;
        return this;
    }

    /**
     * Get the virtualMachineVersion property: Specifies whether the backup item is a Classic or an Azure Resource
     * Manager VM.
     * 
     * @return the virtualMachineVersion value.
     */
    public String virtualMachineVersion() {
        return this.virtualMachineVersion;
    }

    /**
     * Set the virtualMachineVersion property: Specifies whether the backup item is a Classic or an Azure Resource
     * Manager VM.
     * 
     * @param virtualMachineVersion the virtualMachineVersion value to set.
     * @return the AzureIaaSvmJobV2 object itself.
     */
    public AzureIaaSvmJobV2 withVirtualMachineVersion(String virtualMachineVersion) {
        this.virtualMachineVersion = virtualMachineVersion;
        return this;
    }

    /**
     * Get the extendedInfo property: Additional information for this job.
     * 
     * @return the extendedInfo value.
     */
    public AzureIaaSvmJobExtendedInfo extendedInfo() {
        return this.extendedInfo;
    }

    /**
     * Set the extendedInfo property: Additional information for this job.
     * 
     * @param extendedInfo the extendedInfo value to set.
     * @return the AzureIaaSvmJobV2 object itself.
     */
    public AzureIaaSvmJobV2 withExtendedInfo(AzureIaaSvmJobExtendedInfo extendedInfo) {
        this.extendedInfo = extendedInfo;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureIaaSvmJobV2 withEntityFriendlyName(String entityFriendlyName) {
        super.withEntityFriendlyName(entityFriendlyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureIaaSvmJobV2 withBackupManagementType(BackupManagementType backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureIaaSvmJobV2 withOperation(String operation) {
        super.withOperation(operation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureIaaSvmJobV2 withStatus(String status) {
        super.withStatus(status);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureIaaSvmJobV2 withStartTime(OffsetDateTime startTime) {
        super.withStartTime(startTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureIaaSvmJobV2 withEndTime(OffsetDateTime endTime) {
        super.withEndTime(endTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureIaaSvmJobV2 withActivityId(String activityId) {
        super.withActivityId(activityId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (errorDetails() != null) {
            errorDetails().forEach(e -> e.validate());
        }
        if (extendedInfo() != null) {
            extendedInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityFriendlyName", entityFriendlyName());
        jsonWriter.writeStringField("backupManagementType",
            backupManagementType() == null ? null : backupManagementType().toString());
        jsonWriter.writeStringField("operation", operation());
        jsonWriter.writeStringField("status", status());
        jsonWriter.writeStringField("startTime",
            startTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(startTime()));
        jsonWriter.writeStringField("endTime",
            endTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(endTime()));
        jsonWriter.writeStringField("activityId", activityId());
        jsonWriter.writeStringField("jobType", this.jobType);
        jsonWriter.writeArrayField("actionsInfo", this.actionsInfo,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeStringField("duration", CoreUtils.durationToStringWithDays(this.duration));
        jsonWriter.writeArrayField("errorDetails", this.errorDetails, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("virtualMachineVersion", this.virtualMachineVersion);
        jsonWriter.writeJsonField("extendedInfo", this.extendedInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureIaaSvmJobV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureIaaSvmJobV2 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureIaaSvmJobV2.
     */
    public static AzureIaaSvmJobV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureIaaSvmJobV2 deserializedAzureIaaSvmJobV2 = new AzureIaaSvmJobV2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityFriendlyName".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.withEntityFriendlyName(reader.getString());
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2
                        .withBackupManagementType(BackupManagementType.fromString(reader.getString()));
                } else if ("operation".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.withOperation(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.withStatus(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.withStartTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endTime".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.withEndTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("activityId".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.withActivityId(reader.getString());
                } else if ("jobType".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.jobType = reader.getString();
                } else if ("actionsInfo".equals(fieldName)) {
                    List<JobSupportedAction> actionsInfo
                        = reader.readArray(reader1 -> JobSupportedAction.fromString(reader1.getString()));
                    deserializedAzureIaaSvmJobV2.actionsInfo = actionsInfo;
                } else if ("containerName".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.containerName = reader.getString();
                } else if ("duration".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.duration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("errorDetails".equals(fieldName)) {
                    List<AzureIaaSvmErrorInfo> errorDetails
                        = reader.readArray(reader1 -> AzureIaaSvmErrorInfo.fromJson(reader1));
                    deserializedAzureIaaSvmJobV2.errorDetails = errorDetails;
                } else if ("virtualMachineVersion".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.virtualMachineVersion = reader.getString();
                } else if ("extendedInfo".equals(fieldName)) {
                    deserializedAzureIaaSvmJobV2.extendedInfo = AzureIaaSvmJobExtendedInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureIaaSvmJobV2;
        });
    }
}
