// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Container extended information.
 */
@Fluent
public final class GenericContainerExtendedInfo implements JsonSerializable<GenericContainerExtendedInfo> {
    /*
     * Public key of container cert
     */
    private String rawCertData;

    /*
     * Container identity information
     */
    private ContainerIdentityInfo containerIdentityInfo;

    /*
     * Azure Backup Service Endpoints for the container
     */
    private Map<String, String> serviceEndpoints;

    /**
     * Creates an instance of GenericContainerExtendedInfo class.
     */
    public GenericContainerExtendedInfo() {
    }

    /**
     * Get the rawCertData property: Public key of container cert.
     * 
     * @return the rawCertData value.
     */
    public String rawCertData() {
        return this.rawCertData;
    }

    /**
     * Set the rawCertData property: Public key of container cert.
     * 
     * @param rawCertData the rawCertData value to set.
     * @return the GenericContainerExtendedInfo object itself.
     */
    public GenericContainerExtendedInfo withRawCertData(String rawCertData) {
        this.rawCertData = rawCertData;
        return this;
    }

    /**
     * Get the containerIdentityInfo property: Container identity information.
     * 
     * @return the containerIdentityInfo value.
     */
    public ContainerIdentityInfo containerIdentityInfo() {
        return this.containerIdentityInfo;
    }

    /**
     * Set the containerIdentityInfo property: Container identity information.
     * 
     * @param containerIdentityInfo the containerIdentityInfo value to set.
     * @return the GenericContainerExtendedInfo object itself.
     */
    public GenericContainerExtendedInfo withContainerIdentityInfo(ContainerIdentityInfo containerIdentityInfo) {
        this.containerIdentityInfo = containerIdentityInfo;
        return this;
    }

    /**
     * Get the serviceEndpoints property: Azure Backup Service Endpoints for the container.
     * 
     * @return the serviceEndpoints value.
     */
    public Map<String, String> serviceEndpoints() {
        return this.serviceEndpoints;
    }

    /**
     * Set the serviceEndpoints property: Azure Backup Service Endpoints for the container.
     * 
     * @param serviceEndpoints the serviceEndpoints value to set.
     * @return the GenericContainerExtendedInfo object itself.
     */
    public GenericContainerExtendedInfo withServiceEndpoints(Map<String, String> serviceEndpoints) {
        this.serviceEndpoints = serviceEndpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerIdentityInfo() != null) {
            containerIdentityInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rawCertData", this.rawCertData);
        jsonWriter.writeJsonField("containerIdentityInfo", this.containerIdentityInfo);
        jsonWriter.writeMapField("serviceEndpoints", this.serviceEndpoints,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenericContainerExtendedInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenericContainerExtendedInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GenericContainerExtendedInfo.
     */
    public static GenericContainerExtendedInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenericContainerExtendedInfo deserializedGenericContainerExtendedInfo = new GenericContainerExtendedInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rawCertData".equals(fieldName)) {
                    deserializedGenericContainerExtendedInfo.rawCertData = reader.getString();
                } else if ("containerIdentityInfo".equals(fieldName)) {
                    deserializedGenericContainerExtendedInfo.containerIdentityInfo
                        = ContainerIdentityInfo.fromJson(reader);
                } else if ("serviceEndpoints".equals(fieldName)) {
                    Map<String, String> serviceEndpoints = reader.readMap(reader1 -> reader1.getString());
                    deserializedGenericContainerExtendedInfo.serviceEndpoints = serviceEndpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenericContainerExtendedInfo;
        });
    }
}
