// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Simple policy schedule.
 */
@Fluent
public final class SimpleSchedulePolicy extends SchedulePolicy {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String schedulePolicyType = "SimpleSchedulePolicy";

    /*
     * Frequency of the schedule operation of this policy.
     */
    private ScheduleRunType scheduleRunFrequency;

    /*
     * List of days of week this schedule has to be run.
     */
    private List<DayOfWeek> scheduleRunDays;

    /*
     * List of times of day this schedule has to be run.
     */
    private List<OffsetDateTime> scheduleRunTimes;

    /*
     * Hourly Schedule of this Policy
     */
    private HourlySchedule hourlySchedule;

    /*
     * At every number weeks this schedule has to be run.
     */
    private Integer scheduleWeeklyFrequency;

    /**
     * Creates an instance of SimpleSchedulePolicy class.
     */
    public SimpleSchedulePolicy() {
    }

    /**
     * Get the schedulePolicyType property: This property will be used as the discriminator for deciding the specific
     * types in the polymorphic chain of types.
     * 
     * @return the schedulePolicyType value.
     */
    @Override
    public String schedulePolicyType() {
        return this.schedulePolicyType;
    }

    /**
     * Get the scheduleRunFrequency property: Frequency of the schedule operation of this policy.
     * 
     * @return the scheduleRunFrequency value.
     */
    public ScheduleRunType scheduleRunFrequency() {
        return this.scheduleRunFrequency;
    }

    /**
     * Set the scheduleRunFrequency property: Frequency of the schedule operation of this policy.
     * 
     * @param scheduleRunFrequency the scheduleRunFrequency value to set.
     * @return the SimpleSchedulePolicy object itself.
     */
    public SimpleSchedulePolicy withScheduleRunFrequency(ScheduleRunType scheduleRunFrequency) {
        this.scheduleRunFrequency = scheduleRunFrequency;
        return this;
    }

    /**
     * Get the scheduleRunDays property: List of days of week this schedule has to be run.
     * 
     * @return the scheduleRunDays value.
     */
    public List<DayOfWeek> scheduleRunDays() {
        return this.scheduleRunDays;
    }

    /**
     * Set the scheduleRunDays property: List of days of week this schedule has to be run.
     * 
     * @param scheduleRunDays the scheduleRunDays value to set.
     * @return the SimpleSchedulePolicy object itself.
     */
    public SimpleSchedulePolicy withScheduleRunDays(List<DayOfWeek> scheduleRunDays) {
        this.scheduleRunDays = scheduleRunDays;
        return this;
    }

    /**
     * Get the scheduleRunTimes property: List of times of day this schedule has to be run.
     * 
     * @return the scheduleRunTimes value.
     */
    public List<OffsetDateTime> scheduleRunTimes() {
        return this.scheduleRunTimes;
    }

    /**
     * Set the scheduleRunTimes property: List of times of day this schedule has to be run.
     * 
     * @param scheduleRunTimes the scheduleRunTimes value to set.
     * @return the SimpleSchedulePolicy object itself.
     */
    public SimpleSchedulePolicy withScheduleRunTimes(List<OffsetDateTime> scheduleRunTimes) {
        this.scheduleRunTimes = scheduleRunTimes;
        return this;
    }

    /**
     * Get the hourlySchedule property: Hourly Schedule of this Policy.
     * 
     * @return the hourlySchedule value.
     */
    public HourlySchedule hourlySchedule() {
        return this.hourlySchedule;
    }

    /**
     * Set the hourlySchedule property: Hourly Schedule of this Policy.
     * 
     * @param hourlySchedule the hourlySchedule value to set.
     * @return the SimpleSchedulePolicy object itself.
     */
    public SimpleSchedulePolicy withHourlySchedule(HourlySchedule hourlySchedule) {
        this.hourlySchedule = hourlySchedule;
        return this;
    }

    /**
     * Get the scheduleWeeklyFrequency property: At every number weeks this schedule has to be run.
     * 
     * @return the scheduleWeeklyFrequency value.
     */
    public Integer scheduleWeeklyFrequency() {
        return this.scheduleWeeklyFrequency;
    }

    /**
     * Set the scheduleWeeklyFrequency property: At every number weeks this schedule has to be run.
     * 
     * @param scheduleWeeklyFrequency the scheduleWeeklyFrequency value to set.
     * @return the SimpleSchedulePolicy object itself.
     */
    public SimpleSchedulePolicy withScheduleWeeklyFrequency(Integer scheduleWeeklyFrequency) {
        this.scheduleWeeklyFrequency = scheduleWeeklyFrequency;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (hourlySchedule() != null) {
            hourlySchedule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("schedulePolicyType", this.schedulePolicyType);
        jsonWriter.writeStringField("scheduleRunFrequency",
            this.scheduleRunFrequency == null ? null : this.scheduleRunFrequency.toString());
        jsonWriter.writeArrayField("scheduleRunDays", this.scheduleRunDays,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("scheduleRunTimes", this.scheduleRunTimes, (writer, element) -> writer
            .writeString(element == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(element)));
        jsonWriter.writeJsonField("hourlySchedule", this.hourlySchedule);
        jsonWriter.writeNumberField("scheduleWeeklyFrequency", this.scheduleWeeklyFrequency);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SimpleSchedulePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SimpleSchedulePolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SimpleSchedulePolicy.
     */
    public static SimpleSchedulePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SimpleSchedulePolicy deserializedSimpleSchedulePolicy = new SimpleSchedulePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schedulePolicyType".equals(fieldName)) {
                    deserializedSimpleSchedulePolicy.schedulePolicyType = reader.getString();
                } else if ("scheduleRunFrequency".equals(fieldName)) {
                    deserializedSimpleSchedulePolicy.scheduleRunFrequency
                        = ScheduleRunType.fromString(reader.getString());
                } else if ("scheduleRunDays".equals(fieldName)) {
                    List<DayOfWeek> scheduleRunDays
                        = reader.readArray(reader1 -> DayOfWeek.fromString(reader1.getString()));
                    deserializedSimpleSchedulePolicy.scheduleRunDays = scheduleRunDays;
                } else if ("scheduleRunTimes".equals(fieldName)) {
                    List<OffsetDateTime> scheduleRunTimes = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                    deserializedSimpleSchedulePolicy.scheduleRunTimes = scheduleRunTimes;
                } else if ("hourlySchedule".equals(fieldName)) {
                    deserializedSimpleSchedulePolicy.hourlySchedule = HourlySchedule.fromJson(reader);
                } else if ("scheduleWeeklyFrequency".equals(fieldName)) {
                    deserializedSimpleSchedulePolicy.scheduleWeeklyFrequency = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSimpleSchedulePolicy;
        });
    }
}
