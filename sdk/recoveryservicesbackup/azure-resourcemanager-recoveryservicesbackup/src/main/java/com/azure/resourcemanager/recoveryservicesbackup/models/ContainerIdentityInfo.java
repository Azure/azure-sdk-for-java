// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Container identity information.
 */
@Fluent
public final class ContainerIdentityInfo implements JsonSerializable<ContainerIdentityInfo> {
    /*
     * Unique name of the container
     */
    private String uniqueName;

    /*
     * Protection container identity - AAD Tenant
     */
    private String aadTenantId;

    /*
     * Protection container identity - AAD Service Principal
     */
    private String servicePrincipalClientId;

    /*
     * Protection container identity - Audience
     */
    private String audience;

    /**
     * Creates an instance of ContainerIdentityInfo class.
     */
    public ContainerIdentityInfo() {
    }

    /**
     * Get the uniqueName property: Unique name of the container.
     * 
     * @return the uniqueName value.
     */
    public String uniqueName() {
        return this.uniqueName;
    }

    /**
     * Set the uniqueName property: Unique name of the container.
     * 
     * @param uniqueName the uniqueName value to set.
     * @return the ContainerIdentityInfo object itself.
     */
    public ContainerIdentityInfo withUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
        return this;
    }

    /**
     * Get the aadTenantId property: Protection container identity - AAD Tenant.
     * 
     * @return the aadTenantId value.
     */
    public String aadTenantId() {
        return this.aadTenantId;
    }

    /**
     * Set the aadTenantId property: Protection container identity - AAD Tenant.
     * 
     * @param aadTenantId the aadTenantId value to set.
     * @return the ContainerIdentityInfo object itself.
     */
    public ContainerIdentityInfo withAadTenantId(String aadTenantId) {
        this.aadTenantId = aadTenantId;
        return this;
    }

    /**
     * Get the servicePrincipalClientId property: Protection container identity - AAD Service Principal.
     * 
     * @return the servicePrincipalClientId value.
     */
    public String servicePrincipalClientId() {
        return this.servicePrincipalClientId;
    }

    /**
     * Set the servicePrincipalClientId property: Protection container identity - AAD Service Principal.
     * 
     * @param servicePrincipalClientId the servicePrincipalClientId value to set.
     * @return the ContainerIdentityInfo object itself.
     */
    public ContainerIdentityInfo withServicePrincipalClientId(String servicePrincipalClientId) {
        this.servicePrincipalClientId = servicePrincipalClientId;
        return this;
    }

    /**
     * Get the audience property: Protection container identity - Audience.
     * 
     * @return the audience value.
     */
    public String audience() {
        return this.audience;
    }

    /**
     * Set the audience property: Protection container identity - Audience.
     * 
     * @param audience the audience value to set.
     * @return the ContainerIdentityInfo object itself.
     */
    public ContainerIdentityInfo withAudience(String audience) {
        this.audience = audience;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("uniqueName", this.uniqueName);
        jsonWriter.writeStringField("aadTenantId", this.aadTenantId);
        jsonWriter.writeStringField("servicePrincipalClientId", this.servicePrincipalClientId);
        jsonWriter.writeStringField("audience", this.audience);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerIdentityInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerIdentityInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContainerIdentityInfo.
     */
    public static ContainerIdentityInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerIdentityInfo deserializedContainerIdentityInfo = new ContainerIdentityInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uniqueName".equals(fieldName)) {
                    deserializedContainerIdentityInfo.uniqueName = reader.getString();
                } else if ("aadTenantId".equals(fieldName)) {
                    deserializedContainerIdentityInfo.aadTenantId = reader.getString();
                } else if ("servicePrincipalClientId".equals(fieldName)) {
                    deserializedContainerIdentityInfo.servicePrincipalClientId = reader.getString();
                } else if ("audience".equals(fieldName)) {
                    deserializedContainerIdentityInfo.audience = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerIdentityInfo;
        });
    }
}
