// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Prepare DataMove Request.
 */
@Fluent
public final class PrepareDataMoveRequest implements JsonSerializable<PrepareDataMoveRequest> {
    /*
     * ARM Id of target vault
     */
    private String targetResourceId;

    /*
     * Target Region
     */
    private String targetRegion;

    /*
     * DataMove Level
     */
    private DataMoveLevel dataMoveLevel;

    /*
     * Source Container ArmIds
     * This needs to be populated only if DataMoveLevel is set to container
     */
    private List<String> sourceContainerArmIds;

    /*
     * Ignore the artifacts which are already moved.
     */
    private Boolean ignoreMoved;

    /**
     * Creates an instance of PrepareDataMoveRequest class.
     */
    public PrepareDataMoveRequest() {
    }

    /**
     * Get the targetResourceId property: ARM Id of target vault.
     * 
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: ARM Id of target vault.
     * 
     * @param targetResourceId the targetResourceId value to set.
     * @return the PrepareDataMoveRequest object itself.
     */
    public PrepareDataMoveRequest withTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        return this;
    }

    /**
     * Get the targetRegion property: Target Region.
     * 
     * @return the targetRegion value.
     */
    public String targetRegion() {
        return this.targetRegion;
    }

    /**
     * Set the targetRegion property: Target Region.
     * 
     * @param targetRegion the targetRegion value to set.
     * @return the PrepareDataMoveRequest object itself.
     */
    public PrepareDataMoveRequest withTargetRegion(String targetRegion) {
        this.targetRegion = targetRegion;
        return this;
    }

    /**
     * Get the dataMoveLevel property: DataMove Level.
     * 
     * @return the dataMoveLevel value.
     */
    public DataMoveLevel dataMoveLevel() {
        return this.dataMoveLevel;
    }

    /**
     * Set the dataMoveLevel property: DataMove Level.
     * 
     * @param dataMoveLevel the dataMoveLevel value to set.
     * @return the PrepareDataMoveRequest object itself.
     */
    public PrepareDataMoveRequest withDataMoveLevel(DataMoveLevel dataMoveLevel) {
        this.dataMoveLevel = dataMoveLevel;
        return this;
    }

    /**
     * Get the sourceContainerArmIds property: Source Container ArmIds
     * This needs to be populated only if DataMoveLevel is set to container.
     * 
     * @return the sourceContainerArmIds value.
     */
    public List<String> sourceContainerArmIds() {
        return this.sourceContainerArmIds;
    }

    /**
     * Set the sourceContainerArmIds property: Source Container ArmIds
     * This needs to be populated only if DataMoveLevel is set to container.
     * 
     * @param sourceContainerArmIds the sourceContainerArmIds value to set.
     * @return the PrepareDataMoveRequest object itself.
     */
    public PrepareDataMoveRequest withSourceContainerArmIds(List<String> sourceContainerArmIds) {
        this.sourceContainerArmIds = sourceContainerArmIds;
        return this;
    }

    /**
     * Get the ignoreMoved property: Ignore the artifacts which are already moved.
     * 
     * @return the ignoreMoved value.
     */
    public Boolean ignoreMoved() {
        return this.ignoreMoved;
    }

    /**
     * Set the ignoreMoved property: Ignore the artifacts which are already moved.
     * 
     * @param ignoreMoved the ignoreMoved value to set.
     * @return the PrepareDataMoveRequest object itself.
     */
    public PrepareDataMoveRequest withIgnoreMoved(Boolean ignoreMoved) {
        this.ignoreMoved = ignoreMoved;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetResourceId in model PrepareDataMoveRequest"));
        }
        if (targetRegion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetRegion in model PrepareDataMoveRequest"));
        }
        if (dataMoveLevel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataMoveLevel in model PrepareDataMoveRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrepareDataMoveRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceId", this.targetResourceId);
        jsonWriter.writeStringField("targetRegion", this.targetRegion);
        jsonWriter.writeStringField("dataMoveLevel", this.dataMoveLevel == null ? null : this.dataMoveLevel.toString());
        jsonWriter.writeArrayField("sourceContainerArmIds", this.sourceContainerArmIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("ignoreMoved", this.ignoreMoved);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrepareDataMoveRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrepareDataMoveRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PrepareDataMoveRequest.
     */
    public static PrepareDataMoveRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrepareDataMoveRequest deserializedPrepareDataMoveRequest = new PrepareDataMoveRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceId".equals(fieldName)) {
                    deserializedPrepareDataMoveRequest.targetResourceId = reader.getString();
                } else if ("targetRegion".equals(fieldName)) {
                    deserializedPrepareDataMoveRequest.targetRegion = reader.getString();
                } else if ("dataMoveLevel".equals(fieldName)) {
                    deserializedPrepareDataMoveRequest.dataMoveLevel = DataMoveLevel.fromString(reader.getString());
                } else if ("sourceContainerArmIds".equals(fieldName)) {
                    List<String> sourceContainerArmIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedPrepareDataMoveRequest.sourceContainerArmIds = sourceContainerArmIds;
                } else if ("ignoreMoved".equals(fieldName)) {
                    deserializedPrepareDataMoveRequest.ignoreMoved = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrepareDataMoveRequest;
        });
    }
}
