// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Validation for inquired protectable items under a given container.
 */
@Fluent
public final class InquiryValidation implements JsonSerializable<InquiryValidation> {
    /*
     * Status for the Inquiry Validation.
     */
    private String status;

    /*
     * Error Detail in case the status is non-success.
     */
    private ErrorDetail errorDetail;

    /*
     * Error Additional Detail in case the status is non-success.
     */
    private String additionalDetail;

    /*
     * Dictionary to store the count of ProtectableItems with key POType.
     */
    private Object protectableItemCount;

    /**
     * Creates an instance of InquiryValidation class.
     */
    public InquiryValidation() {
    }

    /**
     * Get the status property: Status for the Inquiry Validation.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Status for the Inquiry Validation.
     * 
     * @param status the status value to set.
     * @return the InquiryValidation object itself.
     */
    public InquiryValidation withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the errorDetail property: Error Detail in case the status is non-success.
     * 
     * @return the errorDetail value.
     */
    public ErrorDetail errorDetail() {
        return this.errorDetail;
    }

    /**
     * Set the errorDetail property: Error Detail in case the status is non-success.
     * 
     * @param errorDetail the errorDetail value to set.
     * @return the InquiryValidation object itself.
     */
    public InquiryValidation withErrorDetail(ErrorDetail errorDetail) {
        this.errorDetail = errorDetail;
        return this;
    }

    /**
     * Get the additionalDetail property: Error Additional Detail in case the status is non-success.
     * 
     * @return the additionalDetail value.
     */
    public String additionalDetail() {
        return this.additionalDetail;
    }

    /**
     * Get the protectableItemCount property: Dictionary to store the count of ProtectableItems with key POType.
     * 
     * @return the protectableItemCount value.
     */
    public Object protectableItemCount() {
        return this.protectableItemCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errorDetail() != null) {
            errorDetail().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeJsonField("errorDetail", this.errorDetail);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InquiryValidation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InquiryValidation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InquiryValidation.
     */
    public static InquiryValidation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InquiryValidation deserializedInquiryValidation = new InquiryValidation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedInquiryValidation.status = reader.getString();
                } else if ("errorDetail".equals(fieldName)) {
                    deserializedInquiryValidation.errorDetail = ErrorDetail.fromJson(reader);
                } else if ("additionalDetail".equals(fieldName)) {
                    deserializedInquiryValidation.additionalDetail = reader.getString();
                } else if ("protectableItemCount".equals(fieldName)) {
                    deserializedInquiryValidation.protectableItemCount = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInquiryValidation;
        });
    }
}
