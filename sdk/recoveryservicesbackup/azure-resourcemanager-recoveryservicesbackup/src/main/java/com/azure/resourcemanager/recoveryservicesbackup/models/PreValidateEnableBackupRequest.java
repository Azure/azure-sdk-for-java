// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contract to validate if backup can be enabled on the given resource in a given vault and given configuration.
 * It will validate followings
 * 1. Vault capacity
 * 2. VM is already protected
 * 3. Any VM related configuration passed in properties.
 */
@Fluent
public final class PreValidateEnableBackupRequest implements JsonSerializable<PreValidateEnableBackupRequest> {
    /*
     * ProtectedItem Type- VM, SqlDataBase, AzureFileShare etc
     */
    private DataSourceType resourceType;

    /*
     * ARM Virtual Machine Id
     */
    private String resourceId;

    /*
     * ARM id of the Recovery Services Vault
     */
    private String vaultId;

    /*
     * Configuration of VM if any needs to be validated like OS type etc
     */
    private String properties;

    /**
     * Creates an instance of PreValidateEnableBackupRequest class.
     */
    public PreValidateEnableBackupRequest() {
    }

    /**
     * Get the resourceType property: ProtectedItem Type- VM, SqlDataBase, AzureFileShare etc.
     * 
     * @return the resourceType value.
     */
    public DataSourceType resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: ProtectedItem Type- VM, SqlDataBase, AzureFileShare etc.
     * 
     * @param resourceType the resourceType value to set.
     * @return the PreValidateEnableBackupRequest object itself.
     */
    public PreValidateEnableBackupRequest withResourceType(DataSourceType resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the resourceId property: ARM Virtual Machine Id.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ARM Virtual Machine Id.
     * 
     * @param resourceId the resourceId value to set.
     * @return the PreValidateEnableBackupRequest object itself.
     */
    public PreValidateEnableBackupRequest withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the vaultId property: ARM id of the Recovery Services Vault.
     * 
     * @return the vaultId value.
     */
    public String vaultId() {
        return this.vaultId;
    }

    /**
     * Set the vaultId property: ARM id of the Recovery Services Vault.
     * 
     * @param vaultId the vaultId value to set.
     * @return the PreValidateEnableBackupRequest object itself.
     */
    public PreValidateEnableBackupRequest withVaultId(String vaultId) {
        this.vaultId = vaultId;
        return this;
    }

    /**
     * Get the properties property: Configuration of VM if any needs to be validated like OS type etc.
     * 
     * @return the properties value.
     */
    public String properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Configuration of VM if any needs to be validated like OS type etc.
     * 
     * @param properties the properties value to set.
     * @return the PreValidateEnableBackupRequest object itself.
     */
    public PreValidateEnableBackupRequest withProperties(String properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceType", this.resourceType == null ? null : this.resourceType.toString());
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("vaultId", this.vaultId);
        jsonWriter.writeStringField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PreValidateEnableBackupRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PreValidateEnableBackupRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PreValidateEnableBackupRequest.
     */
    public static PreValidateEnableBackupRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PreValidateEnableBackupRequest deserializedPreValidateEnableBackupRequest
                = new PreValidateEnableBackupRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedPreValidateEnableBackupRequest.resourceType
                        = DataSourceType.fromString(reader.getString());
                } else if ("resourceId".equals(fieldName)) {
                    deserializedPreValidateEnableBackupRequest.resourceId = reader.getString();
                } else if ("vaultId".equals(fieldName)) {
                    deserializedPreValidateEnableBackupRequest.vaultId = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPreValidateEnableBackupRequest.properties = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPreValidateEnableBackupRequest;
        });
    }
}
