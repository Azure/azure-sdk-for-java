// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Workload specific recovery point, specifically encapsulates full/diff recovery point.
 */
@Fluent
public class AzureWorkloadRecoveryPoint extends RecoveryPoint {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "AzureWorkloadRecoveryPoint";

    /*
     * UTC time at which recovery point was created
     */
    private OffsetDateTime recoveryPointTimeInUtc;

    /*
     * Type of restore point
     */
    private RestorePointType type;

    /*
     * Recovery point tier information.
     */
    private List<RecoveryPointTierInformationV2> recoveryPointTierDetails;

    /*
     * Eligibility of RP to be moved to another tier
     */
    private Map<String, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo;

    /*
     * Properties of Recovery Point
     */
    private RecoveryPointProperties recoveryPointProperties;

    /**
     * Creates an instance of AzureWorkloadRecoveryPoint class.
     */
    public AzureWorkloadRecoveryPoint() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the recoveryPointTimeInUtc property: UTC time at which recovery point was created.
     * 
     * @return the recoveryPointTimeInUtc value.
     */
    public OffsetDateTime recoveryPointTimeInUtc() {
        return this.recoveryPointTimeInUtc;
    }

    /**
     * Set the recoveryPointTimeInUtc property: UTC time at which recovery point was created.
     * 
     * @param recoveryPointTimeInUtc the recoveryPointTimeInUtc value to set.
     * @return the AzureWorkloadRecoveryPoint object itself.
     */
    public AzureWorkloadRecoveryPoint withRecoveryPointTimeInUtc(OffsetDateTime recoveryPointTimeInUtc) {
        this.recoveryPointTimeInUtc = recoveryPointTimeInUtc;
        return this;
    }

    /**
     * Get the type property: Type of restore point.
     * 
     * @return the type value.
     */
    public RestorePointType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of restore point.
     * 
     * @param type the type value to set.
     * @return the AzureWorkloadRecoveryPoint object itself.
     */
    public AzureWorkloadRecoveryPoint withType(RestorePointType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the recoveryPointTierDetails property: Recovery point tier information.
     * 
     * @return the recoveryPointTierDetails value.
     */
    public List<RecoveryPointTierInformationV2> recoveryPointTierDetails() {
        return this.recoveryPointTierDetails;
    }

    /**
     * Set the recoveryPointTierDetails property: Recovery point tier information.
     * 
     * @param recoveryPointTierDetails the recoveryPointTierDetails value to set.
     * @return the AzureWorkloadRecoveryPoint object itself.
     */
    public AzureWorkloadRecoveryPoint
        withRecoveryPointTierDetails(List<RecoveryPointTierInformationV2> recoveryPointTierDetails) {
        this.recoveryPointTierDetails = recoveryPointTierDetails;
        return this;
    }

    /**
     * Get the recoveryPointMoveReadinessInfo property: Eligibility of RP to be moved to another tier.
     * 
     * @return the recoveryPointMoveReadinessInfo value.
     */
    public Map<String, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo() {
        return this.recoveryPointMoveReadinessInfo;
    }

    /**
     * Set the recoveryPointMoveReadinessInfo property: Eligibility of RP to be moved to another tier.
     * 
     * @param recoveryPointMoveReadinessInfo the recoveryPointMoveReadinessInfo value to set.
     * @return the AzureWorkloadRecoveryPoint object itself.
     */
    public AzureWorkloadRecoveryPoint
        withRecoveryPointMoveReadinessInfo(Map<String, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo) {
        this.recoveryPointMoveReadinessInfo = recoveryPointMoveReadinessInfo;
        return this;
    }

    /**
     * Get the recoveryPointProperties property: Properties of Recovery Point.
     * 
     * @return the recoveryPointProperties value.
     */
    public RecoveryPointProperties recoveryPointProperties() {
        return this.recoveryPointProperties;
    }

    /**
     * Set the recoveryPointProperties property: Properties of Recovery Point.
     * 
     * @param recoveryPointProperties the recoveryPointProperties value to set.
     * @return the AzureWorkloadRecoveryPoint object itself.
     */
    public AzureWorkloadRecoveryPoint withRecoveryPointProperties(RecoveryPointProperties recoveryPointProperties) {
        this.recoveryPointProperties = recoveryPointProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (recoveryPointTierDetails() != null) {
            recoveryPointTierDetails().forEach(e -> e.validate());
        }
        if (recoveryPointMoveReadinessInfo() != null) {
            recoveryPointMoveReadinessInfo().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (recoveryPointProperties() != null) {
            recoveryPointProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeStringField("recoveryPointTimeInUTC",
            this.recoveryPointTimeInUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.recoveryPointTimeInUtc));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("recoveryPointTierDetails", this.recoveryPointTierDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("recoveryPointMoveReadinessInfo", this.recoveryPointMoveReadinessInfo,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("recoveryPointProperties", this.recoveryPointProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureWorkloadRecoveryPoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureWorkloadRecoveryPoint if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureWorkloadRecoveryPoint.
     */
    public static AzureWorkloadRecoveryPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("objectType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureWorkloadPointInTimeRecoveryPoint".equals(discriminatorValue)) {
                    return AzureWorkloadPointInTimeRecoveryPoint.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("AzureWorkloadSAPHanaPointInTimeRecoveryPoint".equals(discriminatorValue)) {
                    return AzureWorkloadSapHanaPointInTimeRecoveryPoint.fromJson(readerToUse.reset());
                } else if ("AzureWorkloadSAPHanaRecoveryPoint".equals(discriminatorValue)) {
                    return AzureWorkloadSapHanaRecoveryPoint.fromJson(readerToUse.reset());
                } else if ("AzureWorkloadSQLRecoveryPoint".equals(discriminatorValue)) {
                    return AzureWorkloadSqlRecoveryPoint.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("AzureWorkloadSQLPointInTimeRecoveryPoint".equals(discriminatorValue)) {
                    return AzureWorkloadSqlPointInTimeRecoveryPoint.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AzureWorkloadRecoveryPoint fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureWorkloadRecoveryPoint deserializedAzureWorkloadRecoveryPoint = new AzureWorkloadRecoveryPoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectType".equals(fieldName)) {
                    deserializedAzureWorkloadRecoveryPoint.objectType = reader.getString();
                } else if ("recoveryPointTimeInUTC".equals(fieldName)) {
                    deserializedAzureWorkloadRecoveryPoint.recoveryPointTimeInUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedAzureWorkloadRecoveryPoint.type = RestorePointType.fromString(reader.getString());
                } else if ("recoveryPointTierDetails".equals(fieldName)) {
                    List<RecoveryPointTierInformationV2> recoveryPointTierDetails
                        = reader.readArray(reader1 -> RecoveryPointTierInformationV2.fromJson(reader1));
                    deserializedAzureWorkloadRecoveryPoint.recoveryPointTierDetails = recoveryPointTierDetails;
                } else if ("recoveryPointMoveReadinessInfo".equals(fieldName)) {
                    Map<String, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo
                        = reader.readMap(reader1 -> RecoveryPointMoveReadinessInfo.fromJson(reader1));
                    deserializedAzureWorkloadRecoveryPoint.recoveryPointMoveReadinessInfo
                        = recoveryPointMoveReadinessInfo;
                } else if ("recoveryPointProperties".equals(fieldName)) {
                    deserializedAzureWorkloadRecoveryPoint.recoveryPointProperties
                        = RecoveryPointProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureWorkloadRecoveryPoint;
        });
    }
}
