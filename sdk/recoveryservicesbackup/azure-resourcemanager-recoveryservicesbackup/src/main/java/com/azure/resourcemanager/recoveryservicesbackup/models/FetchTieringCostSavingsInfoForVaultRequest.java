// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request parameters for tiering cost info for vault.
 */
@Fluent
public final class FetchTieringCostSavingsInfoForVaultRequest extends FetchTieringCostInfoRequest {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "FetchTieringCostSavingsInfoForVaultRequest";

    /**
     * Creates an instance of FetchTieringCostSavingsInfoForVaultRequest class.
     */
    public FetchTieringCostSavingsInfoForVaultRequest() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FetchTieringCostSavingsInfoForVaultRequest withSourceTierType(RecoveryPointTierType sourceTierType) {
        super.withSourceTierType(sourceTierType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FetchTieringCostSavingsInfoForVaultRequest withTargetTierType(RecoveryPointTierType targetTierType) {
        super.withTargetTierType(targetTierType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceTierType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceTierType in model FetchTieringCostSavingsInfoForVaultRequest"));
        }
        if (targetTierType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetTierType in model FetchTieringCostSavingsInfoForVaultRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FetchTieringCostSavingsInfoForVaultRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceTierType", sourceTierType() == null ? null : sourceTierType().toString());
        jsonWriter.writeStringField("targetTierType", targetTierType() == null ? null : targetTierType().toString());
        jsonWriter.writeStringField("objectType", this.objectType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FetchTieringCostSavingsInfoForVaultRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FetchTieringCostSavingsInfoForVaultRequest if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FetchTieringCostSavingsInfoForVaultRequest.
     */
    public static FetchTieringCostSavingsInfoForVaultRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FetchTieringCostSavingsInfoForVaultRequest deserializedFetchTieringCostSavingsInfoForVaultRequest
                = new FetchTieringCostSavingsInfoForVaultRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceTierType".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForVaultRequest
                        .withSourceTierType(RecoveryPointTierType.fromString(reader.getString()));
                } else if ("targetTierType".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForVaultRequest
                        .withTargetTierType(RecoveryPointTierType.fromString(reader.getString()));
                } else if ("objectType".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForVaultRequest.objectType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFetchTieringCostSavingsInfoForVaultRequest;
        });
    }
}
