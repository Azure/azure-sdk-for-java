// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Common settings field for backup management.
 */
@Fluent
public final class Settings implements JsonSerializable<Settings> {
    /*
     * TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
     */
    private String timeZone;

    /*
     * SQL compression flag
     */
    private Boolean issqlcompression;

    /*
     * Workload compression flag. This has been added so that 'isSqlCompression'
     * will be deprecated once clients upgrade to consider this flag.
     */
    private Boolean isCompression;

    /**
     * Creates an instance of Settings class.
     */
    public Settings() {
    }

    /**
     * Get the timeZone property: TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
     * 
     * @param timeZone the timeZone value to set.
     * @return the Settings object itself.
     */
    public Settings withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the issqlcompression property: SQL compression flag.
     * 
     * @return the issqlcompression value.
     */
    public Boolean issqlcompression() {
        return this.issqlcompression;
    }

    /**
     * Set the issqlcompression property: SQL compression flag.
     * 
     * @param issqlcompression the issqlcompression value to set.
     * @return the Settings object itself.
     */
    public Settings withIssqlcompression(Boolean issqlcompression) {
        this.issqlcompression = issqlcompression;
        return this;
    }

    /**
     * Get the isCompression property: Workload compression flag. This has been added so that 'isSqlCompression'
     * will be deprecated once clients upgrade to consider this flag.
     * 
     * @return the isCompression value.
     */
    public Boolean isCompression() {
        return this.isCompression;
    }

    /**
     * Set the isCompression property: Workload compression flag. This has been added so that 'isSqlCompression'
     * will be deprecated once clients upgrade to consider this flag.
     * 
     * @param isCompression the isCompression value to set.
     * @return the Settings object itself.
     */
    public Settings withIsCompression(Boolean isCompression) {
        this.isCompression = isCompression;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeBooleanField("issqlcompression", this.issqlcompression);
        jsonWriter.writeBooleanField("isCompression", this.isCompression);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Settings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Settings if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Settings.
     */
    public static Settings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Settings deserializedSettings = new Settings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeZone".equals(fieldName)) {
                    deserializedSettings.timeZone = reader.getString();
                } else if ("issqlcompression".equals(fieldName)) {
                    deserializedSettings.issqlcompression = reader.getNullable(JsonReader::getBoolean);
                } else if ("isCompression".equals(fieldName)) {
                    deserializedSettings.isCompression = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSettings;
        });
    }
}
