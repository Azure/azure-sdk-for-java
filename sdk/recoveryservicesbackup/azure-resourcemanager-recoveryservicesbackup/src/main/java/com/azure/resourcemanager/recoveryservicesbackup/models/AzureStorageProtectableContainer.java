// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Storage-specific protectable containers.
 */
@Fluent
public final class AzureStorageProtectableContainer extends ProtectableContainer {
    /*
     * Type of the container. The value of this property for
     * 1. Compute Azure VM is Microsoft.Compute/virtualMachines
     * 2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines
     */
    private ProtectableContainerType protectableContainerType = ProtectableContainerType.STORAGE_CONTAINER;

    /**
     * Creates an instance of AzureStorageProtectableContainer class.
     */
    public AzureStorageProtectableContainer() {
    }

    /**
     * Get the protectableContainerType property: Type of the container. The value of this property for
     * 1. Compute Azure VM is Microsoft.Compute/virtualMachines
     * 2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines.
     * 
     * @return the protectableContainerType value.
     */
    @Override
    public ProtectableContainerType protectableContainerType() {
        return this.protectableContainerType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureStorageProtectableContainer withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureStorageProtectableContainer withBackupManagementType(BackupManagementType backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureStorageProtectableContainer withHealthStatus(String healthStatus) {
        super.withHealthStatus(healthStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureStorageProtectableContainer withContainerId(String containerId) {
        super.withContainerId(containerId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", friendlyName());
        jsonWriter.writeStringField("backupManagementType",
            backupManagementType() == null ? null : backupManagementType().toString());
        jsonWriter.writeStringField("healthStatus", healthStatus());
        jsonWriter.writeStringField("containerId", containerId());
        jsonWriter.writeStringField("protectableContainerType",
            this.protectableContainerType == null ? null : this.protectableContainerType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureStorageProtectableContainer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureStorageProtectableContainer if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureStorageProtectableContainer.
     */
    public static AzureStorageProtectableContainer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureStorageProtectableContainer deserializedAzureStorageProtectableContainer
                = new AzureStorageProtectableContainer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedAzureStorageProtectableContainer.withFriendlyName(reader.getString());
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedAzureStorageProtectableContainer
                        .withBackupManagementType(BackupManagementType.fromString(reader.getString()));
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedAzureStorageProtectableContainer.withHealthStatus(reader.getString());
                } else if ("containerId".equals(fieldName)) {
                    deserializedAzureStorageProtectableContainer.withContainerId(reader.getString());
                } else if ("protectableContainerType".equals(fieldName)) {
                    deserializedAzureStorageProtectableContainer.protectableContainerType
                        = ProtectableContainerType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureStorageProtectableContainer;
        });
    }
}
