// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Daily retention format.
 */
@Fluent
public final class DailyRetentionFormat implements JsonSerializable<DailyRetentionFormat> {
    /*
     * List of days of the month.
     */
    private List<Day> daysOfTheMonth;

    /**
     * Creates an instance of DailyRetentionFormat class.
     */
    public DailyRetentionFormat() {
    }

    /**
     * Get the daysOfTheMonth property: List of days of the month.
     * 
     * @return the daysOfTheMonth value.
     */
    public List<Day> daysOfTheMonth() {
        return this.daysOfTheMonth;
    }

    /**
     * Set the daysOfTheMonth property: List of days of the month.
     * 
     * @param daysOfTheMonth the daysOfTheMonth value to set.
     * @return the DailyRetentionFormat object itself.
     */
    public DailyRetentionFormat withDaysOfTheMonth(List<Day> daysOfTheMonth) {
        this.daysOfTheMonth = daysOfTheMonth;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (daysOfTheMonth() != null) {
            daysOfTheMonth().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("daysOfTheMonth", this.daysOfTheMonth,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyRetentionFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyRetentionFormat if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DailyRetentionFormat.
     */
    public static DailyRetentionFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DailyRetentionFormat deserializedDailyRetentionFormat = new DailyRetentionFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("daysOfTheMonth".equals(fieldName)) {
                    List<Day> daysOfTheMonth = reader.readArray(reader1 -> Day.fromJson(reader1));
                    deserializedDailyRetentionFormat.daysOfTheMonth = daysOfTheMonth;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDailyRetentionFormat;
        });
    }
}
