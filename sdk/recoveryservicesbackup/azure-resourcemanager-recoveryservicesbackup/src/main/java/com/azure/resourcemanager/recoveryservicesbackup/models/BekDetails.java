// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * BEK is bitlocker encryption key.
 */
@Fluent
public final class BekDetails implements JsonSerializable<BekDetails> {
    /*
     * Secret is BEK.
     */
    private String secretUrl;

    /*
     * ID of the Key Vault where this Secret is stored.
     */
    private String secretVaultId;

    /*
     * BEK data.
     */
    private String secretData;

    /**
     * Creates an instance of BekDetails class.
     */
    public BekDetails() {
    }

    /**
     * Get the secretUrl property: Secret is BEK.
     * 
     * @return the secretUrl value.
     */
    public String secretUrl() {
        return this.secretUrl;
    }

    /**
     * Set the secretUrl property: Secret is BEK.
     * 
     * @param secretUrl the secretUrl value to set.
     * @return the BekDetails object itself.
     */
    public BekDetails withSecretUrl(String secretUrl) {
        this.secretUrl = secretUrl;
        return this;
    }

    /**
     * Get the secretVaultId property: ID of the Key Vault where this Secret is stored.
     * 
     * @return the secretVaultId value.
     */
    public String secretVaultId() {
        return this.secretVaultId;
    }

    /**
     * Set the secretVaultId property: ID of the Key Vault where this Secret is stored.
     * 
     * @param secretVaultId the secretVaultId value to set.
     * @return the BekDetails object itself.
     */
    public BekDetails withSecretVaultId(String secretVaultId) {
        this.secretVaultId = secretVaultId;
        return this;
    }

    /**
     * Get the secretData property: BEK data.
     * 
     * @return the secretData value.
     */
    public String secretData() {
        return this.secretData;
    }

    /**
     * Set the secretData property: BEK data.
     * 
     * @param secretData the secretData value to set.
     * @return the BekDetails object itself.
     */
    public BekDetails withSecretData(String secretData) {
        this.secretData = secretData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretUrl", this.secretUrl);
        jsonWriter.writeStringField("secretVaultId", this.secretVaultId);
        jsonWriter.writeStringField("secretData", this.secretData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BekDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BekDetails if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the BekDetails.
     */
    public static BekDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BekDetails deserializedBekDetails = new BekDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretUrl".equals(fieldName)) {
                    deserializedBekDetails.secretUrl = reader.getString();
                } else if ("secretVaultId".equals(fieldName)) {
                    deserializedBekDetails.secretVaultId = reader.getString();
                } else if ("secretData".equals(fieldName)) {
                    deserializedBekDetails.secretData = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBekDetails;
        });
    }
}
