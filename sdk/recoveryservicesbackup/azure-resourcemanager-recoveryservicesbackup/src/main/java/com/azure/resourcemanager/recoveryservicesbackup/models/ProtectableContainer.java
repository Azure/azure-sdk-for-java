// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Protectable Container Class.
 */
@Fluent
public class ProtectableContainer implements JsonSerializable<ProtectableContainer> {
    /*
     * Type of the container. The value of this property for
     * 1. Compute Azure VM is Microsoft.Compute/virtualMachines
     * 2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines
     */
    private ProtectableContainerType protectableContainerType;

    /*
     * Friendly name of the container.
     */
    private String friendlyName;

    /*
     * Type of backup management for the container.
     */
    private BackupManagementType backupManagementType;

    /*
     * Status of health of the container.
     */
    private String healthStatus;

    /*
     * Fabric Id of the container such as ARM Id.
     */
    private String containerId;

    /**
     * Creates an instance of ProtectableContainer class.
     */
    public ProtectableContainer() {
    }

    /**
     * Get the protectableContainerType property: Type of the container. The value of this property for
     * 1. Compute Azure VM is Microsoft.Compute/virtualMachines
     * 2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines.
     * 
     * @return the protectableContainerType value.
     */
    public ProtectableContainerType protectableContainerType() {
        return this.protectableContainerType;
    }

    /**
     * Get the friendlyName property: Friendly name of the container.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the container.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the ProtectableContainer object itself.
     */
    public ProtectableContainer withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the backupManagementType property: Type of backup management for the container.
     * 
     * @return the backupManagementType value.
     */
    public BackupManagementType backupManagementType() {
        return this.backupManagementType;
    }

    /**
     * Set the backupManagementType property: Type of backup management for the container.
     * 
     * @param backupManagementType the backupManagementType value to set.
     * @return the ProtectableContainer object itself.
     */
    public ProtectableContainer withBackupManagementType(BackupManagementType backupManagementType) {
        this.backupManagementType = backupManagementType;
        return this;
    }

    /**
     * Get the healthStatus property: Status of health of the container.
     * 
     * @return the healthStatus value.
     */
    public String healthStatus() {
        return this.healthStatus;
    }

    /**
     * Set the healthStatus property: Status of health of the container.
     * 
     * @param healthStatus the healthStatus value to set.
     * @return the ProtectableContainer object itself.
     */
    public ProtectableContainer withHealthStatus(String healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }

    /**
     * Get the containerId property: Fabric Id of the container such as ARM Id.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: Fabric Id of the container such as ARM Id.
     * 
     * @param containerId the containerId value to set.
     * @return the ProtectableContainer object itself.
     */
    public ProtectableContainer withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("protectableContainerType",
            this.protectableContainerType == null ? null : this.protectableContainerType.toString());
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("backupManagementType",
            this.backupManagementType == null ? null : this.backupManagementType.toString());
        jsonWriter.writeStringField("healthStatus", this.healthStatus);
        jsonWriter.writeStringField("containerId", this.containerId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProtectableContainer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProtectableContainer if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProtectableContainer.
     */
    public static ProtectableContainer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("protectableContainerType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("StorageContainer".equals(discriminatorValue)) {
                    return AzureStorageProtectableContainer.fromJson(readerToUse.reset());
                } else if ("VMAppContainer".equals(discriminatorValue)) {
                    return AzureVMAppContainerProtectableContainer.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ProtectableContainer fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProtectableContainer deserializedProtectableContainer = new ProtectableContainer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protectableContainerType".equals(fieldName)) {
                    deserializedProtectableContainer.protectableContainerType
                        = ProtectableContainerType.fromString(reader.getString());
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedProtectableContainer.friendlyName = reader.getString();
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedProtectableContainer.backupManagementType
                        = BackupManagementType.fromString(reader.getString());
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedProtectableContainer.healthStatus = reader.getString();
                } else if ("containerId".equals(fieldName)) {
                    deserializedProtectableContainer.containerId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProtectableContainer;
        });
    }
}
