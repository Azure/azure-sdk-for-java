// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Private Endpoint Connection Response Properties.
 */
@Fluent
public final class PrivateEndpointConnection implements JsonSerializable<PrivateEndpointConnection> {
    /*
     * Gets or sets provisioning state of the private endpoint connection
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets private endpoint associated with the private endpoint connection
     */
    private PrivateEndpoint privateEndpoint;

    /*
     * Group Ids for the Private Endpoint
     */
    private List<VaultSubResourceType> groupIds;

    /*
     * Gets or sets private link service connection state
     */
    private PrivateLinkServiceConnectionState privateLinkServiceConnectionState;

    /**
     * Creates an instance of PrivateEndpointConnection class.
     */
    public PrivateEndpointConnection() {
    }

    /**
     * Get the provisioningState property: Gets or sets provisioning state of the private endpoint connection.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets or sets provisioning state of the private endpoint connection.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the PrivateEndpointConnection object itself.
     */
    public PrivateEndpointConnection withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the privateEndpoint property: Gets or sets private endpoint associated with the private endpoint connection.
     * 
     * @return the privateEndpoint value.
     */
    public PrivateEndpoint privateEndpoint() {
        return this.privateEndpoint;
    }

    /**
     * Set the privateEndpoint property: Gets or sets private endpoint associated with the private endpoint connection.
     * 
     * @param privateEndpoint the privateEndpoint value to set.
     * @return the PrivateEndpointConnection object itself.
     */
    public PrivateEndpointConnection withPrivateEndpoint(PrivateEndpoint privateEndpoint) {
        this.privateEndpoint = privateEndpoint;
        return this;
    }

    /**
     * Get the groupIds property: Group Ids for the Private Endpoint.
     * 
     * @return the groupIds value.
     */
    public List<VaultSubResourceType> groupIds() {
        return this.groupIds;
    }

    /**
     * Set the groupIds property: Group Ids for the Private Endpoint.
     * 
     * @param groupIds the groupIds value to set.
     * @return the PrivateEndpointConnection object itself.
     */
    public PrivateEndpointConnection withGroupIds(List<VaultSubResourceType> groupIds) {
        this.groupIds = groupIds;
        return this;
    }

    /**
     * Get the privateLinkServiceConnectionState property: Gets or sets private link service connection state.
     * 
     * @return the privateLinkServiceConnectionState value.
     */
    public PrivateLinkServiceConnectionState privateLinkServiceConnectionState() {
        return this.privateLinkServiceConnectionState;
    }

    /**
     * Set the privateLinkServiceConnectionState property: Gets or sets private link service connection state.
     * 
     * @param privateLinkServiceConnectionState the privateLinkServiceConnectionState value to set.
     * @return the PrivateEndpointConnection object itself.
     */
    public PrivateEndpointConnection
        withPrivateLinkServiceConnectionState(PrivateLinkServiceConnectionState privateLinkServiceConnectionState) {
        this.privateLinkServiceConnectionState = privateLinkServiceConnectionState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateEndpoint() != null) {
            privateEndpoint().validate();
        }
        if (privateLinkServiceConnectionState() != null) {
            privateLinkServiceConnectionState().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeJsonField("privateEndpoint", this.privateEndpoint);
        jsonWriter.writeArrayField("groupIds", this.groupIds,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeJsonField("privateLinkServiceConnectionState", this.privateLinkServiceConnectionState);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateEndpointConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateEndpointConnection if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrivateEndpointConnection.
     */
    public static PrivateEndpointConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateEndpointConnection deserializedPrivateEndpointConnection = new PrivateEndpointConnection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedPrivateEndpointConnection.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("privateEndpoint".equals(fieldName)) {
                    deserializedPrivateEndpointConnection.privateEndpoint = PrivateEndpoint.fromJson(reader);
                } else if ("groupIds".equals(fieldName)) {
                    List<VaultSubResourceType> groupIds
                        = reader.readArray(reader1 -> VaultSubResourceType.fromString(reader1.getString()));
                    deserializedPrivateEndpointConnection.groupIds = groupIds;
                } else if ("privateLinkServiceConnectionState".equals(fieldName)) {
                    deserializedPrivateEndpointConnection.privateLinkServiceConnectionState
                        = PrivateLinkServiceConnectionState.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateEndpointConnection;
        });
    }
}
