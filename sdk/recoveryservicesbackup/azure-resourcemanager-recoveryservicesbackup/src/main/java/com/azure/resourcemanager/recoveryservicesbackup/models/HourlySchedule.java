// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The HourlySchedule model.
 */
@Fluent
public final class HourlySchedule implements JsonSerializable<HourlySchedule> {
    /*
     * Interval at which backup needs to be triggered. For hourly the value
     * can be 4/6/8/12
     */
    private Integer interval;

    /*
     * To specify start time of the backup window
     */
    private OffsetDateTime scheduleWindowStartTime;

    /*
     * To specify duration of the backup window
     */
    private Integer scheduleWindowDuration;

    /**
     * Creates an instance of HourlySchedule class.
     */
    public HourlySchedule() {
    }

    /**
     * Get the interval property: Interval at which backup needs to be triggered. For hourly the value
     * can be 4/6/8/12.
     * 
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: Interval at which backup needs to be triggered. For hourly the value
     * can be 4/6/8/12.
     * 
     * @param interval the interval value to set.
     * @return the HourlySchedule object itself.
     */
    public HourlySchedule withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the scheduleWindowStartTime property: To specify start time of the backup window.
     * 
     * @return the scheduleWindowStartTime value.
     */
    public OffsetDateTime scheduleWindowStartTime() {
        return this.scheduleWindowStartTime;
    }

    /**
     * Set the scheduleWindowStartTime property: To specify start time of the backup window.
     * 
     * @param scheduleWindowStartTime the scheduleWindowStartTime value to set.
     * @return the HourlySchedule object itself.
     */
    public HourlySchedule withScheduleWindowStartTime(OffsetDateTime scheduleWindowStartTime) {
        this.scheduleWindowStartTime = scheduleWindowStartTime;
        return this;
    }

    /**
     * Get the scheduleWindowDuration property: To specify duration of the backup window.
     * 
     * @return the scheduleWindowDuration value.
     */
    public Integer scheduleWindowDuration() {
        return this.scheduleWindowDuration;
    }

    /**
     * Set the scheduleWindowDuration property: To specify duration of the backup window.
     * 
     * @param scheduleWindowDuration the scheduleWindowDuration value to set.
     * @return the HourlySchedule object itself.
     */
    public HourlySchedule withScheduleWindowDuration(Integer scheduleWindowDuration) {
        this.scheduleWindowDuration = scheduleWindowDuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("interval", this.interval);
        jsonWriter.writeStringField("scheduleWindowStartTime",
            this.scheduleWindowStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduleWindowStartTime));
        jsonWriter.writeNumberField("scheduleWindowDuration", this.scheduleWindowDuration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HourlySchedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HourlySchedule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HourlySchedule.
     */
    public static HourlySchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HourlySchedule deserializedHourlySchedule = new HourlySchedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("interval".equals(fieldName)) {
                    deserializedHourlySchedule.interval = reader.getNullable(JsonReader::getInt);
                } else if ("scheduleWindowStartTime".equals(fieldName)) {
                    deserializedHourlySchedule.scheduleWindowStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("scheduleWindowDuration".equals(fieldName)) {
                    deserializedHourlySchedule.scheduleWindowDuration = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHourlySchedule;
        });
    }
}
