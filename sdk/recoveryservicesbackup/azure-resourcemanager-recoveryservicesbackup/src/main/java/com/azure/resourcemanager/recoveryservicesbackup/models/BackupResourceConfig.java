// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource storage details.
 */
@Fluent
public final class BackupResourceConfig implements JsonSerializable<BackupResourceConfig> {
    /*
     * Storage type
     */
    private StorageType storageModelType;

    /*
     * Storage type.
     */
    private StorageType storageType;

    /*
     * Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked.
     */
    private StorageTypeState storageTypeState;

    /*
     * Opt in details of Cross Region Restore feature.
     */
    private Boolean crossRegionRestoreFlag;

    /*
     * Vault Dedup state
     */
    private DedupState dedupState;

    /*
     * Vault x-cool state
     */
    private XcoolState xcoolState;

    /**
     * Creates an instance of BackupResourceConfig class.
     */
    public BackupResourceConfig() {
    }

    /**
     * Get the storageModelType property: Storage type.
     * 
     * @return the storageModelType value.
     */
    public StorageType storageModelType() {
        return this.storageModelType;
    }

    /**
     * Set the storageModelType property: Storage type.
     * 
     * @param storageModelType the storageModelType value to set.
     * @return the BackupResourceConfig object itself.
     */
    public BackupResourceConfig withStorageModelType(StorageType storageModelType) {
        this.storageModelType = storageModelType;
        return this;
    }

    /**
     * Get the storageType property: Storage type.
     * 
     * @return the storageType value.
     */
    public StorageType storageType() {
        return this.storageType;
    }

    /**
     * Set the storageType property: Storage type.
     * 
     * @param storageType the storageType value to set.
     * @return the BackupResourceConfig object itself.
     */
    public BackupResourceConfig withStorageType(StorageType storageType) {
        this.storageType = storageType;
        return this;
    }

    /**
     * Get the storageTypeState property: Locked or Unlocked. Once a machine is registered against a resource, the
     * storageTypeState is always Locked.
     * 
     * @return the storageTypeState value.
     */
    public StorageTypeState storageTypeState() {
        return this.storageTypeState;
    }

    /**
     * Set the storageTypeState property: Locked or Unlocked. Once a machine is registered against a resource, the
     * storageTypeState is always Locked.
     * 
     * @param storageTypeState the storageTypeState value to set.
     * @return the BackupResourceConfig object itself.
     */
    public BackupResourceConfig withStorageTypeState(StorageTypeState storageTypeState) {
        this.storageTypeState = storageTypeState;
        return this;
    }

    /**
     * Get the crossRegionRestoreFlag property: Opt in details of Cross Region Restore feature.
     * 
     * @return the crossRegionRestoreFlag value.
     */
    public Boolean crossRegionRestoreFlag() {
        return this.crossRegionRestoreFlag;
    }

    /**
     * Set the crossRegionRestoreFlag property: Opt in details of Cross Region Restore feature.
     * 
     * @param crossRegionRestoreFlag the crossRegionRestoreFlag value to set.
     * @return the BackupResourceConfig object itself.
     */
    public BackupResourceConfig withCrossRegionRestoreFlag(Boolean crossRegionRestoreFlag) {
        this.crossRegionRestoreFlag = crossRegionRestoreFlag;
        return this;
    }

    /**
     * Get the dedupState property: Vault Dedup state.
     * 
     * @return the dedupState value.
     */
    public DedupState dedupState() {
        return this.dedupState;
    }

    /**
     * Set the dedupState property: Vault Dedup state.
     * 
     * @param dedupState the dedupState value to set.
     * @return the BackupResourceConfig object itself.
     */
    public BackupResourceConfig withDedupState(DedupState dedupState) {
        this.dedupState = dedupState;
        return this;
    }

    /**
     * Get the xcoolState property: Vault x-cool state.
     * 
     * @return the xcoolState value.
     */
    public XcoolState xcoolState() {
        return this.xcoolState;
    }

    /**
     * Set the xcoolState property: Vault x-cool state.
     * 
     * @param xcoolState the xcoolState value to set.
     * @return the BackupResourceConfig object itself.
     */
    public BackupResourceConfig withXcoolState(XcoolState xcoolState) {
        this.xcoolState = xcoolState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageModelType",
            this.storageModelType == null ? null : this.storageModelType.toString());
        jsonWriter.writeStringField("storageType", this.storageType == null ? null : this.storageType.toString());
        jsonWriter.writeStringField("storageTypeState",
            this.storageTypeState == null ? null : this.storageTypeState.toString());
        jsonWriter.writeBooleanField("crossRegionRestoreFlag", this.crossRegionRestoreFlag);
        jsonWriter.writeStringField("dedupState", this.dedupState == null ? null : this.dedupState.toString());
        jsonWriter.writeStringField("xcoolState", this.xcoolState == null ? null : this.xcoolState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupResourceConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupResourceConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupResourceConfig.
     */
    public static BackupResourceConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupResourceConfig deserializedBackupResourceConfig = new BackupResourceConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageModelType".equals(fieldName)) {
                    deserializedBackupResourceConfig.storageModelType = StorageType.fromString(reader.getString());
                } else if ("storageType".equals(fieldName)) {
                    deserializedBackupResourceConfig.storageType = StorageType.fromString(reader.getString());
                } else if ("storageTypeState".equals(fieldName)) {
                    deserializedBackupResourceConfig.storageTypeState = StorageTypeState.fromString(reader.getString());
                } else if ("crossRegionRestoreFlag".equals(fieldName)) {
                    deserializedBackupResourceConfig.crossRegionRestoreFlag
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("dedupState".equals(fieldName)) {
                    deserializedBackupResourceConfig.dedupState = DedupState.fromString(reader.getString());
                } else if ("xcoolState".equals(fieldName)) {
                    deserializedBackupResourceConfig.xcoolState = XcoolState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupResourceConfig;
        });
    }
}
