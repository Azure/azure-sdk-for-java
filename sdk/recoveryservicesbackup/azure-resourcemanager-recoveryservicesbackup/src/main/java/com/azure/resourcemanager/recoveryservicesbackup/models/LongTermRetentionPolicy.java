// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Long term retention policy.
 */
@Fluent
public final class LongTermRetentionPolicy extends RetentionPolicy {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String retentionPolicyType = "LongTermRetentionPolicy";

    /*
     * Daily retention schedule of the protection policy.
     */
    private DailyRetentionSchedule dailySchedule;

    /*
     * Weekly retention schedule of the protection policy.
     */
    private WeeklyRetentionSchedule weeklySchedule;

    /*
     * Monthly retention schedule of the protection policy.
     */
    private MonthlyRetentionSchedule monthlySchedule;

    /*
     * Yearly retention schedule of the protection policy.
     */
    private YearlyRetentionSchedule yearlySchedule;

    /**
     * Creates an instance of LongTermRetentionPolicy class.
     */
    public LongTermRetentionPolicy() {
    }

    /**
     * Get the retentionPolicyType property: This property will be used as the discriminator for deciding the specific
     * types in the polymorphic chain of types.
     * 
     * @return the retentionPolicyType value.
     */
    @Override
    public String retentionPolicyType() {
        return this.retentionPolicyType;
    }

    /**
     * Get the dailySchedule property: Daily retention schedule of the protection policy.
     * 
     * @return the dailySchedule value.
     */
    public DailyRetentionSchedule dailySchedule() {
        return this.dailySchedule;
    }

    /**
     * Set the dailySchedule property: Daily retention schedule of the protection policy.
     * 
     * @param dailySchedule the dailySchedule value to set.
     * @return the LongTermRetentionPolicy object itself.
     */
    public LongTermRetentionPolicy withDailySchedule(DailyRetentionSchedule dailySchedule) {
        this.dailySchedule = dailySchedule;
        return this;
    }

    /**
     * Get the weeklySchedule property: Weekly retention schedule of the protection policy.
     * 
     * @return the weeklySchedule value.
     */
    public WeeklyRetentionSchedule weeklySchedule() {
        return this.weeklySchedule;
    }

    /**
     * Set the weeklySchedule property: Weekly retention schedule of the protection policy.
     * 
     * @param weeklySchedule the weeklySchedule value to set.
     * @return the LongTermRetentionPolicy object itself.
     */
    public LongTermRetentionPolicy withWeeklySchedule(WeeklyRetentionSchedule weeklySchedule) {
        this.weeklySchedule = weeklySchedule;
        return this;
    }

    /**
     * Get the monthlySchedule property: Monthly retention schedule of the protection policy.
     * 
     * @return the monthlySchedule value.
     */
    public MonthlyRetentionSchedule monthlySchedule() {
        return this.monthlySchedule;
    }

    /**
     * Set the monthlySchedule property: Monthly retention schedule of the protection policy.
     * 
     * @param monthlySchedule the monthlySchedule value to set.
     * @return the LongTermRetentionPolicy object itself.
     */
    public LongTermRetentionPolicy withMonthlySchedule(MonthlyRetentionSchedule monthlySchedule) {
        this.monthlySchedule = monthlySchedule;
        return this;
    }

    /**
     * Get the yearlySchedule property: Yearly retention schedule of the protection policy.
     * 
     * @return the yearlySchedule value.
     */
    public YearlyRetentionSchedule yearlySchedule() {
        return this.yearlySchedule;
    }

    /**
     * Set the yearlySchedule property: Yearly retention schedule of the protection policy.
     * 
     * @param yearlySchedule the yearlySchedule value to set.
     * @return the LongTermRetentionPolicy object itself.
     */
    public LongTermRetentionPolicy withYearlySchedule(YearlyRetentionSchedule yearlySchedule) {
        this.yearlySchedule = yearlySchedule;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dailySchedule() != null) {
            dailySchedule().validate();
        }
        if (weeklySchedule() != null) {
            weeklySchedule().validate();
        }
        if (monthlySchedule() != null) {
            monthlySchedule().validate();
        }
        if (yearlySchedule() != null) {
            yearlySchedule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("retentionPolicyType", this.retentionPolicyType);
        jsonWriter.writeJsonField("dailySchedule", this.dailySchedule);
        jsonWriter.writeJsonField("weeklySchedule", this.weeklySchedule);
        jsonWriter.writeJsonField("monthlySchedule", this.monthlySchedule);
        jsonWriter.writeJsonField("yearlySchedule", this.yearlySchedule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LongTermRetentionPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LongTermRetentionPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LongTermRetentionPolicy.
     */
    public static LongTermRetentionPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LongTermRetentionPolicy deserializedLongTermRetentionPolicy = new LongTermRetentionPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionPolicyType".equals(fieldName)) {
                    deserializedLongTermRetentionPolicy.retentionPolicyType = reader.getString();
                } else if ("dailySchedule".equals(fieldName)) {
                    deserializedLongTermRetentionPolicy.dailySchedule = DailyRetentionSchedule.fromJson(reader);
                } else if ("weeklySchedule".equals(fieldName)) {
                    deserializedLongTermRetentionPolicy.weeklySchedule = WeeklyRetentionSchedule.fromJson(reader);
                } else if ("monthlySchedule".equals(fieldName)) {
                    deserializedLongTermRetentionPolicy.monthlySchedule = MonthlyRetentionSchedule.fromJson(reader);
                } else if ("yearlySchedule".equals(fieldName)) {
                    deserializedLongTermRetentionPolicy.yearlySchedule = YearlyRetentionSchedule.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLongTermRetentionPolicy;
        });
    }
}
