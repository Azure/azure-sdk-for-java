// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DPM workload-specific protection container.
 */
@Fluent
public class DpmContainer extends ProtectionContainer {
    /*
     * Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines
     * 2.
     * Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
     * Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
     * Backup is VMAppContainer
     */
    private ProtectableContainerType containerType = ProtectableContainerType.DPMCONTAINER;

    /*
     * Specifies whether the container is re-registrable.
     */
    private Boolean canReRegister;

    /*
     * ID of container.
     */
    private String containerId;

    /*
     * Number of protected items in the BackupEngine
     */
    private Long protectedItemCount;

    /*
     * Backup engine Agent version
     */
    private String dpmAgentVersion;

    /*
     * List of BackupEngines protecting the container
     */
    private List<String> dpmServers;

    /*
     * To check if upgrade available
     */
    private Boolean upgradeAvailable;

    /*
     * Protection status of the container.
     */
    private String protectionStatus;

    /*
     * Extended Info of the container.
     */
    private DpmContainerExtendedInfo extendedInfo;

    /**
     * Creates an instance of DpmContainer class.
     */
    public DpmContainer() {
    }

    /**
     * Get the containerType property: Type of the container. The value of this property for: 1. Compute Azure VM is
     * Microsoft.Compute/virtualMachines 2.
     * Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
     * Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
     * Backup is VMAppContainer.
     * 
     * @return the containerType value.
     */
    @Override
    public ProtectableContainerType containerType() {
        return this.containerType;
    }

    /**
     * Get the canReRegister property: Specifies whether the container is re-registrable.
     * 
     * @return the canReRegister value.
     */
    public Boolean canReRegister() {
        return this.canReRegister;
    }

    /**
     * Set the canReRegister property: Specifies whether the container is re-registrable.
     * 
     * @param canReRegister the canReRegister value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withCanReRegister(Boolean canReRegister) {
        this.canReRegister = canReRegister;
        return this;
    }

    /**
     * Get the containerId property: ID of container.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: ID of container.
     * 
     * @param containerId the containerId value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Get the protectedItemCount property: Number of protected items in the BackupEngine.
     * 
     * @return the protectedItemCount value.
     */
    public Long protectedItemCount() {
        return this.protectedItemCount;
    }

    /**
     * Set the protectedItemCount property: Number of protected items in the BackupEngine.
     * 
     * @param protectedItemCount the protectedItemCount value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withProtectedItemCount(Long protectedItemCount) {
        this.protectedItemCount = protectedItemCount;
        return this;
    }

    /**
     * Get the dpmAgentVersion property: Backup engine Agent version.
     * 
     * @return the dpmAgentVersion value.
     */
    public String dpmAgentVersion() {
        return this.dpmAgentVersion;
    }

    /**
     * Set the dpmAgentVersion property: Backup engine Agent version.
     * 
     * @param dpmAgentVersion the dpmAgentVersion value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withDpmAgentVersion(String dpmAgentVersion) {
        this.dpmAgentVersion = dpmAgentVersion;
        return this;
    }

    /**
     * Get the dpmServers property: List of BackupEngines protecting the container.
     * 
     * @return the dpmServers value.
     */
    public List<String> dpmServers() {
        return this.dpmServers;
    }

    /**
     * Set the dpmServers property: List of BackupEngines protecting the container.
     * 
     * @param dpmServers the dpmServers value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withDpmServers(List<String> dpmServers) {
        this.dpmServers = dpmServers;
        return this;
    }

    /**
     * Get the upgradeAvailable property: To check if upgrade available.
     * 
     * @return the upgradeAvailable value.
     */
    public Boolean upgradeAvailable() {
        return this.upgradeAvailable;
    }

    /**
     * Set the upgradeAvailable property: To check if upgrade available.
     * 
     * @param upgradeAvailable the upgradeAvailable value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withUpgradeAvailable(Boolean upgradeAvailable) {
        this.upgradeAvailable = upgradeAvailable;
        return this;
    }

    /**
     * Get the protectionStatus property: Protection status of the container.
     * 
     * @return the protectionStatus value.
     */
    public String protectionStatus() {
        return this.protectionStatus;
    }

    /**
     * Set the protectionStatus property: Protection status of the container.
     * 
     * @param protectionStatus the protectionStatus value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withProtectionStatus(String protectionStatus) {
        this.protectionStatus = protectionStatus;
        return this;
    }

    /**
     * Get the extendedInfo property: Extended Info of the container.
     * 
     * @return the extendedInfo value.
     */
    public DpmContainerExtendedInfo extendedInfo() {
        return this.extendedInfo;
    }

    /**
     * Set the extendedInfo property: Extended Info of the container.
     * 
     * @param extendedInfo the extendedInfo value to set.
     * @return the DpmContainer object itself.
     */
    public DpmContainer withExtendedInfo(DpmContainerExtendedInfo extendedInfo) {
        this.extendedInfo = extendedInfo;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmContainer withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmContainer withBackupManagementType(BackupManagementType backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmContainer withRegistrationStatus(String registrationStatus) {
        super.withRegistrationStatus(registrationStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmContainer withHealthStatus(String healthStatus) {
        super.withHealthStatus(healthStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmContainer withProtectableObjectType(String protectableObjectType) {
        super.withProtectableObjectType(protectableObjectType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (extendedInfo() != null) {
            extendedInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", friendlyName());
        jsonWriter.writeStringField("backupManagementType",
            backupManagementType() == null ? null : backupManagementType().toString());
        jsonWriter.writeStringField("registrationStatus", registrationStatus());
        jsonWriter.writeStringField("healthStatus", healthStatus());
        jsonWriter.writeStringField("protectableObjectType", protectableObjectType());
        jsonWriter.writeStringField("containerType", this.containerType == null ? null : this.containerType.toString());
        jsonWriter.writeBooleanField("canReRegister", this.canReRegister);
        jsonWriter.writeStringField("containerId", this.containerId);
        jsonWriter.writeNumberField("protectedItemCount", this.protectedItemCount);
        jsonWriter.writeStringField("dpmAgentVersion", this.dpmAgentVersion);
        jsonWriter.writeArrayField("dpmServers", this.dpmServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("upgradeAvailable", this.upgradeAvailable);
        jsonWriter.writeStringField("protectionStatus", this.protectionStatus);
        jsonWriter.writeJsonField("extendedInfo", this.extendedInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DpmContainer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DpmContainer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DpmContainer.
     */
    public static DpmContainer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("containerType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureBackupServerContainer".equals(discriminatorValue)) {
                    return AzureBackupServerContainer.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DpmContainer fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DpmContainer deserializedDpmContainer = new DpmContainer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedDpmContainer.withFriendlyName(reader.getString());
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedDpmContainer
                        .withBackupManagementType(BackupManagementType.fromString(reader.getString()));
                } else if ("registrationStatus".equals(fieldName)) {
                    deserializedDpmContainer.withRegistrationStatus(reader.getString());
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedDpmContainer.withHealthStatus(reader.getString());
                } else if ("protectableObjectType".equals(fieldName)) {
                    deserializedDpmContainer.withProtectableObjectType(reader.getString());
                } else if ("containerType".equals(fieldName)) {
                    deserializedDpmContainer.containerType = ProtectableContainerType.fromString(reader.getString());
                } else if ("canReRegister".equals(fieldName)) {
                    deserializedDpmContainer.canReRegister = reader.getNullable(JsonReader::getBoolean);
                } else if ("containerId".equals(fieldName)) {
                    deserializedDpmContainer.containerId = reader.getString();
                } else if ("protectedItemCount".equals(fieldName)) {
                    deserializedDpmContainer.protectedItemCount = reader.getNullable(JsonReader::getLong);
                } else if ("dpmAgentVersion".equals(fieldName)) {
                    deserializedDpmContainer.dpmAgentVersion = reader.getString();
                } else if ("dpmServers".equals(fieldName)) {
                    List<String> dpmServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedDpmContainer.dpmServers = dpmServers;
                } else if ("upgradeAvailable".equals(fieldName)) {
                    deserializedDpmContainer.upgradeAvailable = reader.getNullable(JsonReader::getBoolean);
                } else if ("protectionStatus".equals(fieldName)) {
                    deserializedDpmContainer.protectionStatus = reader.getString();
                } else if ("extendedInfo".equals(fieldName)) {
                    deserializedDpmContainer.extendedInfo = DpmContainerExtendedInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDpmContainer;
        });
    }
}
