// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base class for backup ProtectionIntent.
 */
@Fluent
public class ProtectionIntent implements JsonSerializable<ProtectionIntent> {
    /*
     * backup protectionIntent type.
     */
    private ProtectionIntentItemType protectionIntentItemType = ProtectionIntentItemType.fromString("ProtectionIntent");

    /*
     * Type of backup management for the backed up item.
     */
    private BackupManagementType backupManagementType;

    /*
     * ARM ID of the resource to be backed up.
     */
    private String sourceResourceId;

    /*
     * ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId
     */
    private String itemId;

    /*
     * ID of the backup policy with which this item is backed up.
     */
    private String policyId;

    /*
     * Backup state of this backup item.
     */
    private ProtectionStatus protectionState;

    /**
     * Creates an instance of ProtectionIntent class.
     */
    public ProtectionIntent() {
    }

    /**
     * Get the protectionIntentItemType property: backup protectionIntent type.
     * 
     * @return the protectionIntentItemType value.
     */
    public ProtectionIntentItemType protectionIntentItemType() {
        return this.protectionIntentItemType;
    }

    /**
     * Get the backupManagementType property: Type of backup management for the backed up item.
     * 
     * @return the backupManagementType value.
     */
    public BackupManagementType backupManagementType() {
        return this.backupManagementType;
    }

    /**
     * Set the backupManagementType property: Type of backup management for the backed up item.
     * 
     * @param backupManagementType the backupManagementType value to set.
     * @return the ProtectionIntent object itself.
     */
    public ProtectionIntent withBackupManagementType(BackupManagementType backupManagementType) {
        this.backupManagementType = backupManagementType;
        return this;
    }

    /**
     * Get the sourceResourceId property: ARM ID of the resource to be backed up.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: ARM ID of the resource to be backed up.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the ProtectionIntent object itself.
     */
    public ProtectionIntent withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the itemId property: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId.
     * 
     * @return the itemId value.
     */
    public String itemId() {
        return this.itemId;
    }

    /**
     * Set the itemId property: ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId.
     * 
     * @param itemId the itemId value to set.
     * @return the ProtectionIntent object itself.
     */
    public ProtectionIntent withItemId(String itemId) {
        this.itemId = itemId;
        return this;
    }

    /**
     * Get the policyId property: ID of the backup policy with which this item is backed up.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: ID of the backup policy with which this item is backed up.
     * 
     * @param policyId the policyId value to set.
     * @return the ProtectionIntent object itself.
     */
    public ProtectionIntent withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * Get the protectionState property: Backup state of this backup item.
     * 
     * @return the protectionState value.
     */
    public ProtectionStatus protectionState() {
        return this.protectionState;
    }

    /**
     * Set the protectionState property: Backup state of this backup item.
     * 
     * @param protectionState the protectionState value to set.
     * @return the ProtectionIntent object itself.
     */
    public ProtectionIntent withProtectionState(ProtectionStatus protectionState) {
        this.protectionState = protectionState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("protectionIntentItemType",
            this.protectionIntentItemType == null ? null : this.protectionIntentItemType.toString());
        jsonWriter.writeStringField("backupManagementType",
            this.backupManagementType == null ? null : this.backupManagementType.toString());
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeStringField("itemId", this.itemId);
        jsonWriter.writeStringField("policyId", this.policyId);
        jsonWriter.writeStringField("protectionState",
            this.protectionState == null ? null : this.protectionState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProtectionIntent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProtectionIntent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProtectionIntent.
     */
    public static ProtectionIntent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("protectionIntentItemType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("RecoveryServiceVaultItem".equals(discriminatorValue)) {
                    return AzureRecoveryServiceVaultProtectionIntent.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("AzureWorkloadAutoProtectionIntent".equals(discriminatorValue)) {
                    return AzureWorkloadAutoProtectionIntent.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("AzureWorkloadSQLAutoProtectionIntent".equals(discriminatorValue)) {
                    return AzureWorkloadSqlAutoProtectionIntent.fromJson(readerToUse.reset());
                } else if ("AzureResourceItem".equals(discriminatorValue)) {
                    return AzureResourceProtectionIntent.fromJson(readerToUse.reset());
                } else if ("AzureWorkloadContainerAutoProtectionIntent".equals(discriminatorValue)) {
                    return AzureWorkloadContainerAutoProtectionIntent.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ProtectionIntent fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProtectionIntent deserializedProtectionIntent = new ProtectionIntent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protectionIntentItemType".equals(fieldName)) {
                    deserializedProtectionIntent.protectionIntentItemType
                        = ProtectionIntentItemType.fromString(reader.getString());
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedProtectionIntent.backupManagementType
                        = BackupManagementType.fromString(reader.getString());
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedProtectionIntent.sourceResourceId = reader.getString();
                } else if ("itemId".equals(fieldName)) {
                    deserializedProtectionIntent.itemId = reader.getString();
                } else if ("policyId".equals(fieldName)) {
                    deserializedProtectionIntent.policyId = reader.getString();
                } else if ("protectionState".equals(fieldName)) {
                    deserializedProtectionIntent.protectionState = ProtectionStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProtectionIntent;
        });
    }
}
