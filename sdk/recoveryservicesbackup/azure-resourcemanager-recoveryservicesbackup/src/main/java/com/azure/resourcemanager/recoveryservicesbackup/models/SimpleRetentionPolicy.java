// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Simple policy retention.
 */
@Fluent
public final class SimpleRetentionPolicy extends RetentionPolicy {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String retentionPolicyType = "SimpleRetentionPolicy";

    /*
     * Retention duration of the protection policy.
     */
    private RetentionDuration retentionDuration;

    /**
     * Creates an instance of SimpleRetentionPolicy class.
     */
    public SimpleRetentionPolicy() {
    }

    /**
     * Get the retentionPolicyType property: This property will be used as the discriminator for deciding the specific
     * types in the polymorphic chain of types.
     * 
     * @return the retentionPolicyType value.
     */
    @Override
    public String retentionPolicyType() {
        return this.retentionPolicyType;
    }

    /**
     * Get the retentionDuration property: Retention duration of the protection policy.
     * 
     * @return the retentionDuration value.
     */
    public RetentionDuration retentionDuration() {
        return this.retentionDuration;
    }

    /**
     * Set the retentionDuration property: Retention duration of the protection policy.
     * 
     * @param retentionDuration the retentionDuration value to set.
     * @return the SimpleRetentionPolicy object itself.
     */
    public SimpleRetentionPolicy withRetentionDuration(RetentionDuration retentionDuration) {
        this.retentionDuration = retentionDuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (retentionDuration() != null) {
            retentionDuration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("retentionPolicyType", this.retentionPolicyType);
        jsonWriter.writeJsonField("retentionDuration", this.retentionDuration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SimpleRetentionPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SimpleRetentionPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SimpleRetentionPolicy.
     */
    public static SimpleRetentionPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SimpleRetentionPolicy deserializedSimpleRetentionPolicy = new SimpleRetentionPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionPolicyType".equals(fieldName)) {
                    deserializedSimpleRetentionPolicy.retentionPolicyType = reader.getString();
                } else if ("retentionDuration".equals(fieldName)) {
                    deserializedSimpleRetentionPolicy.retentionDuration = RetentionDuration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSimpleRetentionPolicy;
        });
    }
}
