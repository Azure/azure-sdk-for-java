// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Encapsulates information regarding data directory.
 */
@Fluent
public final class SqlDataDirectoryMapping implements JsonSerializable<SqlDataDirectoryMapping> {
    /*
     * Type of data directory mapping
     */
    private SqlDataDirectoryType mappingType;

    /*
     * Restore source logical name path
     */
    private String sourceLogicalName;

    /*
     * Restore source path
     */
    private String sourcePath;

    /*
     * Target path
     */
    private String targetPath;

    /**
     * Creates an instance of SqlDataDirectoryMapping class.
     */
    public SqlDataDirectoryMapping() {
    }

    /**
     * Get the mappingType property: Type of data directory mapping.
     * 
     * @return the mappingType value.
     */
    public SqlDataDirectoryType mappingType() {
        return this.mappingType;
    }

    /**
     * Set the mappingType property: Type of data directory mapping.
     * 
     * @param mappingType the mappingType value to set.
     * @return the SqlDataDirectoryMapping object itself.
     */
    public SqlDataDirectoryMapping withMappingType(SqlDataDirectoryType mappingType) {
        this.mappingType = mappingType;
        return this;
    }

    /**
     * Get the sourceLogicalName property: Restore source logical name path.
     * 
     * @return the sourceLogicalName value.
     */
    public String sourceLogicalName() {
        return this.sourceLogicalName;
    }

    /**
     * Set the sourceLogicalName property: Restore source logical name path.
     * 
     * @param sourceLogicalName the sourceLogicalName value to set.
     * @return the SqlDataDirectoryMapping object itself.
     */
    public SqlDataDirectoryMapping withSourceLogicalName(String sourceLogicalName) {
        this.sourceLogicalName = sourceLogicalName;
        return this;
    }

    /**
     * Get the sourcePath property: Restore source path.
     * 
     * @return the sourcePath value.
     */
    public String sourcePath() {
        return this.sourcePath;
    }

    /**
     * Set the sourcePath property: Restore source path.
     * 
     * @param sourcePath the sourcePath value to set.
     * @return the SqlDataDirectoryMapping object itself.
     */
    public SqlDataDirectoryMapping withSourcePath(String sourcePath) {
        this.sourcePath = sourcePath;
        return this;
    }

    /**
     * Get the targetPath property: Target path.
     * 
     * @return the targetPath value.
     */
    public String targetPath() {
        return this.targetPath;
    }

    /**
     * Set the targetPath property: Target path.
     * 
     * @param targetPath the targetPath value to set.
     * @return the SqlDataDirectoryMapping object itself.
     */
    public SqlDataDirectoryMapping withTargetPath(String targetPath) {
        this.targetPath = targetPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mappingType", this.mappingType == null ? null : this.mappingType.toString());
        jsonWriter.writeStringField("sourceLogicalName", this.sourceLogicalName);
        jsonWriter.writeStringField("sourcePath", this.sourcePath);
        jsonWriter.writeStringField("targetPath", this.targetPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDataDirectoryMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDataDirectoryMapping if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlDataDirectoryMapping.
     */
    public static SqlDataDirectoryMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDataDirectoryMapping deserializedSqlDataDirectoryMapping = new SqlDataDirectoryMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mappingType".equals(fieldName)) {
                    deserializedSqlDataDirectoryMapping.mappingType
                        = SqlDataDirectoryType.fromString(reader.getString());
                } else if ("sourceLogicalName".equals(fieldName)) {
                    deserializedSqlDataDirectoryMapping.sourceLogicalName = reader.getString();
                } else if ("sourcePath".equals(fieldName)) {
                    deserializedSqlDataDirectoryMapping.sourcePath = reader.getString();
                } else if ("targetPath".equals(fieldName)) {
                    deserializedSqlDataDirectoryMapping.targetPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlDataDirectoryMapping;
        });
    }
}
