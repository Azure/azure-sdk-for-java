// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Sub-protection policy which includes schedule and retention.
 */
@Fluent
public final class SubProtectionPolicy implements JsonSerializable<SubProtectionPolicy> {
    /*
     * Type of backup policy type
     */
    private PolicyType policyType;

    /*
     * Backup schedule specified as part of backup policy.
     */
    private SchedulePolicy schedulePolicy;

    /*
     * Retention policy with the details on backup copy retention ranges.
     */
    private RetentionPolicy retentionPolicy;

    /*
     * Tiering policy to automatically move RPs to another tier.
     * Key is Target Tier, defined in RecoveryPointTierType enum.
     * Tiering policy specifies the criteria to move RP to the target tier.
     */
    private Map<String, TieringPolicy> tieringPolicy;

    /*
     * Snapshot Backup related fields for WorkloadType SaPHanaSystem
     */
    private SnapshotBackupAdditionalDetails snapshotBackupAdditionalDetails;

    /**
     * Creates an instance of SubProtectionPolicy class.
     */
    public SubProtectionPolicy() {
    }

    /**
     * Get the policyType property: Type of backup policy type.
     * 
     * @return the policyType value.
     */
    public PolicyType policyType() {
        return this.policyType;
    }

    /**
     * Set the policyType property: Type of backup policy type.
     * 
     * @param policyType the policyType value to set.
     * @return the SubProtectionPolicy object itself.
     */
    public SubProtectionPolicy withPolicyType(PolicyType policyType) {
        this.policyType = policyType;
        return this;
    }

    /**
     * Get the schedulePolicy property: Backup schedule specified as part of backup policy.
     * 
     * @return the schedulePolicy value.
     */
    public SchedulePolicy schedulePolicy() {
        return this.schedulePolicy;
    }

    /**
     * Set the schedulePolicy property: Backup schedule specified as part of backup policy.
     * 
     * @param schedulePolicy the schedulePolicy value to set.
     * @return the SubProtectionPolicy object itself.
     */
    public SubProtectionPolicy withSchedulePolicy(SchedulePolicy schedulePolicy) {
        this.schedulePolicy = schedulePolicy;
        return this;
    }

    /**
     * Get the retentionPolicy property: Retention policy with the details on backup copy retention ranges.
     * 
     * @return the retentionPolicy value.
     */
    public RetentionPolicy retentionPolicy() {
        return this.retentionPolicy;
    }

    /**
     * Set the retentionPolicy property: Retention policy with the details on backup copy retention ranges.
     * 
     * @param retentionPolicy the retentionPolicy value to set.
     * @return the SubProtectionPolicy object itself.
     */
    public SubProtectionPolicy withRetentionPolicy(RetentionPolicy retentionPolicy) {
        this.retentionPolicy = retentionPolicy;
        return this;
    }

    /**
     * Get the tieringPolicy property: Tiering policy to automatically move RPs to another tier.
     * Key is Target Tier, defined in RecoveryPointTierType enum.
     * Tiering policy specifies the criteria to move RP to the target tier.
     * 
     * @return the tieringPolicy value.
     */
    public Map<String, TieringPolicy> tieringPolicy() {
        return this.tieringPolicy;
    }

    /**
     * Set the tieringPolicy property: Tiering policy to automatically move RPs to another tier.
     * Key is Target Tier, defined in RecoveryPointTierType enum.
     * Tiering policy specifies the criteria to move RP to the target tier.
     * 
     * @param tieringPolicy the tieringPolicy value to set.
     * @return the SubProtectionPolicy object itself.
     */
    public SubProtectionPolicy withTieringPolicy(Map<String, TieringPolicy> tieringPolicy) {
        this.tieringPolicy = tieringPolicy;
        return this;
    }

    /**
     * Get the snapshotBackupAdditionalDetails property: Snapshot Backup related fields for WorkloadType SaPHanaSystem.
     * 
     * @return the snapshotBackupAdditionalDetails value.
     */
    public SnapshotBackupAdditionalDetails snapshotBackupAdditionalDetails() {
        return this.snapshotBackupAdditionalDetails;
    }

    /**
     * Set the snapshotBackupAdditionalDetails property: Snapshot Backup related fields for WorkloadType SaPHanaSystem.
     * 
     * @param snapshotBackupAdditionalDetails the snapshotBackupAdditionalDetails value to set.
     * @return the SubProtectionPolicy object itself.
     */
    public SubProtectionPolicy
        withSnapshotBackupAdditionalDetails(SnapshotBackupAdditionalDetails snapshotBackupAdditionalDetails) {
        this.snapshotBackupAdditionalDetails = snapshotBackupAdditionalDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schedulePolicy() != null) {
            schedulePolicy().validate();
        }
        if (retentionPolicy() != null) {
            retentionPolicy().validate();
        }
        if (tieringPolicy() != null) {
            tieringPolicy().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (snapshotBackupAdditionalDetails() != null) {
            snapshotBackupAdditionalDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("policyType", this.policyType == null ? null : this.policyType.toString());
        jsonWriter.writeJsonField("schedulePolicy", this.schedulePolicy);
        jsonWriter.writeJsonField("retentionPolicy", this.retentionPolicy);
        jsonWriter.writeMapField("tieringPolicy", this.tieringPolicy, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("snapshotBackupAdditionalDetails", this.snapshotBackupAdditionalDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubProtectionPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubProtectionPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubProtectionPolicy.
     */
    public static SubProtectionPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubProtectionPolicy deserializedSubProtectionPolicy = new SubProtectionPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyType".equals(fieldName)) {
                    deserializedSubProtectionPolicy.policyType = PolicyType.fromString(reader.getString());
                } else if ("schedulePolicy".equals(fieldName)) {
                    deserializedSubProtectionPolicy.schedulePolicy = SchedulePolicy.fromJson(reader);
                } else if ("retentionPolicy".equals(fieldName)) {
                    deserializedSubProtectionPolicy.retentionPolicy = RetentionPolicy.fromJson(reader);
                } else if ("tieringPolicy".equals(fieldName)) {
                    Map<String, TieringPolicy> tieringPolicy
                        = reader.readMap(reader1 -> TieringPolicy.fromJson(reader1));
                    deserializedSubProtectionPolicy.tieringPolicy = tieringPolicy;
                } else if ("snapshotBackupAdditionalDetails".equals(fieldName)) {
                    deserializedSubProtectionPolicy.snapshotBackupAdditionalDetails
                        = SnapshotBackupAdditionalDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubProtectionPolicy;
        });
    }
}
