// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/** Generic backup copy. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "objectType")
@JsonTypeName("GenericRecoveryPoint")
@Fluent
public final class GenericRecoveryPoint extends RecoveryPoint {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GenericRecoveryPoint.class);

    /*
     * Friendly name of the backup copy.
     */
    @JsonProperty(value = "friendlyName")
    private String friendlyName;

    /*
     * Type of the backup copy.
     */
    @JsonProperty(value = "recoveryPointType")
    private String recoveryPointType;

    /*
     * Time at which this backup copy was created.
     */
    @JsonProperty(value = "recoveryPointTime")
    private OffsetDateTime recoveryPointTime;

    /*
     * Additional information associated with this backup copy.
     */
    @JsonProperty(value = "recoveryPointAdditionalInfo")
    private String recoveryPointAdditionalInfo;

    /**
     * Get the friendlyName property: Friendly name of the backup copy.
     *
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the backup copy.
     *
     * @param friendlyName the friendlyName value to set.
     * @return the GenericRecoveryPoint object itself.
     */
    public GenericRecoveryPoint withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the recoveryPointType property: Type of the backup copy.
     *
     * @return the recoveryPointType value.
     */
    public String recoveryPointType() {
        return this.recoveryPointType;
    }

    /**
     * Set the recoveryPointType property: Type of the backup copy.
     *
     * @param recoveryPointType the recoveryPointType value to set.
     * @return the GenericRecoveryPoint object itself.
     */
    public GenericRecoveryPoint withRecoveryPointType(String recoveryPointType) {
        this.recoveryPointType = recoveryPointType;
        return this;
    }

    /**
     * Get the recoveryPointTime property: Time at which this backup copy was created.
     *
     * @return the recoveryPointTime value.
     */
    public OffsetDateTime recoveryPointTime() {
        return this.recoveryPointTime;
    }

    /**
     * Set the recoveryPointTime property: Time at which this backup copy was created.
     *
     * @param recoveryPointTime the recoveryPointTime value to set.
     * @return the GenericRecoveryPoint object itself.
     */
    public GenericRecoveryPoint withRecoveryPointTime(OffsetDateTime recoveryPointTime) {
        this.recoveryPointTime = recoveryPointTime;
        return this;
    }

    /**
     * Get the recoveryPointAdditionalInfo property: Additional information associated with this backup copy.
     *
     * @return the recoveryPointAdditionalInfo value.
     */
    public String recoveryPointAdditionalInfo() {
        return this.recoveryPointAdditionalInfo;
    }

    /**
     * Set the recoveryPointAdditionalInfo property: Additional information associated with this backup copy.
     *
     * @param recoveryPointAdditionalInfo the recoveryPointAdditionalInfo value to set.
     * @return the GenericRecoveryPoint object itself.
     */
    public GenericRecoveryPoint withRecoveryPointAdditionalInfo(String recoveryPointAdditionalInfo) {
        this.recoveryPointAdditionalInfo = recoveryPointAdditionalInfo;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
