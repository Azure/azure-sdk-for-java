// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User assigned managed identity details.
 */
@Fluent
public final class UserAssignedManagedIdentityDetails implements JsonSerializable<UserAssignedManagedIdentityDetails> {
    /*
     * The ARM id of the assigned identity.
     */
    private String identityArmId;

    /*
     * The name of the assigned identity.
     */
    private String identityName;

    /*
     * User assigned managed identity properties
     */
    private UserAssignedIdentityProperties userAssignedIdentityProperties;

    /**
     * Creates an instance of UserAssignedManagedIdentityDetails class.
     */
    public UserAssignedManagedIdentityDetails() {
    }

    /**
     * Get the identityArmId property: The ARM id of the assigned identity.
     * 
     * @return the identityArmId value.
     */
    public String identityArmId() {
        return this.identityArmId;
    }

    /**
     * Set the identityArmId property: The ARM id of the assigned identity.
     * 
     * @param identityArmId the identityArmId value to set.
     * @return the UserAssignedManagedIdentityDetails object itself.
     */
    public UserAssignedManagedIdentityDetails withIdentityArmId(String identityArmId) {
        this.identityArmId = identityArmId;
        return this;
    }

    /**
     * Get the identityName property: The name of the assigned identity.
     * 
     * @return the identityName value.
     */
    public String identityName() {
        return this.identityName;
    }

    /**
     * Set the identityName property: The name of the assigned identity.
     * 
     * @param identityName the identityName value to set.
     * @return the UserAssignedManagedIdentityDetails object itself.
     */
    public UserAssignedManagedIdentityDetails withIdentityName(String identityName) {
        this.identityName = identityName;
        return this;
    }

    /**
     * Get the userAssignedIdentityProperties property: User assigned managed identity properties.
     * 
     * @return the userAssignedIdentityProperties value.
     */
    public UserAssignedIdentityProperties userAssignedIdentityProperties() {
        return this.userAssignedIdentityProperties;
    }

    /**
     * Set the userAssignedIdentityProperties property: User assigned managed identity properties.
     * 
     * @param userAssignedIdentityProperties the userAssignedIdentityProperties value to set.
     * @return the UserAssignedManagedIdentityDetails object itself.
     */
    public UserAssignedManagedIdentityDetails
        withUserAssignedIdentityProperties(UserAssignedIdentityProperties userAssignedIdentityProperties) {
        this.userAssignedIdentityProperties = userAssignedIdentityProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userAssignedIdentityProperties() != null) {
            userAssignedIdentityProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identityArmId", this.identityArmId);
        jsonWriter.writeStringField("identityName", this.identityName);
        jsonWriter.writeJsonField("userAssignedIdentityProperties", this.userAssignedIdentityProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserAssignedManagedIdentityDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserAssignedManagedIdentityDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserAssignedManagedIdentityDetails.
     */
    public static UserAssignedManagedIdentityDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserAssignedManagedIdentityDetails deserializedUserAssignedManagedIdentityDetails
                = new UserAssignedManagedIdentityDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identityArmId".equals(fieldName)) {
                    deserializedUserAssignedManagedIdentityDetails.identityArmId = reader.getString();
                } else if ("identityName".equals(fieldName)) {
                    deserializedUserAssignedManagedIdentityDetails.identityName = reader.getString();
                } else if ("userAssignedIdentityProperties".equals(fieldName)) {
                    deserializedUserAssignedManagedIdentityDetails.userAssignedIdentityProperties
                        = UserAssignedIdentityProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserAssignedManagedIdentityDetails;
        });
    }
}
