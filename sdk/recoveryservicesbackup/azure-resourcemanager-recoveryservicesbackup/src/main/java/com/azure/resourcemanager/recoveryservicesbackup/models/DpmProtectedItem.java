// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/** Additional information on Backup engine specific backup item. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "protectedItemType")
@JsonTypeName("DPMProtectedItem")
@Fluent
public final class DpmProtectedItem extends ProtectedItem {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DpmProtectedItem.class);

    /*
     * Friendly name of the managed item
     */
    @JsonProperty(value = "friendlyName")
    private String friendlyName;

    /*
     * Backup Management server protecting this backup item
     */
    @JsonProperty(value = "backupEngineName")
    private String backupEngineName;

    /*
     * Protection state of the backup engine
     */
    @JsonProperty(value = "protectionState")
    private ProtectedItemState protectionState;

    /*
     * Extended info of the backup item.
     */
    @JsonProperty(value = "extendedInfo")
    private DpmProtectedItemExtendedInfo extendedInfo;

    /**
     * Get the friendlyName property: Friendly name of the managed item.
     *
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the managed item.
     *
     * @param friendlyName the friendlyName value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the backupEngineName property: Backup Management server protecting this backup item.
     *
     * @return the backupEngineName value.
     */
    public String backupEngineName() {
        return this.backupEngineName;
    }

    /**
     * Set the backupEngineName property: Backup Management server protecting this backup item.
     *
     * @param backupEngineName the backupEngineName value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withBackupEngineName(String backupEngineName) {
        this.backupEngineName = backupEngineName;
        return this;
    }

    /**
     * Get the protectionState property: Protection state of the backup engine.
     *
     * @return the protectionState value.
     */
    public ProtectedItemState protectionState() {
        return this.protectionState;
    }

    /**
     * Set the protectionState property: Protection state of the backup engine.
     *
     * @param protectionState the protectionState value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withProtectionState(ProtectedItemState protectionState) {
        this.protectionState = protectionState;
        return this;
    }

    /**
     * Get the extendedInfo property: Extended info of the backup item.
     *
     * @return the extendedInfo value.
     */
    public DpmProtectedItemExtendedInfo extendedInfo() {
        return this.extendedInfo;
    }

    /**
     * Set the extendedInfo property: Extended info of the backup item.
     *
     * @param extendedInfo the extendedInfo value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withExtendedInfo(DpmProtectedItemExtendedInfo extendedInfo) {
        this.extendedInfo = extendedInfo;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withBackupManagementType(BackupManagementType backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withWorkloadType(DataSourceType workloadType) {
        super.withWorkloadType(workloadType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withContainerName(String containerName) {
        super.withContainerName(containerName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withSourceResourceId(String sourceResourceId) {
        super.withSourceResourceId(sourceResourceId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withPolicyId(String policyId) {
        super.withPolicyId(policyId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withLastRecoveryPoint(OffsetDateTime lastRecoveryPoint) {
        super.withLastRecoveryPoint(lastRecoveryPoint);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withBackupSetName(String backupSetName) {
        super.withBackupSetName(backupSetName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withCreateMode(CreateMode createMode) {
        super.withCreateMode(createMode);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withDeferredDeleteTimeInUtc(OffsetDateTime deferredDeleteTimeInUtc) {
        super.withDeferredDeleteTimeInUtc(deferredDeleteTimeInUtc);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withIsScheduledForDeferredDelete(Boolean isScheduledForDeferredDelete) {
        super.withIsScheduledForDeferredDelete(isScheduledForDeferredDelete);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withDeferredDeleteTimeRemaining(String deferredDeleteTimeRemaining) {
        super.withDeferredDeleteTimeRemaining(deferredDeleteTimeRemaining);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withIsDeferredDeleteScheduleUpcoming(Boolean isDeferredDeleteScheduleUpcoming) {
        super.withIsDeferredDeleteScheduleUpcoming(isDeferredDeleteScheduleUpcoming);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DpmProtectedItem withIsRehydrate(Boolean isRehydrate) {
        super.withIsRehydrate(isRehydrate);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (extendedInfo() != null) {
            extendedInfo().validate();
        }
    }
}
