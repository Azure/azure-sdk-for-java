// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Additional information on Backup engine specific backup item.
 */
@Fluent
public final class DpmProtectedItem extends ProtectedItem {
    /*
     * backup item type.
     */
    private String protectedItemType = "DPMProtectedItem";

    /*
     * Friendly name of the managed item
     */
    private String friendlyName;

    /*
     * Backup Management server protecting this backup item
     */
    private String backupEngineName;

    /*
     * Protection state of the backup engine
     */
    private ProtectedItemState protectionState;

    /*
     * Extended info of the backup item.
     */
    private DpmProtectedItemExtendedInfo extendedInfo;

    /**
     * Creates an instance of DpmProtectedItem class.
     */
    public DpmProtectedItem() {
    }

    /**
     * Get the protectedItemType property: backup item type.
     * 
     * @return the protectedItemType value.
     */
    @Override
    public String protectedItemType() {
        return this.protectedItemType;
    }

    /**
     * Get the friendlyName property: Friendly name of the managed item.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the managed item.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the backupEngineName property: Backup Management server protecting this backup item.
     * 
     * @return the backupEngineName value.
     */
    public String backupEngineName() {
        return this.backupEngineName;
    }

    /**
     * Set the backupEngineName property: Backup Management server protecting this backup item.
     * 
     * @param backupEngineName the backupEngineName value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withBackupEngineName(String backupEngineName) {
        this.backupEngineName = backupEngineName;
        return this;
    }

    /**
     * Get the protectionState property: Protection state of the backup engine.
     * 
     * @return the protectionState value.
     */
    public ProtectedItemState protectionState() {
        return this.protectionState;
    }

    /**
     * Set the protectionState property: Protection state of the backup engine.
     * 
     * @param protectionState the protectionState value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withProtectionState(ProtectedItemState protectionState) {
        this.protectionState = protectionState;
        return this;
    }

    /**
     * Get the extendedInfo property: Extended info of the backup item.
     * 
     * @return the extendedInfo value.
     */
    public DpmProtectedItemExtendedInfo extendedInfo() {
        return this.extendedInfo;
    }

    /**
     * Set the extendedInfo property: Extended info of the backup item.
     * 
     * @param extendedInfo the extendedInfo value to set.
     * @return the DpmProtectedItem object itself.
     */
    public DpmProtectedItem withExtendedInfo(DpmProtectedItemExtendedInfo extendedInfo) {
        this.extendedInfo = extendedInfo;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withContainerName(String containerName) {
        super.withContainerName(containerName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withSourceResourceId(String sourceResourceId) {
        super.withSourceResourceId(sourceResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withPolicyId(String policyId) {
        super.withPolicyId(policyId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withLastRecoveryPoint(OffsetDateTime lastRecoveryPoint) {
        super.withLastRecoveryPoint(lastRecoveryPoint);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withBackupSetName(String backupSetName) {
        super.withBackupSetName(backupSetName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withCreateMode(CreateMode createMode) {
        super.withCreateMode(createMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withDeferredDeleteTimeInUtc(OffsetDateTime deferredDeleteTimeInUtc) {
        super.withDeferredDeleteTimeInUtc(deferredDeleteTimeInUtc);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withIsScheduledForDeferredDelete(Boolean isScheduledForDeferredDelete) {
        super.withIsScheduledForDeferredDelete(isScheduledForDeferredDelete);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withDeferredDeleteTimeRemaining(String deferredDeleteTimeRemaining) {
        super.withDeferredDeleteTimeRemaining(deferredDeleteTimeRemaining);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withIsDeferredDeleteScheduleUpcoming(Boolean isDeferredDeleteScheduleUpcoming) {
        super.withIsDeferredDeleteScheduleUpcoming(isDeferredDeleteScheduleUpcoming);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withIsRehydrate(Boolean isRehydrate) {
        super.withIsRehydrate(isRehydrate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withResourceGuardOperationRequests(List<String> resourceGuardOperationRequests) {
        super.withResourceGuardOperationRequests(resourceGuardOperationRequests);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withIsArchiveEnabled(Boolean isArchiveEnabled) {
        super.withIsArchiveEnabled(isArchiveEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withPolicyName(String policyName) {
        super.withPolicyName(policyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmProtectedItem withSoftDeleteRetentionPeriod(Integer softDeleteRetentionPeriod) {
        super.withSoftDeleteRetentionPeriod(softDeleteRetentionPeriod);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (extendedInfo() != null) {
            extendedInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerName", containerName());
        jsonWriter.writeStringField("sourceResourceId", sourceResourceId());
        jsonWriter.writeStringField("policyId", policyId());
        jsonWriter.writeStringField("lastRecoveryPoint",
            lastRecoveryPoint() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(lastRecoveryPoint()));
        jsonWriter.writeStringField("backupSetName", backupSetName());
        jsonWriter.writeStringField("createMode", createMode() == null ? null : createMode().toString());
        jsonWriter.writeStringField("deferredDeleteTimeInUTC",
            deferredDeleteTimeInUtc() == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(deferredDeleteTimeInUtc()));
        jsonWriter.writeBooleanField("isScheduledForDeferredDelete", isScheduledForDeferredDelete());
        jsonWriter.writeStringField("deferredDeleteTimeRemaining", deferredDeleteTimeRemaining());
        jsonWriter.writeBooleanField("isDeferredDeleteScheduleUpcoming", isDeferredDeleteScheduleUpcoming());
        jsonWriter.writeBooleanField("isRehydrate", isRehydrate());
        jsonWriter.writeArrayField("resourceGuardOperationRequests", resourceGuardOperationRequests(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isArchiveEnabled", isArchiveEnabled());
        jsonWriter.writeStringField("policyName", policyName());
        jsonWriter.writeNumberField("softDeleteRetentionPeriodInDays", softDeleteRetentionPeriod());
        jsonWriter.writeStringField("protectedItemType", this.protectedItemType);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("backupEngineName", this.backupEngineName);
        jsonWriter.writeStringField("protectionState",
            this.protectionState == null ? null : this.protectionState.toString());
        jsonWriter.writeJsonField("extendedInfo", this.extendedInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DpmProtectedItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DpmProtectedItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DpmProtectedItem.
     */
    public static DpmProtectedItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DpmProtectedItem deserializedDpmProtectedItem = new DpmProtectedItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupManagementType".equals(fieldName)) {
                    deserializedDpmProtectedItem
                        .withBackupManagementType(BackupManagementType.fromString(reader.getString()));
                } else if ("workloadType".equals(fieldName)) {
                    deserializedDpmProtectedItem.withWorkloadType(DataSourceType.fromString(reader.getString()));
                } else if ("containerName".equals(fieldName)) {
                    deserializedDpmProtectedItem.withContainerName(reader.getString());
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedDpmProtectedItem.withSourceResourceId(reader.getString());
                } else if ("policyId".equals(fieldName)) {
                    deserializedDpmProtectedItem.withPolicyId(reader.getString());
                } else if ("lastRecoveryPoint".equals(fieldName)) {
                    deserializedDpmProtectedItem.withLastRecoveryPoint(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("backupSetName".equals(fieldName)) {
                    deserializedDpmProtectedItem.withBackupSetName(reader.getString());
                } else if ("createMode".equals(fieldName)) {
                    deserializedDpmProtectedItem.withCreateMode(CreateMode.fromString(reader.getString()));
                } else if ("deferredDeleteTimeInUTC".equals(fieldName)) {
                    deserializedDpmProtectedItem.withDeferredDeleteTimeInUtc(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("isScheduledForDeferredDelete".equals(fieldName)) {
                    deserializedDpmProtectedItem
                        .withIsScheduledForDeferredDelete(reader.getNullable(JsonReader::getBoolean));
                } else if ("deferredDeleteTimeRemaining".equals(fieldName)) {
                    deserializedDpmProtectedItem.withDeferredDeleteTimeRemaining(reader.getString());
                } else if ("isDeferredDeleteScheduleUpcoming".equals(fieldName)) {
                    deserializedDpmProtectedItem
                        .withIsDeferredDeleteScheduleUpcoming(reader.getNullable(JsonReader::getBoolean));
                } else if ("isRehydrate".equals(fieldName)) {
                    deserializedDpmProtectedItem.withIsRehydrate(reader.getNullable(JsonReader::getBoolean));
                } else if ("resourceGuardOperationRequests".equals(fieldName)) {
                    List<String> resourceGuardOperationRequests = reader.readArray(reader1 -> reader1.getString());
                    deserializedDpmProtectedItem.withResourceGuardOperationRequests(resourceGuardOperationRequests);
                } else if ("isArchiveEnabled".equals(fieldName)) {
                    deserializedDpmProtectedItem.withIsArchiveEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("policyName".equals(fieldName)) {
                    deserializedDpmProtectedItem.withPolicyName(reader.getString());
                } else if ("softDeleteRetentionPeriodInDays".equals(fieldName)) {
                    deserializedDpmProtectedItem.withSoftDeleteRetentionPeriod(reader.getNullable(JsonReader::getInt));
                } else if ("vaultId".equals(fieldName)) {
                    deserializedDpmProtectedItem.withVaultId(reader.getString());
                } else if ("protectedItemType".equals(fieldName)) {
                    deserializedDpmProtectedItem.protectedItemType = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedDpmProtectedItem.friendlyName = reader.getString();
                } else if ("backupEngineName".equals(fieldName)) {
                    deserializedDpmProtectedItem.backupEngineName = reader.getString();
                } else if ("protectionState".equals(fieldName)) {
                    deserializedDpmProtectedItem.protectionState = ProtectedItemState.fromString(reader.getString());
                } else if ("extendedInfo".equals(fieldName)) {
                    deserializedDpmProtectedItem.extendedInfo = DpmProtectedItemExtendedInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDpmProtectedItem;
        });
    }
}
