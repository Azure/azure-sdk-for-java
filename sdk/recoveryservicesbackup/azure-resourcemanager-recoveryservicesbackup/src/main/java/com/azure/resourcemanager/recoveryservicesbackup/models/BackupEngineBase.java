// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The base backup engine class. All workload specific backup engines derive from this class.
 */
@Fluent
public class BackupEngineBase implements JsonSerializable<BackupEngineBase> {
    /*
     * Type of the backup engine.
     */
    private BackupEngineType backupEngineType = BackupEngineType.fromString("BackupEngineBase");

    /*
     * Friendly name of the backup engine.
     */
    private String friendlyName;

    /*
     * Type of backup management for the backup engine.
     */
    private BackupManagementType backupManagementType;

    /*
     * Registration status of the backup engine with the Recovery Services Vault.
     */
    private String registrationStatus;

    /*
     * Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}
     */
    private String backupEngineState;

    /*
     * Backup status of the backup engine.
     */
    private String healthStatus;

    /*
     * Flag indicating if the backup engine be registered, once already registered.
     */
    private Boolean canReRegister;

    /*
     * ID of the backup engine.
     */
    private String backupEngineId;

    /*
     * Backup engine version
     */
    private String dpmVersion;

    /*
     * Backup agent version
     */
    private String azureBackupAgentVersion;

    /*
     * To check if backup agent upgrade available
     */
    private Boolean isAzureBackupAgentUpgradeAvailable;

    /*
     * To check if backup engine upgrade available
     */
    private Boolean isDpmUpgradeAvailable;

    /*
     * Extended info of the backupengine
     */
    private BackupEngineExtendedInfo extendedInfo;

    /**
     * Creates an instance of BackupEngineBase class.
     */
    public BackupEngineBase() {
    }

    /**
     * Get the backupEngineType property: Type of the backup engine.
     * 
     * @return the backupEngineType value.
     */
    public BackupEngineType backupEngineType() {
        return this.backupEngineType;
    }

    /**
     * Get the friendlyName property: Friendly name of the backup engine.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the backup engine.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the backupManagementType property: Type of backup management for the backup engine.
     * 
     * @return the backupManagementType value.
     */
    public BackupManagementType backupManagementType() {
        return this.backupManagementType;
    }

    /**
     * Set the backupManagementType property: Type of backup management for the backup engine.
     * 
     * @param backupManagementType the backupManagementType value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withBackupManagementType(BackupManagementType backupManagementType) {
        this.backupManagementType = backupManagementType;
        return this;
    }

    /**
     * Get the registrationStatus property: Registration status of the backup engine with the Recovery Services Vault.
     * 
     * @return the registrationStatus value.
     */
    public String registrationStatus() {
        return this.registrationStatus;
    }

    /**
     * Set the registrationStatus property: Registration status of the backup engine with the Recovery Services Vault.
     * 
     * @param registrationStatus the registrationStatus value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withRegistrationStatus(String registrationStatus) {
        this.registrationStatus = registrationStatus;
        return this;
    }

    /**
     * Get the backupEngineState property: Status of the backup engine with the Recovery Services Vault. =
     * {Active/Deleting/DeleteFailed}.
     * 
     * @return the backupEngineState value.
     */
    public String backupEngineState() {
        return this.backupEngineState;
    }

    /**
     * Set the backupEngineState property: Status of the backup engine with the Recovery Services Vault. =
     * {Active/Deleting/DeleteFailed}.
     * 
     * @param backupEngineState the backupEngineState value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withBackupEngineState(String backupEngineState) {
        this.backupEngineState = backupEngineState;
        return this;
    }

    /**
     * Get the healthStatus property: Backup status of the backup engine.
     * 
     * @return the healthStatus value.
     */
    public String healthStatus() {
        return this.healthStatus;
    }

    /**
     * Set the healthStatus property: Backup status of the backup engine.
     * 
     * @param healthStatus the healthStatus value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withHealthStatus(String healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }

    /**
     * Get the canReRegister property: Flag indicating if the backup engine be registered, once already registered.
     * 
     * @return the canReRegister value.
     */
    public Boolean canReRegister() {
        return this.canReRegister;
    }

    /**
     * Set the canReRegister property: Flag indicating if the backup engine be registered, once already registered.
     * 
     * @param canReRegister the canReRegister value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withCanReRegister(Boolean canReRegister) {
        this.canReRegister = canReRegister;
        return this;
    }

    /**
     * Get the backupEngineId property: ID of the backup engine.
     * 
     * @return the backupEngineId value.
     */
    public String backupEngineId() {
        return this.backupEngineId;
    }

    /**
     * Set the backupEngineId property: ID of the backup engine.
     * 
     * @param backupEngineId the backupEngineId value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withBackupEngineId(String backupEngineId) {
        this.backupEngineId = backupEngineId;
        return this;
    }

    /**
     * Get the dpmVersion property: Backup engine version.
     * 
     * @return the dpmVersion value.
     */
    public String dpmVersion() {
        return this.dpmVersion;
    }

    /**
     * Set the dpmVersion property: Backup engine version.
     * 
     * @param dpmVersion the dpmVersion value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withDpmVersion(String dpmVersion) {
        this.dpmVersion = dpmVersion;
        return this;
    }

    /**
     * Get the azureBackupAgentVersion property: Backup agent version.
     * 
     * @return the azureBackupAgentVersion value.
     */
    public String azureBackupAgentVersion() {
        return this.azureBackupAgentVersion;
    }

    /**
     * Set the azureBackupAgentVersion property: Backup agent version.
     * 
     * @param azureBackupAgentVersion the azureBackupAgentVersion value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withAzureBackupAgentVersion(String azureBackupAgentVersion) {
        this.azureBackupAgentVersion = azureBackupAgentVersion;
        return this;
    }

    /**
     * Get the isAzureBackupAgentUpgradeAvailable property: To check if backup agent upgrade available.
     * 
     * @return the isAzureBackupAgentUpgradeAvailable value.
     */
    public Boolean isAzureBackupAgentUpgradeAvailable() {
        return this.isAzureBackupAgentUpgradeAvailable;
    }

    /**
     * Set the isAzureBackupAgentUpgradeAvailable property: To check if backup agent upgrade available.
     * 
     * @param isAzureBackupAgentUpgradeAvailable the isAzureBackupAgentUpgradeAvailable value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withIsAzureBackupAgentUpgradeAvailable(Boolean isAzureBackupAgentUpgradeAvailable) {
        this.isAzureBackupAgentUpgradeAvailable = isAzureBackupAgentUpgradeAvailable;
        return this;
    }

    /**
     * Get the isDpmUpgradeAvailable property: To check if backup engine upgrade available.
     * 
     * @return the isDpmUpgradeAvailable value.
     */
    public Boolean isDpmUpgradeAvailable() {
        return this.isDpmUpgradeAvailable;
    }

    /**
     * Set the isDpmUpgradeAvailable property: To check if backup engine upgrade available.
     * 
     * @param isDpmUpgradeAvailable the isDpmUpgradeAvailable value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withIsDpmUpgradeAvailable(Boolean isDpmUpgradeAvailable) {
        this.isDpmUpgradeAvailable = isDpmUpgradeAvailable;
        return this;
    }

    /**
     * Get the extendedInfo property: Extended info of the backupengine.
     * 
     * @return the extendedInfo value.
     */
    public BackupEngineExtendedInfo extendedInfo() {
        return this.extendedInfo;
    }

    /**
     * Set the extendedInfo property: Extended info of the backupengine.
     * 
     * @param extendedInfo the extendedInfo value to set.
     * @return the BackupEngineBase object itself.
     */
    public BackupEngineBase withExtendedInfo(BackupEngineExtendedInfo extendedInfo) {
        this.extendedInfo = extendedInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extendedInfo() != null) {
            extendedInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupEngineType",
            this.backupEngineType == null ? null : this.backupEngineType.toString());
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("backupManagementType",
            this.backupManagementType == null ? null : this.backupManagementType.toString());
        jsonWriter.writeStringField("registrationStatus", this.registrationStatus);
        jsonWriter.writeStringField("backupEngineState", this.backupEngineState);
        jsonWriter.writeStringField("healthStatus", this.healthStatus);
        jsonWriter.writeBooleanField("canReRegister", this.canReRegister);
        jsonWriter.writeStringField("backupEngineId", this.backupEngineId);
        jsonWriter.writeStringField("dpmVersion", this.dpmVersion);
        jsonWriter.writeStringField("azureBackupAgentVersion", this.azureBackupAgentVersion);
        jsonWriter.writeBooleanField("isAzureBackupAgentUpgradeAvailable", this.isAzureBackupAgentUpgradeAvailable);
        jsonWriter.writeBooleanField("isDpmUpgradeAvailable", this.isDpmUpgradeAvailable);
        jsonWriter.writeJsonField("extendedInfo", this.extendedInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupEngineBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupEngineBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupEngineBase.
     */
    public static BackupEngineBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("backupEngineType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureBackupServerEngine".equals(discriminatorValue)) {
                    return AzureBackupServerEngine.fromJson(readerToUse.reset());
                } else if ("DpmBackupEngine".equals(discriminatorValue)) {
                    return DpmBackupEngine.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static BackupEngineBase fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupEngineBase deserializedBackupEngineBase = new BackupEngineBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupEngineType".equals(fieldName)) {
                    deserializedBackupEngineBase.backupEngineType = BackupEngineType.fromString(reader.getString());
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedBackupEngineBase.friendlyName = reader.getString();
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedBackupEngineBase.backupManagementType
                        = BackupManagementType.fromString(reader.getString());
                } else if ("registrationStatus".equals(fieldName)) {
                    deserializedBackupEngineBase.registrationStatus = reader.getString();
                } else if ("backupEngineState".equals(fieldName)) {
                    deserializedBackupEngineBase.backupEngineState = reader.getString();
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedBackupEngineBase.healthStatus = reader.getString();
                } else if ("canReRegister".equals(fieldName)) {
                    deserializedBackupEngineBase.canReRegister = reader.getNullable(JsonReader::getBoolean);
                } else if ("backupEngineId".equals(fieldName)) {
                    deserializedBackupEngineBase.backupEngineId = reader.getString();
                } else if ("dpmVersion".equals(fieldName)) {
                    deserializedBackupEngineBase.dpmVersion = reader.getString();
                } else if ("azureBackupAgentVersion".equals(fieldName)) {
                    deserializedBackupEngineBase.azureBackupAgentVersion = reader.getString();
                } else if ("isAzureBackupAgentUpgradeAvailable".equals(fieldName)) {
                    deserializedBackupEngineBase.isAzureBackupAgentUpgradeAvailable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isDpmUpgradeAvailable".equals(fieldName)) {
                    deserializedBackupEngineBase.isDpmUpgradeAvailable = reader.getNullable(JsonReader::getBoolean);
                } else if ("extendedInfo".equals(fieldName)) {
                    deserializedBackupEngineBase.extendedInfo = BackupEngineExtendedInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupEngineBase;
        });
    }
}
