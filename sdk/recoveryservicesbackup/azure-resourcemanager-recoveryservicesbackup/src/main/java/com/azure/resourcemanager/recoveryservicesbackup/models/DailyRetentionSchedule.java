// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Daily retention schedule.
 */
@Fluent
public final class DailyRetentionSchedule implements JsonSerializable<DailyRetentionSchedule> {
    /*
     * Retention times of retention policy.
     */
    private List<OffsetDateTime> retentionTimes;

    /*
     * Retention duration of retention Policy.
     */
    private RetentionDuration retentionDuration;

    /**
     * Creates an instance of DailyRetentionSchedule class.
     */
    public DailyRetentionSchedule() {
    }

    /**
     * Get the retentionTimes property: Retention times of retention policy.
     * 
     * @return the retentionTimes value.
     */
    public List<OffsetDateTime> retentionTimes() {
        return this.retentionTimes;
    }

    /**
     * Set the retentionTimes property: Retention times of retention policy.
     * 
     * @param retentionTimes the retentionTimes value to set.
     * @return the DailyRetentionSchedule object itself.
     */
    public DailyRetentionSchedule withRetentionTimes(List<OffsetDateTime> retentionTimes) {
        this.retentionTimes = retentionTimes;
        return this;
    }

    /**
     * Get the retentionDuration property: Retention duration of retention Policy.
     * 
     * @return the retentionDuration value.
     */
    public RetentionDuration retentionDuration() {
        return this.retentionDuration;
    }

    /**
     * Set the retentionDuration property: Retention duration of retention Policy.
     * 
     * @param retentionDuration the retentionDuration value to set.
     * @return the DailyRetentionSchedule object itself.
     */
    public DailyRetentionSchedule withRetentionDuration(RetentionDuration retentionDuration) {
        this.retentionDuration = retentionDuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (retentionDuration() != null) {
            retentionDuration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("retentionTimes", this.retentionTimes, (writer, element) -> writer
            .writeString(element == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(element)));
        jsonWriter.writeJsonField("retentionDuration", this.retentionDuration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyRetentionSchedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyRetentionSchedule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DailyRetentionSchedule.
     */
    public static DailyRetentionSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DailyRetentionSchedule deserializedDailyRetentionSchedule = new DailyRetentionSchedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionTimes".equals(fieldName)) {
                    List<OffsetDateTime> retentionTimes = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                    deserializedDailyRetentionSchedule.retentionTimes = retentionTimes;
                } else if ("retentionDuration".equals(fieldName)) {
                    deserializedDailyRetentionSchedule.retentionDuration = RetentionDuration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDailyRetentionSchedule;
        });
    }
}
