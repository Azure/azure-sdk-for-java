// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.TieringCostInfoInner;
import java.io.IOException;

/**
 * Response parameters for tiering cost info for rehydration.
 */
@Fluent
public final class TieringCostRehydrationInfo extends TieringCostInfoInner {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "TieringCostRehydrationInfo";

    /*
     * Rehydration size in bytes
     */
    private long rehydrationSizeInBytes;

    /*
     * Source tier to target tier rehydration cost per GB per month
     */
    private double retailRehydrationCostPerGBPerMonth;

    /**
     * Creates an instance of TieringCostRehydrationInfo class.
     */
    public TieringCostRehydrationInfo() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the rehydrationSizeInBytes property: Rehydration size in bytes.
     * 
     * @return the rehydrationSizeInBytes value.
     */
    public long rehydrationSizeInBytes() {
        return this.rehydrationSizeInBytes;
    }

    /**
     * Set the rehydrationSizeInBytes property: Rehydration size in bytes.
     * 
     * @param rehydrationSizeInBytes the rehydrationSizeInBytes value to set.
     * @return the TieringCostRehydrationInfo object itself.
     */
    public TieringCostRehydrationInfo withRehydrationSizeInBytes(long rehydrationSizeInBytes) {
        this.rehydrationSizeInBytes = rehydrationSizeInBytes;
        return this;
    }

    /**
     * Get the retailRehydrationCostPerGBPerMonth property: Source tier to target tier rehydration cost per GB per
     * month.
     * 
     * @return the retailRehydrationCostPerGBPerMonth value.
     */
    public double retailRehydrationCostPerGBPerMonth() {
        return this.retailRehydrationCostPerGBPerMonth;
    }

    /**
     * Set the retailRehydrationCostPerGBPerMonth property: Source tier to target tier rehydration cost per GB per
     * month.
     * 
     * @param retailRehydrationCostPerGBPerMonth the retailRehydrationCostPerGBPerMonth value to set.
     * @return the TieringCostRehydrationInfo object itself.
     */
    public TieringCostRehydrationInfo
        withRetailRehydrationCostPerGBPerMonth(double retailRehydrationCostPerGBPerMonth) {
        this.retailRehydrationCostPerGBPerMonth = retailRehydrationCostPerGBPerMonth;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("rehydrationSizeInBytes", this.rehydrationSizeInBytes);
        jsonWriter.writeDoubleField("retailRehydrationCostPerGBPerMonth", this.retailRehydrationCostPerGBPerMonth);
        jsonWriter.writeStringField("objectType", this.objectType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TieringCostRehydrationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TieringCostRehydrationInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TieringCostRehydrationInfo.
     */
    public static TieringCostRehydrationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TieringCostRehydrationInfo deserializedTieringCostRehydrationInfo = new TieringCostRehydrationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rehydrationSizeInBytes".equals(fieldName)) {
                    deserializedTieringCostRehydrationInfo.rehydrationSizeInBytes = reader.getLong();
                } else if ("retailRehydrationCostPerGBPerMonth".equals(fieldName)) {
                    deserializedTieringCostRehydrationInfo.retailRehydrationCostPerGBPerMonth = reader.getDouble();
                } else if ("objectType".equals(fieldName)) {
                    deserializedTieringCostRehydrationInfo.objectType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTieringCostRehydrationInfo;
        });
    }
}
