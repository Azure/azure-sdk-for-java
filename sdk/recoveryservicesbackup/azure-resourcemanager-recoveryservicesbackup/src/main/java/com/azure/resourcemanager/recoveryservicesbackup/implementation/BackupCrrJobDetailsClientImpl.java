// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.BackupCrrJobDetailsClient;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.JobResourceInner;
import com.azure.resourcemanager.recoveryservicesbackup.models.CrrJobRequest;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in BackupCrrJobDetailsClient. */
public final class BackupCrrJobDetailsClientImpl implements BackupCrrJobDetailsClient {
    private final ClientLogger logger = new ClientLogger(BackupCrrJobDetailsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final BackupCrrJobDetailsService service;

    /** The service client containing this operation class. */
    private final RecoveryServicesBackupClientImpl client;

    /**
     * Initializes an instance of BackupCrrJobDetailsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    BackupCrrJobDetailsClientImpl(RecoveryServicesBackupClientImpl client) {
        this.service =
            RestProxy.create(BackupCrrJobDetailsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for RecoveryServicesBackupClientBackupCrrJobDetails to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "RecoveryServicesBack")
    private interface BackupCrrJobDetailsService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{azureRegion}/backupCrrJob")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobResourceInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("azureRegion") String azureRegion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") CrrJobRequest parameters,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get CRR job details from target region.
     *
     * @param azureRegion Azure region to hit Api.
     * @param parameters CRR Job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cRR job details from target region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobResourceInner>> getWithResponseAsync(String azureRegion, CrrJobRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (azureRegion == null) {
            return Mono.error(new IllegalArgumentException("Parameter azureRegion is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2018-12-20";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            azureRegion,
                            this.client.getSubscriptionId(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get CRR job details from target region.
     *
     * @param azureRegion Azure region to hit Api.
     * @param parameters CRR Job request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cRR job details from target region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobResourceInner>> getWithResponseAsync(
        String azureRegion, CrrJobRequest parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (azureRegion == null) {
            return Mono.error(new IllegalArgumentException("Parameter azureRegion is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2018-12-20";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                apiVersion,
                azureRegion,
                this.client.getSubscriptionId(),
                parameters,
                accept,
                context);
    }

    /**
     * Get CRR job details from target region.
     *
     * @param azureRegion Azure region to hit Api.
     * @param parameters CRR Job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cRR job details from target region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobResourceInner> getAsync(String azureRegion, CrrJobRequest parameters) {
        return getWithResponseAsync(azureRegion, parameters)
            .flatMap(
                (Response<JobResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get CRR job details from target region.
     *
     * @param azureRegion Azure region to hit Api.
     * @param parameters CRR Job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cRR job details from target region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobResourceInner get(String azureRegion, CrrJobRequest parameters) {
        return getAsync(azureRegion, parameters).block();
    }

    /**
     * Get CRR job details from target region.
     *
     * @param azureRegion Azure region to hit Api.
     * @param parameters CRR Job request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cRR job details from target region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JobResourceInner> getWithResponse(String azureRegion, CrrJobRequest parameters, Context context) {
        return getWithResponseAsync(azureRegion, parameters, context).block();
    }
}
