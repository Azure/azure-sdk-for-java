// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base class for backup item. Workload-specific backup items are derived from this class.
 */
@Fluent
public class WorkloadItem implements JsonSerializable<WorkloadItem> {
    /*
     * Type of the backup item.
     */
    private String workloadItemType = "WorkloadItem";

    /*
     * Type of backup management to backup an item.
     */
    private String backupManagementType;

    /*
     * Type of workload for the backup management
     */
    private String workloadType;

    /*
     * Friendly name of the backup item.
     */
    private String friendlyName;

    /*
     * State of the back up item.
     */
    private ProtectionStatus protectionState;

    /**
     * Creates an instance of WorkloadItem class.
     */
    public WorkloadItem() {
    }

    /**
     * Get the workloadItemType property: Type of the backup item.
     * 
     * @return the workloadItemType value.
     */
    public String workloadItemType() {
        return this.workloadItemType;
    }

    /**
     * Get the backupManagementType property: Type of backup management to backup an item.
     * 
     * @return the backupManagementType value.
     */
    public String backupManagementType() {
        return this.backupManagementType;
    }

    /**
     * Set the backupManagementType property: Type of backup management to backup an item.
     * 
     * @param backupManagementType the backupManagementType value to set.
     * @return the WorkloadItem object itself.
     */
    public WorkloadItem withBackupManagementType(String backupManagementType) {
        this.backupManagementType = backupManagementType;
        return this;
    }

    /**
     * Get the workloadType property: Type of workload for the backup management.
     * 
     * @return the workloadType value.
     */
    public String workloadType() {
        return this.workloadType;
    }

    /**
     * Set the workloadType property: Type of workload for the backup management.
     * 
     * @param workloadType the workloadType value to set.
     * @return the WorkloadItem object itself.
     */
    public WorkloadItem withWorkloadType(String workloadType) {
        this.workloadType = workloadType;
        return this;
    }

    /**
     * Get the friendlyName property: Friendly name of the backup item.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the backup item.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the WorkloadItem object itself.
     */
    public WorkloadItem withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the protectionState property: State of the back up item.
     * 
     * @return the protectionState value.
     */
    public ProtectionStatus protectionState() {
        return this.protectionState;
    }

    /**
     * Set the protectionState property: State of the back up item.
     * 
     * @param protectionState the protectionState value to set.
     * @return the WorkloadItem object itself.
     */
    public WorkloadItem withProtectionState(ProtectionStatus protectionState) {
        this.protectionState = protectionState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("workloadItemType", this.workloadItemType);
        jsonWriter.writeStringField("backupManagementType", this.backupManagementType);
        jsonWriter.writeStringField("workloadType", this.workloadType);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("protectionState",
            this.protectionState == null ? null : this.protectionState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkloadItem.
     */
    public static WorkloadItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("workloadItemType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureVmWorkloadItem".equals(discriminatorValue)) {
                    return AzureVmWorkloadItem.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("SAPAseDatabase".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapAseDatabaseWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SAPAseSystem".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapAseSystemWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SAPHanaDatabase".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapHanaDatabaseWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SAPHanaSystem".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapHanaSystemWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SQLDataBase".equals(discriminatorValue)) {
                    return AzureVmWorkloadSqlDatabaseWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SQLInstance".equals(discriminatorValue)) {
                    return AzureVmWorkloadSqlInstanceWorkloadItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static WorkloadItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadItem deserializedWorkloadItem = new WorkloadItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workloadItemType".equals(fieldName)) {
                    deserializedWorkloadItem.workloadItemType = reader.getString();
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedWorkloadItem.backupManagementType = reader.getString();
                } else if ("workloadType".equals(fieldName)) {
                    deserializedWorkloadItem.workloadType = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedWorkloadItem.friendlyName = reader.getString();
                } else if ("protectionState".equals(fieldName)) {
                    deserializedWorkloadItem.protectionState = ProtectionStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadItem;
        });
    }
}
