// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base class for tiering cost request.
 * Specific cost request types are derived from this class.
 */
@Fluent
public class FetchTieringCostInfoRequest implements JsonSerializable<FetchTieringCostInfoRequest> {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "FetchTieringCostInfoRequest";

    /*
     * Source tier for the request
     */
    private RecoveryPointTierType sourceTierType;

    /*
     * target tier for the request
     */
    private RecoveryPointTierType targetTierType;

    /**
     * Creates an instance of FetchTieringCostInfoRequest class.
     */
    public FetchTieringCostInfoRequest() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the sourceTierType property: Source tier for the request.
     * 
     * @return the sourceTierType value.
     */
    public RecoveryPointTierType sourceTierType() {
        return this.sourceTierType;
    }

    /**
     * Set the sourceTierType property: Source tier for the request.
     * 
     * @param sourceTierType the sourceTierType value to set.
     * @return the FetchTieringCostInfoRequest object itself.
     */
    public FetchTieringCostInfoRequest withSourceTierType(RecoveryPointTierType sourceTierType) {
        this.sourceTierType = sourceTierType;
        return this;
    }

    /**
     * Get the targetTierType property: target tier for the request.
     * 
     * @return the targetTierType value.
     */
    public RecoveryPointTierType targetTierType() {
        return this.targetTierType;
    }

    /**
     * Set the targetTierType property: target tier for the request.
     * 
     * @param targetTierType the targetTierType value to set.
     * @return the FetchTieringCostInfoRequest object itself.
     */
    public FetchTieringCostInfoRequest withTargetTierType(RecoveryPointTierType targetTierType) {
        this.targetTierType = targetTierType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceTierType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceTierType in model FetchTieringCostInfoRequest"));
        }
        if (targetTierType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetTierType in model FetchTieringCostInfoRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FetchTieringCostInfoRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceTierType",
            this.sourceTierType == null ? null : this.sourceTierType.toString());
        jsonWriter.writeStringField("targetTierType",
            this.targetTierType == null ? null : this.targetTierType.toString());
        jsonWriter.writeStringField("objectType", this.objectType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FetchTieringCostInfoRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FetchTieringCostInfoRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FetchTieringCostInfoRequest.
     */
    public static FetchTieringCostInfoRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("objectType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("FetchTieringCostInfoForRehydrationRequest".equals(discriminatorValue)) {
                    return FetchTieringCostInfoForRehydrationRequest.fromJson(readerToUse.reset());
                } else if ("FetchTieringCostSavingsInfoForPolicyRequest".equals(discriminatorValue)) {
                    return FetchTieringCostSavingsInfoForPolicyRequest.fromJson(readerToUse.reset());
                } else if ("FetchTieringCostSavingsInfoForProtectedItemRequest".equals(discriminatorValue)) {
                    return FetchTieringCostSavingsInfoForProtectedItemRequest.fromJson(readerToUse.reset());
                } else if ("FetchTieringCostSavingsInfoForVaultRequest".equals(discriminatorValue)) {
                    return FetchTieringCostSavingsInfoForVaultRequest.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static FetchTieringCostInfoRequest fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FetchTieringCostInfoRequest deserializedFetchTieringCostInfoRequest = new FetchTieringCostInfoRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceTierType".equals(fieldName)) {
                    deserializedFetchTieringCostInfoRequest.sourceTierType
                        = RecoveryPointTierType.fromString(reader.getString());
                } else if ("targetTierType".equals(fieldName)) {
                    deserializedFetchTieringCostInfoRequest.targetTierType
                        = RecoveryPointTierType.fromString(reader.getString());
                } else if ("objectType".equals(fieldName)) {
                    deserializedFetchTieringCostInfoRequest.objectType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFetchTieringCostInfoRequest;
        });
    }
}
