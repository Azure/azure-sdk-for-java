// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Azure VM (Mercury) workload-specific backup policy.
 */
@Fluent
public final class AzureVmWorkloadProtectionPolicy extends ProtectionPolicy {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String backupManagementType = "AzureWorkload";

    /*
     * Type of workload for the backup management
     */
    private WorkloadType workLoadType;

    /*
     * Common settings for the backup management
     */
    private Settings settings;

    /*
     * List of sub-protection policies which includes schedule and retention
     */
    private List<SubProtectionPolicy> subProtectionPolicy;

    /*
     * Fix the policy inconsistency
     */
    private Boolean makePolicyConsistent;

    /**
     * Creates an instance of AzureVmWorkloadProtectionPolicy class.
     */
    public AzureVmWorkloadProtectionPolicy() {
    }

    /**
     * Get the backupManagementType property: This property will be used as the discriminator for deciding the specific
     * types in the polymorphic chain of types.
     * 
     * @return the backupManagementType value.
     */
    @Override
    public String backupManagementType() {
        return this.backupManagementType;
    }

    /**
     * Get the workLoadType property: Type of workload for the backup management.
     * 
     * @return the workLoadType value.
     */
    public WorkloadType workLoadType() {
        return this.workLoadType;
    }

    /**
     * Set the workLoadType property: Type of workload for the backup management.
     * 
     * @param workLoadType the workLoadType value to set.
     * @return the AzureVmWorkloadProtectionPolicy object itself.
     */
    public AzureVmWorkloadProtectionPolicy withWorkLoadType(WorkloadType workLoadType) {
        this.workLoadType = workLoadType;
        return this;
    }

    /**
     * Get the settings property: Common settings for the backup management.
     * 
     * @return the settings value.
     */
    public Settings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Common settings for the backup management.
     * 
     * @param settings the settings value to set.
     * @return the AzureVmWorkloadProtectionPolicy object itself.
     */
    public AzureVmWorkloadProtectionPolicy withSettings(Settings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the subProtectionPolicy property: List of sub-protection policies which includes schedule and retention.
     * 
     * @return the subProtectionPolicy value.
     */
    public List<SubProtectionPolicy> subProtectionPolicy() {
        return this.subProtectionPolicy;
    }

    /**
     * Set the subProtectionPolicy property: List of sub-protection policies which includes schedule and retention.
     * 
     * @param subProtectionPolicy the subProtectionPolicy value to set.
     * @return the AzureVmWorkloadProtectionPolicy object itself.
     */
    public AzureVmWorkloadProtectionPolicy withSubProtectionPolicy(List<SubProtectionPolicy> subProtectionPolicy) {
        this.subProtectionPolicy = subProtectionPolicy;
        return this;
    }

    /**
     * Get the makePolicyConsistent property: Fix the policy inconsistency.
     * 
     * @return the makePolicyConsistent value.
     */
    public Boolean makePolicyConsistent() {
        return this.makePolicyConsistent;
    }

    /**
     * Set the makePolicyConsistent property: Fix the policy inconsistency.
     * 
     * @param makePolicyConsistent the makePolicyConsistent value to set.
     * @return the AzureVmWorkloadProtectionPolicy object itself.
     */
    public AzureVmWorkloadProtectionPolicy withMakePolicyConsistent(Boolean makePolicyConsistent) {
        this.makePolicyConsistent = makePolicyConsistent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadProtectionPolicy withProtectedItemsCount(Integer protectedItemsCount) {
        super.withProtectedItemsCount(protectedItemsCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadProtectionPolicy
        withResourceGuardOperationRequests(List<String> resourceGuardOperationRequests) {
        super.withResourceGuardOperationRequests(resourceGuardOperationRequests);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (settings() != null) {
            settings().validate();
        }
        if (subProtectionPolicy() != null) {
            subProtectionPolicy().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("protectedItemsCount", protectedItemsCount());
        jsonWriter.writeArrayField("resourceGuardOperationRequests", resourceGuardOperationRequests(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("backupManagementType", this.backupManagementType);
        jsonWriter.writeStringField("workLoadType", this.workLoadType == null ? null : this.workLoadType.toString());
        jsonWriter.writeJsonField("settings", this.settings);
        jsonWriter.writeArrayField("subProtectionPolicy", this.subProtectionPolicy,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("makePolicyConsistent", this.makePolicyConsistent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureVmWorkloadProtectionPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureVmWorkloadProtectionPolicy if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureVmWorkloadProtectionPolicy.
     */
    public static AzureVmWorkloadProtectionPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureVmWorkloadProtectionPolicy deserializedAzureVmWorkloadProtectionPolicy
                = new AzureVmWorkloadProtectionPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protectedItemsCount".equals(fieldName)) {
                    deserializedAzureVmWorkloadProtectionPolicy
                        .withProtectedItemsCount(reader.getNullable(JsonReader::getInt));
                } else if ("resourceGuardOperationRequests".equals(fieldName)) {
                    List<String> resourceGuardOperationRequests = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureVmWorkloadProtectionPolicy
                        .withResourceGuardOperationRequests(resourceGuardOperationRequests);
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedAzureVmWorkloadProtectionPolicy.backupManagementType = reader.getString();
                } else if ("workLoadType".equals(fieldName)) {
                    deserializedAzureVmWorkloadProtectionPolicy.workLoadType
                        = WorkloadType.fromString(reader.getString());
                } else if ("settings".equals(fieldName)) {
                    deserializedAzureVmWorkloadProtectionPolicy.settings = Settings.fromJson(reader);
                } else if ("subProtectionPolicy".equals(fieldName)) {
                    List<SubProtectionPolicy> subProtectionPolicy
                        = reader.readArray(reader1 -> SubProtectionPolicy.fromJson(reader1));
                    deserializedAzureVmWorkloadProtectionPolicy.subProtectionPolicy = subProtectionPolicy;
                } else if ("makePolicyConsistent".equals(fieldName)) {
                    deserializedAzureVmWorkloadProtectionPolicy.makePolicyConsistent
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureVmWorkloadProtectionPolicy;
        });
    }
}
