// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Disk configuration.
 */
@Fluent
public final class RecoveryPointDiskConfiguration implements JsonSerializable<RecoveryPointDiskConfiguration> {
    /*
     * Number of disks included in backup
     */
    private Integer numberOfDisksIncludedInBackup;

    /*
     * Number of disks attached to the VM
     */
    private Integer numberOfDisksAttachedToVm;

    /*
     * Information of disks included in backup
     */
    private List<DiskInformation> includedDiskList;

    /*
     * Information of disks excluded from backup
     */
    private List<DiskInformation> excludedDiskList;

    /**
     * Creates an instance of RecoveryPointDiskConfiguration class.
     */
    public RecoveryPointDiskConfiguration() {
    }

    /**
     * Get the numberOfDisksIncludedInBackup property: Number of disks included in backup.
     * 
     * @return the numberOfDisksIncludedInBackup value.
     */
    public Integer numberOfDisksIncludedInBackup() {
        return this.numberOfDisksIncludedInBackup;
    }

    /**
     * Set the numberOfDisksIncludedInBackup property: Number of disks included in backup.
     * 
     * @param numberOfDisksIncludedInBackup the numberOfDisksIncludedInBackup value to set.
     * @return the RecoveryPointDiskConfiguration object itself.
     */
    public RecoveryPointDiskConfiguration withNumberOfDisksIncludedInBackup(Integer numberOfDisksIncludedInBackup) {
        this.numberOfDisksIncludedInBackup = numberOfDisksIncludedInBackup;
        return this;
    }

    /**
     * Get the numberOfDisksAttachedToVm property: Number of disks attached to the VM.
     * 
     * @return the numberOfDisksAttachedToVm value.
     */
    public Integer numberOfDisksAttachedToVm() {
        return this.numberOfDisksAttachedToVm;
    }

    /**
     * Set the numberOfDisksAttachedToVm property: Number of disks attached to the VM.
     * 
     * @param numberOfDisksAttachedToVm the numberOfDisksAttachedToVm value to set.
     * @return the RecoveryPointDiskConfiguration object itself.
     */
    public RecoveryPointDiskConfiguration withNumberOfDisksAttachedToVm(Integer numberOfDisksAttachedToVm) {
        this.numberOfDisksAttachedToVm = numberOfDisksAttachedToVm;
        return this;
    }

    /**
     * Get the includedDiskList property: Information of disks included in backup.
     * 
     * @return the includedDiskList value.
     */
    public List<DiskInformation> includedDiskList() {
        return this.includedDiskList;
    }

    /**
     * Set the includedDiskList property: Information of disks included in backup.
     * 
     * @param includedDiskList the includedDiskList value to set.
     * @return the RecoveryPointDiskConfiguration object itself.
     */
    public RecoveryPointDiskConfiguration withIncludedDiskList(List<DiskInformation> includedDiskList) {
        this.includedDiskList = includedDiskList;
        return this;
    }

    /**
     * Get the excludedDiskList property: Information of disks excluded from backup.
     * 
     * @return the excludedDiskList value.
     */
    public List<DiskInformation> excludedDiskList() {
        return this.excludedDiskList;
    }

    /**
     * Set the excludedDiskList property: Information of disks excluded from backup.
     * 
     * @param excludedDiskList the excludedDiskList value to set.
     * @return the RecoveryPointDiskConfiguration object itself.
     */
    public RecoveryPointDiskConfiguration withExcludedDiskList(List<DiskInformation> excludedDiskList) {
        this.excludedDiskList = excludedDiskList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (includedDiskList() != null) {
            includedDiskList().forEach(e -> e.validate());
        }
        if (excludedDiskList() != null) {
            excludedDiskList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("numberOfDisksIncludedInBackup", this.numberOfDisksIncludedInBackup);
        jsonWriter.writeNumberField("numberOfDisksAttachedToVm", this.numberOfDisksAttachedToVm);
        jsonWriter.writeArrayField("includedDiskList", this.includedDiskList,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("excludedDiskList", this.excludedDiskList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecoveryPointDiskConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecoveryPointDiskConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecoveryPointDiskConfiguration.
     */
    public static RecoveryPointDiskConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecoveryPointDiskConfiguration deserializedRecoveryPointDiskConfiguration
                = new RecoveryPointDiskConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("numberOfDisksIncludedInBackup".equals(fieldName)) {
                    deserializedRecoveryPointDiskConfiguration.numberOfDisksIncludedInBackup
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfDisksAttachedToVm".equals(fieldName)) {
                    deserializedRecoveryPointDiskConfiguration.numberOfDisksAttachedToVm
                        = reader.getNullable(JsonReader::getInt);
                } else if ("includedDiskList".equals(fieldName)) {
                    List<DiskInformation> includedDiskList
                        = reader.readArray(reader1 -> DiskInformation.fromJson(reader1));
                    deserializedRecoveryPointDiskConfiguration.includedDiskList = includedDiskList;
                } else if ("excludedDiskList".equals(fieldName)) {
                    List<DiskInformation> excludedDiskList
                        = reader.readArray(reader1 -> DiskInformation.fromJson(reader1));
                    deserializedRecoveryPointDiskConfiguration.excludedDiskList = excludedDiskList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecoveryPointDiskConfiguration;
        });
    }
}
