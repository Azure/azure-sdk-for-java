// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The token information details.
 */
@Fluent
public final class TokenInformationInner implements JsonSerializable<TokenInformationInner> {
    /*
     * Token value.
     */
    private String token;

    /*
     * Expiry time of token.
     */
    private Long expiryTimeInUtcTicks;

    /*
     * Security PIN
     */
    private String securityPin;

    /**
     * Creates an instance of TokenInformationInner class.
     */
    public TokenInformationInner() {
    }

    /**
     * Get the token property: Token value.
     * 
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: Token value.
     * 
     * @param token the token value to set.
     * @return the TokenInformationInner object itself.
     */
    public TokenInformationInner withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get the expiryTimeInUtcTicks property: Expiry time of token.
     * 
     * @return the expiryTimeInUtcTicks value.
     */
    public Long expiryTimeInUtcTicks() {
        return this.expiryTimeInUtcTicks;
    }

    /**
     * Set the expiryTimeInUtcTicks property: Expiry time of token.
     * 
     * @param expiryTimeInUtcTicks the expiryTimeInUtcTicks value to set.
     * @return the TokenInformationInner object itself.
     */
    public TokenInformationInner withExpiryTimeInUtcTicks(Long expiryTimeInUtcTicks) {
        this.expiryTimeInUtcTicks = expiryTimeInUtcTicks;
        return this;
    }

    /**
     * Get the securityPin property: Security PIN.
     * 
     * @return the securityPin value.
     */
    public String securityPin() {
        return this.securityPin;
    }

    /**
     * Set the securityPin property: Security PIN.
     * 
     * @param securityPin the securityPin value to set.
     * @return the TokenInformationInner object itself.
     */
    public TokenInformationInner withSecurityPin(String securityPin) {
        this.securityPin = securityPin;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("token", this.token);
        jsonWriter.writeNumberField("expiryTimeInUtcTicks", this.expiryTimeInUtcTicks);
        jsonWriter.writeStringField("securityPIN", this.securityPin);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TokenInformationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TokenInformationInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TokenInformationInner.
     */
    public static TokenInformationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TokenInformationInner deserializedTokenInformationInner = new TokenInformationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("token".equals(fieldName)) {
                    deserializedTokenInformationInner.token = reader.getString();
                } else if ("expiryTimeInUtcTicks".equals(fieldName)) {
                    deserializedTokenInformationInner.expiryTimeInUtcTicks = reader.getNullable(JsonReader::getLong);
                } else if ("securityPIN".equals(fieldName)) {
                    deserializedTokenInformationInner.securityPin = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTokenInformationInner;
        });
    }
}
