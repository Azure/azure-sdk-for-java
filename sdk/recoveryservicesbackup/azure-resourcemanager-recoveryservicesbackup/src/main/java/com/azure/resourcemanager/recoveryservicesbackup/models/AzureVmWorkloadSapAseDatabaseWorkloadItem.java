// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure VM workload-specific workload item representing SAP ASE Database.
 */
@Fluent
public final class AzureVmWorkloadSapAseDatabaseWorkloadItem extends AzureVmWorkloadItem {
    /*
     * Type of the backup item.
     */
    private String workloadItemType = "SAPAseDatabase";

    /**
     * Creates an instance of AzureVmWorkloadSapAseDatabaseWorkloadItem class.
     */
    public AzureVmWorkloadSapAseDatabaseWorkloadItem() {
    }

    /**
     * Get the workloadItemType property: Type of the backup item.
     * 
     * @return the workloadItemType value.
     */
    @Override
    public String workloadItemType() {
        return this.workloadItemType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withParentName(String parentName) {
        super.withParentName(parentName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withServerName(String serverName) {
        super.withServerName(serverName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withIsAutoProtectable(Boolean isAutoProtectable) {
        super.withIsAutoProtectable(isAutoProtectable);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withSubinquireditemcount(Integer subinquireditemcount) {
        super.withSubinquireditemcount(subinquireditemcount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withSubWorkloadItemCount(Integer subWorkloadItemCount) {
        super.withSubWorkloadItemCount(subWorkloadItemCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withBackupManagementType(String backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withWorkloadType(String workloadType) {
        super.withWorkloadType(workloadType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadSapAseDatabaseWorkloadItem withProtectionState(ProtectionStatus protectionState) {
        super.withProtectionState(protectionState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupManagementType", backupManagementType());
        jsonWriter.writeStringField("workloadType", workloadType());
        jsonWriter.writeStringField("friendlyName", friendlyName());
        jsonWriter.writeStringField("protectionState", protectionState() == null ? null : protectionState().toString());
        jsonWriter.writeStringField("parentName", parentName());
        jsonWriter.writeStringField("serverName", serverName());
        jsonWriter.writeBooleanField("isAutoProtectable", isAutoProtectable());
        jsonWriter.writeNumberField("subinquireditemcount", subinquireditemcount());
        jsonWriter.writeNumberField("subWorkloadItemCount", subWorkloadItemCount());
        jsonWriter.writeStringField("workloadItemType", this.workloadItemType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureVmWorkloadSapAseDatabaseWorkloadItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureVmWorkloadSapAseDatabaseWorkloadItem if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureVmWorkloadSapAseDatabaseWorkloadItem.
     */
    public static AzureVmWorkloadSapAseDatabaseWorkloadItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureVmWorkloadSapAseDatabaseWorkloadItem deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem
                = new AzureVmWorkloadSapAseDatabaseWorkloadItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupManagementType".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem.withBackupManagementType(reader.getString());
                } else if ("workloadType".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem.withWorkloadType(reader.getString());
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem.withFriendlyName(reader.getString());
                } else if ("protectionState".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem
                        .withProtectionState(ProtectionStatus.fromString(reader.getString()));
                } else if ("parentName".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem.withParentName(reader.getString());
                } else if ("serverName".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem.withServerName(reader.getString());
                } else if ("isAutoProtectable".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem
                        .withIsAutoProtectable(reader.getNullable(JsonReader::getBoolean));
                } else if ("subinquireditemcount".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem
                        .withSubinquireditemcount(reader.getNullable(JsonReader::getInt));
                } else if ("subWorkloadItemCount".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem
                        .withSubWorkloadItemCount(reader.getNullable(JsonReader::getInt));
                } else if ("workloadItemType".equals(fieldName)) {
                    deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem.workloadItemType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureVmWorkloadSapAseDatabaseWorkloadItem;
        });
    }
}
