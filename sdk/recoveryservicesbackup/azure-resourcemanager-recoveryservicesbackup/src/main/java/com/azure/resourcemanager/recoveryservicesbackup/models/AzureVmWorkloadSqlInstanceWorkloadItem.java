// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Azure VM workload-specific workload item representing SQL Instance. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "workloadItemType")
@JsonTypeName("SQLInstance")
@Fluent
public final class AzureVmWorkloadSqlInstanceWorkloadItem extends AzureVmWorkloadItem {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AzureVmWorkloadSqlInstanceWorkloadItem.class);

    /*
     * Data Directory Paths for default directories
     */
    @JsonProperty(value = "dataDirectoryPaths")
    private List<SqlDataDirectory> dataDirectoryPaths;

    /**
     * Get the dataDirectoryPaths property: Data Directory Paths for default directories.
     *
     * @return the dataDirectoryPaths value.
     */
    public List<SqlDataDirectory> dataDirectoryPaths() {
        return this.dataDirectoryPaths;
    }

    /**
     * Set the dataDirectoryPaths property: Data Directory Paths for default directories.
     *
     * @param dataDirectoryPaths the dataDirectoryPaths value to set.
     * @return the AzureVmWorkloadSqlInstanceWorkloadItem object itself.
     */
    public AzureVmWorkloadSqlInstanceWorkloadItem withDataDirectoryPaths(List<SqlDataDirectory> dataDirectoryPaths) {
        this.dataDirectoryPaths = dataDirectoryPaths;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withParentName(String parentName) {
        super.withParentName(parentName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withServerName(String serverName) {
        super.withServerName(serverName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withIsAutoProtectable(Boolean isAutoProtectable) {
        super.withIsAutoProtectable(isAutoProtectable);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withSubinquireditemcount(Integer subinquireditemcount) {
        super.withSubinquireditemcount(subinquireditemcount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withSubWorkloadItemCount(Integer subWorkloadItemCount) {
        super.withSubWorkloadItemCount(subWorkloadItemCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withBackupManagementType(String backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withWorkloadType(String workloadType) {
        super.withWorkloadType(workloadType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureVmWorkloadSqlInstanceWorkloadItem withProtectionState(ProtectionStatus protectionState) {
        super.withProtectionState(protectionState);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dataDirectoryPaths() != null) {
            dataDirectoryPaths().forEach(e -> e.validate());
        }
    }
}
