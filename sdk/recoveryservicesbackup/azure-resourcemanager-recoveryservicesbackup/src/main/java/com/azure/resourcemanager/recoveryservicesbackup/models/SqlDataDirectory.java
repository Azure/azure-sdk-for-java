// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQLDataDirectory info.
 */
@Fluent
public final class SqlDataDirectory implements JsonSerializable<SqlDataDirectory> {
    /*
     * Type of data directory mapping
     */
    private SqlDataDirectoryType type;

    /*
     * File path
     */
    private String path;

    /*
     * Logical name of the file
     */
    private String logicalName;

    /**
     * Creates an instance of SqlDataDirectory class.
     */
    public SqlDataDirectory() {
    }

    /**
     * Get the type property: Type of data directory mapping.
     * 
     * @return the type value.
     */
    public SqlDataDirectoryType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of data directory mapping.
     * 
     * @param type the type value to set.
     * @return the SqlDataDirectory object itself.
     */
    public SqlDataDirectory withType(SqlDataDirectoryType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the path property: File path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: File path.
     * 
     * @param path the path value to set.
     * @return the SqlDataDirectory object itself.
     */
    public SqlDataDirectory withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the logicalName property: Logical name of the file.
     * 
     * @return the logicalName value.
     */
    public String logicalName() {
        return this.logicalName;
    }

    /**
     * Set the logicalName property: Logical name of the file.
     * 
     * @param logicalName the logicalName value to set.
     * @return the SqlDataDirectory object itself.
     */
    public SqlDataDirectory withLogicalName(String logicalName) {
        this.logicalName = logicalName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("logicalName", this.logicalName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDataDirectory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDataDirectory if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlDataDirectory.
     */
    public static SqlDataDirectory fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDataDirectory deserializedSqlDataDirectory = new SqlDataDirectory();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSqlDataDirectory.type = SqlDataDirectoryType.fromString(reader.getString());
                } else if ("path".equals(fieldName)) {
                    deserializedSqlDataDirectory.path = reader.getString();
                } else if ("logicalName".equals(fieldName)) {
                    deserializedSqlDataDirectory.logicalName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlDataDirectory;
        });
    }
}
