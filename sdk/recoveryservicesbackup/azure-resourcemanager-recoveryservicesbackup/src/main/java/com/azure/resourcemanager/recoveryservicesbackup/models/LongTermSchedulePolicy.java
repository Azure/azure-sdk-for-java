// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Long term policy schedule.
 */
@Immutable
public final class LongTermSchedulePolicy extends SchedulePolicy {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String schedulePolicyType = "LongTermSchedulePolicy";

    /**
     * Creates an instance of LongTermSchedulePolicy class.
     */
    public LongTermSchedulePolicy() {
    }

    /**
     * Get the schedulePolicyType property: This property will be used as the discriminator for deciding the specific
     * types in the polymorphic chain of types.
     * 
     * @return the schedulePolicyType value.
     */
    @Override
    public String schedulePolicyType() {
        return this.schedulePolicyType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("schedulePolicyType", this.schedulePolicyType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LongTermSchedulePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LongTermSchedulePolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LongTermSchedulePolicy.
     */
    public static LongTermSchedulePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LongTermSchedulePolicy deserializedLongTermSchedulePolicy = new LongTermSchedulePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schedulePolicyType".equals(fieldName)) {
                    deserializedLongTermSchedulePolicy.schedulePolicyType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLongTermSchedulePolicy;
        });
    }
}
