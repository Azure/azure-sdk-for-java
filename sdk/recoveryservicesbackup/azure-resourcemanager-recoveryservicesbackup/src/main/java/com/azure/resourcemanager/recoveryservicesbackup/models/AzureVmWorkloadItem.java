// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure VM workload-specific workload item.
 */
@Fluent
public class AzureVmWorkloadItem extends WorkloadItem {
    /*
     * Type of the backup item.
     */
    private String workloadItemType = "AzureVmWorkloadItem";

    /*
     * Name for instance or AG
     */
    private String parentName;

    /*
     * Host/Cluster Name for instance or AG
     */
    private String serverName;

    /*
     * Indicates if workload item is auto-protectable
     */
    private Boolean isAutoProtectable;

    /*
     * For instance or AG, indicates number of DB's present
     */
    private Integer subinquireditemcount;

    /*
     * For instance or AG, indicates number of DB's to be protected
     */
    private Integer subWorkloadItemCount;

    /**
     * Creates an instance of AzureVmWorkloadItem class.
     */
    public AzureVmWorkloadItem() {
    }

    /**
     * Get the workloadItemType property: Type of the backup item.
     * 
     * @return the workloadItemType value.
     */
    @Override
    public String workloadItemType() {
        return this.workloadItemType;
    }

    /**
     * Get the parentName property: Name for instance or AG.
     * 
     * @return the parentName value.
     */
    public String parentName() {
        return this.parentName;
    }

    /**
     * Set the parentName property: Name for instance or AG.
     * 
     * @param parentName the parentName value to set.
     * @return the AzureVmWorkloadItem object itself.
     */
    public AzureVmWorkloadItem withParentName(String parentName) {
        this.parentName = parentName;
        return this;
    }

    /**
     * Get the serverName property: Host/Cluster Name for instance or AG.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set the serverName property: Host/Cluster Name for instance or AG.
     * 
     * @param serverName the serverName value to set.
     * @return the AzureVmWorkloadItem object itself.
     */
    public AzureVmWorkloadItem withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get the isAutoProtectable property: Indicates if workload item is auto-protectable.
     * 
     * @return the isAutoProtectable value.
     */
    public Boolean isAutoProtectable() {
        return this.isAutoProtectable;
    }

    /**
     * Set the isAutoProtectable property: Indicates if workload item is auto-protectable.
     * 
     * @param isAutoProtectable the isAutoProtectable value to set.
     * @return the AzureVmWorkloadItem object itself.
     */
    public AzureVmWorkloadItem withIsAutoProtectable(Boolean isAutoProtectable) {
        this.isAutoProtectable = isAutoProtectable;
        return this;
    }

    /**
     * Get the subinquireditemcount property: For instance or AG, indicates number of DB's present.
     * 
     * @return the subinquireditemcount value.
     */
    public Integer subinquireditemcount() {
        return this.subinquireditemcount;
    }

    /**
     * Set the subinquireditemcount property: For instance or AG, indicates number of DB's present.
     * 
     * @param subinquireditemcount the subinquireditemcount value to set.
     * @return the AzureVmWorkloadItem object itself.
     */
    public AzureVmWorkloadItem withSubinquireditemcount(Integer subinquireditemcount) {
        this.subinquireditemcount = subinquireditemcount;
        return this;
    }

    /**
     * Get the subWorkloadItemCount property: For instance or AG, indicates number of DB's to be protected.
     * 
     * @return the subWorkloadItemCount value.
     */
    public Integer subWorkloadItemCount() {
        return this.subWorkloadItemCount;
    }

    /**
     * Set the subWorkloadItemCount property: For instance or AG, indicates number of DB's to be protected.
     * 
     * @param subWorkloadItemCount the subWorkloadItemCount value to set.
     * @return the AzureVmWorkloadItem object itself.
     */
    public AzureVmWorkloadItem withSubWorkloadItemCount(Integer subWorkloadItemCount) {
        this.subWorkloadItemCount = subWorkloadItemCount;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadItem withBackupManagementType(String backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadItem withWorkloadType(String workloadType) {
        super.withWorkloadType(workloadType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadItem withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadItem withProtectionState(ProtectionStatus protectionState) {
        super.withProtectionState(protectionState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupManagementType", backupManagementType());
        jsonWriter.writeStringField("workloadType", workloadType());
        jsonWriter.writeStringField("friendlyName", friendlyName());
        jsonWriter.writeStringField("protectionState", protectionState() == null ? null : protectionState().toString());
        jsonWriter.writeStringField("workloadItemType", this.workloadItemType);
        jsonWriter.writeStringField("parentName", this.parentName);
        jsonWriter.writeStringField("serverName", this.serverName);
        jsonWriter.writeBooleanField("isAutoProtectable", this.isAutoProtectable);
        jsonWriter.writeNumberField("subinquireditemcount", this.subinquireditemcount);
        jsonWriter.writeNumberField("subWorkloadItemCount", this.subWorkloadItemCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureVmWorkloadItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureVmWorkloadItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureVmWorkloadItem.
     */
    public static AzureVmWorkloadItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("workloadItemType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("SAPAseDatabase".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapAseDatabaseWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SAPAseSystem".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapAseSystemWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SAPHanaDatabase".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapHanaDatabaseWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SAPHanaSystem".equals(discriminatorValue)) {
                    return AzureVmWorkloadSapHanaSystemWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SQLDataBase".equals(discriminatorValue)) {
                    return AzureVmWorkloadSqlDatabaseWorkloadItem.fromJson(readerToUse.reset());
                } else if ("SQLInstance".equals(discriminatorValue)) {
                    return AzureVmWorkloadSqlInstanceWorkloadItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AzureVmWorkloadItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureVmWorkloadItem deserializedAzureVmWorkloadItem = new AzureVmWorkloadItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupManagementType".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.withBackupManagementType(reader.getString());
                } else if ("workloadType".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.withWorkloadType(reader.getString());
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.withFriendlyName(reader.getString());
                } else if ("protectionState".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem
                        .withProtectionState(ProtectionStatus.fromString(reader.getString()));
                } else if ("workloadItemType".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.workloadItemType = reader.getString();
                } else if ("parentName".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.parentName = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.serverName = reader.getString();
                } else if ("isAutoProtectable".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.isAutoProtectable = reader.getNullable(JsonReader::getBoolean);
                } else if ("subinquireditemcount".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.subinquireditemcount = reader.getNullable(JsonReader::getInt);
                } else if ("subWorkloadItemCount".equals(fieldName)) {
                    deserializedAzureVmWorkloadItem.subWorkloadItemCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureVmWorkloadItem;
        });
    }
}
