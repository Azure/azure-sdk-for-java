// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Trigger DataMove Request.
 */
@Fluent
public final class TriggerDataMoveRequest implements JsonSerializable<TriggerDataMoveRequest> {
    /*
     * ARM Id of source vault
     */
    private String sourceResourceId;

    /*
     * Source Region
     */
    private String sourceRegion;

    /*
     * DataMove Level
     */
    private DataMoveLevel dataMoveLevel;

    /*
     * Correlation Id
     */
    private String correlationId;

    /*
     * Source Container ArmIds
     */
    private List<String> sourceContainerArmIds;

    /*
     * Pause GC
     */
    private Boolean pauseGC;

    /**
     * Creates an instance of TriggerDataMoveRequest class.
     */
    public TriggerDataMoveRequest() {
    }

    /**
     * Get the sourceResourceId property: ARM Id of source vault.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: ARM Id of source vault.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the TriggerDataMoveRequest object itself.
     */
    public TriggerDataMoveRequest withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the sourceRegion property: Source Region.
     * 
     * @return the sourceRegion value.
     */
    public String sourceRegion() {
        return this.sourceRegion;
    }

    /**
     * Set the sourceRegion property: Source Region.
     * 
     * @param sourceRegion the sourceRegion value to set.
     * @return the TriggerDataMoveRequest object itself.
     */
    public TriggerDataMoveRequest withSourceRegion(String sourceRegion) {
        this.sourceRegion = sourceRegion;
        return this;
    }

    /**
     * Get the dataMoveLevel property: DataMove Level.
     * 
     * @return the dataMoveLevel value.
     */
    public DataMoveLevel dataMoveLevel() {
        return this.dataMoveLevel;
    }

    /**
     * Set the dataMoveLevel property: DataMove Level.
     * 
     * @param dataMoveLevel the dataMoveLevel value to set.
     * @return the TriggerDataMoveRequest object itself.
     */
    public TriggerDataMoveRequest withDataMoveLevel(DataMoveLevel dataMoveLevel) {
        this.dataMoveLevel = dataMoveLevel;
        return this;
    }

    /**
     * Get the correlationId property: Correlation Id.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: Correlation Id.
     * 
     * @param correlationId the correlationId value to set.
     * @return the TriggerDataMoveRequest object itself.
     */
    public TriggerDataMoveRequest withCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Get the sourceContainerArmIds property: Source Container ArmIds.
     * 
     * @return the sourceContainerArmIds value.
     */
    public List<String> sourceContainerArmIds() {
        return this.sourceContainerArmIds;
    }

    /**
     * Set the sourceContainerArmIds property: Source Container ArmIds.
     * 
     * @param sourceContainerArmIds the sourceContainerArmIds value to set.
     * @return the TriggerDataMoveRequest object itself.
     */
    public TriggerDataMoveRequest withSourceContainerArmIds(List<String> sourceContainerArmIds) {
        this.sourceContainerArmIds = sourceContainerArmIds;
        return this;
    }

    /**
     * Get the pauseGC property: Pause GC.
     * 
     * @return the pauseGC value.
     */
    public Boolean pauseGC() {
        return this.pauseGC;
    }

    /**
     * Set the pauseGC property: Pause GC.
     * 
     * @param pauseGC the pauseGC value to set.
     * @return the TriggerDataMoveRequest object itself.
     */
    public TriggerDataMoveRequest withPauseGC(Boolean pauseGC) {
        this.pauseGC = pauseGC;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceResourceId in model TriggerDataMoveRequest"));
        }
        if (sourceRegion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceRegion in model TriggerDataMoveRequest"));
        }
        if (dataMoveLevel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataMoveLevel in model TriggerDataMoveRequest"));
        }
        if (correlationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property correlationId in model TriggerDataMoveRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriggerDataMoveRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeStringField("sourceRegion", this.sourceRegion);
        jsonWriter.writeStringField("dataMoveLevel", this.dataMoveLevel == null ? null : this.dataMoveLevel.toString());
        jsonWriter.writeStringField("correlationId", this.correlationId);
        jsonWriter.writeArrayField("sourceContainerArmIds", this.sourceContainerArmIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("pauseGC", this.pauseGC);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggerDataMoveRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggerDataMoveRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TriggerDataMoveRequest.
     */
    public static TriggerDataMoveRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggerDataMoveRequest deserializedTriggerDataMoveRequest = new TriggerDataMoveRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceResourceId".equals(fieldName)) {
                    deserializedTriggerDataMoveRequest.sourceResourceId = reader.getString();
                } else if ("sourceRegion".equals(fieldName)) {
                    deserializedTriggerDataMoveRequest.sourceRegion = reader.getString();
                } else if ("dataMoveLevel".equals(fieldName)) {
                    deserializedTriggerDataMoveRequest.dataMoveLevel = DataMoveLevel.fromString(reader.getString());
                } else if ("correlationId".equals(fieldName)) {
                    deserializedTriggerDataMoveRequest.correlationId = reader.getString();
                } else if ("sourceContainerArmIds".equals(fieldName)) {
                    List<String> sourceContainerArmIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedTriggerDataMoveRequest.sourceContainerArmIds = sourceContainerArmIds;
                } else if ("pauseGC".equals(fieldName)) {
                    deserializedTriggerDataMoveRequest.pauseGC = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggerDataMoveRequest;
        });
    }
}
