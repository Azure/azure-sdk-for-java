// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** AzureBackupServer (DPMVenus) workload-specific protection container. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "containerType")
@JsonTypeName("AzureBackupServerContainer")
@Immutable
public final class AzureBackupServerContainer extends DpmContainer {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AzureBackupServerContainer.class);

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withCanReRegister(Boolean canReRegister) {
        super.withCanReRegister(canReRegister);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withContainerId(String containerId) {
        super.withContainerId(containerId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withProtectedItemCount(Long protectedItemCount) {
        super.withProtectedItemCount(protectedItemCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withDpmAgentVersion(String dpmAgentVersion) {
        super.withDpmAgentVersion(dpmAgentVersion);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withDpmServers(List<String> dpmServers) {
        super.withDpmServers(dpmServers);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withUpgradeAvailable(Boolean upgradeAvailable) {
        super.withUpgradeAvailable(upgradeAvailable);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withProtectionStatus(String protectionStatus) {
        super.withProtectionStatus(protectionStatus);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withExtendedInfo(DpmContainerExtendedInfo extendedInfo) {
        super.withExtendedInfo(extendedInfo);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withBackupManagementType(BackupManagementType backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withRegistrationStatus(String registrationStatus) {
        super.withRegistrationStatus(registrationStatus);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AzureBackupServerContainer withHealthStatus(String healthStatus) {
        super.withHealthStatus(healthStatus);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
