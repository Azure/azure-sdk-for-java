// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AzureBackupServer (DPMVenus) workload-specific protection container.
 */
@Fluent
public final class AzureBackupServerContainer extends DpmContainer {
    /*
     * Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines
     * 2.
     * Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
     * Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
     * Backup is VMAppContainer
     */
    private ProtectableContainerType containerType = ProtectableContainerType.AZURE_BACKUP_SERVER_CONTAINER;

    /**
     * Creates an instance of AzureBackupServerContainer class.
     */
    public AzureBackupServerContainer() {
    }

    /**
     * Get the containerType property: Type of the container. The value of this property for: 1. Compute Azure VM is
     * Microsoft.Compute/virtualMachines 2.
     * Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
     * Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
     * Backup is VMAppContainer.
     * 
     * @return the containerType value.
     */
    @Override
    public ProtectableContainerType containerType() {
        return this.containerType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withCanReRegister(Boolean canReRegister) {
        super.withCanReRegister(canReRegister);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withContainerId(String containerId) {
        super.withContainerId(containerId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withProtectedItemCount(Long protectedItemCount) {
        super.withProtectedItemCount(protectedItemCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withDpmAgentVersion(String dpmAgentVersion) {
        super.withDpmAgentVersion(dpmAgentVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withDpmServers(List<String> dpmServers) {
        super.withDpmServers(dpmServers);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withUpgradeAvailable(Boolean upgradeAvailable) {
        super.withUpgradeAvailable(upgradeAvailable);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withProtectionStatus(String protectionStatus) {
        super.withProtectionStatus(protectionStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withExtendedInfo(DpmContainerExtendedInfo extendedInfo) {
        super.withExtendedInfo(extendedInfo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withBackupManagementType(BackupManagementType backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withRegistrationStatus(String registrationStatus) {
        super.withRegistrationStatus(registrationStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withHealthStatus(String healthStatus) {
        super.withHealthStatus(healthStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupServerContainer withProtectableObjectType(String protectableObjectType) {
        super.withProtectableObjectType(protectableObjectType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (extendedInfo() != null) {
            extendedInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", friendlyName());
        jsonWriter.writeStringField("backupManagementType",
            backupManagementType() == null ? null : backupManagementType().toString());
        jsonWriter.writeStringField("registrationStatus", registrationStatus());
        jsonWriter.writeStringField("healthStatus", healthStatus());
        jsonWriter.writeStringField("protectableObjectType", protectableObjectType());
        jsonWriter.writeBooleanField("canReRegister", canReRegister());
        jsonWriter.writeStringField("containerId", containerId());
        jsonWriter.writeNumberField("protectedItemCount", protectedItemCount());
        jsonWriter.writeStringField("dpmAgentVersion", dpmAgentVersion());
        jsonWriter.writeArrayField("dpmServers", dpmServers(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("upgradeAvailable", upgradeAvailable());
        jsonWriter.writeStringField("protectionStatus", protectionStatus());
        jsonWriter.writeJsonField("extendedInfo", extendedInfo());
        jsonWriter.writeStringField("containerType", this.containerType == null ? null : this.containerType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBackupServerContainer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBackupServerContainer if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureBackupServerContainer.
     */
    public static AzureBackupServerContainer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBackupServerContainer deserializedAzureBackupServerContainer = new AzureBackupServerContainer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withFriendlyName(reader.getString());
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedAzureBackupServerContainer
                        .withBackupManagementType(BackupManagementType.fromString(reader.getString()));
                } else if ("registrationStatus".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withRegistrationStatus(reader.getString());
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withHealthStatus(reader.getString());
                } else if ("protectableObjectType".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withProtectableObjectType(reader.getString());
                } else if ("canReRegister".equals(fieldName)) {
                    deserializedAzureBackupServerContainer
                        .withCanReRegister(reader.getNullable(JsonReader::getBoolean));
                } else if ("containerId".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withContainerId(reader.getString());
                } else if ("protectedItemCount".equals(fieldName)) {
                    deserializedAzureBackupServerContainer
                        .withProtectedItemCount(reader.getNullable(JsonReader::getLong));
                } else if ("dpmAgentVersion".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withDpmAgentVersion(reader.getString());
                } else if ("dpmServers".equals(fieldName)) {
                    List<String> dpmServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureBackupServerContainer.withDpmServers(dpmServers);
                } else if ("upgradeAvailable".equals(fieldName)) {
                    deserializedAzureBackupServerContainer
                        .withUpgradeAvailable(reader.getNullable(JsonReader::getBoolean));
                } else if ("protectionStatus".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withProtectionStatus(reader.getString());
                } else if ("extendedInfo".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.withExtendedInfo(DpmContainerExtendedInfo.fromJson(reader));
                } else if ("containerType".equals(fieldName)) {
                    deserializedAzureBackupServerContainer.containerType
                        = ProtectableContainerType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBackupServerContainer;
        });
    }
}
