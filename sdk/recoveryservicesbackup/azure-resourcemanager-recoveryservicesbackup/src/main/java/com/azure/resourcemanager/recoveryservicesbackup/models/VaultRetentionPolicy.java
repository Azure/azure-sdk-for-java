// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Vault retention policy for AzureFileShare.
 */
@Fluent
public final class VaultRetentionPolicy implements JsonSerializable<VaultRetentionPolicy> {
    /*
     * Base class for retention policy.
     */
    private RetentionPolicy vaultRetention;

    /*
     * The snapshotRetentionInDays property.
     */
    private int snapshotRetentionInDays;

    /**
     * Creates an instance of VaultRetentionPolicy class.
     */
    public VaultRetentionPolicy() {
    }

    /**
     * Get the vaultRetention property: Base class for retention policy.
     * 
     * @return the vaultRetention value.
     */
    public RetentionPolicy vaultRetention() {
        return this.vaultRetention;
    }

    /**
     * Set the vaultRetention property: Base class for retention policy.
     * 
     * @param vaultRetention the vaultRetention value to set.
     * @return the VaultRetentionPolicy object itself.
     */
    public VaultRetentionPolicy withVaultRetention(RetentionPolicy vaultRetention) {
        this.vaultRetention = vaultRetention;
        return this;
    }

    /**
     * Get the snapshotRetentionInDays property: The snapshotRetentionInDays property.
     * 
     * @return the snapshotRetentionInDays value.
     */
    public int snapshotRetentionInDays() {
        return this.snapshotRetentionInDays;
    }

    /**
     * Set the snapshotRetentionInDays property: The snapshotRetentionInDays property.
     * 
     * @param snapshotRetentionInDays the snapshotRetentionInDays value to set.
     * @return the VaultRetentionPolicy object itself.
     */
    public VaultRetentionPolicy withSnapshotRetentionInDays(int snapshotRetentionInDays) {
        this.snapshotRetentionInDays = snapshotRetentionInDays;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vaultRetention() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vaultRetention in model VaultRetentionPolicy"));
        } else {
            vaultRetention().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VaultRetentionPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("vaultRetention", this.vaultRetention);
        jsonWriter.writeIntField("snapshotRetentionInDays", this.snapshotRetentionInDays);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultRetentionPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultRetentionPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VaultRetentionPolicy.
     */
    public static VaultRetentionPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultRetentionPolicy deserializedVaultRetentionPolicy = new VaultRetentionPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vaultRetention".equals(fieldName)) {
                    deserializedVaultRetentionPolicy.vaultRetention = RetentionPolicy.fromJson(reader);
                } else if ("snapshotRetentionInDays".equals(fieldName)) {
                    deserializedVaultRetentionPolicy.snapshotRetentionInDays = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultRetentionPolicy;
        });
    }
}
