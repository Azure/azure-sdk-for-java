// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base for all lists of resources.
 */
@Fluent
public class ResourceList implements JsonSerializable<ResourceList> {
    /*
     * The URI to fetch the next page of resources, with each API call returning up to 200 resources per page. Use
     * ListNext() to fetch the next page if the total number of resources exceeds 200.
     */
    private String nextLink;

    /**
     * Creates an instance of ResourceList class.
     */
    public ResourceList() {
    }

    /**
     * Get the nextLink property: The URI to fetch the next page of resources, with each API call returning up to 200
     * resources per page. Use ListNext() to fetch the next page if the total number of resources exceeds 200.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: The URI to fetch the next page of resources, with each API call returning up to 200
     * resources per page. Use ListNext() to fetch the next page if the total number of resources exceeds 200.
     * 
     * @param nextLink the nextLink value to set.
     * @return the ResourceList object itself.
     */
    public ResourceList withNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceList.
     */
    public static ResourceList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceList deserializedResourceList = new ResourceList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nextLink".equals(fieldName)) {
                    deserializedResourceList.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceList;
        });
    }
}
