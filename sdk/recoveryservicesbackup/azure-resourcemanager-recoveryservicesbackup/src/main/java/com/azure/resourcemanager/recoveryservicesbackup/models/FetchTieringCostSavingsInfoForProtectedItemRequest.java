// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request parameters for tiering cost info for protected item.
 */
@Fluent
public final class FetchTieringCostSavingsInfoForProtectedItemRequest extends FetchTieringCostInfoRequest {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "FetchTieringCostSavingsInfoForProtectedItemRequest";

    /*
     * Name of the protected item container
     */
    private String containerName;

    /*
     * Name of the protectedItemName
     */
    private String protectedItemName;

    /**
     * Creates an instance of FetchTieringCostSavingsInfoForProtectedItemRequest class.
     */
    public FetchTieringCostSavingsInfoForProtectedItemRequest() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the containerName property: Name of the protected item container.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: Name of the protected item container.
     * 
     * @param containerName the containerName value to set.
     * @return the FetchTieringCostSavingsInfoForProtectedItemRequest object itself.
     */
    public FetchTieringCostSavingsInfoForProtectedItemRequest withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get the protectedItemName property: Name of the protectedItemName.
     * 
     * @return the protectedItemName value.
     */
    public String protectedItemName() {
        return this.protectedItemName;
    }

    /**
     * Set the protectedItemName property: Name of the protectedItemName.
     * 
     * @param protectedItemName the protectedItemName value to set.
     * @return the FetchTieringCostSavingsInfoForProtectedItemRequest object itself.
     */
    public FetchTieringCostSavingsInfoForProtectedItemRequest withProtectedItemName(String protectedItemName) {
        this.protectedItemName = protectedItemName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FetchTieringCostSavingsInfoForProtectedItemRequest withSourceTierType(RecoveryPointTierType sourceTierType) {
        super.withSourceTierType(sourceTierType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FetchTieringCostSavingsInfoForProtectedItemRequest withTargetTierType(RecoveryPointTierType targetTierType) {
        super.withTargetTierType(targetTierType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (containerName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property containerName in model FetchTieringCostSavingsInfoForProtectedItemRequest"));
        }
        if (protectedItemName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property protectedItemName in model FetchTieringCostSavingsInfoForProtectedItemRequest"));
        }
        if (sourceTierType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceTierType in model FetchTieringCostSavingsInfoForProtectedItemRequest"));
        }
        if (targetTierType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetTierType in model FetchTieringCostSavingsInfoForProtectedItemRequest"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(FetchTieringCostSavingsInfoForProtectedItemRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceTierType", sourceTierType() == null ? null : sourceTierType().toString());
        jsonWriter.writeStringField("targetTierType", targetTierType() == null ? null : targetTierType().toString());
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeStringField("protectedItemName", this.protectedItemName);
        jsonWriter.writeStringField("objectType", this.objectType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FetchTieringCostSavingsInfoForProtectedItemRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FetchTieringCostSavingsInfoForProtectedItemRequest if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FetchTieringCostSavingsInfoForProtectedItemRequest.
     */
    public static FetchTieringCostSavingsInfoForProtectedItemRequest fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            FetchTieringCostSavingsInfoForProtectedItemRequest deserializedFetchTieringCostSavingsInfoForProtectedItemRequest
                = new FetchTieringCostSavingsInfoForProtectedItemRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceTierType".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForProtectedItemRequest
                        .withSourceTierType(RecoveryPointTierType.fromString(reader.getString()));
                } else if ("targetTierType".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForProtectedItemRequest
                        .withTargetTierType(RecoveryPointTierType.fromString(reader.getString()));
                } else if ("containerName".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForProtectedItemRequest.containerName = reader.getString();
                } else if ("protectedItemName".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForProtectedItemRequest.protectedItemName
                        = reader.getString();
                } else if ("objectType".equals(fieldName)) {
                    deserializedFetchTieringCostSavingsInfoForProtectedItemRequest.objectType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFetchTieringCostSavingsInfoForProtectedItemRequest;
        });
    }
}
