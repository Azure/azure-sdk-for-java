// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details about target workload during restore operation.
 */
@Fluent
public final class TargetRestoreInfo implements JsonSerializable<TargetRestoreInfo> {
    /*
     * Can Overwrite if Target DataBase already exists
     */
    private OverwriteOptions overwriteOption;

    /*
     * Resource Id name of the container in which Target DataBase resides
     */
    private String containerId;

    /*
     * Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana
     */
    private String databaseName;

    /*
     * Target directory location for restore as files.
     */
    private String targetDirectoryForFileRestore;

    /**
     * Creates an instance of TargetRestoreInfo class.
     */
    public TargetRestoreInfo() {
    }

    /**
     * Get the overwriteOption property: Can Overwrite if Target DataBase already exists.
     * 
     * @return the overwriteOption value.
     */
    public OverwriteOptions overwriteOption() {
        return this.overwriteOption;
    }

    /**
     * Set the overwriteOption property: Can Overwrite if Target DataBase already exists.
     * 
     * @param overwriteOption the overwriteOption value to set.
     * @return the TargetRestoreInfo object itself.
     */
    public TargetRestoreInfo withOverwriteOption(OverwriteOptions overwriteOption) {
        this.overwriteOption = overwriteOption;
        return this;
    }

    /**
     * Get the containerId property: Resource Id name of the container in which Target DataBase resides.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: Resource Id name of the container in which Target DataBase resides.
     * 
     * @param containerId the containerId value to set.
     * @return the TargetRestoreInfo object itself.
     */
    public TargetRestoreInfo withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Get the databaseName property: Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana.
     * 
     * @param databaseName the databaseName value to set.
     * @return the TargetRestoreInfo object itself.
     */
    public TargetRestoreInfo withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the targetDirectoryForFileRestore property: Target directory location for restore as files.
     * 
     * @return the targetDirectoryForFileRestore value.
     */
    public String targetDirectoryForFileRestore() {
        return this.targetDirectoryForFileRestore;
    }

    /**
     * Set the targetDirectoryForFileRestore property: Target directory location for restore as files.
     * 
     * @param targetDirectoryForFileRestore the targetDirectoryForFileRestore value to set.
     * @return the TargetRestoreInfo object itself.
     */
    public TargetRestoreInfo withTargetDirectoryForFileRestore(String targetDirectoryForFileRestore) {
        this.targetDirectoryForFileRestore = targetDirectoryForFileRestore;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("overwriteOption",
            this.overwriteOption == null ? null : this.overwriteOption.toString());
        jsonWriter.writeStringField("containerId", this.containerId);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("targetDirectoryForFileRestore", this.targetDirectoryForFileRestore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetRestoreInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetRestoreInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetRestoreInfo.
     */
    public static TargetRestoreInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetRestoreInfo deserializedTargetRestoreInfo = new TargetRestoreInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("overwriteOption".equals(fieldName)) {
                    deserializedTargetRestoreInfo.overwriteOption = OverwriteOptions.fromString(reader.getString());
                } else if ("containerId".equals(fieldName)) {
                    deserializedTargetRestoreInfo.containerId = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedTargetRestoreInfo.databaseName = reader.getString();
                } else if ("targetDirectoryForFileRestore".equals(fieldName)) {
                    deserializedTargetRestoreInfo.targetDirectoryForFileRestore = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetRestoreInfo;
        });
    }
}
