// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Data Protection Manager (DPM) specific backup engine.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "backupEngineType",
    defaultImpl = DpmBackupEngine.class,
    visible = true)
@JsonTypeName("DpmBackupEngine")
@Fluent
public final class DpmBackupEngine extends BackupEngineBase {
    /*
     * Type of the backup engine.
     */
    @JsonTypeId
    @JsonProperty(value = "backupEngineType", required = true)
    private BackupEngineType backupEngineType = BackupEngineType.DPM_BACKUP_ENGINE;

    /**
     * Creates an instance of DpmBackupEngine class.
     */
    public DpmBackupEngine() {
    }

    /**
     * Get the backupEngineType property: Type of the backup engine.
     * 
     * @return the backupEngineType value.
     */
    @Override
    public BackupEngineType backupEngineType() {
        return this.backupEngineType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withFriendlyName(String friendlyName) {
        super.withFriendlyName(friendlyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withBackupManagementType(BackupManagementType backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withRegistrationStatus(String registrationStatus) {
        super.withRegistrationStatus(registrationStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withBackupEngineState(String backupEngineState) {
        super.withBackupEngineState(backupEngineState);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withHealthStatus(String healthStatus) {
        super.withHealthStatus(healthStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withCanReRegister(Boolean canReRegister) {
        super.withCanReRegister(canReRegister);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withBackupEngineId(String backupEngineId) {
        super.withBackupEngineId(backupEngineId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withDpmVersion(String dpmVersion) {
        super.withDpmVersion(dpmVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withAzureBackupAgentVersion(String azureBackupAgentVersion) {
        super.withAzureBackupAgentVersion(azureBackupAgentVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withIsAzureBackupAgentUpgradeAvailable(Boolean isAzureBackupAgentUpgradeAvailable) {
        super.withIsAzureBackupAgentUpgradeAvailable(isAzureBackupAgentUpgradeAvailable);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withIsDpmUpgradeAvailable(Boolean isDpmUpgradeAvailable) {
        super.withIsDpmUpgradeAvailable(isDpmUpgradeAvailable);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DpmBackupEngine withExtendedInfo(BackupEngineExtendedInfo extendedInfo) {
        super.withExtendedInfo(extendedInfo);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
