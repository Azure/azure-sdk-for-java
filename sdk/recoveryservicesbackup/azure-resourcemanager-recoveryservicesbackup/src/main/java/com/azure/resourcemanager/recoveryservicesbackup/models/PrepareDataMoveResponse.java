// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.recoveryservicesbackup.fluent.models.VaultStorageConfigOperationResultResponseInner;
import java.io.IOException;
import java.util.Map;

/**
 * Prepare DataMove Response.
 */
@Fluent
public final class PrepareDataMoveResponse extends VaultStorageConfigOperationResultResponseInner {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "PrepareDataMoveResponse";

    /*
     * Co-relationId for move operation
     */
    private String correlationId;

    /*
     * Source Vault Properties
     */
    private Map<String, String> sourceVaultProperties;

    /**
     * Creates an instance of PrepareDataMoveResponse class.
     */
    public PrepareDataMoveResponse() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the correlationId property: Co-relationId for move operation.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: Co-relationId for move operation.
     * 
     * @param correlationId the correlationId value to set.
     * @return the PrepareDataMoveResponse object itself.
     */
    public PrepareDataMoveResponse withCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Get the sourceVaultProperties property: Source Vault Properties.
     * 
     * @return the sourceVaultProperties value.
     */
    public Map<String, String> sourceVaultProperties() {
        return this.sourceVaultProperties;
    }

    /**
     * Set the sourceVaultProperties property: Source Vault Properties.
     * 
     * @param sourceVaultProperties the sourceVaultProperties value to set.
     * @return the PrepareDataMoveResponse object itself.
     */
    public PrepareDataMoveResponse withSourceVaultProperties(Map<String, String> sourceVaultProperties) {
        this.sourceVaultProperties = sourceVaultProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeStringField("correlationId", this.correlationId);
        jsonWriter.writeMapField("sourceVaultProperties", this.sourceVaultProperties,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrepareDataMoveResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrepareDataMoveResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrepareDataMoveResponse.
     */
    public static PrepareDataMoveResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrepareDataMoveResponse deserializedPrepareDataMoveResponse = new PrepareDataMoveResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectType".equals(fieldName)) {
                    deserializedPrepareDataMoveResponse.objectType = reader.getString();
                } else if ("correlationId".equals(fieldName)) {
                    deserializedPrepareDataMoveResponse.correlationId = reader.getString();
                } else if ("sourceVaultProperties".equals(fieldName)) {
                    Map<String, String> sourceVaultProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedPrepareDataMoveResponse.sourceVaultProperties = sourceVaultProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrepareDataMoveResponse;
        });
    }
}
