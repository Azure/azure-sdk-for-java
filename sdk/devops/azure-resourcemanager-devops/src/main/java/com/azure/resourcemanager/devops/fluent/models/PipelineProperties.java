// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devops.models.BootstrapConfiguration;
import com.azure.resourcemanager.devops.models.OrganizationReference;
import com.azure.resourcemanager.devops.models.ProjectReference;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Custom properties of a Pipeline. */
@Fluent
public final class PipelineProperties {
    /*
     * Unique identifier of the Azure Pipeline within the Azure DevOps Project.
     */
    @JsonProperty(value = "pipelineId", access = JsonProperty.Access.WRITE_ONLY)
    private Integer pipelineId;

    /*
     * Reference to the Azure DevOps Organization containing the Pipeline.
     */
    @JsonProperty(value = "organization", required = true)
    private OrganizationReference organization;

    /*
     * Reference to the Azure DevOps Project containing the Pipeline.
     */
    @JsonProperty(value = "project", required = true)
    private ProjectReference project;

    /*
     * Configuration used to bootstrap the Pipeline.
     */
    @JsonProperty(value = "bootstrapConfiguration", required = true)
    private BootstrapConfiguration bootstrapConfiguration;

    /**
     * Get the pipelineId property: Unique identifier of the Azure Pipeline within the Azure DevOps Project.
     *
     * @return the pipelineId value.
     */
    public Integer pipelineId() {
        return this.pipelineId;
    }

    /**
     * Get the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     *
     * @return the organization value.
     */
    public OrganizationReference organization() {
        return this.organization;
    }

    /**
     * Set the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     *
     * @param organization the organization value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withOrganization(OrganizationReference organization) {
        this.organization = organization;
        return this;
    }

    /**
     * Get the project property: Reference to the Azure DevOps Project containing the Pipeline.
     *
     * @return the project value.
     */
    public ProjectReference project() {
        return this.project;
    }

    /**
     * Set the project property: Reference to the Azure DevOps Project containing the Pipeline.
     *
     * @param project the project value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withProject(ProjectReference project) {
        this.project = project;
        return this;
    }

    /**
     * Get the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     *
     * @return the bootstrapConfiguration value.
     */
    public BootstrapConfiguration bootstrapConfiguration() {
        return this.bootstrapConfiguration;
    }

    /**
     * Set the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     *
     * @param bootstrapConfiguration the bootstrapConfiguration value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withBootstrapConfiguration(BootstrapConfiguration bootstrapConfiguration) {
        this.bootstrapConfiguration = bootstrapConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (organization() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property organization in model PipelineProperties"));
        } else {
            organization().validate();
        }
        if (project() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property project in model PipelineProperties"));
        } else {
            project().validate();
        }
        if (bootstrapConfiguration() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property bootstrapConfiguration in model PipelineProperties"));
        } else {
            bootstrapConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineProperties.class);
}
