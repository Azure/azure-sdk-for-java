// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Repository containing the source code for a pipeline. */
@Fluent
public final class CodeRepository {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CodeRepository.class);

    /*
     * Type of code repository.
     */
    @JsonProperty(value = "repositoryType", required = true)
    private CodeRepositoryType repositoryType;

    /*
     * Unique immutable identifier of the code repository.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * Default branch used to configure Continuous Integration (CI) in the
     * pipeline.
     */
    @JsonProperty(value = "defaultBranch", required = true)
    private String defaultBranch;

    /*
     * Authorization info to access the code repository.
     */
    @JsonProperty(value = "authorization")
    private Authorization authorization;

    /*
     * Repository-specific properties.
     */
    @JsonProperty(value = "properties")
    private Map<String, String> properties;

    /**
     * Get the repositoryType property: Type of code repository.
     *
     * @return the repositoryType value.
     */
    public CodeRepositoryType repositoryType() {
        return this.repositoryType;
    }

    /**
     * Set the repositoryType property: Type of code repository.
     *
     * @param repositoryType the repositoryType value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withRepositoryType(CodeRepositoryType repositoryType) {
        this.repositoryType = repositoryType;
        return this;
    }

    /**
     * Get the id property: Unique immutable identifier of the code repository.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique immutable identifier of the code repository.
     *
     * @param id the id value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the defaultBranch property: Default branch used to configure Continuous Integration (CI) in the pipeline.
     *
     * @return the defaultBranch value.
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }

    /**
     * Set the defaultBranch property: Default branch used to configure Continuous Integration (CI) in the pipeline.
     *
     * @param defaultBranch the defaultBranch value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
        return this;
    }

    /**
     * Get the authorization property: Authorization info to access the code repository.
     *
     * @return the authorization value.
     */
    public Authorization authorization() {
        return this.authorization;
    }

    /**
     * Set the authorization property: Authorization info to access the code repository.
     *
     * @param authorization the authorization value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withAuthorization(Authorization authorization) {
        this.authorization = authorization;
        return this;
    }

    /**
     * Get the properties property: Repository-specific properties.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Repository-specific properties.
     *
     * @param properties the properties value to set.
     * @return the CodeRepository object itself.
     */
    public CodeRepository withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repositoryType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property repositoryType in model CodeRepository"));
        }
        if (id() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property id in model CodeRepository"));
        }
        if (defaultBranch() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property defaultBranch in model CodeRepository"));
        }
        if (authorization() != null) {
            authorization().validate();
        }
    }
}
