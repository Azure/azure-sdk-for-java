// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devops.models.BootstrapConfiguration;
import com.azure.resourcemanager.devops.models.OrganizationReference;
import com.azure.resourcemanager.devops.models.ProjectReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for Azure
 * resources.
 */
@Fluent
public final class PipelineInner extends Resource {
    /*
     * Custom properties of the Pipeline.
     */
    @JsonProperty(value = "properties", required = true)
    private PipelineProperties innerProperties = new PipelineProperties();

    /**
     * Get the innerProperties property: Custom properties of the Pipeline.
     *
     * @return the innerProperties value.
     */
    private PipelineProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public PipelineInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PipelineInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the pipelineId property: Unique identifier of the Azure Pipeline within the Azure DevOps Project.
     *
     * @return the pipelineId value.
     */
    public Integer pipelineId() {
        return this.innerProperties() == null ? null : this.innerProperties().pipelineId();
    }

    /**
     * Get the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     *
     * @return the organization value.
     */
    public OrganizationReference organization() {
        return this.innerProperties() == null ? null : this.innerProperties().organization();
    }

    /**
     * Set the organization property: Reference to the Azure DevOps Organization containing the Pipeline.
     *
     * @param organization the organization value to set.
     * @return the PipelineInner object itself.
     */
    public PipelineInner withOrganization(OrganizationReference organization) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineProperties();
        }
        this.innerProperties().withOrganization(organization);
        return this;
    }

    /**
     * Get the project property: Reference to the Azure DevOps Project containing the Pipeline.
     *
     * @return the project value.
     */
    public ProjectReference project() {
        return this.innerProperties() == null ? null : this.innerProperties().project();
    }

    /**
     * Set the project property: Reference to the Azure DevOps Project containing the Pipeline.
     *
     * @param project the project value to set.
     * @return the PipelineInner object itself.
     */
    public PipelineInner withProject(ProjectReference project) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineProperties();
        }
        this.innerProperties().withProject(project);
        return this;
    }

    /**
     * Get the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     *
     * @return the bootstrapConfiguration value.
     */
    public BootstrapConfiguration bootstrapConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().bootstrapConfiguration();
    }

    /**
     * Set the bootstrapConfiguration property: Configuration used to bootstrap the Pipeline.
     *
     * @param bootstrapConfiguration the bootstrapConfiguration value to set.
     * @return the PipelineInner object itself.
     */
    public PipelineInner withBootstrapConfiguration(BootstrapConfiguration bootstrapConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineProperties();
        }
        this.innerProperties().withBootstrapConfiguration(bootstrapConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model PipelineInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineInner.class);
}
