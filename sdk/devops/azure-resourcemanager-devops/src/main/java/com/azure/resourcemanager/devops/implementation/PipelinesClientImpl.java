// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.devops.fluent.PipelinesClient;
import com.azure.resourcemanager.devops.fluent.models.PipelineInner;
import com.azure.resourcemanager.devops.models.PipelineListResult;
import com.azure.resourcemanager.devops.models.PipelineUpdateParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PipelinesClient. */
public final class PipelinesClientImpl implements PipelinesClient {
    private final ClientLogger logger = new ClientLogger(PipelinesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final PipelinesService service;

    /** The service client containing this operation class. */
    private final AzureDevOpsImpl client;

    /**
     * Initializes an instance of PipelinesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PipelinesClientImpl(AzureDevOpsImpl client) {
        this.service =
            RestProxy.create(PipelinesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureDevOpsPipelines to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureDevOpsPipelines")
    private interface PipelinesService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines"
                + "/{pipelineName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("pipelineName") String pipelineName,
            @BodyParam("application/json") PipelineInner createOperationParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines"
                + "/{pipelineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelineInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("pipelineName") String pipelineName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines"
                + "/{pipelineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelineInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("pipelineName") String pipelineName,
            @BodyParam("application/json") PipelineUpdateParameters updateOperationParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines"
                + "/{pipelineName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("pipelineName") String pipelineName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelineListResult>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.DevOps/pipelines")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelineListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelineListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelineListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (createOperationParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter createOperationParameters is required and cannot be null."));
        } else {
            createOperationParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            pipelineName,
                            createOperationParameters,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (createOperationParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter createOperationParameters is required and cannot be null."));
        } else {
            createOperationParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                pipelineName,
                createOperationParameters,
                accept,
                context);
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, pipelineName, createOperationParameters);
        return this
            .client
            .<PipelineInner, PipelineInner>getLroResult(
                mono, this.client.getHttpPipeline(), PipelineInner.class, PipelineInner.class, Context.NONE);
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, pipelineName, createOperationParameters, context);
        return this
            .client
            .<PipelineInner, PipelineInner>getLroResult(
                mono, this.client.getHttpPipeline(), PipelineInner.class, PipelineInner.class, context);
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdate(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, pipelineName, createOperationParameters).getSyncPoller();
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdate(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, pipelineName, createOperationParameters, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> createOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, pipelineName, createOperationParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> createOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, pipelineName, createOperationParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner createOrUpdate(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters) {
        return createOrUpdateAsync(resourceGroupName, pipelineName, createOperationParameters).block();
    }

    /**
     * Creates or updates an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param createOperationParameters The request payload to create the Azure Pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner createOrUpdate(
        String resourceGroupName, String pipelineName, PipelineInner createOperationParameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, pipelineName, createOperationParameters, context).block();
    }

    /**
     * Gets an existing Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing Azure Pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PipelineInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String pipelineName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            pipelineName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets an existing Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing Azure Pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PipelineInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String pipelineName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                pipelineName,
                accept,
                context);
    }

    /**
     * Gets an existing Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing Azure Pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> getByResourceGroupAsync(String resourceGroupName, String pipelineName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, pipelineName)
            .flatMap(
                (Response<PipelineInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets an existing Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing Azure Pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner getByResourceGroup(String resourceGroupName, String pipelineName) {
        return getByResourceGroupAsync(resourceGroupName, pipelineName).block();
    }

    /**
     * Gets an existing Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource in ARM.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing Azure Pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PipelineInner> getByResourceGroupWithResponse(
        String resourceGroupName, String pipelineName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, pipelineName, context).block();
    }

    /**
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PipelineInner>> updateWithResponseAsync(
        String resourceGroupName, String pipelineName, PipelineUpdateParameters updateOperationParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (updateOperationParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter updateOperationParameters is required and cannot be null."));
        } else {
            updateOperationParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            pipelineName,
                            updateOperationParameters,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PipelineInner>> updateWithResponseAsync(
        String resourceGroupName,
        String pipelineName,
        PipelineUpdateParameters updateOperationParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (updateOperationParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter updateOperationParameters is required and cannot be null."));
        } else {
            updateOperationParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                pipelineName,
                updateOperationParameters,
                accept,
                context);
    }

    /**
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> updateAsync(
        String resourceGroupName, String pipelineName, PipelineUpdateParameters updateOperationParameters) {
        return updateWithResponseAsync(resourceGroupName, pipelineName, updateOperationParameters)
            .flatMap(
                (Response<PipelineInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner update(
        String resourceGroupName, String pipelineName, PipelineUpdateParameters updateOperationParameters) {
        return updateAsync(resourceGroupName, pipelineName, updateOperationParameters).block();
    }

    /**
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure DevOps Pipeline used to configure Continuous Integration (CI) &amp; Continuous Delivery (CD) for
     *     Azure resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PipelineInner> updateWithResponse(
        String resourceGroupName,
        String pipelineName,
        PipelineUpdateParameters updateOperationParameters,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, pipelineName, updateOperationParameters, context).block();
    }

    /**
     * Deletes an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String pipelineName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            pipelineName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String pipelineName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                pipelineName,
                accept,
                context);
    }

    /**
     * Deletes an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String pipelineName) {
        return deleteWithResponseAsync(resourceGroupName, pipelineName).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String pipelineName) {
        deleteAsync(resourceGroupName, pipelineName).block();
    }

    /**
     * Deletes an Azure Pipeline.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param pipelineName The name of the Azure Pipeline resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String pipelineName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, pipelineName, context).block();
    }

    /**
     * Lists all Azure Pipelines under the specified resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists all Azure Pipelines under the specified resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all Azure Pipelines under the specified resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all Azure Pipelines under the specified resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all Azure Pipelines under the specified resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Lists all Azure Pipelines under the specified resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Lists all Azure Pipelines under the specified subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists all Azure Pipelines under the specified subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all Azure Pipelines under the specified subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all Azure Pipelines under the specified subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all Azure Pipelines under the specified subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Lists all Azure Pipelines under the specified subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a request to list all Azure Pipelines under a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listBySubscriptionNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
