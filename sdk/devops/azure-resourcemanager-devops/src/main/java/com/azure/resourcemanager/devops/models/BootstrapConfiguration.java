// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Configuration used to bootstrap a Pipeline. */
@Fluent
public final class BootstrapConfiguration {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BootstrapConfiguration.class);

    /*
     * Repository containing the source code for the pipeline.
     */
    @JsonProperty(value = "repository")
    private CodeRepository repository;

    /*
     * Template used to bootstrap the pipeline.
     */
    @JsonProperty(value = "template", required = true)
    private PipelineTemplate template;

    /**
     * Get the repository property: Repository containing the source code for the pipeline.
     *
     * @return the repository value.
     */
    public CodeRepository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: Repository containing the source code for the pipeline.
     *
     * @param repository the repository value to set.
     * @return the BootstrapConfiguration object itself.
     */
    public BootstrapConfiguration withRepository(CodeRepository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the template property: Template used to bootstrap the pipeline.
     *
     * @return the template value.
     */
    public PipelineTemplate template() {
        return this.template;
    }

    /**
     * Set the template property: Template used to bootstrap the pipeline.
     *
     * @param template the template value to set.
     * @return the BootstrapConfiguration object itself.
     */
    public BootstrapConfiguration withTemplate(PipelineTemplate template) {
        this.template = template;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repository() != null) {
            repository().validate();
        }
        if (template() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property template in model BootstrapConfiguration"));
        } else {
            template().validate();
        }
    }
}
