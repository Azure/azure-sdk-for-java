// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Template used to bootstrap the pipeline. */
@Fluent
public final class PipelineTemplate {
    /*
     * Unique identifier of the pipeline template.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * Dictionary of input parameters used in the pipeline template.
     */
    @JsonProperty(value = "parameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> parameters;

    /**
     * Get the id property: Unique identifier of the pipeline template.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique identifier of the pipeline template.
     *
     * @param id the id value to set.
     * @return the PipelineTemplate object itself.
     */
    public PipelineTemplate withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the parameters property: Dictionary of input parameters used in the pipeline template.
     *
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Dictionary of input parameters used in the pipeline template.
     *
     * @param parameters the parameters value to set.
     * @return the PipelineTemplate object itself.
     */
    public PipelineTemplate withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property id in model PipelineTemplate"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineTemplate.class);
}
