// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Representation of a pipeline template input parameter. */
@Fluent
public final class InputDescriptor {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InputDescriptor.class);

    /*
     * Identifier of the input parameter.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * Description of the input parameter.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Data type of the value of the input parameter.
     */
    @JsonProperty(value = "type", required = true)
    private InputDataType type;

    /*
     * List of possible values for the input parameter.
     */
    @JsonProperty(value = "possibleValues")
    private List<InputValue> possibleValues;

    /**
     * Get the id property: Identifier of the input parameter.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Identifier of the input parameter.
     *
     * @param id the id value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the description property: Description of the input parameter.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the input parameter.
     *
     * @param description the description value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the type property: Data type of the value of the input parameter.
     *
     * @return the type value.
     */
    public InputDataType type() {
        return this.type;
    }

    /**
     * Set the type property: Data type of the value of the input parameter.
     *
     * @param type the type value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withType(InputDataType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the possibleValues property: List of possible values for the input parameter.
     *
     * @return the possibleValues value.
     */
    public List<InputValue> possibleValues() {
        return this.possibleValues;
    }

    /**
     * Set the possibleValues property: List of possible values for the input parameter.
     *
     * @param possibleValues the possibleValues value to set.
     * @return the InputDescriptor object itself.
     */
    public InputDescriptor withPossibleValues(List<InputValue> possibleValues) {
        this.possibleValues = possibleValues;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property id in model InputDescriptor"));
        }
        if (type() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property type in model InputDescriptor"));
        }
        if (possibleValues() != null) {
            possibleValues().forEach(e -> e.validate());
        }
    }
}
