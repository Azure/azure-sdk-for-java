// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devops.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devops.DevopsManager;
import com.azure.resourcemanager.devops.fluent.models.PipelineInner;
import com.azure.resourcemanager.devops.models.BootstrapConfiguration;
import com.azure.resourcemanager.devops.models.OrganizationReference;
import com.azure.resourcemanager.devops.models.Pipeline;
import com.azure.resourcemanager.devops.models.PipelineUpdateParameters;
import com.azure.resourcemanager.devops.models.ProjectReference;
import java.util.Collections;
import java.util.Map;

public final class PipelineImpl implements Pipeline, Pipeline.Definition, Pipeline.Update {
    private PipelineInner innerObject;

    private final DevopsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Integer pipelineId() {
        return this.innerModel().pipelineId();
    }

    public OrganizationReference organization() {
        return this.innerModel().organization();
    }

    public ProjectReference project() {
        return this.innerModel().project();
    }

    public BootstrapConfiguration bootstrapConfiguration() {
        return this.innerModel().bootstrapConfiguration();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public PipelineInner innerModel() {
        return this.innerObject;
    }

    private DevopsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String pipelineName;

    private PipelineUpdateParameters updateUpdateOperationParameters;

    public PipelineImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Pipeline create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .createOrUpdate(resourceGroupName, pipelineName, this.innerModel(), Context.NONE);
        return this;
    }

    public Pipeline create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .createOrUpdate(resourceGroupName, pipelineName, this.innerModel(), context);
        return this;
    }

    PipelineImpl(String name, DevopsManager serviceManager) {
        this.innerObject = new PipelineInner();
        this.serviceManager = serviceManager;
        this.pipelineName = name;
    }

    public PipelineImpl update() {
        this.updateUpdateOperationParameters = new PipelineUpdateParameters();
        return this;
    }

    public Pipeline apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .updateWithResponse(resourceGroupName, pipelineName, updateUpdateOperationParameters, Context.NONE)
                .getValue();
        return this;
    }

    public Pipeline apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .updateWithResponse(resourceGroupName, pipelineName, updateUpdateOperationParameters, context)
                .getValue();
        return this;
    }

    PipelineImpl(PipelineInner innerObject, DevopsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.pipelineName = Utils.getValueFromIdByName(innerObject.id(), "pipelines");
    }

    public Pipeline refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .getByResourceGroupWithResponse(resourceGroupName, pipelineName, Context.NONE)
                .getValue();
        return this;
    }

    public Pipeline refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPipelines()
                .getByResourceGroupWithResponse(resourceGroupName, pipelineName, context)
                .getValue();
        return this;
    }

    public PipelineImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public PipelineImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public PipelineImpl withOrganization(OrganizationReference organization) {
        this.innerModel().withOrganization(organization);
        return this;
    }

    public PipelineImpl withProject(ProjectReference project) {
        this.innerModel().withProject(project);
        return this;
    }

    public PipelineImpl withBootstrapConfiguration(BootstrapConfiguration bootstrapConfiguration) {
        this.innerModel().withBootstrapConfiguration(bootstrapConfiguration);
        return this;
    }

    public PipelineImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateUpdateOperationParameters.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
