// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ComputeProfile;
import com.azure.resourcemanager.computefleet.models.EvictionPolicy;
import com.azure.resourcemanager.computefleet.models.FleetProperties;
import com.azure.resourcemanager.computefleet.models.RegularPriorityAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.RegularPriorityProfile;
import com.azure.resourcemanager.computefleet.models.SpotAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.SpotPriorityProfile;
import com.azure.resourcemanager.computefleet.models.VmSizeProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FleetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"spotPriorityProfile\":{\"capacity\":375105800,\"minCapacity\":1344443621,\"maxPricePerVM\":50.506181162870455,\"evictionPolicy\":\"Deallocate\",\"allocationStrategy\":\"CapacityOptimized\",\"maintain\":true},\"regularPriorityProfile\":{\"capacity\":1441176241,\"minCapacity\":1286342154,\"allocationStrategy\":\"Prioritized\"},\"vmSizesProfile\":[{\"name\":\"aolthqtrg\",\"rank\":677143395},{\"name\":\"pfzfsinzgvfc\",\"rank\":751944111}],\"computeProfile\":{\"baseVirtualMachineProfile\":\"datazoxxjtf\",\"computeApiVersion\":\"luwfzitonpeqfpjk\",\"platformFaultDomainCount\":1383266559}}")
            .toObject(FleetProperties.class);
        Assertions.assertEquals(375105800, model.spotPriorityProfile().capacity());
        Assertions.assertEquals(1344443621, model.spotPriorityProfile().minCapacity());
        Assertions.assertEquals(50.506181162870455D, model.spotPriorityProfile().maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.spotPriorityProfile().evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED,
            model.spotPriorityProfile().allocationStrategy());
        Assertions.assertEquals(true, model.spotPriorityProfile().maintain());
        Assertions.assertEquals(1441176241, model.regularPriorityProfile().capacity());
        Assertions.assertEquals(1286342154, model.regularPriorityProfile().minCapacity());
        Assertions.assertEquals(RegularPriorityAllocationStrategy.PRIORITIZED,
            model.regularPriorityProfile().allocationStrategy());
        Assertions.assertEquals("aolthqtrg", model.vmSizesProfile().get(0).name());
        Assertions.assertEquals(677143395, model.vmSizesProfile().get(0).rank());
        Assertions.assertEquals("luwfzitonpeqfpjk", model.computeProfile().computeApiVersion());
        Assertions.assertEquals(1383266559, model.computeProfile().platformFaultDomainCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetProperties model = new FleetProperties()
            .withSpotPriorityProfile(new SpotPriorityProfile().withCapacity(375105800)
                .withMinCapacity(1344443621)
                .withMaxPricePerVM(50.506181162870455D)
                .withEvictionPolicy(EvictionPolicy.DEALLOCATE)
                .withAllocationStrategy(SpotAllocationStrategy.CAPACITY_OPTIMIZED)
                .withMaintain(true))
            .withRegularPriorityProfile(new RegularPriorityProfile().withCapacity(1441176241)
                .withMinCapacity(1286342154)
                .withAllocationStrategy(RegularPriorityAllocationStrategy.PRIORITIZED))
            .withVmSizesProfile(Arrays.asList(new VmSizeProfile().withName("aolthqtrg").withRank(677143395),
                new VmSizeProfile().withName("pfzfsinzgvfc").withRank(751944111)))
            .withComputeProfile(new ComputeProfile().withBaseVirtualMachineProfile("datazoxxjtf")
                .withComputeApiVersion("luwfzitonpeqfpjk")
                .withPlatformFaultDomainCount(1383266559));
        model = BinaryData.fromObject(model).toObject(FleetProperties.class);
        Assertions.assertEquals(375105800, model.spotPriorityProfile().capacity());
        Assertions.assertEquals(1344443621, model.spotPriorityProfile().minCapacity());
        Assertions.assertEquals(50.506181162870455D, model.spotPriorityProfile().maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.spotPriorityProfile().evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED,
            model.spotPriorityProfile().allocationStrategy());
        Assertions.assertEquals(true, model.spotPriorityProfile().maintain());
        Assertions.assertEquals(1441176241, model.regularPriorityProfile().capacity());
        Assertions.assertEquals(1286342154, model.regularPriorityProfile().minCapacity());
        Assertions.assertEquals(RegularPriorityAllocationStrategy.PRIORITIZED,
            model.regularPriorityProfile().allocationStrategy());
        Assertions.assertEquals("aolthqtrg", model.vmSizesProfile().get(0).name());
        Assertions.assertEquals(677143395, model.vmSizesProfile().get(0).rank());
        Assertions.assertEquals("luwfzitonpeqfpjk", model.computeProfile().computeApiVersion());
        Assertions.assertEquals(1383266559, model.computeProfile().platformFaultDomainCount());
    }
}
