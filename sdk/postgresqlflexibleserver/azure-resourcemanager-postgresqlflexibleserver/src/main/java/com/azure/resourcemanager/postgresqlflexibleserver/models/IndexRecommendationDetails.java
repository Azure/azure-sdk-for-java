// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Recommendation details for the recommended action.
 */
@Fluent
public final class IndexRecommendationDetails implements JsonSerializable<IndexRecommendationDetails> {
    /*
     * Database name.
     */
    private String databaseName;

    /*
     * Schema name.
     */
    private String schema;

    /*
     * Table name.
     */
    private String table;

    /*
     * Index type.
     */
    private String indexType;

    /*
     * Index name.
     */
    private String indexName;

    /*
     * Index columns.
     */
    private List<String> indexColumns;

    /*
     * Index included columns.
     */
    private List<String> includedColumns;

    /**
     * Creates an instance of IndexRecommendationDetails class.
     */
    public IndexRecommendationDetails() {
    }

    /**
     * Get the databaseName property: Database name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Database name.
     * 
     * @param databaseName the databaseName value to set.
     * @return the IndexRecommendationDetails object itself.
     */
    public IndexRecommendationDetails withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the schema property: Schema name.
     * 
     * @return the schema value.
     */
    public String schema() {
        return this.schema;
    }

    /**
     * Set the schema property: Schema name.
     * 
     * @param schema the schema value to set.
     * @return the IndexRecommendationDetails object itself.
     */
    public IndexRecommendationDetails withSchema(String schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the table property: Table name.
     * 
     * @return the table value.
     */
    public String table() {
        return this.table;
    }

    /**
     * Set the table property: Table name.
     * 
     * @param table the table value to set.
     * @return the IndexRecommendationDetails object itself.
     */
    public IndexRecommendationDetails withTable(String table) {
        this.table = table;
        return this;
    }

    /**
     * Get the indexType property: Index type.
     * 
     * @return the indexType value.
     */
    public String indexType() {
        return this.indexType;
    }

    /**
     * Set the indexType property: Index type.
     * 
     * @param indexType the indexType value to set.
     * @return the IndexRecommendationDetails object itself.
     */
    public IndexRecommendationDetails withIndexType(String indexType) {
        this.indexType = indexType;
        return this;
    }

    /**
     * Get the indexName property: Index name.
     * 
     * @return the indexName value.
     */
    public String indexName() {
        return this.indexName;
    }

    /**
     * Set the indexName property: Index name.
     * 
     * @param indexName the indexName value to set.
     * @return the IndexRecommendationDetails object itself.
     */
    public IndexRecommendationDetails withIndexName(String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * Get the indexColumns property: Index columns.
     * 
     * @return the indexColumns value.
     */
    public List<String> indexColumns() {
        return this.indexColumns;
    }

    /**
     * Set the indexColumns property: Index columns.
     * 
     * @param indexColumns the indexColumns value to set.
     * @return the IndexRecommendationDetails object itself.
     */
    public IndexRecommendationDetails withIndexColumns(List<String> indexColumns) {
        this.indexColumns = indexColumns;
        return this;
    }

    /**
     * Get the includedColumns property: Index included columns.
     * 
     * @return the includedColumns value.
     */
    public List<String> includedColumns() {
        return this.includedColumns;
    }

    /**
     * Set the includedColumns property: Index included columns.
     * 
     * @param includedColumns the includedColumns value to set.
     * @return the IndexRecommendationDetails object itself.
     */
    public IndexRecommendationDetails withIncludedColumns(List<String> includedColumns) {
        this.includedColumns = includedColumns;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("schema", this.schema);
        jsonWriter.writeStringField("table", this.table);
        jsonWriter.writeStringField("indexType", this.indexType);
        jsonWriter.writeStringField("indexName", this.indexName);
        jsonWriter.writeArrayField("indexColumns", this.indexColumns, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("includedColumns", this.includedColumns,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexRecommendationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexRecommendationDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IndexRecommendationDetails.
     */
    public static IndexRecommendationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexRecommendationDetails deserializedIndexRecommendationDetails = new IndexRecommendationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedIndexRecommendationDetails.databaseName = reader.getString();
                } else if ("schema".equals(fieldName)) {
                    deserializedIndexRecommendationDetails.schema = reader.getString();
                } else if ("table".equals(fieldName)) {
                    deserializedIndexRecommendationDetails.table = reader.getString();
                } else if ("indexType".equals(fieldName)) {
                    deserializedIndexRecommendationDetails.indexType = reader.getString();
                } else if ("indexName".equals(fieldName)) {
                    deserializedIndexRecommendationDetails.indexName = reader.getString();
                } else if ("indexColumns".equals(fieldName)) {
                    List<String> indexColumns = reader.readArray(reader1 -> reader1.getString());
                    deserializedIndexRecommendationDetails.indexColumns = indexColumns;
                } else if ("includedColumns".equals(fieldName)) {
                    List<String> includedColumns = reader.readArray(reader1 -> reader1.getString());
                    deserializedIndexRecommendationDetails.includedColumns = includedColumns;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexRecommendationDetails;
        });
    }
}
