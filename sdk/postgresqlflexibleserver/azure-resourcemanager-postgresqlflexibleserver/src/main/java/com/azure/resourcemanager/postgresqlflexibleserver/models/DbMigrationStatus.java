// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Migration status of an individual database.
 */
@Fluent
public final class DbMigrationStatus {
    /*
     * Name of the database
     */
    @JsonProperty(value = "databaseName")
    private String databaseName;

    /*
     * Migration db state of an individual database
     */
    @JsonProperty(value = "migrationState")
    private MigrationDbState migrationState;

    /*
     * Migration operation of an individual database
     */
    @JsonProperty(value = "migrationOperation")
    private String migrationOperation;

    /*
     * Start date-time of a migration state
     */
    @JsonProperty(value = "startedOn")
    private OffsetDateTime startedOn;

    /*
     * End date-time of a migration state
     */
    @JsonProperty(value = "endedOn")
    private OffsetDateTime endedOn;

    /*
     * Number of tables queued for the migration of a DB
     */
    @JsonProperty(value = "fullLoadQueuedTables")
    private Integer fullLoadQueuedTables;

    /*
     * Number of tables errored out during the migration of a DB
     */
    @JsonProperty(value = "fullLoadErroredTables")
    private Integer fullLoadErroredTables;

    /*
     * Number of tables loading during the migration of a DB
     */
    @JsonProperty(value = "fullLoadLoadingTables")
    private Integer fullLoadLoadingTables;

    /*
     * Number of tables loaded during the migration of a DB
     */
    @JsonProperty(value = "fullLoadCompletedTables")
    private Integer fullLoadCompletedTables;

    /*
     * CDC update counter
     */
    @JsonProperty(value = "cdcUpdateCounter")
    private Integer cdcUpdateCounter;

    /*
     * CDC delete counter
     */
    @JsonProperty(value = "cdcDeleteCounter")
    private Integer cdcDeleteCounter;

    /*
     * CDC insert counter
     */
    @JsonProperty(value = "cdcInsertCounter")
    private Integer cdcInsertCounter;

    /*
     * CDC applied changes counter
     */
    @JsonProperty(value = "appliedChanges")
    private Integer appliedChanges;

    /*
     * CDC incoming changes counter
     */
    @JsonProperty(value = "incomingChanges")
    private Integer incomingChanges;

    /*
     * Lag in seconds between source and target during online phase
     */
    @JsonProperty(value = "latency")
    private Integer latency;

    /*
     * Error message, if any, for the migration state
     */
    @JsonProperty(value = "message")
    private String message;

    /**
     * Creates an instance of DbMigrationStatus class.
     */
    public DbMigrationStatus() {
    }

    /**
     * Get the databaseName property: Name of the database.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Name of the database.
     * 
     * @param databaseName the databaseName value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the migrationState property: Migration db state of an individual database.
     * 
     * @return the migrationState value.
     */
    public MigrationDbState migrationState() {
        return this.migrationState;
    }

    /**
     * Set the migrationState property: Migration db state of an individual database.
     * 
     * @param migrationState the migrationState value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withMigrationState(MigrationDbState migrationState) {
        this.migrationState = migrationState;
        return this;
    }

    /**
     * Get the migrationOperation property: Migration operation of an individual database.
     * 
     * @return the migrationOperation value.
     */
    public String migrationOperation() {
        return this.migrationOperation;
    }

    /**
     * Set the migrationOperation property: Migration operation of an individual database.
     * 
     * @param migrationOperation the migrationOperation value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withMigrationOperation(String migrationOperation) {
        this.migrationOperation = migrationOperation;
        return this;
    }

    /**
     * Get the startedOn property: Start date-time of a migration state.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Set the startedOn property: Start date-time of a migration state.
     * 
     * @param startedOn the startedOn value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withStartedOn(OffsetDateTime startedOn) {
        this.startedOn = startedOn;
        return this;
    }

    /**
     * Get the endedOn property: End date-time of a migration state.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Set the endedOn property: End date-time of a migration state.
     * 
     * @param endedOn the endedOn value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withEndedOn(OffsetDateTime endedOn) {
        this.endedOn = endedOn;
        return this;
    }

    /**
     * Get the fullLoadQueuedTables property: Number of tables queued for the migration of a DB.
     * 
     * @return the fullLoadQueuedTables value.
     */
    public Integer fullLoadQueuedTables() {
        return this.fullLoadQueuedTables;
    }

    /**
     * Set the fullLoadQueuedTables property: Number of tables queued for the migration of a DB.
     * 
     * @param fullLoadQueuedTables the fullLoadQueuedTables value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withFullLoadQueuedTables(Integer fullLoadQueuedTables) {
        this.fullLoadQueuedTables = fullLoadQueuedTables;
        return this;
    }

    /**
     * Get the fullLoadErroredTables property: Number of tables errored out during the migration of a DB.
     * 
     * @return the fullLoadErroredTables value.
     */
    public Integer fullLoadErroredTables() {
        return this.fullLoadErroredTables;
    }

    /**
     * Set the fullLoadErroredTables property: Number of tables errored out during the migration of a DB.
     * 
     * @param fullLoadErroredTables the fullLoadErroredTables value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withFullLoadErroredTables(Integer fullLoadErroredTables) {
        this.fullLoadErroredTables = fullLoadErroredTables;
        return this;
    }

    /**
     * Get the fullLoadLoadingTables property: Number of tables loading during the migration of a DB.
     * 
     * @return the fullLoadLoadingTables value.
     */
    public Integer fullLoadLoadingTables() {
        return this.fullLoadLoadingTables;
    }

    /**
     * Set the fullLoadLoadingTables property: Number of tables loading during the migration of a DB.
     * 
     * @param fullLoadLoadingTables the fullLoadLoadingTables value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withFullLoadLoadingTables(Integer fullLoadLoadingTables) {
        this.fullLoadLoadingTables = fullLoadLoadingTables;
        return this;
    }

    /**
     * Get the fullLoadCompletedTables property: Number of tables loaded during the migration of a DB.
     * 
     * @return the fullLoadCompletedTables value.
     */
    public Integer fullLoadCompletedTables() {
        return this.fullLoadCompletedTables;
    }

    /**
     * Set the fullLoadCompletedTables property: Number of tables loaded during the migration of a DB.
     * 
     * @param fullLoadCompletedTables the fullLoadCompletedTables value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withFullLoadCompletedTables(Integer fullLoadCompletedTables) {
        this.fullLoadCompletedTables = fullLoadCompletedTables;
        return this;
    }

    /**
     * Get the cdcUpdateCounter property: CDC update counter.
     * 
     * @return the cdcUpdateCounter value.
     */
    public Integer cdcUpdateCounter() {
        return this.cdcUpdateCounter;
    }

    /**
     * Set the cdcUpdateCounter property: CDC update counter.
     * 
     * @param cdcUpdateCounter the cdcUpdateCounter value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withCdcUpdateCounter(Integer cdcUpdateCounter) {
        this.cdcUpdateCounter = cdcUpdateCounter;
        return this;
    }

    /**
     * Get the cdcDeleteCounter property: CDC delete counter.
     * 
     * @return the cdcDeleteCounter value.
     */
    public Integer cdcDeleteCounter() {
        return this.cdcDeleteCounter;
    }

    /**
     * Set the cdcDeleteCounter property: CDC delete counter.
     * 
     * @param cdcDeleteCounter the cdcDeleteCounter value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withCdcDeleteCounter(Integer cdcDeleteCounter) {
        this.cdcDeleteCounter = cdcDeleteCounter;
        return this;
    }

    /**
     * Get the cdcInsertCounter property: CDC insert counter.
     * 
     * @return the cdcInsertCounter value.
     */
    public Integer cdcInsertCounter() {
        return this.cdcInsertCounter;
    }

    /**
     * Set the cdcInsertCounter property: CDC insert counter.
     * 
     * @param cdcInsertCounter the cdcInsertCounter value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withCdcInsertCounter(Integer cdcInsertCounter) {
        this.cdcInsertCounter = cdcInsertCounter;
        return this;
    }

    /**
     * Get the appliedChanges property: CDC applied changes counter.
     * 
     * @return the appliedChanges value.
     */
    public Integer appliedChanges() {
        return this.appliedChanges;
    }

    /**
     * Set the appliedChanges property: CDC applied changes counter.
     * 
     * @param appliedChanges the appliedChanges value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withAppliedChanges(Integer appliedChanges) {
        this.appliedChanges = appliedChanges;
        return this;
    }

    /**
     * Get the incomingChanges property: CDC incoming changes counter.
     * 
     * @return the incomingChanges value.
     */
    public Integer incomingChanges() {
        return this.incomingChanges;
    }

    /**
     * Set the incomingChanges property: CDC incoming changes counter.
     * 
     * @param incomingChanges the incomingChanges value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withIncomingChanges(Integer incomingChanges) {
        this.incomingChanges = incomingChanges;
        return this;
    }

    /**
     * Get the latency property: Lag in seconds between source and target during online phase.
     * 
     * @return the latency value.
     */
    public Integer latency() {
        return this.latency;
    }

    /**
     * Set the latency property: Lag in seconds between source and target during online phase.
     * 
     * @param latency the latency value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withLatency(Integer latency) {
        this.latency = latency;
        return this;
    }

    /**
     * Get the message property: Error message, if any, for the migration state.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Error message, if any, for the migration state.
     * 
     * @param message the message value to set.
     * @return the DbMigrationStatus object itself.
     */
    public DbMigrationStatus withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
