// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Stores workload information for the recommended action.
 */
@Fluent
public final class IndexRecommendationResourcePropertiesAnalyzedWorkload
    implements JsonSerializable<IndexRecommendationResourcePropertiesAnalyzedWorkload> {
    /*
     * Workload start time in UTC date-time string format.
     */
    private OffsetDateTime startTime;

    /*
     * Workload end time in UTC date-time string format.
     */
    private OffsetDateTime endTime;

    /*
     * Workload query examined count. For DROP INDEX will be 0.
     */
    private Integer queryCount;

    /**
     * Creates an instance of IndexRecommendationResourcePropertiesAnalyzedWorkload class.
     */
    public IndexRecommendationResourcePropertiesAnalyzedWorkload() {
    }

    /**
     * Get the startTime property: Workload start time in UTC date-time string format.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Workload start time in UTC date-time string format.
     * 
     * @param startTime the startTime value to set.
     * @return the IndexRecommendationResourcePropertiesAnalyzedWorkload object itself.
     */
    public IndexRecommendationResourcePropertiesAnalyzedWorkload withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Workload end time in UTC date-time string format.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Workload end time in UTC date-time string format.
     * 
     * @param endTime the endTime value to set.
     * @return the IndexRecommendationResourcePropertiesAnalyzedWorkload object itself.
     */
    public IndexRecommendationResourcePropertiesAnalyzedWorkload withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the queryCount property: Workload query examined count. For DROP INDEX will be 0.
     * 
     * @return the queryCount value.
     */
    public Integer queryCount() {
        return this.queryCount;
    }

    /**
     * Set the queryCount property: Workload query examined count. For DROP INDEX will be 0.
     * 
     * @param queryCount the queryCount value to set.
     * @return the IndexRecommendationResourcePropertiesAnalyzedWorkload object itself.
     */
    public IndexRecommendationResourcePropertiesAnalyzedWorkload withQueryCount(Integer queryCount) {
        this.queryCount = queryCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeNumberField("queryCount", this.queryCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexRecommendationResourcePropertiesAnalyzedWorkload from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexRecommendationResourcePropertiesAnalyzedWorkload if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IndexRecommendationResourcePropertiesAnalyzedWorkload.
     */
    public static IndexRecommendationResourcePropertiesAnalyzedWorkload fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            IndexRecommendationResourcePropertiesAnalyzedWorkload deserializedIndexRecommendationResourcePropertiesAnalyzedWorkload
                = new IndexRecommendationResourcePropertiesAnalyzedWorkload();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedIndexRecommendationResourcePropertiesAnalyzedWorkload.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedIndexRecommendationResourcePropertiesAnalyzedWorkload.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("queryCount".equals(fieldName)) {
                    deserializedIndexRecommendationResourcePropertiesAnalyzedWorkload.queryCount
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexRecommendationResourcePropertiesAnalyzedWorkload;
        });
    }
}
