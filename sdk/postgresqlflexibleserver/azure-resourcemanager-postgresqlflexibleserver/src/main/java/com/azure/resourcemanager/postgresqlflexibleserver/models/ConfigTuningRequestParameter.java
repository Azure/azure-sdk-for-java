// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Config tuning request parameters.
 */
@Fluent
public final class ConfigTuningRequestParameter implements JsonSerializable<ConfigTuningRequestParameter> {
    /*
     * The name of server.
     */
    private String serverName;

    /*
     * Indicates whether PG should be restarted during a tuning session.
     */
    private Boolean allowServerRestarts;

    /*
     * The target metric the tuning session is trying to improve.
     */
    private String targetImprovementMetric;

    /*
     * The mode with which the feature will be enabled.
     */
    private Boolean configTuningUsageMode;

    /**
     * Creates an instance of ConfigTuningRequestParameter class.
     */
    public ConfigTuningRequestParameter() {
    }

    /**
     * Get the serverName property: The name of server.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set the serverName property: The name of server.
     * 
     * @param serverName the serverName value to set.
     * @return the ConfigTuningRequestParameter object itself.
     */
    public ConfigTuningRequestParameter withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get the allowServerRestarts property: Indicates whether PG should be restarted during a tuning session.
     * 
     * @return the allowServerRestarts value.
     */
    public Boolean allowServerRestarts() {
        return this.allowServerRestarts;
    }

    /**
     * Set the allowServerRestarts property: Indicates whether PG should be restarted during a tuning session.
     * 
     * @param allowServerRestarts the allowServerRestarts value to set.
     * @return the ConfigTuningRequestParameter object itself.
     */
    public ConfigTuningRequestParameter withAllowServerRestarts(Boolean allowServerRestarts) {
        this.allowServerRestarts = allowServerRestarts;
        return this;
    }

    /**
     * Get the targetImprovementMetric property: The target metric the tuning session is trying to improve.
     * 
     * @return the targetImprovementMetric value.
     */
    public String targetImprovementMetric() {
        return this.targetImprovementMetric;
    }

    /**
     * Set the targetImprovementMetric property: The target metric the tuning session is trying to improve.
     * 
     * @param targetImprovementMetric the targetImprovementMetric value to set.
     * @return the ConfigTuningRequestParameter object itself.
     */
    public ConfigTuningRequestParameter withTargetImprovementMetric(String targetImprovementMetric) {
        this.targetImprovementMetric = targetImprovementMetric;
        return this;
    }

    /**
     * Get the configTuningUsageMode property: The mode with which the feature will be enabled.
     * 
     * @return the configTuningUsageMode value.
     */
    public Boolean configTuningUsageMode() {
        return this.configTuningUsageMode;
    }

    /**
     * Set the configTuningUsageMode property: The mode with which the feature will be enabled.
     * 
     * @param configTuningUsageMode the configTuningUsageMode value to set.
     * @return the ConfigTuningRequestParameter object itself.
     */
    public ConfigTuningRequestParameter withConfigTuningUsageMode(Boolean configTuningUsageMode) {
        this.configTuningUsageMode = configTuningUsageMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverName", this.serverName);
        jsonWriter.writeBooleanField("allowServerRestarts", this.allowServerRestarts);
        jsonWriter.writeStringField("targetImprovementMetric", this.targetImprovementMetric);
        jsonWriter.writeBooleanField("configTuningUsageMode", this.configTuningUsageMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigTuningRequestParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigTuningRequestParameter if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigTuningRequestParameter.
     */
    public static ConfigTuningRequestParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigTuningRequestParameter deserializedConfigTuningRequestParameter = new ConfigTuningRequestParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverName".equals(fieldName)) {
                    deserializedConfigTuningRequestParameter.serverName = reader.getString();
                } else if ("allowServerRestarts".equals(fieldName)) {
                    deserializedConfigTuningRequestParameter.allowServerRestarts
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("targetImprovementMetric".equals(fieldName)) {
                    deserializedConfigTuningRequestParameter.targetImprovementMetric = reader.getString();
                } else if ("configTuningUsageMode".equals(fieldName)) {
                    deserializedConfigTuningRequestParameter.configTuningUsageMode
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigTuningRequestParameter;
        });
    }
}
