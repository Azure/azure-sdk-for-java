// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Stores property that features impact on some metric if this recommended action is applied.
 */
@Fluent
public final class ImpactRecord implements JsonSerializable<ImpactRecord> {
    /*
     * Dimension name
     */
    private String dimensionName;

    /*
     * Dimension unit
     */
    private String unit;

    /*
     * Optional property that can be used to store the QueryId if the metric is for a specific query.
     */
    private Long queryId;

    /*
     * Absolute value
     */
    private Double absoluteValue;

    /**
     * Creates an instance of ImpactRecord class.
     */
    public ImpactRecord() {
    }

    /**
     * Get the dimensionName property: Dimension name.
     * 
     * @return the dimensionName value.
     */
    public String dimensionName() {
        return this.dimensionName;
    }

    /**
     * Set the dimensionName property: Dimension name.
     * 
     * @param dimensionName the dimensionName value to set.
     * @return the ImpactRecord object itself.
     */
    public ImpactRecord withDimensionName(String dimensionName) {
        this.dimensionName = dimensionName;
        return this;
    }

    /**
     * Get the unit property: Dimension unit.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: Dimension unit.
     * 
     * @param unit the unit value to set.
     * @return the ImpactRecord object itself.
     */
    public ImpactRecord withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the queryId property: Optional property that can be used to store the QueryId if the metric is for a specific
     * query.
     * 
     * @return the queryId value.
     */
    public Long queryId() {
        return this.queryId;
    }

    /**
     * Set the queryId property: Optional property that can be used to store the QueryId if the metric is for a specific
     * query.
     * 
     * @param queryId the queryId value to set.
     * @return the ImpactRecord object itself.
     */
    public ImpactRecord withQueryId(Long queryId) {
        this.queryId = queryId;
        return this;
    }

    /**
     * Get the absoluteValue property: Absolute value.
     * 
     * @return the absoluteValue value.
     */
    public Double absoluteValue() {
        return this.absoluteValue;
    }

    /**
     * Set the absoluteValue property: Absolute value.
     * 
     * @param absoluteValue the absoluteValue value to set.
     * @return the ImpactRecord object itself.
     */
    public ImpactRecord withAbsoluteValue(Double absoluteValue) {
        this.absoluteValue = absoluteValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dimensionName", this.dimensionName);
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeNumberField("queryId", this.queryId);
        jsonWriter.writeNumberField("absoluteValue", this.absoluteValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImpactRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImpactRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImpactRecord.
     */
    public static ImpactRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImpactRecord deserializedImpactRecord = new ImpactRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dimensionName".equals(fieldName)) {
                    deserializedImpactRecord.dimensionName = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedImpactRecord.unit = reader.getString();
                } else if ("queryId".equals(fieldName)) {
                    deserializedImpactRecord.queryId = reader.getNullable(JsonReader::getLong);
                } else if ("absoluteValue".equals(fieldName)) {
                    deserializedImpactRecord.absoluteValue = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImpactRecord;
        });
    }
}
