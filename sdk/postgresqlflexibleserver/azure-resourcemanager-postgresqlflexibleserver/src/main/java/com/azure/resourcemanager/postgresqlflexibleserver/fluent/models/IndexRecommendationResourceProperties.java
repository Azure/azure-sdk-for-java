// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ImpactRecord;
import com.azure.resourcemanager.postgresqlflexibleserver.models.IndexRecommendationDetails;
import com.azure.resourcemanager.postgresqlflexibleserver.models.IndexRecommendationResourcePropertiesAnalyzedWorkload;
import com.azure.resourcemanager.postgresqlflexibleserver.models.IndexRecommendationResourcePropertiesImplementationDetails;
import com.azure.resourcemanager.postgresqlflexibleserver.models.RecommendationTypeEnum;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Index recommendation properties.
 */
@Fluent
public final class IndexRecommendationResourceProperties
    implements JsonSerializable<IndexRecommendationResourceProperties> {
    /*
     * Creation time of this recommendation in UTC date-time string format.
     */
    private OffsetDateTime initialRecommendedTime;

    /*
     * The last refresh of this recommendation in UTC date-time string format.
     */
    private OffsetDateTime lastRecommendedTime;

    /*
     * The number of times this recommendation has encountered.
     */
    private Integer timesRecommended;

    /*
     * The ImprovedQueryIds. The list will only be populated for CREATE INDEX recommendations.
     */
    private List<Long> improvedQueryIds;

    /*
     * Reason for this recommendation.
     */
    private String recommendationReason;

    /*
     * Type for this recommendation.
     */
    private RecommendationTypeEnum recommendationType;

    /*
     * Stores implementation details for the recommended action.
     */
    private IndexRecommendationResourcePropertiesImplementationDetails implementationDetails;

    /*
     * Stores workload information for the recommended action.
     */
    private IndexRecommendationResourcePropertiesAnalyzedWorkload analyzedWorkload;

    /*
     * The estimated impact of this recommended action
     */
    private List<ImpactRecord> estimatedImpact;

    /*
     * Stores recommendation details for the recommended action.
     */
    private IndexRecommendationDetails details;

    /**
     * Creates an instance of IndexRecommendationResourceProperties class.
     */
    public IndexRecommendationResourceProperties() {
    }

    /**
     * Get the initialRecommendedTime property: Creation time of this recommendation in UTC date-time string format.
     * 
     * @return the initialRecommendedTime value.
     */
    public OffsetDateTime initialRecommendedTime() {
        return this.initialRecommendedTime;
    }

    /**
     * Set the initialRecommendedTime property: Creation time of this recommendation in UTC date-time string format.
     * 
     * @param initialRecommendedTime the initialRecommendedTime value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties withInitialRecommendedTime(OffsetDateTime initialRecommendedTime) {
        this.initialRecommendedTime = initialRecommendedTime;
        return this;
    }

    /**
     * Get the lastRecommendedTime property: The last refresh of this recommendation in UTC date-time string format.
     * 
     * @return the lastRecommendedTime value.
     */
    public OffsetDateTime lastRecommendedTime() {
        return this.lastRecommendedTime;
    }

    /**
     * Set the lastRecommendedTime property: The last refresh of this recommendation in UTC date-time string format.
     * 
     * @param lastRecommendedTime the lastRecommendedTime value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties withLastRecommendedTime(OffsetDateTime lastRecommendedTime) {
        this.lastRecommendedTime = lastRecommendedTime;
        return this;
    }

    /**
     * Get the timesRecommended property: The number of times this recommendation has encountered.
     * 
     * @return the timesRecommended value.
     */
    public Integer timesRecommended() {
        return this.timesRecommended;
    }

    /**
     * Set the timesRecommended property: The number of times this recommendation has encountered.
     * 
     * @param timesRecommended the timesRecommended value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties withTimesRecommended(Integer timesRecommended) {
        this.timesRecommended = timesRecommended;
        return this;
    }

    /**
     * Get the improvedQueryIds property: The ImprovedQueryIds. The list will only be populated for CREATE INDEX
     * recommendations.
     * 
     * @return the improvedQueryIds value.
     */
    public List<Long> improvedQueryIds() {
        return this.improvedQueryIds;
    }

    /**
     * Set the improvedQueryIds property: The ImprovedQueryIds. The list will only be populated for CREATE INDEX
     * recommendations.
     * 
     * @param improvedQueryIds the improvedQueryIds value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties withImprovedQueryIds(List<Long> improvedQueryIds) {
        this.improvedQueryIds = improvedQueryIds;
        return this;
    }

    /**
     * Get the recommendationReason property: Reason for this recommendation.
     * 
     * @return the recommendationReason value.
     */
    public String recommendationReason() {
        return this.recommendationReason;
    }

    /**
     * Set the recommendationReason property: Reason for this recommendation.
     * 
     * @param recommendationReason the recommendationReason value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties withRecommendationReason(String recommendationReason) {
        this.recommendationReason = recommendationReason;
        return this;
    }

    /**
     * Get the recommendationType property: Type for this recommendation.
     * 
     * @return the recommendationType value.
     */
    public RecommendationTypeEnum recommendationType() {
        return this.recommendationType;
    }

    /**
     * Set the recommendationType property: Type for this recommendation.
     * 
     * @param recommendationType the recommendationType value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties withRecommendationType(RecommendationTypeEnum recommendationType) {
        this.recommendationType = recommendationType;
        return this;
    }

    /**
     * Get the implementationDetails property: Stores implementation details for the recommended action.
     * 
     * @return the implementationDetails value.
     */
    public IndexRecommendationResourcePropertiesImplementationDetails implementationDetails() {
        return this.implementationDetails;
    }

    /**
     * Set the implementationDetails property: Stores implementation details for the recommended action.
     * 
     * @param implementationDetails the implementationDetails value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties
        withImplementationDetails(IndexRecommendationResourcePropertiesImplementationDetails implementationDetails) {
        this.implementationDetails = implementationDetails;
        return this;
    }

    /**
     * Get the analyzedWorkload property: Stores workload information for the recommended action.
     * 
     * @return the analyzedWorkload value.
     */
    public IndexRecommendationResourcePropertiesAnalyzedWorkload analyzedWorkload() {
        return this.analyzedWorkload;
    }

    /**
     * Set the analyzedWorkload property: Stores workload information for the recommended action.
     * 
     * @param analyzedWorkload the analyzedWorkload value to set.
     * @return the IndexRecommendationResourceProperties object itself.
     */
    public IndexRecommendationResourceProperties
        withAnalyzedWorkload(IndexRecommendationResourcePropertiesAnalyzedWorkload analyzedWorkload) {
        this.analyzedWorkload = analyzedWorkload;
        return this;
    }

    /**
     * Get the estimatedImpact property: The estimated impact of this recommended action.
     * 
     * @return the estimatedImpact value.
     */
    public List<ImpactRecord> estimatedImpact() {
        return this.estimatedImpact;
    }

    /**
     * Get the details property: Stores recommendation details for the recommended action.
     * 
     * @return the details value.
     */
    public IndexRecommendationDetails details() {
        return this.details;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (implementationDetails() != null) {
            implementationDetails().validate();
        }
        if (analyzedWorkload() != null) {
            analyzedWorkload().validate();
        }
        if (estimatedImpact() != null) {
            estimatedImpact().forEach(e -> e.validate());
        }
        if (details() != null) {
            details().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("initialRecommendedTime",
            this.initialRecommendedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.initialRecommendedTime));
        jsonWriter.writeStringField("lastRecommendedTime",
            this.lastRecommendedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastRecommendedTime));
        jsonWriter.writeNumberField("timesRecommended", this.timesRecommended);
        jsonWriter.writeArrayField("improvedQueryIds", this.improvedQueryIds,
            (writer, element) -> writer.writeLong(element));
        jsonWriter.writeStringField("recommendationReason", this.recommendationReason);
        jsonWriter.writeStringField("recommendationType",
            this.recommendationType == null ? null : this.recommendationType.toString());
        jsonWriter.writeJsonField("implementationDetails", this.implementationDetails);
        jsonWriter.writeJsonField("analyzedWorkload", this.analyzedWorkload);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexRecommendationResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexRecommendationResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IndexRecommendationResourceProperties.
     */
    public static IndexRecommendationResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexRecommendationResourceProperties deserializedIndexRecommendationResourceProperties
                = new IndexRecommendationResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("initialRecommendedTime".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.initialRecommendedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastRecommendedTime".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.lastRecommendedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timesRecommended".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.timesRecommended
                        = reader.getNullable(JsonReader::getInt);
                } else if ("improvedQueryIds".equals(fieldName)) {
                    List<Long> improvedQueryIds = reader.readArray(reader1 -> reader1.getLong());
                    deserializedIndexRecommendationResourceProperties.improvedQueryIds = improvedQueryIds;
                } else if ("recommendationReason".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.recommendationReason = reader.getString();
                } else if ("recommendationType".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.recommendationType
                        = RecommendationTypeEnum.fromString(reader.getString());
                } else if ("implementationDetails".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.implementationDetails
                        = IndexRecommendationResourcePropertiesImplementationDetails.fromJson(reader);
                } else if ("analyzedWorkload".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.analyzedWorkload
                        = IndexRecommendationResourcePropertiesAnalyzedWorkload.fromJson(reader);
                } else if ("estimatedImpact".equals(fieldName)) {
                    List<ImpactRecord> estimatedImpact = reader.readArray(reader1 -> ImpactRecord.fromJson(reader1));
                    deserializedIndexRecommendationResourceProperties.estimatedImpact = estimatedImpact;
                } else if ("details".equals(fieldName)) {
                    deserializedIndexRecommendationResourceProperties.details
                        = IndexRecommendationDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexRecommendationResourceProperties;
        });
    }
}
