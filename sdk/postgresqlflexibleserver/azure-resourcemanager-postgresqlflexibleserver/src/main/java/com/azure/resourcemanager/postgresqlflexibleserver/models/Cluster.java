// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster properties of a server.
 */
@Fluent
public final class Cluster implements JsonSerializable<Cluster> {
    /*
     * The node count for the cluster.
     */
    private Integer clusterSize;

    /**
     * Creates an instance of Cluster class.
     */
    public Cluster() {
    }

    /**
     * Get the clusterSize property: The node count for the cluster.
     * 
     * @return the clusterSize value.
     */
    public Integer clusterSize() {
        return this.clusterSize;
    }

    /**
     * Set the clusterSize property: The node count for the cluster.
     * 
     * @param clusterSize the clusterSize value to set.
     * @return the Cluster object itself.
     */
    public Cluster withClusterSize(Integer clusterSize) {
        this.clusterSize = clusterSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("clusterSize", this.clusterSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cluster from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cluster if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Cluster.
     */
    public static Cluster fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cluster deserializedCluster = new Cluster();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterSize".equals(fieldName)) {
                    deserializedCluster.clusterSize = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCluster;
        });
    }
}
