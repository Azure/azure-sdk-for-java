// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ImpactRecord;
import com.azure.resourcemanager.postgresqlflexibleserver.models.IndexRecommendationDetails;
import com.azure.resourcemanager.postgresqlflexibleserver.models.IndexRecommendationResourcePropertiesAnalyzedWorkload;
import com.azure.resourcemanager.postgresqlflexibleserver.models.IndexRecommendationResourcePropertiesImplementationDetails;
import com.azure.resourcemanager.postgresqlflexibleserver.models.RecommendationTypeEnum;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Index recommendation properties.
 */
@Immutable
public final class IndexRecommendationResourceInner extends ProxyResource {
    /*
     * Properties of IndexRecommendationResource.
     */
    private IndexRecommendationResourceProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of IndexRecommendationResourceInner class.
     */
    public IndexRecommendationResourceInner() {
    }

    /**
     * Get the innerProperties property: Properties of IndexRecommendationResource.
     * 
     * @return the innerProperties value.
     */
    private IndexRecommendationResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the initialRecommendedTime property: Creation time of this recommendation in UTC date-time string format.
     * 
     * @return the initialRecommendedTime value.
     */
    public OffsetDateTime initialRecommendedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().initialRecommendedTime();
    }

    /**
     * Set the initialRecommendedTime property: Creation time of this recommendation in UTC date-time string format.
     * 
     * @param initialRecommendedTime the initialRecommendedTime value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner withInitialRecommendedTime(OffsetDateTime initialRecommendedTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withInitialRecommendedTime(initialRecommendedTime);
        return this;
    }

    /**
     * Get the lastRecommendedTime property: The last refresh of this recommendation in UTC date-time string format.
     * 
     * @return the lastRecommendedTime value.
     */
    public OffsetDateTime lastRecommendedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastRecommendedTime();
    }

    /**
     * Set the lastRecommendedTime property: The last refresh of this recommendation in UTC date-time string format.
     * 
     * @param lastRecommendedTime the lastRecommendedTime value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner withLastRecommendedTime(OffsetDateTime lastRecommendedTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withLastRecommendedTime(lastRecommendedTime);
        return this;
    }

    /**
     * Get the timesRecommended property: The number of times this recommendation has encountered.
     * 
     * @return the timesRecommended value.
     */
    public Integer timesRecommended() {
        return this.innerProperties() == null ? null : this.innerProperties().timesRecommended();
    }

    /**
     * Set the timesRecommended property: The number of times this recommendation has encountered.
     * 
     * @param timesRecommended the timesRecommended value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner withTimesRecommended(Integer timesRecommended) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withTimesRecommended(timesRecommended);
        return this;
    }

    /**
     * Get the improvedQueryIds property: The ImprovedQueryIds. The list will only be populated for CREATE INDEX
     * recommendations.
     * 
     * @return the improvedQueryIds value.
     */
    public List<Long> improvedQueryIds() {
        return this.innerProperties() == null ? null : this.innerProperties().improvedQueryIds();
    }

    /**
     * Set the improvedQueryIds property: The ImprovedQueryIds. The list will only be populated for CREATE INDEX
     * recommendations.
     * 
     * @param improvedQueryIds the improvedQueryIds value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner withImprovedQueryIds(List<Long> improvedQueryIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withImprovedQueryIds(improvedQueryIds);
        return this;
    }

    /**
     * Get the recommendationReason property: Reason for this recommendation.
     * 
     * @return the recommendationReason value.
     */
    public String recommendationReason() {
        return this.innerProperties() == null ? null : this.innerProperties().recommendationReason();
    }

    /**
     * Set the recommendationReason property: Reason for this recommendation.
     * 
     * @param recommendationReason the recommendationReason value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner withRecommendationReason(String recommendationReason) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withRecommendationReason(recommendationReason);
        return this;
    }

    /**
     * Get the recommendationType property: Type for this recommendation.
     * 
     * @return the recommendationType value.
     */
    public RecommendationTypeEnum recommendationType() {
        return this.innerProperties() == null ? null : this.innerProperties().recommendationType();
    }

    /**
     * Set the recommendationType property: Type for this recommendation.
     * 
     * @param recommendationType the recommendationType value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner withRecommendationType(RecommendationTypeEnum recommendationType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withRecommendationType(recommendationType);
        return this;
    }

    /**
     * Get the implementationDetails property: Stores implementation details for the recommended action.
     * 
     * @return the implementationDetails value.
     */
    public IndexRecommendationResourcePropertiesImplementationDetails implementationDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().implementationDetails();
    }

    /**
     * Set the implementationDetails property: Stores implementation details for the recommended action.
     * 
     * @param implementationDetails the implementationDetails value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner
        withImplementationDetails(IndexRecommendationResourcePropertiesImplementationDetails implementationDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withImplementationDetails(implementationDetails);
        return this;
    }

    /**
     * Get the analyzedWorkload property: Stores workload information for the recommended action.
     * 
     * @return the analyzedWorkload value.
     */
    public IndexRecommendationResourcePropertiesAnalyzedWorkload analyzedWorkload() {
        return this.innerProperties() == null ? null : this.innerProperties().analyzedWorkload();
    }

    /**
     * Set the analyzedWorkload property: Stores workload information for the recommended action.
     * 
     * @param analyzedWorkload the analyzedWorkload value to set.
     * @return the IndexRecommendationResourceInner object itself.
     */
    public IndexRecommendationResourceInner
        withAnalyzedWorkload(IndexRecommendationResourcePropertiesAnalyzedWorkload analyzedWorkload) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexRecommendationResourceProperties();
        }
        this.innerProperties().withAnalyzedWorkload(analyzedWorkload);
        return this;
    }

    /**
     * Get the estimatedImpact property: The estimated impact of this recommended action.
     * 
     * @return the estimatedImpact value.
     */
    public List<ImpactRecord> estimatedImpact() {
        return this.innerProperties() == null ? null : this.innerProperties().estimatedImpact();
    }

    /**
     * Get the details property: Stores recommendation details for the recommended action.
     * 
     * @return the details value.
     */
    public IndexRecommendationDetails details() {
        return this.innerProperties() == null ? null : this.innerProperties().details();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexRecommendationResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexRecommendationResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IndexRecommendationResourceInner.
     */
    public static IndexRecommendationResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexRecommendationResourceInner deserializedIndexRecommendationResourceInner
                = new IndexRecommendationResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedIndexRecommendationResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedIndexRecommendationResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedIndexRecommendationResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedIndexRecommendationResourceInner.innerProperties
                        = IndexRecommendationResourceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedIndexRecommendationResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexRecommendationResourceInner;
        });
    }
}
