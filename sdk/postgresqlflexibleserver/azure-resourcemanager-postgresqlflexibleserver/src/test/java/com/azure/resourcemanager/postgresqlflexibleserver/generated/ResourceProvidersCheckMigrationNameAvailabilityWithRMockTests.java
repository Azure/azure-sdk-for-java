// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.fluent.models.MigrationNameAvailabilityResourceInner;
import com.azure.resourcemanager.postgresqlflexibleserver.models.MigrationNameAvailabilityResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ResourceProvidersCheckMigrationNameAvailabilityWithRMockTests {
    @Test
    public void testCheckMigrationNameAvailabilityWithResponse() throws Exception {
        String responseStr
            = "{\"name\":\"idwcwvmzegjon\",\"type\":\"hj\",\"nameAvailable\":false,\"reason\":\"AlreadyExists\",\"message\":\"qzbrf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        MigrationNameAvailabilityResource response = manager.resourceProviders()
            .checkMigrationNameAvailabilityWithResponse("pjhmqrhvthl", "iwdcxsmlzzhzd", "xetlgydlhqv",
                new MigrationNameAvailabilityResourceInner().withName("n").withType("pxy"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("idwcwvmzegjon", response.name());
        Assertions.assertEquals("hj", response.type());
    }
}
