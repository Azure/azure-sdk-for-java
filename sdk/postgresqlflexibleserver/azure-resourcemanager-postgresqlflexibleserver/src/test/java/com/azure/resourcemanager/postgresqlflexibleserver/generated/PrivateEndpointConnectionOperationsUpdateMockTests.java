// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.postgresqlflexibleserver.models.PrivateEndpoint;
import com.azure.resourcemanager.postgresqlflexibleserver.models.PrivateEndpointConnection;
import com.azure.resourcemanager.postgresqlflexibleserver.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.postgresqlflexibleserver.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionOperationsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"groupIds\":[\"xrdcqtj\",\"idttgepus\",\"vyjtcvu\"],\"privateEndpoint\":{\"id\":\"s\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"sfuughtuqfecjx\",\"actionsRequired\":\"gtuhxuicbu\"},\"provisioningState\":\"Succeeded\"},\"id\":\"s\",\"name\":\"njlx\",\"type\":\"zrhwp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnectionOperations()
            .update("epdfgkmtdherng", "tcjuahokqto", "kauxof",
                new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                    .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                        .withStatus(PrivateEndpointServiceConnectionStatus.REJECTED)
                        .withDescription("bauiropi")
                        .withActionsRequired("szonwpngajinn")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.APPROVED,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("sfuughtuqfecjx", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("gtuhxuicbu", response.privateLinkServiceConnectionState().actionsRequired());
    }
}
