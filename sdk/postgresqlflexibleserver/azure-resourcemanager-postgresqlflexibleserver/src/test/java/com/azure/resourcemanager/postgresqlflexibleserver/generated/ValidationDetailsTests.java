// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.postgresqlflexibleserver.models.DbLevelValidationStatus;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationDetails;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationMessage;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationState;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationSummaryItem;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ValidationDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ValidationDetails model = BinaryData.fromString(
            "{\"status\":\"Failed\",\"validationStartTimeInUtc\":\"2021-10-25T10:37:02Z\",\"validationEndTimeInUtc\":\"2020-12-24T15:22:03Z\",\"serverLevelValidationDetails\":[{\"type\":\"wosytxitcskf\",\"state\":\"Failed\",\"messages\":[{\"state\":\"Succeeded\",\"message\":\"kkezzikhlyfjhdgq\"},{\"state\":\"Failed\",\"message\":\"dunyg\"},{\"state\":\"Succeeded\",\"message\":\"db\"}]},{\"type\":\"atpxl\",\"state\":\"Succeeded\",\"messages\":[{\"state\":\"Failed\",\"message\":\"a\"},{\"state\":\"Warning\",\"message\":\"arm\"}]}],\"dbLevelValidationDetails\":[{\"databaseName\":\"jsjqbjhhyx\",\"startedOn\":\"2021-08-08T09:59:53Z\",\"endedOn\":\"2021-08-21T13:48:09Z\",\"summary\":[{\"type\":\"uhpkxkgymar\",\"state\":\"Succeeded\",\"messages\":[{},{},{}]},{\"type\":\"qugjhkycube\",\"state\":\"Failed\",\"messages\":[{},{},{},{}]}]},{\"databaseName\":\"fwqmzqalkrmn\",\"startedOn\":\"2021-01-22T20:56:52Z\",\"endedOn\":\"2021-12-03T00:29:17Z\",\"summary\":[{\"type\":\"qudf\",\"state\":\"Succeeded\",\"messages\":[{}]},{\"type\":\"aabjyvayffimrz\",\"state\":\"Failed\",\"messages\":[{},{},{}]}]}]}")
            .toObject(ValidationDetails.class);
        Assertions.assertEquals(ValidationState.FAILED, model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T10:37:02Z"), model.validationStartTimeInUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T15:22:03Z"), model.validationEndTimeInUtc());
        Assertions.assertEquals("wosytxitcskf", model.serverLevelValidationDetails().get(0).type());
        Assertions.assertEquals(ValidationState.FAILED, model.serverLevelValidationDetails().get(0).state());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.serverLevelValidationDetails().get(0).messages().get(0).state());
        Assertions.assertEquals("kkezzikhlyfjhdgq",
            model.serverLevelValidationDetails().get(0).messages().get(0).message());
        Assertions.assertEquals("jsjqbjhhyx", model.dbLevelValidationDetails().get(0).databaseName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T09:59:53Z"),
            model.dbLevelValidationDetails().get(0).startedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T13:48:09Z"),
            model.dbLevelValidationDetails().get(0).endedOn());
        Assertions.assertEquals("uhpkxkgymar", model.dbLevelValidationDetails().get(0).summary().get(0).type());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.dbLevelValidationDetails().get(0).summary().get(0).state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ValidationDetails model
            = new ValidationDetails().withStatus(ValidationState.FAILED)
                .withValidationStartTimeInUtc(OffsetDateTime.parse("2021-10-25T10:37:02Z"))
                .withValidationEndTimeInUtc(OffsetDateTime.parse("2020-12-24T15:22:03Z"))
                .withServerLevelValidationDetails(
                    Arrays.asList(
                        new ValidationSummaryItem().withType("wosytxitcskf")
                            .withState(ValidationState.FAILED)
                            .withMessages(Arrays.asList(
                                new ValidationMessage().withState(ValidationState.SUCCEEDED)
                                    .withMessage("kkezzikhlyfjhdgq"),
                                new ValidationMessage().withState(ValidationState.FAILED).withMessage("dunyg"),
                                new ValidationMessage().withState(ValidationState.SUCCEEDED).withMessage("db"))),
                        new ValidationSummaryItem().withType("atpxl")
                            .withState(ValidationState.SUCCEEDED)
                            .withMessages(Arrays.asList(
                                new ValidationMessage().withState(ValidationState.FAILED).withMessage("a"),
                                new ValidationMessage().withState(ValidationState.WARNING).withMessage("arm")))))
                .withDbLevelValidationDetails(Arrays.asList(
                    new DbLevelValidationStatus().withDatabaseName("jsjqbjhhyx")
                        .withStartedOn(OffsetDateTime.parse("2021-08-08T09:59:53Z"))
                        .withEndedOn(OffsetDateTime.parse("2021-08-21T13:48:09Z"))
                        .withSummary(Arrays.asList(
                            new ValidationSummaryItem().withType("uhpkxkgymar")
                                .withState(ValidationState.SUCCEEDED)
                                .withMessages(Arrays.asList(new ValidationMessage(), new ValidationMessage(),
                                    new ValidationMessage())),
                            new ValidationSummaryItem().withType("qugjhkycube")
                                .withState(ValidationState.FAILED)
                                .withMessages(Arrays.asList(new ValidationMessage(), new ValidationMessage(),
                                    new ValidationMessage(), new ValidationMessage())))),
                    new DbLevelValidationStatus().withDatabaseName("fwqmzqalkrmn")
                        .withStartedOn(OffsetDateTime.parse("2021-01-22T20:56:52Z"))
                        .withEndedOn(OffsetDateTime.parse("2021-12-03T00:29:17Z"))
                        .withSummary(Arrays.asList(
                            new ValidationSummaryItem().withType("qudf")
                                .withState(ValidationState.SUCCEEDED)
                                .withMessages(Arrays.asList(new ValidationMessage())),
                            new ValidationSummaryItem().withType("aabjyvayffimrz")
                                .withState(ValidationState.FAILED)
                                .withMessages(Arrays.asList(new ValidationMessage(), new ValidationMessage(),
                                    new ValidationMessage()))))));
        model = BinaryData.fromObject(model).toObject(ValidationDetails.class);
        Assertions.assertEquals(ValidationState.FAILED, model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T10:37:02Z"), model.validationStartTimeInUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T15:22:03Z"), model.validationEndTimeInUtc());
        Assertions.assertEquals("wosytxitcskf", model.serverLevelValidationDetails().get(0).type());
        Assertions.assertEquals(ValidationState.FAILED, model.serverLevelValidationDetails().get(0).state());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.serverLevelValidationDetails().get(0).messages().get(0).state());
        Assertions.assertEquals("kkezzikhlyfjhdgq",
            model.serverLevelValidationDetails().get(0).messages().get(0).message());
        Assertions.assertEquals("jsjqbjhhyx", model.dbLevelValidationDetails().get(0).databaseName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T09:59:53Z"),
            model.dbLevelValidationDetails().get(0).startedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T13:48:09Z"),
            model.dbLevelValidationDetails().get(0).endedOn());
        Assertions.assertEquals("uhpkxkgymar", model.dbLevelValidationDetails().get(0).summary().get(0).type());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.dbLevelValidationDetails().get(0).summary().get(0).state());
    }
}
