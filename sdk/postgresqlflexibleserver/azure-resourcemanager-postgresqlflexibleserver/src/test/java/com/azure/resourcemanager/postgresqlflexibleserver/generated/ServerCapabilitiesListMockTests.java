// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.models.FlexibleServerCapability;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServerCapabilitiesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"zzikhlyfjhdg\",\"supportedServerEditions\":[{\"name\":\"bdunygaeqid\",\"defaultSkuName\":\"fatpxllrxcyjmoa\",\"supportedStorageEditions\":[],\"supportedServerSkus\":[],\"status\":\"Visible\",\"reason\":\"wdmjsjqbjhhyx\"},{\"name\":\"wlycoduhpkxkg\",\"defaultSkuName\":\"areqna\",\"supportedStorageEditions\":[],\"supportedServerSkus\":[],\"status\":\"Visible\",\"reason\":\"ycubeddgs\"},{\"name\":\"fwqmzqalkrmn\",\"defaultSkuName\":\"jpxac\",\"supportedStorageEditions\":[],\"supportedServerSkus\":[],\"status\":\"Default\",\"reason\":\"xbaaabjyv\"}],\"supportedServerVersions\":[{\"name\":\"imrzrtuzqog\",\"supportedVersionsToUpgrade\":[\"nevfdnw\",\"wmewzsyy\",\"euzsoi\"],\"status\":\"Visible\",\"reason\":\"pfrxtrthzvay\"},{\"name\":\"wkqbrqu\",\"supportedVersionsToUpgrade\":[\"xhexiilivpdti\",\"r\",\"tdqoaxoruzfgsq\"],\"status\":\"Available\",\"reason\":\"rxxle\"},{\"name\":\"ramxjezwlwnw\",\"supportedVersionsToUpgrade\":[\"lcvydy\",\"atdooaojkniod\"],\"status\":\"Default\",\"reason\":\"bw\"},{\"name\":\"jhemms\",\"supportedVersionsToUpgrade\":[\"kcrodtjinfw\",\"lfltka\"],\"status\":\"Disabled\",\"reason\":\"f\"}],\"fastProvisioningSupported\":\"Enabled\",\"supportedFastProvisioningEditions\":[{\"supportedTier\":\"kggkfpa\",\"supportedSku\":\"owpulpq\",\"supportedStorageGb\":985513982,\"supportedServerVersions\":\"s\",\"serverCount\":168865106,\"status\":\"Disabled\",\"reason\":\"sjervti\"},{\"supportedTier\":\"xsdszuempsb\",\"supportedSku\":\"f\",\"supportedStorageGb\":1389741266,\"supportedServerVersions\":\"v\",\"serverCount\":358858891,\"status\":\"Disabled\",\"reason\":\"invkjjxdxrbuu\"},{\"supportedTier\":\"clewyhm\",\"supportedSku\":\"paztzpofncck\",\"supportedStorageGb\":335733577,\"supportedServerVersions\":\"qwhxxbuyqaxzfeqz\",\"serverCount\":1372310139,\"status\":\"Available\",\"reason\":\"lxorjaltolmncws\"}],\"geoBackupSupported\":\"Disabled\",\"zoneRedundantHaSupported\":\"Disabled\",\"zoneRedundantHaAndGeoBackupSupported\":\"Enabled\",\"storageAutoGrowthSupported\":\"Enabled\",\"onlineResizeSupported\":\"Disabled\",\"restricted\":\"Disabled\",\"status\":\"Default\",\"reason\":\"qdpfuvglsbjjca\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PostgreSqlManager manager =
            PostgreSqlManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<FlexibleServerCapability> response =
            manager.serverCapabilities().list("k", "qumiek", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zzikhlyfjhdg", response.iterator().next().name());
    }
}
