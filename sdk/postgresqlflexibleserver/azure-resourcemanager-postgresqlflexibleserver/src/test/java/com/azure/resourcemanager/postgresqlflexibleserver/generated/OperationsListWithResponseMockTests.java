// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.models.OperationListResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"ajquhuxylrjvmtyg\",\"display\":{\"provider\":\"zyos\",\"resource\":\"p\",\"operation\":\"c\",\"description\":\"kyjpmspbps\"},\"isDataAction\":true,\"origin\":\"system\",\"properties\":{\"eyujtvczkcnyxrx\":\"datagt\",\"glnkvxlxpagl\":\"dataunjdx\",\"hpzvuqdflvoniyp\":\"dataivbgkcv\",\"idibgqjxgpn\":\"datapubcpzgpxtivhjk\"}},{\"name\":\"govfgpikqmhhaow\",\"display\":{\"provider\":\"zvuporqzdfuydz\",\"resource\":\"fvxcnqmxqpswo\",\"operation\":\"vkhlggdhbemz\",\"description\":\"zszuwiwtglxx\"},\"isDataAction\":true,\"origin\":\"system\",\"properties\":{\"gmqgjs\":\"dataicrmnzh\",\"rmbodt\":\"datavpqcb\",\"qgvriibakcla\":\"datas\",\"gmwohqfzizvu\":\"datajfrnxousxauzlwv\"}},{\"name\":\"mk\",\"display\":{\"provider\":\"thnwpzte\",\"resource\":\"vmribiat\",\"operation\":\"plucfotangcfhnyk\",\"description\":\"ugswvx\"},\"isDataAction\":true,\"origin\":\"system\",\"properties\":{\"cvclxynpdk\":\"datavtxnjmxmcuqud\"}}],\"nextLink\":\"fabuiyjibu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationListResult response
            = manager.operations().listWithResponse(com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(true, response.value().get(0).isDataAction());
        Assertions.assertEquals("fabuiyjibu", response.nextLink());
    }
}
