// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.models.CheckNameAvailabilityReason;
import com.azure.resourcemanager.postgresqlflexibleserver.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.postgresqlflexibleserver.models.NameAvailability;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CheckNameAvailabilityWithLocationsExecuteWithResponseMockTests {
    @Test
    public void testExecuteWithResponse() throws Exception {
        String responseStr
            = "{\"name\":\"atbhjmznn\",\"type\":\"oqeq\",\"nameAvailable\":true,\"reason\":\"Invalid\",\"message\":\"agunbtgfebw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NameAvailability response = manager.checkNameAvailabilityWithLocations()
            .executeWithResponse("tcqiosmg",
                new CheckNameAvailabilityRequest().withName("ahgx").withType("lyrtltlaprlt"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertTrue(response.nameAvailable());
        Assertions.assertEquals(CheckNameAvailabilityReason.INVALID, response.reason());
        Assertions.assertEquals("agunbtgfebw", response.message());
    }
}
