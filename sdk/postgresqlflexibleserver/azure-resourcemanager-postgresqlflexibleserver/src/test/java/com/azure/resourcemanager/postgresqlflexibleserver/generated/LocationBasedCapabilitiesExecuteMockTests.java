// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.models.FlexibleServerCapability;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocationBasedCapabilitiesExecuteMockTests {
    @Test
    public void testExecute() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"in\",\"supportedServerEditions\":[{\"name\":\"zfttsttktlahb\",\"defaultSkuName\":\"ctxtgzukxi\",\"supportedStorageEditions\":[{\"name\":\"tg\",\"defaultStorageSizeMb\":1103543038740951284,\"supportedStorageMb\":[{},{}],\"status\":\"Visible\",\"reason\":\"xcpjuisavokqdzf\"}],\"supportedServerSkus\":[{\"name\":\"vjlfrqtt\",\"vCores\":213163160,\"supportedIops\":2078837978,\"supportedMemoryPerVcoreMb\":5055816291758609139,\"supportedZones\":[\"yiopi\",\"kqqfk\",\"vscx\",\"dmligovibrxk\"],\"supportedHaMode\":[\"SameZone\",\"SameZone\",\"ZoneRedundant\",\"SameZone\"],\"status\":\"Visible\",\"reason\":\"cbgoor\"}],\"status\":\"Disabled\",\"reason\":\"ybfhjxa\"},{\"name\":\"vjgsl\",\"defaultSkuName\":\"dilmyww\",\"supportedStorageEditions\":[{\"name\":\"xnyed\",\"defaultStorageSizeMb\":3535980306493011205,\"supportedStorageMb\":[{},{},{}],\"status\":\"Default\",\"reason\":\"uewbc\"},{\"name\":\"xuuwhcj\",\"defaultStorageSizeMb\":6711208445225485532,\"supportedStorageMb\":[{}],\"status\":\"Available\",\"reason\":\"yakk\"},{\"name\":\"zp\",\"defaultStorageSizeMb\":5992172880278428165,\"supportedStorageMb\":[{}],\"status\":\"Visible\",\"reason\":\"stcyohpfkyrkdbd\"}],\"supportedServerSkus\":[{\"name\":\"sjkmnwqj\",\"vCores\":1313812453,\"supportedIops\":1666235741,\"supportedMemoryPerVcoreMb\":2641783861935607406,\"supportedZones\":[\"iacegfnmn\",\"fpmvmemfnczd\",\"vvbalx\",\"l\"],\"supportedHaMode\":[\"ZoneRedundant\",\"ZoneRedundant\"],\"status\":\"Available\",\"reason\":\"evwrdnhfuk\"},{\"name\":\"sjcswsmystuluqyp\",\"vCores\":1783589840,\"supportedIops\":291266426,\"supportedMemoryPerVcoreMb\":2710586854780001980,\"supportedZones\":[\"bm\",\"pjbabwidfc\",\"sspuunnoxyhkx\",\"qddrihpfhoqcaae\"],\"supportedHaMode\":[\"ZoneRedundant\",\"SameZone\",\"SameZone\"],\"status\":\"Visible\",\"reason\":\"pjxxkzb\"},{\"name\":\"sgeivsiy\",\"vCores\":1299849927,\"supportedIops\":728133751,\"supportedMemoryPerVcoreMb\":5725396811649484374,\"supportedZones\":[\"nbzoggcu\",\"apzwyrpgog\",\"qxepnylbfuaj\",\"yjt\"],\"supportedHaMode\":[\"SameZone\"],\"status\":\"Disabled\",\"reason\":\"vfcibyfmowux\"}],\"status\":\"Visible\",\"reason\":\"vdwxfzwi\"},{\"name\":\"wzjbh\",\"defaultSkuName\":\"sxjrk\",\"supportedStorageEditions\":[{\"name\":\"rnegvmn\",\"defaultStorageSizeMb\":447209881782194832,\"supportedStorageMb\":[{},{}],\"status\":\"Disabled\",\"reason\":\"pa\"},{\"name\":\"jbkkdmflvestmjl\",\"defaultStorageSizeMb\":2570785226241708791,\"supportedStorageMb\":[{},{}],\"status\":\"Default\",\"reason\":\"eewchpxlktw\"}],\"supportedServerSkus\":[{\"name\":\"ycslevufuztcktyh\",\"vCores\":400720959,\"supportedIops\":1558169297,\"supportedMemoryPerVcoreMb\":4305474554682539257,\"supportedZones\":[\"wmmrq\",\"zrrjvpgly\",\"zgkrvqe\"],\"supportedHaMode\":[\"SameZone\",\"SameZone\"],\"status\":\"Visible\",\"reason\":\"utnwytpzdmovzvf\"},{\"name\":\"awzqadfl\",\"vCores\":318308535,\"supportedIops\":1869010035,\"supportedMemoryPerVcoreMb\":4345598210939458322,\"supportedZones\":[\"xndticokpvzmlqtm\"],\"supportedHaMode\":[\"SameZone\",\"ZoneRedundant\",\"SameZone\"],\"status\":\"Available\",\"reason\":\"clnpkci\"},{\"name\":\"zriykhy\",\"vCores\":1516048320,\"supportedIops\":638538203,\"supportedMemoryPerVcoreMb\":671931235197002479,\"supportedZones\":[\"vkjlmxhom\",\"ynhdwdigum\",\"nraauzz\"],\"supportedHaMode\":[\"SameZone\",\"SameZone\",\"SameZone\",\"SameZone\"],\"status\":\"Default\",\"reason\":\"ezwwv\"},{\"name\":\"qyuvvfonkp\",\"vCores\":1476796114,\"supportedIops\":157079545,\"supportedMemoryPerVcoreMb\":2954343681916155162,\"supportedZones\":[\"uyav\"],\"supportedHaMode\":[\"ZoneRedundant\"],\"status\":\"Disabled\",\"reason\":\"ttijfybvpoekrs\"}],\"status\":\"Default\",\"reason\":\"dhuzqgnjdgk\"}],\"supportedServerVersions\":[{\"name\":\"liqhzvhx\",\"supportedVersionsToUpgrade\":[\"mtk\",\"bo\"],\"status\":\"Available\",\"reason\":\"vdxzxhihfrbbc\"},{\"name\":\"qagt\",\"supportedVersionsToUpgrade\":[\"hlfkqojpy\",\"vgtrdcnifmzzs\",\"ymbrnysuxmpraf\",\"g\"],\"status\":\"Disabled\",\"reason\":\"cxvdfffwafqrouda\"}],\"fastProvisioningSupported\":\"Disabled\",\"supportedFastProvisioningEditions\":[{\"supportedTier\":\"hrv\",\"supportedSku\":\"unzo\",\"supportedStorageGb\":35410717,\"supportedServerVersions\":\"cxgkmoyxcdyui\",\"serverCount\":1002212342,\"status\":\"Disabled\",\"reason\":\"bzydvfvfcj\"}],\"geoBackupSupported\":\"Disabled\",\"zoneRedundantHaSupported\":\"Enabled\",\"zoneRedundantHaAndGeoBackupSupported\":\"Enabled\",\"storageAutoGrowthSupported\":\"Disabled\",\"onlineResizeSupported\":\"Enabled\",\"restricted\":\"Enabled\",\"status\":\"Default\",\"reason\":\"kiscvwmzhwpl\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PostgreSqlManager manager =
            PostgreSqlManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<FlexibleServerCapability> response =
            manager.locationBasedCapabilities().execute("yhgk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("in", response.iterator().next().name());
    }
}
