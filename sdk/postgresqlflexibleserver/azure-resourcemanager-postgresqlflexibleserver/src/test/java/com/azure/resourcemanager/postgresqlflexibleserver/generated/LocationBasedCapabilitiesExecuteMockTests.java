// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.models.FlexibleServerCapability;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocationBasedCapabilitiesExecuteMockTests {
    @Test
    public void testExecute() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"ynl\",\"supportedServerEditions\":[{\"name\":\"op\",\"defaultSkuName\":\"dlqiyntorzih\",\"supportedStorageEditions\":[],\"supportedServerSkus\":[],\"status\":\"Visible\",\"reason\":\"rmslyzrpzbchckqq\"},{\"name\":\"ioxiysuiizyn\",\"defaultSkuName\":\"dy\",\"supportedStorageEditions\":[],\"supportedServerSkus\":[],\"status\":\"Visible\",\"reason\":\"ibzyhwitsmyp\"},{\"name\":\"npcdpumnzgm\",\"defaultSkuName\":\"nmabik\",\"supportedStorageEditions\":[],\"supportedServerSkus\":[],\"status\":\"Available\",\"reason\":\"bldtlww\"},{\"name\":\"kdmtncvokotll\",\"defaultSkuName\":\"yhgsy\",\"supportedStorageEditions\":[],\"supportedServerSkus\":[],\"status\":\"Default\",\"reason\":\"tbnnha\"}],\"supportedServerVersions\":[{\"name\":\"rkvcikhnvpa\",\"supportedVersionsToUpgrade\":[\"x\",\"queziky\",\"ggxkallatmelwuip\"],\"status\":\"Disabled\",\"reason\":\"zkzivgvvcnay\"},{\"name\":\"yrnxxmueedn\",\"supportedVersionsToUpgrade\":[\"v\",\"tkwqqtchealm\"],\"status\":\"Default\",\"reason\":\"aayg\"},{\"name\":\"wvgpiohg\",\"supportedVersionsToUpgrade\":[\"tfudxepx\",\"yqagvrvm\",\"pkukghi\"],\"status\":\"Available\",\"reason\":\"xgwim\"}],\"fastProvisioningSupported\":\"Enabled\",\"supportedFastProvisioningEditions\":[{\"supportedTier\":\"xw\",\"supportedSku\":\"zk\",\"supportedStorageGb\":1767053067,\"supportedServerVersions\":\"rey\",\"serverCount\":520152641,\"status\":\"Visible\",\"reason\":\"jawneaiv\"},{\"supportedTier\":\"czelpcirel\",\"supportedSku\":\"eae\",\"supportedStorageGb\":1632471353,\"supportedServerVersions\":\"fatkld\",\"serverCount\":2043314878,\"status\":\"Default\",\"reason\":\"uaanozjosphy\"}],\"geoBackupSupported\":\"Enabled\",\"zoneRedundantHaSupported\":\"Disabled\",\"zoneRedundantHaAndGeoBackupSupported\":\"Enabled\",\"storageAutoGrowthSupported\":\"Enabled\",\"onlineResizeSupported\":\"Enabled\",\"restricted\":\"Enabled\",\"status\":\"Available\",\"reason\":\"wosytxitcskf\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PostgreSqlManager manager =
            PostgreSqlManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<FlexibleServerCapability> response =
            manager.locationBasedCapabilities().execute("n", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ynl", response.iterator().next().name());
    }
}
