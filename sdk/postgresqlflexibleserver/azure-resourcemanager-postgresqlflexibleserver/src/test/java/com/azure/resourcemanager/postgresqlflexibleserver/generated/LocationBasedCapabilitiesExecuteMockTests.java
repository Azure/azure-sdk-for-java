// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.postgresqlflexibleserver.PostgreSqlManager;
import com.azure.resourcemanager.postgresqlflexibleserver.models.CapabilityProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocationBasedCapabilitiesExecuteMockTests {
    @Test
    public void testExecute() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"zone\":\"hxicslfaoqz\",\"supportedHAMode\":[\"ylhalnswhcc\",\"ph\",\"aivwitqscywu\",\"gwol\"],\"geoBackupSupported\":true,\"zoneRedundantHaSupported\":true,\"zoneRedundantHaAndGeoBackupSupported\":false,\"supportedFlexibleServerEditions\":[{\"name\":\"i\",\"supportedStorageEditions\":[{\"name\":\"gzd\",\"supportedStorageMB\":[{}],\"status\":\"eypqwdxggicccn\"}],\"supportedServerVersions\":[{\"name\":\"exmk\",\"supportedVersionsToUpgrade\":[\"stvlzywemhzrnc\",\"dtclusiypb\",\"fgytguslfeadcyg\"],\"supportedVcores\":[{},{},{}],\"status\":\"hejhzisx\"},{\"name\":\"pelol\",\"supportedVersionsToUpgrade\":[\"ksrpqv\"],\"supportedVcores\":[{},{}],\"status\":\"aehtwd\"}],\"status\":\"ftswibyrcdlbhsh\"},{\"name\":\"p\",\"supportedStorageEditions\":[{\"name\":\"twitykhev\",\"supportedStorageMB\":[{},{},{}],\"status\":\"dcpnmdyodnw\"},{\"name\":\"ltjcvnhltiugcxna\",\"supportedStorageMB\":[{},{}],\"status\":\"qiby\"}],\"supportedServerVersions\":[{\"name\":\"owx\",\"supportedVersionsToUpgrade\":[\"djrkvfgbvfvpd\",\"odacizs\",\"q\",\"hkr\"],\"supportedVcores\":[{},{},{}],\"status\":\"eibq\"},{\"name\":\"qkgh\",\"supportedVersionsToUpgrade\":[\"dzwmkrefajpj\",\"rwkq\",\"yhgbijtjivfx\"],\"supportedVcores\":[{},{},{}],\"status\":\"bibsystawfsdjpvk\"},{\"name\":\"bjxbkzbzk\",\"supportedVersionsToUpgrade\":[\"cjabudurgkakmo\"],\"supportedVcores\":[{},{}],\"status\":\"jk\"},{\"name\":\"fhmouwq\",\"supportedVersionsToUpgrade\":[\"rfzeey\",\"bizikayuhq\"],\"supportedVcores\":[{},{}],\"status\":\"sybbqwr\"}],\"status\":\"ldgmfpgvmpip\"},{\"name\":\"ltha\",\"supportedStorageEditions\":[{\"name\":\"smwutwbdsrezpd\",\"supportedStorageMB\":[{},{}],\"status\":\"uyowqkdwy\"}],\"supportedServerVersions\":[{\"name\":\"bi\",\"supportedVersionsToUpgrade\":[\"pikpz\",\"mejzanlfzxia\",\"rmbzo\"],\"supportedVcores\":[{},{}],\"status\":\"xrjqcirgzpfrlazs\"},{\"name\":\"nwoiind\",\"supportedVersionsToUpgrade\":[\"pj\"],\"supportedVcores\":[{},{},{}],\"status\":\"tlhflsjcdhszf\"},{\"name\":\"fbgofeljagrqmqh\",\"supportedVersionsToUpgrade\":[\"riiiojnalghfkv\",\"vsexsowuelu\"],\"supportedVcores\":[{},{},{},{}],\"status\":\"hhxvrhmzkwpj\"}],\"status\":\"wspughftqsxhqx\"},{\"name\":\"xukndxdigr\",\"supportedStorageEditions\":[{\"name\":\"fzdm\",\"supportedStorageMB\":[{},{},{},{}],\"status\":\"fi\"},{\"name\":\"hbotzingamvppho\",\"supportedStorageMB\":[{},{}],\"status\":\"udphqamvdkfwyn\"},{\"name\":\"vtbvkayh\",\"supportedStorageMB\":[{}],\"status\":\"yqiatkzwp\"},{\"name\":\"p\",\"supportedStorageMB\":[{},{},{}],\"status\":\"a\"}],\"supportedServerVersions\":[{\"name\":\"v\",\"supportedVersionsToUpgrade\":[\"yajguqfhwygzlv\",\"nk\"],\"supportedVcores\":[{},{},{},{}],\"status\":\"emdwzrmuhapfc\"}],\"status\":\"psqxq\"}],\"supportedHyperscaleNodeEditions\":[{\"name\":\"uoymgccelvezry\",\"supportedStorageEditions\":[{\"name\":\"feo\",\"supportedStorageMB\":[{},{}],\"status\":\"wkyhkobopgxe\"},{\"name\":\"owepbqpcrfkb\",\"supportedStorageMB\":[{},{},{},{}],\"status\":\"njv\"},{\"name\":\"wxlp\",\"supportedStorageMB\":[{},{},{}],\"status\":\"tn\"}],\"supportedServerVersions\":[{\"name\":\"syingwfqatmtdht\",\"supportedVersionsToUpgrade\":[\"ypgik\",\"gszywk\"],\"supportedVcores\":[{},{},{}],\"status\":\"yuzhlhkjoqrvq\"},{\"name\":\"atjinrvgoupmfiib\",\"supportedVersionsToUpgrade\":[\"jioolvrwxk\"],\"supportedVcores\":[{},{}],\"status\":\"gllqwjy\"}],\"supportedNodeTypes\":[{\"name\":\"yvblmhvkzu\",\"nodeType\":\"xvvy\",\"status\":\"s\"},{\"name\":\"byrqufeg\",\"nodeType\":\"vwz\",\"status\":\"nhlmctlpdng\"},{\"name\":\"vgbmhr\",\"nodeType\":\"kw\",\"status\":\"ijejvegrhbpn\"}],\"status\":\"xexccbdreaxhcexd\"}],\"fastProvisioningSupported\":true,\"supportedFastProvisioningEditions\":[{\"supportedSku\":\"qkghtpwijnhy\",\"supportedStorageGb\":6975213925943191762,\"supportedServerVersions\":\"cxzbfvoowvr\"},{\"supportedSku\":\"t\",\"supportedStorageGb\":1342853990361185080,\"supportedServerVersions\":\"y\"}],\"status\":\"tronzmyhgfi\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PostgreSqlManager manager =
            PostgreSqlManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CapabilityProperties> response =
            manager.locationBasedCapabilities().execute("rmaequ", com.azure.core.util.Context.NONE);
    }
}
