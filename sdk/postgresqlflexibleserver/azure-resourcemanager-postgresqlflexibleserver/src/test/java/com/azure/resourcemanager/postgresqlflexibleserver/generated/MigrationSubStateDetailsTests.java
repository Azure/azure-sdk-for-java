// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.postgresqlflexibleserver.models.DbLevelValidationStatus;
import com.azure.resourcemanager.postgresqlflexibleserver.models.DbMigrationStatus;
import com.azure.resourcemanager.postgresqlflexibleserver.models.MigrationDbState;
import com.azure.resourcemanager.postgresqlflexibleserver.models.MigrationSubStateDetails;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationDetails;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationMessage;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationState;
import com.azure.resourcemanager.postgresqlflexibleserver.models.ValidationSummaryItem;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MigrationSubStateDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MigrationSubStateDetails model = BinaryData.fromString(
            "{\"currentSubState\":\"PerformingPreRequisiteSteps\",\"dbDetails\":{\"lkdmtncvokotllxd\":{\"databaseName\":\"trwyhqmib\",\"migrationState\":\"InProgress\",\"migrationOperation\":\"itsmypyyn\",\"startedOn\":\"2020-12-28T22:53:56Z\",\"endedOn\":\"2021-11-03T04:02:51Z\",\"fullLoadQueuedTables\":874382237,\"fullLoadErroredTables\":66905695,\"fullLoadLoadingTables\":944462660,\"fullLoadCompletedTables\":1547081847,\"cdcUpdateCounter\":1417683929,\"cdcDeleteCounter\":130212191,\"cdcInsertCounter\":1046581273,\"appliedChanges\":438726197,\"incomingChanges\":284256630,\"latency\":1287311603,\"message\":\"bldtlww\"},\"ipicc\":{\"databaseName\":\"gsyocogj\",\"migrationState\":\"Canceled\",\"migrationOperation\":\"bnnhadoocrkvcik\",\"startedOn\":\"2021-09-16T23:17:11Z\",\"endedOn\":\"2021-10-11T09:13:27Z\",\"fullLoadQueuedTables\":924007604,\"fullLoadErroredTables\":210666313,\"fullLoadLoadingTables\":1810691305,\"fullLoadCompletedTables\":1026255480,\"cdcUpdateCounter\":443622503,\"cdcDeleteCounter\":1292561525,\"cdcInsertCounter\":2021225461,\"appliedChanges\":1344310513,\"incomingChanges\":1558005484,\"latency\":395512854,\"message\":\"tmelw\"}},\"validationDetails\":{\"status\":\"Warning\",\"validationStartTimeInUtc\":\"2021-06-18T18:11Z\",\"validationEndTimeInUtc\":\"2021-12-08T15:57:22Z\",\"serverLevelValidationDetails\":[{\"type\":\"ayrhyrnx\",\"state\":\"Succeeded\",\"messages\":[{\"state\":\"Warning\",\"message\":\"rdvstkwqqtch\"},{\"state\":\"Warning\",\"message\":\"fmtdaaygdvwvgp\"}]}],\"dbLevelValidationDetails\":[{\"databaseName\":\"wxrt\",\"startedOn\":\"2021-04-12T14:57:26Z\",\"endedOn\":\"2021-10-02T23:21:47Z\",\"summary\":[{\"type\":\"yqagvrvm\",\"state\":\"Succeeded\",\"messages\":[{},{},{},{}]}]},{\"databaseName\":\"himdbl\",\"startedOn\":\"2021-03-06T12:44:58Z\",\"endedOn\":\"2021-12-09T15:02:58Z\",\"summary\":[{\"type\":\"hfjx\",\"state\":\"Succeeded\",\"messages\":[{},{}]}]},{\"databaseName\":\"foqreyfkzik\",\"startedOn\":\"2021-01-25T00:08:01Z\",\"endedOn\":\"2021-02-22T10:12:12Z\",\"summary\":[{\"type\":\"vxwc\",\"state\":\"Warning\",\"messages\":[{}]}]}]}}")
            .toObject(MigrationSubStateDetails.class);
        Assertions.assertEquals("trwyhqmib", model.dbDetails().get("lkdmtncvokotllxd").databaseName());
        Assertions.assertEquals(MigrationDbState.IN_PROGRESS,
            model.dbDetails().get("lkdmtncvokotllxd").migrationState());
        Assertions.assertEquals("itsmypyyn", model.dbDetails().get("lkdmtncvokotllxd").migrationOperation());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-28T22:53:56Z"),
            model.dbDetails().get("lkdmtncvokotllxd").startedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-03T04:02:51Z"),
            model.dbDetails().get("lkdmtncvokotllxd").endedOn());
        Assertions.assertEquals(874382237, model.dbDetails().get("lkdmtncvokotllxd").fullLoadQueuedTables());
        Assertions.assertEquals(66905695, model.dbDetails().get("lkdmtncvokotllxd").fullLoadErroredTables());
        Assertions.assertEquals(944462660, model.dbDetails().get("lkdmtncvokotllxd").fullLoadLoadingTables());
        Assertions.assertEquals(1547081847, model.dbDetails().get("lkdmtncvokotllxd").fullLoadCompletedTables());
        Assertions.assertEquals(1417683929, model.dbDetails().get("lkdmtncvokotllxd").cdcUpdateCounter());
        Assertions.assertEquals(130212191, model.dbDetails().get("lkdmtncvokotllxd").cdcDeleteCounter());
        Assertions.assertEquals(1046581273, model.dbDetails().get("lkdmtncvokotllxd").cdcInsertCounter());
        Assertions.assertEquals(438726197, model.dbDetails().get("lkdmtncvokotllxd").appliedChanges());
        Assertions.assertEquals(284256630, model.dbDetails().get("lkdmtncvokotllxd").incomingChanges());
        Assertions.assertEquals(1287311603, model.dbDetails().get("lkdmtncvokotllxd").latency());
        Assertions.assertEquals("bldtlww", model.dbDetails().get("lkdmtncvokotllxd").message());
        Assertions.assertEquals(ValidationState.WARNING, model.validationDetails().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-18T18:11Z"),
            model.validationDetails().validationStartTimeInUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-08T15:57:22Z"),
            model.validationDetails().validationEndTimeInUtc());
        Assertions.assertEquals("ayrhyrnx", model.validationDetails().serverLevelValidationDetails().get(0).type());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.validationDetails().serverLevelValidationDetails().get(0).state());
        Assertions.assertEquals(ValidationState.WARNING,
            model.validationDetails().serverLevelValidationDetails().get(0).messages().get(0).state());
        Assertions.assertEquals("rdvstkwqqtch",
            model.validationDetails().serverLevelValidationDetails().get(0).messages().get(0).message());
        Assertions.assertEquals("wxrt", model.validationDetails().dbLevelValidationDetails().get(0).databaseName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-12T14:57:26Z"),
            model.validationDetails().dbLevelValidationDetails().get(0).startedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T23:21:47Z"),
            model.validationDetails().dbLevelValidationDetails().get(0).endedOn());
        Assertions.assertEquals("yqagvrvm",
            model.validationDetails().dbLevelValidationDetails().get(0).summary().get(0).type());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.validationDetails().dbLevelValidationDetails().get(0).summary().get(0).state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MigrationSubStateDetails model = new MigrationSubStateDetails()
            .withDbDetails(mapOf("lkdmtncvokotllxd",
                new DbMigrationStatus().withDatabaseName("trwyhqmib")
                    .withMigrationState(MigrationDbState.IN_PROGRESS)
                    .withMigrationOperation("itsmypyyn")
                    .withStartedOn(OffsetDateTime.parse("2020-12-28T22:53:56Z"))
                    .withEndedOn(OffsetDateTime.parse("2021-11-03T04:02:51Z"))
                    .withFullLoadQueuedTables(874382237)
                    .withFullLoadErroredTables(66905695)
                    .withFullLoadLoadingTables(944462660)
                    .withFullLoadCompletedTables(1547081847)
                    .withCdcUpdateCounter(1417683929)
                    .withCdcDeleteCounter(130212191)
                    .withCdcInsertCounter(1046581273)
                    .withAppliedChanges(438726197)
                    .withIncomingChanges(284256630)
                    .withLatency(1287311603)
                    .withMessage("bldtlww"),
                "ipicc",
                new DbMigrationStatus().withDatabaseName("gsyocogj")
                    .withMigrationState(MigrationDbState.CANCELED)
                    .withMigrationOperation("bnnhadoocrkvcik")
                    .withStartedOn(OffsetDateTime.parse("2021-09-16T23:17:11Z"))
                    .withEndedOn(OffsetDateTime.parse("2021-10-11T09:13:27Z"))
                    .withFullLoadQueuedTables(924007604)
                    .withFullLoadErroredTables(210666313)
                    .withFullLoadLoadingTables(1810691305)
                    .withFullLoadCompletedTables(1026255480)
                    .withCdcUpdateCounter(443622503)
                    .withCdcDeleteCounter(1292561525)
                    .withCdcInsertCounter(2021225461)
                    .withAppliedChanges(1344310513)
                    .withIncomingChanges(1558005484)
                    .withLatency(395512854)
                    .withMessage("tmelw")))
            .withValidationDetails(new ValidationDetails().withStatus(ValidationState.WARNING)
                .withValidationStartTimeInUtc(OffsetDateTime.parse("2021-06-18T18:11Z"))
                .withValidationEndTimeInUtc(OffsetDateTime.parse("2021-12-08T15:57:22Z"))
                .withServerLevelValidationDetails(Arrays.asList(new ValidationSummaryItem().withType("ayrhyrnx")
                    .withState(ValidationState.SUCCEEDED)
                    .withMessages(Arrays.asList(
                        new ValidationMessage().withState(ValidationState.WARNING).withMessage("rdvstkwqqtch"),
                        new ValidationMessage().withState(ValidationState.WARNING).withMessage("fmtdaaygdvwvgp")))))
                .withDbLevelValidationDetails(Arrays.asList(
                    new DbLevelValidationStatus().withDatabaseName("wxrt")
                        .withStartedOn(OffsetDateTime.parse("2021-04-12T14:57:26Z"))
                        .withEndedOn(OffsetDateTime.parse("2021-10-02T23:21:47Z"))
                        .withSummary(Arrays.asList(new ValidationSummaryItem().withType("yqagvrvm")
                            .withState(ValidationState.SUCCEEDED)
                            .withMessages(Arrays.asList(new ValidationMessage(), new ValidationMessage(),
                                new ValidationMessage(), new ValidationMessage())))),
                    new DbLevelValidationStatus().withDatabaseName("himdbl")
                        .withStartedOn(OffsetDateTime.parse("2021-03-06T12:44:58Z"))
                        .withEndedOn(OffsetDateTime.parse("2021-12-09T15:02:58Z"))
                        .withSummary(Arrays.asList(new ValidationSummaryItem().withType("hfjx")
                            .withState(ValidationState.SUCCEEDED)
                            .withMessages(Arrays.asList(new ValidationMessage(), new ValidationMessage())))),
                    new DbLevelValidationStatus().withDatabaseName("foqreyfkzik")
                        .withStartedOn(OffsetDateTime.parse("2021-01-25T00:08:01Z"))
                        .withEndedOn(OffsetDateTime.parse("2021-02-22T10:12:12Z"))
                        .withSummary(Arrays.asList(new ValidationSummaryItem().withType("vxwc")
                            .withState(ValidationState.WARNING)
                            .withMessages(Arrays.asList(new ValidationMessage())))))));
        model = BinaryData.fromObject(model).toObject(MigrationSubStateDetails.class);
        Assertions.assertEquals("trwyhqmib", model.dbDetails().get("lkdmtncvokotllxd").databaseName());
        Assertions.assertEquals(MigrationDbState.IN_PROGRESS,
            model.dbDetails().get("lkdmtncvokotllxd").migrationState());
        Assertions.assertEquals("itsmypyyn", model.dbDetails().get("lkdmtncvokotllxd").migrationOperation());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-28T22:53:56Z"),
            model.dbDetails().get("lkdmtncvokotllxd").startedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-03T04:02:51Z"),
            model.dbDetails().get("lkdmtncvokotllxd").endedOn());
        Assertions.assertEquals(874382237, model.dbDetails().get("lkdmtncvokotllxd").fullLoadQueuedTables());
        Assertions.assertEquals(66905695, model.dbDetails().get("lkdmtncvokotllxd").fullLoadErroredTables());
        Assertions.assertEquals(944462660, model.dbDetails().get("lkdmtncvokotllxd").fullLoadLoadingTables());
        Assertions.assertEquals(1547081847, model.dbDetails().get("lkdmtncvokotllxd").fullLoadCompletedTables());
        Assertions.assertEquals(1417683929, model.dbDetails().get("lkdmtncvokotllxd").cdcUpdateCounter());
        Assertions.assertEquals(130212191, model.dbDetails().get("lkdmtncvokotllxd").cdcDeleteCounter());
        Assertions.assertEquals(1046581273, model.dbDetails().get("lkdmtncvokotllxd").cdcInsertCounter());
        Assertions.assertEquals(438726197, model.dbDetails().get("lkdmtncvokotllxd").appliedChanges());
        Assertions.assertEquals(284256630, model.dbDetails().get("lkdmtncvokotllxd").incomingChanges());
        Assertions.assertEquals(1287311603, model.dbDetails().get("lkdmtncvokotllxd").latency());
        Assertions.assertEquals("bldtlww", model.dbDetails().get("lkdmtncvokotllxd").message());
        Assertions.assertEquals(ValidationState.WARNING, model.validationDetails().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-18T18:11Z"),
            model.validationDetails().validationStartTimeInUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-08T15:57:22Z"),
            model.validationDetails().validationEndTimeInUtc());
        Assertions.assertEquals("ayrhyrnx", model.validationDetails().serverLevelValidationDetails().get(0).type());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.validationDetails().serverLevelValidationDetails().get(0).state());
        Assertions.assertEquals(ValidationState.WARNING,
            model.validationDetails().serverLevelValidationDetails().get(0).messages().get(0).state());
        Assertions.assertEquals("rdvstkwqqtch",
            model.validationDetails().serverLevelValidationDetails().get(0).messages().get(0).message());
        Assertions.assertEquals("wxrt", model.validationDetails().dbLevelValidationDetails().get(0).databaseName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-12T14:57:26Z"),
            model.validationDetails().dbLevelValidationDetails().get(0).startedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T23:21:47Z"),
            model.validationDetails().dbLevelValidationDetails().get(0).endedOn());
        Assertions.assertEquals("yqagvrvm",
            model.validationDetails().dbLevelValidationDetails().get(0).summary().get(0).type());
        Assertions.assertEquals(ValidationState.SUCCEEDED,
            model.validationDetails().dbLevelValidationDetails().get(0).summary().get(0).state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
