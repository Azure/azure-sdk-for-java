/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.labservices.v2018_10_15.ProviderOperations;
import com.microsoft.azure.management.labservices.v2018_10_15.GlobalUsers;
import com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts;
import com.microsoft.azure.management.labservices.v2018_10_15.Operations;
import com.microsoft.azure.management.labservices.v2018_10_15.GalleryImages;
import com.microsoft.azure.management.labservices.v2018_10_15.Labs;
import com.microsoft.azure.management.labservices.v2018_10_15.EnvironmentSettings;
import com.microsoft.azure.management.labservices.v2018_10_15.Environments;
import com.microsoft.azure.management.labservices.v2018_10_15.Users;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure LabServices resource management.
 */
public final class LabServicesManager extends ManagerCore<LabServicesManager, ManagedLabsClientImpl> {
    private ProviderOperations providerOperations;
    private GlobalUsers globalUsers;
    private LabAccounts labAccounts;
    private Operations operations;
    private GalleryImages galleryImages;
    private Labs labs;
    private EnvironmentSettings environmentSettings;
    private Environments environments;
    private Users users;
    /**
    * Get a Configurable instance that can be used to create LabServicesManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new LabServicesManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of LabServicesManager that exposes LabServices resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the LabServicesManager
    */
    public static LabServicesManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new LabServicesManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of LabServicesManager that exposes LabServices resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the LabServicesManager
    */
    public static LabServicesManager authenticate(RestClient restClient, String subscriptionId) {
        return new LabServicesManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of LabServicesManager that exposes LabServices management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing LabServices management API entry points that work across subscriptions
        */
        LabServicesManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage ProviderOperations.
     */
    public ProviderOperations providerOperations() {
        if (this.providerOperations == null) {
            this.providerOperations = new ProviderOperationsImpl(this);
        }
        return this.providerOperations;
    }

    /**
     * @return Entry point to manage GlobalUsers.
     */
    public GlobalUsers globalUsers() {
        if (this.globalUsers == null) {
            this.globalUsers = new GlobalUsersImpl(this);
        }
        return this.globalUsers;
    }

    /**
     * @return Entry point to manage LabAccounts.
     */
    public LabAccounts labAccounts() {
        if (this.labAccounts == null) {
            this.labAccounts = new LabAccountsImpl(this);
        }
        return this.labAccounts;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage GalleryImages.
     */
    public GalleryImages galleryImages() {
        if (this.galleryImages == null) {
            this.galleryImages = new GalleryImagesImpl(this);
        }
        return this.galleryImages;
    }

    /**
     * @return Entry point to manage Labs.
     */
    public Labs labs() {
        if (this.labs == null) {
            this.labs = new LabsImpl(this);
        }
        return this.labs;
    }

    /**
     * @return Entry point to manage EnvironmentSettings.
     */
    public EnvironmentSettings environmentSettings() {
        if (this.environmentSettings == null) {
            this.environmentSettings = new EnvironmentSettingsImpl(this);
        }
        return this.environmentSettings;
    }

    /**
     * @return Entry point to manage Environments.
     */
    public Environments environments() {
        if (this.environments == null) {
            this.environments = new EnvironmentsImpl(this);
        }
        return this.environments;
    }

    /**
     * @return Entry point to manage Users.
     */
    public Users users() {
        if (this.users == null) {
            this.users = new UsersImpl(this);
        }
        return this.users;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public LabServicesManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return LabServicesManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private LabServicesManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new ManagedLabsClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
