/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import com.microsoft.azure.management.labservices.v2018_10_15.EnvironmentSetting;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.labservices.v2018_10_15.EnvironmentSettingFragment;
import java.util.Map;
import com.microsoft.azure.management.labservices.v2018_10_15.PublishingState;
import com.microsoft.azure.management.labservices.v2018_10_15.ConfigurationState;
import com.microsoft.azure.management.labservices.v2018_10_15.ResourceSettings;
import org.joda.time.DateTime;
import com.microsoft.azure.management.labservices.v2018_10_15.LatestOperationResult;
import com.microsoft.azure.management.labservices.v2018_10_15.ResourceSettingsFragment;
import rx.functions.Func1;

class EnvironmentSettingImpl extends CreatableUpdatableImpl<EnvironmentSetting, EnvironmentSettingInner, EnvironmentSettingImpl> implements EnvironmentSetting, EnvironmentSetting.Definition, EnvironmentSetting.Update {
    private final LabServicesManager manager;
    private String resourceGroupName;
    private String labAccountName;
    private String labName;
    private String environmentSettingName;
    private EnvironmentSettingFragment updateParameter;

    EnvironmentSettingImpl(String name, LabServicesManager manager) {
        super(name, new EnvironmentSettingInner());
        this.manager = manager;
        // Set resource name
        this.environmentSettingName = name;
        //
        this.updateParameter = new EnvironmentSettingFragment();
    }

    EnvironmentSettingImpl(EnvironmentSettingInner inner, LabServicesManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.environmentSettingName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "labaccounts");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.environmentSettingName = IdParsingUtils.getValueFromIdByName(inner.id(), "environmentsettings");
        //
        this.updateParameter = new EnvironmentSettingFragment();
    }

    @Override
    public LabServicesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<EnvironmentSetting> createResourceAsync() {
        EnvironmentSettingsInner client = this.manager().inner().environmentSettings();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labAccountName, this.labName, this.environmentSettingName, this.inner())
            .map(new Func1<EnvironmentSettingInner, EnvironmentSettingInner>() {
               @Override
               public EnvironmentSettingInner call(EnvironmentSettingInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<EnvironmentSetting> updateResourceAsync() {
        EnvironmentSettingsInner client = this.manager().inner().environmentSettings();
        return client.updateAsync(this.resourceGroupName, this.labAccountName, this.labName, this.environmentSettingName, this.updateParameter)
            .map(new Func1<EnvironmentSettingInner, EnvironmentSettingInner>() {
               @Override
               public EnvironmentSettingInner call(EnvironmentSettingInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EnvironmentSettingInner> getInnerAsync() {
        EnvironmentSettingsInner client = this.manager().inner().environmentSettings();
        return client.getAsync(this.resourceGroupName, this.labAccountName, this.labName, this.environmentSettingName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new EnvironmentSettingFragment();
    }

    @Override
    public ConfigurationState configurationState() {
        return this.inner().configurationState();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastChanged() {
        return this.inner().lastChanged();
    }

    @Override
    public DateTime lastPublished() {
        return this.inner().lastPublished();
    }

    @Override
    public LatestOperationResult latestOperationResult() {
        return this.inner().latestOperationResult();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public PublishingState publishingState() {
        return this.inner().publishingState();
    }

    @Override
    public ResourceSettings resourceSettings() {
        return this.inner().resourceSettings();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String title() {
        return this.inner().title();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String uniqueIdentifier() {
        return this.inner().uniqueIdentifier();
    }

    @Override
    public EnvironmentSettingImpl withExistingLab(String resourceGroupName, String labAccountName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labAccountName = labAccountName;
        this.labName = labName;
        return this;
    }

    @Override
    public EnvironmentSettingImpl withResourceSettings(ResourceSettings resourceSettings) {
        this.inner().withResourceSettings(resourceSettings);
        return this;
    }

    @Override
    public EnvironmentSettingImpl withResourceSettings(ResourceSettingsFragment resourceSettings) {
        this.updateParameter.withResourceSettings(resourceSettings);
        return this;
    }

    @Override
    public EnvironmentSettingImpl withConfigurationState(ConfigurationState configurationState) {
        if (isInCreateMode()) {
            this.inner().withConfigurationState(configurationState);
        } else {
            this.updateParameter.withConfigurationState(configurationState);
        }
        return this;
    }

    @Override
    public EnvironmentSettingImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.inner().withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public EnvironmentSettingImpl withLocation(String location) {
        if (isInCreateMode()) {
            this.inner().withLocation(location);
        } else {
            this.updateParameter.withLocation(location);
        }
        return this;
    }

    @Override
    public EnvironmentSettingImpl withProvisioningState(String provisioningState) {
        if (isInCreateMode()) {
            this.inner().withProvisioningState(provisioningState);
        } else {
            this.updateParameter.withProvisioningState(provisioningState);
        }
        return this;
    }

    @Override
    public EnvironmentSettingImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

    @Override
    public EnvironmentSettingImpl withTitle(String title) {
        if (isInCreateMode()) {
            this.inner().withTitle(title);
        } else {
            this.updateParameter.withTitle(title);
        }
        return this;
    }

    @Override
    public EnvironmentSettingImpl withUniqueIdentifier(String uniqueIdentifier) {
        if (isInCreateMode()) {
            this.inner().withUniqueIdentifier(uniqueIdentifier);
        } else {
            this.updateParameter.withUniqueIdentifier(uniqueIdentifier);
        }
        return this;
    }

}
