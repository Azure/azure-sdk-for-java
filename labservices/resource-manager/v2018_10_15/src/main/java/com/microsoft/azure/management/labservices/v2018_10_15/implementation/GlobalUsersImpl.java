/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.labservices.v2018_10_15.GlobalUsers;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.labservices.v2018_10_15.GetEnvironmentResponse;
import com.microsoft.azure.management.labservices.v2018_10_15.OperationBatchStatusResponse;
import com.microsoft.azure.management.labservices.v2018_10_15.OperationStatusResponse;
import com.microsoft.azure.management.labservices.v2018_10_15.GetPersonalPreferencesResponse;
import com.microsoft.azure.management.labservices.v2018_10_15.ListEnvironmentsResponse;
import com.microsoft.azure.management.labservices.v2018_10_15.ListLabsResponse;
import java.util.List;
import com.microsoft.azure.management.labservices.v2018_10_15.PersonalPreferencesOperationsPayload;
import com.microsoft.azure.management.labservices.v2018_10_15.ResetPasswordPayload;

class GlobalUsersImpl extends WrapperImpl<GlobalUsersInner> implements GlobalUsers {
    private final LabServicesManager manager;

    GlobalUsersImpl(LabServicesManager manager) {
        super(manager.inner().globalUsers());
        this.manager = manager;
    }

    public LabServicesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<GetEnvironmentResponse> getEnvironmentAsync(String userName, String environmentId) {
        GlobalUsersInner client = this.inner();
        return client.getEnvironmentAsync(userName, environmentId)
        .map(new Func1<GetEnvironmentResponseInner, GetEnvironmentResponse>() {
            @Override
            public GetEnvironmentResponse call(GetEnvironmentResponseInner inner) {
                return new GetEnvironmentResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationBatchStatusResponse> getOperationBatchStatusAsync(String userName, List<String> urls) {
        GlobalUsersInner client = this.inner();
        return client.getOperationBatchStatusAsync(userName, urls)
        .map(new Func1<OperationBatchStatusResponseInner, OperationBatchStatusResponse>() {
            @Override
            public OperationBatchStatusResponse call(OperationBatchStatusResponseInner inner) {
                return new OperationBatchStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> getOperationStatusAsync(String userName, String operationUrl) {
        GlobalUsersInner client = this.inner();
        return client.getOperationStatusAsync(userName, operationUrl)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<GetPersonalPreferencesResponse> getPersonalPreferencesAsync(String userName, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload) {
        GlobalUsersInner client = this.inner();
        return client.getPersonalPreferencesAsync(userName, personalPreferencesOperationsPayload)
        .map(new Func1<GetPersonalPreferencesResponseInner, GetPersonalPreferencesResponse>() {
            @Override
            public GetPersonalPreferencesResponse call(GetPersonalPreferencesResponseInner inner) {
                return new GetPersonalPreferencesResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ListEnvironmentsResponse> listEnvironmentsAsync(String userName) {
        GlobalUsersInner client = this.inner();
        return client.listEnvironmentsAsync(userName)
        .map(new Func1<ListEnvironmentsResponseInner, ListEnvironmentsResponse>() {
            @Override
            public ListEnvironmentsResponse call(ListEnvironmentsResponseInner inner) {
                return new ListEnvironmentsResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ListLabsResponse> listLabsAsync(String userName) {
        GlobalUsersInner client = this.inner();
        return client.listLabsAsync(userName)
        .map(new Func1<ListLabsResponseInner, ListLabsResponse>() {
            @Override
            public ListLabsResponse call(ListLabsResponseInner inner) {
                return new ListLabsResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable registerAsync(String userName) {
        GlobalUsersInner client = this.inner();
        return client.registerAsync(userName).toCompletable();
    }

    @Override
    public Completable resetPasswordAsync(String userName, ResetPasswordPayload resetPasswordPayload) {
        GlobalUsersInner client = this.inner();
        return client.resetPasswordAsync(userName, resetPasswordPayload).toCompletable();
    }

    @Override
    public Completable startEnvironmentAsync(String userName, String environmentId) {
        GlobalUsersInner client = this.inner();
        return client.startEnvironmentAsync(userName, environmentId).toCompletable();
    }

    @Override
    public Completable stopEnvironmentAsync(String userName, String environmentId) {
        GlobalUsersInner client = this.inner();
        return client.stopEnvironmentAsync(userName, environmentId).toCompletable();
    }

}
