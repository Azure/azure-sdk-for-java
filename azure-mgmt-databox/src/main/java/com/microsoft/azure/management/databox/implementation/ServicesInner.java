/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databox.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.databox.AvailableSkuRequest;
import com.microsoft.azure.management.databox.RegionConfigurationRequest;
import com.microsoft.azure.management.databox.ValidateAddress;
import com.microsoft.azure.management.databox.ValidationRequest;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Services.
 */
public class ServicesInner {
    /** The Retrofit service to perform REST calls. */
    private ServicesService service;
    /** The service client containing this operation class. */
    private DataBoxManagementClientImpl client;

    /**
     * Initializes an instance of ServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServicesInner(Retrofit retrofit, DataBoxManagementClientImpl client) {
        this.service = retrofit.create(ServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Services to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services listAvailableSkus" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/availableSkus")
        Observable<Response<ResponseBody>> listAvailableSkus(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Body AvailableSkuRequest availableSkuRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services listAvailableSkusByResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus")
        Observable<Response<ResponseBody>> listAvailableSkusByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("location") String location, @Query("api-version") String apiVersion, @Body AvailableSkuRequest availableSkuRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services validateAddressMethod" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress")
        Observable<Response<ResponseBody>> validateAddressMethod(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Body ValidateAddress validateAddress, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services validateInputsByResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs")
        Observable<Response<ResponseBody>> validateInputsByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("location") String location, @Query("api-version") String apiVersion, @Body ValidationRequest validationRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services validateInputs" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs")
        Observable<Response<ResponseBody>> validateInputs(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Body ValidationRequest validationRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services regionConfiguration" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration")
        Observable<Response<ResponseBody>> regionConfiguration(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Body RegionConfigurationRequest regionConfigurationRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services listAvailableSkusNext" })
        @GET
        Observable<Response<ResponseBody>> listAvailableSkusNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Services listAvailableSkusByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listAvailableSkusByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SkuInformationInner&gt; object if successful.
     */
    public PagedList<SkuInformationInner> listAvailableSkus(final String location, final AvailableSkuRequest availableSkuRequest) {
        ServiceResponse<Page<SkuInformationInner>> response = listAvailableSkusSinglePageAsync(location, availableSkuRequest).toBlocking().single();
        return new PagedList<SkuInformationInner>(response.body()) {
            @Override
            public Page<SkuInformationInner> nextPage(String nextPageLink) {
                return listAvailableSkusNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SkuInformationInner>> listAvailableSkusAsync(final String location, final AvailableSkuRequest availableSkuRequest, final ListOperationCallback<SkuInformationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listAvailableSkusSinglePageAsync(location, availableSkuRequest),
            new Func1<String, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(String nextPageLink) {
                    return listAvailableSkusNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<Page<SkuInformationInner>> listAvailableSkusAsync(final String location, final AvailableSkuRequest availableSkuRequest) {
        return listAvailableSkusWithServiceResponseAsync(location, availableSkuRequest)
            .map(new Func1<ServiceResponse<Page<SkuInformationInner>>, Page<SkuInformationInner>>() {
                @Override
                public Page<SkuInformationInner> call(ServiceResponse<Page<SkuInformationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusWithServiceResponseAsync(final String location, final AvailableSkuRequest availableSkuRequest) {
        return listAvailableSkusSinglePageAsync(location, availableSkuRequest)
            .concatMap(new Func1<ServiceResponse<Page<SkuInformationInner>>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(ServiceResponse<Page<SkuInformationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listAvailableSkusNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
    ServiceResponse<PageImpl<SkuInformationInner>> * @param location The location of the resource
    ServiceResponse<PageImpl<SkuInformationInner>> * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SkuInformationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusSinglePageAsync(final String location, final AvailableSkuRequest availableSkuRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (availableSkuRequest == null) {
            throw new IllegalArgumentException("Parameter availableSkuRequest is required and cannot be null.");
        }
        Validator.validate(availableSkuRequest);
        return service.listAvailableSkus(this.client.subscriptionId(), location, this.client.apiVersion(), availableSkuRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SkuInformationInner>> result = listAvailableSkusDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SkuInformationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SkuInformationInner>> listAvailableSkusDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SkuInformationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SkuInformationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SkuInformationInner&gt; object if successful.
     */
    public PagedList<SkuInformationInner> listAvailableSkusByResourceGroup(final String resourceGroupName, final String location, final AvailableSkuRequest availableSkuRequest) {
        ServiceResponse<Page<SkuInformationInner>> response = listAvailableSkusByResourceGroupSinglePageAsync(resourceGroupName, location, availableSkuRequest).toBlocking().single();
        return new PagedList<SkuInformationInner>(response.body()) {
            @Override
            public Page<SkuInformationInner> nextPage(String nextPageLink) {
                return listAvailableSkusByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SkuInformationInner>> listAvailableSkusByResourceGroupAsync(final String resourceGroupName, final String location, final AvailableSkuRequest availableSkuRequest, final ListOperationCallback<SkuInformationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listAvailableSkusByResourceGroupSinglePageAsync(resourceGroupName, location, availableSkuRequest),
            new Func1<String, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(String nextPageLink) {
                    return listAvailableSkusByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<Page<SkuInformationInner>> listAvailableSkusByResourceGroupAsync(final String resourceGroupName, final String location, final AvailableSkuRequest availableSkuRequest) {
        return listAvailableSkusByResourceGroupWithServiceResponseAsync(resourceGroupName, location, availableSkuRequest)
            .map(new Func1<ServiceResponse<Page<SkuInformationInner>>, Page<SkuInformationInner>>() {
                @Override
                public Page<SkuInformationInner> call(ServiceResponse<Page<SkuInformationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String location, final AvailableSkuRequest availableSkuRequest) {
        return listAvailableSkusByResourceGroupSinglePageAsync(resourceGroupName, location, availableSkuRequest)
            .concatMap(new Func1<ServiceResponse<Page<SkuInformationInner>>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(ServiceResponse<Page<SkuInformationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listAvailableSkusByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
    ServiceResponse<PageImpl<SkuInformationInner>> * @param resourceGroupName The Resource Group Name
    ServiceResponse<PageImpl<SkuInformationInner>> * @param location The location of the resource
    ServiceResponse<PageImpl<SkuInformationInner>> * @param availableSkuRequest Filters for showing the available skus.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SkuInformationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusByResourceGroupSinglePageAsync(final String resourceGroupName, final String location, final AvailableSkuRequest availableSkuRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (availableSkuRequest == null) {
            throw new IllegalArgumentException("Parameter availableSkuRequest is required and cannot be null.");
        }
        Validator.validate(availableSkuRequest);
        return service.listAvailableSkusByResourceGroup(this.client.subscriptionId(), resourceGroupName, location, this.client.apiVersion(), availableSkuRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SkuInformationInner>> result = listAvailableSkusByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SkuInformationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SkuInformationInner>> listAvailableSkusByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SkuInformationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SkuInformationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] This method validates the customer shipping address and provide alternate addresses if any.
     *
     * @param location The location of the resource
     * @param validateAddress Shipping address of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AddressValidationOutputInner object if successful.
     */
    public AddressValidationOutputInner validateAddressMethod(String location, ValidateAddress validateAddress) {
        return validateAddressMethodWithServiceResponseAsync(location, validateAddress).toBlocking().single().body();
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] This method validates the customer shipping address and provide alternate addresses if any.
     *
     * @param location The location of the resource
     * @param validateAddress Shipping address of the customer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AddressValidationOutputInner> validateAddressMethodAsync(String location, ValidateAddress validateAddress, final ServiceCallback<AddressValidationOutputInner> serviceCallback) {
        return ServiceFuture.fromResponse(validateAddressMethodWithServiceResponseAsync(location, validateAddress), serviceCallback);
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] This method validates the customer shipping address and provide alternate addresses if any.
     *
     * @param location The location of the resource
     * @param validateAddress Shipping address of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AddressValidationOutputInner object
     */
    public Observable<AddressValidationOutputInner> validateAddressMethodAsync(String location, ValidateAddress validateAddress) {
        return validateAddressMethodWithServiceResponseAsync(location, validateAddress).map(new Func1<ServiceResponse<AddressValidationOutputInner>, AddressValidationOutputInner>() {
            @Override
            public AddressValidationOutputInner call(ServiceResponse<AddressValidationOutputInner> response) {
                return response.body();
            }
        });
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] This method validates the customer shipping address and provide alternate addresses if any.
     *
     * @param location The location of the resource
     * @param validateAddress Shipping address of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AddressValidationOutputInner object
     */
    public Observable<ServiceResponse<AddressValidationOutputInner>> validateAddressMethodWithServiceResponseAsync(String location, ValidateAddress validateAddress) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (validateAddress == null) {
            throw new IllegalArgumentException("Parameter validateAddress is required and cannot be null.");
        }
        Validator.validate(validateAddress);
        return service.validateAddressMethod(this.client.subscriptionId(), location, this.client.apiVersion(), validateAddress, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AddressValidationOutputInner>>>() {
                @Override
                public Observable<ServiceResponse<AddressValidationOutputInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AddressValidationOutputInner> clientResponse = validateAddressMethodDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AddressValidationOutputInner> validateAddressMethodDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AddressValidationOutputInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AddressValidationOutputInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method does all necessary pre-job creation validation under resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ValidationResponseInner object if successful.
     */
    public ValidationResponseInner validateInputsByResourceGroup(String resourceGroupName, String location, ValidationRequest validationRequest) {
        return validateInputsByResourceGroupWithServiceResponseAsync(resourceGroupName, location, validationRequest).toBlocking().single().body();
    }

    /**
     * This method does all necessary pre-job creation validation under resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ValidationResponseInner> validateInputsByResourceGroupAsync(String resourceGroupName, String location, ValidationRequest validationRequest, final ServiceCallback<ValidationResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(validateInputsByResourceGroupWithServiceResponseAsync(resourceGroupName, location, validationRequest), serviceCallback);
    }

    /**
     * This method does all necessary pre-job creation validation under resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidationResponseInner object
     */
    public Observable<ValidationResponseInner> validateInputsByResourceGroupAsync(String resourceGroupName, String location, ValidationRequest validationRequest) {
        return validateInputsByResourceGroupWithServiceResponseAsync(resourceGroupName, location, validationRequest).map(new Func1<ServiceResponse<ValidationResponseInner>, ValidationResponseInner>() {
            @Override
            public ValidationResponseInner call(ServiceResponse<ValidationResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This method does all necessary pre-job creation validation under resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidationResponseInner object
     */
    public Observable<ServiceResponse<ValidationResponseInner>> validateInputsByResourceGroupWithServiceResponseAsync(String resourceGroupName, String location, ValidationRequest validationRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (validationRequest == null) {
            throw new IllegalArgumentException("Parameter validationRequest is required and cannot be null.");
        }
        Validator.validate(validationRequest);
        return service.validateInputsByResourceGroup(this.client.subscriptionId(), resourceGroupName, location, this.client.apiVersion(), validationRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ValidationResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<ValidationResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ValidationResponseInner> clientResponse = validateInputsByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ValidationResponseInner> validateInputsByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ValidationResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ValidationResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method does all necessary pre-job creation validation under subscription.
     *
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ValidationResponseInner object if successful.
     */
    public ValidationResponseInner validateInputs(String location, ValidationRequest validationRequest) {
        return validateInputsWithServiceResponseAsync(location, validationRequest).toBlocking().single().body();
    }

    /**
     * This method does all necessary pre-job creation validation under subscription.
     *
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ValidationResponseInner> validateInputsAsync(String location, ValidationRequest validationRequest, final ServiceCallback<ValidationResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(validateInputsWithServiceResponseAsync(location, validationRequest), serviceCallback);
    }

    /**
     * This method does all necessary pre-job creation validation under subscription.
     *
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidationResponseInner object
     */
    public Observable<ValidationResponseInner> validateInputsAsync(String location, ValidationRequest validationRequest) {
        return validateInputsWithServiceResponseAsync(location, validationRequest).map(new Func1<ServiceResponse<ValidationResponseInner>, ValidationResponseInner>() {
            @Override
            public ValidationResponseInner call(ServiceResponse<ValidationResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This method does all necessary pre-job creation validation under subscription.
     *
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidationResponseInner object
     */
    public Observable<ServiceResponse<ValidationResponseInner>> validateInputsWithServiceResponseAsync(String location, ValidationRequest validationRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (validationRequest == null) {
            throw new IllegalArgumentException("Parameter validationRequest is required and cannot be null.");
        }
        Validator.validate(validationRequest);
        return service.validateInputs(this.client.subscriptionId(), location, this.client.apiVersion(), validationRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ValidationResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<ValidationResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ValidationResponseInner> clientResponse = validateInputsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ValidationResponseInner> validateInputsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ValidationResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ValidationResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This API provides configuration details specific to given region/location.
     *
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegionConfigurationResponseInner object if successful.
     */
    public RegionConfigurationResponseInner regionConfiguration(String location, RegionConfigurationRequest regionConfigurationRequest) {
        return regionConfigurationWithServiceResponseAsync(location, regionConfigurationRequest).toBlocking().single().body();
    }

    /**
     * This API provides configuration details specific to given region/location.
     *
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegionConfigurationResponseInner> regionConfigurationAsync(String location, RegionConfigurationRequest regionConfigurationRequest, final ServiceCallback<RegionConfigurationResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(regionConfigurationWithServiceResponseAsync(location, regionConfigurationRequest), serviceCallback);
    }

    /**
     * This API provides configuration details specific to given region/location.
     *
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegionConfigurationResponseInner object
     */
    public Observable<RegionConfigurationResponseInner> regionConfigurationAsync(String location, RegionConfigurationRequest regionConfigurationRequest) {
        return regionConfigurationWithServiceResponseAsync(location, regionConfigurationRequest).map(new Func1<ServiceResponse<RegionConfigurationResponseInner>, RegionConfigurationResponseInner>() {
            @Override
            public RegionConfigurationResponseInner call(ServiceResponse<RegionConfigurationResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This API provides configuration details specific to given region/location.
     *
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegionConfigurationResponseInner object
     */
    public Observable<ServiceResponse<RegionConfigurationResponseInner>> regionConfigurationWithServiceResponseAsync(String location, RegionConfigurationRequest regionConfigurationRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (regionConfigurationRequest == null) {
            throw new IllegalArgumentException("Parameter regionConfigurationRequest is required and cannot be null.");
        }
        Validator.validate(regionConfigurationRequest);
        return service.regionConfiguration(this.client.subscriptionId(), location, this.client.apiVersion(), regionConfigurationRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RegionConfigurationResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<RegionConfigurationResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RegionConfigurationResponseInner> clientResponse = regionConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RegionConfigurationResponseInner> regionConfigurationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegionConfigurationResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegionConfigurationResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SkuInformationInner&gt; object if successful.
     */
    public PagedList<SkuInformationInner> listAvailableSkusNext(final String nextPageLink) {
        ServiceResponse<Page<SkuInformationInner>> response = listAvailableSkusNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SkuInformationInner>(response.body()) {
            @Override
            public Page<SkuInformationInner> nextPage(String nextPageLink) {
                return listAvailableSkusNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SkuInformationInner>> listAvailableSkusNextAsync(final String nextPageLink, final ServiceFuture<List<SkuInformationInner>> serviceFuture, final ListOperationCallback<SkuInformationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listAvailableSkusNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(String nextPageLink) {
                    return listAvailableSkusNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<Page<SkuInformationInner>> listAvailableSkusNextAsync(final String nextPageLink) {
        return listAvailableSkusNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SkuInformationInner>>, Page<SkuInformationInner>>() {
                @Override
                public Page<SkuInformationInner> call(ServiceResponse<Page<SkuInformationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusNextWithServiceResponseAsync(final String nextPageLink) {
        return listAvailableSkusNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SkuInformationInner>>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(ServiceResponse<Page<SkuInformationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listAvailableSkusNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription and location.
     *
    ServiceResponse<PageImpl<SkuInformationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SkuInformationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listAvailableSkusNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SkuInformationInner>> result = listAvailableSkusNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SkuInformationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SkuInformationInner>> listAvailableSkusNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SkuInformationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SkuInformationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SkuInformationInner&gt; object if successful.
     */
    public PagedList<SkuInformationInner> listAvailableSkusByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<SkuInformationInner>> response = listAvailableSkusByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SkuInformationInner>(response.body()) {
            @Override
            public Page<SkuInformationInner> nextPage(String nextPageLink) {
                return listAvailableSkusByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SkuInformationInner>> listAvailableSkusByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<SkuInformationInner>> serviceFuture, final ListOperationCallback<SkuInformationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listAvailableSkusByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(String nextPageLink) {
                    return listAvailableSkusByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<Page<SkuInformationInner>> listAvailableSkusByResourceGroupNextAsync(final String nextPageLink) {
        return listAvailableSkusByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SkuInformationInner>>, Page<SkuInformationInner>>() {
                @Override
                public Page<SkuInformationInner> call(ServiceResponse<Page<SkuInformationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SkuInformationInner&gt; object
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listAvailableSkusByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SkuInformationInner>>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(ServiceResponse<Page<SkuInformationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listAvailableSkusByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     *
    ServiceResponse<PageImpl<SkuInformationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SkuInformationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SkuInformationInner>>> listAvailableSkusByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listAvailableSkusByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SkuInformationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SkuInformationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SkuInformationInner>> result = listAvailableSkusByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SkuInformationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SkuInformationInner>> listAvailableSkusByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SkuInformationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SkuInformationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
