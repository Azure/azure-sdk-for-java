/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databox.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.databox.CancellationReason;
import com.microsoft.azure.management.databox.JobResourceUpdateParameter;
import com.microsoft.azure.management.databox.ShipmentPickUpRequest;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public class JobsInner implements InnerSupportsGet<JobResourceInner>, InnerSupportsDelete<Void>, InnerSupportsListing<JobResourceInner> {
    /** The Retrofit service to perform REST calls. */
    private JobsService service;
    /** The service client containing this operation class. */
    private DataBoxManagementClientImpl client;

    /**
     * Initializes an instance of JobsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JobsInner(Retrofit retrofit, DataBoxManagementClientImpl client) {
        this.service = retrofit.create(JobsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Jobs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JobsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Body JobResourceInner jobResource, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Body JobResourceInner jobResource, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Body JobResourceUpdateParameter jobResourceUpdateParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Body JobResourceUpdateParameter jobResourceUpdateParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs bookShipmentPickUp" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/bookShipmentPickUp")
        Observable<Response<ResponseBody>> bookShipmentPickUp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Body ShipmentPickUpRequest shipmentPickUpRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs cancel" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/cancel")
        Observable<Response<ResponseBody>> cancel(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CancellationReason cancellationReason, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs listCredentials" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listCredentials")
        Observable<Response<ResponseBody>> listCredentials(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databox.Jobs listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResourceInner&gt; object if successful.
     */
    public PagedList<JobResourceInner> list() {
        ServiceResponse<Page<JobResourceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<JobResourceInner>(response.body()) {
            @Override
            public Page<JobResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResourceInner>> listAsync(final ListOperationCallback<JobResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<Page<JobResourceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<JobResourceInner>>, Page<JobResourceInner>>() {
                @Override
                public Page<JobResourceInner> call(ServiceResponse<Page<JobResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<JobResourceInner>>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(ServiceResponse<Page<JobResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResourceInner&gt; object if successful.
     */
    public PagedList<JobResourceInner> list(final String skipToken) {
        ServiceResponse<Page<JobResourceInner>> response = listSinglePageAsync(skipToken).toBlocking().single();
        return new PagedList<JobResourceInner>(response.body()) {
            @Override
            public Page<JobResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResourceInner>> listAsync(final String skipToken, final ListOperationCallback<JobResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(skipToken),
            new Func1<String, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<Page<JobResourceInner>> listAsync(final String skipToken) {
        return listWithServiceResponseAsync(skipToken)
            .map(new Func1<ServiceResponse<Page<JobResourceInner>>, Page<JobResourceInner>>() {
                @Override
                public Page<JobResourceInner> call(ServiceResponse<Page<JobResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listWithServiceResponseAsync(final String skipToken) {
        return listSinglePageAsync(skipToken)
            .concatMap(new Func1<ServiceResponse<Page<JobResourceInner>>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(ServiceResponse<Page<JobResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the jobs available under the subscription.
     *
    ServiceResponse<PageImpl<JobResourceInner>> * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listSinglePageAsync(final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobResourceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResourceInner&gt; object if successful.
     */
    public PagedList<JobResourceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<JobResourceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<JobResourceInner>(response.body()) {
            @Override
            public Page<JobResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResourceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<JobResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<Page<JobResourceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<JobResourceInner>>, Page<JobResourceInner>>() {
                @Override
                public Page<JobResourceInner> call(ServiceResponse<Page<JobResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<JobResourceInner>>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(ServiceResponse<Page<JobResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResourceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResourceInner&gt; object if successful.
     */
    public PagedList<JobResourceInner> listByResourceGroup(final String resourceGroupName, final String skipToken) {
        ServiceResponse<Page<JobResourceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, skipToken).toBlocking().single();
        return new PagedList<JobResourceInner>(response.body()) {
            @Override
            public Page<JobResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResourceInner>> listByResourceGroupAsync(final String resourceGroupName, final String skipToken, final ListOperationCallback<JobResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<Page<JobResourceInner>> listByResourceGroupAsync(final String resourceGroupName, final String skipToken) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, skipToken)
            .map(new Func1<ServiceResponse<Page<JobResourceInner>>, Page<JobResourceInner>>() {
                @Override
                public Page<JobResourceInner> call(ServiceResponse<Page<JobResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String skipToken) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<JobResourceInner>>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(ServiceResponse<Page<JobResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
    ServiceResponse<PageImpl<JobResourceInner>> * @param resourceGroupName The Resource Group Name
    ServiceResponse<PageImpl<JobResourceInner>> * @param skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResourceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobResourceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner getByResourceGroup(String resourceGroupName, String jobName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, jobName).toBlocking().single().body();
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> getByResourceGroupAsync(String resourceGroupName, String jobName, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, jobName), serviceCallback);
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<JobResourceInner> getByResourceGroupAsync(String resourceGroupName, String jobName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, jobName).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<ServiceResponse<JobResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner getByResourceGroup(String resourceGroupName, String jobName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, jobName, expand).toBlocking().single().body();
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> getByResourceGroupAsync(String resourceGroupName, String jobName, String expand, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, jobName, expand), serviceCallback);
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<JobResourceInner> getByResourceGroupAsync(String resourceGroupName, String jobName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, jobName, expand).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the specified job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<ServiceResponse<JobResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String jobName, String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner create(String resourceGroupName, String jobName, JobResourceInner jobResource) {
        return createWithServiceResponseAsync(resourceGroupName, jobName, jobResource).toBlocking().last().body();
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> createAsync(String resourceGroupName, String jobName, JobResourceInner jobResource, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, jobName, jobResource), serviceCallback);
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<JobResourceInner> createAsync(String resourceGroupName, String jobName, JobResourceInner jobResource) {
        return createWithServiceResponseAsync(resourceGroupName, jobName, jobResource).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<JobResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String jobName, JobResourceInner jobResource) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (jobResource == null) {
            throw new IllegalArgumentException("Parameter jobResource is required and cannot be null.");
        }
        Validator.validate(jobResource);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), jobResource, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<JobResourceInner>() { }.getType());
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner beginCreate(String resourceGroupName, String jobName, JobResourceInner jobResource) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, jobName, jobResource).toBlocking().single().body();
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> beginCreateAsync(String resourceGroupName, String jobName, JobResourceInner jobResource, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, jobName, jobResource), serviceCallback);
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<JobResourceInner> beginCreateAsync(String resourceGroupName, String jobName, JobResourceInner jobResource) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, jobName, jobResource).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<ServiceResponse<JobResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String jobName, JobResourceInner jobResource) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (jobResource == null) {
            throw new IllegalArgumentException("Parameter jobResource is required and cannot be null.");
        }
        Validator.validate(jobResource);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), jobResource, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String jobName) {
        deleteWithServiceResponseAsync(resourceGroupName, jobName).toBlocking().last().body();
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String jobName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, jobName), serviceCallback);
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String jobName) {
        return deleteWithServiceResponseAsync(resourceGroupName, jobName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String jobName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, jobName).toBlocking().single().body();
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String jobName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, jobName), serviceCallback);
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String jobName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, jobName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner update(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter) {
        return updateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter).toBlocking().last().body();
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> updateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter), serviceCallback);
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<JobResourceInner> updateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter) {
        return updateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<JobResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (jobResourceUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter jobResourceUpdateParameter is required and cannot be null.");
        }
        Validator.validate(jobResourceUpdateParameter);
        final String ifMatch = null;
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), ifMatch, jobResourceUpdateParameter, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<JobResourceInner>() { }.getType());
    }
    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner update(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter, ifMatch).toBlocking().last().body();
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> updateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter, ifMatch), serviceCallback);
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<JobResourceInner> updateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter, ifMatch).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<JobResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (jobResourceUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter jobResourceUpdateParameter is required and cannot be null.");
        }
        Validator.validate(jobResourceUpdateParameter);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), ifMatch, jobResourceUpdateParameter, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<JobResourceInner>() { }.getType());
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner beginUpdate(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter).toBlocking().single().body();
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> beginUpdateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter), serviceCallback);
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<JobResourceInner> beginUpdateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<ServiceResponse<JobResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (jobResourceUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter jobResourceUpdateParameter is required and cannot be null.");
        }
        Validator.validate(jobResourceUpdateParameter);
        final String ifMatch = null;
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), ifMatch, jobResourceUpdateParameter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResourceInner object if successful.
     */
    public JobResourceInner beginUpdate(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter, ifMatch).toBlocking().single().body();
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResourceInner> beginUpdateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch, final ServiceCallback<JobResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter, ifMatch), serviceCallback);
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<JobResourceInner> beginUpdateAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, jobName, jobResourceUpdateParameter, ifMatch).map(new Func1<ServiceResponse<JobResourceInner>, JobResourceInner>() {
            @Override
            public JobResourceInner call(ServiceResponse<JobResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResourceInner object
     */
    public Observable<ServiceResponse<JobResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String jobName, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (jobResourceUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter jobResourceUpdateParameter is required and cannot be null.");
        }
        Validator.validate(jobResourceUpdateParameter);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), ifMatch, jobResourceUpdateParameter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResourceInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Book shipment pick up.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param shipmentPickUpRequest Details of shipment pick up request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ShipmentPickUpResponseInner object if successful.
     */
    public ShipmentPickUpResponseInner bookShipmentPickUp(String resourceGroupName, String jobName, ShipmentPickUpRequest shipmentPickUpRequest) {
        return bookShipmentPickUpWithServiceResponseAsync(resourceGroupName, jobName, shipmentPickUpRequest).toBlocking().single().body();
    }

    /**
     * Book shipment pick up.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param shipmentPickUpRequest Details of shipment pick up request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ShipmentPickUpResponseInner> bookShipmentPickUpAsync(String resourceGroupName, String jobName, ShipmentPickUpRequest shipmentPickUpRequest, final ServiceCallback<ShipmentPickUpResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(bookShipmentPickUpWithServiceResponseAsync(resourceGroupName, jobName, shipmentPickUpRequest), serviceCallback);
    }

    /**
     * Book shipment pick up.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param shipmentPickUpRequest Details of shipment pick up request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShipmentPickUpResponseInner object
     */
    public Observable<ShipmentPickUpResponseInner> bookShipmentPickUpAsync(String resourceGroupName, String jobName, ShipmentPickUpRequest shipmentPickUpRequest) {
        return bookShipmentPickUpWithServiceResponseAsync(resourceGroupName, jobName, shipmentPickUpRequest).map(new Func1<ServiceResponse<ShipmentPickUpResponseInner>, ShipmentPickUpResponseInner>() {
            @Override
            public ShipmentPickUpResponseInner call(ServiceResponse<ShipmentPickUpResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Book shipment pick up.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param shipmentPickUpRequest Details of shipment pick up request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ShipmentPickUpResponseInner object
     */
    public Observable<ServiceResponse<ShipmentPickUpResponseInner>> bookShipmentPickUpWithServiceResponseAsync(String resourceGroupName, String jobName, ShipmentPickUpRequest shipmentPickUpRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (shipmentPickUpRequest == null) {
            throw new IllegalArgumentException("Parameter shipmentPickUpRequest is required and cannot be null.");
        }
        Validator.validate(shipmentPickUpRequest);
        return service.bookShipmentPickUp(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), shipmentPickUpRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ShipmentPickUpResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<ShipmentPickUpResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ShipmentPickUpResponseInner> clientResponse = bookShipmentPickUpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ShipmentPickUpResponseInner> bookShipmentPickUpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ShipmentPickUpResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ShipmentPickUpResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * CancelJob.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param reason Reason for cancellation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void cancel(String resourceGroupName, String jobName, String reason) {
        cancelWithServiceResponseAsync(resourceGroupName, jobName, reason).toBlocking().single().body();
    }

    /**
     * CancelJob.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param reason Reason for cancellation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> cancelAsync(String resourceGroupName, String jobName, String reason, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(cancelWithServiceResponseAsync(resourceGroupName, jobName, reason), serviceCallback);
    }

    /**
     * CancelJob.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param reason Reason for cancellation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> cancelAsync(String resourceGroupName, String jobName, String reason) {
        return cancelWithServiceResponseAsync(resourceGroupName, jobName, reason).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * CancelJob.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param reason Reason for cancellation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String resourceGroupName, String jobName, String reason) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (reason == null) {
            throw new IllegalArgumentException("Parameter reason is required and cannot be null.");
        }
        CancellationReason cancellationReason = new CancellationReason();
        cancellationReason.withReason(reason);
        return service.cancel(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), cancellationReason, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = cancelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> cancelDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets the unencrypted secrets related to the job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UnencryptedCredentialsInner&gt; object if successful.
     */
    public List<UnencryptedCredentialsInner> listCredentials(String resourceGroupName, String jobName) {
        return listCredentialsWithServiceResponseAsync(resourceGroupName, jobName).toBlocking().single().body();
    }

    /**
     * This method gets the unencrypted secrets related to the job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<UnencryptedCredentialsInner>> listCredentialsAsync(String resourceGroupName, String jobName, final ServiceCallback<List<UnencryptedCredentialsInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listCredentialsWithServiceResponseAsync(resourceGroupName, jobName), serviceCallback);
    }

    /**
     * This method gets the unencrypted secrets related to the job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UnencryptedCredentialsInner&gt; object
     */
    public Observable<List<UnencryptedCredentialsInner>> listCredentialsAsync(String resourceGroupName, String jobName) {
        return listCredentialsWithServiceResponseAsync(resourceGroupName, jobName).map(new Func1<ServiceResponse<List<UnencryptedCredentialsInner>>, List<UnencryptedCredentialsInner>>() {
            @Override
            public List<UnencryptedCredentialsInner> call(ServiceResponse<List<UnencryptedCredentialsInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * This method gets the unencrypted secrets related to the job.
     *
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UnencryptedCredentialsInner&gt; object
     */
    public Observable<ServiceResponse<List<UnencryptedCredentialsInner>>> listCredentialsWithServiceResponseAsync(String resourceGroupName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listCredentials(this.client.subscriptionId(), resourceGroupName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<UnencryptedCredentialsInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<UnencryptedCredentialsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<UnencryptedCredentialsInner>> result = listCredentialsDelegate(response);
                        List<UnencryptedCredentialsInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<UnencryptedCredentialsInner>> clientResponse = new ServiceResponse<List<UnencryptedCredentialsInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<UnencryptedCredentialsInner>> listCredentialsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<UnencryptedCredentialsInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<UnencryptedCredentialsInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResourceInner&gt; object if successful.
     */
    public PagedList<JobResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<JobResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobResourceInner>(response.body()) {
            @Override
            public Page<JobResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<JobResourceInner>> serviceFuture, final ListOperationCallback<JobResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<Page<JobResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobResourceInner>>, Page<JobResourceInner>>() {
                @Override
                public Page<JobResourceInner> call(ServiceResponse<Page<JobResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the jobs available under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobResourceInner>>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(ServiceResponse<Page<JobResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the jobs available under the subscription.
     *
    ServiceResponse<PageImpl<JobResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobResourceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResourceInner&gt; object if successful.
     */
    public PagedList<JobResourceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<JobResourceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobResourceInner>(response.body()) {
            @Override
            public Page<JobResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResourceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<JobResourceInner>> serviceFuture, final ListOperationCallback<JobResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<Page<JobResourceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobResourceInner>>, Page<JobResourceInner>>() {
                @Override
                public Page<JobResourceInner> call(ServiceResponse<Page<JobResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobResourceInner>>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(ServiceResponse<Page<JobResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the jobs available under the given resource group.
     *
    ServiceResponse<PageImpl<JobResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResourceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResourceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobResourceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
