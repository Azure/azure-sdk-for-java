/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databox;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Copy progress.
 */
public class CopyProgress {
    /**
     * Name of the storage account. This will be empty for data account types
     * other than storage account.
     */
    @JsonProperty(value = "storageAccountName", access = JsonProperty.Access.WRITE_ONLY)
    private String storageAccountName;

    /**
     * Transfer type of data. Possible values include: 'ImportToAzure',
     * 'ExportFromAzure'.
     */
    @JsonProperty(value = "transferType", access = JsonProperty.Access.WRITE_ONLY)
    private TransferType transferType;

    /**
     * Data Account Type. Possible values include: 'StorageAccount',
     * 'ManagedDisk'.
     */
    @JsonProperty(value = "dataAccountType", access = JsonProperty.Access.WRITE_ONLY)
    private DataAccountType dataAccountType;

    /**
     * Id of the account where the data needs to be uploaded.
     */
    @JsonProperty(value = "accountId", access = JsonProperty.Access.WRITE_ONLY)
    private String accountId;

    /**
     * To indicate bytes transferred.
     */
    @JsonProperty(value = "bytesProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Long bytesProcessed;

    /**
     * Total amount of data to be processed by the job.
     */
    @JsonProperty(value = "totalBytesToProcess", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalBytesToProcess;

    /**
     * Number of files processed.
     */
    @JsonProperty(value = "filesProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Long filesProcessed;

    /**
     * Total files to process.
     */
    @JsonProperty(value = "totalFilesToProcess", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalFilesToProcess;

    /**
     * Number of files not adhering to azure naming conventions which were
     * processed by automatic renaming.
     */
    @JsonProperty(value = "invalidFilesProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Long invalidFilesProcessed;

    /**
     * Total amount of data not adhering to azure naming conventions which were
     * processed by automatic renaming.
     */
    @JsonProperty(value = "invalidFileBytesUploaded", access = JsonProperty.Access.WRITE_ONLY)
    private Long invalidFileBytesUploaded;

    /**
     * Number of folders not adhering to azure naming conventions which were
     * processed by automatic renaming.
     */
    @JsonProperty(value = "renamedContainerCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long renamedContainerCount;

    /**
     * Number of files which could not be copied.
     */
    @JsonProperty(value = "filesErroredOut", access = JsonProperty.Access.WRITE_ONLY)
    private Long filesErroredOut;

    /**
     * To indicate directories errored out in the job.
     */
    @JsonProperty(value = "directoriesErroredOut", access = JsonProperty.Access.WRITE_ONLY)
    private Long directoriesErroredOut;

    /**
     * To indicate directories renamed.
     */
    @JsonProperty(value = "invalidDirectoriesProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private Long invalidDirectoriesProcessed;

    /**
     * To indicate if enumeration of data is in progress.
     * Until this is true, the TotalBytesToProcess may not be valid.
     */
    @JsonProperty(value = "isEnumerationInProgress", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isEnumerationInProgress;

    /**
     * Get name of the storage account. This will be empty for data account types other than storage account.
     *
     * @return the storageAccountName value
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Get transfer type of data. Possible values include: 'ImportToAzure', 'ExportFromAzure'.
     *
     * @return the transferType value
     */
    public TransferType transferType() {
        return this.transferType;
    }

    /**
     * Get data Account Type. Possible values include: 'StorageAccount', 'ManagedDisk'.
     *
     * @return the dataAccountType value
     */
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Get id of the account where the data needs to be uploaded.
     *
     * @return the accountId value
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Get to indicate bytes transferred.
     *
     * @return the bytesProcessed value
     */
    public Long bytesProcessed() {
        return this.bytesProcessed;
    }

    /**
     * Get total amount of data to be processed by the job.
     *
     * @return the totalBytesToProcess value
     */
    public Long totalBytesToProcess() {
        return this.totalBytesToProcess;
    }

    /**
     * Get number of files processed.
     *
     * @return the filesProcessed value
     */
    public Long filesProcessed() {
        return this.filesProcessed;
    }

    /**
     * Get total files to process.
     *
     * @return the totalFilesToProcess value
     */
    public Long totalFilesToProcess() {
        return this.totalFilesToProcess;
    }

    /**
     * Get number of files not adhering to azure naming conventions which were processed by automatic renaming.
     *
     * @return the invalidFilesProcessed value
     */
    public Long invalidFilesProcessed() {
        return this.invalidFilesProcessed;
    }

    /**
     * Get total amount of data not adhering to azure naming conventions which were processed by automatic renaming.
     *
     * @return the invalidFileBytesUploaded value
     */
    public Long invalidFileBytesUploaded() {
        return this.invalidFileBytesUploaded;
    }

    /**
     * Get number of folders not adhering to azure naming conventions which were processed by automatic renaming.
     *
     * @return the renamedContainerCount value
     */
    public Long renamedContainerCount() {
        return this.renamedContainerCount;
    }

    /**
     * Get number of files which could not be copied.
     *
     * @return the filesErroredOut value
     */
    public Long filesErroredOut() {
        return this.filesErroredOut;
    }

    /**
     * Get to indicate directories errored out in the job.
     *
     * @return the directoriesErroredOut value
     */
    public Long directoriesErroredOut() {
        return this.directoriesErroredOut;
    }

    /**
     * Get to indicate directories renamed.
     *
     * @return the invalidDirectoriesProcessed value
     */
    public Long invalidDirectoriesProcessed() {
        return this.invalidDirectoriesProcessed;
    }

    /**
     * Get to indicate if enumeration of data is in progress.
     Until this is true, the TotalBytesToProcess may not be valid.
     *
     * @return the isEnumerationInProgress value
     */
    public Boolean isEnumerationInProgress() {
        return this.isEnumerationInProgress;
    }

}
