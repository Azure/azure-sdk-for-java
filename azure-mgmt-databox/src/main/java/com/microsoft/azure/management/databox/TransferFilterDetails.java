/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databox;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Details of the filtering the transfer of data.
 */
public class TransferFilterDetails {
    /**
     * Type of the account of data. Possible values include: 'StorageAccount',
     * 'ManagedDisk'.
     */
    @JsonProperty(value = "dataAccountType", required = true)
    private DataAccountType dataAccountType;

    /**
     * Filter details to transfer blobs.
     */
    @JsonProperty(value = "blobFilterDetails")
    private BlobFilterDetails blobFilterDetails;

    /**
     * Filter details to transfer Azure files.
     */
    @JsonProperty(value = "azureFileFilterDetails")
    private AzureFileFilterDetails azureFileFilterDetails;

    /**
     * Details of the filter files to be used for data transfer.
     */
    @JsonProperty(value = "filterFileDetails")
    private List<FilterFileDetails> filterFileDetails;

    /**
     * Get type of the account of data. Possible values include: 'StorageAccount', 'ManagedDisk'.
     *
     * @return the dataAccountType value
     */
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Set type of the account of data. Possible values include: 'StorageAccount', 'ManagedDisk'.
     *
     * @param dataAccountType the dataAccountType value to set
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withDataAccountType(DataAccountType dataAccountType) {
        this.dataAccountType = dataAccountType;
        return this;
    }

    /**
     * Get filter details to transfer blobs.
     *
     * @return the blobFilterDetails value
     */
    public BlobFilterDetails blobFilterDetails() {
        return this.blobFilterDetails;
    }

    /**
     * Set filter details to transfer blobs.
     *
     * @param blobFilterDetails the blobFilterDetails value to set
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withBlobFilterDetails(BlobFilterDetails blobFilterDetails) {
        this.blobFilterDetails = blobFilterDetails;
        return this;
    }

    /**
     * Get filter details to transfer Azure files.
     *
     * @return the azureFileFilterDetails value
     */
    public AzureFileFilterDetails azureFileFilterDetails() {
        return this.azureFileFilterDetails;
    }

    /**
     * Set filter details to transfer Azure files.
     *
     * @param azureFileFilterDetails the azureFileFilterDetails value to set
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withAzureFileFilterDetails(AzureFileFilterDetails azureFileFilterDetails) {
        this.azureFileFilterDetails = azureFileFilterDetails;
        return this;
    }

    /**
     * Get details of the filter files to be used for data transfer.
     *
     * @return the filterFileDetails value
     */
    public List<FilterFileDetails> filterFileDetails() {
        return this.filterFileDetails;
    }

    /**
     * Set details of the filter files to be used for data transfer.
     *
     * @param filterFileDetails the filterFileDetails value to set
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withFilterFileDetails(List<FilterFileDetails> filterFileDetails) {
        this.filterFileDetails = filterFileDetails;
        return this;
    }

}
