/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.job;

import com.microsoft.azure.hdinsight.job.models.AppState;
import com.microsoft.azure.hdinsight.job.models.JobDetailRootJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobListJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobOperationsErrorResponseException;
import com.microsoft.azure.hdinsight.job.models.JobSubmissionJsonResponse;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public interface Jobs {
    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    JobDetailRootJsonObject get(String jobId);

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobDetailRootJsonObject> getAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback);

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<JobDetailRootJsonObject> getAsync(String jobId);

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<ServiceResponse<JobDetailRootJsonObject>> getWithServiceResponseAsync(String jobId);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    JobDetailRootJsonObject kill(String jobId);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobDetailRootJsonObject> killAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<JobDetailRootJsonObject> killAsync(String jobId);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<ServiceResponse<JobDetailRootJsonObject>> killWithServiceResponseAsync(String jobId);

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    List<JobListJsonObject> list();

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<JobListJsonObject>> listAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback);

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<List<JobListJsonObject>> listAsync();

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<ServiceResponse<List<JobListJsonObject>>> listWithServiceResponseAsync();

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    List<JobListJsonObject> listAfterJobId();

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<List<JobListJsonObject>> listAfterJobIdAsync();

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync();
    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    List<JobListJsonObject> listAfterJobId(String jobid, Integer numrecords);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords, final ServiceCallback<List<JobListJsonObject>> serviceCallback);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync(String jobid, Integer numrecords);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitHiveJob(byte[] content);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitHiveJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitMapReduceJob(byte[] content);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitMapReduceStreamingJob(byte[] content);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceStreamingJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitPigJob(byte[] content);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitPigJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitSqoopJob(byte[] content);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitSqoopJobWithServiceResponseAsync(byte[] content);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AppState object if successful.
     */
    AppState getAppState(String appId);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AppState> getAppStateAsync(String appId, final ServiceCallback<AppState> serviceCallback);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    Observable<AppState> getAppStateAsync(String appId);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    Observable<ServiceResponse<AppState>> getAppStateWithServiceResponseAsync(String appId);

}
