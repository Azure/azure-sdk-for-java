/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.job.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Gets or sets the object containing the job status information.
 */
public class Status {
    /**
     * The progress made on the cleanup.
     */
    @JsonProperty(value = "cleanupProgress")
    private Double cleanupProgress;

    /**
     * The information about any failures that have occurred.
     */
    @JsonProperty(value = "failureInfo")
    private String failureInfo;

    /**
     * The time at which the job completed. It is an integer in milliseconds,
     * as a Unix timestamp relative to 1/1/1970 00:00:00.
     */
    @JsonProperty(value = "finishTime")
    private Long finishTime;

    /**
     * The history file of the job.
     */
    @JsonProperty(value = "historyFile")
    private String historyFile;

    /**
     * The ACLs of the job.
     */
    @JsonProperty(value = "jobACLs")
    private Object jobACLs;

    /**
     * Whether or not the job has completed.
     */
    @JsonProperty(value = "jobComplete")
    private Boolean jobComplete;

    /**
     * The job configuration file.
     */
    @JsonProperty(value = "jobFile")
    private String jobFile;

    /**
     * The full ID of the job.
     */
    @JsonProperty(value = "jobId")
    private String jobId;

    /**
     * The ID of the job.
     */
    @JsonProperty(value = "jobID")
    private JobID jobID;

    /**
     * The user-specified job name.
     */
    @JsonProperty(value = "jobName")
    private String jobName;

    /**
     * The priority of the job.
     */
    @JsonProperty(value = "jobPriority")
    private String jobPriority;

    /**
     * The progress made on the maps.
     */
    @JsonProperty(value = "mapProgress")
    private Double mapProgress;

    /**
     * The amount of memory needed for the job.
     */
    @JsonProperty(value = "neededMem")
    private Long neededMem;

    /**
     * The number of slots reserved.
     */
    @JsonProperty(value = "numReservedSlots")
    private Integer numReservedSlots;

    /**
     * The number of slots used for the job.
     */
    @JsonProperty(value = "numUsedSlots")
    private Integer numUsedSlots;

    /**
     * The priority of the job.
     */
    @JsonProperty(value = "priority")
    private String priority;

    /**
     * The job queue name.
     */
    @JsonProperty(value = "queue")
    private String queue;

    /**
     * The progress made on the reduces.
     */
    @JsonProperty(value = "reduceProgress")
    private Double reduceProgress;

    /**
     * The amount of memory reserved for the job.
     */
    @JsonProperty(value = "reservedMem")
    private Long reservedMem;

    /**
     * Whether or not the job has been retired.
     */
    @JsonProperty(value = "retired")
    private Boolean retired;

    /**
     * The current state of the job.
     */
    @JsonProperty(value = "runState")
    private Integer runState;

    /**
     * The information about the scheduling of the job.
     */
    @JsonProperty(value = "schedulingInfo")
    private String schedulingInfo;

    /**
     * The progress made on the setup.
     */
    @JsonProperty(value = "setupProgress")
    private Double setupProgress;

    /**
     * The time at which the job started. It is an integer in milliseconds, as
     * a Unix timestamp relative to 1/1/1970 00:00:00.
     */
    @JsonProperty(value = "startTime")
    private Long startTime;

    /**
     * The state of the job.
     */
    @JsonProperty(value = "state")
    private String state;

    /**
     * The link to the web-ui for details of the job.
     */
    @JsonProperty(value = "trackingUrl")
    private String trackingUrl;

    /**
     * Whether job running in uber mode.
     */
    @JsonProperty(value = "uber")
    private Boolean uber;

    /**
     * The amount of memory used by the job.
     */
    @JsonProperty(value = "usedMem")
    private Long usedMem;

    /**
     * The userid of the person who submitted the job.
     */
    @JsonProperty(value = "username")
    private String username;

    /**
     * Get the progress made on the cleanup.
     *
     * @return the cleanupProgress value
     */
    public Double cleanupProgress() {
        return this.cleanupProgress;
    }

    /**
     * Set the progress made on the cleanup.
     *
     * @param cleanupProgress the cleanupProgress value to set
     * @return the Status object itself.
     */
    public Status withCleanupProgress(Double cleanupProgress) {
        this.cleanupProgress = cleanupProgress;
        return this;
    }

    /**
     * Get the information about any failures that have occurred.
     *
     * @return the failureInfo value
     */
    public String failureInfo() {
        return this.failureInfo;
    }

    /**
     * Set the information about any failures that have occurred.
     *
     * @param failureInfo the failureInfo value to set
     * @return the Status object itself.
     */
    public Status withFailureInfo(String failureInfo) {
        this.failureInfo = failureInfo;
        return this;
    }

    /**
     * Get the time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
     *
     * @return the finishTime value
     */
    public Long finishTime() {
        return this.finishTime;
    }

    /**
     * Set the time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
     *
     * @param finishTime the finishTime value to set
     * @return the Status object itself.
     */
    public Status withFinishTime(Long finishTime) {
        this.finishTime = finishTime;
        return this;
    }

    /**
     * Get the history file of the job.
     *
     * @return the historyFile value
     */
    public String historyFile() {
        return this.historyFile;
    }

    /**
     * Set the history file of the job.
     *
     * @param historyFile the historyFile value to set
     * @return the Status object itself.
     */
    public Status withHistoryFile(String historyFile) {
        this.historyFile = historyFile;
        return this;
    }

    /**
     * Get the ACLs of the job.
     *
     * @return the jobACLs value
     */
    public Object jobACLs() {
        return this.jobACLs;
    }

    /**
     * Set the ACLs of the job.
     *
     * @param jobACLs the jobACLs value to set
     * @return the Status object itself.
     */
    public Status withJobACLs(Object jobACLs) {
        this.jobACLs = jobACLs;
        return this;
    }

    /**
     * Get whether or not the job has completed.
     *
     * @return the jobComplete value
     */
    public Boolean jobComplete() {
        return this.jobComplete;
    }

    /**
     * Set whether or not the job has completed.
     *
     * @param jobComplete the jobComplete value to set
     * @return the Status object itself.
     */
    public Status withJobComplete(Boolean jobComplete) {
        this.jobComplete = jobComplete;
        return this;
    }

    /**
     * Get the job configuration file.
     *
     * @return the jobFile value
     */
    public String jobFile() {
        return this.jobFile;
    }

    /**
     * Set the job configuration file.
     *
     * @param jobFile the jobFile value to set
     * @return the Status object itself.
     */
    public Status withJobFile(String jobFile) {
        this.jobFile = jobFile;
        return this;
    }

    /**
     * Get the full ID of the job.
     *
     * @return the jobId value
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the full ID of the job.
     *
     * @param jobId the jobId value to set
     * @return the Status object itself.
     */
    public Status withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the ID of the job.
     *
     * @return the jobID value
     */
    public JobID jobID() {
        return this.jobID;
    }

    /**
     * Set the ID of the job.
     *
     * @param jobID the jobID value to set
     * @return the Status object itself.
     */
    public Status withJobID(JobID jobID) {
        this.jobID = jobID;
        return this;
    }

    /**
     * Get the user-specified job name.
     *
     * @return the jobName value
     */
    public String jobName() {
        return this.jobName;
    }

    /**
     * Set the user-specified job name.
     *
     * @param jobName the jobName value to set
     * @return the Status object itself.
     */
    public Status withJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }

    /**
     * Get the priority of the job.
     *
     * @return the jobPriority value
     */
    public String jobPriority() {
        return this.jobPriority;
    }

    /**
     * Set the priority of the job.
     *
     * @param jobPriority the jobPriority value to set
     * @return the Status object itself.
     */
    public Status withJobPriority(String jobPriority) {
        this.jobPriority = jobPriority;
        return this;
    }

    /**
     * Get the progress made on the maps.
     *
     * @return the mapProgress value
     */
    public Double mapProgress() {
        return this.mapProgress;
    }

    /**
     * Set the progress made on the maps.
     *
     * @param mapProgress the mapProgress value to set
     * @return the Status object itself.
     */
    public Status withMapProgress(Double mapProgress) {
        this.mapProgress = mapProgress;
        return this;
    }

    /**
     * Get the amount of memory needed for the job.
     *
     * @return the neededMem value
     */
    public Long neededMem() {
        return this.neededMem;
    }

    /**
     * Set the amount of memory needed for the job.
     *
     * @param neededMem the neededMem value to set
     * @return the Status object itself.
     */
    public Status withNeededMem(Long neededMem) {
        this.neededMem = neededMem;
        return this;
    }

    /**
     * Get the number of slots reserved.
     *
     * @return the numReservedSlots value
     */
    public Integer numReservedSlots() {
        return this.numReservedSlots;
    }

    /**
     * Set the number of slots reserved.
     *
     * @param numReservedSlots the numReservedSlots value to set
     * @return the Status object itself.
     */
    public Status withNumReservedSlots(Integer numReservedSlots) {
        this.numReservedSlots = numReservedSlots;
        return this;
    }

    /**
     * Get the number of slots used for the job.
     *
     * @return the numUsedSlots value
     */
    public Integer numUsedSlots() {
        return this.numUsedSlots;
    }

    /**
     * Set the number of slots used for the job.
     *
     * @param numUsedSlots the numUsedSlots value to set
     * @return the Status object itself.
     */
    public Status withNumUsedSlots(Integer numUsedSlots) {
        this.numUsedSlots = numUsedSlots;
        return this;
    }

    /**
     * Get the priority of the job.
     *
     * @return the priority value
     */
    public String priority() {
        return this.priority;
    }

    /**
     * Set the priority of the job.
     *
     * @param priority the priority value to set
     * @return the Status object itself.
     */
    public Status withPriority(String priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the job queue name.
     *
     * @return the queue value
     */
    public String queue() {
        return this.queue;
    }

    /**
     * Set the job queue name.
     *
     * @param queue the queue value to set
     * @return the Status object itself.
     */
    public Status withQueue(String queue) {
        this.queue = queue;
        return this;
    }

    /**
     * Get the progress made on the reduces.
     *
     * @return the reduceProgress value
     */
    public Double reduceProgress() {
        return this.reduceProgress;
    }

    /**
     * Set the progress made on the reduces.
     *
     * @param reduceProgress the reduceProgress value to set
     * @return the Status object itself.
     */
    public Status withReduceProgress(Double reduceProgress) {
        this.reduceProgress = reduceProgress;
        return this;
    }

    /**
     * Get the amount of memory reserved for the job.
     *
     * @return the reservedMem value
     */
    public Long reservedMem() {
        return this.reservedMem;
    }

    /**
     * Set the amount of memory reserved for the job.
     *
     * @param reservedMem the reservedMem value to set
     * @return the Status object itself.
     */
    public Status withReservedMem(Long reservedMem) {
        this.reservedMem = reservedMem;
        return this;
    }

    /**
     * Get whether or not the job has been retired.
     *
     * @return the retired value
     */
    public Boolean retired() {
        return this.retired;
    }

    /**
     * Set whether or not the job has been retired.
     *
     * @param retired the retired value to set
     * @return the Status object itself.
     */
    public Status withRetired(Boolean retired) {
        this.retired = retired;
        return this;
    }

    /**
     * Get the current state of the job.
     *
     * @return the runState value
     */
    public Integer runState() {
        return this.runState;
    }

    /**
     * Set the current state of the job.
     *
     * @param runState the runState value to set
     * @return the Status object itself.
     */
    public Status withRunState(Integer runState) {
        this.runState = runState;
        return this;
    }

    /**
     * Get the information about the scheduling of the job.
     *
     * @return the schedulingInfo value
     */
    public String schedulingInfo() {
        return this.schedulingInfo;
    }

    /**
     * Set the information about the scheduling of the job.
     *
     * @param schedulingInfo the schedulingInfo value to set
     * @return the Status object itself.
     */
    public Status withSchedulingInfo(String schedulingInfo) {
        this.schedulingInfo = schedulingInfo;
        return this;
    }

    /**
     * Get the progress made on the setup.
     *
     * @return the setupProgress value
     */
    public Double setupProgress() {
        return this.setupProgress;
    }

    /**
     * Set the progress made on the setup.
     *
     * @param setupProgress the setupProgress value to set
     * @return the Status object itself.
     */
    public Status withSetupProgress(Double setupProgress) {
        this.setupProgress = setupProgress;
        return this;
    }

    /**
     * Get the time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
     *
     * @return the startTime value
     */
    public Long startTime() {
        return this.startTime;
    }

    /**
     * Set the time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
     *
     * @param startTime the startTime value to set
     * @return the Status object itself.
     */
    public Status withStartTime(Long startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the state of the job.
     *
     * @return the state value
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state of the job.
     *
     * @param state the state value to set
     * @return the Status object itself.
     */
    public Status withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the link to the web-ui for details of the job.
     *
     * @return the trackingUrl value
     */
    public String trackingUrl() {
        return this.trackingUrl;
    }

    /**
     * Set the link to the web-ui for details of the job.
     *
     * @param trackingUrl the trackingUrl value to set
     * @return the Status object itself.
     */
    public Status withTrackingUrl(String trackingUrl) {
        this.trackingUrl = trackingUrl;
        return this;
    }

    /**
     * Get whether job running in uber mode.
     *
     * @return the uber value
     */
    public Boolean uber() {
        return this.uber;
    }

    /**
     * Set whether job running in uber mode.
     *
     * @param uber the uber value to set
     * @return the Status object itself.
     */
    public Status withUber(Boolean uber) {
        this.uber = uber;
        return this;
    }

    /**
     * Get the amount of memory used by the job.
     *
     * @return the usedMem value
     */
    public Long usedMem() {
        return this.usedMem;
    }

    /**
     * Set the amount of memory used by the job.
     *
     * @param usedMem the usedMem value to set
     * @return the Status object itself.
     */
    public Status withUsedMem(Long usedMem) {
        this.usedMem = usedMem;
        return this;
    }

    /**
     * Get the userid of the person who submitted the job.
     *
     * @return the username value
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the userid of the person who submitted the job.
     *
     * @param username the username value to set
     * @return the Status object itself.
     */
    public Status withUsername(String username) {
        this.username = username;
        return this;
    }

}
