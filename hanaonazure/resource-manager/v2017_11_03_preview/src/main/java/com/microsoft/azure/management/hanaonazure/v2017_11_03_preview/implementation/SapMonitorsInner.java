/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SapMonitors.
 */
public class SapMonitorsInner implements InnerSupportsGet<SapMonitorInner> {
    /** The Retrofit service to perform REST calls. */
    private SapMonitorsService service;
    /** The service client containing this operation class. */
    private HanaManagementClientImpl client;

    /**
     * Initializes an instance of SapMonitorsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SapMonitorsInner(Retrofit retrofit, HanaManagementClientImpl client) {
        this.service = retrofit.create(SapMonitorsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SapMonitors to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SapMonitorsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.SapMonitors getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("sapMonitorName") String sapMonitorName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.SapMonitors create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("sapMonitorName") String sapMonitorName, @Query("api-version") String apiVersion, @Body SapMonitorInner sapMonitorParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.SapMonitors beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("sapMonitorName") String sapMonitorName, @Query("api-version") String apiVersion, @Body SapMonitorInner sapMonitorParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets properties of a SAP monitor.
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SapMonitorInner object if successful.
     */
    public SapMonitorInner getByResourceGroup(String resourceGroupName, String sapMonitorName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, sapMonitorName).toBlocking().single().body();
    }

    /**
     * Gets properties of a SAP monitor.
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SapMonitorInner> getByResourceGroupAsync(String resourceGroupName, String sapMonitorName, final ServiceCallback<SapMonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, sapMonitorName), serviceCallback);
    }

    /**
     * Gets properties of a SAP monitor.
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SapMonitorInner object
     */
    public Observable<SapMonitorInner> getByResourceGroupAsync(String resourceGroupName, String sapMonitorName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, sapMonitorName).map(new Func1<ServiceResponse<SapMonitorInner>, SapMonitorInner>() {
            @Override
            public SapMonitorInner call(ServiceResponse<SapMonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets properties of a SAP monitor.
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SapMonitorInner object
     */
    public Observable<ServiceResponse<SapMonitorInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String sapMonitorName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sapMonitorName == null) {
            throw new IllegalArgumentException("Parameter sapMonitorName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, sapMonitorName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SapMonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<SapMonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SapMonitorInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SapMonitorInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SapMonitorInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SapMonitorInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SapMonitorInner object if successful.
     */
    public SapMonitorInner create(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter) {
        return createWithServiceResponseAsync(resourceGroupName, sapMonitorName, sapMonitorParameter).toBlocking().last().body();
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SapMonitorInner> createAsync(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter, final ServiceCallback<SapMonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, sapMonitorName, sapMonitorParameter), serviceCallback);
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SapMonitorInner> createAsync(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter) {
        return createWithServiceResponseAsync(resourceGroupName, sapMonitorName, sapMonitorParameter).map(new Func1<ServiceResponse<SapMonitorInner>, SapMonitorInner>() {
            @Override
            public SapMonitorInner call(ServiceResponse<SapMonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SapMonitorInner>> createWithServiceResponseAsync(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sapMonitorName == null) {
            throw new IllegalArgumentException("Parameter sapMonitorName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (sapMonitorParameter == null) {
            throw new IllegalArgumentException("Parameter sapMonitorParameter is required and cannot be null.");
        }
        Validator.validate(sapMonitorParameter);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, sapMonitorName, this.client.apiVersion(), sapMonitorParameter, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SapMonitorInner>() { }.getType());
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SapMonitorInner object if successful.
     */
    public SapMonitorInner beginCreate(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, sapMonitorName, sapMonitorParameter).toBlocking().single().body();
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SapMonitorInner> beginCreateAsync(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter, final ServiceCallback<SapMonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, sapMonitorName, sapMonitorParameter), serviceCallback);
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SapMonitorInner object
     */
    public Observable<SapMonitorInner> beginCreateAsync(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, sapMonitorName, sapMonitorParameter).map(new Func1<ServiceResponse<SapMonitorInner>, SapMonitorInner>() {
            @Override
            public SapMonitorInner call(ServiceResponse<SapMonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SapMonitorInner object
     */
    public Observable<ServiceResponse<SapMonitorInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sapMonitorName == null) {
            throw new IllegalArgumentException("Parameter sapMonitorName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (sapMonitorParameter == null) {
            throw new IllegalArgumentException("Parameter sapMonitorParameter is required and cannot be null.");
        }
        Validator.validate(sapMonitorParameter);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, sapMonitorName, this.client.apiVersion(), sapMonitorParameter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SapMonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<SapMonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SapMonitorInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SapMonitorInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SapMonitorInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SapMonitorInner>() { }.getType())
                .register(201, new TypeToken<SapMonitorInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
