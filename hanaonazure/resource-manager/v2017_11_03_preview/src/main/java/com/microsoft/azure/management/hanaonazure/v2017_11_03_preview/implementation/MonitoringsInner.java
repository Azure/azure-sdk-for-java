/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.MonitoringDetails;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Monitorings.
 */
public class MonitoringsInner {
    /** The Retrofit service to perform REST calls. */
    private MonitoringsService service;
    /** The service client containing this operation class. */
    private HanaManagementClientImpl client;

    /**
     * Initializes an instance of MonitoringsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MonitoringsInner(Retrofit retrofit, HanaManagementClientImpl client) {
        this.service = retrofit.create(MonitoringsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Monitorings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MonitoringsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.Monitorings hanaInstancesMethod" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/monitoring")
        Observable<Response<ResponseBody>> hanaInstancesMethod(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hanaInstanceName") String hanaInstanceName, @Query("api-version") String apiVersion, @Body MonitoringDetails monitoringParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.Monitorings beginHanaInstancesMethod" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/monitoring")
        Observable<Response<ResponseBody>> beginHanaInstancesMethod(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hanaInstanceName") String hanaInstanceName, @Query("api-version") String apiVersion, @Body MonitoringDetails monitoringParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void hanaInstancesMethod(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter) {
        hanaInstancesMethodWithServiceResponseAsync(resourceGroupName, hanaInstanceName, monitoringParameter).toBlocking().last().body();
    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> hanaInstancesMethodAsync(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(hanaInstancesMethodWithServiceResponseAsync(resourceGroupName, hanaInstanceName, monitoringParameter), serviceCallback);
    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> hanaInstancesMethodAsync(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter) {
        return hanaInstancesMethodWithServiceResponseAsync(resourceGroupName, hanaInstanceName, monitoringParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> hanaInstancesMethodWithServiceResponseAsync(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hanaInstanceName == null) {
            throw new IllegalArgumentException("Parameter hanaInstanceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (monitoringParameter == null) {
            throw new IllegalArgumentException("Parameter monitoringParameter is required and cannot be null.");
        }
        Validator.validate(monitoringParameter);
        Observable<Response<ResponseBody>> observable = service.hanaInstancesMethod(this.client.subscriptionId(), resourceGroupName, hanaInstanceName, this.client.apiVersion(), monitoringParameter, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginHanaInstancesMethod(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter) {
        beginHanaInstancesMethodWithServiceResponseAsync(resourceGroupName, hanaInstanceName, monitoringParameter).toBlocking().single().body();
    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginHanaInstancesMethodAsync(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginHanaInstancesMethodWithServiceResponseAsync(resourceGroupName, hanaInstanceName, monitoringParameter), serviceCallback);
    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginHanaInstancesMethodAsync(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter) {
        return beginHanaInstancesMethodWithServiceResponseAsync(resourceGroupName, hanaInstanceName, monitoringParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to monitor a SAP HANA instance.
     *
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param monitoringParameter Request body that only contains monitoring attributes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginHanaInstancesMethodWithServiceResponseAsync(String resourceGroupName, String hanaInstanceName, MonitoringDetails monitoringParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hanaInstanceName == null) {
            throw new IllegalArgumentException("Parameter hanaInstanceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (monitoringParameter == null) {
            throw new IllegalArgumentException("Parameter monitoringParameter is required and cannot be null.");
        }
        Validator.validate(monitoringParameter);
        return service.beginHanaInstancesMethod(this.client.subscriptionId(), resourceGroupName, hanaInstanceName, this.client.apiVersion(), monitoringParameter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginHanaInstancesMethodDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginHanaInstancesMethodDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
