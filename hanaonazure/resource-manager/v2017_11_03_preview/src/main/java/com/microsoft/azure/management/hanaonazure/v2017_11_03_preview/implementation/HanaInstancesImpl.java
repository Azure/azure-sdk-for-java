/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.HanaInstances;
import com.microsoft.azure.management.hanaonazure.v2017_11_03_preview.HanaInstance;
import rx.Observable;
import rx.Completable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;

class HanaInstancesImpl extends GroupableResourcesCoreImpl<HanaInstance, HanaInstanceImpl, HanaInstanceInner, HanaInstancesInner, HanaOnAzureManager>  implements HanaInstances {
    protected HanaInstancesImpl(HanaOnAzureManager manager) {
        super(manager.inner().hanaInstances(), manager);
    }

    @Override
    protected Observable<HanaInstanceInner> getInnerAsync(String resourceGroupName, String name) {
        HanaInstancesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        HanaInstancesInner client = this.inner();
        return Completable.error(new Throwable("Delete by RG not supported for this resource")); // NOP Delete by RG not supported
    }

    @Override
    public PagedList<HanaInstance> listByResourceGroup(String resourceGroupName) {
        HanaInstancesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<HanaInstance> listByResourceGroupAsync(String resourceGroupName) {
        HanaInstancesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<HanaInstanceInner>, Iterable<HanaInstanceInner>>() {
            @Override
            public Iterable<HanaInstanceInner> call(Page<HanaInstanceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<HanaInstanceInner, HanaInstance>() {
            @Override
            public HanaInstance call(HanaInstanceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<HanaInstance> list() {
        HanaInstancesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<HanaInstance> listAsync() {
        HanaInstancesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<HanaInstanceInner>, Iterable<HanaInstanceInner>>() {
            @Override
            public Iterable<HanaInstanceInner> call(Page<HanaInstanceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<HanaInstanceInner, HanaInstance>() {
            @Override
            public HanaInstance call(HanaInstanceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Completable restartAsync(String resourceGroupName, String hanaInstanceName) {
        HanaInstancesInner client = this.inner();
        return client.restartAsync(resourceGroupName, hanaInstanceName).toCompletable();
    }

    @Override
    protected HanaInstanceImpl wrapModel(HanaInstanceInner inner) {
        return  new HanaInstanceImpl(inner.name(), inner, manager());
    }

    @Override
    protected HanaInstanceImpl wrapModel(String name) {
        return null; // Model is not creatable
    }

}
