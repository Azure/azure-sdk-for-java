/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.batch.protocol;

import com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders;
import com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions;
import com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders;
import com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions;
import com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders;
import com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions;
import com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders;
import com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions;
import com.microsoft.azure.batch.protocol.models.FileGetNodeFilePropertiesFromComputeNodeHeaders;
import com.microsoft.azure.batch.protocol.models.FileGetNodeFilePropertiesFromComputeNodeOptions;
import com.microsoft.azure.batch.protocol.models.FileGetNodeFilePropertiesFromTaskHeaders;
import com.microsoft.azure.batch.protocol.models.FileGetNodeFilePropertiesFromTaskOptions;
import com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders;
import com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions;
import com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions;
import com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders;
import com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions;
import com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions;
import com.microsoft.azure.batch.protocol.models.NodeFile;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.InputStream;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Files.
 */
public interface Files {
    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     */
    void deleteFromTask(String jobId, String taskId, String fileName);

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String fileName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String fileName);

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String fileName);
    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromTaskOptions Additional parameters for the operation
     */
    void deleteFromTask(String jobId, String taskId, String fileName, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions);

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromTaskOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String fileName, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromTaskOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String fileName, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions);

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to delete.
     * @param fileName The path to the task file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromTaskOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String fileName, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions);

    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @return the InputStream object if successful.
     */
    InputStream getFromTask(String jobId, String taskId, String fileName);

    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String fileName, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @return the observable to the InputStream object
     */
    Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String fileName);

    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String fileName);
    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromTaskOptions Additional parameters for the operation
     * @return the InputStream object if successful.
     */
    InputStream getFromTask(String jobId, String taskId, String fileName, FileGetFromTaskOptions fileGetFromTaskOptions);

    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromTaskOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String fileName, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromTaskOptions Additional parameters for the operation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String fileName, FileGetFromTaskOptions fileGetFromTaskOptions);

    /**
     * Returns the content of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to retrieve.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromTaskOptions Additional parameters for the operation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String fileName, FileGetFromTaskOptions fileGetFromTaskOptions);

    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     */
    void getNodeFilePropertiesFromTask(String jobId, String taskId, String fileName);

    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> getNodeFilePropertiesFromTaskAsync(String jobId, String taskId, String fileName, final ServiceCallback<Void> serviceCallback);

    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> getNodeFilePropertiesFromTaskAsync(String jobId, String taskId, String fileName);

    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileGetNodeFilePropertiesFromTaskHeaders>> getNodeFilePropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String fileName);
    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromTaskOptions Additional parameters for the operation
     */
    void getNodeFilePropertiesFromTask(String jobId, String taskId, String fileName, FileGetNodeFilePropertiesFromTaskOptions fileGetNodeFilePropertiesFromTaskOptions);

    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromTaskOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> getNodeFilePropertiesFromTaskAsync(String jobId, String taskId, String fileName, FileGetNodeFilePropertiesFromTaskOptions fileGetNodeFilePropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback);

    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromTaskOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> getNodeFilePropertiesFromTaskAsync(String jobId, String taskId, String fileName, FileGetNodeFilePropertiesFromTaskOptions fileGetNodeFilePropertiesFromTaskOptions);

    /**
     * Gets the properties of the specified task file.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose file you want to get the properties of.
     * @param fileName The path to the task file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromTaskOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileGetNodeFilePropertiesFromTaskHeaders>> getNodeFilePropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String fileName, FileGetNodeFilePropertiesFromTaskOptions fileGetNodeFilePropertiesFromTaskOptions);

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     */
    void deleteFromComputeNode(String poolId, String nodeId, String fileName);

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String fileName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String fileName);

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String fileName);
    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromComputeNodeOptions Additional parameters for the operation
     */
    void deleteFromComputeNode(String poolId, String nodeId, String fileName, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions);

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromComputeNodeOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String fileName, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromComputeNodeOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String fileName, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions);

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node from which you want to delete the file.
     * @param fileName The path to the file that you want to delete.
     * @param recursive Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @param fileDeleteFromComputeNodeOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String fileName, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions);

    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @return the InputStream object if successful.
     */
    InputStream getFromComputeNode(String poolId, String nodeId, String fileName);

    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String fileName, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @return the observable to the InputStream object
     */
    Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String fileName);

    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String fileName);
    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromComputeNodeOptions Additional parameters for the operation
     * @return the InputStream object if successful.
     */
    InputStream getFromComputeNode(String poolId, String nodeId, String fileName, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions);

    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromComputeNodeOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String fileName, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromComputeNodeOptions Additional parameters for the operation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String fileName, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions);

    /**
     * Returns the content of the specified task file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the task file that you want to get the content of.
     * @param fileGetFromComputeNodeOptions Additional parameters for the operation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String fileName, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions);

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     */
    void getNodeFilePropertiesFromComputeNode(String poolId, String nodeId, String fileName);

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> getNodeFilePropertiesFromComputeNodeAsync(String poolId, String nodeId, String fileName, final ServiceCallback<Void> serviceCallback);

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> getNodeFilePropertiesFromComputeNodeAsync(String poolId, String nodeId, String fileName);

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileGetNodeFilePropertiesFromComputeNodeHeaders>> getNodeFilePropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String fileName);
    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromComputeNodeOptions Additional parameters for the operation
     */
    void getNodeFilePropertiesFromComputeNode(String poolId, String nodeId, String fileName, FileGetNodeFilePropertiesFromComputeNodeOptions fileGetNodeFilePropertiesFromComputeNodeOptions);

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromComputeNodeOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> getNodeFilePropertiesFromComputeNodeAsync(String poolId, String nodeId, String fileName, FileGetNodeFilePropertiesFromComputeNodeOptions fileGetNodeFilePropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback);

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromComputeNodeOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> getNodeFilePropertiesFromComputeNodeAsync(String poolId, String nodeId, String fileName, FileGetNodeFilePropertiesFromComputeNodeOptions fileGetNodeFilePropertiesFromComputeNodeOptions);

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node that contains the file.
     * @param fileName The path to the compute node file that you want to get the properties of.
     * @param fileGetNodeFilePropertiesFromComputeNodeOptions Additional parameters for the operation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FileGetNodeFilePropertiesFromComputeNodeHeaders>> getNodeFilePropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String fileName, FileGetNodeFilePropertiesFromComputeNodeOptions fileGetNodeFilePropertiesFromComputeNodeOptions);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromTask(final String jobId, final String taskId);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId);
    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @param recursive Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files.
     * @param fileListFromTaskOptions Additional parameters for the operation
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @param recursive Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files.
     * @param fileListFromTaskOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @param recursive Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files.
     * @param fileListFromTaskOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param jobId The ID of the job that contains the task.
     * @param taskId The ID of the task whose files you want to list.
     * @param recursive Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files.
     * @param fileListFromTaskOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId);
    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @param recursive Whether to list children of a directory.
     * @param fileListFromComputeNodeOptions Additional parameters for the operation
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @param recursive Whether to list children of a directory.
     * @param fileListFromComputeNodeOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @param recursive Whether to list children of a directory.
     * @param fileListFromComputeNodeOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param poolId The ID of the pool that contains the compute node.
     * @param nodeId The ID of the compute node whose files you want to list.
     * @param recursive Whether to list children of a directory.
     * @param fileListFromComputeNodeOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromTaskNext(final String nextPageLink);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink);
    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromTaskNextOptions Additional parameters for the operation
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromTaskNextOptions Additional parameters for the operation
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromTaskNextOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions);

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromTaskNextOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink);
    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromComputeNodeNextOptions Additional parameters for the operation
     * @return the PagedList&lt;NodeFile&gt; object if successful.
     */
    PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromComputeNodeNextOptions Additional parameters for the operation
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromComputeNodeNextOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions);

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param fileListFromComputeNodeNextOptions Additional parameters for the operation
     * @return the observable to the PagedList&lt;NodeFile&gt; object
     */
    Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions);

}
