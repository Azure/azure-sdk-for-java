/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.batch.protocol.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A Job Preparation task to run before any tasks of the job on any given
 * compute node.
 */
public class JobPreparationTask {
    /**
     * A string that uniquely identifies the job preparation task within the
     * job.
     * The ID can contain any combination of alphanumeric characters including
     * hyphens and underscores and cannot contain more than 64 characters. If
     * you do not specify this property, the Batch service assigns a default
     * value of 'jobpreparation'. No other task in the job can have the same id
     * as the Job Preparation task. If you try to submit a task with the same
     * id, the Batch service rejects the request with error code
     * TaskIdSameAsJobPreparationTask; if you are calling the REST API
     * directly, the HTTP status code is 409 (Conflict).
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * The command line of the Job Preparation task.
     * The command line does not run under a shell, and therefore cannot take
     * advantage of shell features such as environment variable expansion. If
     * you want to take advantage of such features, you should invoke the shell
     * in the command line, for example using "cmd /c MyCommand" in Windows or
     * "/bin/sh -c MyCommand" in Linux.
     */
    @JsonProperty(value = "commandLine", required = true)
    private String commandLine;

    /**
     * A list of files that the Batch service will download to the compute node
     * before running the command line.
     * Files listed under this element are located in the task's working
     * directory.
     */
    @JsonProperty(value = "resourceFiles")
    private List<ResourceFile> resourceFiles;

    /**
     * A list of environment variable settings for the Job Preparation task.
     */
    @JsonProperty(value = "environmentSettings")
    private List<EnvironmentSetting> environmentSettings;

    /**
     * Constraints that apply to the Job Preparation task.
     */
    @JsonProperty(value = "constraints")
    private TaskConstraints constraints;

    /**
     * Whether the Batch service should wait for the Job Preparation task to
     * complete successfully before scheduling any other tasks of the job on
     * the compute node.
     * If true and the Job Preparation task fails on a compute node, the Batch
     * service retries the Job Preparation task up to its maximum retry count
     * (as specified in the constraints element). If the task has still not
     * completed successfully after all retries, then the Batch service will
     * not schedule tasks of the job to the compute node. The compute node
     * remains active and eligible to run tasks of other jobs. If false, the
     * Batch service will not wait for the Job Preparation task to complete. In
     * this case, other tasks of the job can start executing on the compute
     * node while the Job Preparation task is still running; and even if the
     * Job Preparation task fails, new tasks will continue to be scheduled on
     * the node. The default value is true.
     */
    @JsonProperty(value = "waitForSuccess")
    private Boolean waitForSuccess;

    /**
     * Whether to run the Job Preparation task in elevated mode. The default
     * value is false.
     */
    @JsonProperty(value = "runElevated")
    private Boolean runElevated;

    /**
     * Whether the Batch service should rerun the Job Preparation task after a
     * compute node reboots.
     * The Job Preparation task is always rerun if a compute node is reimaged,
     * or if the Job Preparation task did not complete (e.g. because the reboot
     * occurred while the task was running). Therefore, you should always write
     * a Job Preparation task to be idempotent and to behave correctly if run
     * multiple times. The default value is true.
     */
    @JsonProperty(value = "rerunOnNodeRebootAfterSuccess")
    private Boolean rerunOnNodeRebootAfterSuccess;

    /**
     * Get the id value.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id value.
     *
     * @param id the id value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the commandLine value.
     *
     * @return the commandLine value
     */
    public String commandLine() {
        return this.commandLine;
    }

    /**
     * Set the commandLine value.
     *
     * @param commandLine the commandLine value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withCommandLine(String commandLine) {
        this.commandLine = commandLine;
        return this;
    }

    /**
     * Get the resourceFiles value.
     *
     * @return the resourceFiles value
     */
    public List<ResourceFile> resourceFiles() {
        return this.resourceFiles;
    }

    /**
     * Set the resourceFiles value.
     *
     * @param resourceFiles the resourceFiles value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withResourceFiles(List<ResourceFile> resourceFiles) {
        this.resourceFiles = resourceFiles;
        return this;
    }

    /**
     * Get the environmentSettings value.
     *
     * @return the environmentSettings value
     */
    public List<EnvironmentSetting> environmentSettings() {
        return this.environmentSettings;
    }

    /**
     * Set the environmentSettings value.
     *
     * @param environmentSettings the environmentSettings value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
        this.environmentSettings = environmentSettings;
        return this;
    }

    /**
     * Get the constraints value.
     *
     * @return the constraints value
     */
    public TaskConstraints constraints() {
        return this.constraints;
    }

    /**
     * Set the constraints value.
     *
     * @param constraints the constraints value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withConstraints(TaskConstraints constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the waitForSuccess value.
     *
     * @return the waitForSuccess value
     */
    public Boolean waitForSuccess() {
        return this.waitForSuccess;
    }

    /**
     * Set the waitForSuccess value.
     *
     * @param waitForSuccess the waitForSuccess value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withWaitForSuccess(Boolean waitForSuccess) {
        this.waitForSuccess = waitForSuccess;
        return this;
    }

    /**
     * Get the runElevated value.
     *
     * @return the runElevated value
     */
    public Boolean runElevated() {
        return this.runElevated;
    }

    /**
     * Set the runElevated value.
     *
     * @param runElevated the runElevated value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withRunElevated(Boolean runElevated) {
        this.runElevated = runElevated;
        return this;
    }

    /**
     * Get the rerunOnNodeRebootAfterSuccess value.
     *
     * @return the rerunOnNodeRebootAfterSuccess value
     */
    public Boolean rerunOnNodeRebootAfterSuccess() {
        return this.rerunOnNodeRebootAfterSuccess;
    }

    /**
     * Set the rerunOnNodeRebootAfterSuccess value.
     *
     * @param rerunOnNodeRebootAfterSuccess the rerunOnNodeRebootAfterSuccess value to set
     * @return the JobPreparationTask object itself.
     */
    public JobPreparationTask withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess) {
        this.rerunOnNodeRebootAfterSuccess = rerunOnNodeRebootAfterSuccess;
        return this;
    }

}
