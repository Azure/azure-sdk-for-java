/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.edgegateway;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Periodic timer event source.
 */
public class PeriodicTimerSourceInfo {
    /**
     * Time time [UTC] of the day, from which the trigger will be valid.
     * Schedule will be computed with reference to the time specified.
     */
    @JsonProperty(value = "startTime", required = true)
    private DateTime startTime;

    /**
     * Periodic frequency at which timer event needs to be raised. Supports
     * Daily, Hourly, Minutes and seconds.
     */
    @JsonProperty(value = "schedule", required = true)
    private String schedule;

    /**
     * Topic with which periodic events needs to be published to IOT device.
     */
    @JsonProperty(value = "topic")
    private String topic;

    /**
     * Get time time [UTC] of the day, from which the trigger will be valid. Schedule will be computed with reference to the time specified.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Set time time [UTC] of the day, from which the trigger will be valid. Schedule will be computed with reference to the time specified.
     *
     * @param startTime the startTime value to set
     * @return the PeriodicTimerSourceInfo object itself.
     */
    public PeriodicTimerSourceInfo withStartTime(DateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get periodic frequency at which timer event needs to be raised. Supports Daily, Hourly, Minutes and seconds.
     *
     * @return the schedule value
     */
    public String schedule() {
        return this.schedule;
    }

    /**
     * Set periodic frequency at which timer event needs to be raised. Supports Daily, Hourly, Minutes and seconds.
     *
     * @param schedule the schedule value to set
     * @return the PeriodicTimerSourceInfo object itself.
     */
    public PeriodicTimerSourceInfo withSchedule(String schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get topic with which periodic events needs to be published to IOT device.
     *
     * @return the topic value
     */
    public String topic() {
        return this.topic;
    }

    /**
     * Set topic with which periodic events needs to be published to IOT device.
     *
     * @param topic the topic value to set
     * @return the PeriodicTimerSourceInfo object itself.
     */
    public PeriodicTimerSourceInfo withTopic(String topic) {
        this.topic = topic;
        return this;
    }

}
