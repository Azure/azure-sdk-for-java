/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storagesync.v2019_02_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storagesync.v2019_02_01.Workflows;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import rx.Completable;
import com.microsoft.azure.management.storagesync.v2019_02_01.Workflow;

class WorkflowsImpl extends WrapperImpl<WorkflowsInner> implements Workflows {
    private final StorageSyncManager manager;

    WorkflowsImpl(StorageSyncManager manager) {
        super(manager.inner().workflows());
        this.manager = manager;
    }

    public StorageSyncManager manager() {
        return this.manager;
    }

    private WorkflowImpl wrapModel(WorkflowInner inner) {
        return  new WorkflowImpl(inner, manager());
    }

    @Override
    public Completable abortAsync(String resourceGroupName, String storageSyncServiceName, String workflowId) {
        WorkflowsInner client = this.inner();
        return client.abortAsync(resourceGroupName, storageSyncServiceName, workflowId).toCompletable();
    }

    @Override
    public Observable<Workflow> listByStorageSyncServiceAsync(String resourceGroupName, String storageSyncServiceName) {
        WorkflowsInner client = this.inner();
        return client.listByStorageSyncServiceAsync(resourceGroupName, storageSyncServiceName)
        .flatMap(new Func1<List<WorkflowInner>, Observable<WorkflowInner>>() {
            @Override
            public Observable<WorkflowInner> call(List<WorkflowInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<WorkflowInner, Workflow>() {
            @Override
            public Workflow call(WorkflowInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Workflow> getAsync(String resourceGroupName, String storageSyncServiceName, String workflowId) {
        WorkflowsInner client = this.inner();
        return client.getAsync(resourceGroupName, storageSyncServiceName, workflowId)
        .map(new Func1<WorkflowInner, Workflow>() {
            @Override
            public Workflow call(WorkflowInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
