/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storagesync.v2019_02_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storagesync.v2019_02_01.SyncGroups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.storagesync.v2019_02_01.SyncGroup;

class SyncGroupsImpl extends WrapperImpl<SyncGroupsInner> implements SyncGroups {
    private final StorageSyncManager manager;

    SyncGroupsImpl(StorageSyncManager manager) {
        super(manager.inner().syncGroups());
        this.manager = manager;
    }

    public StorageSyncManager manager() {
        return this.manager;
    }

    @Override
    public SyncGroupImpl define(String name) {
        return wrapModel(name);
    }

    private SyncGroupImpl wrapModel(SyncGroupInner inner) {
        return  new SyncGroupImpl(inner, manager());
    }

    private SyncGroupImpl wrapModel(String name) {
        return new SyncGroupImpl(name, this.manager());
    }

    @Override
    public Observable<SyncGroup> listByStorageSyncServiceAsync(String resourceGroupName, String storageSyncServiceName) {
        SyncGroupsInner client = this.inner();
        return client.listByStorageSyncServiceAsync(resourceGroupName, storageSyncServiceName)
        .flatMap(new Func1<List<SyncGroupInner>, Observable<SyncGroupInner>>() {
            @Override
            public Observable<SyncGroupInner> call(List<SyncGroupInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<SyncGroupInner, SyncGroup>() {
            @Override
            public SyncGroup call(SyncGroupInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<SyncGroup> getAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        SyncGroupsInner client = this.inner();
        return client.getAsync(resourceGroupName, storageSyncServiceName, syncGroupName)
        .map(new Func1<SyncGroupInner, SyncGroup>() {
            @Override
            public SyncGroup call(SyncGroupInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        SyncGroupsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName).toCompletable();
    }

}
