/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.containerregistry.v2019_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.containerregistry.v2019_04_01.Replications;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.containerregistry.v2019_04_01.Replication;

class ReplicationsImpl extends WrapperImpl<ReplicationsInner> implements Replications {
    private final ContainerRegistryManager manager;

    ReplicationsImpl(ContainerRegistryManager manager) {
        super(manager.inner().replications());
        this.manager = manager;
    }

    public ContainerRegistryManager manager() {
        return this.manager;
    }

    @Override
    public ReplicationImpl define(String name) {
        return wrapModel(name);
    }

    private ReplicationImpl wrapModel(ReplicationInner inner) {
        return  new ReplicationImpl(inner, manager());
    }

    private ReplicationImpl wrapModel(String name) {
        return new ReplicationImpl(name, this.manager());
    }

    @Override
    public Observable<Replication> listAsync(final String resourceGroupName, final String registryName) {
        ReplicationsInner client = this.inner();
        return client.listAsync(resourceGroupName, registryName)
        .flatMapIterable(new Func1<Page<ReplicationInner>, Iterable<ReplicationInner>>() {
            @Override
            public Iterable<ReplicationInner> call(Page<ReplicationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReplicationInner, Replication>() {
            @Override
            public Replication call(ReplicationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Replication> getAsync(String resourceGroupName, String registryName, String replicationName) {
        ReplicationsInner client = this.inner();
        return client.getAsync(resourceGroupName, registryName, replicationName)
        .map(new Func1<ReplicationInner, Replication>() {
            @Override
            public Replication call(ReplicationInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String registryName, String replicationName) {
        ReplicationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, registryName, replicationName).toCompletable();
    }

}
