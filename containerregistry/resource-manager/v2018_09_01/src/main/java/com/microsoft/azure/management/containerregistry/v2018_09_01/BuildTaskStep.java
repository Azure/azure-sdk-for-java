/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2018_09_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The properties of a build task step.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("BuildTask")
public class BuildTaskStep extends TaskStepProperties {
    /**
     * The build task template/definition file path relative to the source
     * context.
     */
    @JsonProperty(value = "definitionFilePath", required = true)
    private String definitionFilePath;

    /**
     * The task values/parameters file path relative to the source context.
     */
    @JsonProperty(value = "valuesFilePath")
    private String valuesFilePath;

    /**
     * The collection of overridable values that can be passed when running a
     * task.
     */
    @JsonProperty(value = "values")
    private List<SetValue> values;

    /**
     * The URL(absolute or relative) of the source context for the build task.
     * If it is relative, the context will be relative to the source repository
     * URL of the build task.
     */
    @JsonProperty(value = "contextPath")
    private String contextPath;

    /**
     * Get the build task template/definition file path relative to the source context.
     *
     * @return the definitionFilePath value
     */
    public String definitionFilePath() {
        return this.definitionFilePath;
    }

    /**
     * Set the build task template/definition file path relative to the source context.
     *
     * @param definitionFilePath the definitionFilePath value to set
     * @return the BuildTaskStep object itself.
     */
    public BuildTaskStep withDefinitionFilePath(String definitionFilePath) {
        this.definitionFilePath = definitionFilePath;
        return this;
    }

    /**
     * Get the task values/parameters file path relative to the source context.
     *
     * @return the valuesFilePath value
     */
    public String valuesFilePath() {
        return this.valuesFilePath;
    }

    /**
     * Set the task values/parameters file path relative to the source context.
     *
     * @param valuesFilePath the valuesFilePath value to set
     * @return the BuildTaskStep object itself.
     */
    public BuildTaskStep withValuesFilePath(String valuesFilePath) {
        this.valuesFilePath = valuesFilePath;
        return this;
    }

    /**
     * Get the collection of overridable values that can be passed when running a task.
     *
     * @return the values value
     */
    public List<SetValue> values() {
        return this.values;
    }

    /**
     * Set the collection of overridable values that can be passed when running a task.
     *
     * @param values the values value to set
     * @return the BuildTaskStep object itself.
     */
    public BuildTaskStep withValues(List<SetValue> values) {
        this.values = values;
        return this;
    }

    /**
     * Get the URL(absolute or relative) of the source context for the build task.
     If it is relative, the context will be relative to the source repository URL of the build task.
     *
     * @return the contextPath value
     */
    public String contextPath() {
        return this.contextPath;
    }

    /**
     * Set the URL(absolute or relative) of the source context for the build task.
     If it is relative, the context will be relative to the source repository URL of the build task.
     *
     * @param contextPath the contextPath value to set
     * @return the BuildTaskStep object itself.
     */
    public BuildTaskStep withContextPath(String contextPath) {
        this.contextPath = contextPath;
        return this;
    }

}
