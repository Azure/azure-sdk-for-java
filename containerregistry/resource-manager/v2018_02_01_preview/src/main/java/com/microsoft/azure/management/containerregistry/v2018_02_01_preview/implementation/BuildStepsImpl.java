/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.containerregistry.v2018_02_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildSteps;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildArgument;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildStep;

class BuildStepsImpl extends WrapperImpl<BuildStepsInner> implements BuildSteps {
    private final ContainerRegistryManager manager;

    BuildStepsImpl(ContainerRegistryManager manager) {
        super(manager.inner().buildSteps());
        this.manager = manager;
    }

    public ContainerRegistryManager manager() {
        return this.manager;
    }

    @Override
    public BuildStepImpl define(String name) {
        return wrapModel(name);
    }

    private BuildStepImpl wrapModel(BuildStepInner inner) {
        return  new BuildStepImpl(inner, manager());
    }

    private BuildStepImpl wrapModel(String name) {
        return new BuildStepImpl(name, this.manager());
    }

    @Override
    public Observable<BuildArgument> listBuildArgumentsAsync(final String resourceGroupName, final String registryName, final String buildTaskName, final String stepName) {
        BuildStepsInner client = this.inner();
        return client.listBuildArgumentsAsync(resourceGroupName, registryName, buildTaskName, stepName)
        .flatMapIterable(new Func1<Page<BuildArgumentInner>, Iterable<BuildArgumentInner>>() {
            @Override
            public Iterable<BuildArgumentInner> call(Page<BuildArgumentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BuildArgumentInner, BuildArgument>() {
            @Override
            public BuildArgument call(BuildArgumentInner inner) {
                return new BuildArgumentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BuildStep> listAsync(final String resourceGroupName, final String registryName, final String buildTaskName) {
        BuildStepsInner client = this.inner();
        return client.listAsync(resourceGroupName, registryName, buildTaskName)
        .flatMapIterable(new Func1<Page<BuildStepInner>, Iterable<BuildStepInner>>() {
            @Override
            public Iterable<BuildStepInner> call(Page<BuildStepInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BuildStepInner, BuildStep>() {
            @Override
            public BuildStep call(BuildStepInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<BuildStep> getAsync(String resourceGroupName, String registryName, String buildTaskName, String stepName) {
        BuildStepsInner client = this.inner();
        return client.getAsync(resourceGroupName, registryName, buildTaskName, stepName)
        .map(new Func1<BuildStepInner, BuildStep>() {
            @Override
            public BuildStep call(BuildStepInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String registryName, String buildTaskName, String stepName) {
        BuildStepsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, registryName, buildTaskName, stepName).toCompletable();
    }

}
