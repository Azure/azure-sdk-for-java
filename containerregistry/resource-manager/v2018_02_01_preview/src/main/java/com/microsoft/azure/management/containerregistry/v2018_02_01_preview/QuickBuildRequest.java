/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2018_02_01_preview;

import java.util.List;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.implementation.BuildArgumentInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The queue build request parameters for a quick build.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("QuickBuild")
public class QuickBuildRequest extends QueueBuildRequest {
    /**
     * The fully qualified image names including the repository and tag.
     */
    @JsonProperty(value = "imageNames")
    private List<String> imageNames;

    /**
     * The URL(absolute or relative) of the source that needs to be built. For
     * Docker build, it can be an URL to a tar or github repository as
     * supported by Docker.
     * If it is relative URL, the relative path should be obtained from calling
     * getSourceUploadUrl API.
     */
    @JsonProperty(value = "sourceLocation", required = true)
    private String sourceLocation;

    /**
     * The collection of build arguments to be used.
     */
    @JsonProperty(value = "buildArguments")
    private List<BuildArgumentInner> buildArguments;

    /**
     * The value of this property indicates whether the image built should be
     * pushed to the registry or not.
     */
    @JsonProperty(value = "isPushEnabled")
    private Boolean isPushEnabled;

    /**
     * The value of this property indicates whether the image cache is enabled
     * or not.
     */
    @JsonProperty(value = "noCache")
    private Boolean noCache;

    /**
     * Build timeout in seconds.
     */
    @JsonProperty(value = "timeout")
    private Integer timeout;

    /**
     * The platform properties against which the build will happen.
     */
    @JsonProperty(value = "platform", required = true)
    private PlatformProperties platform;

    /**
     * The Docker file path relative to the source location.
     */
    @JsonProperty(value = "dockerFilePath", required = true)
    private String dockerFilePath;

    /**
     * Get the fully qualified image names including the repository and tag.
     *
     * @return the imageNames value
     */
    public List<String> imageNames() {
        return this.imageNames;
    }

    /**
     * Set the fully qualified image names including the repository and tag.
     *
     * @param imageNames the imageNames value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withImageNames(List<String> imageNames) {
        this.imageNames = imageNames;
        return this;
    }

    /**
     * Get the URL(absolute or relative) of the source that needs to be built. For Docker build, it can be an URL to a tar or github repository as supported by Docker.
     If it is relative URL, the relative path should be obtained from calling getSourceUploadUrl API.
     *
     * @return the sourceLocation value
     */
    public String sourceLocation() {
        return this.sourceLocation;
    }

    /**
     * Set the URL(absolute or relative) of the source that needs to be built. For Docker build, it can be an URL to a tar or github repository as supported by Docker.
     If it is relative URL, the relative path should be obtained from calling getSourceUploadUrl API.
     *
     * @param sourceLocation the sourceLocation value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withSourceLocation(String sourceLocation) {
        this.sourceLocation = sourceLocation;
        return this;
    }

    /**
     * Get the collection of build arguments to be used.
     *
     * @return the buildArguments value
     */
    public List<BuildArgumentInner> buildArguments() {
        return this.buildArguments;
    }

    /**
     * Set the collection of build arguments to be used.
     *
     * @param buildArguments the buildArguments value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withBuildArguments(List<BuildArgumentInner> buildArguments) {
        this.buildArguments = buildArguments;
        return this;
    }

    /**
     * Get the value of this property indicates whether the image built should be pushed to the registry or not.
     *
     * @return the isPushEnabled value
     */
    public Boolean isPushEnabled() {
        return this.isPushEnabled;
    }

    /**
     * Set the value of this property indicates whether the image built should be pushed to the registry or not.
     *
     * @param isPushEnabled the isPushEnabled value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withIsPushEnabled(Boolean isPushEnabled) {
        this.isPushEnabled = isPushEnabled;
        return this;
    }

    /**
     * Get the value of this property indicates whether the image cache is enabled or not.
     *
     * @return the noCache value
     */
    public Boolean noCache() {
        return this.noCache;
    }

    /**
     * Set the value of this property indicates whether the image cache is enabled or not.
     *
     * @param noCache the noCache value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withNoCache(Boolean noCache) {
        this.noCache = noCache;
        return this;
    }

    /**
     * Get build timeout in seconds.
     *
     * @return the timeout value
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set build timeout in seconds.
     *
     * @param timeout the timeout value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the platform properties against which the build will happen.
     *
     * @return the platform value
     */
    public PlatformProperties platform() {
        return this.platform;
    }

    /**
     * Set the platform properties against which the build will happen.
     *
     * @param platform the platform value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withPlatform(PlatformProperties platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the Docker file path relative to the source location.
     *
     * @return the dockerFilePath value
     */
    public String dockerFilePath() {
        return this.dockerFilePath;
    }

    /**
     * Set the Docker file path relative to the source location.
     *
     * @param dockerFilePath the dockerFilePath value to set
     * @return the QuickBuildRequest object itself.
     */
    public QuickBuildRequest withDockerFilePath(String dockerFilePath) {
        this.dockerFilePath = dockerFilePath;
        return this;
    }

}
