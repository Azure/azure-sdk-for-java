/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2018_02_01_preview.implementation;

import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildStep;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildStepUpdateParameters;
import java.util.Map;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildStepProperties;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildStepPropertiesUpdateParameters;
import rx.functions.Func1;

class BuildStepImpl extends CreatableUpdatableImpl<BuildStep, BuildStepInner, BuildStepImpl> implements BuildStep, BuildStep.Definition, BuildStep.Update {
    private final ContainerRegistryManager manager;
    private String resourceGroupName;
    private String registryName;
    private String buildTaskName;
    private String stepName;
    private BuildStepProperties cproperties;
    private BuildStepUpdateParameters updateParameter;

    BuildStepImpl(String name, ContainerRegistryManager manager) {
        super(name, new BuildStepInner());
        this.manager = manager;
        // Set resource name
        this.stepName = name;
        //
        this.cproperties = new BuildStepProperties();
        this.updateParameter = new BuildStepUpdateParameters();
    }

    BuildStepImpl(BuildStepInner inner, ContainerRegistryManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.stepName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.registryName = IdParsingUtils.getValueFromIdByName(inner.id(), "registries");
        this.buildTaskName = IdParsingUtils.getValueFromIdByName(inner.id(), "buildTasks");
        this.stepName = IdParsingUtils.getValueFromIdByName(inner.id(), "steps");
        //
        this.cproperties = new BuildStepProperties();
        this.updateParameter = new BuildStepUpdateParameters();
    }

    @Override
    public ContainerRegistryManager manager() {
        return this.manager;
    }

    @Override
    public Observable<BuildStep> createResourceAsync() {
        BuildStepsInner client = this.manager().inner().buildSteps();
        return client.createAsync(this.resourceGroupName, this.registryName, this.buildTaskName, this.stepName, this.cproperties)
            .map(new Func1<BuildStepInner, BuildStepInner>() {
               @Override
               public BuildStepInner call(BuildStepInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<BuildStep> updateResourceAsync() {
        BuildStepsInner client = this.manager().inner().buildSteps();
        return client.updateAsync(this.resourceGroupName, this.registryName, this.buildTaskName, this.stepName, this.updateParameter)
            .map(new Func1<BuildStepInner, BuildStepInner>() {
               @Override
               public BuildStepInner call(BuildStepInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<BuildStepInner> getInnerAsync() {
        BuildStepsInner client = this.manager().inner().buildSteps();
        return client.getAsync(this.resourceGroupName, this.registryName, this.buildTaskName, this.stepName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.cproperties = new BuildStepProperties();
        this.updateParameter = new BuildStepUpdateParameters();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public BuildStepProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public BuildStepImpl withExistingBuildTask(String resourceGroupName, String registryName, String buildTaskName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        this.buildTaskName = buildTaskName;
        return this;
    }

    @Override
    public BuildStepImpl withProperties(BuildStepProperties properties) {
        this.cproperties = properties;
        return this;
    }

    @Override
    public BuildStepImpl withProperties(BuildStepPropertiesUpdateParameters properties) {
        this.updateParameter.withProperties(properties);
        return this;
    }

    @Override
    public BuildStepImpl withTags(Map<String, String> tags) {
        this.updateParameter.withTags(tags);
        return this;
    }

}
