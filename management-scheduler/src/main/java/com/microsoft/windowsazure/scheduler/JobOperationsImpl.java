/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.scheduler;

import com.microsoft.windowsazure.core.LazyCollection;
import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.core.TimeSpan8601Converter;
import com.microsoft.windowsazure.core.pipeline.apache.CustomHttpDelete;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.scheduler.models.ClientCertAuthentication;
import com.microsoft.windowsazure.scheduler.models.HttpAuthenticationType;
import com.microsoft.windowsazure.scheduler.models.Job;
import com.microsoft.windowsazure.scheduler.models.JobAction;
import com.microsoft.windowsazure.scheduler.models.JobActionType;
import com.microsoft.windowsazure.scheduler.models.JobCollectionJobsUpdateStateParameters;
import com.microsoft.windowsazure.scheduler.models.JobCollectionJobsUpdateStateResponse;
import com.microsoft.windowsazure.scheduler.models.JobCreateOrUpdateParameters;
import com.microsoft.windowsazure.scheduler.models.JobCreateOrUpdateResponse;
import com.microsoft.windowsazure.scheduler.models.JobCreateParameters;
import com.microsoft.windowsazure.scheduler.models.JobCreateResponse;
import com.microsoft.windowsazure.scheduler.models.JobErrorAction;
import com.microsoft.windowsazure.scheduler.models.JobGetHistoryParameters;
import com.microsoft.windowsazure.scheduler.models.JobGetHistoryResponse;
import com.microsoft.windowsazure.scheduler.models.JobGetHistoryWithFilterParameters;
import com.microsoft.windowsazure.scheduler.models.JobGetResponse;
import com.microsoft.windowsazure.scheduler.models.JobHistoryActionName;
import com.microsoft.windowsazure.scheduler.models.JobHistoryStatus;
import com.microsoft.windowsazure.scheduler.models.JobHttpRequest;
import com.microsoft.windowsazure.scheduler.models.JobListParameters;
import com.microsoft.windowsazure.scheduler.models.JobListResponse;
import com.microsoft.windowsazure.scheduler.models.JobListWithFilterParameters;
import com.microsoft.windowsazure.scheduler.models.JobQueueMessage;
import com.microsoft.windowsazure.scheduler.models.JobRecurrence;
import com.microsoft.windowsazure.scheduler.models.JobRecurrenceFrequency;
import com.microsoft.windowsazure.scheduler.models.JobRecurrenceSchedule;
import com.microsoft.windowsazure.scheduler.models.JobScheduleDay;
import com.microsoft.windowsazure.scheduler.models.JobScheduleMonthlyOccurrence;
import com.microsoft.windowsazure.scheduler.models.JobState;
import com.microsoft.windowsazure.scheduler.models.JobStatus;
import com.microsoft.windowsazure.scheduler.models.JobUpdateStateParameters;
import com.microsoft.windowsazure.scheduler.models.JobUpdateStateResponse;
import com.microsoft.windowsazure.scheduler.models.RetryPolicy;
import com.microsoft.windowsazure.scheduler.models.RetryType;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.TimeZone;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.bind.DatatypeConverter;
import javax.xml.datatype.Duration;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPatch;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.NullNode;
import org.codehaus.jackson.node.ObjectNode;

public class JobOperationsImpl implements ServiceOperations<SchedulerClientImpl>, JobOperations {
    /**
    * Initializes a new instance of the JobOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    JobOperationsImpl(SchedulerClientImpl client) {
        this.client = client;
    }
    
    private SchedulerClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.scheduler.SchedulerClientImpl.
    * @return The Client value.
    */
    public SchedulerClientImpl getClient() {
        return this.client;
    }
    
    /**
    * Creates a new Job, allowing the service to generate a job id. Use
    * CreateOrUpdate if a user-chosen job id is required.
    *
    * @param parameters Required. Parameters specifying the job definition for
    * a Create Job operation.
    * @return The Create Job operation response.
    */
    @Override
    public Future<JobCreateResponse> createAsync(final JobCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobCreateResponse>() { 
            @Override
            public JobCreateResponse call() throws Exception {
                return create(parameters);
            }
         });
    }
    
    /**
    * Creates a new Job, allowing the service to generate a job id. Use
    * CreateOrUpdate if a user-chosen job id is required.
    *
    * @param parameters Required. Parameters specifying the job definition for
    * a Create Job operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Create Job operation response.
    */
    @Override
    public JobCreateResponse create(JobCreateParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getAction() == null) {
            throw new NullPointerException("parameters.Action");
        }
        if (parameters.getAction().getErrorAction() != null) {
            if (parameters.getAction().getErrorAction().getQueueMessage() != null) {
                if (parameters.getAction().getErrorAction().getQueueMessage().getMessage() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.Message");
                }
                if (parameters.getAction().getErrorAction().getQueueMessage().getQueueName() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.QueueName");
                }
                if (parameters.getAction().getErrorAction().getQueueMessage().getSasToken() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.SasToken");
                }
                if (parameters.getAction().getErrorAction().getQueueMessage().getStorageAccountName() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.StorageAccountName");
                }
            }
            if (parameters.getAction().getErrorAction().getRequest() != null) {
                if (parameters.getAction().getErrorAction().getRequest().getMethod() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.Request.Method");
                }
                if (parameters.getAction().getErrorAction().getRequest().getUri() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.Request.Uri");
                }
            }
        }
        if (parameters.getAction().getQueueMessage() != null) {
            if (parameters.getAction().getQueueMessage().getMessage() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.Message");
            }
            if (parameters.getAction().getQueueMessage().getQueueName() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.QueueName");
            }
            if (parameters.getAction().getQueueMessage().getSasToken() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.SasToken");
            }
            if (parameters.getAction().getQueueMessage().getStorageAccountName() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.StorageAccountName");
            }
        }
        if (parameters.getAction().getRequest() != null) {
            if (parameters.getAction().getRequest().getMethod() == null) {
                throw new NullPointerException("parameters.Action.Request.Method");
            }
            if (parameters.getAction().getRequest().getUri() == null) {
                throw new NullPointerException("parameters.Action.Request.Uri");
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs" + "?";
        url = url + "api-version=" + "2014-04-01";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpPost httpRequest = new HttpPost(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode jobCreateParametersValue = objectMapper.createObjectNode();
        requestDoc = jobCreateParametersValue;
        
        if (parameters.getStartTime() != null) {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            ((ObjectNode) jobCreateParametersValue).put("startTime", simpleDateFormat.format(parameters.getStartTime().getTime()));
        }
        
        ObjectNode actionValue = objectMapper.createObjectNode();
        ((ObjectNode) jobCreateParametersValue).put("action", actionValue);
        
        ((ObjectNode) actionValue).put("type", SchedulerClientImpl.jobActionTypeToString(parameters.getAction().getType()));
        
        if (parameters.getAction().getRetryPolicy() != null) {
            ObjectNode retryPolicyValue = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("retryPolicy", retryPolicyValue);
            
            ((ObjectNode) retryPolicyValue).put("retryType", SchedulerClientImpl.retryTypeToString(parameters.getAction().getRetryPolicy().getRetryType()));
            
            if (parameters.getAction().getRetryPolicy().getRetryInterval() != null) {
                ((ObjectNode) retryPolicyValue).put("retryInterval", TimeSpan8601Converter.format(parameters.getAction().getRetryPolicy().getRetryInterval()));
            }
            
            if (parameters.getAction().getRetryPolicy().getRetryCount() != null) {
                ((ObjectNode) retryPolicyValue).put("retryCount", parameters.getAction().getRetryPolicy().getRetryCount());
            }
        }
        
        if (parameters.getAction().getErrorAction() != null) {
            ObjectNode errorActionValue = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("errorAction", errorActionValue);
            
            ((ObjectNode) errorActionValue).put("type", SchedulerClientImpl.jobActionTypeToString(parameters.getAction().getErrorAction().getType()));
            
            if (parameters.getAction().getErrorAction().getRequest() != null) {
                ObjectNode requestValue = objectMapper.createObjectNode();
                ((ObjectNode) errorActionValue).put("request", requestValue);
                
                ((ObjectNode) requestValue).put("uri", parameters.getAction().getErrorAction().getRequest().getUri().toString());
                
                ((ObjectNode) requestValue).put("method", parameters.getAction().getErrorAction().getRequest().getMethod());
                
                if (parameters.getAction().getErrorAction().getRequest().getHeaders() != null) {
                    if (parameters.getAction().getErrorAction().getRequest().getHeaders() instanceof LazyCollection == false || ((LazyCollection) parameters.getAction().getErrorAction().getRequest().getHeaders()).isInitialized()) {
                        ObjectNode headersDictionary = objectMapper.createObjectNode();
                        for (Map.Entry<String, String> entry : parameters.getAction().getErrorAction().getRequest().getHeaders().entrySet()) {
                            String headersKey = entry.getKey();
                            String headersValue = entry.getValue();
                            ((ObjectNode) headersDictionary).put(headersKey, headersValue);
                        }
                        ((ObjectNode) requestValue).put("headers", headersDictionary);
                    }
                }
                
                if (parameters.getAction().getErrorAction().getRequest().getBody() != null) {
                    ((ObjectNode) requestValue).put("body", parameters.getAction().getErrorAction().getRequest().getBody());
                }
                
                if (parameters.getAction().getErrorAction().getRequest().getAuthentication() != null) {
                    ObjectNode authenticationValue = objectMapper.createObjectNode();
                    ((ObjectNode) requestValue).put("authentication", authenticationValue);
                    if (parameters.getAction().getErrorAction().getRequest().getAuthentication() instanceof ClientCertAuthentication) {
                        ((ObjectNode) authenticationValue).put("type", "ClientCertificate");
                        ClientCertAuthentication derived = ((ClientCertAuthentication) parameters.getAction().getErrorAction().getRequest().getAuthentication());
                        
                        if (derived.getPassword() != null) {
                            ((ObjectNode) authenticationValue).put("password", derived.getPassword());
                        }
                        
                        if (derived.getPfx() != null) {
                            ((ObjectNode) authenticationValue).put("pfx", derived.getPfx());
                        }
                        
                        if (derived.getCertificateThumbprint() != null) {
                            ((ObjectNode) authenticationValue).put("certificateThumbprint", derived.getCertificateThumbprint());
                        }
                        
                        if (derived.getCertificateExpiration() != null) {
                            SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
                            simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
                            ((ObjectNode) authenticationValue).put("certificateExpiration", simpleDateFormat2.format(derived.getCertificateExpiration().getTime()));
                        }
                        
                        if (derived.getCertificateSubjectName() != null) {
                            ((ObjectNode) authenticationValue).put("certificateSubjectName", derived.getCertificateSubjectName());
                        }
                        
                        ((ObjectNode) authenticationValue).put("type", SchedulerClientImpl.httpAuthenticationTypeToString(derived.getType()));
                    }
                }
            }
            
            if (parameters.getAction().getErrorAction().getQueueMessage() != null) {
                ObjectNode queueMessageValue = objectMapper.createObjectNode();
                ((ObjectNode) errorActionValue).put("queueMessage", queueMessageValue);
                
                ((ObjectNode) queueMessageValue).put("storageAccount", parameters.getAction().getErrorAction().getQueueMessage().getStorageAccountName());
                
                ((ObjectNode) queueMessageValue).put("queueName", parameters.getAction().getErrorAction().getQueueMessage().getQueueName());
                
                ((ObjectNode) queueMessageValue).put("sasToken", parameters.getAction().getErrorAction().getQueueMessage().getSasToken());
                
                ((ObjectNode) queueMessageValue).put("message", parameters.getAction().getErrorAction().getQueueMessage().getMessage());
            }
        }
        
        if (parameters.getAction().getRequest() != null) {
            ObjectNode requestValue2 = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("request", requestValue2);
            
            ((ObjectNode) requestValue2).put("uri", parameters.getAction().getRequest().getUri().toString());
            
            ((ObjectNode) requestValue2).put("method", parameters.getAction().getRequest().getMethod());
            
            if (parameters.getAction().getRequest().getHeaders() != null) {
                if (parameters.getAction().getRequest().getHeaders() instanceof LazyCollection == false || ((LazyCollection) parameters.getAction().getRequest().getHeaders()).isInitialized()) {
                    ObjectNode headersDictionary2 = objectMapper.createObjectNode();
                    for (Map.Entry<String, String> entry2 : parameters.getAction().getRequest().getHeaders().entrySet()) {
                        String headersKey2 = entry2.getKey();
                        String headersValue2 = entry2.getValue();
                        ((ObjectNode) headersDictionary2).put(headersKey2, headersValue2);
                    }
                    ((ObjectNode) requestValue2).put("headers", headersDictionary2);
                }
            }
            
            if (parameters.getAction().getRequest().getBody() != null) {
                ((ObjectNode) requestValue2).put("body", parameters.getAction().getRequest().getBody());
            }
            
            if (parameters.getAction().getRequest().getAuthentication() != null) {
                ObjectNode authenticationValue2 = objectMapper.createObjectNode();
                ((ObjectNode) requestValue2).put("authentication", authenticationValue2);
                if (parameters.getAction().getRequest().getAuthentication() instanceof ClientCertAuthentication) {
                    ((ObjectNode) authenticationValue2).put("type", "ClientCertificate");
                    ClientCertAuthentication derived2 = ((ClientCertAuthentication) parameters.getAction().getRequest().getAuthentication());
                    
                    if (derived2.getPassword() != null) {
                        ((ObjectNode) authenticationValue2).put("password", derived2.getPassword());
                    }
                    
                    if (derived2.getPfx() != null) {
                        ((ObjectNode) authenticationValue2).put("pfx", derived2.getPfx());
                    }
                    
                    if (derived2.getCertificateThumbprint() != null) {
                        ((ObjectNode) authenticationValue2).put("certificateThumbprint", derived2.getCertificateThumbprint());
                    }
                    
                    if (derived2.getCertificateExpiration() != null) {
                        SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
                        simpleDateFormat3.setTimeZone(TimeZone.getTimeZone("UTC"));
                        ((ObjectNode) authenticationValue2).put("certificateExpiration", simpleDateFormat3.format(derived2.getCertificateExpiration().getTime()));
                    }
                    
                    if (derived2.getCertificateSubjectName() != null) {
                        ((ObjectNode) authenticationValue2).put("certificateSubjectName", derived2.getCertificateSubjectName());
                    }
                    
                    ((ObjectNode) authenticationValue2).put("type", SchedulerClientImpl.httpAuthenticationTypeToString(derived2.getType()));
                }
            }
        }
        
        if (parameters.getAction().getQueueMessage() != null) {
            ObjectNode queueMessageValue2 = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("queueMessage", queueMessageValue2);
            
            ((ObjectNode) queueMessageValue2).put("storageAccount", parameters.getAction().getQueueMessage().getStorageAccountName());
            
            ((ObjectNode) queueMessageValue2).put("queueName", parameters.getAction().getQueueMessage().getQueueName());
            
            ((ObjectNode) queueMessageValue2).put("sasToken", parameters.getAction().getQueueMessage().getSasToken());
            
            ((ObjectNode) queueMessageValue2).put("message", parameters.getAction().getQueueMessage().getMessage());
        }
        
        if (parameters.getRecurrence() != null) {
            ObjectNode recurrenceValue = objectMapper.createObjectNode();
            ((ObjectNode) jobCreateParametersValue).put("recurrence", recurrenceValue);
            
            ((ObjectNode) recurrenceValue).put("frequency", SchedulerClientImpl.jobRecurrenceFrequencyToString(parameters.getRecurrence().getFrequency()));
            
            if (parameters.getRecurrence().getInterval() != null) {
                ((ObjectNode) recurrenceValue).put("interval", parameters.getRecurrence().getInterval());
            }
            
            if (parameters.getRecurrence().getCount() != null) {
                ((ObjectNode) recurrenceValue).put("count", parameters.getRecurrence().getCount());
            }
            
            if (parameters.getRecurrence().getEndTime() != null) {
                SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
                simpleDateFormat4.setTimeZone(TimeZone.getTimeZone("UTC"));
                ((ObjectNode) recurrenceValue).put("endTime", simpleDateFormat4.format(parameters.getRecurrence().getEndTime().getTime()));
            }
            
            if (parameters.getRecurrence().getSchedule() != null) {
                ObjectNode scheduleValue = objectMapper.createObjectNode();
                ((ObjectNode) recurrenceValue).put("schedule", scheduleValue);
                
                if (parameters.getRecurrence().getSchedule().getMinutes() != null) {
                    ArrayNode minutesArray = objectMapper.createArrayNode();
                    for (int minutesItem : parameters.getRecurrence().getSchedule().getMinutes()) {
                        minutesArray.add(minutesItem);
                    }
                    ((ObjectNode) scheduleValue).put("minutes", minutesArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getHours() != null) {
                    ArrayNode hoursArray = objectMapper.createArrayNode();
                    for (int hoursItem : parameters.getRecurrence().getSchedule().getHours()) {
                        hoursArray.add(hoursItem);
                    }
                    ((ObjectNode) scheduleValue).put("hours", hoursArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getDays() != null) {
                    ArrayNode weekDaysArray = objectMapper.createArrayNode();
                    for (JobScheduleDay weekDaysItem : parameters.getRecurrence().getSchedule().getDays()) {
                        weekDaysArray.add(SchedulerClientImpl.jobScheduleDayToString(weekDaysItem));
                    }
                    ((ObjectNode) scheduleValue).put("weekDays", weekDaysArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getMonths() != null) {
                    ArrayNode monthsArray = objectMapper.createArrayNode();
                    for (int monthsItem : parameters.getRecurrence().getSchedule().getMonths()) {
                        monthsArray.add(monthsItem);
                    }
                    ((ObjectNode) scheduleValue).put("months", monthsArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getMonthDays() != null) {
                    ArrayNode monthDaysArray = objectMapper.createArrayNode();
                    for (int monthDaysItem : parameters.getRecurrence().getSchedule().getMonthDays()) {
                        monthDaysArray.add(monthDaysItem);
                    }
                    ((ObjectNode) scheduleValue).put("monthDays", monthDaysArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getMonthlyOccurrences() != null) {
                    ArrayNode monthlyOccurrencesArray = objectMapper.createArrayNode();
                    for (JobScheduleMonthlyOccurrence monthlyOccurrencesItem : parameters.getRecurrence().getSchedule().getMonthlyOccurrences()) {
                        ObjectNode jobScheduleMonthlyOccurrenceValue = objectMapper.createObjectNode();
                        monthlyOccurrencesArray.add(jobScheduleMonthlyOccurrenceValue);
                        
                        ((ObjectNode) jobScheduleMonthlyOccurrenceValue).put("day", SchedulerClientImpl.jobScheduleDayToString(monthlyOccurrencesItem.getDay()));
                        
                        if (monthlyOccurrencesItem.getOccurrence() != null) {
                            ((ObjectNode) jobScheduleMonthlyOccurrenceValue).put("occurrence", monthlyOccurrencesItem.getOccurrence());
                        }
                    }
                    ((ObjectNode) scheduleValue).put("monthlyOccurrences", monthlyOccurrencesArray);
                }
            }
        }
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_CREATED) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobCreateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobCreateResponse();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                Job jobInstance = new Job();
                result.setJob(jobInstance);
                
                JsonNode idValue = responseDoc.get("id");
                if (idValue != null && idValue instanceof NullNode == false) {
                    String idInstance;
                    idInstance = idValue.getTextValue();
                    jobInstance.setId(idInstance);
                }
                
                JsonNode startTimeValue = responseDoc.get("startTime");
                if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                    Calendar startTimeInstance;
                    startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                    jobInstance.setStartTime(startTimeInstance);
                }
                
                JsonNode actionValue2 = responseDoc.get("action");
                if (actionValue2 != null && actionValue2 instanceof NullNode == false) {
                    JobAction actionInstance = new JobAction();
                    jobInstance.setAction(actionInstance);
                    
                    JsonNode typeValue = actionValue2.get("type");
                    if (typeValue != null && typeValue instanceof NullNode == false) {
                        JobActionType typeInstance;
                        typeInstance = SchedulerClientImpl.parseJobActionType(typeValue.getTextValue());
                        actionInstance.setType(typeInstance);
                    }
                    
                    JsonNode retryPolicyValue2 = actionValue2.get("retryPolicy");
                    if (retryPolicyValue2 != null && retryPolicyValue2 instanceof NullNode == false) {
                        RetryPolicy retryPolicyInstance = new RetryPolicy();
                        actionInstance.setRetryPolicy(retryPolicyInstance);
                        
                        JsonNode retryTypeValue = retryPolicyValue2.get("retryType");
                        if (retryTypeValue != null && retryTypeValue instanceof NullNode == false) {
                            RetryType retryTypeInstance;
                            retryTypeInstance = SchedulerClientImpl.parseRetryType(retryTypeValue.getTextValue());
                            retryPolicyInstance.setRetryType(retryTypeInstance);
                        }
                        
                        JsonNode retryIntervalValue = retryPolicyValue2.get("retryInterval");
                        if (retryIntervalValue != null && retryIntervalValue instanceof NullNode == false) {
                            Duration retryIntervalInstance;
                            retryIntervalInstance = TimeSpan8601Converter.parse(retryIntervalValue.getTextValue());
                            retryPolicyInstance.setRetryInterval(retryIntervalInstance);
                        }
                        
                        JsonNode retryCountValue = retryPolicyValue2.get("retryCount");
                        if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                            int retryCountInstance;
                            retryCountInstance = retryCountValue.getIntValue();
                            retryPolicyInstance.setRetryCount(retryCountInstance);
                        }
                    }
                    
                    JsonNode errorActionValue2 = actionValue2.get("errorAction");
                    if (errorActionValue2 != null && errorActionValue2 instanceof NullNode == false) {
                        JobErrorAction errorActionInstance = new JobErrorAction();
                        actionInstance.setErrorAction(errorActionInstance);
                        
                        JsonNode typeValue2 = errorActionValue2.get("type");
                        if (typeValue2 != null && typeValue2 instanceof NullNode == false) {
                            JobActionType typeInstance2;
                            typeInstance2 = SchedulerClientImpl.parseJobActionType(typeValue2.getTextValue());
                            errorActionInstance.setType(typeInstance2);
                        }
                        
                        JsonNode requestValue3 = errorActionValue2.get("request");
                        if (requestValue3 != null && requestValue3 instanceof NullNode == false) {
                            JobHttpRequest requestInstance = new JobHttpRequest();
                            errorActionInstance.setRequest(requestInstance);
                            
                            JsonNode uriValue = requestValue3.get("uri");
                            if (uriValue != null && uriValue instanceof NullNode == false) {
                                URI uriInstance;
                                uriInstance = new URI(uriValue.getTextValue());
                                requestInstance.setUri(uriInstance);
                            }
                            
                            JsonNode methodValue = requestValue3.get("method");
                            if (methodValue != null && methodValue instanceof NullNode == false) {
                                String methodInstance;
                                methodInstance = methodValue.getTextValue();
                                requestInstance.setMethod(methodInstance);
                            }
                            
                            JsonNode headersSequenceElement = ((JsonNode) requestValue3.get("headers"));
                            if (headersSequenceElement != null && headersSequenceElement instanceof NullNode == false) {
                                Iterator<Map.Entry<String, JsonNode>> itr = headersSequenceElement.getFields();
                                while (itr.hasNext()) {
                                    Map.Entry<String, JsonNode> property = itr.next();
                                    String headersKey3 = property.getKey();
                                    String headersValue3 = property.getValue().getTextValue();
                                    requestInstance.getHeaders().put(headersKey3, headersValue3);
                                }
                            }
                            
                            JsonNode bodyValue = requestValue3.get("body");
                            if (bodyValue != null && bodyValue instanceof NullNode == false) {
                                String bodyInstance;
                                bodyInstance = bodyValue.getTextValue();
                                requestInstance.setBody(bodyInstance);
                            }
                            
                            JsonNode authenticationValue3 = requestValue3.get("authentication");
                            if (authenticationValue3 != null && authenticationValue3 instanceof NullNode == false) {
                                String typeName = authenticationValue3.get("type").getTextValue();
                                if ("ClientCertificate".equals(typeName)) {
                                    ClientCertAuthentication clientCertAuthenticationInstance = new ClientCertAuthentication();
                                    
                                    JsonNode passwordValue = authenticationValue3.get("password");
                                    if (passwordValue != null && passwordValue instanceof NullNode == false) {
                                        String passwordInstance;
                                        passwordInstance = passwordValue.getTextValue();
                                        clientCertAuthenticationInstance.setPassword(passwordInstance);
                                    }
                                    
                                    JsonNode pfxValue = authenticationValue3.get("pfx");
                                    if (pfxValue != null && pfxValue instanceof NullNode == false) {
                                        String pfxInstance;
                                        pfxInstance = pfxValue.getTextValue();
                                        clientCertAuthenticationInstance.setPfx(pfxInstance);
                                    }
                                    
                                    JsonNode certificateThumbprintValue = authenticationValue3.get("certificateThumbprint");
                                    if (certificateThumbprintValue != null && certificateThumbprintValue instanceof NullNode == false) {
                                        String certificateThumbprintInstance;
                                        certificateThumbprintInstance = certificateThumbprintValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                    }
                                    
                                    JsonNode certificateExpirationValue = authenticationValue3.get("certificateExpiration");
                                    if (certificateExpirationValue != null && certificateExpirationValue instanceof NullNode == false) {
                                        Calendar certificateExpirationInstance;
                                        certificateExpirationInstance = DatatypeConverter.parseDateTime(certificateExpirationValue.getTextValue());
                                        clientCertAuthenticationInstance.setCertificateExpiration(certificateExpirationInstance);
                                    }
                                    
                                    JsonNode certificateSubjectNameValue = authenticationValue3.get("certificateSubjectName");
                                    if (certificateSubjectNameValue != null && certificateSubjectNameValue instanceof NullNode == false) {
                                        String certificateSubjectNameInstance;
                                        certificateSubjectNameInstance = certificateSubjectNameValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateSubjectName(certificateSubjectNameInstance);
                                    }
                                    
                                    JsonNode typeValue3 = authenticationValue3.get("type");
                                    if (typeValue3 != null && typeValue3 instanceof NullNode == false) {
                                        HttpAuthenticationType typeInstance3;
                                        typeInstance3 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue3.getTextValue());
                                        clientCertAuthenticationInstance.setType(typeInstance3);
                                    }
                                    requestInstance.setAuthentication(clientCertAuthenticationInstance);
                                }
                            }
                        }
                        
                        JsonNode queueMessageValue3 = errorActionValue2.get("queueMessage");
                        if (queueMessageValue3 != null && queueMessageValue3 instanceof NullNode == false) {
                            JobQueueMessage queueMessageInstance = new JobQueueMessage();
                            errorActionInstance.setQueueMessage(queueMessageInstance);
                            
                            JsonNode storageAccountValue = queueMessageValue3.get("storageAccount");
                            if (storageAccountValue != null && storageAccountValue instanceof NullNode == false) {
                                String storageAccountInstance;
                                storageAccountInstance = storageAccountValue.getTextValue();
                                queueMessageInstance.setStorageAccountName(storageAccountInstance);
                            }
                            
                            JsonNode queueNameValue = queueMessageValue3.get("queueName");
                            if (queueNameValue != null && queueNameValue instanceof NullNode == false) {
                                String queueNameInstance;
                                queueNameInstance = queueNameValue.getTextValue();
                                queueMessageInstance.setQueueName(queueNameInstance);
                            }
                            
                            JsonNode sasTokenValue = queueMessageValue3.get("sasToken");
                            if (sasTokenValue != null && sasTokenValue instanceof NullNode == false) {
                                String sasTokenInstance;
                                sasTokenInstance = sasTokenValue.getTextValue();
                                queueMessageInstance.setSasToken(sasTokenInstance);
                            }
                            
                            JsonNode messageValue = queueMessageValue3.get("message");
                            if (messageValue != null && messageValue instanceof NullNode == false) {
                                String messageInstance;
                                messageInstance = messageValue.getTextValue();
                                queueMessageInstance.setMessage(messageInstance);
                            }
                        }
                    }
                    
                    JsonNode requestValue4 = actionValue2.get("request");
                    if (requestValue4 != null && requestValue4 instanceof NullNode == false) {
                        JobHttpRequest requestInstance2 = new JobHttpRequest();
                        actionInstance.setRequest(requestInstance2);
                        
                        JsonNode uriValue2 = requestValue4.get("uri");
                        if (uriValue2 != null && uriValue2 instanceof NullNode == false) {
                            URI uriInstance2;
                            uriInstance2 = new URI(uriValue2.getTextValue());
                            requestInstance2.setUri(uriInstance2);
                        }
                        
                        JsonNode methodValue2 = requestValue4.get("method");
                        if (methodValue2 != null && methodValue2 instanceof NullNode == false) {
                            String methodInstance2;
                            methodInstance2 = methodValue2.getTextValue();
                            requestInstance2.setMethod(methodInstance2);
                        }
                        
                        JsonNode headersSequenceElement2 = ((JsonNode) requestValue4.get("headers"));
                        if (headersSequenceElement2 != null && headersSequenceElement2 instanceof NullNode == false) {
                            Iterator<Map.Entry<String, JsonNode>> itr2 = headersSequenceElement2.getFields();
                            while (itr2.hasNext()) {
                                Map.Entry<String, JsonNode> property2 = itr2.next();
                                String headersKey4 = property2.getKey();
                                String headersValue4 = property2.getValue().getTextValue();
                                requestInstance2.getHeaders().put(headersKey4, headersValue4);
                            }
                        }
                        
                        JsonNode bodyValue2 = requestValue4.get("body");
                        if (bodyValue2 != null && bodyValue2 instanceof NullNode == false) {
                            String bodyInstance2;
                            bodyInstance2 = bodyValue2.getTextValue();
                            requestInstance2.setBody(bodyInstance2);
                        }
                        
                        JsonNode authenticationValue4 = requestValue4.get("authentication");
                        if (authenticationValue4 != null && authenticationValue4 instanceof NullNode == false) {
                            String typeName2 = authenticationValue4.get("type").getTextValue();
                            if ("ClientCertificate".equals(typeName2)) {
                                ClientCertAuthentication clientCertAuthenticationInstance2 = new ClientCertAuthentication();
                                
                                JsonNode passwordValue2 = authenticationValue4.get("password");
                                if (passwordValue2 != null && passwordValue2 instanceof NullNode == false) {
                                    String passwordInstance2;
                                    passwordInstance2 = passwordValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPassword(passwordInstance2);
                                }
                                
                                JsonNode pfxValue2 = authenticationValue4.get("pfx");
                                if (pfxValue2 != null && pfxValue2 instanceof NullNode == false) {
                                    String pfxInstance2;
                                    pfxInstance2 = pfxValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPfx(pfxInstance2);
                                }
                                
                                JsonNode certificateThumbprintValue2 = authenticationValue4.get("certificateThumbprint");
                                if (certificateThumbprintValue2 != null && certificateThumbprintValue2 instanceof NullNode == false) {
                                    String certificateThumbprintInstance2;
                                    certificateThumbprintInstance2 = certificateThumbprintValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateThumbprint(certificateThumbprintInstance2);
                                }
                                
                                JsonNode certificateExpirationValue2 = authenticationValue4.get("certificateExpiration");
                                if (certificateExpirationValue2 != null && certificateExpirationValue2 instanceof NullNode == false) {
                                    Calendar certificateExpirationInstance2;
                                    certificateExpirationInstance2 = DatatypeConverter.parseDateTime(certificateExpirationValue2.getTextValue());
                                    clientCertAuthenticationInstance2.setCertificateExpiration(certificateExpirationInstance2);
                                }
                                
                                JsonNode certificateSubjectNameValue2 = authenticationValue4.get("certificateSubjectName");
                                if (certificateSubjectNameValue2 != null && certificateSubjectNameValue2 instanceof NullNode == false) {
                                    String certificateSubjectNameInstance2;
                                    certificateSubjectNameInstance2 = certificateSubjectNameValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateSubjectName(certificateSubjectNameInstance2);
                                }
                                
                                JsonNode typeValue4 = authenticationValue4.get("type");
                                if (typeValue4 != null && typeValue4 instanceof NullNode == false) {
                                    HttpAuthenticationType typeInstance4;
                                    typeInstance4 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue4.getTextValue());
                                    clientCertAuthenticationInstance2.setType(typeInstance4);
                                }
                                requestInstance2.setAuthentication(clientCertAuthenticationInstance2);
                            }
                        }
                    }
                    
                    JsonNode queueMessageValue4 = actionValue2.get("queueMessage");
                    if (queueMessageValue4 != null && queueMessageValue4 instanceof NullNode == false) {
                        JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                        actionInstance.setQueueMessage(queueMessageInstance2);
                        
                        JsonNode storageAccountValue2 = queueMessageValue4.get("storageAccount");
                        if (storageAccountValue2 != null && storageAccountValue2 instanceof NullNode == false) {
                            String storageAccountInstance2;
                            storageAccountInstance2 = storageAccountValue2.getTextValue();
                            queueMessageInstance2.setStorageAccountName(storageAccountInstance2);
                        }
                        
                        JsonNode queueNameValue2 = queueMessageValue4.get("queueName");
                        if (queueNameValue2 != null && queueNameValue2 instanceof NullNode == false) {
                            String queueNameInstance2;
                            queueNameInstance2 = queueNameValue2.getTextValue();
                            queueMessageInstance2.setQueueName(queueNameInstance2);
                        }
                        
                        JsonNode sasTokenValue2 = queueMessageValue4.get("sasToken");
                        if (sasTokenValue2 != null && sasTokenValue2 instanceof NullNode == false) {
                            String sasTokenInstance2;
                            sasTokenInstance2 = sasTokenValue2.getTextValue();
                            queueMessageInstance2.setSasToken(sasTokenInstance2);
                        }
                        
                        JsonNode messageValue2 = queueMessageValue4.get("message");
                        if (messageValue2 != null && messageValue2 instanceof NullNode == false) {
                            String messageInstance2;
                            messageInstance2 = messageValue2.getTextValue();
                            queueMessageInstance2.setMessage(messageInstance2);
                        }
                    }
                }
                
                JsonNode recurrenceValue2 = responseDoc.get("recurrence");
                if (recurrenceValue2 != null && recurrenceValue2 instanceof NullNode == false) {
                    JobRecurrence recurrenceInstance = new JobRecurrence();
                    jobInstance.setRecurrence(recurrenceInstance);
                    
                    JsonNode frequencyValue = recurrenceValue2.get("frequency");
                    if (frequencyValue != null && frequencyValue instanceof NullNode == false) {
                        JobRecurrenceFrequency frequencyInstance;
                        frequencyInstance = SchedulerClientImpl.parseJobRecurrenceFrequency(frequencyValue.getTextValue());
                        recurrenceInstance.setFrequency(frequencyInstance);
                    }
                    
                    JsonNode intervalValue = recurrenceValue2.get("interval");
                    if (intervalValue != null && intervalValue instanceof NullNode == false) {
                        int intervalInstance;
                        intervalInstance = intervalValue.getIntValue();
                        recurrenceInstance.setInterval(intervalInstance);
                    }
                    
                    JsonNode countValue = recurrenceValue2.get("count");
                    if (countValue != null && countValue instanceof NullNode == false) {
                        int countInstance;
                        countInstance = countValue.getIntValue();
                        recurrenceInstance.setCount(countInstance);
                    }
                    
                    JsonNode endTimeValue = recurrenceValue2.get("endTime");
                    if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                        Calendar endTimeInstance;
                        endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                        recurrenceInstance.setEndTime(endTimeInstance);
                    }
                    
                    JsonNode scheduleValue2 = recurrenceValue2.get("schedule");
                    if (scheduleValue2 != null && scheduleValue2 instanceof NullNode == false) {
                        JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                        recurrenceInstance.setSchedule(scheduleInstance);
                        
                        JsonNode minutesArray2 = scheduleValue2.get("minutes");
                        if (minutesArray2 != null && minutesArray2 instanceof NullNode == false) {
                            scheduleInstance.setMinutes(new ArrayList<Integer>());
                            for (JsonNode minutesValue : ((ArrayNode) minutesArray2)) {
                                scheduleInstance.getMinutes().add(minutesValue.getIntValue());
                            }
                        }
                        
                        JsonNode hoursArray2 = scheduleValue2.get("hours");
                        if (hoursArray2 != null && hoursArray2 instanceof NullNode == false) {
                            scheduleInstance.setHours(new ArrayList<Integer>());
                            for (JsonNode hoursValue : ((ArrayNode) hoursArray2)) {
                                scheduleInstance.getHours().add(hoursValue.getIntValue());
                            }
                        }
                        
                        JsonNode weekDaysArray2 = scheduleValue2.get("weekDays");
                        if (weekDaysArray2 != null && weekDaysArray2 instanceof NullNode == false) {
                            scheduleInstance.setDays(new ArrayList<JobScheduleDay>());
                            for (JsonNode weekDaysValue : ((ArrayNode) weekDaysArray2)) {
                                scheduleInstance.getDays().add(SchedulerClientImpl.parseJobScheduleDay(weekDaysValue.getTextValue()));
                            }
                        }
                        
                        JsonNode monthsArray2 = scheduleValue2.get("months");
                        if (monthsArray2 != null && monthsArray2 instanceof NullNode == false) {
                            scheduleInstance.setMonths(new ArrayList<Integer>());
                            for (JsonNode monthsValue : ((ArrayNode) monthsArray2)) {
                                scheduleInstance.getMonths().add(monthsValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthDaysArray2 = scheduleValue2.get("monthDays");
                        if (monthDaysArray2 != null && monthDaysArray2 instanceof NullNode == false) {
                            scheduleInstance.setMonthDays(new ArrayList<Integer>());
                            for (JsonNode monthDaysValue : ((ArrayNode) monthDaysArray2)) {
                                scheduleInstance.getMonthDays().add(monthDaysValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthlyOccurrencesArray2 = scheduleValue2.get("monthlyOccurrences");
                        if (monthlyOccurrencesArray2 != null && monthlyOccurrencesArray2 instanceof NullNode == false) {
                            scheduleInstance.setMonthlyOccurrences(new ArrayList<JobScheduleMonthlyOccurrence>());
                            for (JsonNode monthlyOccurrencesValue : ((ArrayNode) monthlyOccurrencesArray2)) {
                                JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                scheduleInstance.getMonthlyOccurrences().add(jobScheduleMonthlyOccurrenceInstance);
                                
                                JsonNode dayValue = monthlyOccurrencesValue.get("day");
                                if (dayValue != null && dayValue instanceof NullNode == false) {
                                    JobScheduleDay dayInstance;
                                    dayInstance = SchedulerClientImpl.parseJobScheduleDay(dayValue.getTextValue());
                                    jobScheduleMonthlyOccurrenceInstance.setDay(dayInstance);
                                }
                                
                                JsonNode occurrenceValue = monthlyOccurrencesValue.get("occurrence");
                                if (occurrenceValue != null && occurrenceValue instanceof NullNode == false) {
                                    int occurrenceInstance;
                                    occurrenceInstance = occurrenceValue.getIntValue();
                                    jobScheduleMonthlyOccurrenceInstance.setOccurrence(occurrenceInstance);
                                }
                            }
                        }
                    }
                }
                
                JsonNode statusValue = responseDoc.get("status");
                if (statusValue != null && statusValue instanceof NullNode == false) {
                    JobStatus statusInstance = new JobStatus();
                    jobInstance.setStatus(statusInstance);
                    
                    JsonNode lastExecutionTimeValue = statusValue.get("lastExecutionTime");
                    if (lastExecutionTimeValue != null && lastExecutionTimeValue instanceof NullNode == false) {
                        Calendar lastExecutionTimeInstance;
                        lastExecutionTimeInstance = DatatypeConverter.parseDateTime(lastExecutionTimeValue.getTextValue());
                        statusInstance.setLastExecutionTime(lastExecutionTimeInstance);
                    }
                    
                    JsonNode nextExecutionTimeValue = statusValue.get("nextExecutionTime");
                    if (nextExecutionTimeValue != null && nextExecutionTimeValue instanceof NullNode == false) {
                        Calendar nextExecutionTimeInstance;
                        nextExecutionTimeInstance = DatatypeConverter.parseDateTime(nextExecutionTimeValue.getTextValue());
                        statusInstance.setNextExecutionTime(nextExecutionTimeInstance);
                    }
                    
                    JsonNode executionCountValue = statusValue.get("executionCount");
                    if (executionCountValue != null && executionCountValue instanceof NullNode == false) {
                        int executionCountInstance;
                        executionCountInstance = executionCountValue.getIntValue();
                        statusInstance.setExecutionCount(executionCountInstance);
                    }
                    
                    JsonNode failureCountValue = statusValue.get("failureCount");
                    if (failureCountValue != null && failureCountValue instanceof NullNode == false) {
                        int failureCountInstance;
                        failureCountInstance = failureCountValue.getIntValue();
                        statusInstance.setFailureCount(failureCountInstance);
                    }
                    
                    JsonNode faultedCountValue = statusValue.get("faultedCount");
                    if (faultedCountValue != null && faultedCountValue instanceof NullNode == false) {
                        int faultedCountInstance;
                        faultedCountInstance = faultedCountValue.getIntValue();
                        statusInstance.setFaultedCount(faultedCountInstance);
                    }
                }
                
                JsonNode stateValue = responseDoc.get("state");
                if (stateValue != null && stateValue instanceof NullNode == false) {
                    JobState stateInstance;
                    stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                    jobInstance.setState(stateInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Creates a new Job with a user-provided job id, or updates an existing
    * job, replacing its definition with that specified.
    *
    * @param jobId Required. Id of the job to create or update.
    * @param parameters Required. Parameters specifying the job definition for
    * a CreateOrUpdate Job operation.
    * @return The CreateOrUpdate Job operation response.
    */
    @Override
    public Future<JobCreateOrUpdateResponse> createOrUpdateAsync(final String jobId, final JobCreateOrUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobCreateOrUpdateResponse>() { 
            @Override
            public JobCreateOrUpdateResponse call() throws Exception {
                return createOrUpdate(jobId, parameters);
            }
         });
    }
    
    /**
    * Creates a new Job with a user-provided job id, or updates an existing
    * job, replacing its definition with that specified.
    *
    * @param jobId Required. Id of the job to create or update.
    * @param parameters Required. Parameters specifying the job definition for
    * a CreateOrUpdate Job operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The CreateOrUpdate Job operation response.
    */
    @Override
    public JobCreateOrUpdateResponse createOrUpdate(String jobId, JobCreateOrUpdateParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (jobId == null) {
            throw new NullPointerException("jobId");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getAction() == null) {
            throw new NullPointerException("parameters.Action");
        }
        if (parameters.getAction().getErrorAction() != null) {
            if (parameters.getAction().getErrorAction().getQueueMessage() != null) {
                if (parameters.getAction().getErrorAction().getQueueMessage().getMessage() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.Message");
                }
                if (parameters.getAction().getErrorAction().getQueueMessage().getQueueName() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.QueueName");
                }
                if (parameters.getAction().getErrorAction().getQueueMessage().getSasToken() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.SasToken");
                }
                if (parameters.getAction().getErrorAction().getQueueMessage().getStorageAccountName() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.QueueMessage.StorageAccountName");
                }
            }
            if (parameters.getAction().getErrorAction().getRequest() != null) {
                if (parameters.getAction().getErrorAction().getRequest().getMethod() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.Request.Method");
                }
                if (parameters.getAction().getErrorAction().getRequest().getUri() == null) {
                    throw new NullPointerException("parameters.Action.ErrorAction.Request.Uri");
                }
            }
        }
        if (parameters.getAction().getQueueMessage() != null) {
            if (parameters.getAction().getQueueMessage().getMessage() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.Message");
            }
            if (parameters.getAction().getQueueMessage().getQueueName() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.QueueName");
            }
            if (parameters.getAction().getQueueMessage().getSasToken() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.SasToken");
            }
            if (parameters.getAction().getQueueMessage().getStorageAccountName() == null) {
                throw new NullPointerException("parameters.Action.QueueMessage.StorageAccountName");
            }
        }
        if (parameters.getAction().getRequest() != null) {
            if (parameters.getAction().getRequest().getMethod() == null) {
                throw new NullPointerException("parameters.Action.Request.Method");
            }
            if (parameters.getAction().getRequest().getUri() == null) {
                throw new NullPointerException("parameters.Action.Request.Uri");
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("jobId", jobId);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createOrUpdateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs/" + jobId.trim() + "?";
        url = url + "api-version=" + "2014-04-01";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode jobCreateOrUpdateParametersValue = objectMapper.createObjectNode();
        requestDoc = jobCreateOrUpdateParametersValue;
        
        if (parameters.getStartTime() != null) {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            ((ObjectNode) jobCreateOrUpdateParametersValue).put("startTime", simpleDateFormat.format(parameters.getStartTime().getTime()));
        }
        
        ObjectNode actionValue = objectMapper.createObjectNode();
        ((ObjectNode) jobCreateOrUpdateParametersValue).put("action", actionValue);
        
        ((ObjectNode) actionValue).put("type", SchedulerClientImpl.jobActionTypeToString(parameters.getAction().getType()));
        
        if (parameters.getAction().getRetryPolicy() != null) {
            ObjectNode retryPolicyValue = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("retryPolicy", retryPolicyValue);
            
            ((ObjectNode) retryPolicyValue).put("retryType", SchedulerClientImpl.retryTypeToString(parameters.getAction().getRetryPolicy().getRetryType()));
            
            if (parameters.getAction().getRetryPolicy().getRetryInterval() != null) {
                ((ObjectNode) retryPolicyValue).put("retryInterval", TimeSpan8601Converter.format(parameters.getAction().getRetryPolicy().getRetryInterval()));
            }
            
            if (parameters.getAction().getRetryPolicy().getRetryCount() != null) {
                ((ObjectNode) retryPolicyValue).put("retryCount", parameters.getAction().getRetryPolicy().getRetryCount());
            }
        }
        
        if (parameters.getAction().getErrorAction() != null) {
            ObjectNode errorActionValue = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("errorAction", errorActionValue);
            
            ((ObjectNode) errorActionValue).put("type", SchedulerClientImpl.jobActionTypeToString(parameters.getAction().getErrorAction().getType()));
            
            if (parameters.getAction().getErrorAction().getRequest() != null) {
                ObjectNode requestValue = objectMapper.createObjectNode();
                ((ObjectNode) errorActionValue).put("request", requestValue);
                
                ((ObjectNode) requestValue).put("uri", parameters.getAction().getErrorAction().getRequest().getUri().toString());
                
                ((ObjectNode) requestValue).put("method", parameters.getAction().getErrorAction().getRequest().getMethod());
                
                if (parameters.getAction().getErrorAction().getRequest().getHeaders() != null) {
                    if (parameters.getAction().getErrorAction().getRequest().getHeaders() instanceof LazyCollection == false || ((LazyCollection) parameters.getAction().getErrorAction().getRequest().getHeaders()).isInitialized()) {
                        ObjectNode headersDictionary = objectMapper.createObjectNode();
                        for (Map.Entry<String, String> entry : parameters.getAction().getErrorAction().getRequest().getHeaders().entrySet()) {
                            String headersKey = entry.getKey();
                            String headersValue = entry.getValue();
                            ((ObjectNode) headersDictionary).put(headersKey, headersValue);
                        }
                        ((ObjectNode) requestValue).put("headers", headersDictionary);
                    }
                }
                
                if (parameters.getAction().getErrorAction().getRequest().getBody() != null) {
                    ((ObjectNode) requestValue).put("body", parameters.getAction().getErrorAction().getRequest().getBody());
                }
                
                if (parameters.getAction().getErrorAction().getRequest().getAuthentication() != null) {
                    ObjectNode authenticationValue = objectMapper.createObjectNode();
                    ((ObjectNode) requestValue).put("authentication", authenticationValue);
                    if (parameters.getAction().getErrorAction().getRequest().getAuthentication() instanceof ClientCertAuthentication) {
                        ((ObjectNode) authenticationValue).put("type", "ClientCertificate");
                        ClientCertAuthentication derived = ((ClientCertAuthentication) parameters.getAction().getErrorAction().getRequest().getAuthentication());
                        
                        if (derived.getPassword() != null) {
                            ((ObjectNode) authenticationValue).put("password", derived.getPassword());
                        }
                        
                        if (derived.getPfx() != null) {
                            ((ObjectNode) authenticationValue).put("pfx", derived.getPfx());
                        }
                        
                        if (derived.getCertificateThumbprint() != null) {
                            ((ObjectNode) authenticationValue).put("certificateThumbprint", derived.getCertificateThumbprint());
                        }
                        
                        if (derived.getCertificateExpiration() != null) {
                            SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
                            simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
                            ((ObjectNode) authenticationValue).put("certificateExpiration", simpleDateFormat2.format(derived.getCertificateExpiration().getTime()));
                        }
                        
                        if (derived.getCertificateSubjectName() != null) {
                            ((ObjectNode) authenticationValue).put("certificateSubjectName", derived.getCertificateSubjectName());
                        }
                        
                        ((ObjectNode) authenticationValue).put("type", SchedulerClientImpl.httpAuthenticationTypeToString(derived.getType()));
                    }
                }
            }
            
            if (parameters.getAction().getErrorAction().getQueueMessage() != null) {
                ObjectNode queueMessageValue = objectMapper.createObjectNode();
                ((ObjectNode) errorActionValue).put("queueMessage", queueMessageValue);
                
                ((ObjectNode) queueMessageValue).put("storageAccount", parameters.getAction().getErrorAction().getQueueMessage().getStorageAccountName());
                
                ((ObjectNode) queueMessageValue).put("queueName", parameters.getAction().getErrorAction().getQueueMessage().getQueueName());
                
                ((ObjectNode) queueMessageValue).put("sasToken", parameters.getAction().getErrorAction().getQueueMessage().getSasToken());
                
                ((ObjectNode) queueMessageValue).put("message", parameters.getAction().getErrorAction().getQueueMessage().getMessage());
            }
        }
        
        if (parameters.getAction().getRequest() != null) {
            ObjectNode requestValue2 = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("request", requestValue2);
            
            ((ObjectNode) requestValue2).put("uri", parameters.getAction().getRequest().getUri().toString());
            
            ((ObjectNode) requestValue2).put("method", parameters.getAction().getRequest().getMethod());
            
            if (parameters.getAction().getRequest().getHeaders() != null) {
                if (parameters.getAction().getRequest().getHeaders() instanceof LazyCollection == false || ((LazyCollection) parameters.getAction().getRequest().getHeaders()).isInitialized()) {
                    ObjectNode headersDictionary2 = objectMapper.createObjectNode();
                    for (Map.Entry<String, String> entry2 : parameters.getAction().getRequest().getHeaders().entrySet()) {
                        String headersKey2 = entry2.getKey();
                        String headersValue2 = entry2.getValue();
                        ((ObjectNode) headersDictionary2).put(headersKey2, headersValue2);
                    }
                    ((ObjectNode) requestValue2).put("headers", headersDictionary2);
                }
            }
            
            if (parameters.getAction().getRequest().getBody() != null) {
                ((ObjectNode) requestValue2).put("body", parameters.getAction().getRequest().getBody());
            }
            
            if (parameters.getAction().getRequest().getAuthentication() != null) {
                ObjectNode authenticationValue2 = objectMapper.createObjectNode();
                ((ObjectNode) requestValue2).put("authentication", authenticationValue2);
                if (parameters.getAction().getRequest().getAuthentication() instanceof ClientCertAuthentication) {
                    ((ObjectNode) authenticationValue2).put("type", "ClientCertificate");
                    ClientCertAuthentication derived2 = ((ClientCertAuthentication) parameters.getAction().getRequest().getAuthentication());
                    
                    if (derived2.getPassword() != null) {
                        ((ObjectNode) authenticationValue2).put("password", derived2.getPassword());
                    }
                    
                    if (derived2.getPfx() != null) {
                        ((ObjectNode) authenticationValue2).put("pfx", derived2.getPfx());
                    }
                    
                    if (derived2.getCertificateThumbprint() != null) {
                        ((ObjectNode) authenticationValue2).put("certificateThumbprint", derived2.getCertificateThumbprint());
                    }
                    
                    if (derived2.getCertificateExpiration() != null) {
                        SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
                        simpleDateFormat3.setTimeZone(TimeZone.getTimeZone("UTC"));
                        ((ObjectNode) authenticationValue2).put("certificateExpiration", simpleDateFormat3.format(derived2.getCertificateExpiration().getTime()));
                    }
                    
                    if (derived2.getCertificateSubjectName() != null) {
                        ((ObjectNode) authenticationValue2).put("certificateSubjectName", derived2.getCertificateSubjectName());
                    }
                    
                    ((ObjectNode) authenticationValue2).put("type", SchedulerClientImpl.httpAuthenticationTypeToString(derived2.getType()));
                }
            }
        }
        
        if (parameters.getAction().getQueueMessage() != null) {
            ObjectNode queueMessageValue2 = objectMapper.createObjectNode();
            ((ObjectNode) actionValue).put("queueMessage", queueMessageValue2);
            
            ((ObjectNode) queueMessageValue2).put("storageAccount", parameters.getAction().getQueueMessage().getStorageAccountName());
            
            ((ObjectNode) queueMessageValue2).put("queueName", parameters.getAction().getQueueMessage().getQueueName());
            
            ((ObjectNode) queueMessageValue2).put("sasToken", parameters.getAction().getQueueMessage().getSasToken());
            
            ((ObjectNode) queueMessageValue2).put("message", parameters.getAction().getQueueMessage().getMessage());
        }
        
        if (parameters.getRecurrence() != null) {
            ObjectNode recurrenceValue = objectMapper.createObjectNode();
            ((ObjectNode) jobCreateOrUpdateParametersValue).put("recurrence", recurrenceValue);
            
            ((ObjectNode) recurrenceValue).put("frequency", SchedulerClientImpl.jobRecurrenceFrequencyToString(parameters.getRecurrence().getFrequency()));
            
            if (parameters.getRecurrence().getInterval() != null) {
                ((ObjectNode) recurrenceValue).put("interval", parameters.getRecurrence().getInterval());
            }
            
            if (parameters.getRecurrence().getCount() != null) {
                ((ObjectNode) recurrenceValue).put("count", parameters.getRecurrence().getCount());
            }
            
            if (parameters.getRecurrence().getEndTime() != null) {
                SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
                simpleDateFormat4.setTimeZone(TimeZone.getTimeZone("UTC"));
                ((ObjectNode) recurrenceValue).put("endTime", simpleDateFormat4.format(parameters.getRecurrence().getEndTime().getTime()));
            }
            
            if (parameters.getRecurrence().getSchedule() != null) {
                ObjectNode scheduleValue = objectMapper.createObjectNode();
                ((ObjectNode) recurrenceValue).put("schedule", scheduleValue);
                
                if (parameters.getRecurrence().getSchedule().getMinutes() != null) {
                    ArrayNode minutesArray = objectMapper.createArrayNode();
                    for (int minutesItem : parameters.getRecurrence().getSchedule().getMinutes()) {
                        minutesArray.add(minutesItem);
                    }
                    ((ObjectNode) scheduleValue).put("minutes", minutesArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getHours() != null) {
                    ArrayNode hoursArray = objectMapper.createArrayNode();
                    for (int hoursItem : parameters.getRecurrence().getSchedule().getHours()) {
                        hoursArray.add(hoursItem);
                    }
                    ((ObjectNode) scheduleValue).put("hours", hoursArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getDays() != null) {
                    ArrayNode weekDaysArray = objectMapper.createArrayNode();
                    for (JobScheduleDay weekDaysItem : parameters.getRecurrence().getSchedule().getDays()) {
                        weekDaysArray.add(SchedulerClientImpl.jobScheduleDayToString(weekDaysItem));
                    }
                    ((ObjectNode) scheduleValue).put("weekDays", weekDaysArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getMonths() != null) {
                    ArrayNode monthsArray = objectMapper.createArrayNode();
                    for (int monthsItem : parameters.getRecurrence().getSchedule().getMonths()) {
                        monthsArray.add(monthsItem);
                    }
                    ((ObjectNode) scheduleValue).put("months", monthsArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getMonthDays() != null) {
                    ArrayNode monthDaysArray = objectMapper.createArrayNode();
                    for (int monthDaysItem : parameters.getRecurrence().getSchedule().getMonthDays()) {
                        monthDaysArray.add(monthDaysItem);
                    }
                    ((ObjectNode) scheduleValue).put("monthDays", monthDaysArray);
                }
                
                if (parameters.getRecurrence().getSchedule().getMonthlyOccurrences() != null) {
                    ArrayNode monthlyOccurrencesArray = objectMapper.createArrayNode();
                    for (JobScheduleMonthlyOccurrence monthlyOccurrencesItem : parameters.getRecurrence().getSchedule().getMonthlyOccurrences()) {
                        ObjectNode jobScheduleMonthlyOccurrenceValue = objectMapper.createObjectNode();
                        monthlyOccurrencesArray.add(jobScheduleMonthlyOccurrenceValue);
                        
                        ((ObjectNode) jobScheduleMonthlyOccurrenceValue).put("day", SchedulerClientImpl.jobScheduleDayToString(monthlyOccurrencesItem.getDay()));
                        
                        if (monthlyOccurrencesItem.getOccurrence() != null) {
                            ((ObjectNode) jobScheduleMonthlyOccurrenceValue).put("occurrence", monthlyOccurrencesItem.getOccurrence());
                        }
                    }
                    ((ObjectNode) scheduleValue).put("monthlyOccurrences", monthlyOccurrencesArray);
                }
            }
        }
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_CREATED) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobCreateOrUpdateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobCreateOrUpdateResponse();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                Job jobInstance = new Job();
                result.setJob(jobInstance);
                
                JsonNode idValue = responseDoc.get("id");
                if (idValue != null && idValue instanceof NullNode == false) {
                    String idInstance;
                    idInstance = idValue.getTextValue();
                    jobInstance.setId(idInstance);
                }
                
                JsonNode startTimeValue = responseDoc.get("startTime");
                if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                    Calendar startTimeInstance;
                    startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                    jobInstance.setStartTime(startTimeInstance);
                }
                
                JsonNode actionValue2 = responseDoc.get("action");
                if (actionValue2 != null && actionValue2 instanceof NullNode == false) {
                    JobAction actionInstance = new JobAction();
                    jobInstance.setAction(actionInstance);
                    
                    JsonNode typeValue = actionValue2.get("type");
                    if (typeValue != null && typeValue instanceof NullNode == false) {
                        JobActionType typeInstance;
                        typeInstance = SchedulerClientImpl.parseJobActionType(typeValue.getTextValue());
                        actionInstance.setType(typeInstance);
                    }
                    
                    JsonNode retryPolicyValue2 = actionValue2.get("retryPolicy");
                    if (retryPolicyValue2 != null && retryPolicyValue2 instanceof NullNode == false) {
                        RetryPolicy retryPolicyInstance = new RetryPolicy();
                        actionInstance.setRetryPolicy(retryPolicyInstance);
                        
                        JsonNode retryTypeValue = retryPolicyValue2.get("retryType");
                        if (retryTypeValue != null && retryTypeValue instanceof NullNode == false) {
                            RetryType retryTypeInstance;
                            retryTypeInstance = SchedulerClientImpl.parseRetryType(retryTypeValue.getTextValue());
                            retryPolicyInstance.setRetryType(retryTypeInstance);
                        }
                        
                        JsonNode retryIntervalValue = retryPolicyValue2.get("retryInterval");
                        if (retryIntervalValue != null && retryIntervalValue instanceof NullNode == false) {
                            Duration retryIntervalInstance;
                            retryIntervalInstance = TimeSpan8601Converter.parse(retryIntervalValue.getTextValue());
                            retryPolicyInstance.setRetryInterval(retryIntervalInstance);
                        }
                        
                        JsonNode retryCountValue = retryPolicyValue2.get("retryCount");
                        if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                            int retryCountInstance;
                            retryCountInstance = retryCountValue.getIntValue();
                            retryPolicyInstance.setRetryCount(retryCountInstance);
                        }
                    }
                    
                    JsonNode errorActionValue2 = actionValue2.get("errorAction");
                    if (errorActionValue2 != null && errorActionValue2 instanceof NullNode == false) {
                        JobErrorAction errorActionInstance = new JobErrorAction();
                        actionInstance.setErrorAction(errorActionInstance);
                        
                        JsonNode typeValue2 = errorActionValue2.get("type");
                        if (typeValue2 != null && typeValue2 instanceof NullNode == false) {
                            JobActionType typeInstance2;
                            typeInstance2 = SchedulerClientImpl.parseJobActionType(typeValue2.getTextValue());
                            errorActionInstance.setType(typeInstance2);
                        }
                        
                        JsonNode requestValue3 = errorActionValue2.get("request");
                        if (requestValue3 != null && requestValue3 instanceof NullNode == false) {
                            JobHttpRequest requestInstance = new JobHttpRequest();
                            errorActionInstance.setRequest(requestInstance);
                            
                            JsonNode uriValue = requestValue3.get("uri");
                            if (uriValue != null && uriValue instanceof NullNode == false) {
                                URI uriInstance;
                                uriInstance = new URI(uriValue.getTextValue());
                                requestInstance.setUri(uriInstance);
                            }
                            
                            JsonNode methodValue = requestValue3.get("method");
                            if (methodValue != null && methodValue instanceof NullNode == false) {
                                String methodInstance;
                                methodInstance = methodValue.getTextValue();
                                requestInstance.setMethod(methodInstance);
                            }
                            
                            JsonNode headersSequenceElement = ((JsonNode) requestValue3.get("headers"));
                            if (headersSequenceElement != null && headersSequenceElement instanceof NullNode == false) {
                                Iterator<Map.Entry<String, JsonNode>> itr = headersSequenceElement.getFields();
                                while (itr.hasNext()) {
                                    Map.Entry<String, JsonNode> property = itr.next();
                                    String headersKey3 = property.getKey();
                                    String headersValue3 = property.getValue().getTextValue();
                                    requestInstance.getHeaders().put(headersKey3, headersValue3);
                                }
                            }
                            
                            JsonNode bodyValue = requestValue3.get("body");
                            if (bodyValue != null && bodyValue instanceof NullNode == false) {
                                String bodyInstance;
                                bodyInstance = bodyValue.getTextValue();
                                requestInstance.setBody(bodyInstance);
                            }
                            
                            JsonNode authenticationValue3 = requestValue3.get("authentication");
                            if (authenticationValue3 != null && authenticationValue3 instanceof NullNode == false) {
                                String typeName = authenticationValue3.get("type").getTextValue();
                                if ("ClientCertificate".equals(typeName)) {
                                    ClientCertAuthentication clientCertAuthenticationInstance = new ClientCertAuthentication();
                                    
                                    JsonNode passwordValue = authenticationValue3.get("password");
                                    if (passwordValue != null && passwordValue instanceof NullNode == false) {
                                        String passwordInstance;
                                        passwordInstance = passwordValue.getTextValue();
                                        clientCertAuthenticationInstance.setPassword(passwordInstance);
                                    }
                                    
                                    JsonNode pfxValue = authenticationValue3.get("pfx");
                                    if (pfxValue != null && pfxValue instanceof NullNode == false) {
                                        String pfxInstance;
                                        pfxInstance = pfxValue.getTextValue();
                                        clientCertAuthenticationInstance.setPfx(pfxInstance);
                                    }
                                    
                                    JsonNode certificateThumbprintValue = authenticationValue3.get("certificateThumbprint");
                                    if (certificateThumbprintValue != null && certificateThumbprintValue instanceof NullNode == false) {
                                        String certificateThumbprintInstance;
                                        certificateThumbprintInstance = certificateThumbprintValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                    }
                                    
                                    JsonNode certificateExpirationValue = authenticationValue3.get("certificateExpiration");
                                    if (certificateExpirationValue != null && certificateExpirationValue instanceof NullNode == false) {
                                        Calendar certificateExpirationInstance;
                                        certificateExpirationInstance = DatatypeConverter.parseDateTime(certificateExpirationValue.getTextValue());
                                        clientCertAuthenticationInstance.setCertificateExpiration(certificateExpirationInstance);
                                    }
                                    
                                    JsonNode certificateSubjectNameValue = authenticationValue3.get("certificateSubjectName");
                                    if (certificateSubjectNameValue != null && certificateSubjectNameValue instanceof NullNode == false) {
                                        String certificateSubjectNameInstance;
                                        certificateSubjectNameInstance = certificateSubjectNameValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateSubjectName(certificateSubjectNameInstance);
                                    }
                                    
                                    JsonNode typeValue3 = authenticationValue3.get("type");
                                    if (typeValue3 != null && typeValue3 instanceof NullNode == false) {
                                        HttpAuthenticationType typeInstance3;
                                        typeInstance3 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue3.getTextValue());
                                        clientCertAuthenticationInstance.setType(typeInstance3);
                                    }
                                    requestInstance.setAuthentication(clientCertAuthenticationInstance);
                                }
                            }
                        }
                        
                        JsonNode queueMessageValue3 = errorActionValue2.get("queueMessage");
                        if (queueMessageValue3 != null && queueMessageValue3 instanceof NullNode == false) {
                            JobQueueMessage queueMessageInstance = new JobQueueMessage();
                            errorActionInstance.setQueueMessage(queueMessageInstance);
                            
                            JsonNode storageAccountValue = queueMessageValue3.get("storageAccount");
                            if (storageAccountValue != null && storageAccountValue instanceof NullNode == false) {
                                String storageAccountInstance;
                                storageAccountInstance = storageAccountValue.getTextValue();
                                queueMessageInstance.setStorageAccountName(storageAccountInstance);
                            }
                            
                            JsonNode queueNameValue = queueMessageValue3.get("queueName");
                            if (queueNameValue != null && queueNameValue instanceof NullNode == false) {
                                String queueNameInstance;
                                queueNameInstance = queueNameValue.getTextValue();
                                queueMessageInstance.setQueueName(queueNameInstance);
                            }
                            
                            JsonNode sasTokenValue = queueMessageValue3.get("sasToken");
                            if (sasTokenValue != null && sasTokenValue instanceof NullNode == false) {
                                String sasTokenInstance;
                                sasTokenInstance = sasTokenValue.getTextValue();
                                queueMessageInstance.setSasToken(sasTokenInstance);
                            }
                            
                            JsonNode messageValue = queueMessageValue3.get("message");
                            if (messageValue != null && messageValue instanceof NullNode == false) {
                                String messageInstance;
                                messageInstance = messageValue.getTextValue();
                                queueMessageInstance.setMessage(messageInstance);
                            }
                        }
                    }
                    
                    JsonNode requestValue4 = actionValue2.get("request");
                    if (requestValue4 != null && requestValue4 instanceof NullNode == false) {
                        JobHttpRequest requestInstance2 = new JobHttpRequest();
                        actionInstance.setRequest(requestInstance2);
                        
                        JsonNode uriValue2 = requestValue4.get("uri");
                        if (uriValue2 != null && uriValue2 instanceof NullNode == false) {
                            URI uriInstance2;
                            uriInstance2 = new URI(uriValue2.getTextValue());
                            requestInstance2.setUri(uriInstance2);
                        }
                        
                        JsonNode methodValue2 = requestValue4.get("method");
                        if (methodValue2 != null && methodValue2 instanceof NullNode == false) {
                            String methodInstance2;
                            methodInstance2 = methodValue2.getTextValue();
                            requestInstance2.setMethod(methodInstance2);
                        }
                        
                        JsonNode headersSequenceElement2 = ((JsonNode) requestValue4.get("headers"));
                        if (headersSequenceElement2 != null && headersSequenceElement2 instanceof NullNode == false) {
                            Iterator<Map.Entry<String, JsonNode>> itr2 = headersSequenceElement2.getFields();
                            while (itr2.hasNext()) {
                                Map.Entry<String, JsonNode> property2 = itr2.next();
                                String headersKey4 = property2.getKey();
                                String headersValue4 = property2.getValue().getTextValue();
                                requestInstance2.getHeaders().put(headersKey4, headersValue4);
                            }
                        }
                        
                        JsonNode bodyValue2 = requestValue4.get("body");
                        if (bodyValue2 != null && bodyValue2 instanceof NullNode == false) {
                            String bodyInstance2;
                            bodyInstance2 = bodyValue2.getTextValue();
                            requestInstance2.setBody(bodyInstance2);
                        }
                        
                        JsonNode authenticationValue4 = requestValue4.get("authentication");
                        if (authenticationValue4 != null && authenticationValue4 instanceof NullNode == false) {
                            String typeName2 = authenticationValue4.get("type").getTextValue();
                            if ("ClientCertificate".equals(typeName2)) {
                                ClientCertAuthentication clientCertAuthenticationInstance2 = new ClientCertAuthentication();
                                
                                JsonNode passwordValue2 = authenticationValue4.get("password");
                                if (passwordValue2 != null && passwordValue2 instanceof NullNode == false) {
                                    String passwordInstance2;
                                    passwordInstance2 = passwordValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPassword(passwordInstance2);
                                }
                                
                                JsonNode pfxValue2 = authenticationValue4.get("pfx");
                                if (pfxValue2 != null && pfxValue2 instanceof NullNode == false) {
                                    String pfxInstance2;
                                    pfxInstance2 = pfxValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPfx(pfxInstance2);
                                }
                                
                                JsonNode certificateThumbprintValue2 = authenticationValue4.get("certificateThumbprint");
                                if (certificateThumbprintValue2 != null && certificateThumbprintValue2 instanceof NullNode == false) {
                                    String certificateThumbprintInstance2;
                                    certificateThumbprintInstance2 = certificateThumbprintValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateThumbprint(certificateThumbprintInstance2);
                                }
                                
                                JsonNode certificateExpirationValue2 = authenticationValue4.get("certificateExpiration");
                                if (certificateExpirationValue2 != null && certificateExpirationValue2 instanceof NullNode == false) {
                                    Calendar certificateExpirationInstance2;
                                    certificateExpirationInstance2 = DatatypeConverter.parseDateTime(certificateExpirationValue2.getTextValue());
                                    clientCertAuthenticationInstance2.setCertificateExpiration(certificateExpirationInstance2);
                                }
                                
                                JsonNode certificateSubjectNameValue2 = authenticationValue4.get("certificateSubjectName");
                                if (certificateSubjectNameValue2 != null && certificateSubjectNameValue2 instanceof NullNode == false) {
                                    String certificateSubjectNameInstance2;
                                    certificateSubjectNameInstance2 = certificateSubjectNameValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateSubjectName(certificateSubjectNameInstance2);
                                }
                                
                                JsonNode typeValue4 = authenticationValue4.get("type");
                                if (typeValue4 != null && typeValue4 instanceof NullNode == false) {
                                    HttpAuthenticationType typeInstance4;
                                    typeInstance4 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue4.getTextValue());
                                    clientCertAuthenticationInstance2.setType(typeInstance4);
                                }
                                requestInstance2.setAuthentication(clientCertAuthenticationInstance2);
                            }
                        }
                    }
                    
                    JsonNode queueMessageValue4 = actionValue2.get("queueMessage");
                    if (queueMessageValue4 != null && queueMessageValue4 instanceof NullNode == false) {
                        JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                        actionInstance.setQueueMessage(queueMessageInstance2);
                        
                        JsonNode storageAccountValue2 = queueMessageValue4.get("storageAccount");
                        if (storageAccountValue2 != null && storageAccountValue2 instanceof NullNode == false) {
                            String storageAccountInstance2;
                            storageAccountInstance2 = storageAccountValue2.getTextValue();
                            queueMessageInstance2.setStorageAccountName(storageAccountInstance2);
                        }
                        
                        JsonNode queueNameValue2 = queueMessageValue4.get("queueName");
                        if (queueNameValue2 != null && queueNameValue2 instanceof NullNode == false) {
                            String queueNameInstance2;
                            queueNameInstance2 = queueNameValue2.getTextValue();
                            queueMessageInstance2.setQueueName(queueNameInstance2);
                        }
                        
                        JsonNode sasTokenValue2 = queueMessageValue4.get("sasToken");
                        if (sasTokenValue2 != null && sasTokenValue2 instanceof NullNode == false) {
                            String sasTokenInstance2;
                            sasTokenInstance2 = sasTokenValue2.getTextValue();
                            queueMessageInstance2.setSasToken(sasTokenInstance2);
                        }
                        
                        JsonNode messageValue2 = queueMessageValue4.get("message");
                        if (messageValue2 != null && messageValue2 instanceof NullNode == false) {
                            String messageInstance2;
                            messageInstance2 = messageValue2.getTextValue();
                            queueMessageInstance2.setMessage(messageInstance2);
                        }
                    }
                }
                
                JsonNode recurrenceValue2 = responseDoc.get("recurrence");
                if (recurrenceValue2 != null && recurrenceValue2 instanceof NullNode == false) {
                    JobRecurrence recurrenceInstance = new JobRecurrence();
                    jobInstance.setRecurrence(recurrenceInstance);
                    
                    JsonNode frequencyValue = recurrenceValue2.get("frequency");
                    if (frequencyValue != null && frequencyValue instanceof NullNode == false) {
                        JobRecurrenceFrequency frequencyInstance;
                        frequencyInstance = SchedulerClientImpl.parseJobRecurrenceFrequency(frequencyValue.getTextValue());
                        recurrenceInstance.setFrequency(frequencyInstance);
                    }
                    
                    JsonNode intervalValue = recurrenceValue2.get("interval");
                    if (intervalValue != null && intervalValue instanceof NullNode == false) {
                        int intervalInstance;
                        intervalInstance = intervalValue.getIntValue();
                        recurrenceInstance.setInterval(intervalInstance);
                    }
                    
                    JsonNode countValue = recurrenceValue2.get("count");
                    if (countValue != null && countValue instanceof NullNode == false) {
                        int countInstance;
                        countInstance = countValue.getIntValue();
                        recurrenceInstance.setCount(countInstance);
                    }
                    
                    JsonNode endTimeValue = recurrenceValue2.get("endTime");
                    if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                        Calendar endTimeInstance;
                        endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                        recurrenceInstance.setEndTime(endTimeInstance);
                    }
                    
                    JsonNode scheduleValue2 = recurrenceValue2.get("schedule");
                    if (scheduleValue2 != null && scheduleValue2 instanceof NullNode == false) {
                        JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                        recurrenceInstance.setSchedule(scheduleInstance);
                        
                        JsonNode minutesArray2 = scheduleValue2.get("minutes");
                        if (minutesArray2 != null && minutesArray2 instanceof NullNode == false) {
                            scheduleInstance.setMinutes(new ArrayList<Integer>());
                            for (JsonNode minutesValue : ((ArrayNode) minutesArray2)) {
                                scheduleInstance.getMinutes().add(minutesValue.getIntValue());
                            }
                        }
                        
                        JsonNode hoursArray2 = scheduleValue2.get("hours");
                        if (hoursArray2 != null && hoursArray2 instanceof NullNode == false) {
                            scheduleInstance.setHours(new ArrayList<Integer>());
                            for (JsonNode hoursValue : ((ArrayNode) hoursArray2)) {
                                scheduleInstance.getHours().add(hoursValue.getIntValue());
                            }
                        }
                        
                        JsonNode weekDaysArray2 = scheduleValue2.get("weekDays");
                        if (weekDaysArray2 != null && weekDaysArray2 instanceof NullNode == false) {
                            scheduleInstance.setDays(new ArrayList<JobScheduleDay>());
                            for (JsonNode weekDaysValue : ((ArrayNode) weekDaysArray2)) {
                                scheduleInstance.getDays().add(SchedulerClientImpl.parseJobScheduleDay(weekDaysValue.getTextValue()));
                            }
                        }
                        
                        JsonNode monthsArray2 = scheduleValue2.get("months");
                        if (monthsArray2 != null && monthsArray2 instanceof NullNode == false) {
                            scheduleInstance.setMonths(new ArrayList<Integer>());
                            for (JsonNode monthsValue : ((ArrayNode) monthsArray2)) {
                                scheduleInstance.getMonths().add(monthsValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthDaysArray2 = scheduleValue2.get("monthDays");
                        if (monthDaysArray2 != null && monthDaysArray2 instanceof NullNode == false) {
                            scheduleInstance.setMonthDays(new ArrayList<Integer>());
                            for (JsonNode monthDaysValue : ((ArrayNode) monthDaysArray2)) {
                                scheduleInstance.getMonthDays().add(monthDaysValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthlyOccurrencesArray2 = scheduleValue2.get("monthlyOccurrences");
                        if (monthlyOccurrencesArray2 != null && monthlyOccurrencesArray2 instanceof NullNode == false) {
                            scheduleInstance.setMonthlyOccurrences(new ArrayList<JobScheduleMonthlyOccurrence>());
                            for (JsonNode monthlyOccurrencesValue : ((ArrayNode) monthlyOccurrencesArray2)) {
                                JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                scheduleInstance.getMonthlyOccurrences().add(jobScheduleMonthlyOccurrenceInstance);
                                
                                JsonNode dayValue = monthlyOccurrencesValue.get("day");
                                if (dayValue != null && dayValue instanceof NullNode == false) {
                                    JobScheduleDay dayInstance;
                                    dayInstance = SchedulerClientImpl.parseJobScheduleDay(dayValue.getTextValue());
                                    jobScheduleMonthlyOccurrenceInstance.setDay(dayInstance);
                                }
                                
                                JsonNode occurrenceValue = monthlyOccurrencesValue.get("occurrence");
                                if (occurrenceValue != null && occurrenceValue instanceof NullNode == false) {
                                    int occurrenceInstance;
                                    occurrenceInstance = occurrenceValue.getIntValue();
                                    jobScheduleMonthlyOccurrenceInstance.setOccurrence(occurrenceInstance);
                                }
                            }
                        }
                    }
                }
                
                JsonNode statusValue = responseDoc.get("status");
                if (statusValue != null && statusValue instanceof NullNode == false) {
                    JobStatus statusInstance = new JobStatus();
                    jobInstance.setStatus(statusInstance);
                    
                    JsonNode lastExecutionTimeValue = statusValue.get("lastExecutionTime");
                    if (lastExecutionTimeValue != null && lastExecutionTimeValue instanceof NullNode == false) {
                        Calendar lastExecutionTimeInstance;
                        lastExecutionTimeInstance = DatatypeConverter.parseDateTime(lastExecutionTimeValue.getTextValue());
                        statusInstance.setLastExecutionTime(lastExecutionTimeInstance);
                    }
                    
                    JsonNode nextExecutionTimeValue = statusValue.get("nextExecutionTime");
                    if (nextExecutionTimeValue != null && nextExecutionTimeValue instanceof NullNode == false) {
                        Calendar nextExecutionTimeInstance;
                        nextExecutionTimeInstance = DatatypeConverter.parseDateTime(nextExecutionTimeValue.getTextValue());
                        statusInstance.setNextExecutionTime(nextExecutionTimeInstance);
                    }
                    
                    JsonNode executionCountValue = statusValue.get("executionCount");
                    if (executionCountValue != null && executionCountValue instanceof NullNode == false) {
                        int executionCountInstance;
                        executionCountInstance = executionCountValue.getIntValue();
                        statusInstance.setExecutionCount(executionCountInstance);
                    }
                    
                    JsonNode failureCountValue = statusValue.get("failureCount");
                    if (failureCountValue != null && failureCountValue instanceof NullNode == false) {
                        int failureCountInstance;
                        failureCountInstance = failureCountValue.getIntValue();
                        statusInstance.setFailureCount(failureCountInstance);
                    }
                    
                    JsonNode faultedCountValue = statusValue.get("faultedCount");
                    if (faultedCountValue != null && faultedCountValue instanceof NullNode == false) {
                        int faultedCountInstance;
                        faultedCountInstance = faultedCountValue.getIntValue();
                        statusInstance.setFaultedCount(faultedCountInstance);
                    }
                }
                
                JsonNode stateValue = responseDoc.get("state");
                if (stateValue != null && stateValue instanceof NullNode == false) {
                    JobState stateInstance;
                    stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                    jobInstance.setState(stateInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Deletes a job.
    *
    * @param jobId Required. Id of the job to delete.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String jobId) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return delete(jobId);
            }
         });
    }
    
    /**
    * Deletes a job.
    *
    * @param jobId Required. Id of the job to delete.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String jobId) throws IOException, ServiceException {
        // Validate
        if (jobId == null) {
            throw new NullPointerException("jobId");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("jobId", jobId);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs/" + jobId.trim() + "?";
        url = url + "api-version=" + "2014-04-01";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get the definition and status of a job.
    *
    * @param jobId Required. Id of the job to get.
    * @return The Get Job operation response.
    */
    @Override
    public Future<JobGetResponse> getAsync(final String jobId) {
        return this.getClient().getExecutorService().submit(new Callable<JobGetResponse>() { 
            @Override
            public JobGetResponse call() throws Exception {
                return get(jobId);
            }
         });
    }
    
    /**
    * Get the definition and status of a job.
    *
    * @param jobId Required. Id of the job to get.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Job operation response.
    */
    @Override
    public JobGetResponse get(String jobId) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (jobId == null) {
            throw new NullPointerException("jobId");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("jobId", jobId);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs/" + jobId.trim() + "?";
        url = url + "api-version=" + "2014-04-01";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobGetResponse();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                Job jobInstance = new Job();
                result.setJob(jobInstance);
                
                JsonNode idValue = responseDoc.get("id");
                if (idValue != null && idValue instanceof NullNode == false) {
                    String idInstance;
                    idInstance = idValue.getTextValue();
                    jobInstance.setId(idInstance);
                }
                
                JsonNode startTimeValue = responseDoc.get("startTime");
                if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                    Calendar startTimeInstance;
                    startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                    jobInstance.setStartTime(startTimeInstance);
                }
                
                JsonNode actionValue = responseDoc.get("action");
                if (actionValue != null && actionValue instanceof NullNode == false) {
                    JobAction actionInstance = new JobAction();
                    jobInstance.setAction(actionInstance);
                    
                    JsonNode typeValue = actionValue.get("type");
                    if (typeValue != null && typeValue instanceof NullNode == false) {
                        JobActionType typeInstance;
                        typeInstance = SchedulerClientImpl.parseJobActionType(typeValue.getTextValue());
                        actionInstance.setType(typeInstance);
                    }
                    
                    JsonNode retryPolicyValue = actionValue.get("retryPolicy");
                    if (retryPolicyValue != null && retryPolicyValue instanceof NullNode == false) {
                        RetryPolicy retryPolicyInstance = new RetryPolicy();
                        actionInstance.setRetryPolicy(retryPolicyInstance);
                        
                        JsonNode retryTypeValue = retryPolicyValue.get("retryType");
                        if (retryTypeValue != null && retryTypeValue instanceof NullNode == false) {
                            RetryType retryTypeInstance;
                            retryTypeInstance = SchedulerClientImpl.parseRetryType(retryTypeValue.getTextValue());
                            retryPolicyInstance.setRetryType(retryTypeInstance);
                        }
                        
                        JsonNode retryIntervalValue = retryPolicyValue.get("retryInterval");
                        if (retryIntervalValue != null && retryIntervalValue instanceof NullNode == false) {
                            Duration retryIntervalInstance;
                            retryIntervalInstance = TimeSpan8601Converter.parse(retryIntervalValue.getTextValue());
                            retryPolicyInstance.setRetryInterval(retryIntervalInstance);
                        }
                        
                        JsonNode retryCountValue = retryPolicyValue.get("retryCount");
                        if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                            int retryCountInstance;
                            retryCountInstance = retryCountValue.getIntValue();
                            retryPolicyInstance.setRetryCount(retryCountInstance);
                        }
                    }
                    
                    JsonNode errorActionValue = actionValue.get("errorAction");
                    if (errorActionValue != null && errorActionValue instanceof NullNode == false) {
                        JobErrorAction errorActionInstance = new JobErrorAction();
                        actionInstance.setErrorAction(errorActionInstance);
                        
                        JsonNode typeValue2 = errorActionValue.get("type");
                        if (typeValue2 != null && typeValue2 instanceof NullNode == false) {
                            JobActionType typeInstance2;
                            typeInstance2 = SchedulerClientImpl.parseJobActionType(typeValue2.getTextValue());
                            errorActionInstance.setType(typeInstance2);
                        }
                        
                        JsonNode requestValue = errorActionValue.get("request");
                        if (requestValue != null && requestValue instanceof NullNode == false) {
                            JobHttpRequest requestInstance = new JobHttpRequest();
                            errorActionInstance.setRequest(requestInstance);
                            
                            JsonNode uriValue = requestValue.get("uri");
                            if (uriValue != null && uriValue instanceof NullNode == false) {
                                URI uriInstance;
                                uriInstance = new URI(uriValue.getTextValue());
                                requestInstance.setUri(uriInstance);
                            }
                            
                            JsonNode methodValue = requestValue.get("method");
                            if (methodValue != null && methodValue instanceof NullNode == false) {
                                String methodInstance;
                                methodInstance = methodValue.getTextValue();
                                requestInstance.setMethod(methodInstance);
                            }
                            
                            JsonNode headersSequenceElement = ((JsonNode) requestValue.get("headers"));
                            if (headersSequenceElement != null && headersSequenceElement instanceof NullNode == false) {
                                Iterator<Map.Entry<String, JsonNode>> itr = headersSequenceElement.getFields();
                                while (itr.hasNext()) {
                                    Map.Entry<String, JsonNode> property = itr.next();
                                    String headersKey = property.getKey();
                                    String headersValue = property.getValue().getTextValue();
                                    requestInstance.getHeaders().put(headersKey, headersValue);
                                }
                            }
                            
                            JsonNode bodyValue = requestValue.get("body");
                            if (bodyValue != null && bodyValue instanceof NullNode == false) {
                                String bodyInstance;
                                bodyInstance = bodyValue.getTextValue();
                                requestInstance.setBody(bodyInstance);
                            }
                            
                            JsonNode authenticationValue = requestValue.get("authentication");
                            if (authenticationValue != null && authenticationValue instanceof NullNode == false) {
                                String typeName = authenticationValue.get("type").getTextValue();
                                if ("ClientCertificate".equals(typeName)) {
                                    ClientCertAuthentication clientCertAuthenticationInstance = new ClientCertAuthentication();
                                    
                                    JsonNode passwordValue = authenticationValue.get("password");
                                    if (passwordValue != null && passwordValue instanceof NullNode == false) {
                                        String passwordInstance;
                                        passwordInstance = passwordValue.getTextValue();
                                        clientCertAuthenticationInstance.setPassword(passwordInstance);
                                    }
                                    
                                    JsonNode pfxValue = authenticationValue.get("pfx");
                                    if (pfxValue != null && pfxValue instanceof NullNode == false) {
                                        String pfxInstance;
                                        pfxInstance = pfxValue.getTextValue();
                                        clientCertAuthenticationInstance.setPfx(pfxInstance);
                                    }
                                    
                                    JsonNode certificateThumbprintValue = authenticationValue.get("certificateThumbprint");
                                    if (certificateThumbprintValue != null && certificateThumbprintValue instanceof NullNode == false) {
                                        String certificateThumbprintInstance;
                                        certificateThumbprintInstance = certificateThumbprintValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                    }
                                    
                                    JsonNode certificateExpirationValue = authenticationValue.get("certificateExpiration");
                                    if (certificateExpirationValue != null && certificateExpirationValue instanceof NullNode == false) {
                                        Calendar certificateExpirationInstance;
                                        certificateExpirationInstance = DatatypeConverter.parseDateTime(certificateExpirationValue.getTextValue());
                                        clientCertAuthenticationInstance.setCertificateExpiration(certificateExpirationInstance);
                                    }
                                    
                                    JsonNode certificateSubjectNameValue = authenticationValue.get("certificateSubjectName");
                                    if (certificateSubjectNameValue != null && certificateSubjectNameValue instanceof NullNode == false) {
                                        String certificateSubjectNameInstance;
                                        certificateSubjectNameInstance = certificateSubjectNameValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateSubjectName(certificateSubjectNameInstance);
                                    }
                                    
                                    JsonNode typeValue3 = authenticationValue.get("type");
                                    if (typeValue3 != null && typeValue3 instanceof NullNode == false) {
                                        HttpAuthenticationType typeInstance3;
                                        typeInstance3 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue3.getTextValue());
                                        clientCertAuthenticationInstance.setType(typeInstance3);
                                    }
                                    requestInstance.setAuthentication(clientCertAuthenticationInstance);
                                }
                            }
                        }
                        
                        JsonNode queueMessageValue = errorActionValue.get("queueMessage");
                        if (queueMessageValue != null && queueMessageValue instanceof NullNode == false) {
                            JobQueueMessage queueMessageInstance = new JobQueueMessage();
                            errorActionInstance.setQueueMessage(queueMessageInstance);
                            
                            JsonNode storageAccountValue = queueMessageValue.get("storageAccount");
                            if (storageAccountValue != null && storageAccountValue instanceof NullNode == false) {
                                String storageAccountInstance;
                                storageAccountInstance = storageAccountValue.getTextValue();
                                queueMessageInstance.setStorageAccountName(storageAccountInstance);
                            }
                            
                            JsonNode queueNameValue = queueMessageValue.get("queueName");
                            if (queueNameValue != null && queueNameValue instanceof NullNode == false) {
                                String queueNameInstance;
                                queueNameInstance = queueNameValue.getTextValue();
                                queueMessageInstance.setQueueName(queueNameInstance);
                            }
                            
                            JsonNode sasTokenValue = queueMessageValue.get("sasToken");
                            if (sasTokenValue != null && sasTokenValue instanceof NullNode == false) {
                                String sasTokenInstance;
                                sasTokenInstance = sasTokenValue.getTextValue();
                                queueMessageInstance.setSasToken(sasTokenInstance);
                            }
                            
                            JsonNode messageValue = queueMessageValue.get("message");
                            if (messageValue != null && messageValue instanceof NullNode == false) {
                                String messageInstance;
                                messageInstance = messageValue.getTextValue();
                                queueMessageInstance.setMessage(messageInstance);
                            }
                        }
                    }
                    
                    JsonNode requestValue2 = actionValue.get("request");
                    if (requestValue2 != null && requestValue2 instanceof NullNode == false) {
                        JobHttpRequest requestInstance2 = new JobHttpRequest();
                        actionInstance.setRequest(requestInstance2);
                        
                        JsonNode uriValue2 = requestValue2.get("uri");
                        if (uriValue2 != null && uriValue2 instanceof NullNode == false) {
                            URI uriInstance2;
                            uriInstance2 = new URI(uriValue2.getTextValue());
                            requestInstance2.setUri(uriInstance2);
                        }
                        
                        JsonNode methodValue2 = requestValue2.get("method");
                        if (methodValue2 != null && methodValue2 instanceof NullNode == false) {
                            String methodInstance2;
                            methodInstance2 = methodValue2.getTextValue();
                            requestInstance2.setMethod(methodInstance2);
                        }
                        
                        JsonNode headersSequenceElement2 = ((JsonNode) requestValue2.get("headers"));
                        if (headersSequenceElement2 != null && headersSequenceElement2 instanceof NullNode == false) {
                            Iterator<Map.Entry<String, JsonNode>> itr2 = headersSequenceElement2.getFields();
                            while (itr2.hasNext()) {
                                Map.Entry<String, JsonNode> property2 = itr2.next();
                                String headersKey2 = property2.getKey();
                                String headersValue2 = property2.getValue().getTextValue();
                                requestInstance2.getHeaders().put(headersKey2, headersValue2);
                            }
                        }
                        
                        JsonNode bodyValue2 = requestValue2.get("body");
                        if (bodyValue2 != null && bodyValue2 instanceof NullNode == false) {
                            String bodyInstance2;
                            bodyInstance2 = bodyValue2.getTextValue();
                            requestInstance2.setBody(bodyInstance2);
                        }
                        
                        JsonNode authenticationValue2 = requestValue2.get("authentication");
                        if (authenticationValue2 != null && authenticationValue2 instanceof NullNode == false) {
                            String typeName2 = authenticationValue2.get("type").getTextValue();
                            if ("ClientCertificate".equals(typeName2)) {
                                ClientCertAuthentication clientCertAuthenticationInstance2 = new ClientCertAuthentication();
                                
                                JsonNode passwordValue2 = authenticationValue2.get("password");
                                if (passwordValue2 != null && passwordValue2 instanceof NullNode == false) {
                                    String passwordInstance2;
                                    passwordInstance2 = passwordValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPassword(passwordInstance2);
                                }
                                
                                JsonNode pfxValue2 = authenticationValue2.get("pfx");
                                if (pfxValue2 != null && pfxValue2 instanceof NullNode == false) {
                                    String pfxInstance2;
                                    pfxInstance2 = pfxValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPfx(pfxInstance2);
                                }
                                
                                JsonNode certificateThumbprintValue2 = authenticationValue2.get("certificateThumbprint");
                                if (certificateThumbprintValue2 != null && certificateThumbprintValue2 instanceof NullNode == false) {
                                    String certificateThumbprintInstance2;
                                    certificateThumbprintInstance2 = certificateThumbprintValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateThumbprint(certificateThumbprintInstance2);
                                }
                                
                                JsonNode certificateExpirationValue2 = authenticationValue2.get("certificateExpiration");
                                if (certificateExpirationValue2 != null && certificateExpirationValue2 instanceof NullNode == false) {
                                    Calendar certificateExpirationInstance2;
                                    certificateExpirationInstance2 = DatatypeConverter.parseDateTime(certificateExpirationValue2.getTextValue());
                                    clientCertAuthenticationInstance2.setCertificateExpiration(certificateExpirationInstance2);
                                }
                                
                                JsonNode certificateSubjectNameValue2 = authenticationValue2.get("certificateSubjectName");
                                if (certificateSubjectNameValue2 != null && certificateSubjectNameValue2 instanceof NullNode == false) {
                                    String certificateSubjectNameInstance2;
                                    certificateSubjectNameInstance2 = certificateSubjectNameValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateSubjectName(certificateSubjectNameInstance2);
                                }
                                
                                JsonNode typeValue4 = authenticationValue2.get("type");
                                if (typeValue4 != null && typeValue4 instanceof NullNode == false) {
                                    HttpAuthenticationType typeInstance4;
                                    typeInstance4 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue4.getTextValue());
                                    clientCertAuthenticationInstance2.setType(typeInstance4);
                                }
                                requestInstance2.setAuthentication(clientCertAuthenticationInstance2);
                            }
                        }
                    }
                    
                    JsonNode queueMessageValue2 = actionValue.get("queueMessage");
                    if (queueMessageValue2 != null && queueMessageValue2 instanceof NullNode == false) {
                        JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                        actionInstance.setQueueMessage(queueMessageInstance2);
                        
                        JsonNode storageAccountValue2 = queueMessageValue2.get("storageAccount");
                        if (storageAccountValue2 != null && storageAccountValue2 instanceof NullNode == false) {
                            String storageAccountInstance2;
                            storageAccountInstance2 = storageAccountValue2.getTextValue();
                            queueMessageInstance2.setStorageAccountName(storageAccountInstance2);
                        }
                        
                        JsonNode queueNameValue2 = queueMessageValue2.get("queueName");
                        if (queueNameValue2 != null && queueNameValue2 instanceof NullNode == false) {
                            String queueNameInstance2;
                            queueNameInstance2 = queueNameValue2.getTextValue();
                            queueMessageInstance2.setQueueName(queueNameInstance2);
                        }
                        
                        JsonNode sasTokenValue2 = queueMessageValue2.get("sasToken");
                        if (sasTokenValue2 != null && sasTokenValue2 instanceof NullNode == false) {
                            String sasTokenInstance2;
                            sasTokenInstance2 = sasTokenValue2.getTextValue();
                            queueMessageInstance2.setSasToken(sasTokenInstance2);
                        }
                        
                        JsonNode messageValue2 = queueMessageValue2.get("message");
                        if (messageValue2 != null && messageValue2 instanceof NullNode == false) {
                            String messageInstance2;
                            messageInstance2 = messageValue2.getTextValue();
                            queueMessageInstance2.setMessage(messageInstance2);
                        }
                    }
                }
                
                JsonNode recurrenceValue = responseDoc.get("recurrence");
                if (recurrenceValue != null && recurrenceValue instanceof NullNode == false) {
                    JobRecurrence recurrenceInstance = new JobRecurrence();
                    jobInstance.setRecurrence(recurrenceInstance);
                    
                    JsonNode frequencyValue = recurrenceValue.get("frequency");
                    if (frequencyValue != null && frequencyValue instanceof NullNode == false) {
                        JobRecurrenceFrequency frequencyInstance;
                        frequencyInstance = SchedulerClientImpl.parseJobRecurrenceFrequency(frequencyValue.getTextValue());
                        recurrenceInstance.setFrequency(frequencyInstance);
                    }
                    
                    JsonNode intervalValue = recurrenceValue.get("interval");
                    if (intervalValue != null && intervalValue instanceof NullNode == false) {
                        int intervalInstance;
                        intervalInstance = intervalValue.getIntValue();
                        recurrenceInstance.setInterval(intervalInstance);
                    }
                    
                    JsonNode countValue = recurrenceValue.get("count");
                    if (countValue != null && countValue instanceof NullNode == false) {
                        int countInstance;
                        countInstance = countValue.getIntValue();
                        recurrenceInstance.setCount(countInstance);
                    }
                    
                    JsonNode endTimeValue = recurrenceValue.get("endTime");
                    if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                        Calendar endTimeInstance;
                        endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                        recurrenceInstance.setEndTime(endTimeInstance);
                    }
                    
                    JsonNode scheduleValue = recurrenceValue.get("schedule");
                    if (scheduleValue != null && scheduleValue instanceof NullNode == false) {
                        JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                        recurrenceInstance.setSchedule(scheduleInstance);
                        
                        JsonNode minutesArray = scheduleValue.get("minutes");
                        if (minutesArray != null && minutesArray instanceof NullNode == false) {
                            scheduleInstance.setMinutes(new ArrayList<Integer>());
                            for (JsonNode minutesValue : ((ArrayNode) minutesArray)) {
                                scheduleInstance.getMinutes().add(minutesValue.getIntValue());
                            }
                        }
                        
                        JsonNode hoursArray = scheduleValue.get("hours");
                        if (hoursArray != null && hoursArray instanceof NullNode == false) {
                            scheduleInstance.setHours(new ArrayList<Integer>());
                            for (JsonNode hoursValue : ((ArrayNode) hoursArray)) {
                                scheduleInstance.getHours().add(hoursValue.getIntValue());
                            }
                        }
                        
                        JsonNode weekDaysArray = scheduleValue.get("weekDays");
                        if (weekDaysArray != null && weekDaysArray instanceof NullNode == false) {
                            scheduleInstance.setDays(new ArrayList<JobScheduleDay>());
                            for (JsonNode weekDaysValue : ((ArrayNode) weekDaysArray)) {
                                scheduleInstance.getDays().add(SchedulerClientImpl.parseJobScheduleDay(weekDaysValue.getTextValue()));
                            }
                        }
                        
                        JsonNode monthsArray = scheduleValue.get("months");
                        if (monthsArray != null && monthsArray instanceof NullNode == false) {
                            scheduleInstance.setMonths(new ArrayList<Integer>());
                            for (JsonNode monthsValue : ((ArrayNode) monthsArray)) {
                                scheduleInstance.getMonths().add(monthsValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthDaysArray = scheduleValue.get("monthDays");
                        if (monthDaysArray != null && monthDaysArray instanceof NullNode == false) {
                            scheduleInstance.setMonthDays(new ArrayList<Integer>());
                            for (JsonNode monthDaysValue : ((ArrayNode) monthDaysArray)) {
                                scheduleInstance.getMonthDays().add(monthDaysValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthlyOccurrencesArray = scheduleValue.get("monthlyOccurrences");
                        if (monthlyOccurrencesArray != null && monthlyOccurrencesArray instanceof NullNode == false) {
                            scheduleInstance.setMonthlyOccurrences(new ArrayList<JobScheduleMonthlyOccurrence>());
                            for (JsonNode monthlyOccurrencesValue : ((ArrayNode) monthlyOccurrencesArray)) {
                                JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                scheduleInstance.getMonthlyOccurrences().add(jobScheduleMonthlyOccurrenceInstance);
                                
                                JsonNode dayValue = monthlyOccurrencesValue.get("day");
                                if (dayValue != null && dayValue instanceof NullNode == false) {
                                    JobScheduleDay dayInstance;
                                    dayInstance = SchedulerClientImpl.parseJobScheduleDay(dayValue.getTextValue());
                                    jobScheduleMonthlyOccurrenceInstance.setDay(dayInstance);
                                }
                                
                                JsonNode occurrenceValue = monthlyOccurrencesValue.get("occurrence");
                                if (occurrenceValue != null && occurrenceValue instanceof NullNode == false) {
                                    int occurrenceInstance;
                                    occurrenceInstance = occurrenceValue.getIntValue();
                                    jobScheduleMonthlyOccurrenceInstance.setOccurrence(occurrenceInstance);
                                }
                            }
                        }
                    }
                }
                
                JsonNode statusValue = responseDoc.get("status");
                if (statusValue != null && statusValue instanceof NullNode == false) {
                    JobStatus statusInstance = new JobStatus();
                    jobInstance.setStatus(statusInstance);
                    
                    JsonNode lastExecutionTimeValue = statusValue.get("lastExecutionTime");
                    if (lastExecutionTimeValue != null && lastExecutionTimeValue instanceof NullNode == false) {
                        Calendar lastExecutionTimeInstance;
                        lastExecutionTimeInstance = DatatypeConverter.parseDateTime(lastExecutionTimeValue.getTextValue());
                        statusInstance.setLastExecutionTime(lastExecutionTimeInstance);
                    }
                    
                    JsonNode nextExecutionTimeValue = statusValue.get("nextExecutionTime");
                    if (nextExecutionTimeValue != null && nextExecutionTimeValue instanceof NullNode == false) {
                        Calendar nextExecutionTimeInstance;
                        nextExecutionTimeInstance = DatatypeConverter.parseDateTime(nextExecutionTimeValue.getTextValue());
                        statusInstance.setNextExecutionTime(nextExecutionTimeInstance);
                    }
                    
                    JsonNode executionCountValue = statusValue.get("executionCount");
                    if (executionCountValue != null && executionCountValue instanceof NullNode == false) {
                        int executionCountInstance;
                        executionCountInstance = executionCountValue.getIntValue();
                        statusInstance.setExecutionCount(executionCountInstance);
                    }
                    
                    JsonNode failureCountValue = statusValue.get("failureCount");
                    if (failureCountValue != null && failureCountValue instanceof NullNode == false) {
                        int failureCountInstance;
                        failureCountInstance = failureCountValue.getIntValue();
                        statusInstance.setFailureCount(failureCountInstance);
                    }
                    
                    JsonNode faultedCountValue = statusValue.get("faultedCount");
                    if (faultedCountValue != null && faultedCountValue instanceof NullNode == false) {
                        int faultedCountInstance;
                        faultedCountInstance = faultedCountValue.getIntValue();
                        statusInstance.setFaultedCount(faultedCountInstance);
                    }
                }
                
                JsonNode stateValue = responseDoc.get("state");
                if (stateValue != null && stateValue instanceof NullNode == false) {
                    JobState stateInstance;
                    stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                    jobInstance.setState(stateInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get the execution history of a Job.
    *
    * @param jobId Required. Id of the job to get the history of.
    * @param parameters Required. Parameters supplied to the Get Job History
    * operation.
    * @return The Get Job History operation response.
    */
    @Override
    public Future<JobGetHistoryResponse> getHistoryAsync(final String jobId, final JobGetHistoryParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobGetHistoryResponse>() { 
            @Override
            public JobGetHistoryResponse call() throws Exception {
                return getHistory(jobId, parameters);
            }
         });
    }
    
    /**
    * Get the execution history of a Job.
    *
    * @param jobId Required. Id of the job to get the history of.
    * @param parameters Required. Parameters supplied to the Get Job History
    * operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return The Get Job History operation response.
    */
    @Override
    public JobGetHistoryResponse getHistory(String jobId, JobGetHistoryParameters parameters) throws IOException, ServiceException {
        // Validate
        if (jobId == null) {
            throw new NullPointerException("jobId");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("jobId", jobId);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "getHistoryAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs/" + jobId.trim() + "/history" + "?";
        url = url + "api-version=" + "2014-04-01";
        if (parameters.getSkip() != null) {
            url = url + "&" + "$skip=" + URLEncoder.encode(Integer.toString(parameters.getSkip()), "UTF-8");
        }
        if (parameters.getTop() != null) {
            url = url + "&" + "$top=" + URLEncoder.encode(Integer.toString(parameters.getTop()), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobGetHistoryResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobGetHistoryResponse();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                JsonNode jobHistoryArray = responseDoc;
                if (jobHistoryArray != null && jobHistoryArray instanceof NullNode == false) {
                    for (JsonNode jobHistoryValue : ((ArrayNode) jobHistoryArray)) {
                        JobGetHistoryResponse.JobHistoryEntry jobHistoryEntryInstance = new JobGetHistoryResponse.JobHistoryEntry();
                        result.getJobHistory().add(jobHistoryEntryInstance);
                        
                        JsonNode jobIdValue = jobHistoryValue.get("jobId");
                        if (jobIdValue != null && jobIdValue instanceof NullNode == false) {
                            String jobIdInstance;
                            jobIdInstance = jobIdValue.getTextValue();
                            jobHistoryEntryInstance.setId(jobIdInstance);
                        }
                        
                        JsonNode timestampValue = jobHistoryValue.get("timestamp");
                        if (timestampValue != null && timestampValue instanceof NullNode == false) {
                            Calendar timestampInstance;
                            timestampInstance = DatatypeConverter.parseDateTime(timestampValue.getTextValue());
                            jobHistoryEntryInstance.setTimestamp(timestampInstance);
                        }
                        
                        JsonNode startTimeValue = jobHistoryValue.get("startTime");
                        if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                            Calendar startTimeInstance;
                            startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                            jobHistoryEntryInstance.setStartTime(startTimeInstance);
                        }
                        
                        JsonNode endTimeValue = jobHistoryValue.get("endTime");
                        if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                            Calendar endTimeInstance;
                            endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                            jobHistoryEntryInstance.setEndTime(endTimeInstance);
                        }
                        
                        JsonNode stateValue = jobHistoryValue.get("state");
                        if (stateValue != null && stateValue instanceof NullNode == false) {
                            JobState stateInstance;
                            stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                            jobHistoryEntryInstance.setState(stateInstance);
                        }
                        
                        JsonNode messageValue = jobHistoryValue.get("message");
                        if (messageValue != null && messageValue instanceof NullNode == false) {
                            String messageInstance;
                            messageInstance = messageValue.getTextValue();
                            jobHistoryEntryInstance.setMessage(messageInstance);
                        }
                        
                        JsonNode statusValue = jobHistoryValue.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            JobHistoryStatus statusInstance;
                            statusInstance = SchedulerClientImpl.parseJobHistoryStatus(statusValue.getTextValue());
                            jobHistoryEntryInstance.setStatus(statusInstance);
                        }
                        
                        JsonNode actionNameValue = jobHistoryValue.get("actionName");
                        if (actionNameValue != null && actionNameValue instanceof NullNode == false) {
                            JobHistoryActionName actionNameInstance;
                            actionNameInstance = SchedulerClientImpl.parseJobHistoryActionName(actionNameValue.getTextValue());
                            jobHistoryEntryInstance.setActionName(actionNameInstance);
                        }
                        
                        JsonNode repeatCountValue = jobHistoryValue.get("repeatCount");
                        if (repeatCountValue != null && repeatCountValue instanceof NullNode == false) {
                            int repeatCountInstance;
                            repeatCountInstance = repeatCountValue.getIntValue();
                            jobHistoryEntryInstance.setRepeatCount(repeatCountInstance);
                        }
                        
                        JsonNode retryCountValue = jobHistoryValue.get("retryCount");
                        if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                            int retryCountInstance;
                            retryCountInstance = retryCountValue.getIntValue();
                            jobHistoryEntryInstance.setRetryCount(retryCountInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get the execution history of a Job with a filter on the job Status.
    *
    * @param jobId Required. Id of the job to get the history of.
    * @param parameters Required. Parameters supplied to the Get Job History
    * With Filter operation.
    * @return The Get Job History operation response.
    */
    @Override
    public Future<JobGetHistoryResponse> getHistoryWithFilterAsync(final String jobId, final JobGetHistoryWithFilterParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobGetHistoryResponse>() { 
            @Override
            public JobGetHistoryResponse call() throws Exception {
                return getHistoryWithFilter(jobId, parameters);
            }
         });
    }
    
    /**
    * Get the execution history of a Job with a filter on the job Status.
    *
    * @param jobId Required. Id of the job to get the history of.
    * @param parameters Required. Parameters supplied to the Get Job History
    * With Filter operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return The Get Job History operation response.
    */
    @Override
    public JobGetHistoryResponse getHistoryWithFilter(String jobId, JobGetHistoryWithFilterParameters parameters) throws IOException, ServiceException {
        // Validate
        if (jobId == null) {
            throw new NullPointerException("jobId");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("jobId", jobId);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "getHistoryWithFilterAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs/" + jobId.trim() + "/history" + "?";
        url = url + "api-version=" + "2014-04-01";
        url = url + "&" + "$filter=status eq " + URLEncoder.encode(SchedulerClientImpl.jobHistoryStatusToString(parameters.getStatus()), "UTF-8");
        if (parameters.getSkip() != null) {
            url = url + "&" + "$skip=" + URLEncoder.encode(Integer.toString(parameters.getSkip()), "UTF-8");
        }
        if (parameters.getTop() != null) {
            url = url + "&" + "$top=" + URLEncoder.encode(Integer.toString(parameters.getTop()), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobGetHistoryResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobGetHistoryResponse();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                JsonNode jobHistoryArray = responseDoc;
                if (jobHistoryArray != null && jobHistoryArray instanceof NullNode == false) {
                    for (JsonNode jobHistoryValue : ((ArrayNode) jobHistoryArray)) {
                        JobGetHistoryResponse.JobHistoryEntry jobHistoryEntryInstance = new JobGetHistoryResponse.JobHistoryEntry();
                        result.getJobHistory().add(jobHistoryEntryInstance);
                        
                        JsonNode jobIdValue = jobHistoryValue.get("jobId");
                        if (jobIdValue != null && jobIdValue instanceof NullNode == false) {
                            String jobIdInstance;
                            jobIdInstance = jobIdValue.getTextValue();
                            jobHistoryEntryInstance.setId(jobIdInstance);
                        }
                        
                        JsonNode timestampValue = jobHistoryValue.get("timestamp");
                        if (timestampValue != null && timestampValue instanceof NullNode == false) {
                            Calendar timestampInstance;
                            timestampInstance = DatatypeConverter.parseDateTime(timestampValue.getTextValue());
                            jobHistoryEntryInstance.setTimestamp(timestampInstance);
                        }
                        
                        JsonNode startTimeValue = jobHistoryValue.get("startTime");
                        if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                            Calendar startTimeInstance;
                            startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                            jobHistoryEntryInstance.setStartTime(startTimeInstance);
                        }
                        
                        JsonNode endTimeValue = jobHistoryValue.get("endTime");
                        if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                            Calendar endTimeInstance;
                            endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                            jobHistoryEntryInstance.setEndTime(endTimeInstance);
                        }
                        
                        JsonNode stateValue = jobHistoryValue.get("state");
                        if (stateValue != null && stateValue instanceof NullNode == false) {
                            JobState stateInstance;
                            stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                            jobHistoryEntryInstance.setState(stateInstance);
                        }
                        
                        JsonNode messageValue = jobHistoryValue.get("message");
                        if (messageValue != null && messageValue instanceof NullNode == false) {
                            String messageInstance;
                            messageInstance = messageValue.getTextValue();
                            jobHistoryEntryInstance.setMessage(messageInstance);
                        }
                        
                        JsonNode statusValue = jobHistoryValue.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            JobHistoryStatus statusInstance;
                            statusInstance = SchedulerClientImpl.parseJobHistoryStatus(statusValue.getTextValue());
                            jobHistoryEntryInstance.setStatus(statusInstance);
                        }
                        
                        JsonNode actionNameValue = jobHistoryValue.get("actionName");
                        if (actionNameValue != null && actionNameValue instanceof NullNode == false) {
                            JobHistoryActionName actionNameInstance;
                            actionNameInstance = SchedulerClientImpl.parseJobHistoryActionName(actionNameValue.getTextValue());
                            jobHistoryEntryInstance.setActionName(actionNameInstance);
                        }
                        
                        JsonNode repeatCountValue = jobHistoryValue.get("repeatCount");
                        if (repeatCountValue != null && repeatCountValue instanceof NullNode == false) {
                            int repeatCountInstance;
                            repeatCountInstance = repeatCountValue.getIntValue();
                            jobHistoryEntryInstance.setRepeatCount(repeatCountInstance);
                        }
                        
                        JsonNode retryCountValue = jobHistoryValue.get("retryCount");
                        if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                            int retryCountInstance;
                            retryCountInstance = retryCountValue.getIntValue();
                            jobHistoryEntryInstance.setRetryCount(retryCountInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get the list of all jobs in a job collection.
    *
    * @param parameters Required. Parameters supplied to the List Jobs
    * operation.
    * @return The List Jobs operation response.
    */
    @Override
    public Future<JobListResponse> listAsync(final JobListParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobListResponse>() { 
            @Override
            public JobListResponse call() throws Exception {
                return list(parameters);
            }
         });
    }
    
    /**
    * Get the list of all jobs in a job collection.
    *
    * @param parameters Required. Parameters supplied to the List Jobs
    * operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The List Jobs operation response.
    */
    @Override
    public JobListResponse list(JobListParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs" + "?";
        url = url + "api-version=" + "2014-04-01";
        if (parameters.getSkip() != null) {
            url = url + "&" + "$skip=" + URLEncoder.encode(Integer.toString(parameters.getSkip()), "UTF-8");
        }
        if (parameters.getTop() != null) {
            url = url + "&" + "$top=" + URLEncoder.encode(Integer.toString(parameters.getTop()), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobListResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobListResponse();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                JsonNode jobsArray = responseDoc;
                if (jobsArray != null && jobsArray instanceof NullNode == false) {
                    for (JsonNode jobsValue : ((ArrayNode) jobsArray)) {
                        Job jobInstance = new Job();
                        result.getJobs().add(jobInstance);
                        
                        JsonNode idValue = jobsValue.get("id");
                        if (idValue != null && idValue instanceof NullNode == false) {
                            String idInstance;
                            idInstance = idValue.getTextValue();
                            jobInstance.setId(idInstance);
                        }
                        
                        JsonNode startTimeValue = jobsValue.get("startTime");
                        if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                            Calendar startTimeInstance;
                            startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                            jobInstance.setStartTime(startTimeInstance);
                        }
                        
                        JsonNode actionValue = jobsValue.get("action");
                        if (actionValue != null && actionValue instanceof NullNode == false) {
                            JobAction actionInstance = new JobAction();
                            jobInstance.setAction(actionInstance);
                            
                            JsonNode typeValue = actionValue.get("type");
                            if (typeValue != null && typeValue instanceof NullNode == false) {
                                JobActionType typeInstance;
                                typeInstance = SchedulerClientImpl.parseJobActionType(typeValue.getTextValue());
                                actionInstance.setType(typeInstance);
                            }
                            
                            JsonNode retryPolicyValue = actionValue.get("retryPolicy");
                            if (retryPolicyValue != null && retryPolicyValue instanceof NullNode == false) {
                                RetryPolicy retryPolicyInstance = new RetryPolicy();
                                actionInstance.setRetryPolicy(retryPolicyInstance);
                                
                                JsonNode retryTypeValue = retryPolicyValue.get("retryType");
                                if (retryTypeValue != null && retryTypeValue instanceof NullNode == false) {
                                    RetryType retryTypeInstance;
                                    retryTypeInstance = SchedulerClientImpl.parseRetryType(retryTypeValue.getTextValue());
                                    retryPolicyInstance.setRetryType(retryTypeInstance);
                                }
                                
                                JsonNode retryIntervalValue = retryPolicyValue.get("retryInterval");
                                if (retryIntervalValue != null && retryIntervalValue instanceof NullNode == false) {
                                    Duration retryIntervalInstance;
                                    retryIntervalInstance = TimeSpan8601Converter.parse(retryIntervalValue.getTextValue());
                                    retryPolicyInstance.setRetryInterval(retryIntervalInstance);
                                }
                                
                                JsonNode retryCountValue = retryPolicyValue.get("retryCount");
                                if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                                    int retryCountInstance;
                                    retryCountInstance = retryCountValue.getIntValue();
                                    retryPolicyInstance.setRetryCount(retryCountInstance);
                                }
                            }
                            
                            JsonNode errorActionValue = actionValue.get("errorAction");
                            if (errorActionValue != null && errorActionValue instanceof NullNode == false) {
                                JobErrorAction errorActionInstance = new JobErrorAction();
                                actionInstance.setErrorAction(errorActionInstance);
                                
                                JsonNode typeValue2 = errorActionValue.get("type");
                                if (typeValue2 != null && typeValue2 instanceof NullNode == false) {
                                    JobActionType typeInstance2;
                                    typeInstance2 = SchedulerClientImpl.parseJobActionType(typeValue2.getTextValue());
                                    errorActionInstance.setType(typeInstance2);
                                }
                                
                                JsonNode requestValue = errorActionValue.get("request");
                                if (requestValue != null && requestValue instanceof NullNode == false) {
                                    JobHttpRequest requestInstance = new JobHttpRequest();
                                    errorActionInstance.setRequest(requestInstance);
                                    
                                    JsonNode uriValue = requestValue.get("uri");
                                    if (uriValue != null && uriValue instanceof NullNode == false) {
                                        URI uriInstance;
                                        uriInstance = new URI(uriValue.getTextValue());
                                        requestInstance.setUri(uriInstance);
                                    }
                                    
                                    JsonNode methodValue = requestValue.get("method");
                                    if (methodValue != null && methodValue instanceof NullNode == false) {
                                        String methodInstance;
                                        methodInstance = methodValue.getTextValue();
                                        requestInstance.setMethod(methodInstance);
                                    }
                                    
                                    JsonNode headersSequenceElement = ((JsonNode) requestValue.get("headers"));
                                    if (headersSequenceElement != null && headersSequenceElement instanceof NullNode == false) {
                                        Iterator<Map.Entry<String, JsonNode>> itr = headersSequenceElement.getFields();
                                        while (itr.hasNext()) {
                                            Map.Entry<String, JsonNode> property = itr.next();
                                            String headersKey = property.getKey();
                                            String headersValue = property.getValue().getTextValue();
                                            requestInstance.getHeaders().put(headersKey, headersValue);
                                        }
                                    }
                                    
                                    JsonNode bodyValue = requestValue.get("body");
                                    if (bodyValue != null && bodyValue instanceof NullNode == false) {
                                        String bodyInstance;
                                        bodyInstance = bodyValue.getTextValue();
                                        requestInstance.setBody(bodyInstance);
                                    }
                                    
                                    JsonNode authenticationValue = requestValue.get("authentication");
                                    if (authenticationValue != null && authenticationValue instanceof NullNode == false) {
                                        String typeName = authenticationValue.get("type").getTextValue();
                                        if ("ClientCertificate".equals(typeName)) {
                                            ClientCertAuthentication clientCertAuthenticationInstance = new ClientCertAuthentication();
                                            
                                            JsonNode passwordValue = authenticationValue.get("password");
                                            if (passwordValue != null && passwordValue instanceof NullNode == false) {
                                                String passwordInstance;
                                                passwordInstance = passwordValue.getTextValue();
                                                clientCertAuthenticationInstance.setPassword(passwordInstance);
                                            }
                                            
                                            JsonNode pfxValue = authenticationValue.get("pfx");
                                            if (pfxValue != null && pfxValue instanceof NullNode == false) {
                                                String pfxInstance;
                                                pfxInstance = pfxValue.getTextValue();
                                                clientCertAuthenticationInstance.setPfx(pfxInstance);
                                            }
                                            
                                            JsonNode certificateThumbprintValue = authenticationValue.get("certificateThumbprint");
                                            if (certificateThumbprintValue != null && certificateThumbprintValue instanceof NullNode == false) {
                                                String certificateThumbprintInstance;
                                                certificateThumbprintInstance = certificateThumbprintValue.getTextValue();
                                                clientCertAuthenticationInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                            }
                                            
                                            JsonNode certificateExpirationValue = authenticationValue.get("certificateExpiration");
                                            if (certificateExpirationValue != null && certificateExpirationValue instanceof NullNode == false) {
                                                Calendar certificateExpirationInstance;
                                                certificateExpirationInstance = DatatypeConverter.parseDateTime(certificateExpirationValue.getTextValue());
                                                clientCertAuthenticationInstance.setCertificateExpiration(certificateExpirationInstance);
                                            }
                                            
                                            JsonNode certificateSubjectNameValue = authenticationValue.get("certificateSubjectName");
                                            if (certificateSubjectNameValue != null && certificateSubjectNameValue instanceof NullNode == false) {
                                                String certificateSubjectNameInstance;
                                                certificateSubjectNameInstance = certificateSubjectNameValue.getTextValue();
                                                clientCertAuthenticationInstance.setCertificateSubjectName(certificateSubjectNameInstance);
                                            }
                                            
                                            JsonNode typeValue3 = authenticationValue.get("type");
                                            if (typeValue3 != null && typeValue3 instanceof NullNode == false) {
                                                HttpAuthenticationType typeInstance3;
                                                typeInstance3 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue3.getTextValue());
                                                clientCertAuthenticationInstance.setType(typeInstance3);
                                            }
                                            requestInstance.setAuthentication(clientCertAuthenticationInstance);
                                        }
                                    }
                                }
                                
                                JsonNode queueMessageValue = errorActionValue.get("queueMessage");
                                if (queueMessageValue != null && queueMessageValue instanceof NullNode == false) {
                                    JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                    errorActionInstance.setQueueMessage(queueMessageInstance);
                                    
                                    JsonNode storageAccountValue = queueMessageValue.get("storageAccount");
                                    if (storageAccountValue != null && storageAccountValue instanceof NullNode == false) {
                                        String storageAccountInstance;
                                        storageAccountInstance = storageAccountValue.getTextValue();
                                        queueMessageInstance.setStorageAccountName(storageAccountInstance);
                                    }
                                    
                                    JsonNode queueNameValue = queueMessageValue.get("queueName");
                                    if (queueNameValue != null && queueNameValue instanceof NullNode == false) {
                                        String queueNameInstance;
                                        queueNameInstance = queueNameValue.getTextValue();
                                        queueMessageInstance.setQueueName(queueNameInstance);
                                    }
                                    
                                    JsonNode sasTokenValue = queueMessageValue.get("sasToken");
                                    if (sasTokenValue != null && sasTokenValue instanceof NullNode == false) {
                                        String sasTokenInstance;
                                        sasTokenInstance = sasTokenValue.getTextValue();
                                        queueMessageInstance.setSasToken(sasTokenInstance);
                                    }
                                    
                                    JsonNode messageValue = queueMessageValue.get("message");
                                    if (messageValue != null && messageValue instanceof NullNode == false) {
                                        String messageInstance;
                                        messageInstance = messageValue.getTextValue();
                                        queueMessageInstance.setMessage(messageInstance);
                                    }
                                }
                            }
                            
                            JsonNode requestValue2 = actionValue.get("request");
                            if (requestValue2 != null && requestValue2 instanceof NullNode == false) {
                                JobHttpRequest requestInstance2 = new JobHttpRequest();
                                actionInstance.setRequest(requestInstance2);
                                
                                JsonNode uriValue2 = requestValue2.get("uri");
                                if (uriValue2 != null && uriValue2 instanceof NullNode == false) {
                                    URI uriInstance2;
                                    uriInstance2 = new URI(uriValue2.getTextValue());
                                    requestInstance2.setUri(uriInstance2);
                                }
                                
                                JsonNode methodValue2 = requestValue2.get("method");
                                if (methodValue2 != null && methodValue2 instanceof NullNode == false) {
                                    String methodInstance2;
                                    methodInstance2 = methodValue2.getTextValue();
                                    requestInstance2.setMethod(methodInstance2);
                                }
                                
                                JsonNode headersSequenceElement2 = ((JsonNode) requestValue2.get("headers"));
                                if (headersSequenceElement2 != null && headersSequenceElement2 instanceof NullNode == false) {
                                    Iterator<Map.Entry<String, JsonNode>> itr2 = headersSequenceElement2.getFields();
                                    while (itr2.hasNext()) {
                                        Map.Entry<String, JsonNode> property2 = itr2.next();
                                        String headersKey2 = property2.getKey();
                                        String headersValue2 = property2.getValue().getTextValue();
                                        requestInstance2.getHeaders().put(headersKey2, headersValue2);
                                    }
                                }
                                
                                JsonNode bodyValue2 = requestValue2.get("body");
                                if (bodyValue2 != null && bodyValue2 instanceof NullNode == false) {
                                    String bodyInstance2;
                                    bodyInstance2 = bodyValue2.getTextValue();
                                    requestInstance2.setBody(bodyInstance2);
                                }
                                
                                JsonNode authenticationValue2 = requestValue2.get("authentication");
                                if (authenticationValue2 != null && authenticationValue2 instanceof NullNode == false) {
                                    String typeName2 = authenticationValue2.get("type").getTextValue();
                                    if ("ClientCertificate".equals(typeName2)) {
                                        ClientCertAuthentication clientCertAuthenticationInstance2 = new ClientCertAuthentication();
                                        
                                        JsonNode passwordValue2 = authenticationValue2.get("password");
                                        if (passwordValue2 != null && passwordValue2 instanceof NullNode == false) {
                                            String passwordInstance2;
                                            passwordInstance2 = passwordValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setPassword(passwordInstance2);
                                        }
                                        
                                        JsonNode pfxValue2 = authenticationValue2.get("pfx");
                                        if (pfxValue2 != null && pfxValue2 instanceof NullNode == false) {
                                            String pfxInstance2;
                                            pfxInstance2 = pfxValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setPfx(pfxInstance2);
                                        }
                                        
                                        JsonNode certificateThumbprintValue2 = authenticationValue2.get("certificateThumbprint");
                                        if (certificateThumbprintValue2 != null && certificateThumbprintValue2 instanceof NullNode == false) {
                                            String certificateThumbprintInstance2;
                                            certificateThumbprintInstance2 = certificateThumbprintValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setCertificateThumbprint(certificateThumbprintInstance2);
                                        }
                                        
                                        JsonNode certificateExpirationValue2 = authenticationValue2.get("certificateExpiration");
                                        if (certificateExpirationValue2 != null && certificateExpirationValue2 instanceof NullNode == false) {
                                            Calendar certificateExpirationInstance2;
                                            certificateExpirationInstance2 = DatatypeConverter.parseDateTime(certificateExpirationValue2.getTextValue());
                                            clientCertAuthenticationInstance2.setCertificateExpiration(certificateExpirationInstance2);
                                        }
                                        
                                        JsonNode certificateSubjectNameValue2 = authenticationValue2.get("certificateSubjectName");
                                        if (certificateSubjectNameValue2 != null && certificateSubjectNameValue2 instanceof NullNode == false) {
                                            String certificateSubjectNameInstance2;
                                            certificateSubjectNameInstance2 = certificateSubjectNameValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setCertificateSubjectName(certificateSubjectNameInstance2);
                                        }
                                        
                                        JsonNode typeValue4 = authenticationValue2.get("type");
                                        if (typeValue4 != null && typeValue4 instanceof NullNode == false) {
                                            HttpAuthenticationType typeInstance4;
                                            typeInstance4 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue4.getTextValue());
                                            clientCertAuthenticationInstance2.setType(typeInstance4);
                                        }
                                        requestInstance2.setAuthentication(clientCertAuthenticationInstance2);
                                    }
                                }
                            }
                            
                            JsonNode queueMessageValue2 = actionValue.get("queueMessage");
                            if (queueMessageValue2 != null && queueMessageValue2 instanceof NullNode == false) {
                                JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                actionInstance.setQueueMessage(queueMessageInstance2);
                                
                                JsonNode storageAccountValue2 = queueMessageValue2.get("storageAccount");
                                if (storageAccountValue2 != null && storageAccountValue2 instanceof NullNode == false) {
                                    String storageAccountInstance2;
                                    storageAccountInstance2 = storageAccountValue2.getTextValue();
                                    queueMessageInstance2.setStorageAccountName(storageAccountInstance2);
                                }
                                
                                JsonNode queueNameValue2 = queueMessageValue2.get("queueName");
                                if (queueNameValue2 != null && queueNameValue2 instanceof NullNode == false) {
                                    String queueNameInstance2;
                                    queueNameInstance2 = queueNameValue2.getTextValue();
                                    queueMessageInstance2.setQueueName(queueNameInstance2);
                                }
                                
                                JsonNode sasTokenValue2 = queueMessageValue2.get("sasToken");
                                if (sasTokenValue2 != null && sasTokenValue2 instanceof NullNode == false) {
                                    String sasTokenInstance2;
                                    sasTokenInstance2 = sasTokenValue2.getTextValue();
                                    queueMessageInstance2.setSasToken(sasTokenInstance2);
                                }
                                
                                JsonNode messageValue2 = queueMessageValue2.get("message");
                                if (messageValue2 != null && messageValue2 instanceof NullNode == false) {
                                    String messageInstance2;
                                    messageInstance2 = messageValue2.getTextValue();
                                    queueMessageInstance2.setMessage(messageInstance2);
                                }
                            }
                        }
                        
                        JsonNode recurrenceValue = jobsValue.get("recurrence");
                        if (recurrenceValue != null && recurrenceValue instanceof NullNode == false) {
                            JobRecurrence recurrenceInstance = new JobRecurrence();
                            jobInstance.setRecurrence(recurrenceInstance);
                            
                            JsonNode frequencyValue = recurrenceValue.get("frequency");
                            if (frequencyValue != null && frequencyValue instanceof NullNode == false) {
                                JobRecurrenceFrequency frequencyInstance;
                                frequencyInstance = SchedulerClientImpl.parseJobRecurrenceFrequency(frequencyValue.getTextValue());
                                recurrenceInstance.setFrequency(frequencyInstance);
                            }
                            
                            JsonNode intervalValue = recurrenceValue.get("interval");
                            if (intervalValue != null && intervalValue instanceof NullNode == false) {
                                int intervalInstance;
                                intervalInstance = intervalValue.getIntValue();
                                recurrenceInstance.setInterval(intervalInstance);
                            }
                            
                            JsonNode countValue = recurrenceValue.get("count");
                            if (countValue != null && countValue instanceof NullNode == false) {
                                int countInstance;
                                countInstance = countValue.getIntValue();
                                recurrenceInstance.setCount(countInstance);
                            }
                            
                            JsonNode endTimeValue = recurrenceValue.get("endTime");
                            if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                                Calendar endTimeInstance;
                                endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                                recurrenceInstance.setEndTime(endTimeInstance);
                            }
                            
                            JsonNode scheduleValue = recurrenceValue.get("schedule");
                            if (scheduleValue != null && scheduleValue instanceof NullNode == false) {
                                JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                recurrenceInstance.setSchedule(scheduleInstance);
                                
                                JsonNode minutesArray = scheduleValue.get("minutes");
                                if (minutesArray != null && minutesArray instanceof NullNode == false) {
                                    scheduleInstance.setMinutes(new ArrayList<Integer>());
                                    for (JsonNode minutesValue : ((ArrayNode) minutesArray)) {
                                        scheduleInstance.getMinutes().add(minutesValue.getIntValue());
                                    }
                                }
                                
                                JsonNode hoursArray = scheduleValue.get("hours");
                                if (hoursArray != null && hoursArray instanceof NullNode == false) {
                                    scheduleInstance.setHours(new ArrayList<Integer>());
                                    for (JsonNode hoursValue : ((ArrayNode) hoursArray)) {
                                        scheduleInstance.getHours().add(hoursValue.getIntValue());
                                    }
                                }
                                
                                JsonNode weekDaysArray = scheduleValue.get("weekDays");
                                if (weekDaysArray != null && weekDaysArray instanceof NullNode == false) {
                                    scheduleInstance.setDays(new ArrayList<JobScheduleDay>());
                                    for (JsonNode weekDaysValue : ((ArrayNode) weekDaysArray)) {
                                        scheduleInstance.getDays().add(SchedulerClientImpl.parseJobScheduleDay(weekDaysValue.getTextValue()));
                                    }
                                }
                                
                                JsonNode monthsArray = scheduleValue.get("months");
                                if (monthsArray != null && monthsArray instanceof NullNode == false) {
                                    scheduleInstance.setMonths(new ArrayList<Integer>());
                                    for (JsonNode monthsValue : ((ArrayNode) monthsArray)) {
                                        scheduleInstance.getMonths().add(monthsValue.getIntValue());
                                    }
                                }
                                
                                JsonNode monthDaysArray = scheduleValue.get("monthDays");
                                if (monthDaysArray != null && monthDaysArray instanceof NullNode == false) {
                                    scheduleInstance.setMonthDays(new ArrayList<Integer>());
                                    for (JsonNode monthDaysValue : ((ArrayNode) monthDaysArray)) {
                                        scheduleInstance.getMonthDays().add(monthDaysValue.getIntValue());
                                    }
                                }
                                
                                JsonNode monthlyOccurrencesArray = scheduleValue.get("monthlyOccurrences");
                                if (monthlyOccurrencesArray != null && monthlyOccurrencesArray instanceof NullNode == false) {
                                    scheduleInstance.setMonthlyOccurrences(new ArrayList<JobScheduleMonthlyOccurrence>());
                                    for (JsonNode monthlyOccurrencesValue : ((ArrayNode) monthlyOccurrencesArray)) {
                                        JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                        scheduleInstance.getMonthlyOccurrences().add(jobScheduleMonthlyOccurrenceInstance);
                                        
                                        JsonNode dayValue = monthlyOccurrencesValue.get("day");
                                        if (dayValue != null && dayValue instanceof NullNode == false) {
                                            JobScheduleDay dayInstance;
                                            dayInstance = SchedulerClientImpl.parseJobScheduleDay(dayValue.getTextValue());
                                            jobScheduleMonthlyOccurrenceInstance.setDay(dayInstance);
                                        }
                                        
                                        JsonNode occurrenceValue = monthlyOccurrencesValue.get("occurrence");
                                        if (occurrenceValue != null && occurrenceValue instanceof NullNode == false) {
                                            int occurrenceInstance;
                                            occurrenceInstance = occurrenceValue.getIntValue();
                                            jobScheduleMonthlyOccurrenceInstance.setOccurrence(occurrenceInstance);
                                        }
                                    }
                                }
                            }
                        }
                        
                        JsonNode statusValue = jobsValue.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            JobStatus statusInstance = new JobStatus();
                            jobInstance.setStatus(statusInstance);
                            
                            JsonNode lastExecutionTimeValue = statusValue.get("lastExecutionTime");
                            if (lastExecutionTimeValue != null && lastExecutionTimeValue instanceof NullNode == false) {
                                Calendar lastExecutionTimeInstance;
                                lastExecutionTimeInstance = DatatypeConverter.parseDateTime(lastExecutionTimeValue.getTextValue());
                                statusInstance.setLastExecutionTime(lastExecutionTimeInstance);
                            }
                            
                            JsonNode nextExecutionTimeValue = statusValue.get("nextExecutionTime");
                            if (nextExecutionTimeValue != null && nextExecutionTimeValue instanceof NullNode == false) {
                                Calendar nextExecutionTimeInstance;
                                nextExecutionTimeInstance = DatatypeConverter.parseDateTime(nextExecutionTimeValue.getTextValue());
                                statusInstance.setNextExecutionTime(nextExecutionTimeInstance);
                            }
                            
                            JsonNode executionCountValue = statusValue.get("executionCount");
                            if (executionCountValue != null && executionCountValue instanceof NullNode == false) {
                                int executionCountInstance;
                                executionCountInstance = executionCountValue.getIntValue();
                                statusInstance.setExecutionCount(executionCountInstance);
                            }
                            
                            JsonNode failureCountValue = statusValue.get("failureCount");
                            if (failureCountValue != null && failureCountValue instanceof NullNode == false) {
                                int failureCountInstance;
                                failureCountInstance = failureCountValue.getIntValue();
                                statusInstance.setFailureCount(failureCountInstance);
                            }
                            
                            JsonNode faultedCountValue = statusValue.get("faultedCount");
                            if (faultedCountValue != null && faultedCountValue instanceof NullNode == false) {
                                int faultedCountInstance;
                                faultedCountInstance = faultedCountValue.getIntValue();
                                statusInstance.setFaultedCount(faultedCountInstance);
                            }
                        }
                        
                        JsonNode stateValue = jobsValue.get("state");
                        if (stateValue != null && stateValue instanceof NullNode == false) {
                            JobState stateInstance;
                            stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                            jobInstance.setState(stateInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get the list of jobs in a job collection matching a filter on job state.
    *
    * @param parameters Required. Parameters supplied to the List Jobs with
    * filter operation.
    * @return The List Jobs operation response.
    */
    @Override
    public Future<JobListResponse> listWithFilterAsync(final JobListWithFilterParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobListResponse>() { 
            @Override
            public JobListResponse call() throws Exception {
                return listWithFilter(parameters);
            }
         });
    }
    
    /**
    * Get the list of jobs in a job collection matching a filter on job state.
    *
    * @param parameters Required. Parameters supplied to the List Jobs with
    * filter operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The List Jobs operation response.
    */
    @Override
    public JobListResponse listWithFilter(JobListWithFilterParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "listWithFilterAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs" + "?";
        url = url + "api-version=" + "2014-04-01";
        url = url + "&" + "$filter=state eq " + URLEncoder.encode(SchedulerClientImpl.jobStateToString(parameters.getState()), "UTF-8");
        if (parameters.getSkip() != null) {
            url = url + "&" + "$skip=" + URLEncoder.encode(Integer.toString(parameters.getSkip()), "UTF-8");
        }
        if (parameters.getTop() != null) {
            url = url + "&" + "$top=" + URLEncoder.encode(Integer.toString(parameters.getTop()), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobListResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobListResponse();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                JsonNode jobsArray = responseDoc;
                if (jobsArray != null && jobsArray instanceof NullNode == false) {
                    for (JsonNode jobsValue : ((ArrayNode) jobsArray)) {
                        Job jobInstance = new Job();
                        result.getJobs().add(jobInstance);
                        
                        JsonNode idValue = jobsValue.get("id");
                        if (idValue != null && idValue instanceof NullNode == false) {
                            String idInstance;
                            idInstance = idValue.getTextValue();
                            jobInstance.setId(idInstance);
                        }
                        
                        JsonNode startTimeValue = jobsValue.get("startTime");
                        if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                            Calendar startTimeInstance;
                            startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                            jobInstance.setStartTime(startTimeInstance);
                        }
                        
                        JsonNode actionValue = jobsValue.get("action");
                        if (actionValue != null && actionValue instanceof NullNode == false) {
                            JobAction actionInstance = new JobAction();
                            jobInstance.setAction(actionInstance);
                            
                            JsonNode typeValue = actionValue.get("type");
                            if (typeValue != null && typeValue instanceof NullNode == false) {
                                JobActionType typeInstance;
                                typeInstance = SchedulerClientImpl.parseJobActionType(typeValue.getTextValue());
                                actionInstance.setType(typeInstance);
                            }
                            
                            JsonNode retryPolicyValue = actionValue.get("retryPolicy");
                            if (retryPolicyValue != null && retryPolicyValue instanceof NullNode == false) {
                                RetryPolicy retryPolicyInstance = new RetryPolicy();
                                actionInstance.setRetryPolicy(retryPolicyInstance);
                                
                                JsonNode retryTypeValue = retryPolicyValue.get("retryType");
                                if (retryTypeValue != null && retryTypeValue instanceof NullNode == false) {
                                    RetryType retryTypeInstance;
                                    retryTypeInstance = SchedulerClientImpl.parseRetryType(retryTypeValue.getTextValue());
                                    retryPolicyInstance.setRetryType(retryTypeInstance);
                                }
                                
                                JsonNode retryIntervalValue = retryPolicyValue.get("retryInterval");
                                if (retryIntervalValue != null && retryIntervalValue instanceof NullNode == false) {
                                    Duration retryIntervalInstance;
                                    retryIntervalInstance = TimeSpan8601Converter.parse(retryIntervalValue.getTextValue());
                                    retryPolicyInstance.setRetryInterval(retryIntervalInstance);
                                }
                                
                                JsonNode retryCountValue = retryPolicyValue.get("retryCount");
                                if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                                    int retryCountInstance;
                                    retryCountInstance = retryCountValue.getIntValue();
                                    retryPolicyInstance.setRetryCount(retryCountInstance);
                                }
                            }
                            
                            JsonNode errorActionValue = actionValue.get("errorAction");
                            if (errorActionValue != null && errorActionValue instanceof NullNode == false) {
                                JobErrorAction errorActionInstance = new JobErrorAction();
                                actionInstance.setErrorAction(errorActionInstance);
                                
                                JsonNode typeValue2 = errorActionValue.get("type");
                                if (typeValue2 != null && typeValue2 instanceof NullNode == false) {
                                    JobActionType typeInstance2;
                                    typeInstance2 = SchedulerClientImpl.parseJobActionType(typeValue2.getTextValue());
                                    errorActionInstance.setType(typeInstance2);
                                }
                                
                                JsonNode requestValue = errorActionValue.get("request");
                                if (requestValue != null && requestValue instanceof NullNode == false) {
                                    JobHttpRequest requestInstance = new JobHttpRequest();
                                    errorActionInstance.setRequest(requestInstance);
                                    
                                    JsonNode uriValue = requestValue.get("uri");
                                    if (uriValue != null && uriValue instanceof NullNode == false) {
                                        URI uriInstance;
                                        uriInstance = new URI(uriValue.getTextValue());
                                        requestInstance.setUri(uriInstance);
                                    }
                                    
                                    JsonNode methodValue = requestValue.get("method");
                                    if (methodValue != null && methodValue instanceof NullNode == false) {
                                        String methodInstance;
                                        methodInstance = methodValue.getTextValue();
                                        requestInstance.setMethod(methodInstance);
                                    }
                                    
                                    JsonNode headersSequenceElement = ((JsonNode) requestValue.get("headers"));
                                    if (headersSequenceElement != null && headersSequenceElement instanceof NullNode == false) {
                                        Iterator<Map.Entry<String, JsonNode>> itr = headersSequenceElement.getFields();
                                        while (itr.hasNext()) {
                                            Map.Entry<String, JsonNode> property = itr.next();
                                            String headersKey = property.getKey();
                                            String headersValue = property.getValue().getTextValue();
                                            requestInstance.getHeaders().put(headersKey, headersValue);
                                        }
                                    }
                                    
                                    JsonNode bodyValue = requestValue.get("body");
                                    if (bodyValue != null && bodyValue instanceof NullNode == false) {
                                        String bodyInstance;
                                        bodyInstance = bodyValue.getTextValue();
                                        requestInstance.setBody(bodyInstance);
                                    }
                                    
                                    JsonNode authenticationValue = requestValue.get("authentication");
                                    if (authenticationValue != null && authenticationValue instanceof NullNode == false) {
                                        String typeName = authenticationValue.get("type").getTextValue();
                                        if ("ClientCertificate".equals(typeName)) {
                                            ClientCertAuthentication clientCertAuthenticationInstance = new ClientCertAuthentication();
                                            
                                            JsonNode passwordValue = authenticationValue.get("password");
                                            if (passwordValue != null && passwordValue instanceof NullNode == false) {
                                                String passwordInstance;
                                                passwordInstance = passwordValue.getTextValue();
                                                clientCertAuthenticationInstance.setPassword(passwordInstance);
                                            }
                                            
                                            JsonNode pfxValue = authenticationValue.get("pfx");
                                            if (pfxValue != null && pfxValue instanceof NullNode == false) {
                                                String pfxInstance;
                                                pfxInstance = pfxValue.getTextValue();
                                                clientCertAuthenticationInstance.setPfx(pfxInstance);
                                            }
                                            
                                            JsonNode certificateThumbprintValue = authenticationValue.get("certificateThumbprint");
                                            if (certificateThumbprintValue != null && certificateThumbprintValue instanceof NullNode == false) {
                                                String certificateThumbprintInstance;
                                                certificateThumbprintInstance = certificateThumbprintValue.getTextValue();
                                                clientCertAuthenticationInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                            }
                                            
                                            JsonNode certificateExpirationValue = authenticationValue.get("certificateExpiration");
                                            if (certificateExpirationValue != null && certificateExpirationValue instanceof NullNode == false) {
                                                Calendar certificateExpirationInstance;
                                                certificateExpirationInstance = DatatypeConverter.parseDateTime(certificateExpirationValue.getTextValue());
                                                clientCertAuthenticationInstance.setCertificateExpiration(certificateExpirationInstance);
                                            }
                                            
                                            JsonNode certificateSubjectNameValue = authenticationValue.get("certificateSubjectName");
                                            if (certificateSubjectNameValue != null && certificateSubjectNameValue instanceof NullNode == false) {
                                                String certificateSubjectNameInstance;
                                                certificateSubjectNameInstance = certificateSubjectNameValue.getTextValue();
                                                clientCertAuthenticationInstance.setCertificateSubjectName(certificateSubjectNameInstance);
                                            }
                                            
                                            JsonNode typeValue3 = authenticationValue.get("type");
                                            if (typeValue3 != null && typeValue3 instanceof NullNode == false) {
                                                HttpAuthenticationType typeInstance3;
                                                typeInstance3 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue3.getTextValue());
                                                clientCertAuthenticationInstance.setType(typeInstance3);
                                            }
                                            requestInstance.setAuthentication(clientCertAuthenticationInstance);
                                        }
                                    }
                                }
                                
                                JsonNode queueMessageValue = errorActionValue.get("queueMessage");
                                if (queueMessageValue != null && queueMessageValue instanceof NullNode == false) {
                                    JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                    errorActionInstance.setQueueMessage(queueMessageInstance);
                                    
                                    JsonNode storageAccountValue = queueMessageValue.get("storageAccount");
                                    if (storageAccountValue != null && storageAccountValue instanceof NullNode == false) {
                                        String storageAccountInstance;
                                        storageAccountInstance = storageAccountValue.getTextValue();
                                        queueMessageInstance.setStorageAccountName(storageAccountInstance);
                                    }
                                    
                                    JsonNode queueNameValue = queueMessageValue.get("queueName");
                                    if (queueNameValue != null && queueNameValue instanceof NullNode == false) {
                                        String queueNameInstance;
                                        queueNameInstance = queueNameValue.getTextValue();
                                        queueMessageInstance.setQueueName(queueNameInstance);
                                    }
                                    
                                    JsonNode sasTokenValue = queueMessageValue.get("sasToken");
                                    if (sasTokenValue != null && sasTokenValue instanceof NullNode == false) {
                                        String sasTokenInstance;
                                        sasTokenInstance = sasTokenValue.getTextValue();
                                        queueMessageInstance.setSasToken(sasTokenInstance);
                                    }
                                    
                                    JsonNode messageValue = queueMessageValue.get("message");
                                    if (messageValue != null && messageValue instanceof NullNode == false) {
                                        String messageInstance;
                                        messageInstance = messageValue.getTextValue();
                                        queueMessageInstance.setMessage(messageInstance);
                                    }
                                }
                            }
                            
                            JsonNode requestValue2 = actionValue.get("request");
                            if (requestValue2 != null && requestValue2 instanceof NullNode == false) {
                                JobHttpRequest requestInstance2 = new JobHttpRequest();
                                actionInstance.setRequest(requestInstance2);
                                
                                JsonNode uriValue2 = requestValue2.get("uri");
                                if (uriValue2 != null && uriValue2 instanceof NullNode == false) {
                                    URI uriInstance2;
                                    uriInstance2 = new URI(uriValue2.getTextValue());
                                    requestInstance2.setUri(uriInstance2);
                                }
                                
                                JsonNode methodValue2 = requestValue2.get("method");
                                if (methodValue2 != null && methodValue2 instanceof NullNode == false) {
                                    String methodInstance2;
                                    methodInstance2 = methodValue2.getTextValue();
                                    requestInstance2.setMethod(methodInstance2);
                                }
                                
                                JsonNode headersSequenceElement2 = ((JsonNode) requestValue2.get("headers"));
                                if (headersSequenceElement2 != null && headersSequenceElement2 instanceof NullNode == false) {
                                    Iterator<Map.Entry<String, JsonNode>> itr2 = headersSequenceElement2.getFields();
                                    while (itr2.hasNext()) {
                                        Map.Entry<String, JsonNode> property2 = itr2.next();
                                        String headersKey2 = property2.getKey();
                                        String headersValue2 = property2.getValue().getTextValue();
                                        requestInstance2.getHeaders().put(headersKey2, headersValue2);
                                    }
                                }
                                
                                JsonNode bodyValue2 = requestValue2.get("body");
                                if (bodyValue2 != null && bodyValue2 instanceof NullNode == false) {
                                    String bodyInstance2;
                                    bodyInstance2 = bodyValue2.getTextValue();
                                    requestInstance2.setBody(bodyInstance2);
                                }
                                
                                JsonNode authenticationValue2 = requestValue2.get("authentication");
                                if (authenticationValue2 != null && authenticationValue2 instanceof NullNode == false) {
                                    String typeName2 = authenticationValue2.get("type").getTextValue();
                                    if ("ClientCertificate".equals(typeName2)) {
                                        ClientCertAuthentication clientCertAuthenticationInstance2 = new ClientCertAuthentication();
                                        
                                        JsonNode passwordValue2 = authenticationValue2.get("password");
                                        if (passwordValue2 != null && passwordValue2 instanceof NullNode == false) {
                                            String passwordInstance2;
                                            passwordInstance2 = passwordValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setPassword(passwordInstance2);
                                        }
                                        
                                        JsonNode pfxValue2 = authenticationValue2.get("pfx");
                                        if (pfxValue2 != null && pfxValue2 instanceof NullNode == false) {
                                            String pfxInstance2;
                                            pfxInstance2 = pfxValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setPfx(pfxInstance2);
                                        }
                                        
                                        JsonNode certificateThumbprintValue2 = authenticationValue2.get("certificateThumbprint");
                                        if (certificateThumbprintValue2 != null && certificateThumbprintValue2 instanceof NullNode == false) {
                                            String certificateThumbprintInstance2;
                                            certificateThumbprintInstance2 = certificateThumbprintValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setCertificateThumbprint(certificateThumbprintInstance2);
                                        }
                                        
                                        JsonNode certificateExpirationValue2 = authenticationValue2.get("certificateExpiration");
                                        if (certificateExpirationValue2 != null && certificateExpirationValue2 instanceof NullNode == false) {
                                            Calendar certificateExpirationInstance2;
                                            certificateExpirationInstance2 = DatatypeConverter.parseDateTime(certificateExpirationValue2.getTextValue());
                                            clientCertAuthenticationInstance2.setCertificateExpiration(certificateExpirationInstance2);
                                        }
                                        
                                        JsonNode certificateSubjectNameValue2 = authenticationValue2.get("certificateSubjectName");
                                        if (certificateSubjectNameValue2 != null && certificateSubjectNameValue2 instanceof NullNode == false) {
                                            String certificateSubjectNameInstance2;
                                            certificateSubjectNameInstance2 = certificateSubjectNameValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setCertificateSubjectName(certificateSubjectNameInstance2);
                                        }
                                        
                                        JsonNode typeValue4 = authenticationValue2.get("type");
                                        if (typeValue4 != null && typeValue4 instanceof NullNode == false) {
                                            HttpAuthenticationType typeInstance4;
                                            typeInstance4 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue4.getTextValue());
                                            clientCertAuthenticationInstance2.setType(typeInstance4);
                                        }
                                        requestInstance2.setAuthentication(clientCertAuthenticationInstance2);
                                    }
                                }
                            }
                            
                            JsonNode queueMessageValue2 = actionValue.get("queueMessage");
                            if (queueMessageValue2 != null && queueMessageValue2 instanceof NullNode == false) {
                                JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                actionInstance.setQueueMessage(queueMessageInstance2);
                                
                                JsonNode storageAccountValue2 = queueMessageValue2.get("storageAccount");
                                if (storageAccountValue2 != null && storageAccountValue2 instanceof NullNode == false) {
                                    String storageAccountInstance2;
                                    storageAccountInstance2 = storageAccountValue2.getTextValue();
                                    queueMessageInstance2.setStorageAccountName(storageAccountInstance2);
                                }
                                
                                JsonNode queueNameValue2 = queueMessageValue2.get("queueName");
                                if (queueNameValue2 != null && queueNameValue2 instanceof NullNode == false) {
                                    String queueNameInstance2;
                                    queueNameInstance2 = queueNameValue2.getTextValue();
                                    queueMessageInstance2.setQueueName(queueNameInstance2);
                                }
                                
                                JsonNode sasTokenValue2 = queueMessageValue2.get("sasToken");
                                if (sasTokenValue2 != null && sasTokenValue2 instanceof NullNode == false) {
                                    String sasTokenInstance2;
                                    sasTokenInstance2 = sasTokenValue2.getTextValue();
                                    queueMessageInstance2.setSasToken(sasTokenInstance2);
                                }
                                
                                JsonNode messageValue2 = queueMessageValue2.get("message");
                                if (messageValue2 != null && messageValue2 instanceof NullNode == false) {
                                    String messageInstance2;
                                    messageInstance2 = messageValue2.getTextValue();
                                    queueMessageInstance2.setMessage(messageInstance2);
                                }
                            }
                        }
                        
                        JsonNode recurrenceValue = jobsValue.get("recurrence");
                        if (recurrenceValue != null && recurrenceValue instanceof NullNode == false) {
                            JobRecurrence recurrenceInstance = new JobRecurrence();
                            jobInstance.setRecurrence(recurrenceInstance);
                            
                            JsonNode frequencyValue = recurrenceValue.get("frequency");
                            if (frequencyValue != null && frequencyValue instanceof NullNode == false) {
                                JobRecurrenceFrequency frequencyInstance;
                                frequencyInstance = SchedulerClientImpl.parseJobRecurrenceFrequency(frequencyValue.getTextValue());
                                recurrenceInstance.setFrequency(frequencyInstance);
                            }
                            
                            JsonNode intervalValue = recurrenceValue.get("interval");
                            if (intervalValue != null && intervalValue instanceof NullNode == false) {
                                int intervalInstance;
                                intervalInstance = intervalValue.getIntValue();
                                recurrenceInstance.setInterval(intervalInstance);
                            }
                            
                            JsonNode countValue = recurrenceValue.get("count");
                            if (countValue != null && countValue instanceof NullNode == false) {
                                int countInstance;
                                countInstance = countValue.getIntValue();
                                recurrenceInstance.setCount(countInstance);
                            }
                            
                            JsonNode endTimeValue = recurrenceValue.get("endTime");
                            if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                                Calendar endTimeInstance;
                                endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                                recurrenceInstance.setEndTime(endTimeInstance);
                            }
                            
                            JsonNode scheduleValue = recurrenceValue.get("schedule");
                            if (scheduleValue != null && scheduleValue instanceof NullNode == false) {
                                JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                recurrenceInstance.setSchedule(scheduleInstance);
                                
                                JsonNode minutesArray = scheduleValue.get("minutes");
                                if (minutesArray != null && minutesArray instanceof NullNode == false) {
                                    scheduleInstance.setMinutes(new ArrayList<Integer>());
                                    for (JsonNode minutesValue : ((ArrayNode) minutesArray)) {
                                        scheduleInstance.getMinutes().add(minutesValue.getIntValue());
                                    }
                                }
                                
                                JsonNode hoursArray = scheduleValue.get("hours");
                                if (hoursArray != null && hoursArray instanceof NullNode == false) {
                                    scheduleInstance.setHours(new ArrayList<Integer>());
                                    for (JsonNode hoursValue : ((ArrayNode) hoursArray)) {
                                        scheduleInstance.getHours().add(hoursValue.getIntValue());
                                    }
                                }
                                
                                JsonNode weekDaysArray = scheduleValue.get("weekDays");
                                if (weekDaysArray != null && weekDaysArray instanceof NullNode == false) {
                                    scheduleInstance.setDays(new ArrayList<JobScheduleDay>());
                                    for (JsonNode weekDaysValue : ((ArrayNode) weekDaysArray)) {
                                        scheduleInstance.getDays().add(SchedulerClientImpl.parseJobScheduleDay(weekDaysValue.getTextValue()));
                                    }
                                }
                                
                                JsonNode monthsArray = scheduleValue.get("months");
                                if (monthsArray != null && monthsArray instanceof NullNode == false) {
                                    scheduleInstance.setMonths(new ArrayList<Integer>());
                                    for (JsonNode monthsValue : ((ArrayNode) monthsArray)) {
                                        scheduleInstance.getMonths().add(monthsValue.getIntValue());
                                    }
                                }
                                
                                JsonNode monthDaysArray = scheduleValue.get("monthDays");
                                if (monthDaysArray != null && monthDaysArray instanceof NullNode == false) {
                                    scheduleInstance.setMonthDays(new ArrayList<Integer>());
                                    for (JsonNode monthDaysValue : ((ArrayNode) monthDaysArray)) {
                                        scheduleInstance.getMonthDays().add(monthDaysValue.getIntValue());
                                    }
                                }
                                
                                JsonNode monthlyOccurrencesArray = scheduleValue.get("monthlyOccurrences");
                                if (monthlyOccurrencesArray != null && monthlyOccurrencesArray instanceof NullNode == false) {
                                    scheduleInstance.setMonthlyOccurrences(new ArrayList<JobScheduleMonthlyOccurrence>());
                                    for (JsonNode monthlyOccurrencesValue : ((ArrayNode) monthlyOccurrencesArray)) {
                                        JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                        scheduleInstance.getMonthlyOccurrences().add(jobScheduleMonthlyOccurrenceInstance);
                                        
                                        JsonNode dayValue = monthlyOccurrencesValue.get("day");
                                        if (dayValue != null && dayValue instanceof NullNode == false) {
                                            JobScheduleDay dayInstance;
                                            dayInstance = SchedulerClientImpl.parseJobScheduleDay(dayValue.getTextValue());
                                            jobScheduleMonthlyOccurrenceInstance.setDay(dayInstance);
                                        }
                                        
                                        JsonNode occurrenceValue = monthlyOccurrencesValue.get("occurrence");
                                        if (occurrenceValue != null && occurrenceValue instanceof NullNode == false) {
                                            int occurrenceInstance;
                                            occurrenceInstance = occurrenceValue.getIntValue();
                                            jobScheduleMonthlyOccurrenceInstance.setOccurrence(occurrenceInstance);
                                        }
                                    }
                                }
                            }
                        }
                        
                        JsonNode statusValue = jobsValue.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            JobStatus statusInstance = new JobStatus();
                            jobInstance.setStatus(statusInstance);
                            
                            JsonNode lastExecutionTimeValue = statusValue.get("lastExecutionTime");
                            if (lastExecutionTimeValue != null && lastExecutionTimeValue instanceof NullNode == false) {
                                Calendar lastExecutionTimeInstance;
                                lastExecutionTimeInstance = DatatypeConverter.parseDateTime(lastExecutionTimeValue.getTextValue());
                                statusInstance.setLastExecutionTime(lastExecutionTimeInstance);
                            }
                            
                            JsonNode nextExecutionTimeValue = statusValue.get("nextExecutionTime");
                            if (nextExecutionTimeValue != null && nextExecutionTimeValue instanceof NullNode == false) {
                                Calendar nextExecutionTimeInstance;
                                nextExecutionTimeInstance = DatatypeConverter.parseDateTime(nextExecutionTimeValue.getTextValue());
                                statusInstance.setNextExecutionTime(nextExecutionTimeInstance);
                            }
                            
                            JsonNode executionCountValue = statusValue.get("executionCount");
                            if (executionCountValue != null && executionCountValue instanceof NullNode == false) {
                                int executionCountInstance;
                                executionCountInstance = executionCountValue.getIntValue();
                                statusInstance.setExecutionCount(executionCountInstance);
                            }
                            
                            JsonNode failureCountValue = statusValue.get("failureCount");
                            if (failureCountValue != null && failureCountValue instanceof NullNode == false) {
                                int failureCountInstance;
                                failureCountInstance = failureCountValue.getIntValue();
                                statusInstance.setFailureCount(failureCountInstance);
                            }
                            
                            JsonNode faultedCountValue = statusValue.get("faultedCount");
                            if (faultedCountValue != null && faultedCountValue instanceof NullNode == false) {
                                int faultedCountInstance;
                                faultedCountInstance = faultedCountValue.getIntValue();
                                statusInstance.setFaultedCount(faultedCountInstance);
                            }
                        }
                        
                        JsonNode stateValue = jobsValue.get("state");
                        if (stateValue != null && stateValue instanceof NullNode == false) {
                            JobState stateInstance;
                            stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                            jobInstance.setState(stateInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Update the state of all jobs in a job collections.
    *
    * @param parameters Required. Parameters supplied to the Update Jobs State
    * operation.
    * @return The Update Jobs State operation response.
    */
    @Override
    public Future<JobCollectionJobsUpdateStateResponse> updateJobCollectionStateAsync(final JobCollectionJobsUpdateStateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobCollectionJobsUpdateStateResponse>() { 
            @Override
            public JobCollectionJobsUpdateStateResponse call() throws Exception {
                return updateJobCollectionState(parameters);
            }
         });
    }
    
    /**
    * Update the state of all jobs in a job collections.
    *
    * @param parameters Required. Parameters supplied to the Update Jobs State
    * operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Update Jobs State operation response.
    */
    @Override
    public JobCollectionJobsUpdateStateResponse updateJobCollectionState(JobCollectionJobsUpdateStateParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateJobCollectionStateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpPatch httpRequest = new HttpPatch(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode jobCollectionJobsUpdateStateParametersValue = objectMapper.createObjectNode();
        requestDoc = jobCollectionJobsUpdateStateParametersValue;
        
        if (parameters.isStateIsIncluded()) {
            ((ObjectNode) jobCollectionJobsUpdateStateParametersValue).put("state", SchedulerClientImpl.jobStateToString(parameters.getState()));
        }
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobCollectionJobsUpdateStateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobCollectionJobsUpdateStateResponse();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                JsonNode jobsArray = responseDoc;
                if (jobsArray != null && jobsArray instanceof NullNode == false) {
                    for (JsonNode jobsValue : ((ArrayNode) jobsArray)) {
                        Job jobInstance = new Job();
                        result.getJobs().add(jobInstance);
                        
                        JsonNode idValue = jobsValue.get("id");
                        if (idValue != null && idValue instanceof NullNode == false) {
                            String idInstance;
                            idInstance = idValue.getTextValue();
                            jobInstance.setId(idInstance);
                        }
                        
                        JsonNode startTimeValue = jobsValue.get("startTime");
                        if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                            Calendar startTimeInstance;
                            startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                            jobInstance.setStartTime(startTimeInstance);
                        }
                        
                        JsonNode actionValue = jobsValue.get("action");
                        if (actionValue != null && actionValue instanceof NullNode == false) {
                            JobAction actionInstance = new JobAction();
                            jobInstance.setAction(actionInstance);
                            
                            JsonNode typeValue = actionValue.get("type");
                            if (typeValue != null && typeValue instanceof NullNode == false) {
                                JobActionType typeInstance;
                                typeInstance = SchedulerClientImpl.parseJobActionType(typeValue.getTextValue());
                                actionInstance.setType(typeInstance);
                            }
                            
                            JsonNode retryPolicyValue = actionValue.get("retryPolicy");
                            if (retryPolicyValue != null && retryPolicyValue instanceof NullNode == false) {
                                RetryPolicy retryPolicyInstance = new RetryPolicy();
                                actionInstance.setRetryPolicy(retryPolicyInstance);
                                
                                JsonNode retryTypeValue = retryPolicyValue.get("retryType");
                                if (retryTypeValue != null && retryTypeValue instanceof NullNode == false) {
                                    RetryType retryTypeInstance;
                                    retryTypeInstance = SchedulerClientImpl.parseRetryType(retryTypeValue.getTextValue());
                                    retryPolicyInstance.setRetryType(retryTypeInstance);
                                }
                                
                                JsonNode retryIntervalValue = retryPolicyValue.get("retryInterval");
                                if (retryIntervalValue != null && retryIntervalValue instanceof NullNode == false) {
                                    Duration retryIntervalInstance;
                                    retryIntervalInstance = TimeSpan8601Converter.parse(retryIntervalValue.getTextValue());
                                    retryPolicyInstance.setRetryInterval(retryIntervalInstance);
                                }
                                
                                JsonNode retryCountValue = retryPolicyValue.get("retryCount");
                                if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                                    int retryCountInstance;
                                    retryCountInstance = retryCountValue.getIntValue();
                                    retryPolicyInstance.setRetryCount(retryCountInstance);
                                }
                            }
                            
                            JsonNode errorActionValue = actionValue.get("errorAction");
                            if (errorActionValue != null && errorActionValue instanceof NullNode == false) {
                                JobErrorAction errorActionInstance = new JobErrorAction();
                                actionInstance.setErrorAction(errorActionInstance);
                                
                                JsonNode typeValue2 = errorActionValue.get("type");
                                if (typeValue2 != null && typeValue2 instanceof NullNode == false) {
                                    JobActionType typeInstance2;
                                    typeInstance2 = SchedulerClientImpl.parseJobActionType(typeValue2.getTextValue());
                                    errorActionInstance.setType(typeInstance2);
                                }
                                
                                JsonNode requestValue = errorActionValue.get("request");
                                if (requestValue != null && requestValue instanceof NullNode == false) {
                                    JobHttpRequest requestInstance = new JobHttpRequest();
                                    errorActionInstance.setRequest(requestInstance);
                                    
                                    JsonNode uriValue = requestValue.get("uri");
                                    if (uriValue != null && uriValue instanceof NullNode == false) {
                                        URI uriInstance;
                                        uriInstance = new URI(uriValue.getTextValue());
                                        requestInstance.setUri(uriInstance);
                                    }
                                    
                                    JsonNode methodValue = requestValue.get("method");
                                    if (methodValue != null && methodValue instanceof NullNode == false) {
                                        String methodInstance;
                                        methodInstance = methodValue.getTextValue();
                                        requestInstance.setMethod(methodInstance);
                                    }
                                    
                                    JsonNode headersSequenceElement = ((JsonNode) requestValue.get("headers"));
                                    if (headersSequenceElement != null && headersSequenceElement instanceof NullNode == false) {
                                        Iterator<Map.Entry<String, JsonNode>> itr = headersSequenceElement.getFields();
                                        while (itr.hasNext()) {
                                            Map.Entry<String, JsonNode> property = itr.next();
                                            String headersKey = property.getKey();
                                            String headersValue = property.getValue().getTextValue();
                                            requestInstance.getHeaders().put(headersKey, headersValue);
                                        }
                                    }
                                    
                                    JsonNode bodyValue = requestValue.get("body");
                                    if (bodyValue != null && bodyValue instanceof NullNode == false) {
                                        String bodyInstance;
                                        bodyInstance = bodyValue.getTextValue();
                                        requestInstance.setBody(bodyInstance);
                                    }
                                    
                                    JsonNode authenticationValue = requestValue.get("authentication");
                                    if (authenticationValue != null && authenticationValue instanceof NullNode == false) {
                                        String typeName = authenticationValue.get("type").getTextValue();
                                        if ("ClientCertificate".equals(typeName)) {
                                            ClientCertAuthentication clientCertAuthenticationInstance = new ClientCertAuthentication();
                                            
                                            JsonNode passwordValue = authenticationValue.get("password");
                                            if (passwordValue != null && passwordValue instanceof NullNode == false) {
                                                String passwordInstance;
                                                passwordInstance = passwordValue.getTextValue();
                                                clientCertAuthenticationInstance.setPassword(passwordInstance);
                                            }
                                            
                                            JsonNode pfxValue = authenticationValue.get("pfx");
                                            if (pfxValue != null && pfxValue instanceof NullNode == false) {
                                                String pfxInstance;
                                                pfxInstance = pfxValue.getTextValue();
                                                clientCertAuthenticationInstance.setPfx(pfxInstance);
                                            }
                                            
                                            JsonNode certificateThumbprintValue = authenticationValue.get("certificateThumbprint");
                                            if (certificateThumbprintValue != null && certificateThumbprintValue instanceof NullNode == false) {
                                                String certificateThumbprintInstance;
                                                certificateThumbprintInstance = certificateThumbprintValue.getTextValue();
                                                clientCertAuthenticationInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                            }
                                            
                                            JsonNode certificateExpirationValue = authenticationValue.get("certificateExpiration");
                                            if (certificateExpirationValue != null && certificateExpirationValue instanceof NullNode == false) {
                                                Calendar certificateExpirationInstance;
                                                certificateExpirationInstance = DatatypeConverter.parseDateTime(certificateExpirationValue.getTextValue());
                                                clientCertAuthenticationInstance.setCertificateExpiration(certificateExpirationInstance);
                                            }
                                            
                                            JsonNode certificateSubjectNameValue = authenticationValue.get("certificateSubjectName");
                                            if (certificateSubjectNameValue != null && certificateSubjectNameValue instanceof NullNode == false) {
                                                String certificateSubjectNameInstance;
                                                certificateSubjectNameInstance = certificateSubjectNameValue.getTextValue();
                                                clientCertAuthenticationInstance.setCertificateSubjectName(certificateSubjectNameInstance);
                                            }
                                            
                                            JsonNode typeValue3 = authenticationValue.get("type");
                                            if (typeValue3 != null && typeValue3 instanceof NullNode == false) {
                                                HttpAuthenticationType typeInstance3;
                                                typeInstance3 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue3.getTextValue());
                                                clientCertAuthenticationInstance.setType(typeInstance3);
                                            }
                                            requestInstance.setAuthentication(clientCertAuthenticationInstance);
                                        }
                                    }
                                }
                                
                                JsonNode queueMessageValue = errorActionValue.get("queueMessage");
                                if (queueMessageValue != null && queueMessageValue instanceof NullNode == false) {
                                    JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                    errorActionInstance.setQueueMessage(queueMessageInstance);
                                    
                                    JsonNode storageAccountValue = queueMessageValue.get("storageAccount");
                                    if (storageAccountValue != null && storageAccountValue instanceof NullNode == false) {
                                        String storageAccountInstance;
                                        storageAccountInstance = storageAccountValue.getTextValue();
                                        queueMessageInstance.setStorageAccountName(storageAccountInstance);
                                    }
                                    
                                    JsonNode queueNameValue = queueMessageValue.get("queueName");
                                    if (queueNameValue != null && queueNameValue instanceof NullNode == false) {
                                        String queueNameInstance;
                                        queueNameInstance = queueNameValue.getTextValue();
                                        queueMessageInstance.setQueueName(queueNameInstance);
                                    }
                                    
                                    JsonNode sasTokenValue = queueMessageValue.get("sasToken");
                                    if (sasTokenValue != null && sasTokenValue instanceof NullNode == false) {
                                        String sasTokenInstance;
                                        sasTokenInstance = sasTokenValue.getTextValue();
                                        queueMessageInstance.setSasToken(sasTokenInstance);
                                    }
                                    
                                    JsonNode messageValue = queueMessageValue.get("message");
                                    if (messageValue != null && messageValue instanceof NullNode == false) {
                                        String messageInstance;
                                        messageInstance = messageValue.getTextValue();
                                        queueMessageInstance.setMessage(messageInstance);
                                    }
                                }
                            }
                            
                            JsonNode requestValue2 = actionValue.get("request");
                            if (requestValue2 != null && requestValue2 instanceof NullNode == false) {
                                JobHttpRequest requestInstance2 = new JobHttpRequest();
                                actionInstance.setRequest(requestInstance2);
                                
                                JsonNode uriValue2 = requestValue2.get("uri");
                                if (uriValue2 != null && uriValue2 instanceof NullNode == false) {
                                    URI uriInstance2;
                                    uriInstance2 = new URI(uriValue2.getTextValue());
                                    requestInstance2.setUri(uriInstance2);
                                }
                                
                                JsonNode methodValue2 = requestValue2.get("method");
                                if (methodValue2 != null && methodValue2 instanceof NullNode == false) {
                                    String methodInstance2;
                                    methodInstance2 = methodValue2.getTextValue();
                                    requestInstance2.setMethod(methodInstance2);
                                }
                                
                                JsonNode headersSequenceElement2 = ((JsonNode) requestValue2.get("headers"));
                                if (headersSequenceElement2 != null && headersSequenceElement2 instanceof NullNode == false) {
                                    Iterator<Map.Entry<String, JsonNode>> itr2 = headersSequenceElement2.getFields();
                                    while (itr2.hasNext()) {
                                        Map.Entry<String, JsonNode> property2 = itr2.next();
                                        String headersKey2 = property2.getKey();
                                        String headersValue2 = property2.getValue().getTextValue();
                                        requestInstance2.getHeaders().put(headersKey2, headersValue2);
                                    }
                                }
                                
                                JsonNode bodyValue2 = requestValue2.get("body");
                                if (bodyValue2 != null && bodyValue2 instanceof NullNode == false) {
                                    String bodyInstance2;
                                    bodyInstance2 = bodyValue2.getTextValue();
                                    requestInstance2.setBody(bodyInstance2);
                                }
                                
                                JsonNode authenticationValue2 = requestValue2.get("authentication");
                                if (authenticationValue2 != null && authenticationValue2 instanceof NullNode == false) {
                                    String typeName2 = authenticationValue2.get("type").getTextValue();
                                    if ("ClientCertificate".equals(typeName2)) {
                                        ClientCertAuthentication clientCertAuthenticationInstance2 = new ClientCertAuthentication();
                                        
                                        JsonNode passwordValue2 = authenticationValue2.get("password");
                                        if (passwordValue2 != null && passwordValue2 instanceof NullNode == false) {
                                            String passwordInstance2;
                                            passwordInstance2 = passwordValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setPassword(passwordInstance2);
                                        }
                                        
                                        JsonNode pfxValue2 = authenticationValue2.get("pfx");
                                        if (pfxValue2 != null && pfxValue2 instanceof NullNode == false) {
                                            String pfxInstance2;
                                            pfxInstance2 = pfxValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setPfx(pfxInstance2);
                                        }
                                        
                                        JsonNode certificateThumbprintValue2 = authenticationValue2.get("certificateThumbprint");
                                        if (certificateThumbprintValue2 != null && certificateThumbprintValue2 instanceof NullNode == false) {
                                            String certificateThumbprintInstance2;
                                            certificateThumbprintInstance2 = certificateThumbprintValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setCertificateThumbprint(certificateThumbprintInstance2);
                                        }
                                        
                                        JsonNode certificateExpirationValue2 = authenticationValue2.get("certificateExpiration");
                                        if (certificateExpirationValue2 != null && certificateExpirationValue2 instanceof NullNode == false) {
                                            Calendar certificateExpirationInstance2;
                                            certificateExpirationInstance2 = DatatypeConverter.parseDateTime(certificateExpirationValue2.getTextValue());
                                            clientCertAuthenticationInstance2.setCertificateExpiration(certificateExpirationInstance2);
                                        }
                                        
                                        JsonNode certificateSubjectNameValue2 = authenticationValue2.get("certificateSubjectName");
                                        if (certificateSubjectNameValue2 != null && certificateSubjectNameValue2 instanceof NullNode == false) {
                                            String certificateSubjectNameInstance2;
                                            certificateSubjectNameInstance2 = certificateSubjectNameValue2.getTextValue();
                                            clientCertAuthenticationInstance2.setCertificateSubjectName(certificateSubjectNameInstance2);
                                        }
                                        
                                        JsonNode typeValue4 = authenticationValue2.get("type");
                                        if (typeValue4 != null && typeValue4 instanceof NullNode == false) {
                                            HttpAuthenticationType typeInstance4;
                                            typeInstance4 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue4.getTextValue());
                                            clientCertAuthenticationInstance2.setType(typeInstance4);
                                        }
                                        requestInstance2.setAuthentication(clientCertAuthenticationInstance2);
                                    }
                                }
                            }
                            
                            JsonNode queueMessageValue2 = actionValue.get("queueMessage");
                            if (queueMessageValue2 != null && queueMessageValue2 instanceof NullNode == false) {
                                JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                actionInstance.setQueueMessage(queueMessageInstance2);
                                
                                JsonNode storageAccountValue2 = queueMessageValue2.get("storageAccount");
                                if (storageAccountValue2 != null && storageAccountValue2 instanceof NullNode == false) {
                                    String storageAccountInstance2;
                                    storageAccountInstance2 = storageAccountValue2.getTextValue();
                                    queueMessageInstance2.setStorageAccountName(storageAccountInstance2);
                                }
                                
                                JsonNode queueNameValue2 = queueMessageValue2.get("queueName");
                                if (queueNameValue2 != null && queueNameValue2 instanceof NullNode == false) {
                                    String queueNameInstance2;
                                    queueNameInstance2 = queueNameValue2.getTextValue();
                                    queueMessageInstance2.setQueueName(queueNameInstance2);
                                }
                                
                                JsonNode sasTokenValue2 = queueMessageValue2.get("sasToken");
                                if (sasTokenValue2 != null && sasTokenValue2 instanceof NullNode == false) {
                                    String sasTokenInstance2;
                                    sasTokenInstance2 = sasTokenValue2.getTextValue();
                                    queueMessageInstance2.setSasToken(sasTokenInstance2);
                                }
                                
                                JsonNode messageValue2 = queueMessageValue2.get("message");
                                if (messageValue2 != null && messageValue2 instanceof NullNode == false) {
                                    String messageInstance2;
                                    messageInstance2 = messageValue2.getTextValue();
                                    queueMessageInstance2.setMessage(messageInstance2);
                                }
                            }
                        }
                        
                        JsonNode recurrenceValue = jobsValue.get("recurrence");
                        if (recurrenceValue != null && recurrenceValue instanceof NullNode == false) {
                            JobRecurrence recurrenceInstance = new JobRecurrence();
                            jobInstance.setRecurrence(recurrenceInstance);
                            
                            JsonNode frequencyValue = recurrenceValue.get("frequency");
                            if (frequencyValue != null && frequencyValue instanceof NullNode == false) {
                                JobRecurrenceFrequency frequencyInstance;
                                frequencyInstance = SchedulerClientImpl.parseJobRecurrenceFrequency(frequencyValue.getTextValue());
                                recurrenceInstance.setFrequency(frequencyInstance);
                            }
                            
                            JsonNode intervalValue = recurrenceValue.get("interval");
                            if (intervalValue != null && intervalValue instanceof NullNode == false) {
                                int intervalInstance;
                                intervalInstance = intervalValue.getIntValue();
                                recurrenceInstance.setInterval(intervalInstance);
                            }
                            
                            JsonNode countValue = recurrenceValue.get("count");
                            if (countValue != null && countValue instanceof NullNode == false) {
                                int countInstance;
                                countInstance = countValue.getIntValue();
                                recurrenceInstance.setCount(countInstance);
                            }
                            
                            JsonNode endTimeValue = recurrenceValue.get("endTime");
                            if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                                Calendar endTimeInstance;
                                endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                                recurrenceInstance.setEndTime(endTimeInstance);
                            }
                            
                            JsonNode scheduleValue = recurrenceValue.get("schedule");
                            if (scheduleValue != null && scheduleValue instanceof NullNode == false) {
                                JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                recurrenceInstance.setSchedule(scheduleInstance);
                                
                                JsonNode minutesArray = scheduleValue.get("minutes");
                                if (minutesArray != null && minutesArray instanceof NullNode == false) {
                                    scheduleInstance.setMinutes(new ArrayList<Integer>());
                                    for (JsonNode minutesValue : ((ArrayNode) minutesArray)) {
                                        scheduleInstance.getMinutes().add(minutesValue.getIntValue());
                                    }
                                }
                                
                                JsonNode hoursArray = scheduleValue.get("hours");
                                if (hoursArray != null && hoursArray instanceof NullNode == false) {
                                    scheduleInstance.setHours(new ArrayList<Integer>());
                                    for (JsonNode hoursValue : ((ArrayNode) hoursArray)) {
                                        scheduleInstance.getHours().add(hoursValue.getIntValue());
                                    }
                                }
                                
                                JsonNode weekDaysArray = scheduleValue.get("weekDays");
                                if (weekDaysArray != null && weekDaysArray instanceof NullNode == false) {
                                    scheduleInstance.setDays(new ArrayList<JobScheduleDay>());
                                    for (JsonNode weekDaysValue : ((ArrayNode) weekDaysArray)) {
                                        scheduleInstance.getDays().add(SchedulerClientImpl.parseJobScheduleDay(weekDaysValue.getTextValue()));
                                    }
                                }
                                
                                JsonNode monthsArray = scheduleValue.get("months");
                                if (monthsArray != null && monthsArray instanceof NullNode == false) {
                                    scheduleInstance.setMonths(new ArrayList<Integer>());
                                    for (JsonNode monthsValue : ((ArrayNode) monthsArray)) {
                                        scheduleInstance.getMonths().add(monthsValue.getIntValue());
                                    }
                                }
                                
                                JsonNode monthDaysArray = scheduleValue.get("monthDays");
                                if (monthDaysArray != null && monthDaysArray instanceof NullNode == false) {
                                    scheduleInstance.setMonthDays(new ArrayList<Integer>());
                                    for (JsonNode monthDaysValue : ((ArrayNode) monthDaysArray)) {
                                        scheduleInstance.getMonthDays().add(monthDaysValue.getIntValue());
                                    }
                                }
                                
                                JsonNode monthlyOccurrencesArray = scheduleValue.get("monthlyOccurrences");
                                if (monthlyOccurrencesArray != null && monthlyOccurrencesArray instanceof NullNode == false) {
                                    scheduleInstance.setMonthlyOccurrences(new ArrayList<JobScheduleMonthlyOccurrence>());
                                    for (JsonNode monthlyOccurrencesValue : ((ArrayNode) monthlyOccurrencesArray)) {
                                        JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                        scheduleInstance.getMonthlyOccurrences().add(jobScheduleMonthlyOccurrenceInstance);
                                        
                                        JsonNode dayValue = monthlyOccurrencesValue.get("day");
                                        if (dayValue != null && dayValue instanceof NullNode == false) {
                                            JobScheduleDay dayInstance;
                                            dayInstance = SchedulerClientImpl.parseJobScheduleDay(dayValue.getTextValue());
                                            jobScheduleMonthlyOccurrenceInstance.setDay(dayInstance);
                                        }
                                        
                                        JsonNode occurrenceValue = monthlyOccurrencesValue.get("occurrence");
                                        if (occurrenceValue != null && occurrenceValue instanceof NullNode == false) {
                                            int occurrenceInstance;
                                            occurrenceInstance = occurrenceValue.getIntValue();
                                            jobScheduleMonthlyOccurrenceInstance.setOccurrence(occurrenceInstance);
                                        }
                                    }
                                }
                            }
                        }
                        
                        JsonNode statusValue = jobsValue.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            JobStatus statusInstance = new JobStatus();
                            jobInstance.setStatus(statusInstance);
                            
                            JsonNode lastExecutionTimeValue = statusValue.get("lastExecutionTime");
                            if (lastExecutionTimeValue != null && lastExecutionTimeValue instanceof NullNode == false) {
                                Calendar lastExecutionTimeInstance;
                                lastExecutionTimeInstance = DatatypeConverter.parseDateTime(lastExecutionTimeValue.getTextValue());
                                statusInstance.setLastExecutionTime(lastExecutionTimeInstance);
                            }
                            
                            JsonNode nextExecutionTimeValue = statusValue.get("nextExecutionTime");
                            if (nextExecutionTimeValue != null && nextExecutionTimeValue instanceof NullNode == false) {
                                Calendar nextExecutionTimeInstance;
                                nextExecutionTimeInstance = DatatypeConverter.parseDateTime(nextExecutionTimeValue.getTextValue());
                                statusInstance.setNextExecutionTime(nextExecutionTimeInstance);
                            }
                            
                            JsonNode executionCountValue = statusValue.get("executionCount");
                            if (executionCountValue != null && executionCountValue instanceof NullNode == false) {
                                int executionCountInstance;
                                executionCountInstance = executionCountValue.getIntValue();
                                statusInstance.setExecutionCount(executionCountInstance);
                            }
                            
                            JsonNode failureCountValue = statusValue.get("failureCount");
                            if (failureCountValue != null && failureCountValue instanceof NullNode == false) {
                                int failureCountInstance;
                                failureCountInstance = failureCountValue.getIntValue();
                                statusInstance.setFailureCount(failureCountInstance);
                            }
                            
                            JsonNode faultedCountValue = statusValue.get("faultedCount");
                            if (faultedCountValue != null && faultedCountValue instanceof NullNode == false) {
                                int faultedCountInstance;
                                faultedCountInstance = faultedCountValue.getIntValue();
                                statusInstance.setFaultedCount(faultedCountInstance);
                            }
                        }
                        
                        JsonNode stateValue = jobsValue.get("state");
                        if (stateValue != null && stateValue instanceof NullNode == false) {
                            JobState stateInstance;
                            stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                            jobInstance.setState(stateInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Update the state of a job.
    *
    * @param jobId Required. Id of the job to update.
    * @param parameters Required. Parameters supplied to the Update Job State
    * operation.
    * @return The Update Job State operation response.
    */
    @Override
    public Future<JobUpdateStateResponse> updateStateAsync(final String jobId, final JobUpdateStateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<JobUpdateStateResponse>() { 
            @Override
            public JobUpdateStateResponse call() throws Exception {
                return updateState(jobId, parameters);
            }
         });
    }
    
    /**
    * Update the state of a job.
    *
    * @param jobId Required. Id of the job to update.
    * @param parameters Required. Parameters supplied to the Update Job State
    * operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Update Job State operation response.
    */
    @Override
    public JobUpdateStateResponse updateState(String jobId, JobUpdateStateParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (jobId == null) {
            throw new NullPointerException("jobId");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("jobId", jobId);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateStateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/cloudservices/" + this.getClient().getCloudServiceName().trim() + "/resources/" + "scheduler" + "/~/" + "JobCollections" + "/" + this.getClient().getJobCollectionName().trim() + "/jobs/" + jobId.trim() + "?";
        url = url + "api-version=" + "2014-04-01";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpPatch httpRequest = new HttpPatch(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode jobUpdateStateParametersValue = objectMapper.createObjectNode();
        requestDoc = jobUpdateStateParametersValue;
        
        ((ObjectNode) jobUpdateStateParametersValue).put("state", SchedulerClientImpl.jobStateToString(parameters.getState()));
        
        if (parameters.getUpdateStateReason() != null) {
            ((ObjectNode) jobUpdateStateParametersValue).put("stateDetails", parameters.getUpdateStateReason());
        }
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            JobUpdateStateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new JobUpdateStateResponse();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null && responseDoc instanceof NullNode == false) {
                Job jobInstance = new Job();
                result.setJob(jobInstance);
                
                JsonNode idValue = responseDoc.get("id");
                if (idValue != null && idValue instanceof NullNode == false) {
                    String idInstance;
                    idInstance = idValue.getTextValue();
                    jobInstance.setId(idInstance);
                }
                
                JsonNode startTimeValue = responseDoc.get("startTime");
                if (startTimeValue != null && startTimeValue instanceof NullNode == false) {
                    Calendar startTimeInstance;
                    startTimeInstance = DatatypeConverter.parseDateTime(startTimeValue.getTextValue());
                    jobInstance.setStartTime(startTimeInstance);
                }
                
                JsonNode actionValue = responseDoc.get("action");
                if (actionValue != null && actionValue instanceof NullNode == false) {
                    JobAction actionInstance = new JobAction();
                    jobInstance.setAction(actionInstance);
                    
                    JsonNode typeValue = actionValue.get("type");
                    if (typeValue != null && typeValue instanceof NullNode == false) {
                        JobActionType typeInstance;
                        typeInstance = SchedulerClientImpl.parseJobActionType(typeValue.getTextValue());
                        actionInstance.setType(typeInstance);
                    }
                    
                    JsonNode retryPolicyValue = actionValue.get("retryPolicy");
                    if (retryPolicyValue != null && retryPolicyValue instanceof NullNode == false) {
                        RetryPolicy retryPolicyInstance = new RetryPolicy();
                        actionInstance.setRetryPolicy(retryPolicyInstance);
                        
                        JsonNode retryTypeValue = retryPolicyValue.get("retryType");
                        if (retryTypeValue != null && retryTypeValue instanceof NullNode == false) {
                            RetryType retryTypeInstance;
                            retryTypeInstance = SchedulerClientImpl.parseRetryType(retryTypeValue.getTextValue());
                            retryPolicyInstance.setRetryType(retryTypeInstance);
                        }
                        
                        JsonNode retryIntervalValue = retryPolicyValue.get("retryInterval");
                        if (retryIntervalValue != null && retryIntervalValue instanceof NullNode == false) {
                            Duration retryIntervalInstance;
                            retryIntervalInstance = TimeSpan8601Converter.parse(retryIntervalValue.getTextValue());
                            retryPolicyInstance.setRetryInterval(retryIntervalInstance);
                        }
                        
                        JsonNode retryCountValue = retryPolicyValue.get("retryCount");
                        if (retryCountValue != null && retryCountValue instanceof NullNode == false) {
                            int retryCountInstance;
                            retryCountInstance = retryCountValue.getIntValue();
                            retryPolicyInstance.setRetryCount(retryCountInstance);
                        }
                    }
                    
                    JsonNode errorActionValue = actionValue.get("errorAction");
                    if (errorActionValue != null && errorActionValue instanceof NullNode == false) {
                        JobErrorAction errorActionInstance = new JobErrorAction();
                        actionInstance.setErrorAction(errorActionInstance);
                        
                        JsonNode typeValue2 = errorActionValue.get("type");
                        if (typeValue2 != null && typeValue2 instanceof NullNode == false) {
                            JobActionType typeInstance2;
                            typeInstance2 = SchedulerClientImpl.parseJobActionType(typeValue2.getTextValue());
                            errorActionInstance.setType(typeInstance2);
                        }
                        
                        JsonNode requestValue = errorActionValue.get("request");
                        if (requestValue != null && requestValue instanceof NullNode == false) {
                            JobHttpRequest requestInstance = new JobHttpRequest();
                            errorActionInstance.setRequest(requestInstance);
                            
                            JsonNode uriValue = requestValue.get("uri");
                            if (uriValue != null && uriValue instanceof NullNode == false) {
                                URI uriInstance;
                                uriInstance = new URI(uriValue.getTextValue());
                                requestInstance.setUri(uriInstance);
                            }
                            
                            JsonNode methodValue = requestValue.get("method");
                            if (methodValue != null && methodValue instanceof NullNode == false) {
                                String methodInstance;
                                methodInstance = methodValue.getTextValue();
                                requestInstance.setMethod(methodInstance);
                            }
                            
                            JsonNode headersSequenceElement = ((JsonNode) requestValue.get("headers"));
                            if (headersSequenceElement != null && headersSequenceElement instanceof NullNode == false) {
                                Iterator<Map.Entry<String, JsonNode>> itr = headersSequenceElement.getFields();
                                while (itr.hasNext()) {
                                    Map.Entry<String, JsonNode> property = itr.next();
                                    String headersKey = property.getKey();
                                    String headersValue = property.getValue().getTextValue();
                                    requestInstance.getHeaders().put(headersKey, headersValue);
                                }
                            }
                            
                            JsonNode bodyValue = requestValue.get("body");
                            if (bodyValue != null && bodyValue instanceof NullNode == false) {
                                String bodyInstance;
                                bodyInstance = bodyValue.getTextValue();
                                requestInstance.setBody(bodyInstance);
                            }
                            
                            JsonNode authenticationValue = requestValue.get("authentication");
                            if (authenticationValue != null && authenticationValue instanceof NullNode == false) {
                                String typeName = authenticationValue.get("type").getTextValue();
                                if ("ClientCertificate".equals(typeName)) {
                                    ClientCertAuthentication clientCertAuthenticationInstance = new ClientCertAuthentication();
                                    
                                    JsonNode passwordValue = authenticationValue.get("password");
                                    if (passwordValue != null && passwordValue instanceof NullNode == false) {
                                        String passwordInstance;
                                        passwordInstance = passwordValue.getTextValue();
                                        clientCertAuthenticationInstance.setPassword(passwordInstance);
                                    }
                                    
                                    JsonNode pfxValue = authenticationValue.get("pfx");
                                    if (pfxValue != null && pfxValue instanceof NullNode == false) {
                                        String pfxInstance;
                                        pfxInstance = pfxValue.getTextValue();
                                        clientCertAuthenticationInstance.setPfx(pfxInstance);
                                    }
                                    
                                    JsonNode certificateThumbprintValue = authenticationValue.get("certificateThumbprint");
                                    if (certificateThumbprintValue != null && certificateThumbprintValue instanceof NullNode == false) {
                                        String certificateThumbprintInstance;
                                        certificateThumbprintInstance = certificateThumbprintValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                    }
                                    
                                    JsonNode certificateExpirationValue = authenticationValue.get("certificateExpiration");
                                    if (certificateExpirationValue != null && certificateExpirationValue instanceof NullNode == false) {
                                        Calendar certificateExpirationInstance;
                                        certificateExpirationInstance = DatatypeConverter.parseDateTime(certificateExpirationValue.getTextValue());
                                        clientCertAuthenticationInstance.setCertificateExpiration(certificateExpirationInstance);
                                    }
                                    
                                    JsonNode certificateSubjectNameValue = authenticationValue.get("certificateSubjectName");
                                    if (certificateSubjectNameValue != null && certificateSubjectNameValue instanceof NullNode == false) {
                                        String certificateSubjectNameInstance;
                                        certificateSubjectNameInstance = certificateSubjectNameValue.getTextValue();
                                        clientCertAuthenticationInstance.setCertificateSubjectName(certificateSubjectNameInstance);
                                    }
                                    
                                    JsonNode typeValue3 = authenticationValue.get("type");
                                    if (typeValue3 != null && typeValue3 instanceof NullNode == false) {
                                        HttpAuthenticationType typeInstance3;
                                        typeInstance3 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue3.getTextValue());
                                        clientCertAuthenticationInstance.setType(typeInstance3);
                                    }
                                    requestInstance.setAuthentication(clientCertAuthenticationInstance);
                                }
                            }
                        }
                        
                        JsonNode queueMessageValue = errorActionValue.get("queueMessage");
                        if (queueMessageValue != null && queueMessageValue instanceof NullNode == false) {
                            JobQueueMessage queueMessageInstance = new JobQueueMessage();
                            errorActionInstance.setQueueMessage(queueMessageInstance);
                            
                            JsonNode storageAccountValue = queueMessageValue.get("storageAccount");
                            if (storageAccountValue != null && storageAccountValue instanceof NullNode == false) {
                                String storageAccountInstance;
                                storageAccountInstance = storageAccountValue.getTextValue();
                                queueMessageInstance.setStorageAccountName(storageAccountInstance);
                            }
                            
                            JsonNode queueNameValue = queueMessageValue.get("queueName");
                            if (queueNameValue != null && queueNameValue instanceof NullNode == false) {
                                String queueNameInstance;
                                queueNameInstance = queueNameValue.getTextValue();
                                queueMessageInstance.setQueueName(queueNameInstance);
                            }
                            
                            JsonNode sasTokenValue = queueMessageValue.get("sasToken");
                            if (sasTokenValue != null && sasTokenValue instanceof NullNode == false) {
                                String sasTokenInstance;
                                sasTokenInstance = sasTokenValue.getTextValue();
                                queueMessageInstance.setSasToken(sasTokenInstance);
                            }
                            
                            JsonNode messageValue = queueMessageValue.get("message");
                            if (messageValue != null && messageValue instanceof NullNode == false) {
                                String messageInstance;
                                messageInstance = messageValue.getTextValue();
                                queueMessageInstance.setMessage(messageInstance);
                            }
                        }
                    }
                    
                    JsonNode requestValue2 = actionValue.get("request");
                    if (requestValue2 != null && requestValue2 instanceof NullNode == false) {
                        JobHttpRequest requestInstance2 = new JobHttpRequest();
                        actionInstance.setRequest(requestInstance2);
                        
                        JsonNode uriValue2 = requestValue2.get("uri");
                        if (uriValue2 != null && uriValue2 instanceof NullNode == false) {
                            URI uriInstance2;
                            uriInstance2 = new URI(uriValue2.getTextValue());
                            requestInstance2.setUri(uriInstance2);
                        }
                        
                        JsonNode methodValue2 = requestValue2.get("method");
                        if (methodValue2 != null && methodValue2 instanceof NullNode == false) {
                            String methodInstance2;
                            methodInstance2 = methodValue2.getTextValue();
                            requestInstance2.setMethod(methodInstance2);
                        }
                        
                        JsonNode headersSequenceElement2 = ((JsonNode) requestValue2.get("headers"));
                        if (headersSequenceElement2 != null && headersSequenceElement2 instanceof NullNode == false) {
                            Iterator<Map.Entry<String, JsonNode>> itr2 = headersSequenceElement2.getFields();
                            while (itr2.hasNext()) {
                                Map.Entry<String, JsonNode> property2 = itr2.next();
                                String headersKey2 = property2.getKey();
                                String headersValue2 = property2.getValue().getTextValue();
                                requestInstance2.getHeaders().put(headersKey2, headersValue2);
                            }
                        }
                        
                        JsonNode bodyValue2 = requestValue2.get("body");
                        if (bodyValue2 != null && bodyValue2 instanceof NullNode == false) {
                            String bodyInstance2;
                            bodyInstance2 = bodyValue2.getTextValue();
                            requestInstance2.setBody(bodyInstance2);
                        }
                        
                        JsonNode authenticationValue2 = requestValue2.get("authentication");
                        if (authenticationValue2 != null && authenticationValue2 instanceof NullNode == false) {
                            String typeName2 = authenticationValue2.get("type").getTextValue();
                            if ("ClientCertificate".equals(typeName2)) {
                                ClientCertAuthentication clientCertAuthenticationInstance2 = new ClientCertAuthentication();
                                
                                JsonNode passwordValue2 = authenticationValue2.get("password");
                                if (passwordValue2 != null && passwordValue2 instanceof NullNode == false) {
                                    String passwordInstance2;
                                    passwordInstance2 = passwordValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPassword(passwordInstance2);
                                }
                                
                                JsonNode pfxValue2 = authenticationValue2.get("pfx");
                                if (pfxValue2 != null && pfxValue2 instanceof NullNode == false) {
                                    String pfxInstance2;
                                    pfxInstance2 = pfxValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setPfx(pfxInstance2);
                                }
                                
                                JsonNode certificateThumbprintValue2 = authenticationValue2.get("certificateThumbprint");
                                if (certificateThumbprintValue2 != null && certificateThumbprintValue2 instanceof NullNode == false) {
                                    String certificateThumbprintInstance2;
                                    certificateThumbprintInstance2 = certificateThumbprintValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateThumbprint(certificateThumbprintInstance2);
                                }
                                
                                JsonNode certificateExpirationValue2 = authenticationValue2.get("certificateExpiration");
                                if (certificateExpirationValue2 != null && certificateExpirationValue2 instanceof NullNode == false) {
                                    Calendar certificateExpirationInstance2;
                                    certificateExpirationInstance2 = DatatypeConverter.parseDateTime(certificateExpirationValue2.getTextValue());
                                    clientCertAuthenticationInstance2.setCertificateExpiration(certificateExpirationInstance2);
                                }
                                
                                JsonNode certificateSubjectNameValue2 = authenticationValue2.get("certificateSubjectName");
                                if (certificateSubjectNameValue2 != null && certificateSubjectNameValue2 instanceof NullNode == false) {
                                    String certificateSubjectNameInstance2;
                                    certificateSubjectNameInstance2 = certificateSubjectNameValue2.getTextValue();
                                    clientCertAuthenticationInstance2.setCertificateSubjectName(certificateSubjectNameInstance2);
                                }
                                
                                JsonNode typeValue4 = authenticationValue2.get("type");
                                if (typeValue4 != null && typeValue4 instanceof NullNode == false) {
                                    HttpAuthenticationType typeInstance4;
                                    typeInstance4 = SchedulerClientImpl.parseHttpAuthenticationType(typeValue4.getTextValue());
                                    clientCertAuthenticationInstance2.setType(typeInstance4);
                                }
                                requestInstance2.setAuthentication(clientCertAuthenticationInstance2);
                            }
                        }
                    }
                    
                    JsonNode queueMessageValue2 = actionValue.get("queueMessage");
                    if (queueMessageValue2 != null && queueMessageValue2 instanceof NullNode == false) {
                        JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                        actionInstance.setQueueMessage(queueMessageInstance2);
                        
                        JsonNode storageAccountValue2 = queueMessageValue2.get("storageAccount");
                        if (storageAccountValue2 != null && storageAccountValue2 instanceof NullNode == false) {
                            String storageAccountInstance2;
                            storageAccountInstance2 = storageAccountValue2.getTextValue();
                            queueMessageInstance2.setStorageAccountName(storageAccountInstance2);
                        }
                        
                        JsonNode queueNameValue2 = queueMessageValue2.get("queueName");
                        if (queueNameValue2 != null && queueNameValue2 instanceof NullNode == false) {
                            String queueNameInstance2;
                            queueNameInstance2 = queueNameValue2.getTextValue();
                            queueMessageInstance2.setQueueName(queueNameInstance2);
                        }
                        
                        JsonNode sasTokenValue2 = queueMessageValue2.get("sasToken");
                        if (sasTokenValue2 != null && sasTokenValue2 instanceof NullNode == false) {
                            String sasTokenInstance2;
                            sasTokenInstance2 = sasTokenValue2.getTextValue();
                            queueMessageInstance2.setSasToken(sasTokenInstance2);
                        }
                        
                        JsonNode messageValue2 = queueMessageValue2.get("message");
                        if (messageValue2 != null && messageValue2 instanceof NullNode == false) {
                            String messageInstance2;
                            messageInstance2 = messageValue2.getTextValue();
                            queueMessageInstance2.setMessage(messageInstance2);
                        }
                    }
                }
                
                JsonNode recurrenceValue = responseDoc.get("recurrence");
                if (recurrenceValue != null && recurrenceValue instanceof NullNode == false) {
                    JobRecurrence recurrenceInstance = new JobRecurrence();
                    jobInstance.setRecurrence(recurrenceInstance);
                    
                    JsonNode frequencyValue = recurrenceValue.get("frequency");
                    if (frequencyValue != null && frequencyValue instanceof NullNode == false) {
                        JobRecurrenceFrequency frequencyInstance;
                        frequencyInstance = SchedulerClientImpl.parseJobRecurrenceFrequency(frequencyValue.getTextValue());
                        recurrenceInstance.setFrequency(frequencyInstance);
                    }
                    
                    JsonNode intervalValue = recurrenceValue.get("interval");
                    if (intervalValue != null && intervalValue instanceof NullNode == false) {
                        int intervalInstance;
                        intervalInstance = intervalValue.getIntValue();
                        recurrenceInstance.setInterval(intervalInstance);
                    }
                    
                    JsonNode countValue = recurrenceValue.get("count");
                    if (countValue != null && countValue instanceof NullNode == false) {
                        int countInstance;
                        countInstance = countValue.getIntValue();
                        recurrenceInstance.setCount(countInstance);
                    }
                    
                    JsonNode endTimeValue = recurrenceValue.get("endTime");
                    if (endTimeValue != null && endTimeValue instanceof NullNode == false) {
                        Calendar endTimeInstance;
                        endTimeInstance = DatatypeConverter.parseDateTime(endTimeValue.getTextValue());
                        recurrenceInstance.setEndTime(endTimeInstance);
                    }
                    
                    JsonNode scheduleValue = recurrenceValue.get("schedule");
                    if (scheduleValue != null && scheduleValue instanceof NullNode == false) {
                        JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                        recurrenceInstance.setSchedule(scheduleInstance);
                        
                        JsonNode minutesArray = scheduleValue.get("minutes");
                        if (minutesArray != null && minutesArray instanceof NullNode == false) {
                            scheduleInstance.setMinutes(new ArrayList<Integer>());
                            for (JsonNode minutesValue : ((ArrayNode) minutesArray)) {
                                scheduleInstance.getMinutes().add(minutesValue.getIntValue());
                            }
                        }
                        
                        JsonNode hoursArray = scheduleValue.get("hours");
                        if (hoursArray != null && hoursArray instanceof NullNode == false) {
                            scheduleInstance.setHours(new ArrayList<Integer>());
                            for (JsonNode hoursValue : ((ArrayNode) hoursArray)) {
                                scheduleInstance.getHours().add(hoursValue.getIntValue());
                            }
                        }
                        
                        JsonNode weekDaysArray = scheduleValue.get("weekDays");
                        if (weekDaysArray != null && weekDaysArray instanceof NullNode == false) {
                            scheduleInstance.setDays(new ArrayList<JobScheduleDay>());
                            for (JsonNode weekDaysValue : ((ArrayNode) weekDaysArray)) {
                                scheduleInstance.getDays().add(SchedulerClientImpl.parseJobScheduleDay(weekDaysValue.getTextValue()));
                            }
                        }
                        
                        JsonNode monthsArray = scheduleValue.get("months");
                        if (monthsArray != null && monthsArray instanceof NullNode == false) {
                            scheduleInstance.setMonths(new ArrayList<Integer>());
                            for (JsonNode monthsValue : ((ArrayNode) monthsArray)) {
                                scheduleInstance.getMonths().add(monthsValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthDaysArray = scheduleValue.get("monthDays");
                        if (monthDaysArray != null && monthDaysArray instanceof NullNode == false) {
                            scheduleInstance.setMonthDays(new ArrayList<Integer>());
                            for (JsonNode monthDaysValue : ((ArrayNode) monthDaysArray)) {
                                scheduleInstance.getMonthDays().add(monthDaysValue.getIntValue());
                            }
                        }
                        
                        JsonNode monthlyOccurrencesArray = scheduleValue.get("monthlyOccurrences");
                        if (monthlyOccurrencesArray != null && monthlyOccurrencesArray instanceof NullNode == false) {
                            scheduleInstance.setMonthlyOccurrences(new ArrayList<JobScheduleMonthlyOccurrence>());
                            for (JsonNode monthlyOccurrencesValue : ((ArrayNode) monthlyOccurrencesArray)) {
                                JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                scheduleInstance.getMonthlyOccurrences().add(jobScheduleMonthlyOccurrenceInstance);
                                
                                JsonNode dayValue = monthlyOccurrencesValue.get("day");
                                if (dayValue != null && dayValue instanceof NullNode == false) {
                                    JobScheduleDay dayInstance;
                                    dayInstance = SchedulerClientImpl.parseJobScheduleDay(dayValue.getTextValue());
                                    jobScheduleMonthlyOccurrenceInstance.setDay(dayInstance);
                                }
                                
                                JsonNode occurrenceValue = monthlyOccurrencesValue.get("occurrence");
                                if (occurrenceValue != null && occurrenceValue instanceof NullNode == false) {
                                    int occurrenceInstance;
                                    occurrenceInstance = occurrenceValue.getIntValue();
                                    jobScheduleMonthlyOccurrenceInstance.setOccurrence(occurrenceInstance);
                                }
                            }
                        }
                    }
                }
                
                JsonNode statusValue = responseDoc.get("status");
                if (statusValue != null && statusValue instanceof NullNode == false) {
                    JobStatus statusInstance = new JobStatus();
                    jobInstance.setStatus(statusInstance);
                    
                    JsonNode lastExecutionTimeValue = statusValue.get("lastExecutionTime");
                    if (lastExecutionTimeValue != null && lastExecutionTimeValue instanceof NullNode == false) {
                        Calendar lastExecutionTimeInstance;
                        lastExecutionTimeInstance = DatatypeConverter.parseDateTime(lastExecutionTimeValue.getTextValue());
                        statusInstance.setLastExecutionTime(lastExecutionTimeInstance);
                    }
                    
                    JsonNode nextExecutionTimeValue = statusValue.get("nextExecutionTime");
                    if (nextExecutionTimeValue != null && nextExecutionTimeValue instanceof NullNode == false) {
                        Calendar nextExecutionTimeInstance;
                        nextExecutionTimeInstance = DatatypeConverter.parseDateTime(nextExecutionTimeValue.getTextValue());
                        statusInstance.setNextExecutionTime(nextExecutionTimeInstance);
                    }
                    
                    JsonNode executionCountValue = statusValue.get("executionCount");
                    if (executionCountValue != null && executionCountValue instanceof NullNode == false) {
                        int executionCountInstance;
                        executionCountInstance = executionCountValue.getIntValue();
                        statusInstance.setExecutionCount(executionCountInstance);
                    }
                    
                    JsonNode failureCountValue = statusValue.get("failureCount");
                    if (failureCountValue != null && failureCountValue instanceof NullNode == false) {
                        int failureCountInstance;
                        failureCountInstance = failureCountValue.getIntValue();
                        statusInstance.setFailureCount(failureCountInstance);
                    }
                    
                    JsonNode faultedCountValue = statusValue.get("faultedCount");
                    if (faultedCountValue != null && faultedCountValue instanceof NullNode == false) {
                        int faultedCountInstance;
                        faultedCountInstance = faultedCountValue.getIntValue();
                        statusInstance.setFaultedCount(faultedCountInstance);
                    }
                }
                
                JsonNode stateValue = responseDoc.get("state");
                if (stateValue != null && stateValue instanceof NullNode == false) {
                    JobState stateInstance;
                    stateInstance = SchedulerClientImpl.parseJobState(stateValue.getTextValue());
                    jobInstance.setState(stateInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
}
