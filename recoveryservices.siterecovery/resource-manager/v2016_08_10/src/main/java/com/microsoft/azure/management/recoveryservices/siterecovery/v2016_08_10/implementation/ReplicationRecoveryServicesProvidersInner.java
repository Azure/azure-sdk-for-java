/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationRecoveryServicesProviders.
 */
public class ReplicationRecoveryServicesProvidersInner implements InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private ReplicationRecoveryServicesProvidersService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationRecoveryServicesProvidersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationRecoveryServicesProvidersInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationRecoveryServicesProvidersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationRecoveryServicesProviders to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationRecoveryServicesProvidersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders refreshProvider" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/refreshProvider")
        Observable<Response<ResponseBody>> refreshProvider(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders beginRefreshProvider" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/refreshProvider")
        Observable<Response<ResponseBody>> beginRefreshProvider(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders delete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/remove")
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders beginDelete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/remove")
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders purge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> purge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders beginPurge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginPurge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders listByReplicationFabrics" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders")
        Observable<Response<ResponseBody>> listByReplicationFabrics(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryServicesProviders")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders listByReplicationFabricsNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationFabricsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryServicesProviders listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryServicesProviderInner object if successful.
     */
    public RecoveryServicesProviderInner refreshProvider(String fabricName, String providerName) {
        return refreshProviderWithServiceResponseAsync(fabricName, providerName).toBlocking().last().body();
    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryServicesProviderInner> refreshProviderAsync(String fabricName, String providerName, final ServiceCallback<RecoveryServicesProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(refreshProviderWithServiceResponseAsync(fabricName, providerName), serviceCallback);
    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryServicesProviderInner> refreshProviderAsync(String fabricName, String providerName) {
        return refreshProviderWithServiceResponseAsync(fabricName, providerName).map(new Func1<ServiceResponse<RecoveryServicesProviderInner>, RecoveryServicesProviderInner>() {
            @Override
            public RecoveryServicesProviderInner call(ServiceResponse<RecoveryServicesProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryServicesProviderInner>> refreshProviderWithServiceResponseAsync(String fabricName, String providerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.refreshProvider(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<RecoveryServicesProviderInner>() { }.getType());
    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryServicesProviderInner object if successful.
     */
    public RecoveryServicesProviderInner beginRefreshProvider(String fabricName, String providerName) {
        return beginRefreshProviderWithServiceResponseAsync(fabricName, providerName).toBlocking().single().body();
    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryServicesProviderInner> beginRefreshProviderAsync(String fabricName, String providerName, final ServiceCallback<RecoveryServicesProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginRefreshProviderWithServiceResponseAsync(fabricName, providerName), serviceCallback);
    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryServicesProviderInner object
     */
    public Observable<RecoveryServicesProviderInner> beginRefreshProviderAsync(String fabricName, String providerName) {
        return beginRefreshProviderWithServiceResponseAsync(fabricName, providerName).map(new Func1<ServiceResponse<RecoveryServicesProviderInner>, RecoveryServicesProviderInner>() {
            @Override
            public RecoveryServicesProviderInner call(ServiceResponse<RecoveryServicesProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryServicesProviderInner object
     */
    public Observable<ServiceResponse<RecoveryServicesProviderInner>> beginRefreshProviderWithServiceResponseAsync(String fabricName, String providerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginRefreshProvider(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryServicesProviderInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryServicesProviderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryServicesProviderInner> clientResponse = beginRefreshProviderDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryServicesProviderInner> beginRefreshProviderDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryServicesProviderInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryServicesProviderInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String providerName) {
        deleteWithServiceResponseAsync(fabricName, providerName).toBlocking().last().body();
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String providerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, providerName), serviceCallback);
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String providerName) {
        return deleteWithServiceResponseAsync(fabricName, providerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String providerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String providerName) {
        beginDeleteWithServiceResponseAsync(fabricName, providerName).toBlocking().single().body();
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String providerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, providerName), serviceCallback);
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String providerName) {
        return beginDeleteWithServiceResponseAsync(fabricName, providerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object "deleteRspInput" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String providerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the details of a recovery services provider.
     * Gets the details of registered recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryServicesProviderInner object if successful.
     */
    public RecoveryServicesProviderInner get(String fabricName, String providerName) {
        return getWithServiceResponseAsync(fabricName, providerName).toBlocking().single().body();
    }

    /**
     * Gets the details of a recovery services provider.
     * Gets the details of registered recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryServicesProviderInner> getAsync(String fabricName, String providerName, final ServiceCallback<RecoveryServicesProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, providerName), serviceCallback);
    }

    /**
     * Gets the details of a recovery services provider.
     * Gets the details of registered recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryServicesProviderInner object
     */
    public Observable<RecoveryServicesProviderInner> getAsync(String fabricName, String providerName) {
        return getWithServiceResponseAsync(fabricName, providerName).map(new Func1<ServiceResponse<RecoveryServicesProviderInner>, RecoveryServicesProviderInner>() {
            @Override
            public RecoveryServicesProviderInner call(ServiceResponse<RecoveryServicesProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a recovery services provider.
     * Gets the details of registered recovery services provider.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryServicesProviderInner object
     */
    public Observable<ServiceResponse<RecoveryServicesProviderInner>> getWithServiceResponseAsync(String fabricName, String providerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryServicesProviderInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryServicesProviderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryServicesProviderInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryServicesProviderInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryServicesProviderInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryServicesProviderInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void purge(String fabricName, String providerName) {
        purgeWithServiceResponseAsync(fabricName, providerName).toBlocking().last().body();
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> purgeAsync(String fabricName, String providerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(purgeWithServiceResponseAsync(fabricName, providerName), serviceCallback);
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> purgeAsync(String fabricName, String providerName) {
        return purgeWithServiceResponseAsync(fabricName, providerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> purgeWithServiceResponseAsync(String fabricName, String providerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.purge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginPurge(String fabricName, String providerName) {
        beginPurgeWithServiceResponseAsync(fabricName, providerName).toBlocking().single().body();
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginPurgeAsync(String fabricName, String providerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginPurgeWithServiceResponseAsync(fabricName, providerName), serviceCallback);
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginPurgeAsync(String fabricName, String providerName) {
        return beginPurgeWithServiceResponseAsync(fabricName, providerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purges recovery service provider from fabric.
     * The operation to purge(force delete) a recovery services provider from the vault.
     *
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginPurgeWithServiceResponseAsync(String fabricName, String providerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginPurge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginPurgeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginPurgeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param fabricName Fabric name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object if successful.
     */
    public PagedList<RecoveryServicesProviderInner> listByReplicationFabrics(final String fabricName) {
        ServiceResponse<Page<RecoveryServicesProviderInner>> response = listByReplicationFabricsSinglePageAsync(fabricName).toBlocking().single();
        return new PagedList<RecoveryServicesProviderInner>(response.body()) {
            @Override
            public Page<RecoveryServicesProviderInner> nextPage(String nextPageLink) {
                return listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param fabricName Fabric name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryServicesProviderInner>> listByReplicationFabricsAsync(final String fabricName, final ListOperationCallback<RecoveryServicesProviderInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationFabricsSinglePageAsync(fabricName),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(String nextPageLink) {
                    return listByReplicationFabricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param fabricName Fabric name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<Page<RecoveryServicesProviderInner>> listByReplicationFabricsAsync(final String fabricName) {
        return listByReplicationFabricsWithServiceResponseAsync(fabricName)
            .map(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Page<RecoveryServicesProviderInner>>() {
                @Override
                public Page<RecoveryServicesProviderInner> call(ServiceResponse<Page<RecoveryServicesProviderInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param fabricName Fabric name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listByReplicationFabricsWithServiceResponseAsync(final String fabricName) {
        return listByReplicationFabricsSinglePageAsync(fabricName)
            .concatMap(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(ServiceResponse<Page<RecoveryServicesProviderInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
    ServiceResponse<PageImpl<RecoveryServicesProviderInner>> * @param fabricName Fabric name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listByReplicationFabricsSinglePageAsync(final String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationFabrics(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryServicesProviderInner>> result = listByReplicationFabricsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryServicesProviderInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryServicesProviderInner>> listByReplicationFabricsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryServicesProviderInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryServicesProviderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object if successful.
     */
    public PagedList<RecoveryServicesProviderInner> list() {
        ServiceResponse<Page<RecoveryServicesProviderInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<RecoveryServicesProviderInner>(response.body()) {
            @Override
            public Page<RecoveryServicesProviderInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryServicesProviderInner>> listAsync(final ListOperationCallback<RecoveryServicesProviderInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<Page<RecoveryServicesProviderInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Page<RecoveryServicesProviderInner>>() {
                @Override
                public Page<RecoveryServicesProviderInner> call(ServiceResponse<Page<RecoveryServicesProviderInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(ServiceResponse<Page<RecoveryServicesProviderInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryServicesProviderInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryServicesProviderInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryServicesProviderInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryServicesProviderInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryServicesProviderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object if successful.
     */
    public PagedList<RecoveryServicesProviderInner> listByReplicationFabricsNext(final String nextPageLink) {
        ServiceResponse<Page<RecoveryServicesProviderInner>> response = listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RecoveryServicesProviderInner>(response.body()) {
            @Override
            public Page<RecoveryServicesProviderInner> nextPage(String nextPageLink) {
                return listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryServicesProviderInner>> listByReplicationFabricsNextAsync(final String nextPageLink, final ServiceFuture<List<RecoveryServicesProviderInner>> serviceFuture, final ListOperationCallback<RecoveryServicesProviderInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationFabricsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(String nextPageLink) {
                    return listByReplicationFabricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<Page<RecoveryServicesProviderInner>> listByReplicationFabricsNextAsync(final String nextPageLink) {
        return listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Page<RecoveryServicesProviderInner>>() {
                @Override
                public Page<RecoveryServicesProviderInner> call(ServiceResponse<Page<RecoveryServicesProviderInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listByReplicationFabricsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationFabricsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(ServiceResponse<Page<RecoveryServicesProviderInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     *
    ServiceResponse<PageImpl<RecoveryServicesProviderInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listByReplicationFabricsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationFabricsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryServicesProviderInner>> result = listByReplicationFabricsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryServicesProviderInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryServicesProviderInner>> listByReplicationFabricsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryServicesProviderInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryServicesProviderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object if successful.
     */
    public PagedList<RecoveryServicesProviderInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<RecoveryServicesProviderInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RecoveryServicesProviderInner>(response.body()) {
            @Override
            public Page<RecoveryServicesProviderInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryServicesProviderInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RecoveryServicesProviderInner>> serviceFuture, final ListOperationCallback<RecoveryServicesProviderInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<Page<RecoveryServicesProviderInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Page<RecoveryServicesProviderInner>>() {
                @Override
                public Page<RecoveryServicesProviderInner> call(ServiceResponse<Page<RecoveryServicesProviderInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryServicesProviderInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RecoveryServicesProviderInner>>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(ServiceResponse<Page<RecoveryServicesProviderInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault.
     *
    ServiceResponse<PageImpl<RecoveryServicesProviderInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryServicesProviderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryServicesProviderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryServicesProviderInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryServicesProviderInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryServicesProviderInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryServicesProviderInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryServicesProviderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
