/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.StorageClassificationMappingInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.StorageMappingInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationStorageClassificationMappings.
 */
public class ReplicationStorageClassificationMappingsInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationStorageClassificationMappingsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationStorageClassificationMappingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationStorageClassificationMappingsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationStorageClassificationMappingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationStorageClassificationMappings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationStorageClassificationMappingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("storageClassificationName") String storageClassificationName, @Path("storageClassificationMappingName") String storageClassificationMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("storageClassificationName") String storageClassificationName, @Path("storageClassificationMappingName") String storageClassificationMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body StorageClassificationMappingInput pairingInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("storageClassificationName") String storageClassificationName, @Path("storageClassificationMappingName") String storageClassificationMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body StorageClassificationMappingInput pairingInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings delete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("storageClassificationName") String storageClassificationName, @Path("storageClassificationMappingName") String storageClassificationMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings beginDelete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("storageClassificationName") String storageClassificationName, @Path("storageClassificationMappingName") String storageClassificationMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings listByReplicationStorageClassifications" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings")
        Observable<Response<ResponseBody>> listByReplicationStorageClassifications(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("storageClassificationName") String storageClassificationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassificationMappings")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings listByReplicationStorageClassificationsNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationStorageClassificationsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationStorageClassificationMappings listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the details of a storage classification mapping.
     * Gets the details of the specified storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageClassificationMappingInner object if successful.
     */
    public StorageClassificationMappingInner get(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return getWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).toBlocking().single().body();
    }

    /**
     * Gets the details of a storage classification mapping.
     * Gets the details of the specified storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageClassificationMappingInner> getAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, final ServiceCallback<StorageClassificationMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName), serviceCallback);
    }

    /**
     * Gets the details of a storage classification mapping.
     * Gets the details of the specified storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageClassificationMappingInner object
     */
    public Observable<StorageClassificationMappingInner> getAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return getWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).map(new Func1<ServiceResponse<StorageClassificationMappingInner>, StorageClassificationMappingInner>() {
            @Override
            public StorageClassificationMappingInner call(ServiceResponse<StorageClassificationMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a storage classification mapping.
     * Gets the details of the specified storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageClassificationMappingInner object
     */
    public Observable<ServiceResponse<StorageClassificationMappingInner>> getWithServiceResponseAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (storageClassificationMappingName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, storageClassificationMappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StorageClassificationMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<StorageClassificationMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StorageClassificationMappingInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StorageClassificationMappingInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageClassificationMappingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageClassificationMappingInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageClassificationMappingInner object if successful.
     */
    public StorageClassificationMappingInner create(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return createWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).toBlocking().last().body();
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageClassificationMappingInner> createAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, final ServiceCallback<StorageClassificationMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName), serviceCallback);
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<StorageClassificationMappingInner> createAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return createWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).map(new Func1<ServiceResponse<StorageClassificationMappingInner>, StorageClassificationMappingInner>() {
            @Override
            public StorageClassificationMappingInner call(ServiceResponse<StorageClassificationMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<StorageClassificationMappingInner>> createWithServiceResponseAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (storageClassificationMappingName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final StorageMappingInputProperties properties = null;
        StorageClassificationMappingInput pairingInput = new StorageClassificationMappingInput();
        pairingInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, storageClassificationMappingName, this.client.apiVersion(), this.client.acceptLanguage(), pairingInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<StorageClassificationMappingInner>() { }.getType());
    }
    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageClassificationMappingInner object if successful.
     */
    public StorageClassificationMappingInner create(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName, properties).toBlocking().last().body();
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageClassificationMappingInner> createAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties, final ServiceCallback<StorageClassificationMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName, properties), serviceCallback);
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<StorageClassificationMappingInner> createAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName, properties).map(new Func1<ServiceResponse<StorageClassificationMappingInner>, StorageClassificationMappingInner>() {
            @Override
            public StorageClassificationMappingInner call(ServiceResponse<StorageClassificationMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<StorageClassificationMappingInner>> createWithServiceResponseAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (storageClassificationMappingName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        StorageClassificationMappingInput pairingInput = new StorageClassificationMappingInput();
        pairingInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, storageClassificationMappingName, this.client.apiVersion(), this.client.acceptLanguage(), pairingInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<StorageClassificationMappingInner>() { }.getType());
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageClassificationMappingInner object if successful.
     */
    public StorageClassificationMappingInner beginCreate(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return beginCreateWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).toBlocking().single().body();
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageClassificationMappingInner> beginCreateAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, final ServiceCallback<StorageClassificationMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName), serviceCallback);
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageClassificationMappingInner object
     */
    public Observable<StorageClassificationMappingInner> beginCreateAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return beginCreateWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).map(new Func1<ServiceResponse<StorageClassificationMappingInner>, StorageClassificationMappingInner>() {
            @Override
            public StorageClassificationMappingInner call(ServiceResponse<StorageClassificationMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageClassificationMappingInner object
     */
    public Observable<ServiceResponse<StorageClassificationMappingInner>> beginCreateWithServiceResponseAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (storageClassificationMappingName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final StorageMappingInputProperties properties = null;
        StorageClassificationMappingInput pairingInput = new StorageClassificationMappingInput();
        pairingInput.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, storageClassificationMappingName, this.client.apiVersion(), this.client.acceptLanguage(), pairingInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StorageClassificationMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<StorageClassificationMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StorageClassificationMappingInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageClassificationMappingInner object if successful.
     */
    public StorageClassificationMappingInner beginCreate(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName, properties).toBlocking().single().body();
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageClassificationMappingInner> beginCreateAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties, final ServiceCallback<StorageClassificationMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName, properties), serviceCallback);
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageClassificationMappingInner object
     */
    public Observable<StorageClassificationMappingInner> beginCreateAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName, properties).map(new Func1<ServiceResponse<StorageClassificationMappingInner>, StorageClassificationMappingInner>() {
            @Override
            public StorageClassificationMappingInner call(ServiceResponse<StorageClassificationMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param properties Storage mapping input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageClassificationMappingInner object
     */
    public Observable<ServiceResponse<StorageClassificationMappingInner>> beginCreateWithServiceResponseAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (storageClassificationMappingName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        StorageClassificationMappingInput pairingInput = new StorageClassificationMappingInput();
        pairingInput.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, storageClassificationMappingName, this.client.apiVersion(), this.client.acceptLanguage(), pairingInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StorageClassificationMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<StorageClassificationMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StorageClassificationMappingInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StorageClassificationMappingInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageClassificationMappingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageClassificationMappingInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        deleteWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).toBlocking().last().body();
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName), serviceCallback);
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return deleteWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (storageClassificationMappingName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, storageClassificationMappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        beginDeleteWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).toBlocking().single().body();
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName), serviceCallback);
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        return beginDeleteWithServiceResponseAsync(fabricName, storageClassificationName, storageClassificationMappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String storageClassificationName, String storageClassificationMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (storageClassificationMappingName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, storageClassificationMappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object if successful.
     */
    public PagedList<StorageClassificationMappingInner> listByReplicationStorageClassifications(final String fabricName, final String storageClassificationName) {
        ServiceResponse<Page<StorageClassificationMappingInner>> response = listByReplicationStorageClassificationsSinglePageAsync(fabricName, storageClassificationName).toBlocking().single();
        return new PagedList<StorageClassificationMappingInner>(response.body()) {
            @Override
            public Page<StorageClassificationMappingInner> nextPage(String nextPageLink) {
                return listByReplicationStorageClassificationsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StorageClassificationMappingInner>> listByReplicationStorageClassificationsAsync(final String fabricName, final String storageClassificationName, final ListOperationCallback<StorageClassificationMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationStorageClassificationsSinglePageAsync(fabricName, storageClassificationName),
            new Func1<String, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(String nextPageLink) {
                    return listByReplicationStorageClassificationsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<Page<StorageClassificationMappingInner>> listByReplicationStorageClassificationsAsync(final String fabricName, final String storageClassificationName) {
        return listByReplicationStorageClassificationsWithServiceResponseAsync(fabricName, storageClassificationName)
            .map(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Page<StorageClassificationMappingInner>>() {
                @Override
                public Page<StorageClassificationMappingInner> call(ServiceResponse<Page<StorageClassificationMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listByReplicationStorageClassificationsWithServiceResponseAsync(final String fabricName, final String storageClassificationName) {
        return listByReplicationStorageClassificationsSinglePageAsync(fabricName, storageClassificationName)
            .concatMap(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(ServiceResponse<Page<StorageClassificationMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationStorageClassificationsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
    ServiceResponse<PageImpl<StorageClassificationMappingInner>> * @param fabricName Fabric name.
    ServiceResponse<PageImpl<StorageClassificationMappingInner>> * @param storageClassificationName Storage classification name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listByReplicationStorageClassificationsSinglePageAsync(final String fabricName, final String storageClassificationName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (storageClassificationName == null) {
            throw new IllegalArgumentException("Parameter storageClassificationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationStorageClassifications(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, storageClassificationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StorageClassificationMappingInner>> result = listByReplicationStorageClassificationsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StorageClassificationMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StorageClassificationMappingInner>> listByReplicationStorageClassificationsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StorageClassificationMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StorageClassificationMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object if successful.
     */
    public PagedList<StorageClassificationMappingInner> list() {
        ServiceResponse<Page<StorageClassificationMappingInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<StorageClassificationMappingInner>(response.body()) {
            @Override
            public Page<StorageClassificationMappingInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StorageClassificationMappingInner>> listAsync(final ListOperationCallback<StorageClassificationMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<Page<StorageClassificationMappingInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Page<StorageClassificationMappingInner>>() {
                @Override
                public Page<StorageClassificationMappingInner> call(ServiceResponse<Page<StorageClassificationMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(ServiceResponse<Page<StorageClassificationMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StorageClassificationMappingInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StorageClassificationMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StorageClassificationMappingInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StorageClassificationMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StorageClassificationMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object if successful.
     */
    public PagedList<StorageClassificationMappingInner> listByReplicationStorageClassificationsNext(final String nextPageLink) {
        ServiceResponse<Page<StorageClassificationMappingInner>> response = listByReplicationStorageClassificationsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StorageClassificationMappingInner>(response.body()) {
            @Override
            public Page<StorageClassificationMappingInner> nextPage(String nextPageLink) {
                return listByReplicationStorageClassificationsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StorageClassificationMappingInner>> listByReplicationStorageClassificationsNextAsync(final String nextPageLink, final ServiceFuture<List<StorageClassificationMappingInner>> serviceFuture, final ListOperationCallback<StorageClassificationMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationStorageClassificationsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(String nextPageLink) {
                    return listByReplicationStorageClassificationsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<Page<StorageClassificationMappingInner>> listByReplicationStorageClassificationsNextAsync(final String nextPageLink) {
        return listByReplicationStorageClassificationsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Page<StorageClassificationMappingInner>>() {
                @Override
                public Page<StorageClassificationMappingInner> call(ServiceResponse<Page<StorageClassificationMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listByReplicationStorageClassificationsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationStorageClassificationsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(ServiceResponse<Page<StorageClassificationMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationStorageClassificationsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     *
    ServiceResponse<PageImpl<StorageClassificationMappingInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listByReplicationStorageClassificationsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationStorageClassificationsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StorageClassificationMappingInner>> result = listByReplicationStorageClassificationsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StorageClassificationMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StorageClassificationMappingInner>> listByReplicationStorageClassificationsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StorageClassificationMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StorageClassificationMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object if successful.
     */
    public PagedList<StorageClassificationMappingInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<StorageClassificationMappingInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StorageClassificationMappingInner>(response.body()) {
            @Override
            public Page<StorageClassificationMappingInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StorageClassificationMappingInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<StorageClassificationMappingInner>> serviceFuture, final ListOperationCallback<StorageClassificationMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<Page<StorageClassificationMappingInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Page<StorageClassificationMappingInner>>() {
                @Override
                public Page<StorageClassificationMappingInner> call(ServiceResponse<Page<StorageClassificationMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StorageClassificationMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StorageClassificationMappingInner>>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(ServiceResponse<Page<StorageClassificationMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     *
    ServiceResponse<PageImpl<StorageClassificationMappingInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StorageClassificationMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StorageClassificationMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageClassificationMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StorageClassificationMappingInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StorageClassificationMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StorageClassificationMappingInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StorageClassificationMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StorageClassificationMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
