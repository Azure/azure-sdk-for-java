/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.NetworkMapping;

class ReplicationNetworkMappingsImpl extends WrapperImpl<ReplicationNetworkMappingsInner> implements ReplicationNetworkMappings {
    private final RecoveryServicesManager manager;

    ReplicationNetworkMappingsImpl(RecoveryServicesManager manager) {
        super(manager.inner().replicationNetworkMappings());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public NetworkMappingImpl define(String name) {
        return wrapModel(name);
    }

    private NetworkMappingImpl wrapModel(NetworkMappingInner inner) {
        return  new NetworkMappingImpl(inner, manager());
    }

    private NetworkMappingImpl wrapModel(String name) {
        return new NetworkMappingImpl(name, this.manager());
    }

    @Override
    public Observable<NetworkMapping> listByReplicationNetworksAsync(final String fabricName, final String networkName) {
        ReplicationNetworkMappingsInner client = this.inner();
        return client.listByReplicationNetworksAsync(fabricName, networkName)
        .flatMapIterable(new Func1<Page<NetworkMappingInner>, Iterable<NetworkMappingInner>>() {
            @Override
            public Iterable<NetworkMappingInner> call(Page<NetworkMappingInner> page) {
                return page.items();
            }
        })
        .map(new Func1<NetworkMappingInner, NetworkMapping>() {
            @Override
            public NetworkMapping call(NetworkMappingInner inner) {
                return new NetworkMappingImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<NetworkMapping> getAsync(String fabricName, String networkName, String networkMappingName) {
        ReplicationNetworkMappingsInner client = this.inner();
        return client.getAsync(fabricName, networkName, networkMappingName)
        .map(new Func1<NetworkMappingInner, NetworkMapping>() {
            @Override
            public NetworkMapping call(NetworkMappingInner inner) {
                return new NetworkMappingImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String fabricName, String networkName, String networkMappingName) {
        ReplicationNetworkMappingsInner client = this.inner();
        return client.deleteAsync(fabricName, networkName, networkMappingName).toCompletable();
    }

    @Override
    public Observable<NetworkMapping> listAsync() {
        ReplicationNetworkMappingsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<NetworkMappingInner>, Iterable<NetworkMappingInner>>() {
            @Override
            public Iterable<NetworkMappingInner> call(Page<NetworkMappingInner> page) {
                return page.items();
            }
        })
        .map(new Func1<NetworkMappingInner, NetworkMapping>() {
            @Override
            public NetworkMapping call(NetworkMappingInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
