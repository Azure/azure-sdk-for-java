/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.implementation;

import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.annotations.*;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;

import java.util.List;

import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Usages.
 */
public class UsagesInner {
    /** The RestProxy service to perform REST calls. */
    private UsagesService service;
    /** The service client containing this operation class. */
    private StorageManagementClientImpl client;

    /**
     * Initializes an instance of UsagesInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public UsagesInner(StorageManagementClientImpl client) {
        this.service = RestProxy.create(UsagesService.class, client.httpClient(), new AzureJacksonAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for Usages to be
     * used by Retrofit to perform actually REST calls.
     */
    @Host("https://management.azure.com")
    interface UsagesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storage.Usages list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages")
        Observable<PageImpl<UsageInner>> listAsync(@PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storage.Usages list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages")
        PageImpl<UsageInner> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
    }

    /**
     * Gets the current usage count and the limit for the resources under the subscription.
     *
     * @return the PagedList<UsageInner> object if successful.
     */
    public PagedList<UsageInner> list() {
        PageImpl<UsageInner> page = service.list(client.subscriptionId(), client.apiVersion(), client.acceptLanguage(), client.userAgent());
        return new PagedList<UsageInner>(page) {
            @Override
            public Page<UsageInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Gets the current usage count and the limit for the resources under the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<UsageInner>> listAsync(final ServiceCallback<List<UsageInner>> serviceCallback) {
        return ServiceFuture.fromBody(listAsync().map(new Func1<Page<UsageInner>, List<UsageInner>>() {
            @Override
            public List<UsageInner> call(Page<UsageInner> usageInnerPage) {
                return usageInnerPage.items();
            }
        }), serviceCallback);
    }

    /**
     * Gets the current usage count and the limit for the resources under the subscription.
     *
     * @return the observable to the List&lt;UsageInner&gt; object
     */
    public Observable<Page<UsageInner>> listAsync() {
        Observable<PageImpl<UsageInner>> res = service.listAsync(client.subscriptionId(), client.apiVersion(), client.acceptLanguage(), client.userAgent());
        return res.map(new Func1<PageImpl<UsageInner>, Page<UsageInner>>() {
            @Override
            public Page<UsageInner> call(PageImpl<UsageInner> usageInnerPage) {
                return usageInnerPage;
            }
        });
    }

}
