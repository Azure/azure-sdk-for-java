/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.iothub.v2018_04_01.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.iothub.v2018_04_01.IotHubs;
import com.microsoft.azure.management.iothub.v2018_04_01.IotHubDescription;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.iothub.v2018_04_01.SharedAccessSignatureAuthorizationRule;
import com.microsoft.azure.management.iothub.v2018_04_01.JobResponse;
import com.microsoft.azure.management.iothub.v2018_04_01.IotHubNameAvailabilityInfo;
import com.microsoft.azure.management.iothub.v2018_04_01.ExportDevicesRequest;
import com.microsoft.azure.management.iothub.v2018_04_01.ImportDevicesRequest;
import com.microsoft.azure.management.iothub.v2018_04_01.IotHubStats;
import com.microsoft.azure.management.iothub.v2018_04_01.Skus;
import com.microsoft.azure.management.iothub.v2018_04_01.Jobs;
import com.microsoft.azure.management.iothub.v2018_04_01.QuotaMetrics;
import com.microsoft.azure.management.iothub.v2018_04_01.IotHubKeys;
import com.microsoft.azure.management.iothub.v2018_04_01.Certificates;
import com.microsoft.azure.management.iothub.v2018_04_01.EventHubEndpoints;

class IotHubsImpl extends GroupableResourcesCoreImpl<IotHubDescription, IotHubDescriptionImpl, IotHubDescriptionInner, IotHubResourcesInner, IoTHubManager>  implements IotHubs {
    protected IotHubsImpl(IoTHubManager manager) {
        super(manager.inner().iotHubResources(), manager);
    }

    @Override
    public IotHubStats iotHubStats() {
        IotHubStats accessor = this.manager().iotHubStats();
        return accessor;
    }

    @Override
    public Skus skus() {
        Skus accessor = this.manager().skus();
        return accessor;
    }

    @Override
    public Jobs jobs() {
        Jobs accessor = this.manager().jobs();
        return accessor;
    }

    @Override
    public QuotaMetrics quotaMetrics() {
        QuotaMetrics accessor = this.manager().quotaMetrics();
        return accessor;
    }

    @Override
    public IotHubKeys iotHubKeys() {
        IotHubKeys accessor = this.manager().iotHubKeys();
        return accessor;
    }

    @Override
    public Certificates certificates() {
        Certificates accessor = this.manager().certificates();
        return accessor;
    }

    @Override
    public EventHubEndpoints eventHubEndpoints() {
        EventHubEndpoints accessor = this.manager().eventHubEndpoints();
        return accessor;
    }

    @Override
    protected Observable<IotHubDescriptionInner> getInnerAsync(String resourceGroupName, String name) {
        IotHubResourcesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        IotHubResourcesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<IotHubDescription> listByResourceGroup(String resourceGroupName) {
        IotHubResourcesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    private Observable<Page<IotHubDescriptionInner>> listByResourceGroupNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        IotHubResourcesInner client = this.inner();
        return client.listByResourceGroupNextAsync(nextLink)
        .flatMap(new Func1<Page<IotHubDescriptionInner>, Observable<Page<IotHubDescriptionInner>>>() {
            @Override
            public Observable<Page<IotHubDescriptionInner>> call(Page<IotHubDescriptionInner> page) {
                return Observable.just(page).concatWith(listByResourceGroupNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<IotHubDescription> listByResourceGroupAsync(String resourceGroupName) {
        IotHubResourcesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<IotHubDescriptionInner>, Observable<Page<IotHubDescriptionInner>>>() {
            @Override
            public Observable<Page<IotHubDescriptionInner>> call(Page<IotHubDescriptionInner> page) {
                return listByResourceGroupNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<IotHubDescriptionInner>, Iterable<IotHubDescriptionInner>>() {
            @Override
            public Iterable<IotHubDescriptionInner> call(Page<IotHubDescriptionInner> page) {
                return page.items();
            }
       })
        .map(new Func1<IotHubDescriptionInner, IotHubDescription>() {
            @Override
            public IotHubDescription call(IotHubDescriptionInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public PagedList<IotHubDescription> list() {
        IotHubResourcesInner client = this.inner();
        return this.wrapList(client.list());
    }

    private Observable<Page<IotHubDescriptionInner>> listNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        IotHubResourcesInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<IotHubDescriptionInner>, Observable<Page<IotHubDescriptionInner>>>() {
            @Override
            public Observable<Page<IotHubDescriptionInner>> call(Page<IotHubDescriptionInner> page) {
                return Observable.just(page).concatWith(listNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<IotHubDescription> listAsync() {
        IotHubResourcesInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<IotHubDescriptionInner>, Observable<Page<IotHubDescriptionInner>>>() {
            @Override
            public Observable<Page<IotHubDescriptionInner>> call(Page<IotHubDescriptionInner> page) {
                return listNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<IotHubDescriptionInner>, Iterable<IotHubDescriptionInner>>() {
            @Override
            public Iterable<IotHubDescriptionInner> call(Page<IotHubDescriptionInner> page) {
                return page.items();
            }
       })
        .map(new Func1<IotHubDescriptionInner, IotHubDescription>() {
            @Override
            public IotHubDescription call(IotHubDescriptionInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public IotHubDescriptionImpl define(String name) {
        return wrapModel(name);
    }

    private Observable<Page<SharedAccessSignatureAuthorizationRuleInner>> listKeysNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        IotHubResourcesInner client = this.inner();
        return client.listKeysNextAsync(nextLink)
        .flatMap(new Func1<Page<SharedAccessSignatureAuthorizationRuleInner>, Observable<Page<SharedAccessSignatureAuthorizationRuleInner>>>() {
            @Override
            public Observable<Page<SharedAccessSignatureAuthorizationRuleInner>> call(Page<SharedAccessSignatureAuthorizationRuleInner> page) {
                return Observable.just(page).concatWith(listKeysNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SharedAccessSignatureAuthorizationRule> listKeysAsync(final String resourceGroupName, final String resourceName) {
        IotHubResourcesInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, resourceName)
        .flatMap(new Func1<Page<SharedAccessSignatureAuthorizationRuleInner>, Observable<Page<SharedAccessSignatureAuthorizationRuleInner>>>() {
            @Override
            public Observable<Page<SharedAccessSignatureAuthorizationRuleInner>> call(Page<SharedAccessSignatureAuthorizationRuleInner> page) {
                return listKeysNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SharedAccessSignatureAuthorizationRuleInner>, Iterable<SharedAccessSignatureAuthorizationRuleInner>>() {
            @Override
            public Iterable<SharedAccessSignatureAuthorizationRuleInner> call(Page<SharedAccessSignatureAuthorizationRuleInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SharedAccessSignatureAuthorizationRuleInner, SharedAccessSignatureAuthorizationRule>() {
            @Override
            public SharedAccessSignatureAuthorizationRule call(SharedAccessSignatureAuthorizationRuleInner inner) {
                return new SharedAccessSignatureAuthorizationRuleImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<JobResponse> exportDevicesAsync(String resourceGroupName, String resourceName, ExportDevicesRequest exportDevicesParameters) {
        IotHubResourcesInner client = this.inner();
        return client.exportDevicesAsync(resourceGroupName, resourceName, exportDevicesParameters)
        .map(new Func1<JobResponseInner, JobResponse>() {
            @Override
            public JobResponse call(JobResponseInner inner) {
                return new JobResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<JobResponse> importDevicesAsync(String resourceGroupName, String resourceName, ImportDevicesRequest importDevicesParameters) {
        IotHubResourcesInner client = this.inner();
        return client.importDevicesAsync(resourceGroupName, resourceName, importDevicesParameters)
        .map(new Func1<JobResponseInner, JobResponse>() {
            @Override
            public JobResponse call(JobResponseInner inner) {
                return new JobResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<IotHubNameAvailabilityInfo> checkNameAvailabilityAsync(String name) {
        IotHubResourcesInner client = this.inner();
        return client.checkNameAvailabilityAsync(name)
        .map(new Func1<IotHubNameAvailabilityInfoInner, IotHubNameAvailabilityInfo>() {
            @Override
            public IotHubNameAvailabilityInfo call(IotHubNameAvailabilityInfoInner inner) {
                return new IotHubNameAvailabilityInfoImpl(inner, manager());
            }
        });
    }

    @Override
    protected IotHubDescriptionImpl wrapModel(IotHubDescriptionInner inner) {
        return  new IotHubDescriptionImpl(inner.name(), inner, manager());
    }

    @Override
    protected IotHubDescriptionImpl wrapModel(String name) {
        return new IotHubDescriptionImpl(name, new IotHubDescriptionInner(), this.manager());
    }

}
