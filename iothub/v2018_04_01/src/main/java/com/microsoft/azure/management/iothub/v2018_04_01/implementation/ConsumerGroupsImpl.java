/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.iothub.v2018_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.iothub.v2018_04_01.ConsumerGroups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.iothub.v2018_04_01.EventHubConsumerGroupInfo;

class ConsumerGroupsImpl extends WrapperImpl<IotHubResourcesInner> implements ConsumerGroups {
    private final IoTHubManager manager;

    ConsumerGroupsImpl(IoTHubManager manager) {
        super(manager.inner().iotHubResources());
        this.manager = manager;
    }

    public IoTHubManager manager() {
        return this.manager;
    }

    @Override
    public EventHubConsumerGroupInfoImpl define(String name) {
        return new EventHubConsumerGroupInfoImpl(name, this.manager());
    }

    private EventHubConsumerGroupInfoImpl wrapModel(EventHubConsumerGroupInfoInner inner) {
        return  new EventHubConsumerGroupInfoImpl(inner, manager());
    }

    private Observable<Page<EventHubConsumerGroupInfoInner>> listByEventHubEndpointNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        IotHubResourcesInner client = this.inner();
        return client.listEventHubConsumerGroupsNextAsync(nextLink)
        .flatMap(new Func1<Page<EventHubConsumerGroupInfoInner>, Observable<Page<EventHubConsumerGroupInfoInner>>>() {
            @Override
            public Observable<Page<EventHubConsumerGroupInfoInner>> call(Page<EventHubConsumerGroupInfoInner> page) {
                return Observable.just(page).concatWith(listByEventHubEndpointNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<EventHubConsumerGroupInfo> listByEventHubEndpointAsync(final String resourceGroupName, final String resourceName, final String eventHubEndpointName) {
        IotHubResourcesInner client = this.inner();
        return client.listEventHubConsumerGroupsAsync(resourceGroupName, resourceName, eventHubEndpointName)
        .flatMap(new Func1<Page<EventHubConsumerGroupInfoInner>, Observable<Page<EventHubConsumerGroupInfoInner>>>() {
            @Override
            public Observable<Page<EventHubConsumerGroupInfoInner>> call(Page<EventHubConsumerGroupInfoInner> page) {
                return listByEventHubEndpointNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<EventHubConsumerGroupInfoInner>, Iterable<EventHubConsumerGroupInfoInner>>() {
            @Override
            public Iterable<EventHubConsumerGroupInfoInner> call(Page<EventHubConsumerGroupInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<EventHubConsumerGroupInfoInner, EventHubConsumerGroupInfo>() {
            @Override
            public EventHubConsumerGroupInfo call(EventHubConsumerGroupInfoInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Observable<EventHubConsumerGroupInfo> getByEventHubEndpointAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        IotHubResourcesInner client = this.inner();
        return client.getEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name)
        .map(new Func1<EventHubConsumerGroupInfoInner, EventHubConsumerGroupInfo>() {
            @Override
            public EventHubConsumerGroupInfo call(EventHubConsumerGroupInfoInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteByEventHubEndpointAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        IotHubResourcesInner client = this.inner();
        return client.deleteEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name).toCompletable();
    }

}
