/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.privatedns.v2018_09_01.implementation;

import com.microsoft.azure.management.privatedns.v2018_09_01.VirtualNetworkLink;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.SubResource;
import com.microsoft.azure.management.privatedns.v2018_09_01.VirtualNetworkLinkState;
import com.microsoft.azure.management.privatedns.v2018_09_01.ProvisioningState;

class VirtualNetworkLinkImpl extends CreatableUpdatableImpl<VirtualNetworkLink, VirtualNetworkLinkInner, VirtualNetworkLinkImpl> implements VirtualNetworkLink, VirtualNetworkLink.Definition, VirtualNetworkLink.Update {
    private final privatednsManager manager;
    private String resourceGroupName;
    private String privateZoneName;
    private String virtualNetworkLinkName;
    private String cifMatch;
    private String cifNoneMatch;
    private String uifMatch;

    VirtualNetworkLinkImpl(String name, privatednsManager manager) {
        super(name, new VirtualNetworkLinkInner());
        this.manager = manager;
        // Set resource name
        this.virtualNetworkLinkName = name;
        //
    }

    VirtualNetworkLinkImpl(VirtualNetworkLinkInner inner, privatednsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.virtualNetworkLinkName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.privateZoneName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateDnsZones");
        this.virtualNetworkLinkName = IdParsingUtils.getValueFromIdByName(inner.id(), "virtualNetworkLinks");
        //
    }

    @Override
    public privatednsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<VirtualNetworkLink> createResourceAsync() {
        VirtualNetworkLinksInner client = this.manager().inner().virtualNetworkLinks();
        return client.createOrUpdateAsync(this.resourceGroupName, this.privateZoneName, this.virtualNetworkLinkName, this.inner(), this.cifMatch, this.cifNoneMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<VirtualNetworkLink> updateResourceAsync() {
        VirtualNetworkLinksInner client = this.manager().inner().virtualNetworkLinks();
        return client.updateAsync(this.resourceGroupName, this.privateZoneName, this.virtualNetworkLinkName, this.inner(), this.uifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<VirtualNetworkLinkInner> getInnerAsync() {
        VirtualNetworkLinksInner client = this.manager().inner().virtualNetworkLinks();
        return client.getAsync(this.resourceGroupName, this.privateZoneName, this.virtualNetworkLinkName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Boolean registrationEnabled() {
        return this.inner().registrationEnabled();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SubResource virtualNetwork() {
        return this.inner().virtualNetwork();
    }

    @Override
    public VirtualNetworkLinkState virtualNetworkLinkState() {
        return this.inner().virtualNetworkLinkState();
    }

    @Override
    public VirtualNetworkLinkImpl withExistingPrivateDnsZone(String resourceGroupName, String privateZoneName) {
        this.resourceGroupName = resourceGroupName;
        this.privateZoneName = privateZoneName;
        return this;
    }

    @Override
    public VirtualNetworkLinkImpl withIfNoneMatch(String ifNoneMatch) {
        this.cifNoneMatch = ifNoneMatch;
        return this;
    }

    @Override
    public VirtualNetworkLinkImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public VirtualNetworkLinkImpl withEtag(String etag) {
        this.inner().withEtag(etag);
        return this;
    }

    @Override
    public VirtualNetworkLinkImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public VirtualNetworkLinkImpl withRegistrationEnabled(Boolean registrationEnabled) {
        this.inner().withRegistrationEnabled(registrationEnabled);
        return this;
    }

    @Override
    public VirtualNetworkLinkImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public VirtualNetworkLinkImpl withVirtualNetwork(SubResource virtualNetwork) {
        this.inner().withVirtualNetwork(virtualNetwork);
        return this;
    }

}
