/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.applicationinsights.v2015_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.WebTestLocations;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.applicationinsights.v2015_05_01.ApplicationInsightsComponentWebTestLocation;

class WebTestLocationsImpl extends WrapperImpl<WebTestLocationsInner> implements WebTestLocations {
    private final InsightsManager manager;

    WebTestLocationsImpl(InsightsManager manager) {
        super(manager.inner().webTestLocations());
        this.manager = manager;
    }

    public InsightsManager manager() {
        return this.manager;
    }

    private ApplicationInsightsComponentWebTestLocationImpl wrapModel(ApplicationInsightsComponentWebTestLocationInner inner) {
        return  new ApplicationInsightsComponentWebTestLocationImpl(inner, manager());
    }

    @Override
    public Observable<ApplicationInsightsComponentWebTestLocation> listAsync(String resourceGroupName, String resourceName) {
        WebTestLocationsInner client = this.inner();
        return client.listAsync(resourceGroupName, resourceName)
        .flatMap(new Func1<List<ApplicationInsightsComponentWebTestLocationInner>, Observable<ApplicationInsightsComponentWebTestLocationInner>>() {
            @Override
            public Observable<ApplicationInsightsComponentWebTestLocationInner> call(List<ApplicationInsightsComponentWebTestLocationInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ApplicationInsightsComponentWebTestLocationInner, ApplicationInsightsComponentWebTestLocation>() {
            @Override
            public ApplicationInsightsComponentWebTestLocation call(ApplicationInsightsComponentWebTestLocationInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
