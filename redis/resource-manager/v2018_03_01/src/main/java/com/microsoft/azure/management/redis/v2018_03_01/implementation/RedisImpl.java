/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.redis.v2018_03_01.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.redis.v2018_03_01.Redis;
import com.microsoft.azure.management.redis.v2018_03_01.RedisResource;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.redis.v2018_03_01.RedisAccessKeys;
import com.microsoft.azure.management.redis.v2018_03_01.RedisForceRebootResponse;
import com.microsoft.azure.management.redis.v2018_03_01.RedisKeyType;
import com.microsoft.azure.management.redis.v2018_03_01.RedisRebootParameters;
import com.microsoft.azure.management.redis.v2018_03_01.ImportRDBParameters;
import com.microsoft.azure.management.redis.v2018_03_01.ExportRDBParameters;
import com.microsoft.azure.management.redis.v2018_03_01.CheckNameAvailabilityParameters;
import com.microsoft.azure.management.redis.v2018_03_01.NotificationListResponse;

class RedisImpl extends GroupableResourcesCoreImpl<RedisResource, RedisResourceImpl, RedisResourceInner, RedisInner, CacheManager>  implements Redis {
    protected RedisImpl(CacheManager manager) {
        super(manager.inner().redis(), manager);
    }

    @Override
    protected Observable<RedisResourceInner> getInnerAsync(String resourceGroupName, String name) {
        RedisInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        RedisInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<RedisResource> listByResourceGroup(String resourceGroupName) {
        RedisInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<RedisResource> listByResourceGroupAsync(String resourceGroupName) {
        RedisInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<RedisResourceInner>, Iterable<RedisResourceInner>>() {
            @Override
            public Iterable<RedisResourceInner> call(Page<RedisResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RedisResourceInner, RedisResource>() {
            @Override
            public RedisResource call(RedisResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<RedisResource> list() {
        RedisInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<RedisResource> listAsync() {
        RedisInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<RedisResourceInner>, Iterable<RedisResourceInner>>() {
            @Override
            public Iterable<RedisResourceInner> call(Page<RedisResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RedisResourceInner, RedisResource>() {
            @Override
            public RedisResource call(RedisResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public RedisResourceImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<RedisAccessKeys> listKeysAsync(String resourceGroupName, String name) {
        RedisInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, name)
        .map(new Func1<RedisAccessKeysInner, RedisAccessKeys>() {
            @Override
            public RedisAccessKeys call(RedisAccessKeysInner inner) {
                return new RedisAccessKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RedisAccessKeys> regenerateKeyAsync(String resourceGroupName, String name, RedisKeyType keyType) {
        RedisInner client = this.inner();
        return client.regenerateKeyAsync(resourceGroupName, name, keyType)
        .map(new Func1<RedisAccessKeysInner, RedisAccessKeys>() {
            @Override
            public RedisAccessKeys call(RedisAccessKeysInner inner) {
                return new RedisAccessKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RedisForceRebootResponse> forceRebootAsync(String resourceGroupName, String name, RedisRebootParameters parameters) {
        RedisInner client = this.inner();
        return client.forceRebootAsync(resourceGroupName, name, parameters)
        .map(new Func1<RedisForceRebootResponseInner, RedisForceRebootResponse>() {
            @Override
            public RedisForceRebootResponse call(RedisForceRebootResponseInner inner) {
                return new RedisForceRebootResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable importDataAsync(String resourceGroupName, String name, ImportRDBParameters parameters) {
        RedisInner client = this.inner();
        return client.importDataAsync(resourceGroupName, name, parameters).toCompletable();
    }

    @Override
    public Completable exportDataAsync(String resourceGroupName, String name, ExportRDBParameters parameters) {
        RedisInner client = this.inner();
        return client.exportDataAsync(resourceGroupName, name, parameters).toCompletable();
    }

    @Override
    public Completable checkNameAvailabilityAsync(CheckNameAvailabilityParameters parameters) {
        RedisInner client = this.inner();
        return client.checkNameAvailabilityAsync(parameters).toCompletable();
    }

    @Override
    protected RedisResourceImpl wrapModel(RedisResourceInner inner) {
        return  new RedisResourceImpl(inner.name(), inner, manager());
    }

    @Override
    protected RedisResourceImpl wrapModel(String name) {
        return new RedisResourceImpl(name, new RedisResourceInner(), this.manager());
    }

    @Override
    public Observable<NotificationListResponse> listUpgradeNotificationsAsync(String resourceGroupName, String name, double history) {
        RedisInner client = this.inner();
        return client.listUpgradeNotificationsAsync(resourceGroupName, name, history)
        .map(new Func1<NotificationListResponseInner, NotificationListResponse>() {
            @Override
            public NotificationListResponse call(NotificationListResponseInner inner) {
                return new NotificationListResponseImpl(inner, manager());
            }
        });
    }

}
