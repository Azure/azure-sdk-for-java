/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.redis.v2018_03_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.redis.v2018_03_01.ListUpgradeNotifications;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.redis.v2018_03_01.NotificationListResponse;

class ListUpgradeNotificationsImpl extends WrapperImpl<RedisInner> implements ListUpgradeNotifications {
    private final RedisManager manager;

    ListUpgradeNotificationsImpl(RedisManager manager) {
        super(manager.inner().redis());
        this.manager = manager;
    }

    public RedisManager manager() {
        return this.manager;
    }

    @Override
    public Observable<NotificationListResponse> listUpgradeNotificationsAsync(String resourceGroupName, String name, double history) {
        RedisInner client = this.inner();
        return client.listUpgradeNotificationsAsync(resourceGroupName, name, history)
        .map(new Func1<NotificationListResponseInner, NotificationListResponse>() {
            @Override
            public NotificationListResponse call(NotificationListResponseInner inner) {
                return new NotificationListResponseImpl(inner, manager());
            }
        });
    }

}
