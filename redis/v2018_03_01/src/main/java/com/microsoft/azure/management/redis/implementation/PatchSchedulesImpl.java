/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.redis.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.redis.PatchSchedules;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.redis.RedisPatchSchedule;

class PatchSchedulesImpl extends WrapperImpl<PatchSchedulesInner> implements PatchSchedules {
    private final CacheManager manager;

    PatchSchedulesImpl(CacheManager manager) {
        super(manager.inner().patchSchedules());
        this.manager = manager;
    }

    public CacheManager manager() {
        return this.manager;
    }

    @Override
    public RedisPatchScheduleImpl define(String name) {
        return new RedisPatchScheduleImpl(name, this.manager());
    }

    private RedisPatchScheduleImpl wrapModel(RedisPatchScheduleInner inner) {
        return  new RedisPatchScheduleImpl(inner, this.manager());
    }

    @Override
    public Observable<RedisPatchSchedule> getByRediAsync(String resourceGroupName, String name) {
        PatchSchedulesInner client = this.inner();
        return client.getAsync(resourceGroupName, name)
        .map(new Func1<RedisPatchScheduleInner, RedisPatchSchedule>() {
            @Override
            public RedisPatchSchedule call(RedisPatchScheduleInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteByRediAsync(String resourceGroupName, String name) {
        PatchSchedulesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

}
