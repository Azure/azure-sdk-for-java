[
  {
    "extension": "revapi.java",
    "configuration": {
      "filter": {
        "packages": {
          "regex": true,
          "exclude": [
            "com\\.azure\\..+\\.implementation(\\..+)?",
            "com\\.azure\\..+\\.samples(\\..+)?",
            "com\\.fasterxml\\.jackson\\..+",
            "reactor\\.netty\\..+",
            "reactor\\.util\\..+",
            "io\\.netty\\..+",
            "com\\.nimbusds(\\..+)?",
            "com\\.microsoft\\.azure\\..+",
            "com\\.microsoft\\.spring\\..+",
            "javax\\.jms(\\..+)?",
            "javax\\.servlet(\\..+)?",
            "io\\.micrometer(\\..+)?",
            "com\\.azure\\.data\\.cosmos(\\..+)?",
            "com\\.azure\\.spring\\.data\\.cosmos\\..+",
            "org\\.springframework\\.data\\..+",
            "org\\.apache\\.avro\\..+"
          ]
        }
      }
    }
  },
  {
    "extension": "revapi.semver.ignore",
    "configuration": {
      "enabled": true,
      "versionIncreaseAllows": {
        "major": "breaking",
        "minor": "nonBreaking",
        "patch": "equivalent"
      },
      "passThroughDifferences": [ "java.class.nonPublicPartOfAPI" ]
    }
  },
  {
    "extension": "revapi.ignore",
    "configuration": [
      {
        "regex": true,
        "code": "java\\.missing\\.(oldClass|newClass)",
        "new": "missing\\-class com\\.fasterxml\\.jackson\\.databind\\.ObjectMapper",
        "exampleUseChainInNewApi": ".*com\\.azure\\.core\\.util\\.serializer\\.JacksonAdapter.*",
        "justification": "We allow this in com.azure.core.util.serializer.JacksonAdapter."
      },
      {
        "regex": true,
        "code": "java\\.missing\\.(oldSuperType|newSuperType)",
        "new": "class com\\.azure\\.core\\.http\\.rest\\.((PagedFlux<T extends java\\.lang\\.Object>)|(PagedFluxBase<T extends java\\.lang\\.Object.*>)).*",
        "justification": "azure.core 1.3.0 will introduce a new base type for GAed PagedFlux. Since the base type is not in azure.core <= 1.2.0, revapi is reporting it. This entry should be removed after 1.3.0 release."
      },
      {
        "code": "java.method.addedToInterface",
        "new": "method com.azure.core.util.IterableStream<T> com.azure.core.util.paging.ContinuablePage<C, T>::getElements() @ com.azure.core.http.rest.PagedResponse<T>",
        "justification": "Exposed through revapi transitive dependency checking. azure.core 1.3.0 will introduce a new base type for GAed PagedFlux. Since the base type is not in azure.core <= 1.2.0, revapi is reporting it. This entry should be removed after 1.3.0 release."
      },
      {
        "code": "java.method.parameterTypeChanged",
        "new": "parameter java.lang.Iterable<P> com.azure.core.util.paging.ContinuablePagedIterable<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>::iterableByPage(===int===) @ com.azure.core.http.rest.PagedIterableBase<T, P extends com.azure.core.http.rest.PagedResponse<T extends java.lang.Object>>",
        "justification": "A new overload which shares the same number of parameters was introduced, confusing revapi. azure.core 1.3.0 will introduce a new base type for GAed PagedIterable. Since the base type is not in azure.core <= 1.2.0, revapi is reporting it. This entry should be removed after 1.3.0 release."
      },
      {
        "code": "java.method.parameterTypeChanged",
        "new": "parameter java.lang.Iterable<P> com.azure.core.util.paging.ContinuablePagedIterable<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>::iterableByPage(===int===) @ com.azure.core.http.rest.PagedIterable<T>",
        "justification": "A new overload which shares the same number of parameters was introduced, confusing revapi. azure.core 1.3.0 will introduce a new base type for GAed PagedIterable. Since the base type is not in azure.core <= 1.2.0, revapi is reporting it. This entry should be removed after 1.3.0 release."
      },
      {
        "code": "java.method.parameterTypeChanged",
        "new": "parameter java.util.stream.Stream<P> com.azure.core.util.paging.ContinuablePagedIterable<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>::streamByPage(===int===) @ com.azure.core.http.rest.PagedIterableBase<T, P extends com.azure.core.http.rest.PagedResponse<T extends java.lang.Object>>",
        "justification": "A new overload which shares the same number of parameters was introduced, confusing revapi. azure.core 1.3.0 will introduce a new base type for GAed PagedIterable. Since the base type is not in azure.core <= 1.2.0, revapi is reporting it. This entry should be removed after 1.3.0 release."
      },
      {
        "code": "java.method.parameterTypeChanged",
        "new": "parameter java.util.stream.Stream<P> com.azure.core.util.paging.ContinuablePagedIterable<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>::streamByPage(===int===) @ com.azure.core.http.rest.PagedIterable<T>",
        "justification": "A new overload which shares the same number of parameters was introduced, confusing revapi. azure.core 1.3.0 will introduce a new base type for GAed PagedIterable. Since the base type is not in azure.core <= 1.2.0, revapi is reporting it. This entry should be removed after 1.3.0 release."
      },
      {
        "regex": true,
        "code": "java\\.class\\.(noLongerInheritsFromClass|nonFinalClassInheritsFromNewClass)",
        "class": "com.azure.identity.SharedTokenCacheCredentialBuilder",
        "justification": "SharedTokenCacheCredentialBuilder now inherites AadCredentialBuilderBase instead of CredentialBuilderBase thus being reported. However, AadCredentialBuilderBase also extends CredentialBuilderBase so it's not a breaking change."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(interface|enum|class) reactor\\..*",
        "justification": "We allow reactor classes in our external APIs. This also occurs because we check transitive dependencies, so it checks reactor jars."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(class|interface|enum) com\\.azure\\.communication\\.common\\..*",
        "justification": "azure-communication-common classes are allowed to be exposed."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(interface|class|enum) com\\.azure\\.core.*",
        "justification": "azure-core classes are allowed to be exposed by dependencies using them."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "interface org\\.reactivestreams\\.(Publisher|Subscriber|Subscription).*",
        "justification": "These classes exposed are publisher, subscriber, and Subscription."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(class|interface|enum) com\\.azure\\.storage\\..*",
        "justification": "azure-storage-common and storage blob classes are allowed to be exposed."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(class|interface|enum) com\\.azure\\.resourcemanager\\..*",
        "justification": "resourcemanager classes are allowed to be exposed."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(class|interface|enum) com\\.azure\\.security\\.keyvault\\..*",
        "justification": "keyvault classes are allowed to be exposed."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(class|interface|enum) com\\.azure\\.perf\\.test\\.core\\..*",
        "justification": "perf-test classes are allowed to be exposed."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(interface|class|enum) com\\.azure\\.cosmos.*",
        "justification": "azure-cosmos classes are allowed to be exposed by dependencies using them."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method reactor.core.publisher.Flux<T> reactor.core.publisher.Flux<T>::retryWhen(reactor.util.retry.Retry) @ com.azure.core.http.rest.PagedFlux<T>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method <V> reactor.core.publisher.Flux<V> reactor.core.publisher.Flux<T>::switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends V>>, boolean) @ com.azure.core.http.rest.PagedFlux<T>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method reactor.core.publisher.Flux<T> reactor.core.publisher.Flux<T>::retryWhen(reactor.util.retry.Retry) @ com.azure.core.http.rest.PagedFluxBase<T, P extends com.azure.core.http.rest.PagedResponse<T extends java.lang.Object>>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method <V> reactor.core.publisher.Flux<V> reactor.core.publisher.Flux<T>::switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends V>>, boolean) @ com.azure.core.http.rest.PagedFluxBase<T, P extends com.azure.core.http.rest.PagedResponse<T extends java.lang.Object>>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method reactor.core.publisher.Flux<T> reactor.core.publisher.Flux<T>::retryWhen(reactor.util.retry.Retry) @ com.azure.core.util.paging.ContinuablePagedFlux<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method <V> reactor.core.publisher.Flux<V> reactor.core.publisher.Flux<T>::switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends V>>, boolean) @ com.azure.core.util.paging.ContinuablePagedFlux<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method reactor.core.publisher.Flux<T> reactor.core.publisher.Flux<T>::retryWhen(reactor.util.retry.Retry) @ com.azure.core.util.paging.ContinuablePagedFluxCore<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "code": "java.method.finalMethodAddedToNonFinalClass",
        "new": "method <V> reactor.core.publisher.Flux<V> reactor.core.publisher.Flux<T>::switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends V>>, boolean) @ com.azure.core.util.paging.ContinuablePagedFluxCore<C, T, P extends com.azure.core.util.paging.ContinuablePage<C extends java.lang.Object, T extends java.lang.Object>>",
        "justification": "Reactor added new final APIs to Flux."
      },
      {
        "regex": true,
        "code": "java\\.annotation\\.added",
        "new": "^(method|parameter)\\s.+?\\scom\\.azure\\.search\\.documents(\\.indexes)?\\.models\\.(FacetResult|SearchServiceStatistics)::.+$",
        "justification": "Annotations better indicate which parameters are required when handling service requests and responses."
      },
      {
        "regex": true,
        "code": "java\\.annotation\\.attributeAdded",
        "new": "^parameter\\s.+?\\scom\\.azure\\.search\\.documents(\\.indexes)?\\.models\\.(AnalyzedTokenInfo|CorsOptions|FieldMapping|IndexerExecutionResult|SearchIndexerStatus|SearchServiceCounters|TextWeights|AutocompleteResult)::<init>\\(.+\\)$",
        "justification": "Annotations attributes better indicate which parameters are required when handling service requests and responses."
      },

      {
        "code": "java.class.externalClassExposedInAPI",
        "new": "class com.azure.data.schemaregistry.SchemaRegistryAsyncClient",
        "justification": "This is a preview release"
      },
      {
        "code": "java.class.externalClassExposedInAPI",
        "new": "class com.azure.data.schemaregistry.models.SchemaProperties",
        "justification": "This is a preview release"
      },
      {
        "code": "java.class.externalClassExposedInAPI",
        "new": "class com.azure.data.schemaregistry.models.SerializationType",
        "justification": "This is a preview release"
      },
      {
        "code": "java.method.defaultMethodAddedToInterface",
        "new": "method com.azure.core.http.HttpPipelinePosition com.azure.core.http.policy.HttpPipelinePolicy::getPipelinePosition()",
        "justification": "Default interface method"
      },
      {
        "code": "java.method.parameterTypeParameterChanged",
        "old": "parameter void com.azure.core.amqp.models.AmqpDataBody::<init>(===java.lang.Iterable<com.azure.core.amqp.models.BinaryData>===)",
        "new": "parameter void com.azure.core.amqp.models.AmqpDataBody::<init>(===java.lang.Iterable<byte[]>===)",
        "justification": "Remove BinaryData to perform GA release."
      },
      {
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method com.azure.core.util.IterableStream<com.azure.core.amqp.models.BinaryData> com.azure.core.amqp.models.AmqpDataBody::getData()",
        "new": "method com.azure.core.util.IterableStream<byte[]> com.azure.core.amqp.models.AmqpDataBody::getData()",
        "justification": "Remove BinaryData to perform GA release."
      },
      {
        "code": "java.class.removed",
        "old": "class com.azure.core.amqp.models.BinaryData",
        "justification": "Remove BinaryData to perform GA release."
      },
      {
        "regex": true,
        "code": "java\\.class\\.externalClassExposedInAPI",
        "new": "(interface|class|enum) io\\.opentelemetry.*",
        "justification": "Azure Monitor Exporter is allowed to use OpenTelemetry types in public APIs as it implements interfaces defined by OpenTelemetry"
      }
    ]
  }
]
