<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">

  <module name="SuppressionFilter">
    <property name="file" value="${samedir}/checkstyle-suppressions.xml"/>
    <property name="optional" value="true"/>
  </module>

  <module name="Header">
    <property name="header"
              value="// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License."/>
    <property name="fileExtensions" value="java"/>
  </module>

  <module name="FileTabCharacter">
    <!-- Checks that there are no tab characters in the file. -->
  </module>

  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf"/>
  </module>

  <module name="RegexpSingleline">
    <!-- Checks that FIXME is not used in comments.  TODO is preferred. -->
    <property name="format" value="((//.*)|(\*.*))FIXME"/>
    <property name="message" value='TODO is preferred to FIXME.  e.g. "TODO(johndoe): Refactor when v2 is released."'/>
  </module>

  <module name="RegexpSingleline">
    <!-- Checks that TODOs are named.  (Actually, just that they are followed by an open paren. -->
    <property name="format" value="((//.*)|(\*.*))TODO [^(]"/>
    <property name="message" value='All TODOs should be named.  e.g. "TODO (johndoe): Refactor when v2 is released."'/>
  </module>

  <!-- All Java AST specific tests live under TreeWalker module. -->
  <module name="TreeWalker">

    <!-- IMPORT CHECKS -->
    <!-- See http://checkstyle.sf.net/config_import.html -->
    <module name="AvoidStarImport"/>
    <module name="IllegalImport">
      <property name="regexp" value="true"/>
      <property name="illegalPkgs" value="^(com\.)?sun\.\w*, ^io\.opencensus"/>
    </module>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <!-- NAMING CHECKS -->
    <!-- See http://checkstyle.sf.net/config_naming.html -->
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName">
      <!-- Use default MethodName but block the use of 'builder' as method name -->
      <property name="format" value="(?=^[a-z][a-zA-Z0-9]*$)(?!^(?i)builder$)"/>
      <!-- allow the name on private methods  -->
      <property name="applyToPrivate" value="false"/>
    </module>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>

    <module name="TypeNameCheck">
      <!-- Validates static, final fields against the
      expression "^[A-Z][a-zA-Z0-9]*$". -->
      <metadata name="altname" value="TypeName"/>
      <property name="severity" value="warning"/>
    </module>

    <module name="ConstantNameCheck">
      <!-- Validates non-private, static, final fields against the supplied
      public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
      <metadata name="altname" value="ConstantName"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="false"/>
      <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
      <message key="name.invalidPattern"
               value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
      <property name="severity" value="warning"/>
    </module>

    <module name="StaticVariableNameCheck">
      <!-- Validates static, non-final fields against the supplied
      expression "^[a-z][a-zA-Z0-9]*_?$". -->
      <metadata name="altname" value="StaticVariableName"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
      <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
      <property name="severity" value="warning"/>
    </module>

    <module name="MemberNameCheck">
      <!-- Validates non-static members against the supplied expression. -->
      <metadata name="altname" value="MemberName"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
      <property name="severity" value="warning"/>
    </module>

    <module name="MethodNameCheck">
      <!-- Validates identifiers for method names. -->
      <metadata name="altname" value="MethodName"/>
      <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
      <property name="severity" value="warning"/>
    </module>

    <module name="ParameterName">
      <!-- Validates identifiers for method parameters against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="warning"/>
    </module>

    <module name="LocalFinalVariableName">
      <!-- Validates identifiers for local final variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="warning"/>
    </module>

    <module name="LocalVariableName">
      <!-- Validates identifiers for local variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="warning"/>
    </module>

    <!-- LENGTH and CODING CHECKS -->
    <module name="LeftCurly">
      <!-- Checks for placement of the left curly brace ('{'). -->
      <property name="severity" value="warning"/>
    </module>

    <module name="RightCurly">
      <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
      the same line. e.g., the following example is fine:
      <pre>
        if {
          ...
        } else
      </pre>
      -->
      <!-- This next example is not fine:
      <pre>
        if {
          ...
        }
        else
      </pre>
      -->
      <property name="option" value="same"/>
      <property name="severity" value="warning"/>
    </module>

    <!-- Checks for braces around if and else blocks -->
    <module name="NeedBraces">
      <property name="severity" value="warning"/>
      <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
    </module>

    <module name="UpperEll">
      <!-- Checks that long constants are defined with an upper ell.-->
      <property name="severity" value="error"/>
    </module>

    <module name="FallThrough">
      <!-- Warn about falling through to the next case statement.  Similar to
      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
      on the last non-blank line preceding the fallen-into case contains 'fall through' (or
      some other variants which we don't publicized to promote consistency).
      -->
      <property name="reliefPattern"
                value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
      <property name="severity" value="error"/>
    </module>


    <!-- WHITESPACE CHECKS -->
    <module name="Indentation">
      <property name="basicOffset" value="4"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="4"/>
      <property name="throwsIndent" value="4"/>
      <property name="lineWrappingIndentation" value="4"/>
      <property name="arrayInitIndent" value="4"/>
    </module>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="EmptyForIteratorPad"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="INC,DEC,UNARY_MINUS,UNARY_PLUS,BNOT,LNOT,DOT,ARRAY_DECLARATOR,INDEX_OP"/>
    </module>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>

    <!-- Modifier Checks                                    -->
    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See http://checkstyle.sf.net/config_blocks.html -->
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock"/>

    <!-- Checks for common coding problems               -->
    <!-- See http://checkstyle.sf.net/config_coding.html -->
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="IllegalInstantiation"/>
    <module name="InnerAssignment"/>

    <!-- Updated on 03/17/2014: -->
    <!-- Added ignore. Code is generated so magic numbers are not a largish issue. -->
    <!-- <module name="MagicNumber" /> -->
    <module name="MissingSwitchDefault"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>

    <!-- Checks for class design                         -->
    <!-- See http://checkstyle.sf.net/config_design.html -->
    <module name="FinalClass"/>
    <module name="InterfaceIsType"/>
    <module name="VisibilityModifier">
      <property name="protectedAllowed" value="true"/>
      <property name="packageAllowed" value="true"/>
    </module>


    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="ArrayTypeStyle"/>

    <!--Checks for package naming and name length limit. Package names have to starting with either-->
    <!--'com.microsoft.azure' or 'com.azure', and then the extension names should only contains-->
    <!--characters 'a' to 'z' with no more than 20 characters and  the package names should be no-->
    <!--more than 80 characters.-->
    <module name="PackageName">
      <property name="format" value="^(?=.{9,80}$)((com.microsoft.azure|com.azure)(\.[a-z]{1,20})*)+$"/>
    </module>

    <!-- Javadoc checks                                   -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <module name="JavadocMethod">
      <property name="scope" value="protected"/>
    </module>

    <!-- Verifies that all throws in the public API have JavaDocs explaining why and when they are thrown. -->
    <!-- The check verifies both checked (in the throws clause) and unchecked throws -->
    <module name="com.azure.tools.checkstyle.checks.JavadocThrowsChecks"/>

    <!-- CUSTOM CHECKS -->
    <!-- Verifies that subclasses of ServiceClient meet a set of guidelines.
    1) They cannot have public or protected constructors
    2) They must implement a public static method named builder
    -->
    <module name="com.azure.tools.checkstyle.checks.ServiceClientChecks"/>

    <!--CUSTOM CHECKS-->
    <!--Checks for the public API that should
    1) not return classes in the implementation package
    2) no class of implementation package as method's parameters -->
    <module name="com.azure.tools.checkstyle.checks.NoImplInPublicAPI"/>

    <!--CUSTOM CHECKS-->
    <!-- Verify the classes with annotation @ServiceClient should have following rules:
    1) No public or protected constructors
    2) No public static method named 'builder'
    3) Since these classes are supposed to be immutable, all fields in the service client classes should be final -->
    <module name="com.azure.tools.checkstyle.checks.ServiceClientInstantiationCheck"/>

    <!--CUSTOM CHECKS-->
    <!-- Checks for no external dependency exposed in the public API.
    We should only return types, and accept argument types, that are from the com.azure namespace.
    All other types should have suppression added if required. -->
    <module name="com.azure.tools.checkstyle.checks.ExternalDependencyExposedCheck"/>

    <!--CUSTOM CHECKS-->
    <!-- The @ServiceClientBuilder class should have the following rules:
    1) All service client builder should be named <ServiceName>ClientBuilder and annotated with @ServiceClientBuilder.
    2) Has a method 'buildClient()' to build a synchronous client,
    3) Has a method 'buildAsyncClient()' to build an asynchronous client -->
    <module name="com.azure.tools.checkstyle.checks.ServiceClientBuilderCheck"/>

    <!--CUSTOM CHECKS-->
    <!-- The @ServiceInterface class should have the following rules:
    1) The annotation property 'name' should be non-empty
    2) The length of value of property 'name' should be less than 20 characters and without space -->
    <module name="com.azure.tools.checkstyle.checks.ServiceInterfaceCheck"/>

    <!--CUSTOM CHECKS-->
    <!-- Must use 'logger.logAndThrow' but not directly calling 'throw exception' -->
<!--    <module name="com.azure.tools.checkstyle.checks.ThrownClientLoggerCheck"/>-->
  </module>
</module>
