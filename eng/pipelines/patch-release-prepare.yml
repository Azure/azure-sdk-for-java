# This script is used to prepare the patch release by generating patches for automatic releases.
# It should be triggered manually by the release driver. Release driver should ensure that the CI pipeline is green
# before manually trigger the patch release pipeline, 'java - patch-release'.
# The release driver should also ensure that the patches are generated successfully and the PR is created successfully.
#
# What this script does:
#   - Checks out a new release branch, 'release/patch/$currentDate'
#   - Runs the script to generate patches for automatic releases
#   - Create a PR with the patches prepared

trigger: none
pr: none

parameters:
  PROwner: azure-sdk
  RepoOwner: Azure
  RepoName: $(Build.Repository.Name)
  WorkingDirectory: $(System.DefaultWorkingDirectory)
  ScriptDirectory: eng/common/scripts
  SkipCheckingForChanges: false

stages:
  - stage: PreparePatchRelease
    displayName: Prepare Patch Release
    jobs:
      - job: PreparePatchRelease
        displayName: 'Prepare Patch Release'
        timeoutInMinutes: 30
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          image: azsdk-pool-mms-ubuntu-2004-1espt
          os: linux
        steps:
          # Checkout a new release branch
          - pwsh: |
              $currentDate = Get-Date -Format "yyyyMMdd"
              Write-Host "##vso[task.setvariable variable=PatchDate]$currentDate"
              $branchName = "release/patch/$currentDate"
              Write-Host "git checkout -b $branchName"
              git checkout -b $branchName
              Write-Host "##vso[task.setvariable variable=BaseBranchName]$branchName"
            workingDirectory: $(Build.SourcesDirectory)
            displayName: 'Create release branch'
          - template: /eng/common/pipelines/templates/steps/git-push-changes.yml
            parameters:
              BaseRepoBranch: $(BaseBranchName)
              BaseRepoOwner: ${{ parameters.PROwner }}
              TargetRepoOwner: ${{ parameters.RepoOwner }}
              TargetRepoName: ${{ parameters.RepoName }}
              WorkingDirectory: ${{ parameters.WorkingDirectory }}
              ScriptDirectory: ${{ parameters.ScriptDirectory }}
              SkipCheckingForChanges: ${{ parameters.SkipCheckingForChanges }}
            displayName: 'Push release branch $(BaseBranchName)'
            # Run the script to generate patches for automatic releases
          - task: PowerShell@2
            displayName: 'Run Generate-Patches-For-Automatic-Releases script'
            inputs:
              pwsh: true
              filePath: eng/scripts/Generate-Patches-For-Automatic-Releases.ps1
              arguments: >
                -SourcesDirectory .
                -PackagesYmlPath eng/pipelines/patch-release.yml
          # Create a PR with the patches prepared
          - template: /eng/common/pipelines/templates/steps/create-pull-request.yml
            parameters:
              BaseBranchName: $(BaseBranchName)
              PRBranchName: prepare-patch-release-$(PatchDate)-$(Build.BuildId)
              CommitMsg: "Patch release preparation $(PatchDate)"
              PRTitle: "Prepare patch release $(PatchDate)"
