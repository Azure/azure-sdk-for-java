trigger:
- master
resources:
  repositories:
  - repository: azure-sdk-tools
    type: github
    name: Azure/azure-sdk-tools
    endpoint: azure
variables:
  DefaultOptions: --batch-mode --fail-at-end -Dmaven.wagon.http.pool=false --settings eng/settings.xml
  LoggingOptions: -Dorg.slf4j.simpleLogger.defaultLogLevel=error -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
jobs:
- job: Build
  pool:
    vmImage: ubuntu-18.04
  strategy:
    matrix:
      Client Libraries:
        ArtifactName: packages
        JavaVersion: "1.11"
  steps:
  - script: |
      echo "##vso[build.addbuildtag]Scheduled"
    displayName: Tag scheduled builds
    condition: and(eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))
  - task: Maven@3
    displayName: Build and Package
    inputs:
      mavenPomFile: $(pomFile)
      goals: package
      options: $(DefaultOptions) "-DpackageOutputDirectory=$(Build.ArtifactStagingDirectory)" -DskipTests -Dinclude-template
      mavenOptions: $(LoggingOptions)
      javaHomeOption: JDKVersion
      jdkVersionOption: $(JavaVersion)
      jdkArchitectureOption: x64
      publishJUnitResults: false
  - task: PublishPipelineArtifact@0
    displayName: Publish $(ArtifactName) artifact
    inputs:
      artifactName: $(ArtifactName)
      targetPath: $(Build.ArtifactStagingDirectory)
- job: Analyze
  pool:
    vmImage: ubuntu-18.04
  steps:
  - task: UsePythonVersion@0
    displayName: Use Python 3.6
    inputs:
      versionSpec: "3.6"
  - script: |
      pip install setuptools wheel
      pip install doc-warden
      ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
    displayName: Verify Readmes
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Component Detection
  - task: Maven@3
    displayName: Install reporting tools
    inputs:
      mavenPomFile: eng/code-quality-reports/pom.xml
      options: --batch-mode
      mavenOptions: $(LoggingOptions)
      javaHomeOption: JDKVersion
      jdkVersionOption: "1.11"
      jdkArchitectureOption: x64
      publishJUnitResults: false
      goals: install
  - task: Maven@3
    displayName: Install Module and Run SpotBugs, Checkstyle, and Javadoc
    inputs:
      mavenPomFile: $(pomFile)
      options: --no-transfer-progress -DskipTests -Dgpg.skip -Dverify-readme
      mavenOptions: ""
      javaHomeOption: JDKVersion
      jdkVersionOption: "1.11"
      jdkArchitectureOption: x64
      publishJUnitResults: false
      goals: install
  - task: Maven@3
    displayName: Generate Maven project site, including JavaDocs, SpotBugs, and CheckStyle reports
    condition: ne(variables['Build.Reason'], 'PullRequest')
    inputs:
      mavenPomFile: pom.client.xml
      options: $(DefaultOptions) -DskipTests -Dgpg.skip
      mavenOptions: $(LoggingOptions)
      javaHomeOption: JDKVersion
      jdkVersionOption: "1.11"
      jdkArchitectureOption: x64
      publishJUnitResults: false
      goals: site:site site:stage
  - script: |
      git clone https://github.com/JonathanGiles/DependencyChecker.git
      mkdir input && cp eng/DependencyChecker/client_dependencies.json input/dependencies.json
    displayName: Download dependency checker
  - task: Maven@3
    displayName: Install azure-sdk-parent
    inputs:
      mavenPomFile: parent/pom.xml
      options: $(DefaultOptions) -DskipTests -Dgpg.skip
      mavenOptions: $(LoggingOptions)
      javaHomeOption: JDKVersion
      jdkVersionOption: "1.11"
      jdkArchitectureOption: x64
      publishJUnitResults: false
      goals: install
  - task: Maven@3
    displayName: Analyze dependencies
    inputs:
      mavenPomFile: DependencyChecker/core/pom.xml
      options: -Dexec.args="-showall -dependencymanagement"
      mavenOptions: $(LoggingOptions)
      javaHomeOption: JDKVersion
      jdkVersionOption: "1.11"
      jdkArchitectureOption: x64
      publishJUnitResults: false
      goals: clean package exec:java
  - pwsh: |
      copy -r target/staging $(Build.ArtifactStagingDirectory)
      copy eng/code-quality-reports/src/main/resources/index.html $(Build.ArtifactStagingDirectory)
      copy output/dependencies.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
    displayName: Copy reports to artifact staging
    condition: ne(variables['Build.Reason'], 'PullRequest')
  - task: PublishPipelineArtifact@0
    condition: succeededOrFailed()
    displayName: Publish reports artifact
    inputs:
      artifactName: reports
      targetPath: $(Build.ArtifactStagingDirectory)
- job: Test
  strategy:
    matrix:
      Linux - Java 8:
        OSVmImage: ubuntu-18.04
        JavaVersion: "1.8"
      macOS - Java 8:
        OSVmImage: macOS-10.15
        JavaVersion: "1.8"
      Windows - Java 8:
        OSVmImage: windows-2019
        JavaVersion: "1.8"
      Linux - Java 11:
        OSVmImage: ubuntu-18.04
        JavaVersion: "1.11"
      macOS - Java 11:
        OSVmImage: macOS-10.15
        JavaVersion: "1.11"
      Windows - Java 11:
        OSVmImage: windows-2019
        JavaVersion: "1.11"
  pool:
    vmImage: $(OSVmImage)
  steps:
  - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
  - task: Maven@3
    displayName: Compile all code and run tests
    inputs:
      mavenPomFile: $(pomFile)
      options: $(DefaultOptions) -Dinclude-non-shipping-modules
      mavenOptions: -Xmx3072m $(LoggingOptions)
      javaHomeOption: JDKVersion
      jdkVersionOption: $(JavaVersion)
      jdkArchitectureOption: x64
      publishJUnitResults: false
      goals: test
  - task: Maven@3
    displayName: Generate aggregate code coverage report
    condition: and(eq(variables['OsName'], 'Linux'), eq(variables['JavaVersion'], '1.11'), contains(variables['pomFile'], 'pom.client.xml'), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      mavenPomFile: $(pomFile)
      options: $(DefaultOptions) -Dinclude-non-shipping-modules -Dgpg.skip -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true
      mavenOptions: -Xmx3072m $(LoggingOptions)
      javaHomeOption: JDKVersion
      jdkVersionOption: $(JavaVersion)
      jdkArchitectureOption: x64
      publishJUnitResults: false
      goals: verify
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      mergeTestResults: true
      testRunTitle: $(OSName) on Java $(JavaVersion)
  - task: PublishCodeCoverageResults@1
    condition: and(eq(variables['OsName'], 'Linux'), eq(variables['JavaVersion'], '1.11'), contains(variables['pomFile'], 'pom.client.xml'), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      codeCoverageTool: JaCoCo
      summaryFileLocation: eng/jacoco-test-coverage/target/site/test-coverage/jacoco.xml
      reportDirectory: eng/jacoco-test-coverage/target/site/test-coverage/
      failIfCoverageEmpty: true
  - task: PublishPipelineArtifact@0
    displayName: Publish coverage artifact
    condition: and(eq(variables['OsName'], 'Linux'), eq(variables['JavaVersion'], '1.11'), contains(variables['pomFile'], 'pom.client.xml'), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      artifactName: coverage
      targetPath: eng/jacoco-test-coverage/target/site/
