trigger: none
pr: none


jobs:
  - job: Generate
    timeoutInMinutes: 180
    variables:
      - template: templates/variables/globals.yml
      - name: ProjectList
        value: com.azure:azure-data-appconfiguration,com.azure:azure-core,com.azure:azure-core-amqp,com.azure:azure-core-http-jdk-httpclient,com.azure:azure-core-http-netty,com.azure:azure-core-http-okhttp,com.azure:azure-core-test,com.azure:azure-core-tracing-opentelemetry,com.azure:azure-cosmos,com.azure:azure-messaging-eventhubs,com.azure:azure-messaging-eventhubs-checkpointstore-blob,com.azure:azure-identity,com.azure:azure-security-keyvault-certificates,com.azure:azure-security-keyvault-keys,com.azure:azure-security-keyvault-secrets,com.azure:azure-storage-blob,com.azure:azure-storage-blob-cryptography,com.azure:azure-storage-blob-nio,com.azure:azure-storage-common,com.azure:azure-storage-file-datalake,com.azure:azure-storage-file-share,com.azure:azure-storage-queue,com.azure:azure-sdk-template,com.azure:azure-ai-textanalytics
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - task: Maven@3
      displayName: 'Generate Reports'
      inputs:
        mavenPomFile: pom.xml
        options: '$(DefaultOptions) -Dinclude-non-shipping-modules -Ddependency-checker -Dgpg.skip -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true -Drevapi.skip=true -pl com.azure:jacoco-test-coverage -am'
        mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        goals: 'clean verify'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        mergeTestResults: true
        testRunTitle: 'Linux on Java 1.11'

    # Azure DevOps only seems to respect the last code coverage result published, so only do this for Linux + Java LTS.
    # Code coverage reporting is setup only for Track 2 modules.
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: JaCoCo
        summaryFileLocation: eng/jacoco-test-coverage/target/site/test-coverage/jacoco.xml
        reportDirectory: eng/jacoco-test-coverage/target/site/test-coverage/
        failIfCoverageEmpty: true

    # Publish code coverage to an artifact so it can be uploaded to the Maven site.
    # Do this for track 2 modules only. Code coverage from previous step is only published for Linux + Java LTS.
    - task: PublishPipelineArtifact@0
      displayName: 'Publish coverage artifact'
      inputs:
        artifactName: coverage
        targetPath: eng/jacoco-test-coverage/target/site/

    - pwsh: |
        $(Build.SourcesDirectory)/eng/DependencyGraph/gen-dep-graph-data.ps1
      displayName: Generate Interdependency Report Data

    - pwsh: |
        copy -r target/staging $(Build.ArtifactStagingDirectory)
        copy target/dependency-whitelist.json (Join-Path $(Build.ArtifactStagingDirectory) "staging")
        copy eng/code-quality-reports/src/main/resources/index.html $(Build.ArtifactStagingDirectory)
        copy output/pom.client.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
        copy eng/common/InterdependencyGraph.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
        copy eng/common/dependency-whitelist.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
        copy data.js (Join-Path $(Build.ArtifactStagingDirectory) "staging")
      displayName: 'Copy reports to artifact staging'

    - publish: $(Build.ArtifactStagingDirectory)
      condition: succeededOrFailed()
      displayName: 'Publish Report Artifacts'
      artifact: reports
