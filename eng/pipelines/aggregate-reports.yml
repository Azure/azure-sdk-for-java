trigger: none

pr:
  branches:
    include:
      - master
  paths:
    include:
      - eng/pipelines/aggregate-reports.yml

jobs:
  - job: Generate
    timeoutInMinutes: 180
    variables:
      - template: templates/variables/globals.yml
    pool:
      vmImage: 'ubuntu-18.04'
    steps:

    - template: ../common/pipelines/templates/steps/verify-links.yml
      parameters:
        Directory: ""

    # We `install` the code quality reports tooling into our local m2 cache separately from building the Maven project
    # reports. This means it is available as part of that, but also so that this is not documented in the project report.
    - template: ./templates/steps/install-reporting-tools.yml
      parameters:
        Options: --batch-mode
        MavenOptions: $(MemoryOptions) $(LoggingOptions)

    - task: Maven@3
      displayName: 'Install azure-client-sdk-parent'
      inputs:
        mavenPomFile: sdk/parents/azure-client-sdk-parent/pom.xml
        goals: install
        options: '$(DefaultOptions)'
        mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: $(JavaBuildVersion)
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
      condition: succeeded()

    - task: PowerShell@2
      # The root pom.xml contains both track 1, data, and track 2, client libraries.
      # This task calls a powershell script that will go through all of the pom files
      # in the repository looking, specifically, for ones whose parent is
      # azure-client-sdk-parent and create a temporary pom file with just those libraries.
      # Note: It excludes items within the /eng directory otherwise we'd be picking up
      # jacoco and spotbugs which are unnecessary for the Aggregate Reports run.
      displayName: 'Generate Aggregate Pom for Aggregate Reports'
      inputs:
        pwsh: true
        workingDirectory: $(Agent.BuildDirectory)
        filePath: eng/scripts/Generate-Client-Aggregate-Pom.ps1
      condition: succeeded()

    - task: Maven@3
      displayName: 'Build for Aggregate Reports run'
      inputs:
        mavenPomFile: ClientAggregatePom.xml
        goals: 'install'
        # Build and install every track 2, client, library. The purpose is to have all of
        # the libraries installed on the machine so we can simply run tests with the -amd
        # switch and we can remove the SNAFU of dependencies that bloated the ci.yml files'
        # AdditionalModules because we ended up having to list every transitive azure client
        # dependency. Note: The -T 1C says spin up a build thread per core. Since we're building
        # all of the track 2, client, libraries (which is now over 100) this effectively cuts the
        # the build time in half.
        options: '$(DefaultOptions) -T 1C -DskipTests -Dgpg.skip -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true -Drevapi.skip=true -Djacoco.skip=true'
        mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: $(JavaBuildVersion)
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
      condition: succeeded()

    - task: Maven@3
      displayName: 'Generate Jacoco Code Coverage'
      inputs:
        mavenPomFile: pom.xml
        options: '$(DefaultOptions) -pl com.azure:jacoco-test-coverage -am'
        mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: $(JavaBuildVersion)
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        goals: 'jacoco:prepare-agent jacoco:instrument surefire:test jacoco:restore-instrumented-classes jacoco:report'

    - task: Maven@3
      displayName: 'Create Jacoco Aggregate Report'
      inputs:
        mavenPomFile: eng/jacoco-test-coverage/pom.xml
        options: '$(DefaultOptions)'
        mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: $(JavaBuildVersion)
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        goals: 'jacoco:report-aggregate'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        mergeTestResults: true
        testRunTitle: 'Linux on Java $(JavaBuildVersion)'

    # Azure DevOps only seems to respect the last code coverage result published, so only do this for Linux + Java LTS.
    # Code coverage reporting is setup only for Track 2 modules.
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: JaCoCo
        summaryFileLocation: eng/jacoco-test-coverage/target/site/test-coverage/jacoco.xml
        reportDirectory: eng/jacoco-test-coverage/target/site/test-coverage/
        failIfCoverageEmpty: true

    - task: Maven@3
      displayName: 'Generate site'
      inputs:
        mavenPomFile: ClientAggregatePom.xml
        options: '$(DefaultOptions) -DskipTests'
        mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: $(JavaBuildVersion)
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        goals: 'site:site site:stage'

    # Publish code coverage to an artifact so it can be uploaded to the Maven site.
    # Do this for track 2 modules only. Code coverage from previous step is only published for Linux + Java LTS.
    - task: PublishPipelineArtifact@0
      displayName: 'Publish coverage artifact'
      inputs:
        artifactName: coverage
        targetPath: eng/jacoco-test-coverage/target/site/

    - pwsh: |
        $(Build.SourcesDirectory)/eng/DependencyGraph/gen-dep-graph-data.ps1
      displayName: Generate Interdependency Report Data

    - pwsh: |
        Copy-Item target/staging $(Build.ArtifactStagingDirectory) -Recurse
        Copy-Item eng/jacoco-test-coverage/target/staging $(Build.ArtifactStagingDirectory) -Recurse
        Copy-Item eng/jacoco-test-coverage/target/dependency-allowlist.json $(Build.ArtifactStagingDirectory)/staging
        Copy-Item eng/code-quality-reports/src/main/resources/index.html $(Build.ArtifactStagingDirectory)
        Copy-Item eng/code-quality-reports/src/main/resources/dependency-allowlist.html $(Build.ArtifactStagingDirectory)/staging

        # What is this?
        # copy output/pom.client.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")

        Copy-Item eng/common/InterdependencyGraph.html $(Build.ArtifactStagingDirectory)/staging
        Copy-Item data.js $(Build.ArtifactStagingDirectory)/staging
      displayName: 'Copy reports to artifact staging'

    - publish: $(Build.ArtifactStagingDirectory)
      condition: succeededOrFailed()
      displayName: 'Publish Report Artifacts'
      artifact: reports

    - task: PowerShell@2
      displayName: "Verify Repository Resource Refs"
      inputs:
        pwsh: true
        workingDirectory: $(Build.SourcesDirectory)
        filePath: eng/common/scripts/Verify-Resource-Ref.ps1
