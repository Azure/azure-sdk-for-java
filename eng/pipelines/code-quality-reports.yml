jobs:
  - job: 'Linting'

    timeoutInMinutes: 120

    variables:
      - template: /eng/pipelines/templates/variables/globals.yml

    pool:
      name: azsdk-pool-mms-ubuntu-2004-general

    steps:
      # Skip sparse checkout for the `azure-sdk-for-<lang>-pr` private mirrored repositories
      # as we require the GitHub service connection to be loaded.
      - ${{ if not(contains(variables['Build.DefinitionName'], 'java-pr')) }}:
          - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
            parameters:
              Paths:
                # Checkout Core as it triggers building all SDKs that use code-quality-reports
                - 'sdk/core'
                - '**/*.xml'
                - '!sdk/**/test-recordings'
                - '!sdk/**/session-records'

      - template: /eng/pipelines/templates/steps/install-reporting-tools.yml

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - task: PythonScript@0
        displayName: 'Set versions for source build'
        inputs:
          scriptPath: 'eng/versioning/set_versions.py'
          arguments: '--build-type client --pst'

      - task: PythonScript@0
        displayName: 'Update versions for source build'
        inputs:
          scriptPath: 'eng/versioning/update_versions.py'
          arguments: '--update-type library --build-type client --sr'

      - template: /eng/pipelines/templates/steps/generate-project-list.yml
        parameters:
          Artifacts:
            - name: azure-core
              groupId: com.azure
              safeName: azurecore
          AdditionalModules:
            - name: perf-test-core
              groupId: com.azure
          JobType: 'linting'
          SDKType: tools
          ServiceDirectory: code-quality-reports

      - task: PythonScript@0
        displayName: 'Generate directories variable for sparse checkout'
        inputs:
          scriptPath: 'eng/scripts/generate_from_source_pom.py'
          arguments: '--set-pipeline-variable CheckoutDirectories --set-skip-linting-projects SkipLintingProjects --project-list $(ProjectList)'
          workingDirectory: '$(System.DefaultWorkingDirectory)'

      - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
        parameters:
          SkipDefaultCheckout: true
          Paths: $(CheckoutDirectories)

      - pwsh: |
          $targetBranch = "$(System.PullRequest.TargetBranch)" -replace "refs/heads/"
          
          if ("$(Build.Reason)" -eq "Scheduled") {
            Write-Host "Scheduled pipeline runs always use linting goals 'checkstyle:check revapi:check spotbugs:check'"
            Write-Host "##vso[task.setvariable variable=LintingGoals;]checkstyle:check revapi:check spotbugs:check"
          }
          
          $lintingGoals = ''
          $baseDiffDirectory = 'eng/code-quality-reports/src/main'
          $checkstyleSourceChanged = (git diff "origin/${targetBranch}" HEAD --name-only -- "${baseDiffDirectory}/java/*").Count > 0
          $checkstyleConfigChanged = (git diff "origin/${targetBranch}" HEAD --name-only -- "${baseDiffDirectory}/resources/checkstyle/*").Count > 0
          if ($checkstyleSourceChanged -or $checkstyleConfigChanged) {
            $lintingGoals += 'checkstyle:check'
          }
          
          $revapiConfigChanged = (git diff "origin/${targetBranch}" HEAD --name-only -- "${baseDiffDirectory}/resources/revapi/*").Count > 0
          if ($revapiConfigChanged) {
            $lintingGoals += ' revapi:check'
          }
          
          $spotbugsConfigChanged = (git diff "origin/${targetBranch}" HEAD --name-only -- "${baseDiffDirectory}/resources/spotbugs/*").Count > 0
          if ($spotbugsConfigChanged) {
            $lintingGoals += ' spotbugs:check'
          }
          
          Write-Host "Using linting goals '${lintingGoals}'"
          Write-Host "##vso[task.setvariable variable=LintingGoals;]${lintingGoals}"

      - ${{ if not(eq(variables['LintingGoals'], '')) }}:
        - task: Maven@3
          displayName: 'Build Projects'
          inputs:
            mavenPomFile: ClientFromSourcePom.xml
            goals: 'install'
            options: '$(DefaultOptions) -T 2C -DskipTests -Dgpg.skip -DtrimStackTrace=false -Dmaven.javadoc.skip=true -Dcodesnippet.skip=true -Dcheckstyle.skip -Dspotbugs.skip -Drevapi.skip=true -Djacoco.skip=true --quiet'
            mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: $(JavaBuildVersion)
            jdkArchitectureOption: 'x64'
            publishJUnitResults: false

        - task: Maven@3
          displayName: 'Run Linting'
          inputs:
            mavenPomFile: ClientFromSourcePom.xml
            goals: $(LintingGoals)
            # Skip failing on Checkstyle, RevApi, and Spotbugs errors.
            # This is being done as the error reporting will be captured, so if any error reports exist the build can be
            # failed later allowing all libraries to be validated.
            options: '$(DefaultOptions) -T 2C -Dcheckstyle.failOnViolation=false -Dcheckstyle.failsOnError=false -Dspotbugs.failOnError=false -Drevapi.failBuildOnProblemsFound=false -pl "!com.azure:azure-sdk-from-source,$(SkipLintingProjects)" --quiet'
            mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: $(JavaBuildVersion)
            jdkArchitectureOption: 'x64'
            publishJUnitResults: false

        - task: PowerShell@2
          inputs:
            filePath: $(System.DefaultWorkingDirectory)/eng/pipelines/scripts/Get-Linting-Reports.ps1
            arguments: -OutputDirectory $(Build.ArtifactStagingDirectory)/linting-reports
            pwsh: true
            workingDirectory: $(Pipeline.Workspace)
          displayName: 'Generate Linting Reports'
          condition: always()

        - publish: $(Build.ArtifactStagingDirectory)/linting-reports.zip
          displayName: 'Publish Linting Reports'
          artifact: linting-reports-$(System.StageName)-$(System.JobName)-$(System.JobAttempt)
          condition: always()

        - pwsh: |
            if ((Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/linting-reports -Directory | Measure-Object).Count -gt 0) {
              exit 1
            }
          displayName: 'Fail Pipeline if Linting Reports Exist'