parameters:
  - name: SDKType
    type: string
    default: client
  - name: ServiceDirectory
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: BuildOptions
    type: string
    default: '$(DefaultOptions) --quiet -DskipTests $(DefaultSkipOptions) -Djacoco.skip=true'
  - name: BuildParallelization
    type: string
    default: '2C'
  - name: TestOptions
    type: string
    default: '$(DefaultTestOptions) --quiet -DAZURE_TEST_DEBUG=$(IsDebug)'
  - name: MatrixTestOptions
    type: string
    default: ''
  - name: MatrixAdditionalOptions
    type: string
    default: ''
  - name: TestParallelization
    type: string
    default: '1C'
  - name: ParallelTestPlayback
    type: string
    default: 'false'
  - name: SkipAggregateReports
    type: boolean
    default: false
  - name: TestResultsFiles
    type: string
    default: ''
  - name: SparkShading
    type: string
    default: ''
  - name: TestEnvVars
    type: object
    default: {}
  - name: IsLiveTest
    type: boolean
    default: false

steps:
  - task: Maven@3
    displayName: 'Build for non-From Source run'
    inputs:
      mavenPomFile: pom.xml
      options: ${{ parameters.BuildOptions }} -T ${{ parameters.BuildParallelization }} ${{ parameters.SparkShading }} -pl $(ProjectList) -am
      mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: $(JavaTestVersion)
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      goals: 'install'
    # we want to run this when we aren't running from source and aren't generating Jacoco test coverage
    condition: and(succeeded(), ne(variables['TestFromSource'], 'true'), not(and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'))))

  - task: Maven@3
    displayName: 'Run tests'
    inputs:
      mavenPomFile: pom.xml
      options: '${{ parameters.TestOptions }} -Dparallel-test-playback=${{ parameters.ParallelTestPlayback }} ${{ parameters.MatrixTestOptions }} ${{ parameters.MatrixAdditionalOptions}} -T ${{ parameters.TestParallelization }}'
      mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: $(JavaTestVersion)
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      goals: $(TestGoals) $(AdditionalTestGoals)
    env: ${{ parameters.TestEnvVars }}
    # we want to run this when TestFromSource isn't true
    condition: and(succeeded(), ne(variables['TestFromSource'],'true'))

  - task: Maven@3
    displayName: 'Generate aggregate code coverage report'
    condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'), eq('${{ parameters.SkipAggregateReports }}', 'false'))
    inputs:
      mavenPomFile: sdk/${{ parameters.ServiceDirectory }}/pom.xml
      options: '$(DefaultOptions) -Pcoverage'
      mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: $(JavaTestVersion)
      jdkArchitectureOption: 'x64'
      goals: jacoco:report-aggregate

  - task: Maven@3
    displayName: 'Build for From Source run'
    inputs:
      mavenPomFile: ClientFromSourcePom.xml
      goals: 'install'
      # Build and install every track 2, client, library. The purpose is to have all the libraries installed on the
      # machine, so we can simply run tests with the -amd switch and we can remove the SNAFU of dependencies that
      # bloated the ci.yml files' AdditionalModules because we ended up having to list every transitive azure client
      # dependency. Note: The -T 1C says spin up a build thread per core. Since we're building
      # all the track 2, client, libraries (which is now over 100) this effectively cuts the build time in half.
      options: ${{ parameters.BuildOptions }} -T ${{ parameters.BuildParallelization }} ${{ parameters.SparkShading }}
      mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: $(JavaBuildVersion)
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
    condition: and(succeeded(), and(eq(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))

  - task: Maven@3
    displayName: 'Run tests for From Source run'
    inputs:
      mavenPomFile: ClientFromSourcePom.xml
      # For the "From Source" runs we don't want the -am switch as we don't care about running tests for our
      # dependencies, but we do want the -amd switch because we want to run tests on things that depend on us.
      ${{ if eq(parameters.IsLiveTest, 'true') }}:
        options: ${{ parameters.TestOptions }} ${{ parameters.MatrixTestOptions }} -T ${{ parameters.TestParallelization }}
      ${{ else }}:
        options: ${{ parameters.TestOptions }} ${{ parameters.MatrixTestOptions }} -amd -T ${{ parameters.TestParallelization }}
      mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: $(JavaTestVersion)
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      # The "From Source" runs only care about running tests for libraries within an SDK/area
      # as well as libraries which depend on them and not the other stages in the Maven
      # lifecycle that test or verify targets would execute. The libraries were already
      # compiled and installed in the previous task, this tasks only runs tests.
      goals: $(TestGoals) $(AdditionalTestGoals)
    env: ${{ parameters.TestEnvVars }}
    condition: and(succeeded(), and(eq(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))

  - template: ../steps/upload-repository-on-failure.yml

  - template: ../steps/retain-heap-dump-hprofs.yml

  - task: PublishTestResults@2
    condition: and(always(), or(ne(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))
    inputs:
      mergeTestResults: true
      testRunTitle: $(Agent.JobName)
      ${{ if ne(parameters.TestResultsFiles, '') }}:
        testResultsFiles: ${{ parameters.TestResultsFiles }}

  # Azure DevOps only seems to respect the last code coverage result published, so only do this for Windows + Java LTS.
  # Code coverage reporting is set up only for Track 2 modules.
  - task: PublishCodeCoverageResults@1
    condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'))
    inputs:
      codeCoverageTool: JaCoCo
      summaryFileLocation: sdk/${{ parameters.ServiceDirectory }}/target/site/test-coverage/jacoco.xml
      reportDirectory: sdk/${{ parameters.ServiceDirectory }}/target/site/test-coverage/
      failIfCoverageEmpty: false
