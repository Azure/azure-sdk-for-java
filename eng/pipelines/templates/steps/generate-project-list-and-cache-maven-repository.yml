# This job template uses the artifact list in the ci.yml file
# to generate a variable at build time that can be passed into
# the Maven -pl command-line switch to constrain what subset of
# projects are targeted based on the artifacts this pipeline
# produces. The -am and -amd switches are then applied as
# appropriate to constrain the full graph that is built depending
# on whether we are doing a recorded test play back or a full live
# test.

# The project list is also being used as a cache key.
parameters:
  - name: Artifacts
    type: object
    default: []
  - name: AdditionalModules
    type: object
    default: []
  - name: JobType
    type: string
    default: test
  - name: ServiceDirectory
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.

steps:
- pwsh: |
    $serviceDirectory = '${{ parameters.ServiceDirectory }}'
    $artifacts = '${{ convertToJson(parameters.Artifacts) }}' | ConvertFrom-Json
    $additionalModules = '${{ convertToJson(parameters.AdditionalModules) }}' | ConvertFrom-Json

    $projectList = @()
    $projectPathList = @()
    $pathProjects = @()
    $projects = @()
    foreach ($artifact in $artifacts) {
      $projectList += "$($artifact.groupId):$($artifact.name)"
    }
    foreach ($artifact in $additionalModules) {
      $projectList += "$($artifact.groupId):$($artifact.name)"
    }
          
    Write-Host "Moary test log ******************"
    Write-Host $serviceDirectory
    if ($serviceDirectory -eq "spring" -or $serviceDirectory -eq "spring-3") {
      foreach ($artifact in $artifacts) {
        $projectPathList += "./sdk/$serviceDirectory/$($artifact.name)"
      }
    }
    if ($serviceDirectory -eq "spring" -or $serviceDirectory -eq "spring-3") {
      foreach ($artifact in $additionalModules) {
        $projectPathList += "./sdk/$serviceDirectory/$($artifact.name)"
      }
    }
    
    $projects = $projectList -join ','
    if ($serviceDirectory -eq "spring" -or $serviceDirectory -eq "spring-3") {
      $pathProjects = $projectPathList -join ','
    }
    
    Write-Host "ProjectList = $projects"
    Write-Host "##vso[task.setvariable variable=ProjectList;]$projects"
    Write-Host "ServiceDirectory = $serviceDirectory"
    Write-Host "##vso[task.setvariable variable=ServiceDirectory;]$serviceDirectory"
    if ($serviceDirectory -eq "spring" -or $serviceDirectory -eq "spring-3") {
      Write-Host "##vso[task.setvariable variable=ProjectListOriginal]$ProjectList"
      Write-Host "##vso[task.setvariable variable=ProjectList;]$pathProjects"
      Write-Host "ProjectListOriginal = $projects"
      Write-Host "Reset the project list value for multi Spring modules"
      Write-Host "ProjectList for Spring = $pathProjects"
    }

  displayName: Initialize project list variable

- task: Cache@2
  inputs:
  # Note: CacheSalt is only intented to be used in special cases, as a build is queued, to force a cache miss.
  # This would be set as a variable in the UI when the run is queued.
    key: 'maven | "$(CacheSalt)" | "$(Agent.OS)" | $(Build.SourcesDirectory)/eng/versioning/external_dependencies.txt | "$(ProjectList)" | "${{ parameters.JobType }}" | "$(TestFromSource)"'
    path: $(MAVEN_CACHE_FOLDER)
  displayName: Cache Maven local repo
