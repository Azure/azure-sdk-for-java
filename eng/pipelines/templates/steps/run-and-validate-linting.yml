parameters:
  - name: JavaBuildVersion
    type: string
    default: $(JavaBuildVersion)
  - name: AdditionalLintingOptions
    type: string
    default: ''
  - name: BuildParallelization
    type: string
    default: '2C'
  - name: RunLinting
    type: boolean
    default: false
  - name: ContinueOnError
    type: boolean
    default: false
  - name: SDKType
    type: string
    default: client

steps:
  # maven dependency:tree needs to be able to resolve dependencies, so these should be installed.
  - task: Maven@4
    ${{ if ne(parameters.SDKType, 'client') }}:
      displayName: 'Build and Run SpotBugs and Checkstyle'
    ${{ else }}:
      displayName: 'Build and Run SpotBugs, Checkstyle, and RevApi'
    inputs:
      mavenPomFile: pom.xml
      ${{ if ne(parameters.SDKType, 'client') }}:
        options: '$(DefaultOptions) --no-transfer-progress -T ${{parameters.BuildParallelization}} -DskipTests -Dgpg.skip -Dmaven.javadoc.skip=true -Dcodesnippet.skip=true -Dspotless.apply.skip=true -Dcheckstyle.failOnViolation=false -Dcheckstyle.failsOnError=false -Dspotbugs.failOnError=false -Drevapi.skip=true -pl $(ProjectList) -am'
      ${{ else }}:
        options: '$(DefaultOptions) --no-transfer-progress -T ${{parameters.BuildParallelization}} -DskipTests -Dgpg.skip -Dmaven.javadoc.skip=true -Dcodesnippet.skip=true -Dspotless.apply.skip=true -Dcheckstyle.failOnViolation=false -Dcheckstyle.failsOnError=false -Dspotbugs.failOnError=false -Drevapi.failBuildOnProblemsFound=false -pl $(ProjectList) -am'
      goals: 'install'
      mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: ${{ parameters.JavaBuildVersion }}
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
    continueOnError: ${{ parameters.ContinueOnError }}
    condition: or(eq(coalesce(variables['IsLatestNonLtsJdk'], true), true), and(${{ parameters.RunLinting }}, succeeded()))

  - task: PowerShell@2
    inputs:
      filePath: $(System.DefaultWorkingDirectory)/eng/pipelines/scripts/Get-Linting-Reports.ps1
      arguments: -StagingDirectory $(System.DefaultWorkingDirectory)
      pwsh: true
      workingDirectory: $(Pipeline.Workspace)
    displayName: 'Generate Linting Reports'
    continueOnError: ${{ parameters.ContinueOnError }}
    condition: or(eq(coalesce(variables['IsLatestNonLtsJdk'], true), true), and(${{ parameters.RunLinting }}, succeeded()))

  - task: Maven@4
    ${{ if ne(parameters.SDKType, 'client') }}:
      displayName: 'Run Javadoc and Spotless'
    ${{ else }}:
      displayName: 'Run Javadoc'
    inputs:
      mavenPomFile: pom.xml
      options: '$(DefaultOptions) --no-transfer-progress ${{ parameters.AdditionalLintingOptions }} -pl $(ProjectList)'
      mavenOptions: '$(MemoryOptions)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: ${{ parameters.JavaBuildVersion }}
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      ${{ if ne(parameters.SDKType, 'client') }}:
        goals: 'javadoc:jar'
      ${{ else }}:
        goals: 'javadoc:jar codesnippet:verify-codesnippet spotless:check'
    continueOnError: ${{ parameters.ContinueOnError }}
    condition: or(eq(coalesce(variables['IsLatestNonLtsJdk'], true), true), and(${{ parameters.RunLinting }}, succeeded()))
