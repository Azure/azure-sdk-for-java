parameters:
  - name: SDKType
    type: string
    default: client
  - name: ServiceDirectory
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: Artifacts
    type: object
    default: []
  - name: AdditionalModules
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false

jobs:
  - job: 'Build'

    variables:
      - template: ../variables/globals.yml

    pool:
      name: azsdk-pool-mms-ubuntu-1804-general

    strategy:
      matrix:
        Client Libraries:
          ArtifactName: 'packages'

    steps:
      - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
        parameters:
          Paths:
            - 'sdk/${{ parameters.ServiceDirectory }}'
            - '**/*.xml'
            - '**/*.md'
            - '!sdk/**/test-recordings'
            - '!sdk/**/session-records'

      - template: ../steps/generate-project-list.yml
        parameters:
          Artifacts: ${{parameters.Artifacts}}
          AdditionalModules: ${{parameters.AdditionalModules}}
          SDKType: ${{parameters.SDKType}}
          ServiceDirectory: ${{parameters.ServiceDirectory}}

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      # This step needs to run before we update to using dev versions otherwise dependency
      # check in the script will not fully work because the versions will mismatch
      - task: PythonScript@0
        displayName: 'Generate directories variable for sparse checkout'
        inputs:
          scriptPath: 'eng/scripts/generate_from_source_pom.py'
          arguments: '--set-pipeline-variable CheckoutDirectories --project-list $(ProjectList)'
          workingDirectory: '$(System.DefaultWorkingDirectory)'

      - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
        parameters:
          Paths: $(CheckoutDirectories)
          SkipDefaultCheckout: true

      - script: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: 'Tag scheduled builds'
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'],'main'),eq(variables['Build.Reason'],'Schedule'))

      - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
        parameters:
          PackageName: "azure-sdk-template"
          ServiceDirectory: "template"
          TestPipeline: ${{ parameters.TestPipeline }}

      - template: /eng/common/pipelines/templates/steps/daily-dev-build-variable.yml
        parameters:
          ServiceDirectory: ${{parameters.ServiceDirectory}}

      - pwsh: |
          $artifacts = '${{ convertToJson(parameters.Artifacts) }}' | ConvertFrom-Json
          python3 --version

          # Append dev package version suffix for each artifact
          foreach ($artifact in $artifacts) {
            python3 eng/versioning/set_versions.py --build-type ${{parameters.SDKType}} --build-qualifier alpha.$(Build.BuildNumber) --artifact-id $artifact.name --group-id $artifact.groupId
          }

          # Set zero-dev-version for packages
          python3 eng/versioning/set_versions.py --set-dev-zero-version --build-type ${{parameters.SDKType}} --build-qualifier alpha.$(Build.BuildNumber)

          # Apply version settings to repository
          python3 eng/versioning/update_versions.py --update-type library --build-type ${{parameters.SDKType}} --sr
        condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
        displayName: Setup Dev versioning

      - script: |
          pip install markdown2 BeautifulSoup4
        displayName: 'pip install markdown2 and BeautifulSoup4'

      - task: Maven@3
        displayName: 'Build and Package, JDK Version: $(JavaBuildVersion)'
        inputs:
          mavenPomFile: pom.xml
          goals: 'deploy'
          options: '$(DefaultOptions) -T 1C -DskipTests -Dinject-codesnippets -Dgenerate-overview -Dspotbugs.skip=true -Dcheckstyle.skip=true -Drevapi.skip=true -pl $(ProjectList) -am -DaltDeploymentRepository=id::default::file://$(System.DefaultWorkingDirectory)/build' # We include template-module so we ensure it always builds in CI
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaBuildVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: PowerShell@2
        displayName: 'Copy artifacts to staging'
        inputs:
          pwsh: true
          workingDirectory: $(Agent.BuildDirectory)
          filePath: eng/scripts/Stage-MavenPackageArtifacts.ps1
          arguments: >
            -SourceDirectory $(System.DefaultWorkingDirectory)/build
            -TargetDirectory $(Build.ArtifactStagingDirectory)
            -InformationAction Continue

      - template: /eng/common/pipelines/templates/steps/create-apireview.yml
        parameters:
          Artifacts: ${{parameters.Artifacts}}

      - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
        parameters:
          ArtifactPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: '$(ArtifactName)'

      - template: ../steps/upload-repository-on-failure.yml
