parameters:
  SDKType: client
  ServiceDirectory: not-specified # Set a default that breaks in obvious ways.
  PreTestSteps: []
  TestOptions: '$(DefaultOptions) -Dmaven.javadoc.skip=true -Dspotbugs.skip=true -Dcheckstyle.skip=true'
  TestGoals: verify
  TestMatrix:
    Linux - Java 8:
      OSName: 'Linux'
      OSVmImage: 'ubuntu-16.04'
      JavaVersion: '1.8'
      RunTitle: 'Linux on Java 1.8'
    macOS - Java 8:
      OSName: 'macOS'
      OSVmImage: 'macOS-10.13'
      JavaVersion: '1.8'
      RunTitle: 'macOS on Java 1.8'
    Windows - Java 8:
      OSName: 'Windows'
      OSVmImage: 'windows-2019'
      JavaVersion: '1.8'
      RunTitle: 'Windows on Java 1.8'
    Linux - Java 11:
      OSName: 'Linux'
      OSVmImage: 'ubuntu-16.04'
      JavaVersion: '1.11'
      RunTitle: 'Linux on Java 1.11'
    macOS - Java 11:
      OSName: 'macOS'
      OSVmImage: 'macOS-10.13'
      JavaVersion: '1.11'
      RunTitle: 'macOS on Java 1.11'
    Windows - Java 11:
      OSName: 'Windows'
      OSVmImage: 'windows-2019'
      JavaVersion: '1.11'
      RunTitle: 'Windows on Java 1.11'
    Windows From Source - Java 8:
      OSName: 'Windows'
      OSVmImage: 'windows-2019'
      JavaVersion: '1.8'
      RunTitle: 'From Source: Windows on Java 1.8'
      TestFromSource: true

jobs:
  - job: 'Build'

    variables:
      - template: ../variables/globals.yml

    pool:
      vmImage: 'ubuntu-16.04'

    strategy:
      matrix:
        Client Libraries:
          ArtifactName: 'packages'
          JavaVersion: '1.11'

    steps:
      - script: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: 'Tag scheduled builds'
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - template: tools/daily-dev-build-variable/daily-dev-build-variable.yml@azure-sdk-tools

      - ${{ each artifact in parameters.Artifacts }}:
        - script: |
            python3 --version
            python3 eng/versioning/set_versions.py --build-type ${{parameters.SDKType}} --build-qualifier dev.$(Build.BuildNumber) --artifact-id ${{artifact.name}} --group-id ${{artifact.groupId}}
          condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
          displayName: Append dev package version suffix for ${{artifact.name}}

      - script: |
          python3 --version
          python3 eng/versioning/update_versions.py --update-type library --build-type ${{parameters.SDKType}}
        condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
        displayName: Apply version settings to repository

      - script: |
          pip install markdown2 BeautifulSoup4
        displayName: 'pip install markdown2 and BeautifulSoup4'

      - template: ../steps/cache-maven-repository.yml

      - template: eng/pipelines/templates/scripts/replace-relative-links.yml@azure-sdk-tools
        parameters:
          TargetFolder: $(Build.SourcesDirectory)
          RootFolder: $(Build.SourcesDirectory)
          BuildSHA: $(Build.SourceVersion)
          RepoId: 'Azure/azure-sdk-for-java'

      - task: Maven@3
        displayName: 'Build and Package'
        inputs:
          mavenPomFile: sdk/${{parameters.ServiceDirectory}}/pom.service.xml
          goals: 'package'
          options: '$(DefaultOptions) "-DpackageOutputDirectory=$(Build.ArtifactStagingDirectory)" -DskipTests -Dgenerate-overview' # We include template-module so we ensure it always builds in CI
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: 'Publish Artifacts $(ArtifactName)'
        artifact: '$(ArtifactName)'

      - publish: $(System.DefaultWorkingDirectory)
        condition: and(eq(variables['CaptureRepositoryOnFailure'], 'true'), failed())
        displayName: 'Capture repo state for analysis'
        artifact: repository

  - job: 'Analyze'
    condition: and(succeeded(), ne(variables['Skip.Analyze'], 'true'))

    variables:
      - template: ../variables/globals.yml

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      - pwsh: |
          $(Build.SourcesDirectory)/eng/versioning/pom_file_version_scanner.ps1
        displayName: "Verify versions in POM files"

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - script: |
          pip install setuptools wheel
          pip install doc-warden==$(DocWardenVersion)
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: 'Verify Readmes'

      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
        # builds should be sufficient.
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Component Detection'

      # We `install` the code quality reports tooling into our local m2 cache separately from building the Maven project
      # reports. This means it is available as part of that, but also so that this is not documented in the project report.
      - template: ../steps/install-reporting-tools.yml
        parameters:
          Options: --batch-mode
          MavenOptions: $(MemoryOptions) $(LoggingOptions)

      - task: Maven@3
        displayName: 'Install Module and Run SpotBugs, Checkstyle, RevApi, and Javadoc'
        inputs:
          mavenPomFile: sdk/${{parameters.ServiceDirectory}}/pom.service.xml
          options: '--no-transfer-progress -DskipTests -Dgpg.skip -Dverify-readme'
          mavenOptions: '$(MemoryOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'install'

  - job: 'Test'
    condition: and(succeeded(), ne(variables['Skip.Test'], 'true'))

    variables:
      - template: ../variables/globals.yml

    strategy:
      matrix: ${{ parameters.TestMatrix }}

    pool:
      vmImage: $(OSVmImage)

    steps:
      - template: ../steps/verify-agent-os.yml
        parameters:
          OSName: $(OSName)

      - template: ../steps/cache-maven-repository.yml

      - template: ../steps/install-reporting-tools.yml
        parameters:
          Options: --batch-mode
          MavenOptions: $(MemoryOptions) $(LoggingOptions)

      - ${{ parameters.PreTestSteps }}

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'
        condition: and(succeeded(), eq(variables['TestFromSource'],'true'))

      - pwsh: |
          python --version
          python eng/versioning/set_versions.py --build-type client --pst
          if ($LastExitCode -eq 5678) {
            echo "##vso[task.setvariable variable=ShouldRunSourceTests]$true"
            echo "Changes detected, return code from set_versions.py is $($LastExitCode)"
            exit 0
          } elseif ($LastExitCode -eq 0) {
            echo "No changes detected, return code from set_versions.py is $($LastExitCode)"
            exit 0
          } else {
            echo "Invalid return code from set_versions.py, return code is $($LastExitCode)"
            exit 1
          }
        displayName: 'Set versions for source build'
        condition: and(succeeded(), eq(variables['TestFromSource'],'true'))

      - script: |
          python --version
          python eng/versioning/update_versions.py --update-type library --build-type client
        condition: and(succeeded(), eq(variables['ShouldRunSourceTests'],'true'))
        displayName: 'Update versions for source build'

      - task: Maven@3
        displayName: 'Run tests'
        inputs:
          mavenPomFile: sdk/${{parameters.ServiceDirectory}}/pom.service.xml
          options: ${{ parameters.TestOptions }}
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: ${{ parameters.TestGoals }}
        # we want to run this when TestFromSource isn't true (which covers normal running when it isn't set)
        # OR when ShouldRunSourceTests is true
        condition: and(succeeded(), or(ne(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))

      - task: PublishTestResults@2
        condition: and(always(), or(ne(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))
        inputs:
          mergeTestResults: true
          testRunTitle: $(RunTitle)

      # HACK: This has been disabled to unblock releases where aggregate code
      #       coverage reporting was causing agent timeouts. We've got an issue
      #       to discuss how to handle aggregate-style reporting across the repo
      #       but at the moment this isn't going to work:
      #
      #         https://github.com/Azure/azure-sdk-for-java/issues/7271
      #
      #     # Generate JaCoCo code coverage report on Java 11, Linux builds if the build reason is not PR.
      # - task: Maven@3
      #   displayName: 'Generate aggregate code coverage report'
      #   condition: and(eq(variables['OsName'], 'Linux'), eq(variables['JavaVersion'], '1.11'), ne(variables['Build.Reason'], 'PullRequest'))
      #   inputs:
      #       # Aggregate reports for non-PR builds will use pom.client.xml and include non-shipping modules
      #       mavenPomFile: pom.client.xml
      #       options: '$(DefaultOptions) -Dinclude-non-shipping-modules -Dgpg.skip -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true'
      #       mavenOptions: '-Xmx3072m $(LoggingOptions)'
      #       javaHomeOption: 'JDKVersion'
      #       jdkVersionOption: $(JavaVersion)
      #       jdkArchitectureOption: 'x64'
      #       publishJUnitResults: false
      #       goals: 'verify'

      #   # Azure DevOps only seems to respect the last code coverage result published, so only do this for Linux + Java LTS.
      #   # Code coverage reporting is setup only for Track 2 modules.
      # - task: PublishCodeCoverageResults@1
      #   condition: and(eq(variables['OsName'], 'Linux'), eq(variables['JavaVersion'], '1.11'), ne(variables['Build.Reason'], 'PullRequest'))
      #   inputs:
      #       codeCoverageTool: JaCoCo
      #       summaryFileLocation: eng/jacoco-test-coverage/target/site/test-coverage/jacoco.xml
      #       reportDirectory: eng/jacoco-test-coverage/target/site/test-coverage/
      #       failIfCoverageEmpty: true

      #   # Publish code coverage to an artifact so it can be uploaded to the Maven site.
      #   # Do this for track 2 modules only. Code coverage from previous step is only published for Linux + Java LTS.
      # - task: PublishPipelineArtifact@0
      #   displayName: 'Publish coverage artifact'
      #   condition: and(eq(variables['OsName'], 'Linux'), eq(variables['JavaVersion'], '1.11'), ne(variables['Build.Reason'], 'PullRequest'))
      #   inputs:
      #       artifactName: coverage
      #       targetPath: eng/jacoco-test-coverage/target/site/
