parameters:
  - name: SDKType
    type: string
    default: client
  - name: ServiceDirectory
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: TestPipeline
    type: boolean
    default: false
  - name: Artifacts
    type: object
    default: []
  - name: AdditionalModules
    type: object
    default: []
  - name: PreTestSteps
    type: object
    default: []
  - name: TestOptions
    type: string
    default: '$(DefaultOptions) -DtrimStackTrace=false -Dmaven.javadoc.skip=true -Dspotbugs.skip=true -Dcheckstyle.skip=true -Drevapi.skip=true -Dparallel-test-playback'
  - name: TestGoals
    type: string
    default: verify
  - name: WindowsPool
    type: string
    default: azsdk-pool-mms-win-2019-general
  - name: LinuxPool
    type: string
    default: azsdk-pool-mms-ubuntu-1804-general
  - name: TestMatrix
    type: object
    default:
      Linux - Java 8:
        Pool: $(LinuxPool)
        OSVmImage:
        JavaTestVersion: '1.8'
        RunTitle: 'Linux on Java 1.8'
      macOS - Java 8:
        Pool:
        OSVmImage: 'macOS-10.15'
        JavaTestVersion: '1.8'
        RunTitle: 'macOS on Java 1.8'
      Windows - Java 8:
        Pool: $(WindowsPool)
        OSVmImage:
        JavaTestVersion: '1.8'
        RunTitle: 'Windows on Java 1.8'
      Linux - Java 11:
        Pool: $(LinuxPool)
        OSVmImage:
        JavaTestVersion: '1.11'
        RunTitle: 'Linux on Java 1.11'
      macOS - Java 11:
        Pool:
        OSVmImage: 'macOS-10.15'
        JavaTestVersion: '1.11'
        RunTitle: 'macOS on Java 1.11'
      Windows - Java 11:
        Pool: $(WindowsPool)
        OSVmImage:
        JavaTestVersion: '1.11'
        RunTitle: 'Windows on Java 1.11'
      Linux From Source - Java 11:
        Pool: $(LinuxPool)
        OSVmImage:
        JavaTestVersion: '1.11'
        RunTitle: 'From Source: Linux on Java 1.11'
        AdditionalOptions: '-amd'
        TestFromSource: true


jobs:
  - job: 'Build'

    variables:
      - template: ../variables/globals.yml

    pool:
      name: ${{ parameters.LinuxPool }}

    strategy:
      matrix:
        Client Libraries:
          ArtifactName: 'packages'

    steps:
      - ${{if eq(parameters.TestPipeline, 'true')}}:
        - task: PowerShell@2
          displayName: Prep template pipeline for release
          condition: succeeded()
          inputs:
            pwsh: true
            workingDirectory: $(Build.SourcesDirectory)
            filePath: eng/scripts/SetTestPipelineVersion.ps1
            arguments: '-BuildID $(Build.BuildId)'

      - script: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: 'Tag scheduled builds'
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - template: /eng/common/pipelines/templates/steps/daily-dev-build-variable.yml

      - ${{ each artifact in parameters.Artifacts }}:
        - script: |
            python3 --version
            python3 eng/versioning/set_versions.py --build-type ${{parameters.SDKType}} --build-qualifier alpha.$(Build.BuildNumber) --artifact-id ${{artifact.name}} --group-id ${{artifact.groupId}}
          condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
          displayName: Append dev package version suffix for ${{artifact.name}}

      - script: |
          python3 --version
          python3 eng/versioning/set_versions.py --set-dev-zero-version --build-type ${{parameters.SDKType}} --build-qualifier alpha.$(Build.BuildNumber)
        condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
        displayName: Set zero-dev-version for packages

      - script: |
          python3 --version
          python3 eng/versioning/update_versions.py --update-type library --build-type ${{parameters.SDKType}} --sr
        condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
        displayName: Apply version settings to repository

      - script: |
          pip install markdown2 BeautifulSoup4
        displayName: 'pip install markdown2 and BeautifulSoup4'

      - template: ../steps/cache-maven-repository.yml

      - template: ../steps/generate-project-list.yml
        parameters:
          Artifacts: ${{parameters.Artifacts}}
          AdditionalModules: ${{parameters.AdditionalModules}}

      - task: Maven@3
        displayName: 'Build and Package , JDK Version: $(JavaBuildVersion)'
        inputs:
          mavenPomFile: pom.xml
          goals: 'deploy'
          options: '$(DefaultOptions) -DskipTests -Dinject-codesnippets -Dgenerate-overview -Dspotbugs.skip=true -Dcheckstyle.skip=true -Drevapi.skip=true -pl $(ProjectList) -am -DaltDeploymentRepository=id::default::file://$(System.DefaultWorkingDirectory)/build' # We include template-module so we ensure it always builds in CI
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaBuildVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: PowerShell@2
        displayName: 'Copy artifacts to staging'
        inputs:
          pwsh: true
          workingDirectory: $(Agent.BuildDirectory)
          filePath: eng/scripts/Stage-MavenPackageArtifacts.ps1
          arguments: >
            -SourceDirectory $(System.DefaultWorkingDirectory)/build
            -TargetDirectory $(Build.ArtifactStagingDirectory)
            -InformationAction Continue

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: 'Publish Artifacts $(ArtifactName)'
        artifact: '$(ArtifactName)'

      - template: ../steps/upload-repository-on-failure.yml

      - template: /eng/pipelines/templates/steps/create-apireview.yml
        parameters:
          Artifacts: ${{parameters.Artifacts}}

  - job: 'Analyze'
    condition: and(succeeded(), ne(variables['Skip.Analyze'], 'true'))

    variables:
      - template: ../variables/globals.yml

    pool:
      name: ${{ parameters.LinuxPool }}

    steps:
      - pwsh: |
          $(Build.SourcesDirectory)/eng/versioning/pom_file_version_scanner.ps1
        displayName: "Verify versions in POM files"

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - script: |
          pip install setuptools wheel
          pip install doc-warden==$(DocWardenVersion)
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: 'Verify Readmes'

      - template: /eng/common/pipelines/templates/steps/verify-links.yml
        parameters:
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            Directory: ''
            Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)
          ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
            Directory: sdk/${{ parameters.ServiceDirectory }}
          CheckLinkGuidance: $true

      # Use BasePathLength of 38 instead of the default 49 as some GA'd files fail when the number is higher.
      - template: /eng/common/pipelines/templates/steps/verify-path-length.yml
        parameters:
          SourceDirectory: $(Build.SourcesDirectory)
          BasePathLength: 38

      - ${{if ne(parameters.SDKType, 'data')}}:
        - ${{ each artifact in parameters.Artifacts }}:
          - template: /eng/common/pipelines/templates/steps/verify-changelog.yml
            parameters:
              PackageName: ${{artifact.name}}
              ServiceName: ${{parameters.ServiceDirectory}}
              ForRelease: false

      # We `install` the code quality reports tooling into our local m2 cache separately from building the Maven project
      # reports. This means it is available as part of that, but also so that this is not documented in the project report.
      - template: ../steps/install-reporting-tools.yml
        parameters:
          Options: --batch-mode
          MavenOptions: $(MemoryOptions) $(LoggingOptions)

      - template: ../steps/generate-project-list.yml
        parameters:
          Artifacts: ${{parameters.Artifacts}}
          AdditionalModules: ${{parameters.AdditionalModules}}

      # maven dependency:tree needs to be able to resolve dependencies, so these should be installed.
      - task: Maven@3
        displayName: 'Build and Install'
        inputs:
          mavenPomFile: pom.xml
          goals: 'install'
          options: '$(DefaultOptions) -T 1C -DskipTests -Dgpg.skip -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true -Drevapi.skip=true -pl $(ProjectList) -am'
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaBuildVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: Maven@3
        displayName: 'Run SpotBugs, Checkstyle, RevApi, and Javadoc'
        inputs:
          mavenPomFile: pom.xml
          options: '$(DefaultOptions) --no-transfer-progress -DskipTests -Dgpg.skip -Dverify-readme -pl $(ProjectList)'
          mavenOptions: '$(MemoryOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaBuildVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'verify'

      - template: ../steps/upload-repository-on-failure.yml

  - job: 'Test'
    condition: and(succeeded(), ne(variables['Skip.Test'], 'true'))

    # HACK: We can't reference parameters to define other parameters, so I am
    #       setting some variables with the value of parameters which can then
    #       be used later in the test evaluations.
    variables:
      - template: ../variables/globals.yml
      - name: WindowsPool
        value: ${{parameters.WindowsPool}}
      - name: LinuxPool
        value: ${{parameters.LinuxPool}}

    strategy:
      matrix:
        ${{ each matrixEntry in parameters.TestMatrix }}:
          # Skip TestFromSource jobs for SDKType data
          ${{ if not(and(eq(matrixEntry.value.TestFromSource, 'true'), eq(parameters.SDKType, 'data'))) }}:
            ${{ matrixEntry.key }}:
              ${{ insert }}: ${{ matrixEntry.value }}

    pool:
      name: $[coalesce(variables['Pool'], '')]
      vmImage: $[coalesce(variables['OSVmImage'], '')]

    steps:
      - template: ../steps/cache-maven-repository.yml

      - template: ../steps/install-reporting-tools.yml
        parameters:
          Options: --batch-mode
          MavenOptions: $(MemoryOptions) $(LoggingOptions)

      - ${{ parameters.PreTestSteps }}

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'
        condition: and(succeeded(), eq(variables['TestFromSource'],'true'))

      - task: PythonScript@0
        displayName: 'Set versions for source build'
        inputs:
          scriptPath: 'eng/versioning/set_versions.py'
          arguments: '--build-type client --pst'
        condition: and(succeeded(), eq(variables['TestFromSource'],'true'))

      - task: PythonScript@0
        displayName: 'Update versions for source build'
        inputs:
          scriptPath: 'eng/versioning/update_versions.py'
          arguments: '--update-type library --build-type client --sr'
        condition: and(succeeded(), eq(variables['ShouldRunSourceTests'],'true'))

      - task: PowerShell@2
        # The root pom.xml contains both track 1, data, and track 2, client libraries.
        # This task calls a powershell script that will go through all of the pom files
        # in the repository looking, specifically, for ones whose parent is
        # azure-client-sdk-parent and create a temporary pom file with just those libraries.
        # Note: It excludes items within the /eng directory otherwise we'd be picking up
        # jacoco and spotbugs which are unnecessary for the From Source run.
        displayName: 'Generate Aggregate Pom for From Source Build'
        inputs:
          pwsh: true
          workingDirectory: $(Agent.BuildDirectory)
          filePath: eng/scripts/Generate-Client-Aggregate-Pom.ps1
        condition: and(succeeded(), eq(variables['ShouldRunSourceTests'],'true'))

      - template: ../steps/generate-project-list.yml
        parameters:
          Artifacts: ${{parameters.Artifacts}}
          AdditionalModules: ${{parameters.AdditionalModules}}

      - task: Maven@3
        displayName: 'Run tests'
        inputs:
          mavenPomFile: pom.xml
          options: ${{ parameters.TestOptions }} -pl $(PLSkipOptions)$(ProjectList) -am $(AdditionalOptions)
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: ${{ parameters.TestGoals }}
        # we want to run this when TestFromSource isn't true
        condition: and(succeeded(), ne(variables['TestFromSource'],'true'))

      - task: Maven@3
        displayName: 'Generate aggregate code coverage report'
        condition: and(eq(variables['OsName'], 'Windows'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'))
        inputs:
          mavenPomFile: sdk/${{ parameters.ServiceDirectory }}/pom.xml
          options: -Pcoverage
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          goals: jacoco:report-aggregate
          # we want to run this when TestFromSource isn't true
          condition: and(succeeded(), ne(variables['TestFromSource'],'true'))

      - task: Maven@3
        displayName: 'Build for From Source run'
        inputs:
          mavenPomFile: ClientAggregatePom.xml
          goals: 'install'
          # Build and install every track 2, client, library. The purpose is to have all of
          # the libraries installed on the machine so we can simply run tests with the -amd
          # switch and we can remove the SNAFU of dependencies that bloated the ci.yml files'
          # AdditionalModules because we ended up having to list every transitive azure client
          # dependency. Note: The -T 1C says spin up a build thread per core. Since we're building
          # all of the track 2, client, libraries (which is now over 100) this effectively cuts the
          # the build time in half.
          options: '$(DefaultOptions) -T 1C -DskipTests -Dgpg.skip -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true -Drevapi.skip=true'
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaBuildVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
        condition: and(succeeded(), and(eq(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))

      - task: Maven@3
        displayName: 'Run tests for From Source run'
        inputs:
          mavenPomFile: ClientAggregatePom.xml
          # For the From Source runs we don't want the -am switch as we don't care about running tests for our dependencies
          # but we do want the -amd switch because we want to run tests on things that depend on us.
          options: ${{ parameters.TestOptions }} -pl $(PLSkipOptions)$(ProjectList) -amd
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          # The From Source runs only care about running tests for libraries within an SDK/area
          # as well as libraries which depend on them and not the other stages in the Maven
          # lifecycle that test or verify targets would execute. The libraries were already
          # compiled and installed in the previous task, this tasks only runs tests.
          goals: 'surefire:test'
        condition: and(succeeded(), and(eq(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))

      - template: ../steps/upload-repository-on-failure.yml

      - task: PublishTestResults@2
        condition: and(always(), or(ne(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))
        inputs:
          mergeTestResults: true
          testRunTitle: $(RunTitle)

      # Azure DevOps only seems to respect the last code coverage result published, so only do this for Windows + Java LTS.
      # Code coverage reporting is setup only for Track 2 modules.
      - task: PublishCodeCoverageResults@1
        condition: and(eq(variables['OsName'], 'Windows'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'))
        inputs:
          codeCoverageTool: JaCoCo
          summaryFileLocation: sdk/${{ parameters.ServiceDirectory }}/target/site/jacoco-aggregate/jacoco.xml
          reportDirectory: sdk/${{ parameters.ServiceDirectory }}/target/site/jacoco-aggregate/
          failIfCoverageEmpty: false
