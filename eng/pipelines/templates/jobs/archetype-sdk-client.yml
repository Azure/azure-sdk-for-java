parameters:
  ServiceDirectory: not-specified # Set a default that breaks in obvious ways.
  PreTestSteps: []
  TestOptions: '$(DefaultOptions) $(ProfileFlag)'
  TestGoals: test
  TestMatrix:
    Linux - Java 8:
      OSName: 'Linux'
      OSVmImage: 'ubuntu-16.04'
      JavaVersion: '1.8'
      ProfileFlag: ''
    macOS - Java 8:
      OSName: 'macOS'
      OSVmImage: 'macOS-10.13'
      JavaVersion: '1.8'
      ProfileFlag: ''
    Windows - Java 8:
      OSName: 'Windows'
      OSVmImage: 'vs2017-win2016'
      JavaVersion: '1.8'
      ProfileFlag: ''
    Linux - Java LTS:
      OSName: 'Linux'
      OSVmImage: 'ubuntu-16.04'
      JavaVersion: '1.11'
      ProfileFlag: '-Djava-lts'
    macOS - Java LTS:
      OSName: 'macOS'
      OSVmImage: 'macOS-10.13'
      JavaVersion: '1.11'
      ProfileFlag: '-Djava-lts'
    Windows - Java LTS:
      OSName: 'Windows'
      OSVmImage: 'vs2017-win2016'
      JavaVersion: '1.11'
      ProfileFlag: '-Djava-lts'

jobs:
  - job: 'Build'

    variables:
      - template: ../variables/globals.yml

    pool:
      vmImage: 'ubuntu-16.04'

    strategy:
      matrix:
        Java 8:
          ArtifactName: 'packages'
          ProfileFlag: ''
          JavaVersion: '1.8'
        Java LTS:
          ArtifactName: 'java-lts-packages'
          ProfileFlag: '-Djava-lts'
          JavaVersion: '1.11'

    steps:
      - script: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: 'Tag scheduled builds'
        condition: and(eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))

      - task: Maven@3
        displayName: 'Build and Package'
        inputs:
          mavenPomFile: sdk/${{parameters.ServiceDirectory}}/pom.service.xml
          goals: 'package'
          options: '$(DefaultOptions) $(ProfileFlag) "-DpackageOutputDirectory=$(Build.ArtifactStagingDirectory)" -Dmaven.test.skip=true -Dinclude-template' # We include template-module so we ensure it always builds in CI
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: 'Publish Artifacts $(ArtifactName)'
        artifact: '$(ArtifactName)'


  - job: 'Analyze'

    variables:
      - template: ../variables/globals.yml

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - script: |
          pip install setuptools wheel
          pip install doc-warden
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: 'Verify Readmes'

      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
        # builds should be sufficient.
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Component Detection'

      # We `install` the code quality reports tooling into our local m2 cache separately from building the Maven project
      # reports. This means it is available as part of that, but also so that this is not documented in the project report.

      - template: ../steps/install-reporting-tools.yml
        parameters:
          Options: --batch-mode
          MavenOptions: $(LoggingOptions)

      - task: Maven@3
        displayName: 'Install all client libraries (for SpotBugs analysis)'
        inputs:
          mavenPomFile: pom.client.xml
          options: '$(DefaultOptions) -Djava-lts -DskipTests -Dgpg.skip -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'install'

      # Run SpotBugs and CheckStyle tools to ensure high code quality - these will fail the build if issues are found
      - task: Maven@3
        displayName: 'Run SpotBugs and CheckStyle'
        inputs:
          mavenPomFile: pom.client.xml
          options: '-Djava-lts -DskipTests -Dgpg.skip'
          mavenOptions: ''
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'spotbugs:spotbugs checkstyle:checkstyle-aggregate'

      # Generate the Maven site report, including SpotBugs, JavaDoc, CheckStyle, Jacoco, etc only when we are not
      # running as a PR check.
      - task: Maven@3
        displayName: 'Generate Maven project site, including JavaDocs, SpotBugs, and CheckStyle reports'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          mavenPomFile: pom.client.xml
          options: '$(DefaultOptions) -Djava-lts -DskipTests -Dgpg.skip'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'install site:site site:stage'

      # We run a separate SpotBugs aggregate report step here to roll-up all the issues identified per-module in the
      # previous step. This is only generated in non-PR builds (i.e. nightly runs, etc)
      - task: Maven@3
        displayName: 'Run SpotBugs'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          mavenPomFile: eng/spotbugs-aggregate-report/pom.xml
          options: '--batch-mode -Djava-lts -DskipTests -Dgpg.skip'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'install'

      - script: |
          git clone https://github.com/JonathanGiles/DependencyChecker.git
          mkdir input && cp dependencies.json input/
        displayName: 'Download dependency checker'

      - task: Maven@3
        displayName: 'Install azure-sdk-parent'
        inputs:
          mavenPomFile: parent/pom.xml
          options: '$(DefaultOptions) -DskipTests -Dgpg.skip'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'install'

      - task: Maven@3
        displayName: 'Analyze dependencies'
        inputs:
          mavenPomFile: 'DependencyChecker/pom.xml'
          options: '-Dexec.args="-showall -dependencymanagement"'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'clean package exec:java'

      # We only copy artifacts into the staging in nightly builds, we don't bother with this for PR validation builds.
      - powershell: |
          copy -r target/staging $(Build.ArtifactStagingDirectory)
          copy eng/code-quality-reports/src/main/resources/index.html $(Build.ArtifactStagingDirectory)
          copy eng/spotbugs-aggregate-report/target/spotbugs/spotbugsXml.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
          copy output/dependencies.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
        displayName: 'Copy reports to artifact staging'
        condition: ne(variables['Build.Reason'], 'PullRequest')

      - publish: $(Build.ArtifactStagingDirectory)
        condition: succeededOrFailed()
        displayName: 'Publish Report Artifacts'
        artifact: reports

  - job: 'Test'

    variables:
      - template: ../variables/globals.yml

    strategy:
      matrix: ${{ parameters.TestMatrix }}

    pool:
      vmImage: $(OSVmImage)

    steps:
      - template: ../steps/verify-agent-os.yml
        parameters:
          OSName: $(OSName)

      - task: Maven@3
        displayName: 'Start Jetty'
        inputs:
          mavenPomFile: pom.client.xml
          options: '$(DefaultOptions) $(ProfileFlag)'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'jetty:run-forked'

      - ${{ parameters.PreTestSteps }}

      - task: Maven@3
        displayName: 'Run tests'
        inputs:
          mavenPomFile: sdk/${{parameters.ServiceDirectory}}/pom.service.xml
          options: ${{ parameters.TestOptions }}
          mavenOptions: '-Xmx3072m $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: ${{ parameters.TestGoals }}

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          mergeTestResults: true
          testRunTitle: '$(OSName) on Java $(JavaVersion)'
