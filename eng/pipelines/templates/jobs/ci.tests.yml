parameters:
  - name: SDKType
    type: string
    default: client
  - name: ServiceDirectory
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: TestPipeline
    type: boolean
    default: false
  - name: Artifacts
    type: object
    default: []
  - name: AdditionalModules
    type: object
    default: []
  - name: PreTestSteps
    type: object
    default: []
  - name: BuildOptions
    type: string
    default: '$(DefaultOptions) -T 1C -DskipTests -Dgpg.skip -DtrimStackTrace=false -Dmaven.javadoc.skip=true -Dspotbugs.skip=true -Dcheckstyle.skip=true -Drevapi.skip=true -Djacoco.skip=true'
  - name: TestOptions
    type: string
    default: '$(DefaultOptions) -DtrimStackTrace=false -Dmaven.javadoc.skip=true -Dspotbugs.skip=true -Dcheckstyle.skip=true -Drevapi.skip=true -Dparallel-test-playback'
  - name: Matrix
    type: object
  - name: CloudConfig
    type: object
    default: {}
  - name: DependsOn
    type: string
    default: ''
  - name: UsePlatformContainer
    type: boolean
    default: false

jobs:
  - job: 'Test'
    dependsOn: ${{ parameters.DependsOn }}
    condition: and(succeeded(), ne(variables['Skip.Test'], 'true'))

    strategy:
      matrix: $[ ${{ parameters.Matrix }} ]

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    ${{ if eq(parameters.UsePlatformContainer, 'true') }}:
      # Add a default so the job doesn't fail when the matrix is empty
      container: $[ variables['Container'] ]

    variables:
      - template: ../variables/globals.yml

    steps:
      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
        parameters:
          AgentImage: $(OSVmImage)

      - template: ../steps/cache-maven-repository.yml

      - template: ../steps/install-reporting-tools.yml
        parameters:
          Options: --batch-mode
          MavenOptions: $(MemoryOptions) $(LoggingOptions)

      - ${{ parameters.PreTestSteps }}

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'
        condition: and(succeeded(), eq(variables['TestFromSource'],'true'))

      - task: PythonScript@0
        displayName: 'Set versions for source build'
        inputs:
          scriptPath: 'eng/versioning/set_versions.py'
          arguments: '--build-type client --pst'
        condition: and(succeeded(), eq(variables['TestFromSource'],'true'))

      - task: PythonScript@0
        displayName: 'Update versions for source build'
        inputs:
          scriptPath: 'eng/versioning/update_versions.py'
          arguments: '--update-type library --build-type client --sr'
        condition: and(succeeded(), eq(variables['ShouldRunSourceTests'],'true'))

      - template: ../steps/generate-project-list.yml
        parameters:
          Artifacts: ${{parameters.Artifacts}}
          AdditionalModules: ${{parameters.AdditionalModules}}

      - task: PythonScript@0
        # The root pom.xml contains both track 1, data, and track 2, client libraries.
        # This task calls a Python script that will go through all of the pom files
        # in the repository looking, specifically, for ones whose parent is
        # azure-client-sdk-parent and create a temporary pom file with just those libraries.
        # Note: It excludes items within the /eng directory otherwise we'd be picking up
        # jacoco and spotbugs which are unnecessary for the From Source run.
        displayName: 'Generate Aggregate Pom for From Source Build'
        inputs:
          scriptPath: eng/scripts/generate_from_source_pom.py
          arguments: '--project-list $(ProjectList)'
        condition: and(succeeded(), eq(variables['ShouldRunSourceTests'],'true'))

      - task: Maven@3
        displayName: 'Build for non-From Source run'
        inputs:
          mavenPomFile: pom.xml
          options: ${{ parameters.BuildOptions }} -pl $(PLSkipOptions)$(ProjectList) -am
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'install'
        # we want to run this when we aren't running from source and aren't generating Jacoco test coverage
        condition: and(succeeded(), ne(variables['TestFromSource'], 'true'), not(and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'))))

      - task: Maven@3
        displayName: 'Run tests'
        inputs:
          mavenPomFile: pom.xml
          options: ${{ parameters.TestOptions }} $(TestOptions) -pl $(PLSkipOptions)$(ProjectList) $(AdditionalOptions)
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: $(TestGoals)
        # we want to run this when TestFromSource isn't true
        condition: and(succeeded(), ne(variables['TestFromSource'],'true'))

      - task: Maven@3
        displayName: 'Generate aggregate code coverage report'
        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'))
        inputs:
          mavenPomFile: sdk/${{ parameters.ServiceDirectory }}/pom.xml
          options: -Pcoverage
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          goals: jacoco:report-aggregate
          # we want to run this when TestFromSource isn't true
          condition: and(succeeded(), ne(variables['TestFromSource'],'true'))

      - task: Maven@3
        displayName: 'Build for From Source run'
        inputs:
          mavenPomFile: ClientFromSourcePom.xml
          goals: 'install'
          # Build and install every track 2, client, library. The purpose is to have all of
          # the libraries installed on the machine so we can simply run tests with the -amd
          # switch and we can remove the SNAFU of dependencies that bloated the ci.yml files'
          # AdditionalModules because we ended up having to list every transitive azure client
          # dependency. Note: The -T 1C says spin up a build thread per core. Since we're building
          # all of the track 2, client, libraries (which is now over 100) this effectively cuts the
          # the build time in half.
          options: ${{ parameters.BuildOptions }}
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaBuildVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
        condition: and(succeeded(), and(eq(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))

      - task: Maven@3
        displayName: 'Run tests for From Source run'
        inputs:
          mavenPomFile: ClientFromSourcePom.xml
          # For the From Source runs we don't want the -am switch as we don't care about running tests for our dependencies
          # but we do want the -amd switch because we want to run tests on things that depend on us.
          options: ${{ parameters.TestOptions }} $(TestOptions) -pl $(PLSkipOptions)$(ProjectList) -amd -T 1C
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          # The From Source runs only care about running tests for libraries within an SDK/area
          # as well as libraries which depend on them and not the other stages in the Maven
          # lifecycle that test or verify targets would execute. The libraries were already
          # compiled and installed in the previous task, this tasks only runs tests.
          goals: $(TestGoals)
        condition: and(succeeded(), and(eq(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))

      - template: ../steps/upload-repository-on-failure.yml

      - task: PublishTestResults@2
        condition: and(always(), or(ne(variables['TestFromSource'],'true'), eq(variables['ShouldRunSourceTests'],'true')))
        inputs:
          mergeTestResults: true
          testRunTitle: $(Agent.JobName)

      # Azure DevOps only seems to respect the last code coverage result published, so only do this for Windows + Java LTS.
      # Code coverage reporting is setup only for Track 2 modules.
      - task: PublishCodeCoverageResults@1
        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['JavaTestVersion'], '1.11'), eq('${{ parameters.SDKType }}', 'client'))
        inputs:
          codeCoverageTool: JaCoCo
          summaryFileLocation: sdk/${{ parameters.ServiceDirectory }}/target/site/jacoco-aggregate/jacoco.xml
          reportDirectory: sdk/${{ parameters.ServiceDirectory }}/target/site/jacoco-aggregate/
          failIfCoverageEmpty: false
