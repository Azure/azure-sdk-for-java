parameters:
  - name: SDKType
    type: string
    default: client
  - name: ServiceDirectory
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: TestPipeline
    type: boolean
    default: false
  - name: PreTestSteps
    type: object
    default: []
  - name: Matrix
    type: string
  - name: CloudConfig
    type: object
    default: {}
  - name: DependsOn
    type: object
    default: []
  - name: UsePlatformContainer
    type: boolean
    default: false
  - name: PreBuildSteps
    type: object
    default: []
  - name: TestGoals
    type: string
    default: $(TestGoals)
  - name: TestOptions
    type: string
    default: $(TestOptions)
  - name: TestParallelization
    type: string
    default: '1C'
  - name: BuildParallelization
    type: string
    default: '2C'
  - name: AdditionalLintingOptions
    type: string
    default: ''
  - name: OSName
    type: string
  - name: TimeoutInMinutes
    type: number
    default: 60

jobs:
  - job:
    displayName: 'Test'
    dependsOn:
      - ${{ parameters.DependsOn }}
    condition: and(succeeded(), ne(variables['Skip.Test'], 'true'), ne(${{ parameters.Matrix }}, '{}'))

    strategy:
      matrix: $[ ${{ parameters.Matrix }} ]

    pool:
      # 1es pipeline templates converts `image` to demands: ImageOverride under the hood
      # which is incompatible with image selection in the default non-1es hosted pools
      ${{ if eq(parameters.OSName, 'macOS') }}:
        vmImage: $(OSVmImage)
      ${{ else }}:
        image: $(OSVmImage)
      name: $(Pool)
      os: ${{ parameters.OSName }}

    ${{ if eq(parameters.UsePlatformContainer, 'true') }}:
      # Add a default so the job doesn't fail when the matrix is empty
      container: $[ variables['Container'] ]

    variables:
      - template: /eng/pipelines/templates/variables/globals.yml

    timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}

    templateContext:
      outputs:
        # Troubleshooting artifacts are creating in the staging directory under the folder 'troubleshooting'.
        # This will contain things such as heap dumps hprofs if testing hit OutOfMemory errors, log files captured
        # during testing if tests failed, and linting reports.
        - output: pipelineArtifact
          artifactName: troubleshooting-$(System.StageName)-$(System.JobName)
          targetPath: $(System.DefaultWorkingDirectory)/troubleshooting
          displayName: 'Capture troubleshooting artifacts'
          condition: and(not(succeeded()), eq(variables['HAS_TROUBLESHOOTING'], 'true'))
          sbomEnabled: false

        - output: pipelineArtifact
          artifactName: 'repository-$(System.JobName)'
          targetPath: '$(System.DefaultWorkingDirectory)'
          displayName: 'Capture repo state for analysis'
          condition: or(eq(variables['CaptureRepositoryOnFailure'], 'true'), and(failed(), eq(variables['Build.Reason'],'Schedule')))
          sbomEnabled: false

    steps:
      - template: /eng/pipelines/templates/steps/initialize-test-environment.yml
        parameters:
          CheckoutRecordings: true

      - template: /eng/common/testproxy/test-proxy-tool.yml
        parameters:
          runProxy: true

      - pwsh: |
          $files = Get-ChildItem -Path $(Build.SourcesDirectory) -Filter test-proxy.log
          foreach($file in $files){
              Write-Host "##[group]$file"
              cat $file
              Write-Host "##[endgroup]"
          }
        displayName: Dump Test-Proxy Logs
        condition: succeededOrFailed()

      # If the Java test versions isn't one of the LTS versions, or in other words is the latest Java version we're
      # testing against and that isn't an LTS version at the time (ex. latest LTS is Java 17 but we're testing against
      # Java 18), then install the latest Java version and use that to run a full build for validation of the latest
      # Java version.
      # Otherwise, run a normal test run.
      - template: /eng/pipelines/templates/steps/install-latest-jdk.yml
        parameters:
          LatestJdkFeatureVersion: $(LatestNonLtsJdkFeatureVersion)

      - template: /eng/pipelines/templates/steps/install-reporting-tools.yml
        parameters:
          JdkVersion: $(JavaTestVersion)

      - ${{ parameters.PreBuildSteps }}

      - ${{ parameters.PreTestSteps }}

      - template: /eng/pipelines/templates/steps/run-and-validate-linting.yml
        parameters:
          JavaBuildVersion: $(JavaTestVersion)
          JavadocSafeJavaBuildVersion: $(JavadocSafeJavaBuildVersion)
          AdditionalLintingOptions: ${{ parameters.AdditionalLintingOptions }}
          BuildParallelization: ${{ parameters.BuildParallelization }}
          ContinueOnError: true
          SDKType: ${{ parameters.SDKType }}

      - template: /eng/pipelines/templates/steps/build-and-test.yml
        parameters:
          ParallelTestPlayback: 'true'
          TestGoals: ${{ parameters.TestGoals }}
          TestOptions: ${{ parameters.TestOptions }}
          TestParallelization: ${{ parameters.TestParallelization }}
          BuildParallelization: ${{ parameters.BuildParallelization }}

      - template: /eng/pipelines/templates/steps/post-job-cleanup.yml

      # Shut down proxy to prevent file locks on the log file for auto-injected credscan
      # steps on windows
      - template: /eng/common/testproxy/test-proxy-tool-shutdown.yml
