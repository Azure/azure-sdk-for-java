parameters:
  - name: SDKType
    type: string
    default: client
  - name: ServiceDirectory
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: ExcludePaths
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: Artifacts
    type: object
    default: []
  - name: ReleaseArtifacts
    type: object
    default: []
  - name: PreTestSteps
    type: object
    default: []
  - name: MatrixConfigs
    type: object
  - name: AdditionalMatrixConfigs
    type: object
    default: []
  - name: MatrixFilters
    type: object
    default: []
  - name: MatrixReplace
    type: object
    default: []
  - name: PreBuildSteps
    type: object
    default: []
  - name: AdditionalLintingOptions
    type: string
    default: ''
  - name: BuildParallelization
    type: string
    default: '2C'
  - name: TestGoals
    type: string
    default: $(TestGoals)
  - name: TestOptions
    type: string
    default: $(TestOptions)
  - name: TestParallelization
    type: string
    default: '1C'
  - name: JavaBuildVersion
    type: string
    default: $(JavaBuildVersion)
  - name: TimeoutInMinutes
    type: number
    default: 60
  - name: EnvVars
    type: object
    default: {}
  - name: VersionOverride
    type: string
    default: $(VersionOverride)

jobs:
  - job: 'Build'
    # This timeout is being set high because some tasks in the pullrequest pipeline
    # run longer depending on the number of libraries being affected. For example,
    # a version increment for core or identity, AKA something that has a lot of
    # dependent libraries, which will cause a large number of pom file updates (100+).
    # All of these updates need to get scanned for API changes which can take a while,
    # and the default timeout of 60 minutes is just simply not enough.
    timeoutInMinutes: 120

    variables:
      # The ServiceDirectory is an identifier. The pullrequest's ServiceDirectory of
      # 'auto' shouldn't cause any problems
      Codeql.Enabled: true
      Codeql.BuildIdentifier: ${{ parameters.ServiceDirectory }}
      Codeql.SkipTaskAutoInjection: false
      SDKType: ${{ parameters.SDKType }}
    
    # Only run CG and codeql on internal build job
    ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      templateContext:
        sdl:
          componentgovernance:
            enabled: true
          codeql:
            binaryLanguages: java # Need to specify the language because we clone after the codeql initialize step
            compiled:
              enabled: true

    pool:
      name: $(LINUXPOOL)
      image: $(LINUXVMIMAGE)
      os: linux

    steps:
      # Skip sparse checkout for the `azure-sdk-for-<lang>-pr` private mirrored repositories
      # as we require the GitHub service connection to be loaded.
      - ${{ if not(contains(variables['Build.DefinitionName'], 'java-pr')) }}:
        - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
          parameters:
            Paths:
              - '**/*.xml'
              - '**/*.md'
              - '**/ci*.yml' # necessary for save-package-properties.yml
              - '!sdk/**/test-recordings'
              - '!sdk/**/session-records'

      - template: /eng/pipelines/templates/steps/generate-project-list-and-cache-maven-repository.yml
        parameters:
          JobType: 'Build'
          ServiceDirectory: ${{parameters.ServiceDirectory}}
          ExcludePaths: ${{parameters.ExcludePaths}}

      - task: UsePythonVersion@0
        displayName: 'Use Python $(PythonVersion)'
        inputs:
          versionSpec: $(PythonVersion)

      # This step needs to run before we update to using dev versions otherwise dependency
      # check in the script will not fully work because the versions will mismatch
      - task: PowerShell@2
        displayName: Generate directories variable for sparse checkout
        inputs:
          pwsh: true
          filePath: $(Build.SourcesDirectory)/eng/scripts/Generate-ServiceDirectories-From-Project-List.ps1
          arguments: >
            -SourcesDirectory $(Build.SourcesDirectory)
            -ProjectList $(ProjectList)

      # Skip sparse checkout for the `azure-sdk-for-<lang>-pr` private mirrored repositories
      # as we require the GitHub service connection to be loaded.
      - ${{ if not(contains(variables['Build.DefinitionName'], 'java-pr')) }}:
        - template: /eng/pipelines/templates/steps/sparse-checkout-repo-initialized.yml
          parameters:
            Paths: $(SparseCheckoutDirectories)
            SkipCheckoutNone: true

      - ${{ parameters.PreBuildSteps }}

      - script: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: 'Tag scheduled builds'
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'],'main'),eq(variables['Build.Reason'],'Schedule'))

      - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
        parameters:
          PackageNames: "azure-sdk-template,azure-sdk-template-two,azure-sdk-template-three"
          ServiceDirectory: "template"
          TestPipeline: ${{ parameters.TestPipeline }}

      # The daily dev build variable isn't used for the PullRequests pipeline but is currently used
      # to save off the packageInfo files for all ci pipeline. This needs to be skipped for the
      # PR pipeline, whose ServiceDirectory is 'auto' since the packageInfo files will be generated above.
      - ${{if ne(parameters.ServiceDirectory, 'auto')}}:
        - template: /eng/common/pipelines/templates/steps/daily-dev-build-variable.yml
          parameters:
            ServiceDirectory: ${{parameters.ServiceDirectory}}

      - task: PowerShell@2
        displayName: Setup Dev versioning
        condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
        inputs:
          pwsh: true
          filePath: eng/pipelines/scripts/Set-Dev-Versioning.ps1
          arguments: >
            -BuildNumber $(Build.BuildNumber)
        env:
          ARTIFACTSJSON: $(ArtifactsJson)

      - ${{if ne(parameters.ServiceDirectory, '')}}:
        - task: Powershell@2
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
            arguments: >
              -ServiceDirectory ${{parameters.ServiceDirectory}}
              -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
              -AddDevVersion
            pwsh: true
            workingDirectory: $(Pipeline.Workspace)
          displayName: Update package properties with dev version
          condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))

      - script: |
          python -m pip install markdown2==2.4.6 BeautifulSoup4==4.11.1
        displayName: 'pip install markdown2 and BeautifulSoup4'

      - task: Maven@4
        displayName: 'Build and Package, JDK Version: ${{ parameters.JavaBuildVersion }}'
        inputs:
          mavenPomFile: pom.xml
          goals: 'deploy'
          options: '$(DefaultOptions) -T ${{parameters.BuildParallelization}} -DskipTests -Dgenerate-overview -Dspotbugs.skip=true -Dcheckstyle.skip=true -Drevapi.skip=true -Dspotless.apply.skip=true -pl $(ProjectList) -am -DaltDeploymentRepository=id::default::file://$(System.DefaultWorkingDirectory)/build' # We include template-module so we ensure it always builds in CI
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: ${{ parameters.JavaBuildVersion }}
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: PowerShell@2
        displayName: 'Verify Required Maven Artifacts'
        inputs:
          pwsh: true
          workingDirectory: $(Agent.BuildDirectory)
          filePath: eng/scripts/Verify-Required-Maven-Artifacts.ps1
          arguments: >
            -BuildOutputDirectory $(System.DefaultWorkingDirectory)/build
            -ArtifactsList ('$(ArtifactsJson)' | ConvertFrom-Json | Select-Object name, groupId)
            -PackageInfoDir $(Build.ArtifactStagingDirectory)/PackageInfo
            -InformationAction Continue

      # This only copies the ReleaseArtifacts but for the PR pipeline just copy
      # all of the built artifacts.
      - task: PowerShell@2
        displayName: 'Copy artifacts to staging'
        inputs:
          pwsh: true
          workingDirectory: $(Agent.BuildDirectory)
          filePath: eng/scripts/Stage-MavenPackageArtifacts.ps1
          arguments: >
            -SourceDirectory $(System.DefaultWorkingDirectory)/build
            -TargetDirectory $(Build.ArtifactStagingDirectory)
            -Artifacts ('${{ replace(convertToJson(parameters.ReleaseArtifacts), '''', '`''') }}' | ConvertFrom-Json | Where-Object -Not skipPublishPackage )
            -PackageInfoDir $(Build.ArtifactStagingDirectory)/PackageInfo
            -InformationAction Continue

      - task: Powershell@2
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/scripts/Save-Package-Namespaces-Property.ps1
          arguments: >
            -ArtifactStagingDirectory $(Build.ArtifactStagingDirectory)
          pwsh: true
          workingDirectory: $(Pipeline.Workspace)
        displayName: Update package properties with namespaces

      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: 'packages'

      # Troubleshooting artifacts are creating in the staging directory under the folder 'troubleshooting'.
      # This will contain things such as heap dumps hprofs if testing hit OutOfMemory errors, log files captured
      # during testing if tests failed, and linting reports.
      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactName: troubleshooting-$(System.StageName)-$(System.JobName)
          ArtifactPath: $(System.DefaultWorkingDirectory)/troubleshooting
          SbomEnabled: false
          CustomCondition: and(not(succeeded()), eq(variables['HAS_TROUBLESHOOTING'], 'true'))

      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactName: 'repository-$(System.JobName)'
          ArtifactPath: '$(System.DefaultWorkingDirectory)'
          SbomEnabled: false
          CustomCondition: or(eq(variables['CaptureRepositoryOnFailure'], 'true'), and(failed(), eq(variables['Build.Reason'],'Schedule')))

      - template: /eng/common/pipelines/templates/steps/create-apireview.yml
        parameters:
          Artifacts: ${{parameters.ReleaseArtifacts}}

      - template: /eng/common/pipelines/templates/steps/detect-api-changes.yml

      - template: /eng/common/pipelines/templates/steps/validate-all-packages.yml
        parameters:
          Artifacts: ${{ parameters.Artifacts }}

      - template: /eng/pipelines/templates/steps/post-job-cleanup.yml

  - job: 'Analyze'
    condition: and(succeeded(), ne(variables['Skip.Analyze'], 'true'))

    pool:
      name: $(LINUXPOOL)
      image: $(LINUXVMIMAGE)
      os: linux

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(PythonVersion)'
        inputs:
          versionSpec: $(PythonVersion)

      # Skip sparse checkout for the `azure-sdk-for-<lang>-pr` private mirrored repositories
      # as we require the GitHub service connection to be loaded.
      - ${{ if not(contains(variables['Build.DefinitionName'], 'java-pr')) }}:
        - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
          parameters:
            Paths:
              - '**/*.xml'
              - '**/*.md'
              - '**/*.yml'
              - '.vscode/cspell.json'
              - '!sdk/**/test-recordings'
              - '!sdk/**/session-records'

      - task: PowerShell@2
        displayName: 'Verify versions in POM files'
        inputs:
          pwsh: true
          workingDirectory: $(Build.SourcesDirectory)
          filePath: $(Build.SourcesDirectory)/eng/versioning/pom_file_version_scanner.ps1
          arguments: -Debug:$$(IsDebug)

      - task: PythonScript@0
        displayName: 'Verify version text files'
        inputs:
          scriptPath: eng/versioning/find_unused_dependencies.py

      - template: /eng/pipelines/templates/steps/generate-project-list-and-cache-maven-repository.yml
        parameters:
          JobType: 'Analyze'
          ServiceDirectory: ${{parameters.ServiceDirectory}}
          ExcludePaths: ${{parameters.ExcludePaths}}

      - task: PowerShell@2
        displayName: Generate directories variable for sparse checkout
        inputs:
          pwsh: true
          filePath: $(Build.SourcesDirectory)/eng/scripts/Generate-ServiceDirectories-From-Project-List.ps1
          arguments: >
            -SourcesDirectory $(Build.SourcesDirectory)
            -ProjectList $(ProjectList)

      # Skip sparse checkout for the `azure-sdk-for-<lang>-pr` private mirrored repositories
      # as we require the GitHub service connection to be loaded.
      - ${{ if not(contains(variables['Build.DefinitionName'], 'java-pr')) }}:
        - template: /eng/pipelines/templates/steps/sparse-checkout-repo-initialized.yml
          parameters:
            Paths: $(SparseCheckoutDirectories)
            SkipCheckoutNone: true

      - template: /eng/common/pipelines/templates/steps/check-spelling.yml
        parameters:
          CspellConfigPath: .vscode/cspell.json
          ContinueOnError: false

      - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
        parameters:
          PackageNames: "azure-sdk-template,azure-sdk-template-two,azure-sdk-template-three"
          ServiceDirectory: "template"
          TestPipeline: ${{ parameters.TestPipeline }}

      - template: /eng/common/pipelines/templates/steps/verify-links.yml
        parameters:
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            Directory: ''
            Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)
          ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
            Directory: sdk/${{ parameters.ServiceDirectory }}
          CheckLinkGuidance: $true

      - ${{ if and(eq(variables['Build.Reason'], 'PullRequest'), eq(parameters.ServiceDirectory, 'auto')) }}:
        # NOTE: The PRServiceDirectories string is used in the two Code Generation steps below and
        # the verify samples
        - pwsh: |
            $packageInfoFiles = Get-ChildItem -Path '$(Build.ArtifactStagingDirectory)/PackageInfo' -Filter "*.json" -File
            $serviceDirectories = @()
            foreach ($packageInfoFile in $packageInfoFiles) {
                $packageInfo = Get-Content -Path $packageInfoFile | ConvertFrom-Json
                $serviceDirectories += $packageInfo.ServiceDirectory
            }
            # dedupe the list
            $serviceDirectories = $serviceDirectories | Select-Object -Unique
            $changedServicesString = $serviceDirectories -join ","
            Write-Host "changedServicesString='$changedServicesString'"
            Write-Host "##vso[task.setvariable variable=PRServiceDirectories;]$changedServicesString"
          displayName: Set PRServiceDirectories from PackageInfo files
      - ${{ else }}:
        - pwsh: |
            $changedServicesString='${{ parameters.ServiceDirectory }}'
            Write-Host "changedServicesString='$changedServicesString'"
            Write-Host "##vso[task.setvariable variable=PRServiceDirectories;]$changedServicesString"
          displayName: Set PRServiceDirectories to ServiceDirectory parameter

      - template: /eng/common/pipelines/templates/steps/verify-samples.yml
        parameters:
          ServiceDirectories: $(PRServiceDirectories)

      # Use BasePathLength of 38 instead of the default 49 as some released files fail when the number is higher.
      - template: /eng/common/pipelines/templates/steps/verify-path-length.yml
        parameters:
          SourceDirectory: $(Build.SourcesDirectory)
          BasePathLength: 38

      - ${{if ne(parameters.SDKType, 'data')}}:
        - ${{ if and(eq(variables['Build.Reason'], 'PullRequest'), eq(parameters.ServiceDirectory, 'auto')) }}:
          - template: /eng/common/pipelines/templates/steps/verify-changelogs.yml
            parameters:
              PackagePropertiesFolder: $(Build.ArtifactStagingDirectory)/PackageInfo
        - ${{ else }}:
          - ${{ each artifact in parameters.Artifacts }}:
            - ${{if ne(artifact.skipVerifyChangelog, 'true')}}:
              - template: /eng/common/pipelines/templates/steps/verify-changelog.yml
                parameters:
                  PackageName: ${{artifact.name}}
                  ServiceName: ${{parameters.ServiceDirectory}}
                  ForRelease: false

      - task: UseNode@1
        inputs:
          version: 22.x
        displayName: Use Node.js 22.x

      - task: PowerShell@2
        displayName: Verify Swagger and TypeSpec Code Generation
        inputs:
          pwsh: true
          filePath: $(Build.SourcesDirectory)/eng/scripts/Compare-CurrentToCodegeneration.ps1
          arguments: >
            -ServiceDirectories '$(PRServiceDirectories)'
            -RegenerationType 'All'

      - template: /eng/pipelines/templates/steps/run-and-validate-linting.yml
        parameters:
          JavaBuildVersion: ${{ parameters.JavaBuildVersion }}
          AdditionalLintingOptions: ${{ parameters.AdditionalLintingOptions }}
          BuildParallelization: ${{ parameters.BuildParallelization }}
          RunLinting: true
          SDKType: ${{ parameters.SDKType }}

      - template: /eng/pipelines/templates/steps/post-job-cleanup.yml

      - template: /eng/common/pipelines/templates/steps/eng-common-workflow-enforcer.yml

      # Troubleshooting artifacts are creating in the staging directory under the folder 'troubleshooting'.
      # This will contain things such as heap dumps hprofs if testing hit OutOfMemory errors, log files captured
      # during testing if tests failed, and linting reports.
      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactName: troubleshooting-$(System.StageName)-$(System.JobName)
          ArtifactPath: $(System.DefaultWorkingDirectory)/troubleshooting
          SbomEnabled: false
          CustomCondition: and(not(succeeded()), eq(variables['HAS_TROUBLESHOOTING'], 'true'))

      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactName: 'repository-$(System.JobName)'
          ArtifactPath: '$(System.DefaultWorkingDirectory)'
          SbomEnabled: false
          CustomCondition: or(eq(variables['CaptureRepositoryOnFailure'], 'true'), and(failed(), eq(variables['Build.Reason'],'Schedule')))

  - template: /eng/common/pipelines/templates/jobs/generate-job-matrix.yml
    parameters:
      JobTemplatePath: /eng/pipelines/templates/jobs/ci.tests.yml
      OsVmImage: $(LINUXVMIMAGE)
      Pool: $(LINUXPOOL)
      Os: linux
      MatrixConfigs:
        - ${{ each config in parameters.MatrixConfigs }}:
          - ${{ config }}
        - ${{ each config in parameters.AdditionalMatrixConfigs }}:
          - ${{ config }}
      ${{ if eq(parameters.ServiceDirectory, 'auto') }}:
        EnablePRGeneration: true
        PRMatrixSparseIndirect: true
        # Use a PR job batch size of 50 as the design of Java's CI doesn't increase CI times linear for each library
        # added. So, using a smaller batch size means more CI jobs that are slightly faster than fewer larger jobs.
        # Overall, using a large batch size reduces overall CI time.
        PRJobBatchSize: 50
        # This key will use the PackageInfo.Name to populate the ArtifactPackageNames
        PRMatrixKey: 'Name'
        SparseCheckoutPaths:
          - '**/*.xml'
          - '**/*.md'
          - '**/ci*.yml' # necessary for save-package-properties.yml
          - "**/*matrix*.json" # necessary for test matrix generation
        PreGenerationSteps:
          - task: UsePythonVersion@0
            displayName: 'Use Python $(PythonVersion)'
            inputs:
              versionSpec: $(PythonVersion)
          - template: /eng/common/pipelines/templates/steps/save-package-properties.yml
            parameters:
              ServiceDirectory: ${{parameters.ServiceDirectory}}
              ExcludePaths: ${{parameters.ExcludePaths}}
      MatrixFilters: ${{ parameters.MatrixFilters }}
      MatrixReplace: ${{ parameters.MatrixReplace }}
      CloudConfig:
        Cloud: Public
      AdditionalParameters:
        SDKType: ${{ parameters.SDKType }}
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        ExcludePaths: ${{ parameters.ExcludePaths }}
        TestPipeline: ${{ parameters.TestPipeline }}
        PreTestSteps: ${{ parameters.PreTestSteps }}
        PreBuildSteps: ${{ parameters.PreBuildSteps }}
        TestGoals: ${{ parameters.TestGoals }}
        TestOptions: ${{ parameters.TestOptions }}
        TestParallelization: ${{ parameters.TestParallelization }}
        BuildParallelization: ${{ parameters.BuildParallelization }}
        AdditionalLintingOptions: ${{ parameters.AdditionalLintingOptions }}
        TimeoutInMinutes: ${{ parameters.TimeoutInMinutes }}
        EnvVars: ${{ parameters.EnvVars }}
        VersionOverride: ${{ parameters.VersionOverride }}
