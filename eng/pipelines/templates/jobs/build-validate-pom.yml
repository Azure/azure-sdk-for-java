parameters:
  SDKType: bom
  ServiceDirectory: not-specified # Set a default that breaks in obvious ways.
  ValidationSteps: []

jobs:
  - job: 'BuildAndValidate'
    displayName: 'Build and Validate'

    variables:
      - template: ../variables/globals.yml

    pool:
      name: azsdk-pool-mms-ubuntu-1804-general
      vmImage: MMSUbuntu18.04

    strategy:
      matrix:
        Client Libraries:
          ArtifactName: 'packages'

    steps:
      - script: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: 'Tag scheduled builds'
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - template: /eng/common/pipelines/templates/steps/daily-dev-build-variable.yml

      - script: |
          pip install setuptools wheel
          pip install doc-warden==$(DocWardenVersion)
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: 'Verify Readmes'

      - template: ../steps/cache-maven-repository.yml

      # HACK: Ideally I wouldn't need to do this but I need to figure out the right
      #       approach here around getting this dependency installed whilst targetting
      #       the parent POMs via the root aggregeate (given they aren't listed)
      #       anywhere in the depedency graph.
      #
      #       The answer might be to finally strip out the <module /> references from
      #       the parent POMs (something we want to do anyway) and then add them to
      #       the graph so that we can build off the root POM targetting the parent
      #       projects and then it would be able to find sdk-build-tools. But for now
      #       I am more interested getting the end-to-end scenario working with this
      #       hack rather than getting bogged down.
      - task: Maven@3
        displayName: 'Install build tools'
        inputs:
          mavenPomFile: pom.xml
          goals: 'install'
          options: '-pl com.azure:sdk-build-tools -am'
          mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaBuildVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - ${{ each artifact in parameters.Artifacts }}:
        - task: Maven@3
          displayName: 'Prepare POM: ${{artifact.groupId}}:${{artifact.name}}'
          inputs:
            mavenPomFile: sdk/${{parameters.ServiceDirectory}}/${{artifact.name}}/pom.xml
            goals: 'deploy'
            options: '-pl ${{artifact.groupId}}:${{artifact.name}} -DaltDeploymentRepository=id::default::file://$(System.DefaultWorkingDirectory)/build -Ddependency-checker -Dgpg.skip'
            mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: $(JavaBuildVersion)
            jdkArchitectureOption: 'x64'
            publishJUnitResults: false

      - task: PowerShell@2
        displayName: 'Copy artifacts to staging'
        inputs:
          pwsh: true
          workingDirectory: $(Agent.BuildDirectory)
          filePath: eng/scripts/Stage-MavenPackageArtifacts.ps1
          arguments: >
            -SourceDirectory $(System.DefaultWorkingDirectory)/build
            -TargetDirectory $(Build.ArtifactStagingDirectory)
            -InformationAction Continue

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: 'Publish Artifacts $(ArtifactName)'
        artifact: '$(ArtifactName)'

      - publish: $(System.DefaultWorkingDirectory)
        condition: and(eq(variables['CaptureRepositoryOnFailure'], 'true'), failed())
        displayName: 'Capture repo state for analysis'
        artifact: repository
