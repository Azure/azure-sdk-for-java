parameters:
  - name: DependsOn
    type: object
  - name: SDKType
    type: string
  - name: Artifacts
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
    # A different environment will be passed in for service directories that have
    # live tests enabled for release and ReleaseDependsOnLiveTests is false
  - name: Environment
    type: string
    default: 'maven'

stages:
  # The signing stage is responsible for submitting binaries to ESRP for our official signing
  # where appropriate and also meeting any other signing requirements for particular artifacts,
  # in this case we do GPG signing in order to publish to Maven Central. At the moment signing
  # is protected by an approval check but this may be removed in the future.
  - stage: Signing
    dependsOn: ${{parameters.DependsOn}}
    variables:
      - template: /eng/pipelines/templates/variables/globals.yml
      - template: /eng/pipelines/templates/variables/image.yml
    jobs:
      - job: SignPackage
        timeoutInMinutes: 240
        pool:
          name: $(WINDOWSPOOL)
          image: $(WINDOWSVMIMAGE)
          os: windows
        steps:
          - checkout: azure-sdk-build-tools
            path: azure-sdk-build-tools
          - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
            parameters:
              SkipCheckoutNone: true
              Repositories:
                - Name: Azure/azure-sdk-for-java
                  Commitish: $(Build.SourceVersion)
                  WorkingDirectory: $(Pipeline.Workspace)/azure-sdk-for-java
          - template: /eng/pipelines/templates/steps/download-credscan-suppressions.yml

          - download: current
            displayName: 'Download Artifact: packages'
            artifact: packages

          # Publish the ESRP signed directory. This will still be used by the
          # Dev feed publish.
          - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
            parameters:
              ArtifactPath: '$(Pipeline.Workspace)/packages'
              ArtifactName: 'packages-signed'

          # Downloading the ESRP signed artifacts
          - download: current
            displayName: 'Download Signed Artifacts'
            artifact: packages-signed

          # gpg-sign and create the flattened directory for ESRP bulk publish
          # Note: The maven release requires the files to be local GPG signed
          # Dev feed publishes use the gpg-sign-and-deply to do it in one step
          - template: tools/gpg/gpg.yml@azure-sdk-build-tools
          - template: /eng/pipelines/templates/steps/gpg-sign-and-flatten.yml
            parameters:
              ArtifactDirectory: $(Pipeline.Workspace)/packages-signed
              OutputDirectory: $(Pipeline.Workspace)/packages-esrp-gpg-signed
              FlattenedESRPDirectory: $(Pipeline.Workspace)/packages-esrp-flattened

          # The packages-esrp-flattened will be used for the ESRP publish
          - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
            parameters:
              ArtifactPath: '$(Pipeline.Workspace)/packages-esrp-flattened'
              ArtifactName: 'packages-esrp-flattened'

  # We generate two interdependent stages for each artifact listed in the ci.yml file, creates the release
  # in GitHub. The Release stage publishes to Maven Central. Both stages require approval since they
  # effectively burn the version number. For testing of packages prior to burning the version number -
  # the Validation step below publishes a package to a "burner" feed which is cleaned up after the
  # pipeline completes.
  - ${{if and(in(variables['Build.Reason'], 'Manual', ''), eq(variables['System.TeamProject'], 'internal'))}}:
    - stage:
      displayName: 'Releasing: ${{ length(parameters.Artifacts) }} libraries'
      dependsOn: Signing
      variables:
        - template: /eng/pipelines/templates/variables/globals.yml
        - template: /eng/pipelines/templates/variables/image.yml
      condition: and(succeeded(), ne(variables['SetDevVersion'], 'true'), ne(variables['Skip.Release'], 'true'), ne(variables['Build.Repository.Name'], 'Azure/azure-sdk-for-java-pr'))
      jobs:
        - job: TagRepository
          displayName: "Create release tag"
          condition: and(succeeded(), ne(variables['Skip.TagRepository'], 'true'))
          pool:
            name: $(WINDOWSPOOL)
            image: $(WINDOWSVMIMAGE)
            os: windows
          steps:
            - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
            - template: /eng/common/pipelines/templates/steps/retain-run.yml
            # No pattern, just download everything that's been signed
            - download: current
              displayName: 'Download Artifact: packages-signed'
              artifact: packages-signed
            - ${{ each artifact in parameters.Artifacts }}:
              - template: /eng/common/pipelines/templates/steps/create-tags-and-git-release.yml
                parameters:
                  ArtifactLocation: $(Pipeline.Workspace)/packages-signed/${{artifact.groupId}}/${{artifact.name}}
                  PackageRepository: Maven
                  ReleaseSha: $(Build.SourceVersion)

        - deployment: PublishESRPPackage
          displayName: "Publish to Maven Central via ESRP"
          condition: and(succeeded(), ne(variables['Skip.PublishPackage'], 'true'))
          # There are over several hundred com.azure libraries but ESRP batch release is
          # a lot faster than releasing individual libraries. This timeout is probably a
          # a bit high but far, far lower than when releases were single library.
          timeoutInMinutes: 120
          environment: ${{ parameters.Environment }}
          dependsOn: TagRepository

          templateContext:
            type: releaseJob
            isProduction: true
            inputs:
            - input: pipelineArtifact
              artifactName: 'packages-esrp-flattened'
              targetPath: '$(Pipeline.Workspace)/packages-esrp-flattened'

          pool:
            name: azsdk-pool-mms-win-2022-general
            image: azsdk-pool-mms-win-2022-1espt
            os: windows
          strategy:
            runOnce:
              deploy:
                steps:
                  - template: /eng/pipelines/templates/steps/java-esrp-publishing.yml
                    parameters:
                      FlattenedDirectory: $(Pipeline.Workspace)/packages-esrp-flattened

        - job: PublishDevFeedPackage
          displayName: "Publish to Java Dev feed"
          condition: and(succeeded(), ne(variables['Skip.PublishPackage'], 'true'))
          # This timeout shouldn't be necessary once we're able to parallelize better. Right now,
          # this is here to ensure larger areas (30+) libraries don't time out.
          timeoutInMinutes: 120
          dependsOn: PublishESRPPackage
          pool:
            name: azsdk-pool-mms-win-2022-general
            image: azsdk-pool-mms-win-2022-1espt
            os: windows
          steps:
            - checkout: azure-sdk-build-tools
              path: azure-sdk-build-tools
            - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
              parameters:
                SkipCheckoutNone: true
                Repositories:
                  - Name: Azure/azure-sdk-for-java
                    Commitish: $(Build.SourceVersion)
                    WorkingDirectory: $(Pipeline.Workspace)/azure-sdk-for-java
            - template: /eng/pipelines/templates/steps/download-credscan-suppressions.yml
            - download: current
              displayName: 'Download Artifacts'
              artifact: packages-signed
            - template: tools/gpg/gpg.yml@azure-sdk-build-tools
            # After publishing to Maven, publish to the azure-sdk-for-java feed. The reason for
            # this is that the azure-sdk-for-java feed will have the package available immediately
            # whereas Maven can take several hours for the package to become available.
            - template: /eng/pipelines/templates/steps/java-dev-feed-publishing.yml
              parameters:
                ArtifactDirectory: $(Pipeline.Workspace)/packages-signed
                RepositoryUrl: https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-java/maven/v1
                Target: JavaDevFeed
                JavaRepoRoot: $(Pipeline.Workspace)/azure-sdk-for-java
            - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
              parameters:
                ArtifactName: packages-javadevfeed-$(System.JobAttempt)
                ArtifactPath: $(Pipeline.Workspace)/packages-signed
            - template: /eng/common/pipelines/templates/steps/create-apireview.yml
              parameters:
                ArtifactPath: $(Pipeline.Workspace)/packages-signed
                Artifacts: ${{parameters.Artifacts}}
                ConfigFileDir: $(Pipeline.Workspace)/packages-signed/PackageInfo
                MarkPackageAsShipped: true
                ArtifactName: packages-signed
                SourceRootPath: $(Pipeline.Workspace)/azure-sdk-for-java

        - job: UpdatePackageVersion
          displayName: "Update Package Version"
          condition: and(succeeded(), ne(variables['Skip.UpdatePackageVersion'], 'true'))
          dependsOn: PublishESRPPackage
          variables:
            - template: /eng/pipelines/templates/variables/globals.yml
            - name: ArtifactsJson
              value: '${{ convertToJson(parameters.Artifacts) }}'
          pool:
            name: $(WINDOWSPOOL)
            image: $(WINDOWSVMIMAGE)
            os: windows
          steps:
            - download: none

            - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
              parameters:
                Paths:
                  - '**/*.xml'
                  - '**/*.md'
                  - '!sdk/**/test-recordings/*'
                  - '!sdk/**/session-records/*'

            - task: UsePythonVersion@0
              displayName: 'Use Python $(PythonVersion)'
              inputs:
                versionSpec: $(PythonVersion)

            # Apply the version increment to each library, which only updates the version_client.txt file,
            # and then call to update_versions will then apply all of the updates.
            - pwsh: |
                $ArtifactsList = $('$(ArtifactsJson)' | ConvertFrom-Json | Select-Object name, groupId)
                $ArtifactsList | Format-Table -Property GroupId, Name | Out-String | Write-Host
                python --version
                foreach($artifact in $ArtifactsList) {
                  python eng/versioning/set_versions.py --build-type ${{ parameters.SDKType }} --increment-version --ai $($artifact.name) --gi $($artifact.groupId)
                }
              displayName: Increment package versions

            - script: |
                python --version
                python eng/versioning/update_versions.py --update-type library --build-type ${{ parameters.SDKType }} --avi --sr
              displayName: Update pom files for incremented versions

            - template: /eng/common/pipelines/templates/steps/create-pull-request.yml
              parameters:
                PRBranchName: increment-package-version-patch-release-$(Build.BuildId)
                CommitMsg: "Increment package versions for patch releases"
                PRTitle: "Increment versions for patch releases"
                CloseAfterOpenForTesting: '${{ parameters.TestPipeline }}'

        - job: PublishDocsMs
          displayName: Docs.MS Release
          condition: and(succeeded(), ne(variables['Skip.PublishDocs'], 'true'))
          timeoutInMinutes: 180
          dependsOn: PublishDevFeedPackage

          pool:
            name: $(LINUXPOOL)
            image: $(LINUXVMIMAGE)
            os: linux

          variables:
            - template: /eng/pipelines/templates/variables/globals.yml

          steps:
            - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
              parameters:
                Paths:
                  - sdk/**/*.md
                  - '!**/pom*.xml'
            - download: current
              displayName: 'Download Artifact: packages'
              artifact: packages

            - template: /eng/pipelines/templates/steps/mvn-linux-repository-settings.yml

            - template: /eng/pipelines/templates/steps/install-rex-validation-tool.yml

            - template: /eng/common/pipelines/templates/steps/update-docsms-metadata.yml
              parameters:
                PackageInfoLocations:
                  - ${{ each artifact in parameters.Artifacts }}:
                    - ${{if ne(artifact.skipPublishDocMs, 'true')}}:
                      - $(Pipeline.Workspace)/packages/PackageInfo/${{artifact.name}}.json
                WorkingDirectory: $(System.DefaultWorkingDirectory)
                TargetDocRepoOwner: $(DocRepoOwner)
                TargetDocRepoName: $(DocRepoName)
                Language: 'java'
                SparseCheckoutPaths:
                  - docs-ref-services/
                  - metadata/

        - job: PublishDocs
          displayName: Publish Docs to GitHubIO Blob Storage
          condition: and(succeeded(), ne(variables['Skip.PublishDocs'], 'true'))
          timeoutInMinutes: 120
          dependsOn: PublishESRPPackage
          variables:
            - template: /eng/pipelines/templates/variables/globals.yml
          pool:
            name: $(WINDOWSPOOL)
            image: $(WINDOWSVMIMAGE)
            os: windows
          steps:
            - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
            - download: current
              displayName: 'Download Artifact: packages-signed'
              artifact: packages-signed
            - ${{ each artifact in parameters.Artifacts }}:
              - ${{if ne(artifact.skipPublishDocGithubIo, 'true')}}:
                - pwsh: |
                    Get-ChildItem -Recurse $(Pipeline.Workspace)/packages-signed/${{artifact.groupId}}/${{artifact.name}}
                  workingDirectory: $(Pipeline.Workspace)
                  displayName: Output Visible Artifacts
                - template: /eng/common/pipelines/templates/steps/publish-blobs.yml
                  parameters:
                    FolderForUpload: '$(Pipeline.Workspace)/packages-signed/${{artifact.groupId}}/${{artifact.name}}'
                    TargetLanguage: 'java'
                    ArtifactLocation: $(Pipeline.Workspace)/packages-signed/${{artifact.groupId}}/${{artifact.name}}
