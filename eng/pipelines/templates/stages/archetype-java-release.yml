parameters:
  - name: DependsOn
    type: string
  - name: ServiceDirectory
    type: string
  - name: SDKType
    type: string
  - name: Artifacts
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: ArtifactName
    type: string
    default: 'not-specified'
  - name: TargetDocRepoOwner
    type: string
    default: ''
  - name: TargetDocRepoName
    type: string
    default: ''
  - name: EnableIntegrationStage
    type: boolean
    default: true
  - name: WindowsPool
    type: string
    default: azsdk-pool-mms-win-2019-general
  - name: LinuxPool
    type: string
    default: azsdk-pool-mms-ubuntu-1804-general  

stages:
  # The signing stage is responsible for submitting binaries to ESRP for our official signing
  # where appropriate and also meeting any other signing requirements for particular artifacts,
  # in this case we do GPG signing in order to publish to Maven Central. At the moment signing
  # is protected by an approval check but this may be removed in the future.
  - stage: Signing
    dependsOn: ${{parameters.DependsOn}}
    jobs:
      - deployment: SignPackage
        environment: esrp
        timeoutInMinutes: 20
        variables:
          - template: ../variables/globals.yml
        pool:
          vmImage: ubuntu-18.04
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - download: current
                  artifact: ${{parameters.ArtifactName}}
                  timeoutInMinutes: 5

                - template: tools/java-esrp-signing/java-esrp-signing.yml@azure-sdk-build-tools
                  parameters:
                    Artifacts: ${{parameters.Artifacts}}
                    ArtifactDirectory: $(Pipeline.Workspace)/${{parameters.ArtifactName}}

                - publish: $(Pipeline.Workspace)/${{parameters.ArtifactName}}
                  artifact: ${{parameters.ArtifactName}}-signed
                  displayName: 'Store signed packages in ${{parameters.ArtifactName}}-signed artifact'
                  timeoutInMinutes: 5

  # We generate two interdepdent stages for each artifact listed in the ci.yml file, creates the release
  # in GitHub. The Release stage publishes to Maven Central. Both stages require approval since they
  # effectively burn the version number. For testing of packages prior to burning the version number -
  # the Validation step below publishes a package to a "burner" feed which is cleaned up after the
  # pipeline completes.
  - ${{if and(eq(variables['Build.Reason'], 'Manual'), eq(variables['System.TeamProject'], 'internal'))}}:
    - ${{ each artifact in parameters.Artifacts }}:
      - stage: Release_${{artifact.safeName}}
        displayName: 'Release: ${{artifact.name}}'
        dependsOn: Signing
        condition: and(succeeded(), ne(variables['SetDevVersion'], 'true'), ne(variables['Skip.Release'], 'true'), ne(variables['Build.Repository.Name'], 'Azure/azure-sdk-for-java-pr'))
        jobs:
          - job: VerifyReleaseVersion
            displayName: "Verify release version"
            condition: ne(variables['Skip.VersionVerification'], 'true')
            variables:
              - template: ../variables/globals.yml
            pool:
              vmImage: ubuntu-18.04

            steps:
              - ${{if eq(parameters.TestPipeline, 'true')}}:
                - task: PowerShell@2
                  displayName: Prep template pipeline for release
                  condition: succeeded()
                  inputs:
                    pwsh: true
                    workingDirectory: $(Build.SourcesDirectory)
                    filePath: eng/scripts/SetTestPipelineVersion.ps1
                    arguments: '-BuildID $(Build.BuildId)'

              - task: UsePythonVersion@0
                displayName: 'Use Python 3.6'
                inputs:
                  versionSpec: '3.6'

              - script: |
                  python --version
                  python eng/versioning/set_versions.py --build-type ${{parameters.SDKType}} --vv --ai ${{artifact.name}} --gi ${{artifact.groupId}}
                displayName: 'Verify version for release'

              - pwsh: |
                  $(Build.SourcesDirectory)/eng/versioning/scan_for_unreleased_dependencies.ps1 ${{artifact.groupId}} ${{artifact.name}} $(Build.SourcesDirectory)/sdk/${{parameters.ServiceDirectory}}
                displayName: "Verify no unreleased dependencies"

              - ${{if ne(parameters.SDKType, 'data')}}:
                - template: /eng/common/pipelines/templates/steps/verify-changelog.yml
                  parameters:
                    PackageName: ${{artifact.name}}
                    ServiceName: ${{parameters.ServiceDirectory}}
                    ForRelease: true


          - deployment: TagRepository
            displayName: "Create release tag"
            condition: and(succeeded(), ne(variables['Skip.TagRepository'], 'true'))
            environment: github
            dependsOn: VerifyReleaseVersion
            variables:
              - template: ../variables/globals.yml
            pool:
              vmImage: vs2017-win2016
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                    - template: /eng/common/pipelines/templates/steps/create-tags-and-git-release.yml
                      parameters:
                        ArtifactLocation: $(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed/${{artifact.groupId}}/${{artifact.name}}
                        PackageRepository: Maven
                        ReleaseSha: $(Build.SourceVersion)

          - ${{if ne(artifact.skipPublishPackage, 'true')}}:
            - deployment: PublishPackage
              displayName: "Publish to Maven Central"
              condition: and(succeeded(), ne(variables['Skip.PublishPackage'], 'true'))
              environment: maven
              dependsOn: TagRepository
              variables:
                - template: ../variables/globals.yml
              pool:
                vmImage: vs2017-win2016
              strategy:
                runOnce:
                  deploy:
                    steps:
                      - checkout: self
                        path: azure-sdk-for-java
                      - checkout: azure-sdk-build-tools
                        path: azure-sdk-build-tools
                      - template: tools/gpg/gpg.yml@azure-sdk-build-tools
                      - template: /eng/pipelines/templates/steps/java-publishing.yml
                        parameters:
                          ArtifactID: ${{artifact.name}}
                          GroupID: ${{artifact.groupId}}
                          ArtifactDirectory: $(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed
                          Target: MavenCentral
                          BuildToolsPath: $(Pipeline.Workspace)/azure-sdk-build-tools
                          JavaRepoRoot: $(Pipeline.Workspace)/azure-sdk-for-java
                      # After publishing to Maven, publish to the azure-sdk-for-java feed. The reason for
                      # this is that the azure-sdk-for-java feed will have the package available immediately
                      # whereas Maven can take several hours for the package to become available.
                      - template: /eng/pipelines/templates/steps/java-publishing.yml
                        parameters:
                          ArtifactID: ${{artifact.name}}
                          GroupID: ${{artifact.groupId}}
                          ArtifactDirectory: $(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed
                          RepositoryUrl: https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-java/maven/v1
                          Target: JavaDevFeed
                          BuildToolsPath: $(Pipeline.Workspace)/azure-sdk-build-tools
                          JavaRepoRoot: $(Pipeline.Workspace)/azure-sdk-for-java

          - ${{if ne(artifact.skipPublishDocMs, 'true')}}:
            - deployment: PublicDocsMs
              displayName: "Publish Updates for Docs.MS"
              condition: and(succeeded(), ne(variables['Skip.PublishDocs'], 'true'))
              environment: github
              dependsOn: PublishPackage
              variables:
                CIConfigs: "{'targets':[{'path_to_config':'package.json','mode':'Preview','monikerid':'1','content_folder':'docs-ref-services/preview'},{'path_to_config':'package.json','mode':'Latest','monikerid':'0','content_folder':'docs-ref-services/latest'}]}"
                skipComponentGovernanceDetection: true
              pool:
                vmImage: vs2017-win2016
              strategy:
                runOnce:
                  deploy:
                    steps:
                      - checkout: self
                      - template: /eng/common/pipelines/templates/steps/get-pr-owners.yml
                        parameters:
                          TargetVariable: "OwningGHUser"
                          ServiceDirectory: ${{parameters.ServiceDirectory}}
                      - template: /eng/common/pipelines/templates/steps/docs-metadata-release.yml
                        parameters:
                          ArtifactLocation: $(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed/${{artifact.groupId}}/${{artifact.name}}
                          PackageRepository: Maven
                          ReleaseSha: $(Build.SourceVersion)
                          WorkingDirectory: $(System.DefaultWorkingDirectory)
                          TargetDocRepoOwner: ${{parameters.TargetDocRepoOwner}}
                          TargetDocRepoName: ${{parameters.TargetDocRepoName}}
                          PRBranchName: onboarding-${{artifact.name}}-$(Build.BuildId)
                          ArtifactName: ${{artifact.name}}
                          Language: 'java'
                          DocRepoDestinationPath: 'docs-ref-services/'
                          GHReviewersVariable: 'OwningGHUser'
                          CIConfigs: $(CIConfigs)
                          CloseAfterOpenForTesting: '${{ parameters.TestPipeline }}'
                          SkipPackageJson: ${{artifact.skipUpdatePackageJson}}

          - ${{if ne(artifact.skipPublishDocGithubIo, 'true')}}:
            - deployment: PublishDocs
              displayName: Publish Docs to GitHubIO Blob Storage
              condition: and(succeeded(), ne(variables['Skip.PublishDocs'], 'true'))
              environment: githubio
              dependsOn: PublishPackage
              variables:
                - template: ../variables/globals.yml
              pool:
                vmImage: windows-2019
              strategy:
                runOnce:
                  deploy:
                    steps:
                      - checkout: self
                      - pwsh: |
                          Get-ChildItem -Recurse $(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed/${{artifact.groupId}}/${{artifact.name}}
                        workingDirectory: $(Pipeline.Workspace)
                        displayName: Output Visible Artifacts
                      - template: /eng/common/pipelines/templates/steps/publish-blobs.yml
                        parameters:
                          FolderForUpload: '$(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed/${{artifact.groupId}}/${{artifact.name}}'
                          BlobSASKey: '$(azure-sdk-docs-prod-sas)'
                          BlobName: '$(azure-sdk-docs-prod-blob-name)'
                          TargetLanguage: 'java'
                          ArtifactLocation: $(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed/${{artifact.groupId}}/${{artifact.name}}
                          # we override the regular script path because we have cloned the build tools repo as a separate artifact.
                          ScriptPath: 'eng/common/scripts/copy-docs-to-blobstorage.ps1'

          - ${{if ne(artifact.skipUpdatePackageVersion, 'true')}}:
            - deployment: UpdatePackageVersion
              displayName: "Update Package Version"
              condition: and(succeeded(), ne(variables['Skip.UpdatePackageVersion'], 'true'))
              environment: github
              dependsOn: PublishPackage
              variables:
                - template: ../variables/globals.yml
              pool:
                vmImage: windows-2019
              strategy:
                runOnce:
                  deploy:
                    steps:
                      - checkout: self

                      - task: UsePythonVersion@0
                        displayName: 'Use Python 3.6'
                        inputs:
                          versionSpec: '3.6'

                      - script: |
                          python --version
                          python eng/versioning/set_versions.py --build-type ${{ parameters.SDKType }} --increment-version --ai ${{ artifact.name }} --gi ${{ artifact.groupId }}
                        displayName: Increment package version for ${{ artifact.groupId }} ${{ artifact.name }}

                      - script: |
                          python --version
                          python eng/versioning/update_versions.py --update-type library --build-type ${{ parameters.SDKType }} --avi --sr
                        displayName: Update pom files for new version of ${{ artifact.groupId }} ${{ artifact.name }}

                      - template: /eng/common/pipelines/templates/steps/create-pull-request.yml
                        parameters:
                          PRBranchName: increment-package-version-${{ parameters.ServiceDirectory }}-$(Build.BuildId)
                          CommitMsg: "Increment package version after release of ${{ artifact.groupId }} ${{ artifact.name }}"
                          PRTitle: "Increment version for ${{ parameters.ServiceDirectory }} releases"
                          CloseAfterOpenForTesting: '${{ parameters.TestPipeline }}'

  - ${{if ne(parameters.EnableIntegrationStage, false)}}:
    - stage: Integration
      dependsOn: Signing
      jobs:
      - job: PublishPackages
        condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
        displayName: Publish package to daily feed
        variables:
          - template: ../variables/globals.yml
          - name: RepositoryUrl
            value: https://pkgs.dev.azure.com/azure-sdk/internal/_packaging/azure-sdk-for-java-pr/maven/v1

        pool:
          vmImage: vs2017-win2016
        steps:
        - checkout: self
          path: azure-sdk-for-java
        - checkout: azure-sdk-build-tools
          path: azure-sdk-build-tools

        - download: current
          artifact: ${{parameters.ArtifactName}}-signed
        - pwsh: |
            # For safety default to publishing to the private feed.
            # Publish to https://pkgs.dev.azure.com/azure-sdk/internal/_packaging/azure-sdk-for-java-pr/maven/v1
            if ('$(Build.Repository.Name)' -eq 'Azure/azure-sdk-for-java') {
              # Publish to the public feed
              # Publish to https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-java/maven/v1
              echo "##vso[task.setvariable variable=RepositoryUrl]https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-java/maven/v1"
              echo "Using Java Public Dev Feed"
            } else {
              echo "Using Java Private Dev Feed"
            }
          displayName: Setup TargetFeed
          timeoutInMinutes: 5

        - template: tools/gpg/gpg.yml@azure-sdk-build-tools

        - ${{ each artifact in parameters.Artifacts }}:
          - ${{if ne(artifact.skipPublishDevFeed, 'true')}}:
            - template: /eng/pipelines/templates/steps/java-publishing.yml
              parameters:
                ArtifactID: ${{artifact.name}}
                GroupID: ${{artifact.groupId}}
                ArtifactDirectory: $(Pipeline.Workspace)/${{parameters.ArtifactName}}-signed
                RepositoryUrl: $(RepositoryUrl)
                Target: JavaDevFeed
                BuildToolsPath: $(Pipeline.Workspace)/azure-sdk-build-tools
                JavaRepoRoot: $(Pipeline.Workspace)/azure-sdk-for-java
