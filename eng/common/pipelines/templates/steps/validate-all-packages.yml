parameters:
  - name: ArtifactPath
    type: string
    default: $(Build.ArtifactStagingDirectory)
  - name: Artifacts
    type: object
    default: []
  - name: ConfigFileDir
    type: string
    default: $(Build.ArtifactStagingDirectory)/PackageInfo
  - name: PackageInfoFiles
    type: object
    default: []

steps:
 - ${{ if and(ne(variables['Skip.PackageValidation'], 'true'), and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))) }}:
    - pwsh: |
        echo "##vso[task.setvariable variable=SetAsReleaseBuild]false"
      displayName: "Set as release build"
      condition: and(succeeded(), eq(variables['SetAsReleaseBuild'], ''))

    - ${{ if eq(length(parameters.PackageInfoFiles), 0) }}:
      - task: AzureCLI@2
        inputs:
          azureSubscription: opensource-api-connection
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $(Build.SourcesDirectory)/eng/common/scripts/Validate-All-Packages.ps1 `
              -ArtifactList ('${{ convertToJson(parameters.Artifacts) }}' | ConvertFrom-Json | Select-Object Name) `
              -ArtifactPath ${{ parameters.ArtifactPath }} `
              -RepoRoot $(Build.SourcesDirectory) `
              -APIKey $(azuresdk-apiview-apikey) `
              -BuildDefinition $(System.CollectionUri)$(System.TeamProject)/_build?definitionId=$(System.DefinitionId) `
              -PipelineUrl $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId) `
              -IsReleaseBuild $$(SetAsReleaseBuild)
          workingDirectory: $(Pipeline.Workspace)
        displayName: Validate packages and update work items
        continueOnError: true
        condition: >-
          and(
            succeededOrFailed(),
            not(endsWith(variables['Build.Repository.Name'], '-pr'))
          )
    - ${{ else }}:
      - task: AzureCLI@2
        inputs:
          azureSubscription: opensource-api-connection
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $(Build.SourcesDirectory)/eng/common/scripts/Validate-All-Packages2.ps1 `
              -PackageInfoFiles ('${{ convertToJson(parameters.PackageInfoFiles) }}'.Replace("\", "\\").Replace("\\", "/") | ConvertFrom-Json -NoEnumerate) `
              -ArtifactPath ${{ parameters.ArtifactPath }} `
              -RepoRoot $(Build.SourcesDirectory) `
              -APIKey $(azuresdk-apiview-apikey) `
              -BuildDefinition $(System.CollectionUri)$(System.TeamProject)/_build?definitionId=$(System.DefinitionId) `
              -PipelineUrl $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId) `
              -IsReleaseBuild $$(SetAsReleaseBuild)
          workingDirectory: $(Pipeline.Workspace)
        displayName: Validate packages and update work items
        continueOnError: true
        condition: >-
          and(
            succeededOrFailed(),
            not(endsWith(variables['Build.Repository.Name'], '-pr'))
          )