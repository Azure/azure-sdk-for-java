/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.engagementfabric.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.engagementfabric.AccountPatch;
import com.microsoft.azure.management.engagementfabric.RegenerateKeyParameter;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Accounts.
 */
public class AccountsInner implements InnerSupportsGet<AccountInner>, InnerSupportsDelete<Void>, InnerSupportsListing<AccountInner> {
    /** The Retrofit service to perform REST calls. */
    private AccountsService service;
    /** The service client containing this operation class. */
    private EngagementFabricImpl client;

    /**
     * Initializes an instance of AccountsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AccountsInner(Retrofit retrofit, EngagementFabricImpl client) {
        this.service = retrofit.create(AccountsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Accounts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AccountsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Body AccountInner account, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body AccountPatch accountPatch, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EngagementFabric/Accounts")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/listKeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts regenerateKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/regenerateKey")
        Observable<Response<ResponseBody>> regenerateKey(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Body RegenerateKeyParameter parameter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Accounts listChannelTypes" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/listChannelTypes")
        Observable<Response<ResponseBody>> listChannelTypes(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountInner object if successful.
     */
    public AccountInner getByResourceGroup(String resourceGroupName, String accountName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * Get the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountInner> getByResourceGroupAsync(String resourceGroupName, String accountName, final ServiceCallback<AccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * Get the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<AccountInner> getByResourceGroupAsync(String resourceGroupName, String accountName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<AccountInner>, AccountInner>() {
            @Override
            public AccountInner call(ServiceResponse<AccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<ServiceResponse<AccountInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or Update the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param account The EngagementFabric account description
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountInner object if successful.
     */
    public AccountInner createOrUpdate(String resourceGroupName, String accountName, AccountInner account) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, account).toBlocking().single().body();
    }

    /**
     * Create or Update the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param account The EngagementFabric account description
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountInner> createOrUpdateAsync(String resourceGroupName, String accountName, AccountInner account, final ServiceCallback<AccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, account), serviceCallback);
    }

    /**
     * Create or Update the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param account The EngagementFabric account description
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<AccountInner> createOrUpdateAsync(String resourceGroupName, String accountName, AccountInner account) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, account).map(new Func1<ServiceResponse<AccountInner>, AccountInner>() {
            @Override
            public AccountInner call(ServiceResponse<AccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or Update the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param account The EngagementFabric account description
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<ServiceResponse<AccountInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, AccountInner account) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (account == null) {
            throw new IllegalArgumentException("Parameter account is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(account);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, accountName, account, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String accountName) {
        deleteWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * Delete the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * Delete the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String accountName) {
        return deleteWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountInner object if successful.
     */
    public AccountInner update(String resourceGroupName, String accountName) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountInner> updateAsync(String resourceGroupName, String accountName, final ServiceCallback<AccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<AccountInner> updateAsync(String resourceGroupName, String accountName) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<AccountInner>, AccountInner>() {
            @Override
            public AccountInner call(ServiceResponse<AccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<ServiceResponse<AccountInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        AccountPatch accountPatch = new AccountPatch();
        accountPatch.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), accountPatch, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param tags The tags of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountInner object if successful.
     */
    public AccountInner update(String resourceGroupName, String accountName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, tags).toBlocking().single().body();
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param tags The tags of the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountInner> updateAsync(String resourceGroupName, String accountName, Map<String, String> tags, final ServiceCallback<AccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName, tags), serviceCallback);
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param tags The tags of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<AccountInner> updateAsync(String resourceGroupName, String accountName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, tags).map(new Func1<ServiceResponse<AccountInner>, AccountInner>() {
            @Override
            public AccountInner call(ServiceResponse<AccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param tags The tags of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountInner object
     */
    public Observable<ServiceResponse<AccountInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        AccountPatch accountPatch = new AccountPatch();
        accountPatch.withTags(tags);
        return service.update(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), accountPatch, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List the EngagementFabric accounts in given subscription.
     *
     * @return the PagedList<AccountInner> object if successful.
     */
    public PagedList<AccountInner> list() {
        PageImpl<AccountInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<AccountInner>(page) {
            @Override
            public Page<AccountInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * List the EngagementFabric accounts in given subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AccountInner>> listAsync(final ServiceCallback<List<AccountInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List the EngagementFabric accounts in given subscription.
     *
     * @return the observable to the List&lt;AccountInner&gt; object
     */
    public Observable<Page<AccountInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<AccountInner>>, Page<AccountInner>>() {
            @Override
            public Page<AccountInner> call(ServiceResponse<List<AccountInner>> response) {
                PageImpl<AccountInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * List the EngagementFabric accounts in given subscription.
     *
     * @return the observable to the List&lt;AccountInner&gt; object
     */
    public Observable<ServiceResponse<List<AccountInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<AccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<AccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AccountInner>> result = listDelegate(response);
                        List<AccountInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<AccountInner>> clientResponse = new ServiceResponse<List<AccountInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AccountInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List EngagementFabric accounts in given resource group.
     *
     * @param resourceGroupName Resource Group Name
     * @return the PagedList<AccountInner> object if successful.
     */
    public PagedList<AccountInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<AccountInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<AccountInner>(page) {
            @Override
            public Page<AccountInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * List EngagementFabric accounts in given resource group.
     *
     * @param resourceGroupName Resource Group Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AccountInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<AccountInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * List EngagementFabric accounts in given resource group.
     *
     * @param resourceGroupName Resource Group Name
     * @return the observable to the List&lt;AccountInner&gt; object
     */
    public Observable<Page<AccountInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<AccountInner>>, Page<AccountInner>>() {
            @Override
            public Page<AccountInner> call(ServiceResponse<List<AccountInner>> response) {
                PageImpl<AccountInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * List EngagementFabric accounts in given resource group.
     *
     * @param resourceGroupName Resource Group Name
     * @return the observable to the List&lt;AccountInner&gt; object
     */
    public Observable<ServiceResponse<List<AccountInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<AccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<AccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AccountInner>> result = listByResourceGroupDelegate(response);
                        List<AccountInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<AccountInner>> clientResponse = new ServiceResponse<List<AccountInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AccountInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List keys of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;KeyDescriptionInner&gt; object if successful.
     */
    public List<KeyDescriptionInner> listKeys(String resourceGroupName, String accountName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * List keys of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<KeyDescriptionInner>> listKeysAsync(String resourceGroupName, String accountName, final ServiceCallback<List<KeyDescriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listKeysWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * List keys of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;KeyDescriptionInner&gt; object
     */
    public Observable<List<KeyDescriptionInner>> listKeysAsync(String resourceGroupName, String accountName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<List<KeyDescriptionInner>>, List<KeyDescriptionInner>>() {
            @Override
            public List<KeyDescriptionInner> call(ServiceResponse<List<KeyDescriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List keys of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;KeyDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<KeyDescriptionInner>>> listKeysWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<KeyDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<KeyDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<KeyDescriptionInner>> result = listKeysDelegate(response);
                        List<KeyDescriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<KeyDescriptionInner>> clientResponse = new ServiceResponse<List<KeyDescriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<KeyDescriptionInner>> listKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<KeyDescriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<KeyDescriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Regenerate key of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param parameter Parameters specifying the key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KeyDescriptionInner object if successful.
     */
    public KeyDescriptionInner regenerateKey(String resourceGroupName, String accountName, RegenerateKeyParameter parameter) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, accountName, parameter).toBlocking().single().body();
    }

    /**
     * Regenerate key of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param parameter Parameters specifying the key to be regenerated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<KeyDescriptionInner> regenerateKeyAsync(String resourceGroupName, String accountName, RegenerateKeyParameter parameter, final ServiceCallback<KeyDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, accountName, parameter), serviceCallback);
    }

    /**
     * Regenerate key of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param parameter Parameters specifying the key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyDescriptionInner object
     */
    public Observable<KeyDescriptionInner> regenerateKeyAsync(String resourceGroupName, String accountName, RegenerateKeyParameter parameter) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, accountName, parameter).map(new Func1<ServiceResponse<KeyDescriptionInner>, KeyDescriptionInner>() {
            @Override
            public KeyDescriptionInner call(ServiceResponse<KeyDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate key of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param parameter Parameters specifying the key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyDescriptionInner object
     */
    public Observable<ServiceResponse<KeyDescriptionInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String accountName, RegenerateKeyParameter parameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (parameter == null) {
            throw new IllegalArgumentException("Parameter parameter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameter);
        return service.regenerateKey(this.client.subscriptionId(), resourceGroupName, accountName, parameter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<KeyDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<KeyDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<KeyDescriptionInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<KeyDescriptionInner> regenerateKeyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<KeyDescriptionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<KeyDescriptionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List available EngagementFabric channel types and functions.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChannelTypeDescriptionListInner object if successful.
     */
    public ChannelTypeDescriptionListInner listChannelTypes(String resourceGroupName, String accountName) {
        return listChannelTypesWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * List available EngagementFabric channel types and functions.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChannelTypeDescriptionListInner> listChannelTypesAsync(String resourceGroupName, String accountName, final ServiceCallback<ChannelTypeDescriptionListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listChannelTypesWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * List available EngagementFabric channel types and functions.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChannelTypeDescriptionListInner object
     */
    public Observable<ChannelTypeDescriptionListInner> listChannelTypesAsync(String resourceGroupName, String accountName) {
        return listChannelTypesWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<ChannelTypeDescriptionListInner>, ChannelTypeDescriptionListInner>() {
            @Override
            public ChannelTypeDescriptionListInner call(ServiceResponse<ChannelTypeDescriptionListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List available EngagementFabric channel types and functions.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChannelTypeDescriptionListInner object
     */
    public Observable<ServiceResponse<ChannelTypeDescriptionListInner>> listChannelTypesWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listChannelTypes(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChannelTypeDescriptionListInner>>>() {
                @Override
                public Observable<ServiceResponse<ChannelTypeDescriptionListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChannelTypeDescriptionListInner> clientResponse = listChannelTypesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ChannelTypeDescriptionListInner> listChannelTypesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ChannelTypeDescriptionListInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ChannelTypeDescriptionListInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
