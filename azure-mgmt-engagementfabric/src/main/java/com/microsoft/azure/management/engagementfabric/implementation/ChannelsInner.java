/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.engagementfabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Channels.
 */
public class ChannelsInner {
    /** The Retrofit service to perform REST calls. */
    private ChannelsService service;
    /** The service client containing this operation class. */
    private EngagementFabricImpl client;

    /**
     * Initializes an instance of ChannelsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ChannelsInner(Retrofit retrofit, EngagementFabricImpl client) {
        this.service = retrofit.create(ChannelsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Channels to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ChannelsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Channels get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("channelName") String channelName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Channels createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("channelName") String channelName, @Body ChannelInner channel, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Channels delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("channelName") String channelName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.engagementfabric.Channels listByAccount" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels")
        Observable<Response<ResponseBody>> listByAccount(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChannelInner object if successful.
     */
    public ChannelInner get(String resourceGroupName, String accountName, String channelName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, channelName).toBlocking().single().body();
    }

    /**
     * Get the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChannelInner> getAsync(String resourceGroupName, String accountName, String channelName, final ServiceCallback<ChannelInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, accountName, channelName), serviceCallback);
    }

    /**
     * Get the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChannelInner object
     */
    public Observable<ChannelInner> getAsync(String resourceGroupName, String accountName, String channelName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, channelName).map(new Func1<ServiceResponse<ChannelInner>, ChannelInner>() {
            @Override
            public ChannelInner call(ServiceResponse<ChannelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChannelInner object
     */
    public Observable<ServiceResponse<ChannelInner>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String channelName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (channelName == null) {
            throw new IllegalArgumentException("Parameter channelName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, accountName, channelName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChannelInner>>>() {
                @Override
                public Observable<ServiceResponse<ChannelInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChannelInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ChannelInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ChannelInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ChannelInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or Update the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @param channel The EngagementFabric channel description
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChannelInner object if successful.
     */
    public ChannelInner createOrUpdate(String resourceGroupName, String accountName, String channelName, ChannelInner channel) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, channelName, channel).toBlocking().single().body();
    }

    /**
     * Create or Update the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @param channel The EngagementFabric channel description
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChannelInner> createOrUpdateAsync(String resourceGroupName, String accountName, String channelName, ChannelInner channel, final ServiceCallback<ChannelInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, channelName, channel), serviceCallback);
    }

    /**
     * Create or Update the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @param channel The EngagementFabric channel description
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChannelInner object
     */
    public Observable<ChannelInner> createOrUpdateAsync(String resourceGroupName, String accountName, String channelName, ChannelInner channel) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, channelName, channel).map(new Func1<ServiceResponse<ChannelInner>, ChannelInner>() {
            @Override
            public ChannelInner call(ServiceResponse<ChannelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or Update the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName Channel Name
     * @param channel The EngagementFabric channel description
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChannelInner object
     */
    public Observable<ServiceResponse<ChannelInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String channelName, ChannelInner channel) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (channelName == null) {
            throw new IllegalArgumentException("Parameter channelName is required and cannot be null.");
        }
        if (channel == null) {
            throw new IllegalArgumentException("Parameter channel is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(channel);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, accountName, channelName, channel, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChannelInner>>>() {
                @Override
                public Observable<ServiceResponse<ChannelInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChannelInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ChannelInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ChannelInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ChannelInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName The EngagementFabric channel name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String accountName, String channelName) {
        deleteWithServiceResponseAsync(resourceGroupName, accountName, channelName).toBlocking().single().body();
    }

    /**
     * Delete the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName The EngagementFabric channel name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String channelName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, accountName, channelName), serviceCallback);
    }

    /**
     * Delete the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName The EngagementFabric channel name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String channelName) {
        return deleteWithServiceResponseAsync(resourceGroupName, accountName, channelName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the EngagementFabric channel.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param channelName The EngagementFabric channel name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String channelName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (channelName == null) {
            throw new IllegalArgumentException("Parameter channelName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, accountName, channelName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List the EngagementFabric channels.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ChannelInner&gt; object if successful.
     */
    public List<ChannelInner> listByAccount(String resourceGroupName, String accountName) {
        return listByAccountWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * List the EngagementFabric channels.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ChannelInner>> listByAccountAsync(String resourceGroupName, String accountName, final ServiceCallback<List<ChannelInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByAccountWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * List the EngagementFabric channels.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ChannelInner&gt; object
     */
    public Observable<List<ChannelInner>> listByAccountAsync(String resourceGroupName, String accountName) {
        return listByAccountWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<List<ChannelInner>>, List<ChannelInner>>() {
            @Override
            public List<ChannelInner> call(ServiceResponse<List<ChannelInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List the EngagementFabric channels.
     *
     * @param resourceGroupName Resource Group Name
     * @param accountName Account Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ChannelInner&gt; object
     */
    public Observable<ServiceResponse<List<ChannelInner>>> listByAccountWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByAccount(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ChannelInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ChannelInner>> result = listByAccountDelegate(response);
                        List<ChannelInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ChannelInner>> clientResponse = new ServiceResponse<List<ChannelInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ChannelInner>> listByAccountDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ChannelInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ChannelInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
