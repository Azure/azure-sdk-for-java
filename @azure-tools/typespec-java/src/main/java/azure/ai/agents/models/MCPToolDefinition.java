// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The input definition information for a MCP tool which defines a MCP server endpoint.
 */
@Fluent
public final class MCPToolDefinition extends ToolDefinition {
    /*
     * The object type.
     */
    @Generated
    private String type = "mcp";

    /*
     * The label for the MCP server
     */
    @Generated
    private final String serverLabel;

    /*
     * The endpoint for the MCP server
     */
    @Generated
    private final String serverUrl;

    /*
     * List of allowed tools for MCP server
     */
    @Generated
    private List<String> allowedTools;

    /**
     * Creates an instance of MCPToolDefinition class.
     * 
     * @param serverLabel the serverLabel value to set.
     * @param serverUrl the serverUrl value to set.
     */
    @Generated
    public MCPToolDefinition(String serverLabel, String serverUrl) {
        this.serverLabel = serverLabel;
        this.serverUrl = serverUrl;
    }

    /**
     * Get the type property: The object type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the serverLabel property: The label for the MCP server.
     * 
     * @return the serverLabel value.
     */
    @Generated
    public String getServerLabel() {
        return this.serverLabel;
    }

    /**
     * Get the serverUrl property: The endpoint for the MCP server.
     * 
     * @return the serverUrl value.
     */
    @Generated
    public String getServerUrl() {
        return this.serverUrl;
    }

    /**
     * Get the allowedTools property: List of allowed tools for MCP server.
     * 
     * @return the allowedTools value.
     */
    @Generated
    public List<String> getAllowedTools() {
        return this.allowedTools;
    }

    /**
     * Set the allowedTools property: List of allowed tools for MCP server.
     * 
     * @param allowedTools the allowedTools value to set.
     * @return the MCPToolDefinition object itself.
     */
    @Generated
    public MCPToolDefinition setAllowedTools(List<String> allowedTools) {
        this.allowedTools = allowedTools;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("server_label", this.serverLabel);
        jsonWriter.writeStringField("server_url", this.serverUrl);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("allowed_tools", this.allowedTools,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPToolDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPToolDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPToolDefinition.
     */
    @Generated
    public static MCPToolDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serverLabel = null;
            String serverUrl = null;
            String type = "mcp";
            List<String> allowedTools = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server_label".equals(fieldName)) {
                    serverLabel = reader.getString();
                } else if ("server_url".equals(fieldName)) {
                    serverUrl = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("allowed_tools".equals(fieldName)) {
                    allowedTools = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            MCPToolDefinition deserializedMCPToolDefinition = new MCPToolDefinition(serverLabel, serverUrl);
            deserializedMCPToolDefinition.type = type;
            deserializedMCPToolDefinition.allowedTools = allowedTools;

            return deserializedMCPToolDefinition;
        });
    }
}
