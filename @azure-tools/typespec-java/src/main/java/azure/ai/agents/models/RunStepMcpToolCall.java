// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A record of a call to a MCP tool, issued by the model in evaluation of a defined tool, that represents
 * executed MCP actions.
 */
@Immutable
public final class RunStepMcpToolCall extends RunStepToolCall {
    /*
     * The object type.
     */
    @Generated
    private String type = "mcp";

    /*
     * Arguments to the MCP tool call, as provided by the model. Arguments are presented as a JSON document that should
     * be validated and parsed for evaluation.
     */
    @Generated
    private final String arguments;

    /*
     * Name of the function used on the MCP server.
     */
    @Generated
    private final String name;

    /*
     * Output of the MCP tool call.
     */
    @Generated
    private final String output;

    /*
     * The label for the MCP server
     */
    @Generated
    private String serverLabel;

    /**
     * Creates an instance of RunStepMcpToolCall class.
     * 
     * @param id the id value to set.
     * @param arguments the arguments value to set.
     * @param name the name value to set.
     * @param output the output value to set.
     */
    @Generated
    private RunStepMcpToolCall(String id, String arguments, String name, String output) {
        super(id);
        this.arguments = arguments;
        this.name = name;
        this.output = output;
    }

    /**
     * Get the type property: The object type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the arguments property: Arguments to the MCP tool call, as provided by the model. Arguments are presented as
     * a JSON document that should be validated and parsed for evaluation.
     * 
     * @return the arguments value.
     */
    @Generated
    public String getArguments() {
        return this.arguments;
    }

    /**
     * Get the name property: Name of the function used on the MCP server.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the output property: Output of the MCP tool call.
     * 
     * @return the output value.
     */
    @Generated
    public String getOutput() {
        return this.output;
    }

    /**
     * Get the serverLabel property: The label for the MCP server.
     * 
     * @return the serverLabel value.
     */
    @Generated
    public String getServerLabel() {
        return this.serverLabel;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("arguments", this.arguments);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("output", this.output);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("server_label", this.serverLabel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepMcpToolCall from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepMcpToolCall if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepMcpToolCall.
     */
    @Generated
    public static RunStepMcpToolCall fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String arguments = null;
            String name = null;
            String output = null;
            String type = "mcp";
            String serverLabel = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    arguments = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("output".equals(fieldName)) {
                    output = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("server_label".equals(fieldName)) {
                    serverLabel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RunStepMcpToolCall deserializedRunStepMcpToolCall = new RunStepMcpToolCall(id, arguments, name, output);
            deserializedRunStepMcpToolCall.type = type;
            deserializedRunStepMcpToolCall.serverLabel = serverLabel;

            return deserializedRunStepMcpToolCall;
        });
    }
}
