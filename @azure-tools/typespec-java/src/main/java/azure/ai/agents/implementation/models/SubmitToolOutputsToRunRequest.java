// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.implementation.models;

import azure.ai.agents.models.ToolApproval;
import azure.ai.agents.models.ToolOutput;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SubmitToolOutputsToRunRequest model.
 */
@Fluent
public final class SubmitToolOutputsToRunRequest implements JsonSerializable<SubmitToolOutputsToRunRequest> {
    /*
     * A list of tools for which the outputs are being submitted
     */
    @Generated
    private List<ToolOutput> toolOutputs;

    /*
     * A list of tool approvals allowing data to be sent to tools.
     */
    @Generated
    private List<ToolApproval> toolApprovals;

    /*
     * If true, returns a stream of events that happen during the Run as SSE, terminating at `[DONE]`.
     */
    @Generated
    private Boolean stream;

    /**
     * Creates an instance of SubmitToolOutputsToRunRequest class.
     */
    @Generated
    public SubmitToolOutputsToRunRequest() {
    }

    /**
     * Get the toolOutputs property: A list of tools for which the outputs are being submitted.
     * 
     * @return the toolOutputs value.
     */
    @Generated
    public List<ToolOutput> getToolOutputs() {
        return this.toolOutputs;
    }

    /**
     * Set the toolOutputs property: A list of tools for which the outputs are being submitted.
     * 
     * @param toolOutputs the toolOutputs value to set.
     * @return the SubmitToolOutputsToRunRequest object itself.
     */
    @Generated
    public SubmitToolOutputsToRunRequest setToolOutputs(List<ToolOutput> toolOutputs) {
        this.toolOutputs = toolOutputs;
        return this;
    }

    /**
     * Get the toolApprovals property: A list of tool approvals allowing data to be sent to tools.
     * 
     * @return the toolApprovals value.
     */
    @Generated
    public List<ToolApproval> getToolApprovals() {
        return this.toolApprovals;
    }

    /**
     * Set the toolApprovals property: A list of tool approvals allowing data to be sent to tools.
     * 
     * @param toolApprovals the toolApprovals value to set.
     * @return the SubmitToolOutputsToRunRequest object itself.
     */
    @Generated
    public SubmitToolOutputsToRunRequest setToolApprovals(List<ToolApproval> toolApprovals) {
        this.toolApprovals = toolApprovals;
        return this;
    }

    /**
     * Get the stream property: If true, returns a stream of events that happen during the Run as SSE, terminating at
     * `[DONE]`.
     * 
     * @return the stream value.
     */
    @Generated
    public Boolean isStream() {
        return this.stream;
    }

    /**
     * Set the stream property: If true, returns a stream of events that happen during the Run as SSE, terminating at
     * `[DONE]`.
     * 
     * @param stream the stream value to set.
     * @return the SubmitToolOutputsToRunRequest object itself.
     */
    @Generated
    public SubmitToolOutputsToRunRequest setStream(Boolean stream) {
        this.stream = stream;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tool_outputs", this.toolOutputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("tool_approvals", this.toolApprovals,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("stream", this.stream);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubmitToolOutputsToRunRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubmitToolOutputsToRunRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubmitToolOutputsToRunRequest.
     */
    @Generated
    public static SubmitToolOutputsToRunRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubmitToolOutputsToRunRequest deserializedSubmitToolOutputsToRunRequest
                = new SubmitToolOutputsToRunRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tool_outputs".equals(fieldName)) {
                    List<ToolOutput> toolOutputs = reader.readArray(reader1 -> ToolOutput.fromJson(reader1));
                    deserializedSubmitToolOutputsToRunRequest.toolOutputs = toolOutputs;
                } else if ("tool_approvals".equals(fieldName)) {
                    List<ToolApproval> toolApprovals = reader.readArray(reader1 -> ToolApproval.fromJson(reader1));
                    deserializedSubmitToolOutputsToRunRequest.toolApprovals = toolApprovals;
                } else if ("stream".equals(fieldName)) {
                    deserializedSubmitToolOutputsToRunRequest.stream = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubmitToolOutputsToRunRequest;
        });
    }
}
