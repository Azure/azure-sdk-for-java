// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * A set of resources that are used by the `mcp` tool.
 */
@Fluent
public final class MCPToolResource implements JsonSerializable<MCPToolResource> {
    /*
     * The label for the MCP server
     */
    @Generated
    private final String serverLabel;

    /*
     * The headers for the MCP server updates
     */
    @Generated
    private final Map<String, String> headers;

    /*
     * Does MCP server require approval
     */
    @Generated
    private BinaryData requireApproval;

    /**
     * Creates an instance of MCPToolResource class.
     * 
     * @param serverLabel the serverLabel value to set.
     * @param headers the headers value to set.
     */
    @Generated
    public MCPToolResource(String serverLabel, Map<String, String> headers) {
        this.serverLabel = serverLabel;
        this.headers = headers;
    }

    /**
     * Get the serverLabel property: The label for the MCP server.
     * 
     * @return the serverLabel value.
     */
    @Generated
    public String getServerLabel() {
        return this.serverLabel;
    }

    /**
     * Get the headers property: The headers for the MCP server updates.
     * 
     * @return the headers value.
     */
    @Generated
    public Map<String, String> getHeaders() {
        return this.headers;
    }

    /**
     * Get the requireApproval property: Does MCP server require approval.
     * 
     * @return the requireApproval value.
     */
    @Generated
    public BinaryData getRequireApproval() {
        return this.requireApproval;
    }

    /**
     * Set the requireApproval property: Does MCP server require approval.
     * 
     * @param requireApproval the requireApproval value to set.
     * @return the MCPToolResource object itself.
     */
    @Generated
    public MCPToolResource setRequireApproval(BinaryData requireApproval) {
        this.requireApproval = requireApproval;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("server_label", this.serverLabel);
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        if (this.requireApproval != null) {
            jsonWriter.writeFieldName("require_approval");
            this.requireApproval.writeTo(jsonWriter);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPToolResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPToolResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPToolResource.
     */
    @Generated
    public static MCPToolResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serverLabel = null;
            Map<String, String> headers = null;
            BinaryData requireApproval = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server_label".equals(fieldName)) {
                    serverLabel = reader.getString();
                } else if ("headers".equals(fieldName)) {
                    headers = reader.readMap(reader1 -> reader1.getString());
                } else if ("require_approval".equals(fieldName)) {
                    requireApproval
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            MCPToolResource deserializedMCPToolResource = new MCPToolResource(serverLabel, headers);
            deserializedMCPToolResource.requireApproval = requireApproval;

            return deserializedMCPToolResource;
        });
    }
}
