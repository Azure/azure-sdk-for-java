// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The activity definition information for a function.
 */
@Immutable
public final class ActivityFunctionDefinition implements JsonSerializable<ActivityFunctionDefinition> {
    /*
     * A description of what the function does, used by the model to choose when and how to call the function.
     */
    @Generated
    private String description;

    /*
     * The parameters the functions accepts, described as a JSON Schema object.
     */
    @Generated
    private final ActivityFunctionParameters parameters;

    /**
     * Creates an instance of ActivityFunctionDefinition class.
     * 
     * @param parameters the parameters value to set.
     */
    @Generated
    private ActivityFunctionDefinition(ActivityFunctionParameters parameters) {
        this.parameters = parameters;
    }

    /**
     * Get the description property: A description of what the function does, used by the model to choose when and how
     * to call the function.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the parameters property: The parameters the functions accepts, described as a JSON Schema object.
     * 
     * @return the parameters value.
     */
    @Generated
    public ActivityFunctionParameters getParameters() {
        return this.parameters;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("parameters", this.parameters);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActivityFunctionDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActivityFunctionDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActivityFunctionDefinition.
     */
    @Generated
    public static ActivityFunctionDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActivityFunctionParameters parameters = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parameters".equals(fieldName)) {
                    parameters = ActivityFunctionParameters.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ActivityFunctionDefinition deserializedActivityFunctionDefinition
                = new ActivityFunctionDefinition(parameters);
            deserializedActivityFunctionDefinition.description = description;

            return deserializedActivityFunctionDefinition;
        });
    }
}
