// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue.
 */
@Fluent
public final class ToolApproval implements JsonSerializable<ToolApproval> {
    /*
     * The ID of the tool call being resolved, as provided in the tool calls of a required action from a run.
     */
    @Generated
    private final String toolCallId;

    /*
     * The approval boolean value to be submitted.
     */
    @Generated
    private final boolean approve;

    /*
     * Headers to be attached to the approval.
     */
    @Generated
    private Map<String, String> headers;

    /**
     * Creates an instance of ToolApproval class.
     * 
     * @param toolCallId the toolCallId value to set.
     * @param approve the approve value to set.
     */
    @Generated
    public ToolApproval(String toolCallId, boolean approve) {
        this.toolCallId = toolCallId;
        this.approve = approve;
    }

    /**
     * Get the toolCallId property: The ID of the tool call being resolved, as provided in the tool calls of a required
     * action from a run.
     * 
     * @return the toolCallId value.
     */
    @Generated
    public String getToolCallId() {
        return this.toolCallId;
    }

    /**
     * Get the approve property: The approval boolean value to be submitted.
     * 
     * @return the approve value.
     */
    @Generated
    public boolean isApprove() {
        return this.approve;
    }

    /**
     * Get the headers property: Headers to be attached to the approval.
     * 
     * @return the headers value.
     */
    @Generated
    public Map<String, String> getHeaders() {
        return this.headers;
    }

    /**
     * Set the headers property: Headers to be attached to the approval.
     * 
     * @param headers the headers value to set.
     * @return the ToolApproval object itself.
     */
    @Generated
    public ToolApproval setHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tool_call_id", this.toolCallId);
        jsonWriter.writeBooleanField("approve", this.approve);
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ToolApproval from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ToolApproval if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ToolApproval.
     */
    @Generated
    public static ToolApproval fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String toolCallId = null;
            boolean approve = false;
            Map<String, String> headers = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tool_call_id".equals(fieldName)) {
                    toolCallId = reader.getString();
                } else if ("approve".equals(fieldName)) {
                    approve = reader.getBoolean();
                } else if ("headers".equals(fieldName)) {
                    headers = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ToolApproval deserializedToolApproval = new ToolApproval(toolCallId, approve);
            deserializedToolApproval.headers = headers;

            return deserializedToolApproval;
        });
    }
}
