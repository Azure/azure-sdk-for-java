// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The detailed information associated with a run step activities.
 */
@Immutable
public final class RunStepActivityDetails extends RunStepDetails {
    /*
     * The object type.
     */
    @Generated
    private RunStepType type = RunStepType.ACTIVITIES;

    /*
     * A list of activities for this run step.
     */
    @Generated
    private final List<RunStepDetailsActivity> activities;

    /**
     * Creates an instance of RunStepActivityDetails class.
     * 
     * @param activities the activities value to set.
     */
    @Generated
    private RunStepActivityDetails(List<RunStepDetailsActivity> activities) {
        this.activities = activities;
    }

    /**
     * Get the type property: The object type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public RunStepType getType() {
        return this.type;
    }

    /**
     * Get the activities property: A list of activities for this run step.
     * 
     * @return the activities value.
     */
    @Generated
    public List<RunStepDetailsActivity> getActivities() {
        return this.activities;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("activities", this.activities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepActivityDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepActivityDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepActivityDetails.
     */
    @Generated
    public static RunStepActivityDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<RunStepDetailsActivity> activities = null;
            RunStepType type = RunStepType.ACTIVITIES;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activities".equals(fieldName)) {
                    activities = reader.readArray(reader1 -> RunStepDetailsActivity.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = RunStepType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RunStepActivityDetails deserializedRunStepActivityDetails = new RunStepActivityDetails(activities);
            deserializedRunStepActivityDetails.type = type;

            return deserializedRunStepActivityDetails;
        });
    }
}
