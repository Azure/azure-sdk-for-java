// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Customized MCP approval object, listing tools requiring and not requiring approvals.
 */
@Fluent
public final class MCPApprovalPerTool implements JsonSerializable<MCPApprovalPerTool> {
    /*
     * The list of tools, not requiring approval.
     */
    @Generated
    private MCPToolList never;

    /*
     * The list of tools, always requiring approval.
     */
    @Generated
    private MCPToolList always;

    /**
     * Creates an instance of MCPApprovalPerTool class.
     */
    @Generated
    public MCPApprovalPerTool() {
    }

    /**
     * Get the never property: The list of tools, not requiring approval.
     * 
     * @return the never value.
     */
    @Generated
    public MCPToolList getNever() {
        return this.never;
    }

    /**
     * Set the never property: The list of tools, not requiring approval.
     * 
     * @param never the never value to set.
     * @return the MCPApprovalPerTool object itself.
     */
    @Generated
    public MCPApprovalPerTool setNever(MCPToolList never) {
        this.never = never;
        return this;
    }

    /**
     * Get the always property: The list of tools, always requiring approval.
     * 
     * @return the always value.
     */
    @Generated
    public MCPToolList getAlways() {
        return this.always;
    }

    /**
     * Set the always property: The list of tools, always requiring approval.
     * 
     * @param always the always value to set.
     * @return the MCPApprovalPerTool object itself.
     */
    @Generated
    public MCPApprovalPerTool setAlways(MCPToolList always) {
        this.always = always;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("never", this.never);
        jsonWriter.writeJsonField("always", this.always);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPApprovalPerTool from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPApprovalPerTool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MCPApprovalPerTool.
     */
    @Generated
    public static MCPApprovalPerTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MCPApprovalPerTool deserializedMCPApprovalPerTool = new MCPApprovalPerTool();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("never".equals(fieldName)) {
                    deserializedMCPApprovalPerTool.never = MCPToolList.fromJson(reader);
                } else if ("always".equals(fieldName)) {
                    deserializedMCPApprovalPerTool.always = MCPToolList.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMCPApprovalPerTool;
        });
    }
}
