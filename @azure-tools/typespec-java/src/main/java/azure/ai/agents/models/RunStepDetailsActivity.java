// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Represents the list of activities, associated with the given step.
 */
@Immutable
public final class RunStepDetailsActivity implements JsonSerializable<RunStepDetailsActivity> {
    /*
     * The activity type, which is always 'mcp_list_tools'.
     */
    @Generated
    private final String type = "mcp_list_tools";

    /*
     * The activity ID.
     */
    @Generated
    private final String id;

    /*
     * Server label.
     */
    @Generated
    private final String serverLabel;

    /*
     * The supported function list.
     */
    @Generated
    private final Map<String, ActivityFunctionDefinition> tools;

    /**
     * Creates an instance of RunStepDetailsActivity class.
     * 
     * @param id the id value to set.
     * @param serverLabel the serverLabel value to set.
     * @param tools the tools value to set.
     */
    @Generated
    private RunStepDetailsActivity(String id, String serverLabel, Map<String, ActivityFunctionDefinition> tools) {
        this.id = id;
        this.serverLabel = serverLabel;
        this.tools = tools;
    }

    /**
     * Get the type property: The activity type, which is always 'mcp_list_tools'.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the id property: The activity ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the serverLabel property: Server label.
     * 
     * @return the serverLabel value.
     */
    @Generated
    public String getServerLabel() {
        return this.serverLabel;
    }

    /**
     * Get the tools property: The supported function list.
     * 
     * @return the tools value.
     */
    @Generated
    public Map<String, ActivityFunctionDefinition> getTools() {
        return this.tools;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("server_label", this.serverLabel);
        jsonWriter.writeMapField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepDetailsActivity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepDetailsActivity if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepDetailsActivity.
     */
    @Generated
    public static RunStepDetailsActivity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String serverLabel = null;
            Map<String, ActivityFunctionDefinition> tools = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("server_label".equals(fieldName)) {
                    serverLabel = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readMap(reader1 -> ActivityFunctionDefinition.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new RunStepDetailsActivity(id, serverLabel, tools);
        });
    }
}
