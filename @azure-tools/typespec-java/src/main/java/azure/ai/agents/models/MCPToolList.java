// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The object, containing list of tools for approvals.
 */
@Immutable
public final class MCPToolList implements JsonSerializable<MCPToolList> {
    /*
     * The list of tools for approval.
     */
    @Generated
    private final List<String> toolNames;

    /**
     * Creates an instance of MCPToolList class.
     * 
     * @param toolNames the toolNames value to set.
     */
    @Generated
    public MCPToolList(List<String> toolNames) {
        this.toolNames = toolNames;
    }

    /**
     * Get the toolNames property: The list of tools for approval.
     * 
     * @return the toolNames value.
     */
    @Generated
    public List<String> getToolNames() {
        return this.toolNames;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tool_names", this.toolNames, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MCPToolList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MCPToolList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MCPToolList.
     */
    @Generated
    public static MCPToolList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> toolNames = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tool_names".equals(fieldName)) {
                    toolNames = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new MCPToolList(toolNames);
        });
    }
}
