// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The parameters used for activity function definition.
 */
@Immutable
public final class ActivityFunctionParameters implements JsonSerializable<ActivityFunctionParameters> {
    /*
     * The parameter type, it is always object.
     */
    @Generated
    private final String type = "object";

    /*
     * The dictionary of function arguments.
     */
    @Generated
    private final Map<String, FunctionArgument> properties;

    /*
     * The list of the required parameters.
     */
    @Generated
    private final List<String> required;

    /*
     * If true the function has additional parameters.
     */
    @Generated
    private Boolean additionalProperties;

    /**
     * Creates an instance of ActivityFunctionParameters class.
     * 
     * @param properties the properties value to set.
     * @param required the required value to set.
     */
    @Generated
    private ActivityFunctionParameters(Map<String, FunctionArgument> properties, List<String> required) {
        this.properties = properties;
        this.required = required;
    }

    /**
     * Get the type property: The parameter type, it is always object.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the properties property: The dictionary of function arguments.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, FunctionArgument> getProperties() {
        return this.properties;
    }

    /**
     * Get the required property: The list of the required parameters.
     * 
     * @return the required value.
     */
    @Generated
    public List<String> getRequired() {
        return this.required;
    }

    /**
     * Get the additionalProperties property: If true the function has additional parameters.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    public Boolean isAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("required", this.required, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("additionalProperties", this.additionalProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActivityFunctionParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActivityFunctionParameters if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActivityFunctionParameters.
     */
    @Generated
    public static ActivityFunctionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, FunctionArgument> properties = null;
            List<String> required = null;
            Boolean additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> FunctionArgument.fromJson(reader1));
                } else if ("required".equals(fieldName)) {
                    required = reader.readArray(reader1 -> reader1.getString());
                } else if ("additionalProperties".equals(fieldName)) {
                    additionalProperties = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            ActivityFunctionParameters deserializedActivityFunctionParameters
                = new ActivityFunctionParameters(properties, required);
            deserializedActivityFunctionParameters.additionalProperties = additionalProperties;

            return deserializedActivityFunctionParameters;
        });
    }
}
