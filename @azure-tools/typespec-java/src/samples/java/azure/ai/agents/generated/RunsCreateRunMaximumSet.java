// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.PersistentAgentsAdministrationClientBuilder;
import azure.ai.agents.RunsClient;
import azure.ai.agents.models.CreateRunOptions;
import azure.ai.agents.models.MessageAttachment;
import azure.ai.agents.models.MessageRole;
import azure.ai.agents.models.ThreadMessageOptions;
import azure.ai.agents.models.ThreadRun;
import azure.ai.agents.models.ToolDefinition;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class RunsCreateRunMaximumSet {
    public static void main(String[] args) {
        RunsClient runsClient
            = new PersistentAgentsAdministrationClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildRunsClient();
        // BEGIN:azure.ai.agents.generated.runs-create-run.runs-create-run-maximum-set
        ThreadRun response = runsClient.createRun(new CreateRunOptions("thread_abc123", "asst_abc123").setModel("gpt-4")
            .setInstructions("You are a helpful assistant. Analyze the data carefully and provide insights.")
            .setAdditionalInstructions("Focus on finding patterns and anomalies in the data.")
            .setAdditionalMessages(Arrays.asList(new ThreadMessageOptions(MessageRole.USER, BinaryData.fromBytes(
                "{text=Here's additional context for the analysis, blocks=[{type=text, text=Consider seasonal trends in your analysis}]}"
                    .getBytes(StandardCharsets.UTF_8)))
                        .setAttachments(Arrays.asList(new MessageAttachment(
                            Arrays.asList(BinaryData.fromBytes("{type=file_search}".getBytes(StandardCharsets.UTF_8))))
                                .setFileId("file_context123")))))
            .setTools(Arrays.asList(new ToolDefinition()))
            .setStream(false)
            .setTemperature(0.8D)
            .setTopP(0.95D)
            .setMaxPromptTokens(8192)
            .setMaxCompletionTokens(4096)
            .setToolChoice(BinaryData
                .fromBytes("{type=function, function={name=calculate_metrics}}".getBytes(StandardCharsets.UTF_8)))
            .setResponseFormat(BinaryData.fromBytes("{type=json_object}".getBytes(StandardCharsets.UTF_8)))
            .setParallelToolCalls(true)
            .setMetadata(mapOf("task_id", "analysis_001", "priority", "high", "user", "analyst_user")));
        // END:azure.ai.agents.generated.runs-create-run.runs-create-run-maximum-set
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
