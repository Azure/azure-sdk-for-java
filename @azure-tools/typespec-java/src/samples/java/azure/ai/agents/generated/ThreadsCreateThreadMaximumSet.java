// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.PersistentAgentsAdministrationClientBuilder;
import azure.ai.agents.ThreadsClient;
import azure.ai.agents.models.AISearchIndexResource;
import azure.ai.agents.models.AzureAISearchQueryType;
import azure.ai.agents.models.AzureAISearchToolResource;
import azure.ai.agents.models.CodeInterpreterToolResource;
import azure.ai.agents.models.FileSearchToolResource;
import azure.ai.agents.models.MessageAttachment;
import azure.ai.agents.models.MessageRole;
import azure.ai.agents.models.PersistentAgentThread;
import azure.ai.agents.models.ThreadMessageOptions;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.VectorStoreConfiguration;
import azure.ai.agents.models.VectorStoreConfigurations;
import azure.ai.agents.models.VectorStoreDataSource;
import azure.ai.agents.models.VectorStoreDataSourceAssetType;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class ThreadsCreateThreadMaximumSet {
    public static void main(String[] args) {
        ThreadsClient threadsClient
            = new PersistentAgentsAdministrationClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildThreadsClient();
        // BEGIN:azure.ai.agents.generated.threads-create-thread.threads-create-thread-maximum-set
        PersistentAgentThread response = threadsClient.createThread(
            Arrays.asList(new ThreadMessageOptions(MessageRole.USER, BinaryData.fromBytes(
                "{text=Example message content, blocks=[{type=text, text=Example text block}, {type=image_file, image_file={file_id=mcbwmhrbuwuepomhmupa, detail=auto}}, {type=image_url, image_url={url=https://example.com/image.jpg, detail=auto}}]}"
                    .getBytes(StandardCharsets.UTF_8)))
                        .setAttachments(Arrays.asList(new MessageAttachment(Arrays.asList(
                            BinaryData.fromBytes("{type=code_interpreter}".getBytes(StandardCharsets.UTF_8)),
                            BinaryData.fromBytes(
                                "{type=file_search, file_search={max_num_results=50, ranking_options={ranker=default, score_threshold=0.5}}}"
                                    .getBytes(StandardCharsets.UTF_8))))
                                        .setFileId("mcbwmhrbuwuepomhmupa")
                                        .setDataSource(new VectorStoreDataSource("ebabvsmrocsomzfimydk",
                                            VectorStoreDataSourceAssetType.URI_ASSET)))),
                new ThreadMessageOptions(MessageRole.AGENT,
                    BinaryData.fromBytes("{text=Response message content}".getBytes(StandardCharsets.UTF_8)))),
            new ToolResources()
                .setCodeInterpreter(new CodeInterpreterToolResource()
                    .setFileIds(Arrays.asList("mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa"))
                    .setDataSources(Arrays.asList(
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET))))
                .setFileSearch(
                    new FileSearchToolResource().setVectorStoreIds(Arrays.asList("qrsolbxeyrvpwkmfvxnrwlbptelg"))
                        .setVectorStores(Arrays.asList(new VectorStoreConfigurations("fcn",
                            new VectorStoreConfiguration(Arrays.asList(new VectorStoreDataSource("ebabvsmrocsomzfimydk",
                                VectorStoreDataSourceAssetType.URI_ASSET)))))))
                .setAzureAISearch(new AzureAISearchToolResource()
                    .setIndexList(Arrays.asList(new AISearchIndexResource().setIndexConnectionId("givdxrraw")
                        .setIndexName("khqfbzuyzcdpf")
                        .setQueryType(AzureAISearchQueryType.SIMPLE)
                        .setTopK(6)
                        .setFilter("duddvlojptamyxdavaqbw")
                        .setIndexAssetId("xnoschwz")))),
            mapOf());
        // END:azure.ai.agents.generated.threads-create-thread.threads-create-thread-maximum-set
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
