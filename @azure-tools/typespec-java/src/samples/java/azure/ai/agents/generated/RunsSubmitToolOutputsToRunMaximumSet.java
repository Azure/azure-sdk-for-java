// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.PersistentAgentsAdministrationClientBuilder;
import azure.ai.agents.RunsClient;
import azure.ai.agents.models.ThreadRun;
import azure.ai.agents.models.ToolApproval;
import azure.ai.agents.models.ToolOutput;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class RunsSubmitToolOutputsToRunMaximumSet {
    public static void main(String[] args) {
        RunsClient runsClient
            = new PersistentAgentsAdministrationClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildRunsClient();
        // BEGIN:azure.ai.agents.generated.runs-submit-tool-outputs-to-run.runs-submit-tool-outputs-to-run-maximum-set
        ThreadRun response = runsClient.submitToolOutputsToRun("thread_abc123", "run_def456",
            Arrays.asList(
                new ToolOutput().setToolCallId("call_abc123")
                    .setOutput("{\"result\": 3.0, \"type\": \"mean\", \"count\": 5}"),
                new ToolOutput().setToolCallId("call_def456")
                    .setOutput("{\"chart_url\": \"https://example.com/chart.png\", \"format\": \"png\"}")),
            Arrays.asList(
                new ToolApproval("call_ghi789", true)
                    .setHeaders(mapOf("Content-Type", "application/json", "Authorization", "fakeTokenPlaceholder")),
                new ToolApproval("call_jkl012", false).setHeaders(mapOf("Reason", "Data validation failed"))),
            false);
        // END:azure.ai.agents.generated.runs-submit-tool-outputs-to-run.runs-submit-tool-outputs-to-run-maximum-set
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
