// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.PersistentAgentsAdministrationClient;
import azure.ai.agents.PersistentAgentsAdministrationClientBuilder;
import azure.ai.agents.models.AISearchIndexResource;
import azure.ai.agents.models.AzureAISearchQueryType;
import azure.ai.agents.models.AzureAISearchToolResource;
import azure.ai.agents.models.CodeInterpreterToolResource;
import azure.ai.agents.models.FileSearchToolResource;
import azure.ai.agents.models.PersistentAgent;
import azure.ai.agents.models.ToolDefinition;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.UpdateAgentOptions;
import azure.ai.agents.models.VectorStoreConfiguration;
import azure.ai.agents.models.VectorStoreConfigurations;
import azure.ai.agents.models.VectorStoreDataSource;
import azure.ai.agents.models.VectorStoreDataSourceAssetType;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class UpdateAgentMaximumSet {
    public static void main(String[] args) {
        PersistentAgentsAdministrationClient persistentAgentsAdministrationClient
            = new PersistentAgentsAdministrationClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildClient();
        // BEGIN:azure.ai.agents.generated.update-agent.update-agent-maximum-set
        PersistentAgent response = persistentAgentsAdministrationClient
            .updateAgent(new UpdateAgentOptions("uohcimswxtidko").setModel("cxpwwgktqwpcliqqet")
                .setName("greyuevvbantqbjzp")
                .setDescription("v")
                .setInstructions("puemuvh")
                .setTools(Arrays.asList(new ToolDefinition()))
                .setToolResources(new ToolResources().setCodeInterpreter(new CodeInterpreterToolResource()
                    .setFileIds(Arrays.asList("mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa"))
                    .setDataSources(Arrays.asList(
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET))))
                    .setFileSearch(new FileSearchToolResource()
                        .setVectorStoreIds(Arrays.asList("qrsolbxeyrvpwkmfvxnrwlbptelg"))
                        .setVectorStores(Arrays.asList(new VectorStoreConfigurations("fcn",
                            new VectorStoreConfiguration(Arrays.asList(new VectorStoreDataSource("ebabvsmrocsomzfimydk",
                                VectorStoreDataSourceAssetType.URI_ASSET)))))))
                    .setAzureAISearch(new AzureAISearchToolResource()
                        .setIndexList(Arrays.asList(new AISearchIndexResource().setIndexConnectionId("givdxrraw")
                            .setIndexName("khqfbzuyzcdpf")
                            .setQueryType(AzureAISearchQueryType.SIMPLE)
                            .setTopK(6)
                            .setFilter("duddvlojptamyxdavaqbw")
                            .setIndexAssetId("xnoschwz")))))
                .setTemperature(5.0D)
                .setTopP(4.0D)
                .setMetadata(mapOf("key7580", "fakeTokenPlaceholder")));
        // END:azure.ai.agents.generated.update-agent.update-agent-maximum-set
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
