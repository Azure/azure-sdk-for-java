// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.MessagesClient;
import azure.ai.agents.PersistentAgentsAdministrationClientBuilder;
import azure.ai.agents.models.MessageRole;
import azure.ai.agents.models.ThreadMessage;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class MessagesCreateMessageMinimumSet {
    public static void main(String[] args) {
        MessagesClient messagesClient
            = new PersistentAgentsAdministrationClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildMessagesClient();
        // BEGIN:azure.ai.agents.generated.messages-create-message.messages-create-message-minimum-set
        ThreadMessage response = messagesClient.createMessage("thread_abc123", MessageRole.USER,
            BinaryData.fromBytes("Hello, how can you help me today?".getBytes(StandardCharsets.UTF_8)), Arrays.asList(),
            mapOf());
        // END:azure.ai.agents.generated.messages-create-message.messages-create-message-minimum-set
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
