// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.VectorStore;
import azure.ai.agents.models.VectorStoreFileCount;
import azure.ai.agents.models.VectorStoreStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class VectorStoresModifyVectorStoreMinimumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testVectorStoresModifyVectorStoreMinimumSetTests() {
        // method invocation
        VectorStore response = vectorStoresClient.modifyVectorStore("cii", null, null, mapOf());

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("c", response.getId());
        // verify property "object"
        Assertions.assertEquals("vector_store", response.getObject());
        // verify property "createdAt"
        Assertions.assertNotNull(response.getCreatedAt());
        // verify property "name"
        Assertions.assertEquals("lcxofcvp", response.getName());
        // verify property "usageBytes"
        Assertions.assertEquals(7, response.getUsageBytes());
        // verify property "fileCounts"
        VectorStoreFileCount responseFileCounts = response.getFileCounts();
        Assertions.assertNotNull(responseFileCounts);
        Assertions.assertEquals(24, responseFileCounts.getInProgress());
        Assertions.assertEquals(1, responseFileCounts.getCompleted());
        Assertions.assertEquals(17, responseFileCounts.getFailed());
        Assertions.assertEquals(15, responseFileCounts.getCancelled());
        Assertions.assertEquals(14, responseFileCounts.getTotal());
        // verify property "status"
        Assertions.assertEquals(VectorStoreStatus.EXPIRED, response.getStatus());
        // verify property "lastActiveAt"
        Assertions.assertNotNull(response.getLastActiveAt());
        // verify property "metadata"
        Assertions.assertNotNull(response.getMetadata());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
