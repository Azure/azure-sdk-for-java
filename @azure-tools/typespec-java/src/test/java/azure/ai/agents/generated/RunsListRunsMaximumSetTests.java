// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.AISearchIndexResource;
import azure.ai.agents.models.AzureAISearchQueryType;
import azure.ai.agents.models.AzureAISearchToolResource;
import azure.ai.agents.models.CodeInterpreterToolResource;
import azure.ai.agents.models.FileSearchToolResource;
import azure.ai.agents.models.IncompleteDetailsReason;
import azure.ai.agents.models.IncompleteRunDetails;
import azure.ai.agents.models.ListSortOrder;
import azure.ai.agents.models.RunCompletionUsage;
import azure.ai.agents.models.RunError;
import azure.ai.agents.models.RunStatus;
import azure.ai.agents.models.ThreadRun;
import azure.ai.agents.models.ToolDefinition;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.TruncationObject;
import azure.ai.agents.models.TruncationStrategy;
import azure.ai.agents.models.VectorStoreConfiguration;
import azure.ai.agents.models.VectorStoreConfigurations;
import azure.ai.agents.models.VectorStoreDataSource;
import azure.ai.agents.models.VectorStoreDataSourceAssetType;
import com.azure.core.http.rest.PagedIterable;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class RunsListRunsMaximumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testRunsListRunsMaximumSetTests() {
        // method invocation
        PagedIterable<ThreadRun> response
            = runsClient.listRuns("thread_abc123", 10, ListSortOrder.DESCENDING, "run_ghi789", "run_abc123");

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        ThreadRun firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("run_def456", firstItem.getId());
        // verify property "object"
        Assertions.assertEquals("thread.run", firstItem.getObject());
        // verify property "threadId"
        Assertions.assertEquals("thread_abc123", firstItem.getThreadId());
        // verify property "assistantId"
        Assertions.assertEquals("asst_abc123", firstItem.getAssistantId());
        // verify property "status"
        Assertions.assertEquals(RunStatus.COMPLETED, firstItem.getStatus());
        // verify property "lastError"
        RunError firstItemLastError = firstItem.getLastError();
        Assertions.assertNotNull(firstItemLastError);
        Assertions.assertEquals("server_error", firstItemLastError.getCode());
        Assertions.assertEquals("jadlgjrkhbhukfc", firstItemLastError.getMessage());
        // verify property "model"
        Assertions.assertEquals("gpt-4", firstItem.getModel());
        // verify property "instructions"
        Assertions.assertEquals("You are a helpful assistant. Analyze the data carefully and provide insights.",
            firstItem.getInstructions());
        // verify property "tools"
        List<ToolDefinition> firstItemTools = firstItem.getTools();
        ToolDefinition firstItemToolsFirstItem = firstItemTools.iterator().next();
        Assertions.assertNotNull(firstItemToolsFirstItem);
        Assertions.assertEquals("code_interpreter", firstItemToolsFirstItem.getType());
        // verify property "createdAt"
        Assertions.assertNotNull(firstItem.getCreatedAt());
        // verify property "expiresAt"
        Assertions.assertNotNull(firstItem.getExpiresAt());
        // verify property "startedAt"
        Assertions.assertNotNull(firstItem.getStartedAt());
        // verify property "completedAt"
        Assertions.assertNotNull(firstItem.getCompletedAt());
        // verify property "cancelledAt"
        Assertions.assertNotNull(firstItem.getCancelledAt());
        // verify property "failedAt"
        Assertions.assertNotNull(firstItem.getFailedAt());
        // verify property "incompleteDetails"
        IncompleteRunDetails firstItemIncompleteDetails = firstItem.getIncompleteDetails();
        Assertions.assertNotNull(firstItemIncompleteDetails);
        Assertions.assertEquals(IncompleteDetailsReason.fromString("content_filter"),
            firstItemIncompleteDetails.getReason());
        // verify property "usage"
        RunCompletionUsage firstItemUsage = firstItem.getUsage();
        Assertions.assertNotNull(firstItemUsage);
        Assertions.assertEquals(512L, firstItemUsage.getCompletionTokens());
        Assertions.assertEquals(1024L, firstItemUsage.getPromptTokens());
        Assertions.assertEquals(1536L, firstItemUsage.getTotalTokens());
        // verify property "temperature"
        Assertions.assertEquals(0.8D, firstItem.getTemperature());
        // verify property "topP"
        Assertions.assertEquals(0.95D, firstItem.getTopP());
        // verify property "maxPromptTokens"
        Assertions.assertEquals(8192, firstItem.getMaxPromptTokens());
        // verify property "maxCompletionTokens"
        Assertions.assertEquals(4096, firstItem.getMaxCompletionTokens());
        // verify property "truncationStrategy"
        TruncationObject firstItemTruncationStrategy = firstItem.getTruncationStrategy();
        Assertions.assertNotNull(firstItemTruncationStrategy);
        Assertions.assertEquals(TruncationStrategy.LAST_MESSAGES, firstItemTruncationStrategy.getType());
        Assertions.assertEquals(10, firstItemTruncationStrategy.getLastMessages());
        // verify property "toolChoice"
        Assertions.assertNotNull(firstItem.getToolChoice());
        // verify property "responseFormat"
        Assertions.assertNotNull(firstItem.getResponseFormat());
        // verify property "metadata"
        Assertions.assertNotNull(firstItem.getMetadata());
        // verify property "toolResources"
        ToolResources firstItemToolResources = firstItem.getToolResources();
        Assertions.assertNotNull(firstItemToolResources);
        CodeInterpreterToolResource firstItemToolResourcesCodeInterpreter = firstItemToolResources.getCodeInterpreter();
        Assertions.assertNotNull(firstItemToolResourcesCodeInterpreter);
        List<String> firstItemToolResourcesCodeInterpreterFileIds = firstItemToolResourcesCodeInterpreter.getFileIds();
        Assertions.assertEquals("file_abc123", firstItemToolResourcesCodeInterpreterFileIds.iterator().next());
        List<VectorStoreDataSource> firstItemToolResourcesCodeInterpreterDataSources
            = firstItemToolResourcesCodeInterpreter.getDataSources();
        VectorStoreDataSource firstItemToolResourcesCodeInterpreterDataSourcesFirstItem
            = firstItemToolResourcesCodeInterpreterDataSources.iterator().next();
        Assertions.assertNotNull(firstItemToolResourcesCodeInterpreterDataSourcesFirstItem);
        Assertions.assertEquals("https://example.com/dataset.csv",
            firstItemToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            firstItemToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetType());
        FileSearchToolResource firstItemToolResourcesFileSearch = firstItemToolResources.getFileSearch();
        Assertions.assertNotNull(firstItemToolResourcesFileSearch);
        List<String> firstItemToolResourcesFileSearchVectorStoreIds
            = firstItemToolResourcesFileSearch.getVectorStoreIds();
        Assertions.assertEquals("vs_abc123", firstItemToolResourcesFileSearchVectorStoreIds.iterator().next());
        List<VectorStoreConfigurations> firstItemToolResourcesFileSearchVectorStores
            = firstItemToolResourcesFileSearch.getVectorStores();
        VectorStoreConfigurations firstItemToolResourcesFileSearchVectorStoresFirstItem
            = firstItemToolResourcesFileSearchVectorStores.iterator().next();
        Assertions.assertNotNull(firstItemToolResourcesFileSearchVectorStoresFirstItem);
        Assertions.assertEquals("knowledge_base", firstItemToolResourcesFileSearchVectorStoresFirstItem.getStoreName());
        VectorStoreConfiguration firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration
            = firstItemToolResourcesFileSearchVectorStoresFirstItem.getStoreConfiguration();
        Assertions.assertNotNull(firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration);
        List<VectorStoreDataSource> firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources
            = firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration.getDataSources();
        VectorStoreDataSource firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
            = firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources.iterator().next();
        Assertions
            .assertNotNull(firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem);
        Assertions.assertEquals("https://example.com/docs.pdf",
            firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
                .getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem.getAssetType());
        AzureAISearchToolResource firstItemToolResourcesAzureAISearch = firstItemToolResources.getAzureAISearch();
        Assertions.assertNotNull(firstItemToolResourcesAzureAISearch);
        List<AISearchIndexResource> firstItemToolResourcesAzureAISearchIndexList
            = firstItemToolResourcesAzureAISearch.getIndexList();
        AISearchIndexResource firstItemToolResourcesAzureAISearchIndexListFirstItem
            = firstItemToolResourcesAzureAISearchIndexList.iterator().next();
        Assertions.assertNotNull(firstItemToolResourcesAzureAISearchIndexListFirstItem);
        Assertions.assertEquals("conn_abc123",
            firstItemToolResourcesAzureAISearchIndexListFirstItem.getIndexConnectionId());
        Assertions.assertEquals("data_index", firstItemToolResourcesAzureAISearchIndexListFirstItem.getIndexName());
        Assertions.assertEquals(AzureAISearchQueryType.SEMANTIC,
            firstItemToolResourcesAzureAISearchIndexListFirstItem.getQueryType());
        Assertions.assertEquals(5, firstItemToolResourcesAzureAISearchIndexListFirstItem.getTopK());
        Assertions.assertEquals("timestamp gt 2024-01-01",
            firstItemToolResourcesAzureAISearchIndexListFirstItem.getFilter());
        Assertions.assertEquals("idx_abc123", firstItemToolResourcesAzureAISearchIndexListFirstItem.getIndexAssetId());
        // verify property "parallelToolCalls"
        Assertions.assertEquals(true, firstItem.isParallelToolCalls());
    }
}
