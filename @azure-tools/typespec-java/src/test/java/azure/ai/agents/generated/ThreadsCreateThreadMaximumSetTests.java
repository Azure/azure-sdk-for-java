// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.AISearchIndexResource;
import azure.ai.agents.models.AzureAISearchQueryType;
import azure.ai.agents.models.AzureAISearchToolResource;
import azure.ai.agents.models.CodeInterpreterToolResource;
import azure.ai.agents.models.FileSearchToolResource;
import azure.ai.agents.models.MessageAttachment;
import azure.ai.agents.models.MessageRole;
import azure.ai.agents.models.PersistentAgentThread;
import azure.ai.agents.models.ThreadMessageOptions;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.VectorStoreConfiguration;
import azure.ai.agents.models.VectorStoreConfigurations;
import azure.ai.agents.models.VectorStoreDataSource;
import azure.ai.agents.models.VectorStoreDataSourceAssetType;
import com.azure.core.util.BinaryData;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ThreadsCreateThreadMaximumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testThreadsCreateThreadMaximumSetTests() {
        // method invocation
        PersistentAgentThread response = threadsClient.createThread(
            Arrays.asList(new ThreadMessageOptions(MessageRole.USER, BinaryData.fromBytes(
                "{text=Example message content, blocks=[{type=text, text=Example text block}, {type=image_file, image_file={file_id=mcbwmhrbuwuepomhmupa, detail=auto}}, {type=image_url, image_url={url=https://example.com/image.jpg, detail=auto}}]}"
                    .getBytes(StandardCharsets.UTF_8)))
                        .setAttachments(Arrays.asList(new MessageAttachment(Arrays.asList(
                            BinaryData.fromBytes("{type=code_interpreter}".getBytes(StandardCharsets.UTF_8)),
                            BinaryData.fromBytes(
                                "{type=file_search, file_search={max_num_results=50, ranking_options={ranker=default, score_threshold=0.5}}}"
                                    .getBytes(StandardCharsets.UTF_8))))
                                        .setFileId("mcbwmhrbuwuepomhmupa")
                                        .setDataSource(new VectorStoreDataSource("ebabvsmrocsomzfimydk",
                                            VectorStoreDataSourceAssetType.URI_ASSET)))),
                new ThreadMessageOptions(MessageRole.AGENT,
                    BinaryData.fromBytes("{text=Response message content}".getBytes(StandardCharsets.UTF_8)))),
            new ToolResources()
                .setCodeInterpreter(new CodeInterpreterToolResource()
                    .setFileIds(Arrays.asList("mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa", "mcbwmhrbuwuepomhmupa",
                        "mcbwmhrbuwuepomhmupa"))
                    .setDataSources(Arrays.asList(
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET),
                        new VectorStoreDataSource("ebabvsmrocsomzfimydk", VectorStoreDataSourceAssetType.URI_ASSET))))
                .setFileSearch(
                    new FileSearchToolResource().setVectorStoreIds(Arrays.asList("qrsolbxeyrvpwkmfvxnrwlbptelg"))
                        .setVectorStores(Arrays.asList(new VectorStoreConfigurations("fcn",
                            new VectorStoreConfiguration(Arrays.asList(new VectorStoreDataSource("ebabvsmrocsomzfimydk",
                                VectorStoreDataSourceAssetType.URI_ASSET)))))))
                .setAzureAISearch(new AzureAISearchToolResource()
                    .setIndexList(Arrays.asList(new AISearchIndexResource().setIndexConnectionId("givdxrraw")
                        .setIndexName("khqfbzuyzcdpf")
                        .setQueryType(AzureAISearchQueryType.SIMPLE)
                        .setTopK(6)
                        .setFilter("duddvlojptamyxdavaqbw")
                        .setIndexAssetId("xnoschwz")))),
            mapOf());

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("rcifhnxeaeyxdtz", response.getId());
        // verify property "object"
        Assertions.assertEquals("thread", response.getObject());
        // verify property "createdAt"
        Assertions.assertNotNull(response.getCreatedAt());
        // verify property "toolResources"
        ToolResources responseToolResources = response.getToolResources();
        Assertions.assertNotNull(responseToolResources);
        CodeInterpreterToolResource responseToolResourcesCodeInterpreter = responseToolResources.getCodeInterpreter();
        Assertions.assertNotNull(responseToolResourcesCodeInterpreter);
        List<String> responseToolResourcesCodeInterpreterFileIds = responseToolResourcesCodeInterpreter.getFileIds();
        Assertions.assertEquals("mcbwmhrbuwuepomhmupa", responseToolResourcesCodeInterpreterFileIds.iterator().next());
        List<VectorStoreDataSource> responseToolResourcesCodeInterpreterDataSources
            = responseToolResourcesCodeInterpreter.getDataSources();
        VectorStoreDataSource responseToolResourcesCodeInterpreterDataSourcesFirstItem
            = responseToolResourcesCodeInterpreterDataSources.iterator().next();
        Assertions.assertNotNull(responseToolResourcesCodeInterpreterDataSourcesFirstItem);
        Assertions.assertEquals("ebabvsmrocsomzfimydk",
            responseToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            responseToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetType());
        FileSearchToolResource responseToolResourcesFileSearch = responseToolResources.getFileSearch();
        Assertions.assertNotNull(responseToolResourcesFileSearch);
        List<String> responseToolResourcesFileSearchVectorStoreIds
            = responseToolResourcesFileSearch.getVectorStoreIds();
        Assertions.assertEquals("qrsolbxeyrvpwkmfvxnrwlbptelg",
            responseToolResourcesFileSearchVectorStoreIds.iterator().next());
        List<VectorStoreConfigurations> responseToolResourcesFileSearchVectorStores
            = responseToolResourcesFileSearch.getVectorStores();
        VectorStoreConfigurations responseToolResourcesFileSearchVectorStoresFirstItem
            = responseToolResourcesFileSearchVectorStores.iterator().next();
        Assertions.assertNotNull(responseToolResourcesFileSearchVectorStoresFirstItem);
        Assertions.assertEquals("fcn", responseToolResourcesFileSearchVectorStoresFirstItem.getStoreName());
        VectorStoreConfiguration responseToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration
            = responseToolResourcesFileSearchVectorStoresFirstItem.getStoreConfiguration();
        Assertions.assertNotNull(responseToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration);
        List<VectorStoreDataSource> responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources
            = responseToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration.getDataSources();
        VectorStoreDataSource responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
            = responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources.iterator().next();
        Assertions
            .assertNotNull(responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem);
        Assertions.assertEquals("ebabvsmrocsomzfimydk",
            responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
                .getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem.getAssetType());
        AzureAISearchToolResource responseToolResourcesAzureAISearch = responseToolResources.getAzureAISearch();
        Assertions.assertNotNull(responseToolResourcesAzureAISearch);
        List<AISearchIndexResource> responseToolResourcesAzureAISearchIndexList
            = responseToolResourcesAzureAISearch.getIndexList();
        AISearchIndexResource responseToolResourcesAzureAISearchIndexListFirstItem
            = responseToolResourcesAzureAISearchIndexList.iterator().next();
        Assertions.assertNotNull(responseToolResourcesAzureAISearchIndexListFirstItem);
        Assertions.assertEquals("givdxrraw",
            responseToolResourcesAzureAISearchIndexListFirstItem.getIndexConnectionId());
        Assertions.assertEquals("khqfbzuyzcdpf", responseToolResourcesAzureAISearchIndexListFirstItem.getIndexName());
        Assertions.assertEquals(AzureAISearchQueryType.SIMPLE,
            responseToolResourcesAzureAISearchIndexListFirstItem.getQueryType());
        Assertions.assertEquals(6, responseToolResourcesAzureAISearchIndexListFirstItem.getTopK());
        Assertions.assertEquals("duddvlojptamyxdavaqbw",
            responseToolResourcesAzureAISearchIndexListFirstItem.getFilter());
        Assertions.assertEquals("xnoschwz", responseToolResourcesAzureAISearchIndexListFirstItem.getIndexAssetId());
        // verify property "metadata"
        Assertions.assertNotNull(response.getMetadata());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
