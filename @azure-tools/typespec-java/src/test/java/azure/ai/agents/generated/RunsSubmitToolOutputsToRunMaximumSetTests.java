// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.AISearchIndexResource;
import azure.ai.agents.models.AzureAISearchQueryType;
import azure.ai.agents.models.AzureAISearchToolResource;
import azure.ai.agents.models.CodeInterpreterToolResource;
import azure.ai.agents.models.FileSearchToolResource;
import azure.ai.agents.models.IncompleteDetailsReason;
import azure.ai.agents.models.IncompleteRunDetails;
import azure.ai.agents.models.RequiredAction;
import azure.ai.agents.models.RunCompletionUsage;
import azure.ai.agents.models.RunError;
import azure.ai.agents.models.RunStatus;
import azure.ai.agents.models.ThreadRun;
import azure.ai.agents.models.ToolApproval;
import azure.ai.agents.models.ToolDefinition;
import azure.ai.agents.models.ToolOutput;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.TruncationObject;
import azure.ai.agents.models.TruncationStrategy;
import azure.ai.agents.models.VectorStoreConfiguration;
import azure.ai.agents.models.VectorStoreConfigurations;
import azure.ai.agents.models.VectorStoreDataSource;
import azure.ai.agents.models.VectorStoreDataSourceAssetType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class RunsSubmitToolOutputsToRunMaximumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testRunsSubmitToolOutputsToRunMaximumSetTests() {
        // method invocation
        ThreadRun response = runsClient.submitToolOutputsToRun("thread_abc123", "run_def456",
            Arrays.asList(
                new ToolOutput().setToolCallId("call_abc123")
                    .setOutput("{\"result\": 3.0, \"type\": \"mean\", \"count\": 5}"),
                new ToolOutput().setToolCallId("call_def456")
                    .setOutput("{\"chart_url\": \"https://example.com/chart.png\", \"format\": \"png\"}")),
            Arrays.asList(
                new ToolApproval("call_ghi789", true)
                    .setHeaders(mapOf("Content-Type", "application/json", "Authorization", "fakeTokenPlaceholder")),
                new ToolApproval("call_jkl012", false).setHeaders(mapOf("Reason", "Data validation failed"))),
            false);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("run_def456", response.getId());
        // verify property "object"
        Assertions.assertEquals("thread.run", response.getObject());
        // verify property "threadId"
        Assertions.assertEquals("thread_abc123", response.getThreadId());
        // verify property "assistantId"
        Assertions.assertEquals("asst_abc123", response.getAssistantId());
        // verify property "status"
        Assertions.assertEquals(RunStatus.IN_PROGRESS, response.getStatus());
        // verify property "requiredAction"
        RequiredAction responseRequiredAction = response.getRequiredAction();
        Assertions.assertNotNull(responseRequiredAction);
        Assertions.assertEquals("submit_tool_outputs", responseRequiredAction.getType());
        // verify property "lastError"
        RunError responseLastError = response.getLastError();
        Assertions.assertNotNull(responseLastError);
        Assertions.assertEquals("server_error", responseLastError.getCode());
        Assertions.assertEquals("jadlgjrkhbhukfc", responseLastError.getMessage());
        // verify property "model"
        Assertions.assertEquals("gpt-4", response.getModel());
        // verify property "instructions"
        Assertions.assertEquals("You are a helpful assistant. Analyze the data carefully and provide insights.",
            response.getInstructions());
        // verify property "tools"
        List<ToolDefinition> responseTools = response.getTools();
        ToolDefinition responseToolsFirstItem = responseTools.iterator().next();
        Assertions.assertNotNull(responseToolsFirstItem);
        Assertions.assertEquals("code_interpreter", responseToolsFirstItem.getType());
        // verify property "createdAt"
        Assertions.assertNotNull(response.getCreatedAt());
        // verify property "expiresAt"
        Assertions.assertNotNull(response.getExpiresAt());
        // verify property "startedAt"
        Assertions.assertNotNull(response.getStartedAt());
        // verify property "completedAt"
        Assertions.assertNotNull(response.getCompletedAt());
        // verify property "cancelledAt"
        Assertions.assertNotNull(response.getCancelledAt());
        // verify property "failedAt"
        Assertions.assertNotNull(response.getFailedAt());
        // verify property "incompleteDetails"
        IncompleteRunDetails responseIncompleteDetails = response.getIncompleteDetails();
        Assertions.assertNotNull(responseIncompleteDetails);
        Assertions.assertEquals(IncompleteDetailsReason.fromString("content_filter"),
            responseIncompleteDetails.getReason());
        // verify property "usage"
        RunCompletionUsage responseUsage = response.getUsage();
        Assertions.assertNotNull(responseUsage);
        Assertions.assertEquals(25L, responseUsage.getCompletionTokens());
        Assertions.assertEquals(2L, responseUsage.getPromptTokens());
        Assertions.assertEquals(10L, responseUsage.getTotalTokens());
        // verify property "temperature"
        Assertions.assertEquals(0.8D, response.getTemperature());
        // verify property "topP"
        Assertions.assertEquals(0.95D, response.getTopP());
        // verify property "maxPromptTokens"
        Assertions.assertEquals(8192, response.getMaxPromptTokens());
        // verify property "maxCompletionTokens"
        Assertions.assertEquals(4096, response.getMaxCompletionTokens());
        // verify property "truncationStrategy"
        TruncationObject responseTruncationStrategy = response.getTruncationStrategy();
        Assertions.assertNotNull(responseTruncationStrategy);
        Assertions.assertEquals(TruncationStrategy.LAST_MESSAGES, responseTruncationStrategy.getType());
        Assertions.assertEquals(10, responseTruncationStrategy.getLastMessages());
        // verify property "toolChoice"
        Assertions.assertNotNull(response.getToolChoice());
        // verify property "responseFormat"
        Assertions.assertNotNull(response.getResponseFormat());
        // verify property "metadata"
        Assertions.assertNotNull(response.getMetadata());
        // verify property "toolResources"
        ToolResources responseToolResources = response.getToolResources();
        Assertions.assertNotNull(responseToolResources);
        CodeInterpreterToolResource responseToolResourcesCodeInterpreter = responseToolResources.getCodeInterpreter();
        Assertions.assertNotNull(responseToolResourcesCodeInterpreter);
        List<String> responseToolResourcesCodeInterpreterFileIds = responseToolResourcesCodeInterpreter.getFileIds();
        Assertions.assertEquals("file_abc123", responseToolResourcesCodeInterpreterFileIds.iterator().next());
        List<VectorStoreDataSource> responseToolResourcesCodeInterpreterDataSources
            = responseToolResourcesCodeInterpreter.getDataSources();
        VectorStoreDataSource responseToolResourcesCodeInterpreterDataSourcesFirstItem
            = responseToolResourcesCodeInterpreterDataSources.iterator().next();
        Assertions.assertNotNull(responseToolResourcesCodeInterpreterDataSourcesFirstItem);
        Assertions.assertEquals("https://example.com/dataset.csv",
            responseToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            responseToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetType());
        FileSearchToolResource responseToolResourcesFileSearch = responseToolResources.getFileSearch();
        Assertions.assertNotNull(responseToolResourcesFileSearch);
        List<String> responseToolResourcesFileSearchVectorStoreIds
            = responseToolResourcesFileSearch.getVectorStoreIds();
        Assertions.assertEquals("vs_abc123", responseToolResourcesFileSearchVectorStoreIds.iterator().next());
        List<VectorStoreConfigurations> responseToolResourcesFileSearchVectorStores
            = responseToolResourcesFileSearch.getVectorStores();
        VectorStoreConfigurations responseToolResourcesFileSearchVectorStoresFirstItem
            = responseToolResourcesFileSearchVectorStores.iterator().next();
        Assertions.assertNotNull(responseToolResourcesFileSearchVectorStoresFirstItem);
        Assertions.assertEquals("knowledge_base", responseToolResourcesFileSearchVectorStoresFirstItem.getStoreName());
        VectorStoreConfiguration responseToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration
            = responseToolResourcesFileSearchVectorStoresFirstItem.getStoreConfiguration();
        Assertions.assertNotNull(responseToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration);
        List<VectorStoreDataSource> responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources
            = responseToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration.getDataSources();
        VectorStoreDataSource responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
            = responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources.iterator().next();
        Assertions
            .assertNotNull(responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem);
        Assertions.assertEquals("https://example.com/docs.pdf",
            responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
                .getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            responseToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem.getAssetType());
        AzureAISearchToolResource responseToolResourcesAzureAISearch = responseToolResources.getAzureAISearch();
        Assertions.assertNotNull(responseToolResourcesAzureAISearch);
        List<AISearchIndexResource> responseToolResourcesAzureAISearchIndexList
            = responseToolResourcesAzureAISearch.getIndexList();
        AISearchIndexResource responseToolResourcesAzureAISearchIndexListFirstItem
            = responseToolResourcesAzureAISearchIndexList.iterator().next();
        Assertions.assertNotNull(responseToolResourcesAzureAISearchIndexListFirstItem);
        Assertions.assertEquals("conn_abc123",
            responseToolResourcesAzureAISearchIndexListFirstItem.getIndexConnectionId());
        Assertions.assertEquals("data_index", responseToolResourcesAzureAISearchIndexListFirstItem.getIndexName());
        Assertions.assertEquals(AzureAISearchQueryType.SEMANTIC,
            responseToolResourcesAzureAISearchIndexListFirstItem.getQueryType());
        Assertions.assertEquals(5, responseToolResourcesAzureAISearchIndexListFirstItem.getTopK());
        Assertions.assertEquals("timestamp gt 2024-01-01",
            responseToolResourcesAzureAISearchIndexListFirstItem.getFilter());
        Assertions.assertEquals("idx_abc123", responseToolResourcesAzureAISearchIndexListFirstItem.getIndexAssetId());
        // verify property "parallelToolCalls"
        Assertions.assertEquals(true, response.isParallelToolCalls());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
