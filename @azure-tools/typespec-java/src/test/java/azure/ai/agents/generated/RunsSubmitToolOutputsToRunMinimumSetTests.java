// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.IncompleteDetailsReason;
import azure.ai.agents.models.IncompleteRunDetails;
import azure.ai.agents.models.RequiredAction;
import azure.ai.agents.models.RunCompletionUsage;
import azure.ai.agents.models.RunError;
import azure.ai.agents.models.RunStatus;
import azure.ai.agents.models.ThreadRun;
import azure.ai.agents.models.ToolDefinition;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.TruncationObject;
import azure.ai.agents.models.TruncationStrategy;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class RunsSubmitToolOutputsToRunMinimumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testRunsSubmitToolOutputsToRunMinimumSetTests() {
        // method invocation
        ThreadRun response
            = runsClient.submitToolOutputsToRun("thread_abc123", "run_def456", Arrays.asList(), Arrays.asList(), null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("run_def456", response.getId());
        // verify property "object"
        Assertions.assertEquals("thread.run", response.getObject());
        // verify property "threadId"
        Assertions.assertEquals("thread_abc123", response.getThreadId());
        // verify property "assistantId"
        Assertions.assertEquals("asst_abc123", response.getAssistantId());
        // verify property "status"
        Assertions.assertEquals(RunStatus.IN_PROGRESS, response.getStatus());
        // verify property "requiredAction"
        RequiredAction responseRequiredAction = response.getRequiredAction();
        Assertions.assertNotNull(responseRequiredAction);
        Assertions.assertEquals("submit_tool_outputs", responseRequiredAction.getType());
        // verify property "lastError"
        RunError responseLastError = response.getLastError();
        Assertions.assertNotNull(responseLastError);
        Assertions.assertEquals("server_error", responseLastError.getCode());
        Assertions.assertEquals("jadlgjrkhbhukfc", responseLastError.getMessage());
        // verify property "model"
        Assertions.assertEquals("gpt-4", response.getModel());
        // verify property "instructions"
        Assertions.assertEquals("You are a helpful assistant.", response.getInstructions());
        // verify property "tools"
        List<ToolDefinition> responseTools = response.getTools();
        Assertions.assertEquals(0, responseTools.size());
        // verify property "createdAt"
        Assertions.assertNotNull(response.getCreatedAt());
        // verify property "expiresAt"
        Assertions.assertNotNull(response.getExpiresAt());
        // verify property "startedAt"
        Assertions.assertNotNull(response.getStartedAt());
        // verify property "completedAt"
        Assertions.assertNotNull(response.getCompletedAt());
        // verify property "cancelledAt"
        Assertions.assertNotNull(response.getCancelledAt());
        // verify property "failedAt"
        Assertions.assertNotNull(response.getFailedAt());
        // verify property "incompleteDetails"
        IncompleteRunDetails responseIncompleteDetails = response.getIncompleteDetails();
        Assertions.assertNotNull(responseIncompleteDetails);
        Assertions.assertEquals(IncompleteDetailsReason.fromString("content_filter"),
            responseIncompleteDetails.getReason());
        // verify property "usage"
        RunCompletionUsage responseUsage = response.getUsage();
        Assertions.assertNotNull(responseUsage);
        Assertions.assertEquals(25L, responseUsage.getCompletionTokens());
        Assertions.assertEquals(2L, responseUsage.getPromptTokens());
        Assertions.assertEquals(10L, responseUsage.getTotalTokens());
        // verify property "temperature"
        Assertions.assertEquals(0.7D, response.getTemperature());
        // verify property "topP"
        Assertions.assertEquals(0.9D, response.getTopP());
        // verify property "maxPromptTokens"
        Assertions.assertEquals(4096, response.getMaxPromptTokens());
        // verify property "maxCompletionTokens"
        Assertions.assertEquals(2048, response.getMaxCompletionTokens());
        // verify property "truncationStrategy"
        TruncationObject responseTruncationStrategy = response.getTruncationStrategy();
        Assertions.assertNotNull(responseTruncationStrategy);
        Assertions.assertEquals(TruncationStrategy.AUTO, responseTruncationStrategy.getType());
        // verify property "toolChoice"
        Assertions.assertNotNull(response.getToolChoice());
        // verify property "responseFormat"
        Assertions.assertNotNull(response.getResponseFormat());
        // verify property "metadata"
        Assertions.assertNotNull(response.getMetadata());
        // verify property "toolResources"
        ToolResources responseToolResources = response.getToolResources();
        Assertions.assertNotNull(responseToolResources);
        // verify property "parallelToolCalls"
        Assertions.assertEquals(true, response.isParallelToolCalls());
    }
}
