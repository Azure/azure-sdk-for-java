// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.AISearchIndexResource;
import azure.ai.agents.models.AzureAISearchQueryType;
import azure.ai.agents.models.AzureAISearchToolResource;
import azure.ai.agents.models.CodeInterpreterToolResource;
import azure.ai.agents.models.FileSearchToolResource;
import azure.ai.agents.models.ListSortOrder;
import azure.ai.agents.models.PersistentAgentThread;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.VectorStoreConfiguration;
import azure.ai.agents.models.VectorStoreConfigurations;
import azure.ai.agents.models.VectorStoreDataSource;
import azure.ai.agents.models.VectorStoreDataSourceAssetType;
import com.azure.core.http.rest.PagedIterable;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ThreadsListThreadsMaximumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testThreadsListThreadsMaximumSetTests() {
        // method invocation
        PagedIterable<PersistentAgentThread> response
            = threadsClient.listThreads(4, ListSortOrder.ASCENDING, "gwxzaxbysdlgapevrxcqccfpt", "lxyvcdnmj");

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        PersistentAgentThread firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("rcifhnxeaeyxdtz", firstItem.getId());
        // verify property "object"
        Assertions.assertEquals("thread", firstItem.getObject());
        // verify property "createdAt"
        Assertions.assertNotNull(firstItem.getCreatedAt());
        // verify property "toolResources"
        ToolResources firstItemToolResources = firstItem.getToolResources();
        Assertions.assertNotNull(firstItemToolResources);
        CodeInterpreterToolResource firstItemToolResourcesCodeInterpreter = firstItemToolResources.getCodeInterpreter();
        Assertions.assertNotNull(firstItemToolResourcesCodeInterpreter);
        List<String> firstItemToolResourcesCodeInterpreterFileIds = firstItemToolResourcesCodeInterpreter.getFileIds();
        Assertions.assertEquals("mcbwmhrbuwuepomhmupa", firstItemToolResourcesCodeInterpreterFileIds.iterator().next());
        List<VectorStoreDataSource> firstItemToolResourcesCodeInterpreterDataSources
            = firstItemToolResourcesCodeInterpreter.getDataSources();
        VectorStoreDataSource firstItemToolResourcesCodeInterpreterDataSourcesFirstItem
            = firstItemToolResourcesCodeInterpreterDataSources.iterator().next();
        Assertions.assertNotNull(firstItemToolResourcesCodeInterpreterDataSourcesFirstItem);
        Assertions.assertEquals("ebabvsmrocsomzfimydk",
            firstItemToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            firstItemToolResourcesCodeInterpreterDataSourcesFirstItem.getAssetType());
        FileSearchToolResource firstItemToolResourcesFileSearch = firstItemToolResources.getFileSearch();
        Assertions.assertNotNull(firstItemToolResourcesFileSearch);
        List<String> firstItemToolResourcesFileSearchVectorStoreIds
            = firstItemToolResourcesFileSearch.getVectorStoreIds();
        Assertions.assertEquals("qrsolbxeyrvpwkmfvxnrwlbptelg",
            firstItemToolResourcesFileSearchVectorStoreIds.iterator().next());
        List<VectorStoreConfigurations> firstItemToolResourcesFileSearchVectorStores
            = firstItemToolResourcesFileSearch.getVectorStores();
        VectorStoreConfigurations firstItemToolResourcesFileSearchVectorStoresFirstItem
            = firstItemToolResourcesFileSearchVectorStores.iterator().next();
        Assertions.assertNotNull(firstItemToolResourcesFileSearchVectorStoresFirstItem);
        Assertions.assertEquals("fcn", firstItemToolResourcesFileSearchVectorStoresFirstItem.getStoreName());
        VectorStoreConfiguration firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration
            = firstItemToolResourcesFileSearchVectorStoresFirstItem.getStoreConfiguration();
        Assertions.assertNotNull(firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration);
        List<VectorStoreDataSource> firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources
            = firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfiguration.getDataSources();
        VectorStoreDataSource firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
            = firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSources.iterator().next();
        Assertions
            .assertNotNull(firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem);
        Assertions.assertEquals("ebabvsmrocsomzfimydk",
            firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem
                .getAssetIdentifier());
        Assertions.assertEquals(VectorStoreDataSourceAssetType.URI_ASSET,
            firstItemToolResourcesFileSearchVectorStoresFirstItemStoreConfigurationDataSourcesFirstItem.getAssetType());
        AzureAISearchToolResource firstItemToolResourcesAzureAISearch = firstItemToolResources.getAzureAISearch();
        Assertions.assertNotNull(firstItemToolResourcesAzureAISearch);
        List<AISearchIndexResource> firstItemToolResourcesAzureAISearchIndexList
            = firstItemToolResourcesAzureAISearch.getIndexList();
        AISearchIndexResource firstItemToolResourcesAzureAISearchIndexListFirstItem
            = firstItemToolResourcesAzureAISearchIndexList.iterator().next();
        Assertions.assertNotNull(firstItemToolResourcesAzureAISearchIndexListFirstItem);
        Assertions.assertEquals("givdxrraw",
            firstItemToolResourcesAzureAISearchIndexListFirstItem.getIndexConnectionId());
        Assertions.assertEquals("khqfbzuyzcdpf", firstItemToolResourcesAzureAISearchIndexListFirstItem.getIndexName());
        Assertions.assertEquals(AzureAISearchQueryType.SIMPLE,
            firstItemToolResourcesAzureAISearchIndexListFirstItem.getQueryType());
        Assertions.assertEquals(6, firstItemToolResourcesAzureAISearchIndexListFirstItem.getTopK());
        Assertions.assertEquals("duddvlojptamyxdavaqbw",
            firstItemToolResourcesAzureAISearchIndexListFirstItem.getFilter());
        Assertions.assertEquals("xnoschwz", firstItemToolResourcesAzureAISearchIndexListFirstItem.getIndexAssetId());
        // verify property "metadata"
        Assertions.assertNotNull(firstItem.getMetadata());
    }
}
