// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.MessageAttachment;
import azure.ai.agents.models.MessageContent;
import azure.ai.agents.models.MessageIncompleteDetails;
import azure.ai.agents.models.MessageIncompleteDetailsReason;
import azure.ai.agents.models.MessageRole;
import azure.ai.agents.models.MessageStatus;
import azure.ai.agents.models.ThreadMessage;
import azure.ai.agents.models.VectorStoreDataSource;
import azure.ai.agents.models.VectorStoreDataSourceAssetType;
import com.azure.core.util.BinaryData;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class MessagesCreateMessageMaximumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testMessagesCreateMessageMaximumSetTests() {
        // method invocation
        ThreadMessage response = messagesClient.createMessage("thread_abc123", MessageRole.USER, BinaryData.fromBytes(
            "{blocks=[{type=text, text=Please analyze the attached data and provide insights.}, {type=image_file, image_file={file_id=file_abc123}}]}"
                .getBytes(StandardCharsets.UTF_8)),
            Arrays.asList(
                new MessageAttachment(
                    Arrays.asList(BinaryData.fromBytes("{type=code_interpreter}".getBytes(StandardCharsets.UTF_8)),
                        BinaryData.fromBytes("{type=file_search}".getBytes(StandardCharsets.UTF_8))))
                            .setFileId("file_abc123"),
                new MessageAttachment(
                    Arrays.asList(BinaryData.fromBytes("{type=file_search}".getBytes(StandardCharsets.UTF_8))))
                        .setDataSource(new VectorStoreDataSource("https://example.com/dataset.csv",
                            VectorStoreDataSourceAssetType.URI_ASSET))),
            mapOf("user_id", "user_12345", "session_id", "session_abc123", "priority", "high"));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("msg_abc123", response.getId());
        // verify property "object"
        Assertions.assertEquals("thread.message", response.getObject());
        // verify property "createdAt"
        Assertions.assertNotNull(response.getCreatedAt());
        // verify property "threadId"
        Assertions.assertEquals("thread_abc123", response.getThreadId());
        // verify property "status"
        Assertions.assertEquals(MessageStatus.COMPLETED, response.getStatus());
        // verify property "incompleteDetails"
        MessageIncompleteDetails responseIncompleteDetails = response.getIncompleteDetails();
        Assertions.assertNotNull(responseIncompleteDetails);
        Assertions.assertEquals(MessageIncompleteDetailsReason.CONTENT_FILTER, responseIncompleteDetails.getReason());
        // verify property "completedAt"
        Assertions.assertNotNull(response.getCompletedAt());
        // verify property "incompleteAt"
        Assertions.assertNotNull(response.getIncompleteAt());
        // verify property "role"
        Assertions.assertEquals(MessageRole.USER, response.getRole());
        // verify property "content"
        List<MessageContent> responseContent = response.getContent();
        MessageContent responseContentFirstItem = responseContent.iterator().next();
        Assertions.assertNotNull(responseContentFirstItem);
        Assertions.assertEquals("text", responseContentFirstItem.getType());
        // verify property "assistantId"
        Assertions.assertEquals("flbyv", response.getAssistantId());
        // verify property "runId"
        Assertions.assertEquals("mdwsaqyplfhtadedzuatxvld", response.getRunId());
        // verify property "attachments"
        List<MessageAttachment> responseAttachments = response.getAttachments();
        MessageAttachment responseAttachmentsFirstItem = responseAttachments.iterator().next();
        Assertions.assertNotNull(responseAttachmentsFirstItem);
        Assertions.assertEquals("file_abc123", responseAttachmentsFirstItem.getFileId());
        List<BinaryData> responseAttachmentsFirstItemTools = responseAttachmentsFirstItem.getTools();
        Assertions.assertNotNull(responseAttachmentsFirstItemTools.iterator().next());
        // verify property "metadata"
        Assertions.assertNotNull(response.getMetadata());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
