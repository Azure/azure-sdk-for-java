// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.ai.agents.generated;

import azure.ai.agents.models.IncompleteDetailsReason;
import azure.ai.agents.models.IncompleteRunDetails;
import azure.ai.agents.models.RequiredAction;
import azure.ai.agents.models.RunCompletionUsage;
import azure.ai.agents.models.RunError;
import azure.ai.agents.models.RunStatus;
import azure.ai.agents.models.ThreadRun;
import azure.ai.agents.models.ToolDefinition;
import azure.ai.agents.models.ToolResources;
import azure.ai.agents.models.TruncationObject;
import azure.ai.agents.models.TruncationStrategy;
import com.azure.core.http.rest.PagedIterable;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class RunsListRunsMinimumSetTests extends PersistentAgentsAdministrationClientTestBase {
    @Test
    @Disabled
    public void testRunsListRunsMinimumSetTests() {
        // method invocation
        PagedIterable<ThreadRun> response = runsClient.listRuns("thread_abc123", null, null, null, null);

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        ThreadRun firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("run_def456", firstItem.getId());
        // verify property "object"
        Assertions.assertEquals("thread.run", firstItem.getObject());
        // verify property "threadId"
        Assertions.assertEquals("thread_abc123", firstItem.getThreadId());
        // verify property "assistantId"
        Assertions.assertEquals("asst_abc123", firstItem.getAssistantId());
        // verify property "status"
        Assertions.assertEquals(RunStatus.COMPLETED, firstItem.getStatus());
        // verify property "requiredAction"
        RequiredAction firstItemRequiredAction = firstItem.getRequiredAction();
        Assertions.assertNotNull(firstItemRequiredAction);
        Assertions.assertEquals("submit_tool_outputs", firstItemRequiredAction.getType());
        // verify property "lastError"
        RunError firstItemLastError = firstItem.getLastError();
        Assertions.assertNotNull(firstItemLastError);
        Assertions.assertEquals("server_error", firstItemLastError.getCode());
        Assertions.assertEquals("jadlgjrkhbhukfc", firstItemLastError.getMessage());
        // verify property "model"
        Assertions.assertEquals("gpt-4", firstItem.getModel());
        // verify property "instructions"
        Assertions.assertEquals("You are a helpful assistant.", firstItem.getInstructions());
        // verify property "tools"
        List<ToolDefinition> firstItemTools = firstItem.getTools();
        Assertions.assertEquals(0, firstItemTools.size());
        // verify property "createdAt"
        Assertions.assertNotNull(firstItem.getCreatedAt());
        // verify property "expiresAt"
        Assertions.assertNotNull(firstItem.getExpiresAt());
        // verify property "startedAt"
        Assertions.assertNotNull(firstItem.getStartedAt());
        // verify property "completedAt"
        Assertions.assertNotNull(firstItem.getCompletedAt());
        // verify property "cancelledAt"
        Assertions.assertNotNull(firstItem.getCancelledAt());
        // verify property "failedAt"
        Assertions.assertNotNull(firstItem.getFailedAt());
        // verify property "incompleteDetails"
        IncompleteRunDetails firstItemIncompleteDetails = firstItem.getIncompleteDetails();
        Assertions.assertNotNull(firstItemIncompleteDetails);
        Assertions.assertEquals(IncompleteDetailsReason.fromString("content_filter"),
            firstItemIncompleteDetails.getReason());
        // verify property "usage"
        RunCompletionUsage firstItemUsage = firstItem.getUsage();
        Assertions.assertNotNull(firstItemUsage);
        Assertions.assertEquals(256L, firstItemUsage.getCompletionTokens());
        Assertions.assertEquals(512L, firstItemUsage.getPromptTokens());
        Assertions.assertEquals(768L, firstItemUsage.getTotalTokens());
        // verify property "temperature"
        Assertions.assertEquals(0.7D, firstItem.getTemperature());
        // verify property "topP"
        Assertions.assertEquals(0.9D, firstItem.getTopP());
        // verify property "maxPromptTokens"
        Assertions.assertEquals(4096, firstItem.getMaxPromptTokens());
        // verify property "maxCompletionTokens"
        Assertions.assertEquals(2048, firstItem.getMaxCompletionTokens());
        // verify property "truncationStrategy"
        TruncationObject firstItemTruncationStrategy = firstItem.getTruncationStrategy();
        Assertions.assertNotNull(firstItemTruncationStrategy);
        Assertions.assertEquals(TruncationStrategy.AUTO, firstItemTruncationStrategy.getType());
        // verify property "toolChoice"
        Assertions.assertNotNull(firstItem.getToolChoice());
        // verify property "responseFormat"
        Assertions.assertNotNull(firstItem.getResponseFormat());
        // verify property "metadata"
        Assertions.assertNotNull(firstItem.getMetadata());
        // verify property "toolResources"
        ToolResources firstItemToolResources = firstItem.getToolResources();
        Assertions.assertNotNull(firstItemToolResources);
        // verify property "parallelToolCalls"
        Assertions.assertEquals(true, firstItem.isParallelToolCalls());
    }
}
