/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.management.network;

import com.microsoft.azure.management.network.models.DnsNameAvailabilityResult;
import com.microsoft.rest.AzureClient;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.Interceptor;
import com.squareup.okhttp.logging.HttpLoggingInterceptor.Level;
import com.squareup.okhttp.ResponseBody;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.List;
import retrofit.Call;
import retrofit.http.GET;
import retrofit.http.Header;
import retrofit.http.Path;
import retrofit.http.Query;

/**
 * The interface for NetworkManagementClient class.
 */
public interface NetworkManagementClient {
    /**
     * Gets the URI used as the base for all cloud service requests.
     * @return The BaseUri value.
     */
    String getBaseUri();

    /**
     * Gets the list of interceptors the OkHttp client will execute.
     * @return the list of interceptors.
     */
    List<Interceptor> getClientInterceptors();

    /**
     * Sets the logging level for OkHttp client.
     *
     * @param logLevel the logging level enum.
     */
    void setLogLevel(Level logLevel);

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets The management credentials for Azure..
     *
     * @return the credentials value.
     */
    ServiceClientCredentials getCredentials();

    /**
     * Gets Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call..
     *
     * @return the subscriptionId value.
     */
    String getSubscriptionId();

    /**
     * Sets Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call..
     *
     * @param subscriptionId the subscriptionId value.
     */
    void setSubscriptionId(String subscriptionId);

    /**
     * Gets Client Api Version..
     *
     * @return the apiVersion value.
     */
    String getApiVersion();

    /**
     * Gets Gets or sets the preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String getAcceptLanguage();

    /**
     * Sets Gets or sets the preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     */
    void setAcceptLanguage(String acceptLanguage);

    /**
     * Gets The retry timeout for Long Running Operations..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int getLongRunningOperationRetryTimeout();

    /**
     * Sets The retry timeout for Long Running Operations..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     */
    void setLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets the ApplicationGatewaysOperations object to access its operations.
     * @return the applicationGateways value.
     */
    ApplicationGatewaysOperations getApplicationGateways();

    /**
     * Gets the ExpressRouteCircuitAuthorizationsOperations object to access its operations.
     * @return the expressRouteCircuitAuthorizations value.
     */
    ExpressRouteCircuitAuthorizationsOperations getExpressRouteCircuitAuthorizations();

    /**
     * Gets the ExpressRouteCircuitPeeringsOperations object to access its operations.
     * @return the expressRouteCircuitPeerings value.
     */
    ExpressRouteCircuitPeeringsOperations getExpressRouteCircuitPeerings();

    /**
     * Gets the ExpressRouteCircuitsOperations object to access its operations.
     * @return the expressRouteCircuits value.
     */
    ExpressRouteCircuitsOperations getExpressRouteCircuits();

    /**
     * Gets the ExpressRouteServiceProvidersOperations object to access its operations.
     * @return the expressRouteServiceProviders value.
     */
    ExpressRouteServiceProvidersOperations getExpressRouteServiceProviders();

    /**
     * Gets the LoadBalancersOperations object to access its operations.
     * @return the loadBalancers value.
     */
    LoadBalancersOperations getLoadBalancers();

    /**
     * Gets the LocalNetworkGatewaysOperations object to access its operations.
     * @return the localNetworkGateways value.
     */
    LocalNetworkGatewaysOperations getLocalNetworkGateways();

    /**
     * Gets the NetworkInterfacesOperations object to access its operations.
     * @return the networkInterfaces value.
     */
    NetworkInterfacesOperations getNetworkInterfaces();

    /**
     * Gets the NetworkSecurityGroupsOperations object to access its operations.
     * @return the networkSecurityGroups value.
     */
    NetworkSecurityGroupsOperations getNetworkSecurityGroups();

    /**
     * Gets the PublicIPAddressesOperations object to access its operations.
     * @return the publicIPAddresses value.
     */
    PublicIPAddressesOperations getPublicIPAddresses();

    /**
     * Gets the RouteTablesOperations object to access its operations.
     * @return the routeTables value.
     */
    RouteTablesOperations getRouteTables();

    /**
     * Gets the RoutesOperations object to access its operations.
     * @return the routes value.
     */
    RoutesOperations getRoutes();

    /**
     * Gets the SecurityRulesOperations object to access its operations.
     * @return the securityRules value.
     */
    SecurityRulesOperations getSecurityRules();

    /**
     * Gets the SubnetsOperations object to access its operations.
     * @return the subnets value.
     */
    SubnetsOperations getSubnets();

    /**
     * Gets the UsagesOperations object to access its operations.
     * @return the usages value.
     */
    UsagesOperations getUsages();

    /**
     * Gets the VirtualNetworkGatewayConnectionsOperations object to access its operations.
     * @return the virtualNetworkGatewayConnections value.
     */
    VirtualNetworkGatewayConnectionsOperations getVirtualNetworkGatewayConnections();

    /**
     * Gets the VirtualNetworkGatewaysOperations object to access its operations.
     * @return the virtualNetworkGateways value.
     */
    VirtualNetworkGatewaysOperations getVirtualNetworkGateways();

    /**
     * Gets the VirtualNetworksOperations object to access its operations.
     * @return the virtualNetworks value.
     */
    VirtualNetworksOperations getVirtualNetworks();

    /**
     * The interface defining all the services for NetworkManagementClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface NetworkManagementClientService {
        @GET("/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability")
        Call<ResponseBody> checkDnsNameAvailability(@Path("location") String location, @Path("subscriptionId") String subscriptionId, @Query("domainNameLabel") String domainNameLabel, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

    }

    /**
     * Checks whether a domain name in the cloudapp.net zone is available for use.
     *
     * @param location The location of the domain name
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the DnsNameAvailabilityResult object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<DnsNameAvailabilityResult> checkDnsNameAvailability(String location, String domainNameLabel) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Checks whether a domain name in the cloudapp.net zone is available for use.
     *
     * @param location The location of the domain name
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> checkDnsNameAvailabilityAsync(String location, String domainNameLabel, final ServiceCallback<DnsNameAvailabilityResult> serviceCallback);

}
