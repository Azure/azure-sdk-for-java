/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.management.network;

import com.microsoft.azure.management.network.models.ApplicationGateway;
import com.microsoft.azure.management.network.models.PageImpl;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.lang.InterruptedException;
import retrofit.Call;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.Header;
import retrofit.http.HTTP;
import retrofit.http.Path;
import retrofit.http.POST;
import retrofit.http.PUT;
import retrofit.http.Query;
import retrofit.http.Url;

/**
 * An instance of this class provides access to all the operations defined
 * in ApplicationGatewaysOperations.
 */
public interface ApplicationGatewaysOperations {
    /**
     * The interface defining all the services for ApplicationGatewaysOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApplicationGatewaysService {
        @HTTP(path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}", method = "DELETE", hasBody = true)
        Call<ResponseBody> delete(@Path("resourceGroupName") String resourceGroupName, @Path("applicationGatewayName") String applicationGatewayName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @GET("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}")
        Call<ResponseBody> get(@Path("resourceGroupName") String resourceGroupName, @Path("applicationGatewayName") String applicationGatewayName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @PUT("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}")
        Call<ResponseBody> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("applicationGatewayName") String applicationGatewayName, @Path("subscriptionId") String subscriptionId, @Body ApplicationGateway parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @GET("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways")
        Call<ResponseBody> list(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @GET("/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways")
        Call<ResponseBody> listAll(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @POST("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start")
        Call<ResponseBody> start(@Path("resourceGroupName") String resourceGroupName, @Path("applicationGatewayName") String applicationGatewayName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @POST("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop")
        Call<ResponseBody> stop(@Path("resourceGroupName") String resourceGroupName, @Path("applicationGatewayName") String applicationGatewayName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @GET
        Call<ResponseBody> listNext(@Url String nextPageLink, @Header("accept-language") String acceptLanguage);

        @GET
        Call<ResponseBody> listAllNext(@Url String nextPageLink, @Header("accept-language") String acceptLanguage);

    }
    /**
     * The delete applicationgateway operation deletes the specified applicationgateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the applicationgateway.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @throws InterruptedException exception thrown when long running operation is interrupted
     * @return the ServiceResponse object if successful.
     */
    ServiceResponse<Void> delete(String resourceGroupName, String applicationGatewayName) throws ServiceException, IOException, IllegalArgumentException, InterruptedException;

    /**
     * The delete applicationgateway operation deletes the specified applicationgateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the applicationgateway.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> deleteAsync(String resourceGroupName, String applicationGatewayName, final ServiceCallback<Void> serviceCallback);

    /**
     * The Get applicationgateway operation retreives information about the specified applicationgateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the applicationgateway.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ApplicationGateway object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<ApplicationGateway> get(String resourceGroupName, String applicationGatewayName) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * The Get applicationgateway operation retreives information about the specified applicationgateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the applicationgateway.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getAsync(String resourceGroupName, String applicationGatewayName, final ServiceCallback<ApplicationGateway> serviceCallback);

    /**
     * The Put ApplicationGateway operation creates/updates a ApplicationGateway
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the ApplicationGateway.
     * @param parameters Parameters supplied to the create/delete ApplicationGateway operation
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @throws InterruptedException exception thrown when long running operation is interrupted
     * @return the ApplicationGateway object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<ApplicationGateway> createOrUpdate(String resourceGroupName, String applicationGatewayName, ApplicationGateway parameters) throws ServiceException, IOException, IllegalArgumentException, InterruptedException;

    /**
     * The Put ApplicationGateway operation creates/updates a ApplicationGateway
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the ApplicationGateway.
     * @param parameters Parameters supplied to the create/delete ApplicationGateway operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> createOrUpdateAsync(String resourceGroupName, String applicationGatewayName, ApplicationGateway parameters, final ServiceCallback<ApplicationGateway> serviceCallback);

    /**
     * The List ApplicationGateway opertion retrieves all the applicationgateways in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PageImpl&lt;ApplicationGateway&gt; object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<PageImpl<ApplicationGateway>> list(String resourceGroupName) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * The List ApplicationGateway opertion retrieves all the applicationgateways in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> listAsync(String resourceGroupName, final ServiceCallback<PageImpl<ApplicationGateway>> serviceCallback);

    /**
     * The List applicationgateway opertion retrieves all the applicationgateways in a subscription.
     *
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PageImpl&lt;ApplicationGateway&gt; object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<PageImpl<ApplicationGateway>> listAll() throws ServiceException, IOException, IllegalArgumentException;

    /**
     * The List applicationgateway opertion retrieves all the applicationgateways in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> listAllAsync(final ServiceCallback<PageImpl<ApplicationGateway>> serviceCallback);

    /**
     * The Start ApplicationGateway operation starts application gatewayin the specified resource group through Network resource provider.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the application gateway.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @throws InterruptedException exception thrown when long running operation is interrupted
     * @return the ServiceResponse object if successful.
     */
    ServiceResponse<Void> start(String resourceGroupName, String applicationGatewayName) throws ServiceException, IOException, IllegalArgumentException, InterruptedException;

    /**
     * The Start ApplicationGateway operation starts application gatewayin the specified resource group through Network resource provider.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the application gateway.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> startAsync(String resourceGroupName, String applicationGatewayName, final ServiceCallback<Void> serviceCallback);

    /**
     * The STOP ApplicationGateway operation stops application gatewayin the specified resource group through Network resource provider.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the application gateway.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @throws InterruptedException exception thrown when long running operation is interrupted
     * @return the ServiceResponse object if successful.
     */
    ServiceResponse<Void> stop(String resourceGroupName, String applicationGatewayName) throws ServiceException, IOException, IllegalArgumentException, InterruptedException;

    /**
     * The STOP ApplicationGateway operation stops application gatewayin the specified resource group through Network resource provider.
     *
     * @param resourceGroupName The name of the resource group.
     * @param applicationGatewayName The name of the application gateway.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> stopAsync(String resourceGroupName, String applicationGatewayName, final ServiceCallback<Void> serviceCallback);

    /**
     * The List ApplicationGateway opertion retrieves all the applicationgateways in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PageImpl&lt;ApplicationGateway&gt; object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<PageImpl<ApplicationGateway>> listNext(String nextPageLink) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * The List ApplicationGateway opertion retrieves all the applicationgateways in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> listNextAsync(String nextPageLink, final ServiceCallback<PageImpl<ApplicationGateway>> serviceCallback);

    /**
     * The List applicationgateway opertion retrieves all the applicationgateways in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PageImpl&lt;ApplicationGateway&gt; object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<PageImpl<ApplicationGateway>> listAllNext(String nextPageLink) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * The List applicationgateway opertion retrieves all the applicationgateways in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> listAllNextAsync(String nextPageLink, final ServiceCallback<PageImpl<ApplicationGateway>> serviceCallback);

}
