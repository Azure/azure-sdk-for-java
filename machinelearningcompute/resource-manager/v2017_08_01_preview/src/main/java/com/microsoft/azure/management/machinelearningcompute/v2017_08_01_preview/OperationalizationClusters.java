/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.implementation.OperationalizationClustersInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing OperationalizationClusters.
 */
public interface OperationalizationClusters extends SupportsCreating<OperationalizationCluster.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<OperationalizationCluster>, SupportsListingByResourceGroup<OperationalizationCluster>, SupportsListing<OperationalizationCluster>, HasInner<OperationalizationClustersInner> {
    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<OperationalizationClusterCredentials> listKeysAsync(String resourceGroupName, String clusterName);

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CheckSystemServicesUpdatesAvailableResponse> checkSystemServicesUpdatesAvailableAsync(String resourceGroupName, String clusterName);

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<UpdateSystemServicesResponse> updateSystemServicesAsync(String resourceGroupName, String clusterName);

}
