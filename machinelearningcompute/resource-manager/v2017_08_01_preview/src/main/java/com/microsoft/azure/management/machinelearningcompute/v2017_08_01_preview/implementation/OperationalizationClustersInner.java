/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.ErrorResponseWrapperException;
import com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClustersDeleteHeaders;
import com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClustersUpdateSystemServicesHeaders;
import com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusterUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in OperationalizationClusters.
 */
public class OperationalizationClustersInner implements InnerSupportsGet<OperationalizationClusterInner>, InnerSupportsDelete<Void>, InnerSupportsListing<OperationalizationClusterInner> {
    /** The Retrofit service to perform REST calls. */
    private OperationalizationClustersService service;
    /** The service client containing this operation class. */
    private MachineLearningComputeManagementClientImpl client;

    /**
     * Initializes an instance of OperationalizationClustersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public OperationalizationClustersInner(Retrofit retrofit, MachineLearningComputeManagementClientImpl client) {
        this.service = retrofit.create(OperationalizationClustersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for OperationalizationClusters to be
     * used by Retrofit to perform actually REST calls.
     */
    interface OperationalizationClustersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Body OperationalizationClusterInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Body OperationalizationClusterInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body OperationalizationClusterUpdateParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Query("deleteAll") Boolean deleteAll, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Query("deleteAll") Boolean deleteAll, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/listKeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters checkSystemServicesUpdatesAvailable" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/checkSystemServicesUpdatesAvailable")
        Observable<Response<ResponseBody>> checkSystemServicesUpdatesAvailable(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters updateSystemServices" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices")
        Observable<Response<ResponseBody>> updateSystemServices(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters beginUpdateSystemServices" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices")
        Observable<Response<ResponseBody>> beginUpdateSystemServices(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningCompute/operationalizationClusters")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningcompute.v2017_08_01_preview.OperationalizationClusters listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationalizationClusterInner object if successful.
     */
    public OperationalizationClusterInner createOrUpdate(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, parameters).toBlocking().last().body();
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationalizationClusterInner> createOrUpdateAsync(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters, final ServiceCallback<OperationalizationClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, parameters), serviceCallback);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<OperationalizationClusterInner> createOrUpdateAsync(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, parameters).map(new Func1<ServiceResponse<OperationalizationClusterInner>, OperationalizationClusterInner>() {
            @Override
            public OperationalizationClusterInner call(ServiceResponse<OperationalizationClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<OperationalizationClusterInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<OperationalizationClusterInner>() { }.getType());
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationalizationClusterInner object if successful.
     */
    public OperationalizationClusterInner beginCreateOrUpdate(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationalizationClusterInner> beginCreateOrUpdateAsync(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters, final ServiceCallback<OperationalizationClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, parameters), serviceCallback);
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<OperationalizationClusterInner> beginCreateOrUpdateAsync(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, parameters).map(new Func1<ServiceResponse<OperationalizationClusterInner>, OperationalizationClusterInner>() {
            @Override
            public OperationalizationClusterInner call(ServiceResponse<OperationalizationClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an operationalization cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<ServiceResponse<OperationalizationClusterInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, OperationalizationClusterInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationalizationClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationalizationClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationalizationClusterInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationalizationClusterInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseWrapperException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationalizationClusterInner, ErrorResponseWrapperException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationalizationClusterInner>() { }.getType())
                .register(201, new TypeToken<OperationalizationClusterInner>() { }.getType())
                .registerError(ErrorResponseWrapperException.class)
                .build(response);
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationalizationClusterInner object if successful.
     */
    public OperationalizationClusterInner getByResourceGroup(String resourceGroupName, String clusterName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationalizationClusterInner> getByResourceGroupAsync(String resourceGroupName, String clusterName, final ServiceCallback<OperationalizationClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<OperationalizationClusterInner> getByResourceGroupAsync(String resourceGroupName, String clusterName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<OperationalizationClusterInner>, OperationalizationClusterInner>() {
            @Override
            public OperationalizationClusterInner call(ServiceResponse<OperationalizationClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by this call. Call ListKeys to get them.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<ServiceResponse<OperationalizationClusterInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationalizationClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationalizationClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationalizationClusterInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationalizationClusterInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseWrapperException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationalizationClusterInner, ErrorResponseWrapperException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationalizationClusterInner>() { }.getType())
                .registerError(ErrorResponseWrapperException.class)
                .build(response);
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationalizationClusterInner object if successful.
     */
    public OperationalizationClusterInner update(String resourceGroupName, String clusterName) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationalizationClusterInner> updateAsync(String resourceGroupName, String clusterName, final ServiceCallback<OperationalizationClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<OperationalizationClusterInner> updateAsync(String resourceGroupName, String clusterName) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<OperationalizationClusterInner>, OperationalizationClusterInner>() {
            @Override
            public OperationalizationClusterInner call(ServiceResponse<OperationalizationClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<ServiceResponse<OperationalizationClusterInner>> updateWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        OperationalizationClusterUpdateParameters parameters = new OperationalizationClusterUpdateParameters();
        parameters.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationalizationClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationalizationClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationalizationClusterInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param tags Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationalizationClusterInner object if successful.
     */
    public OperationalizationClusterInner update(String resourceGroupName, String clusterName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, tags).toBlocking().single().body();
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param tags Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationalizationClusterInner> updateAsync(String resourceGroupName, String clusterName, Map<String, String> tags, final ServiceCallback<OperationalizationClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, clusterName, tags), serviceCallback);
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param tags Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<OperationalizationClusterInner> updateAsync(String resourceGroupName, String clusterName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, tags).map(new Func1<ServiceResponse<OperationalizationClusterInner>, OperationalizationClusterInner>() {
            @Override
            public OperationalizationClusterInner call(ServiceResponse<OperationalizationClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update other properties.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param tags Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterInner object
     */
    public Observable<ServiceResponse<OperationalizationClusterInner>> updateWithServiceResponseAsync(String resourceGroupName, String clusterName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        OperationalizationClusterUpdateParameters parameters = new OperationalizationClusterUpdateParameters();
        parameters.withTags(tags);
        return service.update(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationalizationClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationalizationClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationalizationClusterInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationalizationClusterInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseWrapperException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationalizationClusterInner, ErrorResponseWrapperException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationalizationClusterInner>() { }.getType())
                .registerError(ErrorResponseWrapperException.class)
                .build(response);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().last().body();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Boolean deleteAll = null;
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), deleteAll, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), OperationalizationClustersDeleteHeaders.class);
    }
    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName, Boolean deleteAll) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName, deleteAll).toBlocking().last().body();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, Boolean deleteAll, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName, deleteAll), serviceCallback);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName, Boolean deleteAll) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName, deleteAll).map(new Func1<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName, Boolean deleteAll) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), deleteAll, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), OperationalizationClustersDeleteHeaders.class);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String clusterName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String clusterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String clusterName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Boolean deleteAll = null;
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), deleteAll, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseWrapperException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String clusterName, Boolean deleteAll) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, deleteAll).toBlocking().single().body();
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String clusterName, Boolean deleteAll, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, deleteAll), serviceCallback);
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String clusterName, Boolean deleteAll) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, deleteAll).map(new Func1<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param deleteAll If true, deletes all resources associated with this cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String clusterName, Boolean deleteAll) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), deleteAll, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, OperationalizationClustersDeleteHeaders> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseWrapperException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseWrapperException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseWrapperException.class)
                .buildWithHeaders(response, OperationalizationClustersDeleteHeaders.class);
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationalizationClusterCredentialsInner object if successful.
     */
    public OperationalizationClusterCredentialsInner listKeys(String resourceGroupName, String clusterName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationalizationClusterCredentialsInner> listKeysAsync(String resourceGroupName, String clusterName, final ServiceCallback<OperationalizationClusterCredentialsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listKeysWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterCredentialsInner object
     */
    public Observable<OperationalizationClusterCredentialsInner> listKeysAsync(String resourceGroupName, String clusterName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<OperationalizationClusterCredentialsInner>, OperationalizationClusterCredentialsInner>() {
            @Override
            public OperationalizationClusterCredentialsInner call(ServiceResponse<OperationalizationClusterCredentialsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a long running operation because it fetches keys from dependencies.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationalizationClusterCredentialsInner object
     */
    public Observable<ServiceResponse<OperationalizationClusterCredentialsInner>> listKeysWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationalizationClusterCredentialsInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationalizationClusterCredentialsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationalizationClusterCredentialsInner> clientResponse = listKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationalizationClusterCredentialsInner> listKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationalizationClusterCredentialsInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationalizationClusterCredentialsInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckSystemServicesUpdatesAvailableResponseInner object if successful.
     */
    public CheckSystemServicesUpdatesAvailableResponseInner checkSystemServicesUpdatesAvailable(String resourceGroupName, String clusterName) {
        return checkSystemServicesUpdatesAvailableWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckSystemServicesUpdatesAvailableResponseInner> checkSystemServicesUpdatesAvailableAsync(String resourceGroupName, String clusterName, final ServiceCallback<CheckSystemServicesUpdatesAvailableResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkSystemServicesUpdatesAvailableWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckSystemServicesUpdatesAvailableResponseInner object
     */
    public Observable<CheckSystemServicesUpdatesAvailableResponseInner> checkSystemServicesUpdatesAvailableAsync(String resourceGroupName, String clusterName) {
        return checkSystemServicesUpdatesAvailableWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<CheckSystemServicesUpdatesAvailableResponseInner>, CheckSystemServicesUpdatesAvailableResponseInner>() {
            @Override
            public CheckSystemServicesUpdatesAvailableResponseInner call(ServiceResponse<CheckSystemServicesUpdatesAvailableResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks if updates are available for system services in the cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckSystemServicesUpdatesAvailableResponseInner object
     */
    public Observable<ServiceResponse<CheckSystemServicesUpdatesAvailableResponseInner>> checkSystemServicesUpdatesAvailableWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.checkSystemServicesUpdatesAvailable(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckSystemServicesUpdatesAvailableResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckSystemServicesUpdatesAvailableResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckSystemServicesUpdatesAvailableResponseInner> clientResponse = checkSystemServicesUpdatesAvailableDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckSystemServicesUpdatesAvailableResponseInner> checkSystemServicesUpdatesAvailableDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckSystemServicesUpdatesAvailableResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckSystemServicesUpdatesAvailableResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateSystemServicesResponseInner object if successful.
     */
    public UpdateSystemServicesResponseInner updateSystemServices(String resourceGroupName, String clusterName) {
        return updateSystemServicesWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().last().body();
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateSystemServicesResponseInner> updateSystemServicesAsync(String resourceGroupName, String clusterName, final ServiceCallback<UpdateSystemServicesResponseInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(updateSystemServicesWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<UpdateSystemServicesResponseInner> updateSystemServicesAsync(String resourceGroupName, String clusterName) {
        return updateSystemServicesWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders>, UpdateSystemServicesResponseInner>() {
            @Override
            public UpdateSystemServicesResponseInner call(ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders>> updateSystemServicesWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.updateSystemServices(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<UpdateSystemServicesResponseInner>() { }.getType(), OperationalizationClustersUpdateSystemServicesHeaders.class);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateSystemServicesResponseInner object if successful.
     */
    public UpdateSystemServicesResponseInner beginUpdateSystemServices(String resourceGroupName, String clusterName) {
        return beginUpdateSystemServicesWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateSystemServicesResponseInner> beginUpdateSystemServicesAsync(String resourceGroupName, String clusterName, final ServiceCallback<UpdateSystemServicesResponseInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginUpdateSystemServicesWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateSystemServicesResponseInner object
     */
    public Observable<UpdateSystemServicesResponseInner> beginUpdateSystemServicesAsync(String resourceGroupName, String clusterName) {
        return beginUpdateSystemServicesWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders>, UpdateSystemServicesResponseInner>() {
            @Override
            public UpdateSystemServicesResponseInner call(ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates system services in a cluster.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateSystemServicesResponseInner object
     */
    public Observable<ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders>> beginUpdateSystemServicesWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginUpdateSystemServices(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders> clientResponse = beginUpdateSystemServicesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<UpdateSystemServicesResponseInner, OperationalizationClustersUpdateSystemServicesHeaders> beginUpdateSystemServicesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UpdateSystemServicesResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UpdateSystemServicesResponseInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .buildWithHeaders(response, OperationalizationClustersUpdateSystemServicesHeaders.class);
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object if successful.
     */
    public PagedList<OperationalizationClusterInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<OperationalizationClusterInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<OperationalizationClusterInner>(response.body()) {
            @Override
            public Page<OperationalizationClusterInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<OperationalizationClusterInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<OperationalizationClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<Page<OperationalizationClusterInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Page<OperationalizationClusterInner>>() {
                @Override
                public Page<OperationalizationClusterInner> call(ServiceResponse<Page<OperationalizationClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(ServiceResponse<Page<OperationalizationClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skiptoken = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<OperationalizationClusterInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<OperationalizationClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object if successful.
     */
    public PagedList<OperationalizationClusterInner> listByResourceGroup(final String resourceGroupName, final String skiptoken) {
        ServiceResponse<Page<OperationalizationClusterInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, skiptoken).toBlocking().single();
        return new PagedList<OperationalizationClusterInner>(response.body()) {
            @Override
            public Page<OperationalizationClusterInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<OperationalizationClusterInner>> listByResourceGroupAsync(final String resourceGroupName, final String skiptoken, final ListOperationCallback<OperationalizationClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<Page<OperationalizationClusterInner>> listByResourceGroupAsync(final String resourceGroupName, final String skiptoken) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, skiptoken)
            .map(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Page<OperationalizationClusterInner>>() {
                @Override
                public Page<OperationalizationClusterInner> call(ServiceResponse<Page<OperationalizationClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String skiptoken) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(ServiceResponse<Page<OperationalizationClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the clusters in the specified resource group.
     *
    ServiceResponse<PageImpl<OperationalizationClusterInner>> * @param resourceGroupName Name of the resource group in which the cluster is located.
    ServiceResponse<PageImpl<OperationalizationClusterInner>> * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String skiptoken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<OperationalizationClusterInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<OperationalizationClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<OperationalizationClusterInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<OperationalizationClusterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<OperationalizationClusterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object if successful.
     */
    public PagedList<OperationalizationClusterInner> list() {
        ServiceResponse<Page<OperationalizationClusterInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<OperationalizationClusterInner>(response.body()) {
            @Override
            public Page<OperationalizationClusterInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<OperationalizationClusterInner>> listAsync(final ListOperationCallback<OperationalizationClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<Page<OperationalizationClusterInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Page<OperationalizationClusterInner>>() {
                @Override
                public Page<OperationalizationClusterInner> call(ServiceResponse<Page<OperationalizationClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(ServiceResponse<Page<OperationalizationClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skiptoken = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<OperationalizationClusterInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<OperationalizationClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object if successful.
     */
    public PagedList<OperationalizationClusterInner> list(final String skiptoken) {
        ServiceResponse<Page<OperationalizationClusterInner>> response = listSinglePageAsync(skiptoken).toBlocking().single();
        return new PagedList<OperationalizationClusterInner>(response.body()) {
            @Override
            public Page<OperationalizationClusterInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<OperationalizationClusterInner>> listAsync(final String skiptoken, final ListOperationCallback<OperationalizationClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<Page<OperationalizationClusterInner>> listAsync(final String skiptoken) {
        return listWithServiceResponseAsync(skiptoken)
            .map(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Page<OperationalizationClusterInner>>() {
                @Override
                public Page<OperationalizationClusterInner> call(ServiceResponse<Page<OperationalizationClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listWithServiceResponseAsync(final String skiptoken) {
        return listSinglePageAsync(skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(ServiceResponse<Page<OperationalizationClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
    ServiceResponse<PageImpl<OperationalizationClusterInner>> * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listSinglePageAsync(final String skiptoken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<OperationalizationClusterInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<OperationalizationClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<OperationalizationClusterInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<OperationalizationClusterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<OperationalizationClusterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object if successful.
     */
    public PagedList<OperationalizationClusterInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<OperationalizationClusterInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<OperationalizationClusterInner>(response.body()) {
            @Override
            public Page<OperationalizationClusterInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<OperationalizationClusterInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<OperationalizationClusterInner>> serviceFuture, final ListOperationCallback<OperationalizationClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<Page<OperationalizationClusterInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Page<OperationalizationClusterInner>>() {
                @Override
                public Page<OperationalizationClusterInner> call(ServiceResponse<Page<OperationalizationClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the clusters in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(ServiceResponse<Page<OperationalizationClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the clusters in the specified resource group.
     *
    ServiceResponse<PageImpl<OperationalizationClusterInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<OperationalizationClusterInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<OperationalizationClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<OperationalizationClusterInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<OperationalizationClusterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<OperationalizationClusterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object if successful.
     */
    public PagedList<OperationalizationClusterInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<OperationalizationClusterInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<OperationalizationClusterInner>(response.body()) {
            @Override
            public Page<OperationalizationClusterInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<OperationalizationClusterInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<OperationalizationClusterInner>> serviceFuture, final ListOperationCallback<OperationalizationClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<Page<OperationalizationClusterInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Page<OperationalizationClusterInner>>() {
                @Override
                public Page<OperationalizationClusterInner> call(ServiceResponse<Page<OperationalizationClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;OperationalizationClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<OperationalizationClusterInner>>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(ServiceResponse<Page<OperationalizationClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the operationalization clusters in the specified subscription.
     *
    ServiceResponse<PageImpl<OperationalizationClusterInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;OperationalizationClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<OperationalizationClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<OperationalizationClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<OperationalizationClusterInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<OperationalizationClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<OperationalizationClusterInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<OperationalizationClusterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<OperationalizationClusterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
