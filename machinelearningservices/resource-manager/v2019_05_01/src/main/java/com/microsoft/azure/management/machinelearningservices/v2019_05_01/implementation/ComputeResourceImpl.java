/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.machinelearningservices.v2019_05_01.implementation;

import com.microsoft.azure.management.machinelearningservices.v2019_05_01.ComputeResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.ScaleSettings;
import org.joda.time.Period;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.Identity;
import java.util.Map;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.Compute;
import rx.functions.Func1;

class ComputeResourceImpl extends CreatableUpdatableImpl<ComputeResource, ComputeResourceInner, ComputeResourceImpl> implements ComputeResource, ComputeResource.Definition, ComputeResource.Update {
    private final MachineLearningServicesManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String computeName;
    private ScaleSettings uscaleSettings;

    ComputeResourceImpl(String name, MachineLearningServicesManager manager) {
        super(name, new ComputeResourceInner());
        this.manager = manager;
        // Set resource name
        this.computeName = name;
        //
        this.uscaleSettings = new ScaleSettings();
    }

    ComputeResourceImpl(ComputeResourceInner inner, MachineLearningServicesManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.computeName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.computeName = IdParsingUtils.getValueFromIdByName(inner.id(), "computes");
        //
        this.uscaleSettings = new ScaleSettings();
    }

    @Override
    public MachineLearningServicesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ComputeResource> createResourceAsync() {
        MachineLearningComputesInner client = this.manager().inner().machineLearningComputes();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.computeName, this.inner())
            .map(new Func1<ComputeResourceInner, ComputeResourceInner>() {
               @Override
               public ComputeResourceInner call(ComputeResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ComputeResource> updateResourceAsync() {
        MachineLearningComputesInner client = this.manager().inner().machineLearningComputes();
        return client.updateAsync(this.resourceGroupName, this.workspaceName, this.computeName, this.uscaleSettings)
            .map(new Func1<ComputeResourceInner, ComputeResourceInner>() {
               @Override
               public ComputeResourceInner call(ComputeResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ComputeResourceInner> getInnerAsync() {
        MachineLearningComputesInner client = this.manager().inner().machineLearningComputes();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.computeName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.uscaleSettings = new ScaleSettings();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Compute properties() {
        return this.inner().properties();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ComputeResourceImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    @Override
    public ComputeResourceImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ComputeResourceImpl withProperties(Compute properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public ComputeResourceImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public ComputeResourceImpl withScaleSettings(ScaleSettings scaleSettings) {
        this.uscaleSettings = scaleSettings;
        return this;
    }

}
