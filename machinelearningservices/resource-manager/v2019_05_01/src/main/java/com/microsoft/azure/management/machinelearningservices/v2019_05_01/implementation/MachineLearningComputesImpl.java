/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.machinelearningservices.v2019_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.UnderlyingResourceAction;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.AmlComputeNodesInformation;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.ComputeSecrets;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.ComputeResource;

class MachineLearningComputesImpl extends WrapperImpl<MachineLearningComputesInner> implements MachineLearningComputes {
    private final MachineLearningServicesManager manager;

    MachineLearningComputesImpl(MachineLearningServicesManager manager) {
        super(manager.inner().machineLearningComputes());
        this.manager = manager;
    }

    public MachineLearningServicesManager manager() {
        return this.manager;
    }

    @Override
    public ComputeResourceImpl define(String name) {
        return wrapModel(name);
    }

    private ComputeResourceImpl wrapModel(ComputeResourceInner inner) {
        return  new ComputeResourceImpl(inner, manager());
    }

    private ComputeResourceImpl wrapModel(String name) {
        return new ComputeResourceImpl(name, this.manager());
    }

    @Override
    public Observable<AmlComputeNodesInformation> listNodesAsync(String resourceGroupName, String workspaceName, String computeName) {
        MachineLearningComputesInner client = this.inner();
        return client.listNodesAsync(resourceGroupName, workspaceName, computeName)
        .map(new Func1<AmlComputeNodesInformationInner, AmlComputeNodesInformation>() {
            @Override
            public AmlComputeNodesInformation call(AmlComputeNodesInformationInner inner) {
                return new AmlComputeNodesInformationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ComputeSecrets> listKeysAsync(String resourceGroupName, String workspaceName, String computeName) {
        MachineLearningComputesInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, workspaceName, computeName)
        .map(new Func1<ComputeSecretsInner, ComputeSecrets>() {
            @Override
            public ComputeSecrets call(ComputeSecretsInner inner) {
                return new ComputeSecretsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ComputeResource> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName) {
        MachineLearningComputesInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMapIterable(new Func1<Page<ComputeResourceInner>, Iterable<ComputeResourceInner>>() {
            @Override
            public Iterable<ComputeResourceInner> call(Page<ComputeResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ComputeResourceInner, ComputeResource>() {
            @Override
            public ComputeResource call(ComputeResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ComputeResource> getAsync(String resourceGroupName, String workspaceName, String computeName) {
        MachineLearningComputesInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, computeName)
        .map(new Func1<ComputeResourceInner, ComputeResource>() {
            @Override
            public ComputeResource call(ComputeResourceInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction) {
        MachineLearningComputesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, computeName, underlyingResourceAction).toCompletable();
    }

}
