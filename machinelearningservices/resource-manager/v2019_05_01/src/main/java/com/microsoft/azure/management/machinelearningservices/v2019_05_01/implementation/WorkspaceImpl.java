/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.machinelearningservices.v2019_05_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.Workspace;
import rx.Observable;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.WorkspaceUpdateParameters;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.Identity;
import org.joda.time.DateTime;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.ProvisioningState;
import rx.functions.Func1;

class WorkspaceImpl extends GroupableResourceCoreImpl<Workspace, WorkspaceInner, WorkspaceImpl, MachineLearningServicesManager> implements Workspace, Workspace.Definition, Workspace.Update {
    private WorkspaceUpdateParameters updateParameter;
    WorkspaceImpl(String name, WorkspaceInner inner, MachineLearningServicesManager manager) {
        super(name, inner, manager);
        this.updateParameter = new WorkspaceUpdateParameters();
    }

    @Override
    public Observable<Workspace> createResourceAsync() {
        WorkspacesInner client = this.manager().inner().workspaces();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<WorkspaceInner, WorkspaceInner>() {
               @Override
               public WorkspaceInner call(WorkspaceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Workspace> updateResourceAsync() {
        WorkspacesInner client = this.manager().inner().workspaces();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<WorkspaceInner, WorkspaceInner>() {
               @Override
               public WorkspaceInner call(WorkspaceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<WorkspaceInner> getInnerAsync() {
        WorkspacesInner client = this.manager().inner().workspaces();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new WorkspaceUpdateParameters();
    }

    @Override
    public String applicationInsights() {
        return this.inner().applicationInsights();
    }

    @Override
    public String containerRegistry() {
        return this.inner().containerRegistry();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String discoveryUrl() {
        return this.inner().discoveryUrl();
    }

    @Override
    public String friendlyName() {
        return this.inner().friendlyName();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public String keyVault() {
        return this.inner().keyVault();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String storageAccount() {
        return this.inner().storageAccount();
    }

    @Override
    public String workspaceId() {
        return this.inner().workspaceId();
    }

    @Override
    public WorkspaceImpl withApplicationInsights(String applicationInsights) {
        this.inner().withApplicationInsights(applicationInsights);
        return this;
    }

    @Override
    public WorkspaceImpl withContainerRegistry(String containerRegistry) {
        this.inner().withContainerRegistry(containerRegistry);
        return this;
    }

    @Override
    public WorkspaceImpl withDiscoveryUrl(String discoveryUrl) {
        this.inner().withDiscoveryUrl(discoveryUrl);
        return this;
    }

    @Override
    public WorkspaceImpl withKeyVault(String keyVault) {
        this.inner().withKeyVault(keyVault);
        return this;
    }

    @Override
    public WorkspaceImpl withStorageAccount(String storageAccount) {
        this.inner().withStorageAccount(storageAccount);
        return this;
    }

    @Override
    public WorkspaceImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.inner().withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public WorkspaceImpl withFriendlyName(String friendlyName) {
        if (isInCreateMode()) {
            this.inner().withFriendlyName(friendlyName);
        } else {
            this.updateParameter.withFriendlyName(friendlyName);
        }
        return this;
    }

}
