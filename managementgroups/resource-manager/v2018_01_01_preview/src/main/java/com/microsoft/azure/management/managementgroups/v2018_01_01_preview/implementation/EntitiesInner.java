/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managementgroups.v2018_01_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.managementgroups.v2018_01_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Entities.
 */
public class EntitiesInner {
    /** The Retrofit service to perform REST calls. */
    private EntitiesService service;
    /** The service client containing this operation class. */
    private ManagementGroupsAPIImpl client;

    /**
     * Initializes an instance of EntitiesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EntitiesInner(Retrofit retrofit, ManagementGroupsAPIImpl client) {
        this.service = retrofit.create(EntitiesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Entities to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EntitiesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2018_01_01_preview.Entities list" })
        @POST("providers/Microsoft.Management/getEntities")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Query("$skiptoken") String skiptoken, @Query("groupName") String groupName, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2018_01_01_preview.Entities listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> list() {
        ServiceResponse<Page<EntityInfoInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, null).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listAsync(final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, null);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, null));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listSinglePageAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String groupName = null;
        final String cacheControl = null;
        return service.list(this.client.apiVersion(), this.client.skiptoken(), groupName, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param groupName A filter which allows the call to be filtered for a specific group.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> list(final String groupName, final String cacheControl) {
        ServiceResponse<Page<EntityInfoInner>> response = listSinglePageAsync(groupName, cacheControl).toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param groupName A filter which allows the call to be filtered for a specific group.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listAsync(final String groupName, final String cacheControl, final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(groupName, cacheControl),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, cacheControl);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param groupName A filter which allows the call to be filtered for a specific group.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listAsync(final String groupName, final String cacheControl) {
        return listWithServiceResponseAsync(groupName, cacheControl)
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param groupName A filter which allows the call to be filtered for a specific group.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listWithServiceResponseAsync(final String groupName, final String cacheControl) {
        return listSinglePageAsync(groupName, cacheControl)
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, cacheControl));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
    ServiceResponse<PageImpl<EntityInfoInner>> * @param groupName A filter which allows the call to be filtered for a specific group.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listSinglePageAsync(final String groupName, final String cacheControl) {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.apiVersion(), this.client.skiptoken(), groupName, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EntityInfoInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EntityInfoInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EntityInfoInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<EntityInfoInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, null).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<EntityInfoInner>> serviceFuture, final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, null);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, null));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String cacheControl = null;
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> listNext(final String nextPageLink, final String cacheControl) {
        ServiceResponse<Page<EntityInfoInner>> response = listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listNextAsync(final String nextPageLink, final String cacheControl, final ServiceFuture<List<EntityInfoInner>> serviceFuture, final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink, cacheControl),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, cacheControl);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listNextAsync(final String nextPageLink, final String cacheControl) {
        return listNextWithServiceResponseAsync(nextPageLink, cacheControl)
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextWithServiceResponseAsync(final String nextPageLink, final String cacheControl) {
        return listNextSinglePageAsync(nextPageLink, cacheControl)
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, cacheControl));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
    ServiceResponse<PageImpl<EntityInfoInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextSinglePageAsync(final String nextPageLink, final String cacheControl) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EntityInfoInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EntityInfoInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EntityInfoInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
