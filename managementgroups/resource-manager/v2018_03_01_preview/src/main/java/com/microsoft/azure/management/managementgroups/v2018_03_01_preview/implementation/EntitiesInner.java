/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managementgroups.v2018_03_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.managementgroups.v2018_03_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Entities.
 */
public class EntitiesInner {
    /** The Retrofit service to perform REST calls. */
    private EntitiesService service;
    /** The service client containing this operation class. */
    private ManagementGroupsAPIImpl client;

    /**
     * Initializes an instance of EntitiesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EntitiesInner(Retrofit retrofit, ManagementGroupsAPIImpl client) {
        this.service = retrofit.create(EntitiesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Entities to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EntitiesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2018_03_01_preview.Entities list" })
        @POST("providers/Microsoft.Management/getEntities")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Query("$skiptoken") String skiptoken, @Query("$skip") Integer skip, @Query("$top") Integer top, @Query("$select") String select, @Query("$search") String search, @Query("$filter") String filter, @Query("$view") String view, @Query("groupName") String groupName, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2018_03_01_preview.Entities listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> list() {
        ServiceResponse<Page<EntityInfoInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, null).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listAsync(final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, null);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, null));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listSinglePageAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skiptoken = null;
        final Integer skip = null;
        final Integer top = null;
        final String select = null;
        final String search = null;
        final String filter = null;
        final String view = null;
        final String groupName = null;
        final String cacheControl = null;
        return service.list(this.client.apiVersion(), skiptoken, skip, top, select, search, filter, view, groupName, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @param skip Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
     * @param top Number of elements to return when retrieving results. Passing this in will override $skipToken.
     * @param select This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
     * @param search The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in. With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions. With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity. With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants. Possible values include: 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
     * @param filter The filter parameter allows you to filter on the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
     * @param view The view parameter allows clients to filter the type of data that is returned by the getEntities call. Possible values include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
     * @param groupName A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> list(final String skiptoken, final Integer skip, final Integer top, final String select, final String search, final String filter, final String view, final String groupName, final String cacheControl) {
        ServiceResponse<Page<EntityInfoInner>> response = listSinglePageAsync(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl).toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @param skip Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
     * @param top Number of elements to return when retrieving results. Passing this in will override $skipToken.
     * @param select This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
     * @param search The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in. With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions. With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity. With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants. Possible values include: 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
     * @param filter The filter parameter allows you to filter on the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
     * @param view The view parameter allows clients to filter the type of data that is returned by the getEntities call. Possible values include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
     * @param groupName A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listAsync(final String skiptoken, final Integer skip, final Integer top, final String select, final String search, final String filter, final String view, final String groupName, final String cacheControl, final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, cacheControl);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @param skip Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
     * @param top Number of elements to return when retrieving results. Passing this in will override $skipToken.
     * @param select This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
     * @param search The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in. With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions. With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity. With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants. Possible values include: 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
     * @param filter The filter parameter allows you to filter on the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
     * @param view The view parameter allows clients to filter the type of data that is returned by the getEntities call. Possible values include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
     * @param groupName A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listAsync(final String skiptoken, final Integer skip, final Integer top, final String select, final String search, final String filter, final String view, final String groupName, final String cacheControl) {
        return listWithServiceResponseAsync(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl)
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @param skip Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
     * @param top Number of elements to return when retrieving results. Passing this in will override $skipToken.
     * @param select This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
     * @param search The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in. With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions. With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity. With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants. Possible values include: 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
     * @param filter The filter parameter allows you to filter on the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
     * @param view The view parameter allows clients to filter the type of data that is returned by the getEntities call. Possible values include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
     * @param groupName A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listWithServiceResponseAsync(final String skiptoken, final Integer skip, final Integer top, final String select, final String search, final String filter, final String view, final String groupName, final String cacheControl) {
        return listSinglePageAsync(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl)
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, cacheControl));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
    ServiceResponse<PageImpl<EntityInfoInner>> * @param skiptoken Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param skip Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param top Number of elements to return when retrieving results. Passing this in will override $skipToken.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param select This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param search The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in. With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions. With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity. With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants. Possible values include: 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
    ServiceResponse<PageImpl<EntityInfoInner>> * @param filter The filter parameter allows you to filter on the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param view The view parameter allows clients to filter the type of data that is returned by the getEntities call. Possible values include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
    ServiceResponse<PageImpl<EntityInfoInner>> * @param groupName A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
    ServiceResponse<PageImpl<EntityInfoInner>> * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listSinglePageAsync(final String skiptoken, final Integer skip, final Integer top, final String select, final String search, final String filter, final String view, final String groupName, final String cacheControl) {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.apiVersion(), skiptoken, skip, top, select, search, filter, view, groupName, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EntityInfoInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EntityInfoInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EntityInfoInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<EntityInfoInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, null).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<EntityInfoInner>> serviceFuture, final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, null);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, null));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String cacheControl = null;
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EntityInfoInner&gt; object if successful.
     */
    public PagedList<EntityInfoInner> listNext(final String nextPageLink, final String cacheControl) {
        ServiceResponse<Page<EntityInfoInner>> response = listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single();
        return new PagedList<EntityInfoInner>(response.body()) {
            @Override
            public Page<EntityInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single().body();
            }
        };
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityInfoInner>> listNextAsync(final String nextPageLink, final String cacheControl, final ServiceFuture<List<EntityInfoInner>> serviceFuture, final ListOperationCallback<EntityInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink, cacheControl),
            new Func1<String, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, cacheControl);
                }
            },
            serviceCallback);
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<Page<EntityInfoInner>> listNextAsync(final String nextPageLink, final String cacheControl) {
        return listNextWithServiceResponseAsync(nextPageLink, cacheControl)
            .map(new Func1<ServiceResponse<Page<EntityInfoInner>>, Page<EntityInfoInner>>() {
                @Override
                public Page<EntityInfoInner> call(ServiceResponse<Page<EntityInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EntityInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextWithServiceResponseAsync(final String nextPageLink, final String cacheControl) {
        return listNextSinglePageAsync(nextPageLink, cacheControl)
            .concatMap(new Func1<ServiceResponse<Page<EntityInfoInner>>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(ServiceResponse<Page<EntityInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, cacheControl));
                }
            });
    }

    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
    ServiceResponse<PageImpl<EntityInfoInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
    ServiceResponse<PageImpl<EntityInfoInner>> * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EntityInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EntityInfoInner>>> listNextSinglePageAsync(final String nextPageLink, final String cacheControl) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EntityInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EntityInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EntityInfoInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EntityInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EntityInfoInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EntityInfoInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EntityInfoInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
