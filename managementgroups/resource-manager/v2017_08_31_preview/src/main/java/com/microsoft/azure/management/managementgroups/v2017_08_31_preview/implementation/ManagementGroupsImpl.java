/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.managementgroups.v2017_08_31_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.managementgroups.v2017_08_31_preview.ManagementGroups;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.managementgroups.v2017_08_31_preview.ManagementGroupWithHierarchy;
import com.microsoft.azure.management.managementgroups.v2017_08_31_preview.ManagementGroupInfo;

class ManagementGroupsImpl extends WrapperImpl<ManagementGroupsInner> implements ManagementGroups {
    private final ManagementManager manager;

    ManagementGroupsImpl(ManagementManager manager) {
        super(manager.inner().managementGroups());
        this.manager = manager;
    }

    public ManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ManagementGroupWithHierarchy> getAsync() {
        ManagementGroupsInner client = this.inner();
        return client.getAsync()
        .map(new Func1<ManagementGroupWithHierarchyInner, ManagementGroupWithHierarchy>() {
            @Override
            public ManagementGroupWithHierarchy call(ManagementGroupWithHierarchyInner inner) {
                return new ManagementGroupWithHierarchyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagementGroupInfo> listAsync() {
        ManagementGroupsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ManagementGroupInfoInner>, Iterable<ManagementGroupInfoInner>>() {
            @Override
            public Iterable<ManagementGroupInfoInner> call(Page<ManagementGroupInfoInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagementGroupInfoInner, ManagementGroupInfo>() {
            @Override
            public ManagementGroupInfo call(ManagementGroupInfoInner inner) {
                return new ManagementGroupInfoImpl(inner, manager());
            }
        });
    }

}
