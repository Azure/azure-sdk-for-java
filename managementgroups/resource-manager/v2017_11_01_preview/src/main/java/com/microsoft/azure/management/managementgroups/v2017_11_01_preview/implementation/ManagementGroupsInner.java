/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managementgroups.v2017_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.managementgroups.v2017_11_01_preview.CreateManagementGroupRequest;
import com.microsoft.azure.management.managementgroups.v2017_11_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ManagementGroups.
 */
public class ManagementGroupsInner {
    /** The Retrofit service to perform REST calls. */
    private ManagementGroupsService service;
    /** The service client containing this operation class. */
    private ManagementGroupsAPIImpl client;

    /**
     * Initializes an instance of ManagementGroupsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ManagementGroupsInner(Retrofit retrofit, ManagementGroupsAPIImpl client) {
        this.service = retrofit.create(ManagementGroupsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ManagementGroups to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ManagementGroupsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2017_11_01_preview.ManagementGroups list" })
        @GET("providers/Microsoft.Management/managementGroups")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Header("Cache-Control") String cacheControl, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2017_11_01_preview.ManagementGroups get" })
        @GET("providers/Microsoft.Management/managementGroups/{groupId}")
        Observable<Response<ResponseBody>> get(@Path("groupId") String groupId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Query("$recurse") Boolean recurse, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2017_11_01_preview.ManagementGroups createOrUpdate" })
        @PUT("providers/Microsoft.Management/managementGroups/{groupId}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("groupId") String groupId, @Query("api-version") String apiVersion, @Body CreateManagementGroupRequest createManagementGroupRequest, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2017_11_01_preview.ManagementGroups update" })
        @PATCH("providers/Microsoft.Management/managementGroups/{groupId}")
        Observable<Response<ResponseBody>> update(@Path("groupId") String groupId, @Query("api-version") String apiVersion, @Body CreateManagementGroupRequest createManagementGroupRequest, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2017_11_01_preview.ManagementGroups delete" })
        @HTTP(path = "providers/Microsoft.Management/managementGroups/{groupId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("groupId") String groupId, @Query("api-version") String apiVersion, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managementgroups.v2017_11_01_preview.ManagementGroups listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("Cache-Control") String cacheControl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List management groups for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object if successful.
     */
    public PagedList<ManagementGroupInfoInner> list() {
        ServiceResponse<Page<ManagementGroupInfoInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ManagementGroupInfoInner>(response.body()) {
            @Override
            public Page<ManagementGroupInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, null).toBlocking().single().body();
            }
        };
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ManagementGroupInfoInner>> listAsync(final ListOperationCallback<ManagementGroupInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, null);
                }
            },
            serviceCallback);
    }

    /**
     * List management groups for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<Page<ManagementGroupInfoInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Page<ManagementGroupInfoInner>>() {
                @Override
                public Page<ManagementGroupInfoInner> call(ServiceResponse<Page<ManagementGroupInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(ServiceResponse<Page<ManagementGroupInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, null));
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listSinglePageAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String cacheControl = null;
        final String skiptoken = null;
        return service.list(this.client.apiVersion(), cacheControl, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ManagementGroupInfoInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ManagementGroupInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result.
     If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object if successful.
     */
    public PagedList<ManagementGroupInfoInner> list(final String cacheControl, final String skiptoken) {
        ServiceResponse<Page<ManagementGroupInfoInner>> response = listSinglePageAsync(cacheControl, skiptoken).toBlocking().single();
        return new PagedList<ManagementGroupInfoInner>(response.body()) {
            @Override
            public Page<ManagementGroupInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single().body();
            }
        };
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result.
     If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ManagementGroupInfoInner>> listAsync(final String cacheControl, final String skiptoken, final ListOperationCallback<ManagementGroupInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(cacheControl, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, cacheControl);
                }
            },
            serviceCallback);
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result.
     If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<Page<ManagementGroupInfoInner>> listAsync(final String cacheControl, final String skiptoken) {
        return listWithServiceResponseAsync(cacheControl, skiptoken)
            .map(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Page<ManagementGroupInfoInner>>() {
                @Override
                public Page<ManagementGroupInfoInner> call(ServiceResponse<Page<ManagementGroupInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param skiptoken Page continuation token is only used if a previous operation returned a partial result.
     If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listWithServiceResponseAsync(final String cacheControl, final String skiptoken) {
        return listSinglePageAsync(cacheControl, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(ServiceResponse<Page<ManagementGroupInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, cacheControl));
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
    ServiceResponse<PageImpl<ManagementGroupInfoInner>> * @param cacheControl Indicates that the request shouldn't utilize any caches.
    ServiceResponse<PageImpl<ManagementGroupInfoInner>> * @param skiptoken Page continuation token is only used if a previous operation returned a partial result.
     If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listSinglePageAsync(final String cacheControl, final String skiptoken) {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.apiVersion(), cacheControl, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ManagementGroupInfoInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ManagementGroupInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ManagementGroupInfoInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ManagementGroupInfoInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ManagementGroupInfoInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagementGroupInner object if successful.
     */
    public ManagementGroupInner get(String groupId) {
        return getWithServiceResponseAsync(groupId).toBlocking().single().body();
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagementGroupInner> getAsync(String groupId, final ServiceCallback<ManagementGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(groupId), serviceCallback);
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ManagementGroupInner> getAsync(String groupId) {
        return getWithServiceResponseAsync(groupId).map(new Func1<ServiceResponse<ManagementGroupInner>, ManagementGroupInner>() {
            @Override
            public ManagementGroupInner call(ServiceResponse<ManagementGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ServiceResponse<ManagementGroupInner>> getWithServiceResponseAsync(String groupId) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final Boolean recurse = null;
        final String cacheControl = null;
        return service.get(groupId, this.client.apiVersion(), expand, recurse, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagementGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagementGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagementGroupInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @param expand The $expand=children query string parameter allows clients to request inclusion of children in the response payload. Possible values include: 'children'
     * @param recurse The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagementGroupInner object if successful.
     */
    public ManagementGroupInner get(String groupId, String expand, Boolean recurse, String cacheControl) {
        return getWithServiceResponseAsync(groupId, expand, recurse, cacheControl).toBlocking().single().body();
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @param expand The $expand=children query string parameter allows clients to request inclusion of children in the response payload. Possible values include: 'children'
     * @param recurse The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagementGroupInner> getAsync(String groupId, String expand, Boolean recurse, String cacheControl, final ServiceCallback<ManagementGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(groupId, expand, recurse, cacheControl), serviceCallback);
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @param expand The $expand=children query string parameter allows clients to request inclusion of children in the response payload. Possible values include: 'children'
     * @param recurse The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ManagementGroupInner> getAsync(String groupId, String expand, Boolean recurse, String cacheControl) {
        return getWithServiceResponseAsync(groupId, expand, recurse, cacheControl).map(new Func1<ServiceResponse<ManagementGroupInner>, ManagementGroupInner>() {
            @Override
            public ManagementGroupInner call(ServiceResponse<ManagementGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @param expand The $expand=children query string parameter allows clients to request inclusion of children in the response payload. Possible values include: 'children'
     * @param recurse The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ServiceResponse<ManagementGroupInner>> getWithServiceResponseAsync(String groupId, String expand, Boolean recurse, String cacheControl) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(groupId, this.client.apiVersion(), expand, recurse, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagementGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagementGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagementGroupInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ManagementGroupInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ManagementGroupInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ManagementGroupInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagementGroupInner object if successful.
     */
    public ManagementGroupInner createOrUpdate(String groupId, CreateManagementGroupRequest createManagementGroupRequest) {
        return createOrUpdateWithServiceResponseAsync(groupId, createManagementGroupRequest).toBlocking().single().body();
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagementGroupInner> createOrUpdateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, final ServiceCallback<ManagementGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(groupId, createManagementGroupRequest), serviceCallback);
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ManagementGroupInner> createOrUpdateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest) {
        return createOrUpdateWithServiceResponseAsync(groupId, createManagementGroupRequest).map(new Func1<ServiceResponse<ManagementGroupInner>, ManagementGroupInner>() {
            @Override
            public ManagementGroupInner call(ServiceResponse<ManagementGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ServiceResponse<ManagementGroupInner>> createOrUpdateWithServiceResponseAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (createManagementGroupRequest == null) {
            throw new IllegalArgumentException("Parameter createManagementGroupRequest is required and cannot be null.");
        }
        Validator.validate(createManagementGroupRequest);
        final String cacheControl = null;
        return service.createOrUpdate(groupId, this.client.apiVersion(), createManagementGroupRequest, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagementGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagementGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagementGroupInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagementGroupInner object if successful.
     */
    public ManagementGroupInner createOrUpdate(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl) {
        return createOrUpdateWithServiceResponseAsync(groupId, createManagementGroupRequest, cacheControl).toBlocking().single().body();
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagementGroupInner> createOrUpdateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl, final ServiceCallback<ManagementGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(groupId, createManagementGroupRequest, cacheControl), serviceCallback);
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ManagementGroupInner> createOrUpdateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl) {
        return createOrUpdateWithServiceResponseAsync(groupId, createManagementGroupRequest, cacheControl).map(new Func1<ServiceResponse<ManagementGroupInner>, ManagementGroupInner>() {
            @Override
            public ManagementGroupInner call(ServiceResponse<ManagementGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a management group.
     If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ServiceResponse<ManagementGroupInner>> createOrUpdateWithServiceResponseAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (createManagementGroupRequest == null) {
            throw new IllegalArgumentException("Parameter createManagementGroupRequest is required and cannot be null.");
        }
        Validator.validate(createManagementGroupRequest);
        return service.createOrUpdate(groupId, this.client.apiVersion(), createManagementGroupRequest, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagementGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagementGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagementGroupInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ManagementGroupInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ManagementGroupInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ManagementGroupInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagementGroupInner object if successful.
     */
    public ManagementGroupInner update(String groupId, CreateManagementGroupRequest createManagementGroupRequest) {
        return updateWithServiceResponseAsync(groupId, createManagementGroupRequest).toBlocking().single().body();
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagementGroupInner> updateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, final ServiceCallback<ManagementGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(groupId, createManagementGroupRequest), serviceCallback);
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ManagementGroupInner> updateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest) {
        return updateWithServiceResponseAsync(groupId, createManagementGroupRequest).map(new Func1<ServiceResponse<ManagementGroupInner>, ManagementGroupInner>() {
            @Override
            public ManagementGroupInner call(ServiceResponse<ManagementGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ServiceResponse<ManagementGroupInner>> updateWithServiceResponseAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (createManagementGroupRequest == null) {
            throw new IllegalArgumentException("Parameter createManagementGroupRequest is required and cannot be null.");
        }
        Validator.validate(createManagementGroupRequest);
        final String cacheControl = null;
        return service.update(groupId, this.client.apiVersion(), createManagementGroupRequest, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagementGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagementGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagementGroupInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagementGroupInner object if successful.
     */
    public ManagementGroupInner update(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl) {
        return updateWithServiceResponseAsync(groupId, createManagementGroupRequest, cacheControl).toBlocking().single().body();
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagementGroupInner> updateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl, final ServiceCallback<ManagementGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(groupId, createManagementGroupRequest, cacheControl), serviceCallback);
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ManagementGroupInner> updateAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl) {
        return updateWithServiceResponseAsync(groupId, createManagementGroupRequest, cacheControl).map(new Func1<ServiceResponse<ManagementGroupInner>, ManagementGroupInner>() {
            @Override
            public ManagementGroupInner call(ServiceResponse<ManagementGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagementGroupInner object
     */
    public Observable<ServiceResponse<ManagementGroupInner>> updateWithServiceResponseAsync(String groupId, CreateManagementGroupRequest createManagementGroupRequest, String cacheControl) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (createManagementGroupRequest == null) {
            throw new IllegalArgumentException("Parameter createManagementGroupRequest is required and cannot be null.");
        }
        Validator.validate(createManagementGroupRequest);
        return service.update(groupId, this.client.apiVersion(), createManagementGroupRequest, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagementGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagementGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagementGroupInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ManagementGroupInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ManagementGroupInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ManagementGroupInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String groupId) {
        deleteWithServiceResponseAsync(groupId).toBlocking().single().body();
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String groupId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(groupId), serviceCallback);
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String groupId) {
        return deleteWithServiceResponseAsync(groupId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String groupId) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String cacheControl = null;
        return service.delete(groupId, this.client.apiVersion(), cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String groupId, String cacheControl) {
        deleteWithServiceResponseAsync(groupId, cacheControl).toBlocking().single().body();
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String groupId, String cacheControl, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(groupId, cacheControl), serviceCallback);
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String groupId, String cacheControl) {
        return deleteWithServiceResponseAsync(groupId, cacheControl).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete management group.
     If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String groupId, String cacheControl) {
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(groupId, this.client.apiVersion(), cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object if successful.
     */
    public PagedList<ManagementGroupInfoInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ManagementGroupInfoInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ManagementGroupInfoInner>(response.body()) {
            @Override
            public Page<ManagementGroupInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, null).toBlocking().single().body();
            }
        };
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ManagementGroupInfoInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ManagementGroupInfoInner>> serviceFuture, final ListOperationCallback<ManagementGroupInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, null);
                }
            },
            serviceCallback);
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<Page<ManagementGroupInfoInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Page<ManagementGroupInfoInner>>() {
                @Override
                public Page<ManagementGroupInfoInner> call(ServiceResponse<Page<ManagementGroupInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(ServiceResponse<Page<ManagementGroupInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, null));
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String cacheControl = null;
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ManagementGroupInfoInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ManagementGroupInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object if successful.
     */
    public PagedList<ManagementGroupInfoInner> listNext(final String nextPageLink, final String cacheControl) {
        ServiceResponse<Page<ManagementGroupInfoInner>> response = listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single();
        return new PagedList<ManagementGroupInfoInner>(response.body()) {
            @Override
            public Page<ManagementGroupInfoInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink, cacheControl).toBlocking().single().body();
            }
        };
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ManagementGroupInfoInner>> listNextAsync(final String nextPageLink, final String cacheControl, final ServiceFuture<List<ManagementGroupInfoInner>> serviceFuture, final ListOperationCallback<ManagementGroupInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink, cacheControl),
            new Func1<String, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink, cacheControl);
                }
            },
            serviceCallback);
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<Page<ManagementGroupInfoInner>> listNextAsync(final String nextPageLink, final String cacheControl) {
        return listNextWithServiceResponseAsync(nextPageLink, cacheControl)
            .map(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Page<ManagementGroupInfoInner>>() {
                @Override
                public Page<ManagementGroupInfoInner> call(ServiceResponse<Page<ManagementGroupInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagementGroupInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listNextWithServiceResponseAsync(final String nextPageLink, final String cacheControl) {
        return listNextSinglePageAsync(nextPageLink, cacheControl)
            .concatMap(new Func1<ServiceResponse<Page<ManagementGroupInfoInner>>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(ServiceResponse<Page<ManagementGroupInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink, cacheControl));
                }
            });
    }

    /**
     * List management groups for the authenticated user.
     *
    ServiceResponse<PageImpl<ManagementGroupInfoInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
    ServiceResponse<PageImpl<ManagementGroupInfoInner>> * @param cacheControl Indicates that the request shouldn't utilize any caches.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ManagementGroupInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> listNextSinglePageAsync(final String nextPageLink, final String cacheControl) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, cacheControl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ManagementGroupInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagementGroupInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ManagementGroupInfoInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ManagementGroupInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ManagementGroupInfoInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ManagementGroupInfoInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ManagementGroupInfoInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
