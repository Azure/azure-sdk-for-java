/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PeeringServicePrefixes.
 */
public class PeeringServicePrefixesInner {
    /** The Retrofit service to perform REST calls. */
    private PeeringServicePrefixesService service;
    /** The service client containing this operation class. */
    private PeeringManagementClientImpl client;

    /**
     * Initializes an instance of PeeringServicePrefixesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PeeringServicePrefixesInner(Retrofit retrofit, PeeringManagementClientImpl client) {
        this.service = retrofit.create(PeeringServicePrefixesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PeeringServicePrefixes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PeeringServicePrefixesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServicePrefixes get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("peeringServiceName") String peeringServiceName, @Path("prefixName") String prefixName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServicePrefixes createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("peeringServiceName") String peeringServiceName, @Path("prefixName") String prefixName, @Path("subscriptionId") String subscriptionId, @Body PeeringServicePrefixInner peeringServicePrefix, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServicePrefixes delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("peeringServiceName") String peeringServiceName, @Path("prefixName") String prefixName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the peering service prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringServicePrefixInner object if successful.
     */
    public PeeringServicePrefixInner get(String resourceGroupName, String peeringServiceName, String prefixName) {
        return getWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName).toBlocking().single().body();
    }

    /**
     * Gets the peering service prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringServicePrefixInner> getAsync(String resourceGroupName, String peeringServiceName, String prefixName, final ServiceCallback<PeeringServicePrefixInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName), serviceCallback);
    }

    /**
     * Gets the peering service prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServicePrefixInner object
     */
    public Observable<PeeringServicePrefixInner> getAsync(String resourceGroupName, String peeringServiceName, String prefixName) {
        return getWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName).map(new Func1<ServiceResponse<PeeringServicePrefixInner>, PeeringServicePrefixInner>() {
            @Override
            public PeeringServicePrefixInner call(ServiceResponse<PeeringServicePrefixInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the peering service prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServicePrefixInner object
     */
    public Observable<ServiceResponse<PeeringServicePrefixInner>> getWithServiceResponseAsync(String resourceGroupName, String peeringServiceName, String prefixName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (prefixName == null) {
            throw new IllegalArgumentException("Parameter prefixName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, peeringServiceName, prefixName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringServicePrefixInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringServicePrefixInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringServicePrefixInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PeeringServicePrefixInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PeeringServicePrefixInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PeeringServicePrefixInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @param peeringServicePrefix The IP prefix for an peering
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringServicePrefixInner object if successful.
     */
    public PeeringServicePrefixInner createOrUpdate(String resourceGroupName, String peeringServiceName, String prefixName, PeeringServicePrefixInner peeringServicePrefix) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName, peeringServicePrefix).toBlocking().single().body();
    }

    /**
     * Creates or updates the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @param peeringServicePrefix The IP prefix for an peering
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringServicePrefixInner> createOrUpdateAsync(String resourceGroupName, String peeringServiceName, String prefixName, PeeringServicePrefixInner peeringServicePrefix, final ServiceCallback<PeeringServicePrefixInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName, peeringServicePrefix), serviceCallback);
    }

    /**
     * Creates or updates the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @param peeringServicePrefix The IP prefix for an peering
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServicePrefixInner object
     */
    public Observable<PeeringServicePrefixInner> createOrUpdateAsync(String resourceGroupName, String peeringServiceName, String prefixName, PeeringServicePrefixInner peeringServicePrefix) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName, peeringServicePrefix).map(new Func1<ServiceResponse<PeeringServicePrefixInner>, PeeringServicePrefixInner>() {
            @Override
            public PeeringServicePrefixInner call(ServiceResponse<PeeringServicePrefixInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @param peeringServicePrefix The IP prefix for an peering
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServicePrefixInner object
     */
    public Observable<ServiceResponse<PeeringServicePrefixInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String peeringServiceName, String prefixName, PeeringServicePrefixInner peeringServicePrefix) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (prefixName == null) {
            throw new IllegalArgumentException("Parameter prefixName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (peeringServicePrefix == null) {
            throw new IllegalArgumentException("Parameter peeringServicePrefix is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(peeringServicePrefix);
        return service.createOrUpdate(resourceGroupName, peeringServiceName, prefixName, this.client.subscriptionId(), peeringServicePrefix, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringServicePrefixInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringServicePrefixInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringServicePrefixInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PeeringServicePrefixInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PeeringServicePrefixInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PeeringServicePrefixInner>() { }.getType())
                .register(201, new TypeToken<PeeringServicePrefixInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * removes the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String peeringServiceName, String prefixName) {
        deleteWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName).toBlocking().single().body();
    }

    /**
     * removes the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String peeringServiceName, String prefixName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName), serviceCallback);
    }

    /**
     * removes the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String peeringServiceName, String prefixName) {
        return deleteWithServiceResponseAsync(resourceGroupName, peeringServiceName, prefixName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * removes the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String peeringServiceName, String prefixName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (prefixName == null) {
            throw new IllegalArgumentException("Parameter prefixName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, peeringServiceName, prefixName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
