/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.peering.v2019_08_01_preview.LegacyPeerings;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.peering.v2019_08_01_preview.Peering;

class LegacyPeeringsImpl extends WrapperImpl<LegacyPeeringsInner> implements LegacyPeerings {
    private final PeeringManager manager;

    LegacyPeeringsImpl(PeeringManager manager) {
        super(manager.inner().legacyPeerings());
        this.manager = manager;
    }

    public PeeringManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Peering> listAsync(final String peeringLocation, final String kind) {
        LegacyPeeringsInner client = this.inner();
        return client.listAsync(peeringLocation, kind)
        .flatMapIterable(new Func1<Page<PeeringInner>, Iterable<PeeringInner>>() {
            @Override
            public Iterable<PeeringInner> call(Page<PeeringInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PeeringInner, Peering>() {
            @Override
            public Peering call(PeeringInner inner) {
                return new PeeringImpl(inner.name(), inner, manager());
            }
        });
    }

}
