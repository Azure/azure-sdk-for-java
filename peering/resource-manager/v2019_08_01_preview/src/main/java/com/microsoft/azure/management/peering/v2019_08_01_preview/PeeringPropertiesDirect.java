/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview;

import java.util.List;
import com.microsoft.azure.SubResource;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties that define a direct peering.
 */
public class PeeringPropertiesDirect {
    /**
     * The set of connections that constitute a direct peering.
     */
    @JsonProperty(value = "connections")
    private List<DirectConnection> connections;

    /**
     * The flag that indicates whether or not the peering is used for peering
     * service.
     */
    @JsonProperty(value = "useForPeeringService")
    private Boolean useForPeeringService;

    /**
     * The reference of the peer ASN.
     */
    @JsonProperty(value = "peerAsn")
    private SubResource peerAsn;

    /**
     * The type of direct peering. Possible values include: 'Edge', 'Transit',
     * 'Cdn', 'Internal'.
     */
    @JsonProperty(value = "directPeeringType")
    private DirectPeeringType directPeeringType;

    /**
     * Get the set of connections that constitute a direct peering.
     *
     * @return the connections value
     */
    public List<DirectConnection> connections() {
        return this.connections;
    }

    /**
     * Set the set of connections that constitute a direct peering.
     *
     * @param connections the connections value to set
     * @return the PeeringPropertiesDirect object itself.
     */
    public PeeringPropertiesDirect withConnections(List<DirectConnection> connections) {
        this.connections = connections;
        return this;
    }

    /**
     * Get the flag that indicates whether or not the peering is used for peering service.
     *
     * @return the useForPeeringService value
     */
    public Boolean useForPeeringService() {
        return this.useForPeeringService;
    }

    /**
     * Set the flag that indicates whether or not the peering is used for peering service.
     *
     * @param useForPeeringService the useForPeeringService value to set
     * @return the PeeringPropertiesDirect object itself.
     */
    public PeeringPropertiesDirect withUseForPeeringService(Boolean useForPeeringService) {
        this.useForPeeringService = useForPeeringService;
        return this;
    }

    /**
     * Get the reference of the peer ASN.
     *
     * @return the peerAsn value
     */
    public SubResource peerAsn() {
        return this.peerAsn;
    }

    /**
     * Set the reference of the peer ASN.
     *
     * @param peerAsn the peerAsn value to set
     * @return the PeeringPropertiesDirect object itself.
     */
    public PeeringPropertiesDirect withPeerAsn(SubResource peerAsn) {
        this.peerAsn = peerAsn;
        return this;
    }

    /**
     * Get the type of direct peering. Possible values include: 'Edge', 'Transit', 'Cdn', 'Internal'.
     *
     * @return the directPeeringType value
     */
    public DirectPeeringType directPeeringType() {
        return this.directPeeringType;
    }

    /**
     * Set the type of direct peering. Possible values include: 'Edge', 'Transit', 'Cdn', 'Internal'.
     *
     * @param directPeeringType the directPeeringType value to set
     * @return the PeeringPropertiesDirect object itself.
     */
    public PeeringPropertiesDirect withDirectPeeringType(DirectPeeringType directPeeringType) {
        this.directPeeringType = directPeeringType;
        return this;
    }

}
