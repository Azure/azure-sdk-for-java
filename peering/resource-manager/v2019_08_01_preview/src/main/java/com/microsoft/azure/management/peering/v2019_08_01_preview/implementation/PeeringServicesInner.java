/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ErrorResponseException;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ResourceTags;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PeeringServices.
 */
public class PeeringServicesInner implements InnerSupportsGet<PeeringServiceInner>, InnerSupportsDelete<Void>, InnerSupportsListing<PeeringServiceInner> {
    /** The Retrofit service to perform REST calls. */
    private PeeringServicesService service;
    /** The service client containing this operation class. */
    private PeeringManagementClientImpl client;

    /**
     * Initializes an instance of PeeringServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PeeringServicesInner(Retrofit retrofit, PeeringManagementClientImpl client) {
        this.service = retrofit.create(PeeringServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PeeringServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PeeringServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("peeringServiceName") String peeringServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("peeringServiceName") String peeringServiceName, @Path("subscriptionId") String subscriptionId, @Body PeeringServiceInner peeringService, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("peeringServiceName") String peeringServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("peeringServiceName") String peeringServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ResourceTags tags, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServices")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServices listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringServiceInner object if successful.
     */
    public PeeringServiceInner getByResourceGroup(String resourceGroupName, String peeringServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, peeringServiceName).toBlocking().single().body();
    }

    /**
     * Gets an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringServiceInner> getByResourceGroupAsync(String resourceGroupName, String peeringServiceName, final ServiceCallback<PeeringServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, peeringServiceName), serviceCallback);
    }

    /**
     * Gets an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<PeeringServiceInner> getByResourceGroupAsync(String resourceGroupName, String peeringServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, peeringServiceName).map(new Func1<ServiceResponse<PeeringServiceInner>, PeeringServiceInner>() {
            @Override
            public PeeringServiceInner call(ServiceResponse<PeeringServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<ServiceResponse<PeeringServiceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String peeringServiceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, peeringServiceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringServiceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PeeringServiceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PeeringServiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PeeringServiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param peeringService The properties needed to create or update a peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringServiceInner object if successful.
     */
    public PeeringServiceInner createOrUpdate(String resourceGroupName, String peeringServiceName, PeeringServiceInner peeringService) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringServiceName, peeringService).toBlocking().single().body();
    }

    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param peeringService The properties needed to create or update a peering service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringServiceInner> createOrUpdateAsync(String resourceGroupName, String peeringServiceName, PeeringServiceInner peeringService, final ServiceCallback<PeeringServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringServiceName, peeringService), serviceCallback);
    }

    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param peeringService The properties needed to create or update a peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<PeeringServiceInner> createOrUpdateAsync(String resourceGroupName, String peeringServiceName, PeeringServiceInner peeringService) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringServiceName, peeringService).map(new Func1<ServiceResponse<PeeringServiceInner>, PeeringServiceInner>() {
            @Override
            public PeeringServiceInner call(ServiceResponse<PeeringServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param peeringService The properties needed to create or update a peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<ServiceResponse<PeeringServiceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String peeringServiceName, PeeringServiceInner peeringService) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (peeringService == null) {
            throw new IllegalArgumentException("Parameter peeringService is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(peeringService);
        return service.createOrUpdate(resourceGroupName, peeringServiceName, this.client.subscriptionId(), peeringService, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringServiceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PeeringServiceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PeeringServiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PeeringServiceInner>() { }.getType())
                .register(201, new TypeToken<PeeringServiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String peeringServiceName) {
        deleteWithServiceResponseAsync(resourceGroupName, peeringServiceName).toBlocking().single().body();
    }

    /**
     * Deletes an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String peeringServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, peeringServiceName), serviceCallback);
    }

    /**
     * Deletes an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String peeringServiceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, peeringServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String peeringServiceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, peeringServiceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringServiceInner object if successful.
     */
    public PeeringServiceInner update(String resourceGroupName, String peeringServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, peeringServiceName).toBlocking().single().body();
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringServiceInner> updateAsync(String resourceGroupName, String peeringServiceName, final ServiceCallback<PeeringServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, peeringServiceName), serviceCallback);
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<PeeringServiceInner> updateAsync(String resourceGroupName, String peeringServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, peeringServiceName).map(new Func1<ServiceResponse<PeeringServiceInner>, PeeringServiceInner>() {
            @Override
            public PeeringServiceInner call(ServiceResponse<PeeringServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<ServiceResponse<PeeringServiceInner>> updateWithServiceResponseAsync(String resourceGroupName, String peeringServiceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        ResourceTags tags1 = new ResourceTags();
        tags1.withTags(null);
        return service.update(resourceGroupName, peeringServiceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), tags1, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringServiceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param tags Gets or sets the tags, a dictionary of descriptors arm object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringServiceInner object if successful.
     */
    public PeeringServiceInner update(String resourceGroupName, String peeringServiceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, peeringServiceName, tags).toBlocking().single().body();
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param tags Gets or sets the tags, a dictionary of descriptors arm object
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringServiceInner> updateAsync(String resourceGroupName, String peeringServiceName, Map<String, String> tags, final ServiceCallback<PeeringServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, peeringServiceName, tags), serviceCallback);
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param tags Gets or sets the tags, a dictionary of descriptors arm object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<PeeringServiceInner> updateAsync(String resourceGroupName, String peeringServiceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, peeringServiceName, tags).map(new Func1<ServiceResponse<PeeringServiceInner>, PeeringServiceInner>() {
            @Override
            public PeeringServiceInner call(ServiceResponse<PeeringServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param tags Gets or sets the tags, a dictionary of descriptors arm object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringServiceInner object
     */
    public Observable<ServiceResponse<PeeringServiceInner>> updateWithServiceResponseAsync(String resourceGroupName, String peeringServiceName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringServiceName == null) {
            throw new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        ResourceTags tags1 = new ResourceTags();
        tags1.withTags(tags);
        return service.update(resourceGroupName, peeringServiceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), tags1, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringServiceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PeeringServiceInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PeeringServiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PeeringServiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringServiceInner&gt; object if successful.
     */
    public PagedList<PeeringServiceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<PeeringServiceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<PeeringServiceInner>(response.body()) {
            @Override
            public Page<PeeringServiceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringServiceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<PeeringServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<Page<PeeringServiceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Page<PeeringServiceInner>>() {
                @Override
                public Page<PeeringServiceInner> call(ServiceResponse<Page<PeeringServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(ServiceResponse<Page<PeeringServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
    ServiceResponse<PageImpl<PeeringServiceInner>> * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringServiceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringServiceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringServiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringServiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringServiceInner&gt; object if successful.
     */
    public PagedList<PeeringServiceInner> list() {
        ServiceResponse<Page<PeeringServiceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<PeeringServiceInner>(response.body()) {
            @Override
            public Page<PeeringServiceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringServiceInner>> listAsync(final ListOperationCallback<PeeringServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<Page<PeeringServiceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Page<PeeringServiceInner>>() {
                @Override
                public Page<PeeringServiceInner> call(ServiceResponse<Page<PeeringServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(ServiceResponse<Page<PeeringServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringServiceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringServiceInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringServiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringServiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringServiceInner&gt; object if successful.
     */
    public PagedList<PeeringServiceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PeeringServiceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PeeringServiceInner>(response.body()) {
            @Override
            public Page<PeeringServiceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringServiceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PeeringServiceInner>> serviceFuture, final ListOperationCallback<PeeringServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<Page<PeeringServiceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Page<PeeringServiceInner>>() {
                @Override
                public Page<PeeringServiceInner> call(ServiceResponse<Page<PeeringServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(ServiceResponse<Page<PeeringServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
    ServiceResponse<PageImpl<PeeringServiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringServiceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringServiceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringServiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringServiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringServiceInner&gt; object if successful.
     */
    public PagedList<PeeringServiceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<PeeringServiceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PeeringServiceInner>(response.body()) {
            @Override
            public Page<PeeringServiceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringServiceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<PeeringServiceInner>> serviceFuture, final ListOperationCallback<PeeringServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<Page<PeeringServiceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Page<PeeringServiceInner>>() {
                @Override
                public Page<PeeringServiceInner> call(ServiceResponse<Page<PeeringServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PeeringServiceInner>>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(ServiceResponse<Page<PeeringServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
    ServiceResponse<PageImpl<PeeringServiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringServiceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringServiceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringServiceInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringServiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringServiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
