/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.implementation;

import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventTypeValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventSourceValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventStatusValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.LevelValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventLevelValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventPropertiesArticle;
import java.util.List;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Link;
import org.joda.time.DateTime;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Impact;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventPropertiesRecommendedActions;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Faq;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Service health event.
 */
@JsonFlatten
public class EventInner extends ProxyResource {
    /**
     * Type of event. Possible values include: 'ServiceIssue',
     * 'PlannedMaintenance', 'HealthAdvisory', 'RCA'.
     */
    @JsonProperty(value = "properties.eventType")
    private EventTypeValues eventType;

    /**
     * Source of event. Possible values include: 'ResourceHealth',
     * 'ServiceHealth'.
     */
    @JsonProperty(value = "properties.eventSource")
    private EventSourceValues eventSource;

    /**
     * Current status of event. Possible values include: 'Active', 'Resolved'.
     */
    @JsonProperty(value = "properties.status")
    private EventStatusValues status;

    /**
     * Title text of event.
     */
    @JsonProperty(value = "properties.title")
    private String title;

    /**
     * Summary text of event.
     */
    @JsonProperty(value = "properties.summary")
    private String summary;

    /**
     * Header text of event.
     */
    @JsonProperty(value = "properties.header")
    private String headerProperty;

    /**
     * Level of insight. Possible values include: 'Critical', 'Warning'.
     */
    @JsonProperty(value = "properties.level")
    private LevelValues level;

    /**
     * Level of event. Possible values include: 'Critical', 'Warning',
     * 'Informational'.
     */
    @JsonProperty(value = "properties.eventLevel")
    private EventLevelValues eventLevel;

    /**
     * Article of event.
     */
    @JsonProperty(value = "properties.article")
    private EventPropertiesArticle article;

    /**
     * Useful links of event.
     */
    @JsonProperty(value = "properties.links")
    private List<Link> links;

    /**
     * It provides the Timestamp for when the health impacting event started.
     */
    @JsonProperty(value = "properties.impactStartTime")
    private DateTime impactStartTime;

    /**
     * It provides the Timestamp for when the health impacting event resolved.
     */
    @JsonProperty(value = "properties.impactMitigationTime")
    private DateTime impactMitigationTime;

    /**
     * List services impacted by the service health event.
     */
    @JsonProperty(value = "properties.impact")
    private List<Impact> impact;

    /**
     * Recommended actions of event.
     */
    @JsonProperty(value = "properties.recommendedActions")
    private EventPropertiesRecommendedActions recommendedActions;

    /**
     * Frequently asked questions for the service health event.
     */
    @JsonProperty(value = "properties.faqs")
    private List<Faq> faqs;

    /**
     * It provides information if the event is High incident rate event or not.
     */
    @JsonProperty(value = "properties.isHIR")
    private Boolean isHIR;

    /**
     * Tells if we want to enable or disable Microsoft Support for this event.
     */
    @JsonProperty(value = "properties.enableMicrosoftSupport")
    private Boolean enableMicrosoftSupport;

    /**
     * Tells if we want to enable or disable Microsoft Support for this event.
     */
    @JsonProperty(value = "properties.enableChatWithUs")
    private Boolean enableChatWithUs;

    /**
     * Priority level of the event.
     */
    @JsonProperty(value = "properties.priority")
    private Integer priority;

    /**
     * It provides the Timestamp for when the health impacting event was last
     * updated.
     */
    @JsonProperty(value = "properties.lastUpdateTime")
    private DateTime lastUpdateTime;

    /**
     * Stage for HIR Document.
     */
    @JsonProperty(value = "properties.hirStage")
    private String hirStage;

    /**
     * Get type of event. Possible values include: 'ServiceIssue', 'PlannedMaintenance', 'HealthAdvisory', 'RCA'.
     *
     * @return the eventType value
     */
    public EventTypeValues eventType() {
        return this.eventType;
    }

    /**
     * Set type of event. Possible values include: 'ServiceIssue', 'PlannedMaintenance', 'HealthAdvisory', 'RCA'.
     *
     * @param eventType the eventType value to set
     * @return the EventInner object itself.
     */
    public EventInner withEventType(EventTypeValues eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get source of event. Possible values include: 'ResourceHealth', 'ServiceHealth'.
     *
     * @return the eventSource value
     */
    public EventSourceValues eventSource() {
        return this.eventSource;
    }

    /**
     * Set source of event. Possible values include: 'ResourceHealth', 'ServiceHealth'.
     *
     * @param eventSource the eventSource value to set
     * @return the EventInner object itself.
     */
    public EventInner withEventSource(EventSourceValues eventSource) {
        this.eventSource = eventSource;
        return this;
    }

    /**
     * Get current status of event. Possible values include: 'Active', 'Resolved'.
     *
     * @return the status value
     */
    public EventStatusValues status() {
        return this.status;
    }

    /**
     * Set current status of event. Possible values include: 'Active', 'Resolved'.
     *
     * @param status the status value to set
     * @return the EventInner object itself.
     */
    public EventInner withStatus(EventStatusValues status) {
        this.status = status;
        return this;
    }

    /**
     * Get title text of event.
     *
     * @return the title value
     */
    public String title() {
        return this.title;
    }

    /**
     * Set title text of event.
     *
     * @param title the title value to set
     * @return the EventInner object itself.
     */
    public EventInner withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get summary text of event.
     *
     * @return the summary value
     */
    public String summary() {
        return this.summary;
    }

    /**
     * Set summary text of event.
     *
     * @param summary the summary value to set
     * @return the EventInner object itself.
     */
    public EventInner withSummary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get header text of event.
     *
     * @return the headerProperty value
     */
    public String headerProperty() {
        return this.headerProperty;
    }

    /**
     * Set header text of event.
     *
     * @param headerProperty the headerProperty value to set
     * @return the EventInner object itself.
     */
    public EventInner withHeaderProperty(String headerProperty) {
        this.headerProperty = headerProperty;
        return this;
    }

    /**
     * Get level of insight. Possible values include: 'Critical', 'Warning'.
     *
     * @return the level value
     */
    public LevelValues level() {
        return this.level;
    }

    /**
     * Set level of insight. Possible values include: 'Critical', 'Warning'.
     *
     * @param level the level value to set
     * @return the EventInner object itself.
     */
    public EventInner withLevel(LevelValues level) {
        this.level = level;
        return this;
    }

    /**
     * Get level of event. Possible values include: 'Critical', 'Warning', 'Informational'.
     *
     * @return the eventLevel value
     */
    public EventLevelValues eventLevel() {
        return this.eventLevel;
    }

    /**
     * Set level of event. Possible values include: 'Critical', 'Warning', 'Informational'.
     *
     * @param eventLevel the eventLevel value to set
     * @return the EventInner object itself.
     */
    public EventInner withEventLevel(EventLevelValues eventLevel) {
        this.eventLevel = eventLevel;
        return this;
    }

    /**
     * Get article of event.
     *
     * @return the article value
     */
    public EventPropertiesArticle article() {
        return this.article;
    }

    /**
     * Set article of event.
     *
     * @param article the article value to set
     * @return the EventInner object itself.
     */
    public EventInner withArticle(EventPropertiesArticle article) {
        this.article = article;
        return this;
    }

    /**
     * Get useful links of event.
     *
     * @return the links value
     */
    public List<Link> links() {
        return this.links;
    }

    /**
     * Set useful links of event.
     *
     * @param links the links value to set
     * @return the EventInner object itself.
     */
    public EventInner withLinks(List<Link> links) {
        this.links = links;
        return this;
    }

    /**
     * Get it provides the Timestamp for when the health impacting event started.
     *
     * @return the impactStartTime value
     */
    public DateTime impactStartTime() {
        return this.impactStartTime;
    }

    /**
     * Set it provides the Timestamp for when the health impacting event started.
     *
     * @param impactStartTime the impactStartTime value to set
     * @return the EventInner object itself.
     */
    public EventInner withImpactStartTime(DateTime impactStartTime) {
        this.impactStartTime = impactStartTime;
        return this;
    }

    /**
     * Get it provides the Timestamp for when the health impacting event resolved.
     *
     * @return the impactMitigationTime value
     */
    public DateTime impactMitigationTime() {
        return this.impactMitigationTime;
    }

    /**
     * Set it provides the Timestamp for when the health impacting event resolved.
     *
     * @param impactMitigationTime the impactMitigationTime value to set
     * @return the EventInner object itself.
     */
    public EventInner withImpactMitigationTime(DateTime impactMitigationTime) {
        this.impactMitigationTime = impactMitigationTime;
        return this;
    }

    /**
     * Get list services impacted by the service health event.
     *
     * @return the impact value
     */
    public List<Impact> impact() {
        return this.impact;
    }

    /**
     * Set list services impacted by the service health event.
     *
     * @param impact the impact value to set
     * @return the EventInner object itself.
     */
    public EventInner withImpact(List<Impact> impact) {
        this.impact = impact;
        return this;
    }

    /**
     * Get recommended actions of event.
     *
     * @return the recommendedActions value
     */
    public EventPropertiesRecommendedActions recommendedActions() {
        return this.recommendedActions;
    }

    /**
     * Set recommended actions of event.
     *
     * @param recommendedActions the recommendedActions value to set
     * @return the EventInner object itself.
     */
    public EventInner withRecommendedActions(EventPropertiesRecommendedActions recommendedActions) {
        this.recommendedActions = recommendedActions;
        return this;
    }

    /**
     * Get frequently asked questions for the service health event.
     *
     * @return the faqs value
     */
    public List<Faq> faqs() {
        return this.faqs;
    }

    /**
     * Set frequently asked questions for the service health event.
     *
     * @param faqs the faqs value to set
     * @return the EventInner object itself.
     */
    public EventInner withFaqs(List<Faq> faqs) {
        this.faqs = faqs;
        return this;
    }

    /**
     * Get it provides information if the event is High incident rate event or not.
     *
     * @return the isHIR value
     */
    public Boolean isHIR() {
        return this.isHIR;
    }

    /**
     * Set it provides information if the event is High incident rate event or not.
     *
     * @param isHIR the isHIR value to set
     * @return the EventInner object itself.
     */
    public EventInner withIsHIR(Boolean isHIR) {
        this.isHIR = isHIR;
        return this;
    }

    /**
     * Get tells if we want to enable or disable Microsoft Support for this event.
     *
     * @return the enableMicrosoftSupport value
     */
    public Boolean enableMicrosoftSupport() {
        return this.enableMicrosoftSupport;
    }

    /**
     * Set tells if we want to enable or disable Microsoft Support for this event.
     *
     * @param enableMicrosoftSupport the enableMicrosoftSupport value to set
     * @return the EventInner object itself.
     */
    public EventInner withEnableMicrosoftSupport(Boolean enableMicrosoftSupport) {
        this.enableMicrosoftSupport = enableMicrosoftSupport;
        return this;
    }

    /**
     * Get tells if we want to enable or disable Microsoft Support for this event.
     *
     * @return the enableChatWithUs value
     */
    public Boolean enableChatWithUs() {
        return this.enableChatWithUs;
    }

    /**
     * Set tells if we want to enable or disable Microsoft Support for this event.
     *
     * @param enableChatWithUs the enableChatWithUs value to set
     * @return the EventInner object itself.
     */
    public EventInner withEnableChatWithUs(Boolean enableChatWithUs) {
        this.enableChatWithUs = enableChatWithUs;
        return this;
    }

    /**
     * Get priority level of the event.
     *
     * @return the priority value
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set priority level of the event.
     *
     * @param priority the priority value to set
     * @return the EventInner object itself.
     */
    public EventInner withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get it provides the Timestamp for when the health impacting event was last updated.
     *
     * @return the lastUpdateTime value
     */
    public DateTime lastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Set it provides the Timestamp for when the health impacting event was last updated.
     *
     * @param lastUpdateTime the lastUpdateTime value to set
     * @return the EventInner object itself.
     */
    public EventInner withLastUpdateTime(DateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }

    /**
     * Get stage for HIR Document.
     *
     * @return the hirStage value
     */
    public String hirStage() {
        return this.hirStage;
    }

    /**
     * Set stage for HIR Document.
     *
     * @param hirStage the hirStage value to set
     * @return the EventInner object itself.
     */
    public EventInner withHirStage(String hirStage) {
        this.hirStage = hirStage;
        return this;
    }

}
