/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Events;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Event;
import com.microsoft.azure.arm.utils.PagedListConverter;

class EventsImpl extends WrapperImpl<EventsInner> implements Events {
    private PagedListConverter<EventInner, Event> converter;
    private final ResourceHealthManager manager;

    EventsImpl(ResourceHealthManager manager) {
        super(manager.inner().events());
        this.manager = manager;
        this.converter = new PagedListConverter<EventInner, Event>() {
            @Override
            public Observable<Event> typeConvertAsync(EventInner inner) {
                return Observable.just((Event) wrapModel(inner));
            }
        };
    }

    public ResourceHealthManager manager() {
        return this.manager;
    }

    private EventImpl wrapModel(EventInner inner) {
        return  new EventImpl(inner, manager());
    }

    @Override
    public Observable<Event> listBySingleResourceAsync(final String resourceUri) {
        EventsInner client = this.inner();
        return client.listBySingleResourceAsync(resourceUri)
        .flatMapIterable(new Func1<Page<EventInner>, Iterable<EventInner>>() {
            @Override
            public Iterable<EventInner> call(Page<EventInner> page) {
                return page.items();
            }
        })
        .map(new Func1<EventInner, Event>() {
            @Override
            public Event call(EventInner inner) {
                return new EventImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<Event> list() {
        EventsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<Event> listAsync() {
        EventsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<EventInner>, Iterable<EventInner>>() {
            @Override
            public Iterable<EventInner> call(Page<EventInner> page) {
                return page.items();
            }
        })
        .map(new Func1<EventInner, Event>() {
            @Override
            public Event call(EventInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
