/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcehealth.v2017_07_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.resourcehealth.v2017_07_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ChildAvailabilityStatuses.
 */
public class ChildAvailabilityStatusesInner {
    /** The Retrofit service to perform REST calls. */
    private ChildAvailabilityStatusesService service;
    /** The service client containing this operation class. */
    private MicrosoftResourceHealthImpl client;

    /**
     * Initializes an instance of ChildAvailabilityStatusesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ChildAvailabilityStatusesInner(Retrofit retrofit, MicrosoftResourceHealthImpl client) {
        this.service = retrofit.create(ChildAvailabilityStatusesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ChildAvailabilityStatuses to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ChildAvailabilityStatusesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcehealth.v2017_07_01.ChildAvailabilityStatuses getByResource" })
        @GET("{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses/current")
        Observable<Response<ResponseBody>> getByResource(@Path(value = "resourceUri", encoded = true) String resourceUri, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcehealth.v2017_07_01.ChildAvailabilityStatuses list" })
        @GET("{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses")
        Observable<Response<ResponseBody>> list(@Path(value = "resourceUri", encoded = true) String resourceUri, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcehealth.v2017_07_01.ChildAvailabilityStatuses listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AvailabilityStatusInner object if successful.
     */
    public AvailabilityStatusInner getByResource(String resourceUri) {
        return getByResourceWithServiceResponseAsync(resourceUri).toBlocking().single().body();
    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AvailabilityStatusInner> getByResourceAsync(String resourceUri, final ServiceCallback<AvailabilityStatusInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceWithServiceResponseAsync(resourceUri), serviceCallback);
    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityStatusInner object
     */
    public Observable<AvailabilityStatusInner> getByResourceAsync(String resourceUri) {
        return getByResourceWithServiceResponseAsync(resourceUri).map(new Func1<ServiceResponse<AvailabilityStatusInner>, AvailabilityStatusInner>() {
            @Override
            public AvailabilityStatusInner call(ServiceResponse<AvailabilityStatusInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityStatusInner object
     */
    public Observable<ServiceResponse<AvailabilityStatusInner>> getByResourceWithServiceResponseAsync(String resourceUri) {
        if (resourceUri == null) {
            throw new IllegalArgumentException("Parameter resourceUri is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final String expand = null;
        return service.getByResource(resourceUri, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AvailabilityStatusInner>>>() {
                @Override
                public Observable<ServiceResponse<AvailabilityStatusInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AvailabilityStatusInner> clientResponse = getByResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AvailabilityStatusInner object if successful.
     */
    public AvailabilityStatusInner getByResource(String resourceUri, String filter, String expand) {
        return getByResourceWithServiceResponseAsync(resourceUri, filter, expand).toBlocking().single().body();
    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AvailabilityStatusInner> getByResourceAsync(String resourceUri, String filter, String expand, final ServiceCallback<AvailabilityStatusInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceWithServiceResponseAsync(resourceUri, filter, expand), serviceCallback);
    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityStatusInner object
     */
    public Observable<AvailabilityStatusInner> getByResourceAsync(String resourceUri, String filter, String expand) {
        return getByResourceWithServiceResponseAsync(resourceUri, filter, expand).map(new Func1<ServiceResponse<AvailabilityStatusInner>, AvailabilityStatusInner>() {
            @Override
            public AvailabilityStatusInner call(ServiceResponse<AvailabilityStatusInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets current availability status for a single resource.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityStatusInner object
     */
    public Observable<ServiceResponse<AvailabilityStatusInner>> getByResourceWithServiceResponseAsync(String resourceUri, String filter, String expand) {
        if (resourceUri == null) {
            throw new IllegalArgumentException("Parameter resourceUri is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResource(resourceUri, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AvailabilityStatusInner>>>() {
                @Override
                public Observable<ServiceResponse<AvailabilityStatusInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AvailabilityStatusInner> clientResponse = getByResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AvailabilityStatusInner> getByResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AvailabilityStatusInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AvailabilityStatusInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AvailabilityStatusInner&gt; object if successful.
     */
    public PagedList<AvailabilityStatusInner> list(final String resourceUri) {
        ServiceResponse<Page<AvailabilityStatusInner>> response = listSinglePageAsync(resourceUri).toBlocking().single();
        return new PagedList<AvailabilityStatusInner>(response.body()) {
            @Override
            public Page<AvailabilityStatusInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AvailabilityStatusInner>> listAsync(final String resourceUri, final ListOperationCallback<AvailabilityStatusInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceUri),
            new Func1<String, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityStatusInner&gt; object
     */
    public Observable<Page<AvailabilityStatusInner>> listAsync(final String resourceUri) {
        return listWithServiceResponseAsync(resourceUri)
            .map(new Func1<ServiceResponse<Page<AvailabilityStatusInner>>, Page<AvailabilityStatusInner>>() {
                @Override
                public Page<AvailabilityStatusInner> call(ServiceResponse<Page<AvailabilityStatusInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityStatusInner&gt; object
     */
    public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> listWithServiceResponseAsync(final String resourceUri) {
        return listSinglePageAsync(resourceUri)
            .concatMap(new Func1<ServiceResponse<Page<AvailabilityStatusInner>>, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(ServiceResponse<Page<AvailabilityStatusInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AvailabilityStatusInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> listSinglePageAsync(final String resourceUri) {
        if (resourceUri == null) {
            throw new IllegalArgumentException("Parameter resourceUri is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final String expand = null;
        return service.list(resourceUri, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AvailabilityStatusInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AvailabilityStatusInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AvailabilityStatusInner&gt; object if successful.
     */
    public PagedList<AvailabilityStatusInner> list(final String resourceUri, final String filter, final String expand) {
        ServiceResponse<Page<AvailabilityStatusInner>> response = listSinglePageAsync(resourceUri, filter, expand).toBlocking().single();
        return new PagedList<AvailabilityStatusInner>(response.body()) {
            @Override
            public Page<AvailabilityStatusInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AvailabilityStatusInner>> listAsync(final String resourceUri, final String filter, final String expand, final ListOperationCallback<AvailabilityStatusInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceUri, filter, expand),
            new Func1<String, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityStatusInner&gt; object
     */
    public Observable<Page<AvailabilityStatusInner>> listAsync(final String resourceUri, final String filter, final String expand) {
        return listWithServiceResponseAsync(resourceUri, filter, expand)
            .map(new Func1<ServiceResponse<Page<AvailabilityStatusInner>>, Page<AvailabilityStatusInner>>() {
                @Override
                public Page<AvailabilityStatusInner> call(ServiceResponse<Page<AvailabilityStatusInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityStatusInner&gt; object
     */
    public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> listWithServiceResponseAsync(final String resourceUri, final String filter, final String expand) {
        return listSinglePageAsync(resourceUri, filter, expand)
            .concatMap(new Func1<ServiceResponse<Page<AvailabilityStatusInner>>, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(ServiceResponse<Page<AvailabilityStatusInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
    ServiceResponse<PageImpl<AvailabilityStatusInner>> * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
    ServiceResponse<PageImpl<AvailabilityStatusInner>> * @param filter The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
    ServiceResponse<PageImpl<AvailabilityStatusInner>> * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AvailabilityStatusInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> listSinglePageAsync(final String resourceUri, final String filter, final String expand) {
        if (resourceUri == null) {
            throw new IllegalArgumentException("Parameter resourceUri is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(resourceUri, this.client.apiVersion(), filter, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AvailabilityStatusInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AvailabilityStatusInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AvailabilityStatusInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AvailabilityStatusInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AvailabilityStatusInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AvailabilityStatusInner&gt; object if successful.
     */
    public PagedList<AvailabilityStatusInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<AvailabilityStatusInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AvailabilityStatusInner>(response.body()) {
            @Override
            public Page<AvailabilityStatusInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AvailabilityStatusInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<AvailabilityStatusInner>> serviceFuture, final ListOperationCallback<AvailabilityStatusInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityStatusInner&gt; object
     */
    public Observable<Page<AvailabilityStatusInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AvailabilityStatusInner>>, Page<AvailabilityStatusInner>>() {
                @Override
                public Page<AvailabilityStatusInner> call(ServiceResponse<Page<AvailabilityStatusInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityStatusInner&gt; object
     */
    public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AvailabilityStatusInner>>, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(ServiceResponse<Page<AvailabilityStatusInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status.
     *
    ServiceResponse<PageImpl<AvailabilityStatusInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AvailabilityStatusInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AvailabilityStatusInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityStatusInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AvailabilityStatusInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AvailabilityStatusInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AvailabilityStatusInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AvailabilityStatusInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AvailabilityStatusInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
