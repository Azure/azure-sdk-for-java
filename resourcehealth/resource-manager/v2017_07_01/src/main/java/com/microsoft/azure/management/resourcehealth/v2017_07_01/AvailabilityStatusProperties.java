/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcehealth.v2017_07_01;

import org.joda.time.DateTime;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties of availability state.
 */
public class AvailabilityStatusProperties {
    /**
     * Availability status of the resource. When it is null, this
     * availabilityStatus object represents an availability impacting event.
     * Possible values include: 'Available', 'Unavailable', 'Unknown'.
     */
    @JsonProperty(value = "availabilityState")
    private AvailabilityStateValues availabilityState;

    /**
     * Summary description of the availability status.
     */
    @JsonProperty(value = "summary")
    private String summary;

    /**
     * Details of the availability status.
     */
    @JsonProperty(value = "detailedStatus")
    private String detailedStatus;

    /**
     * When the resource's availabilityState is Unavailable, it describes where
     * the health impacting event was originated. Examples are planned,
     * unplanned, user initiated or an outage etc.
     */
    @JsonProperty(value = "reasonType")
    private String reasonType;

    /**
     * When the resource's availabilityState is Unavailable, it provides the
     * Timestamp for when the health impacting event was received.
     */
    @JsonProperty(value = "rootCauseAttributionTime")
    private DateTime rootCauseAttributionTime;

    /**
     * In case of an availability impacting event, it describes when the health
     * impacting event was originated. Examples are Lifecycle, Downtime, Fault
     * Analysis etc.
     */
    @JsonProperty(value = "healthEventType")
    private String healthEventType;

    /**
     * In case of an availability impacting event, it describes where the
     * health impacting event was originated. Examples are PlatformInitiated,
     * UserInitiated etc.
     */
    @JsonProperty(value = "healthEventCause")
    private String healthEventCause;

    /**
     * In case of an availability impacting event, it describes the category of
     * a PlatformInitiated health impacting event. Examples are Planned,
     * Unplanned etc.
     */
    @JsonProperty(value = "healthEventCategory")
    private String healthEventCategory;

    /**
     * It is a unique Id that identifies the event.
     */
    @JsonProperty(value = "healthEventId")
    private String healthEventId;

    /**
     * When the resource's availabilityState is Unavailable and the reasonType
     * is not User Initiated, it provides the date and time for when the issue
     * is expected to be resolved.
     */
    @JsonProperty(value = "resolutionETA")
    private DateTime resolutionETA;

    /**
     * Timestamp for when last change in health status occurred.
     */
    @JsonProperty(value = "occuredTime")
    private DateTime occuredTime;

    /**
     * Chronicity of the availability transition. Possible values include:
     * 'Transient', 'Persistent'.
     */
    @JsonProperty(value = "reasonChronicity")
    private ReasonChronicityTypes reasonChronicity;

    /**
     * Timestamp for when the health was last checked.
     */
    @JsonProperty(value = "reportedTime")
    private DateTime reportedTime;

    /**
     * An annotation describing a change in the availabilityState to Available
     * from Unavailable with a reasonType of type Unplanned.
     */
    @JsonProperty(value = "recentlyResolvedState")
    private AvailabilityStatusPropertiesRecentlyResolvedState recentlyResolvedState;

    /**
     * Lists actions the user can take based on the current availabilityState
     * of the resource.
     */
    @JsonProperty(value = "recommendedActions")
    private List<RecommendedAction> recommendedActions;

    /**
     * Lists the service impacting events that may be affecting the health of
     * the resource.
     */
    @JsonProperty(value = "serviceImpactingEvents")
    private List<ServiceImpactingEvent> serviceImpactingEvents;

    /**
     * Get availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event. Possible values include: 'Available', 'Unavailable', 'Unknown'.
     *
     * @return the availabilityState value
     */
    public AvailabilityStateValues availabilityState() {
        return this.availabilityState;
    }

    /**
     * Set availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event. Possible values include: 'Available', 'Unavailable', 'Unknown'.
     *
     * @param availabilityState the availabilityState value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withAvailabilityState(AvailabilityStateValues availabilityState) {
        this.availabilityState = availabilityState;
        return this;
    }

    /**
     * Get summary description of the availability status.
     *
     * @return the summary value
     */
    public String summary() {
        return this.summary;
    }

    /**
     * Set summary description of the availability status.
     *
     * @param summary the summary value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withSummary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get details of the availability status.
     *
     * @return the detailedStatus value
     */
    public String detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Set details of the availability status.
     *
     * @param detailedStatus the detailedStatus value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withDetailedStatus(String detailedStatus) {
        this.detailedStatus = detailedStatus;
        return this;
    }

    /**
     * Get when the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc.
     *
     * @return the reasonType value
     */
    public String reasonType() {
        return this.reasonType;
    }

    /**
     * Set when the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc.
     *
     * @param reasonType the reasonType value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withReasonType(String reasonType) {
        this.reasonType = reasonType;
        return this;
    }

    /**
     * Get when the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received.
     *
     * @return the rootCauseAttributionTime value
     */
    public DateTime rootCauseAttributionTime() {
        return this.rootCauseAttributionTime;
    }

    /**
     * Set when the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received.
     *
     * @param rootCauseAttributionTime the rootCauseAttributionTime value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withRootCauseAttributionTime(DateTime rootCauseAttributionTime) {
        this.rootCauseAttributionTime = rootCauseAttributionTime;
        return this;
    }

    /**
     * Get in case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc.
     *
     * @return the healthEventType value
     */
    public String healthEventType() {
        return this.healthEventType;
    }

    /**
     * Set in case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc.
     *
     * @param healthEventType the healthEventType value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withHealthEventType(String healthEventType) {
        this.healthEventType = healthEventType;
        return this;
    }

    /**
     * Get in case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc.
     *
     * @return the healthEventCause value
     */
    public String healthEventCause() {
        return this.healthEventCause;
    }

    /**
     * Set in case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc.
     *
     * @param healthEventCause the healthEventCause value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withHealthEventCause(String healthEventCause) {
        this.healthEventCause = healthEventCause;
        return this;
    }

    /**
     * Get in case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc.
     *
     * @return the healthEventCategory value
     */
    public String healthEventCategory() {
        return this.healthEventCategory;
    }

    /**
     * Set in case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc.
     *
     * @param healthEventCategory the healthEventCategory value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withHealthEventCategory(String healthEventCategory) {
        this.healthEventCategory = healthEventCategory;
        return this;
    }

    /**
     * Get it is a unique Id that identifies the event.
     *
     * @return the healthEventId value
     */
    public String healthEventId() {
        return this.healthEventId;
    }

    /**
     * Set it is a unique Id that identifies the event.
     *
     * @param healthEventId the healthEventId value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withHealthEventId(String healthEventId) {
        this.healthEventId = healthEventId;
        return this;
    }

    /**
     * Get when the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved.
     *
     * @return the resolutionETA value
     */
    public DateTime resolutionETA() {
        return this.resolutionETA;
    }

    /**
     * Set when the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved.
     *
     * @param resolutionETA the resolutionETA value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withResolutionETA(DateTime resolutionETA) {
        this.resolutionETA = resolutionETA;
        return this;
    }

    /**
     * Get timestamp for when last change in health status occurred.
     *
     * @return the occuredTime value
     */
    public DateTime occuredTime() {
        return this.occuredTime;
    }

    /**
     * Set timestamp for when last change in health status occurred.
     *
     * @param occuredTime the occuredTime value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withOccuredTime(DateTime occuredTime) {
        this.occuredTime = occuredTime;
        return this;
    }

    /**
     * Get chronicity of the availability transition. Possible values include: 'Transient', 'Persistent'.
     *
     * @return the reasonChronicity value
     */
    public ReasonChronicityTypes reasonChronicity() {
        return this.reasonChronicity;
    }

    /**
     * Set chronicity of the availability transition. Possible values include: 'Transient', 'Persistent'.
     *
     * @param reasonChronicity the reasonChronicity value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withReasonChronicity(ReasonChronicityTypes reasonChronicity) {
        this.reasonChronicity = reasonChronicity;
        return this;
    }

    /**
     * Get timestamp for when the health was last checked.
     *
     * @return the reportedTime value
     */
    public DateTime reportedTime() {
        return this.reportedTime;
    }

    /**
     * Set timestamp for when the health was last checked.
     *
     * @param reportedTime the reportedTime value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withReportedTime(DateTime reportedTime) {
        this.reportedTime = reportedTime;
        return this;
    }

    /**
     * Get an annotation describing a change in the availabilityState to Available from Unavailable with a reasonType of type Unplanned.
     *
     * @return the recentlyResolvedState value
     */
    public AvailabilityStatusPropertiesRecentlyResolvedState recentlyResolvedState() {
        return this.recentlyResolvedState;
    }

    /**
     * Set an annotation describing a change in the availabilityState to Available from Unavailable with a reasonType of type Unplanned.
     *
     * @param recentlyResolvedState the recentlyResolvedState value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withRecentlyResolvedState(AvailabilityStatusPropertiesRecentlyResolvedState recentlyResolvedState) {
        this.recentlyResolvedState = recentlyResolvedState;
        return this;
    }

    /**
     * Get lists actions the user can take based on the current availabilityState of the resource.
     *
     * @return the recommendedActions value
     */
    public List<RecommendedAction> recommendedActions() {
        return this.recommendedActions;
    }

    /**
     * Set lists actions the user can take based on the current availabilityState of the resource.
     *
     * @param recommendedActions the recommendedActions value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withRecommendedActions(List<RecommendedAction> recommendedActions) {
        this.recommendedActions = recommendedActions;
        return this;
    }

    /**
     * Get lists the service impacting events that may be affecting the health of the resource.
     *
     * @return the serviceImpactingEvents value
     */
    public List<ServiceImpactingEvent> serviceImpactingEvents() {
        return this.serviceImpactingEvents;
    }

    /**
     * Set lists the service impacting events that may be affecting the health of the resource.
     *
     * @param serviceImpactingEvents the serviceImpactingEvents value to set
     * @return the AvailabilityStatusProperties object itself.
     */
    public AvailabilityStatusProperties withServiceImpactingEvents(List<ServiceImpactingEvent> serviceImpactingEvents) {
        this.serviceImpactingEvents = serviceImpactingEvents;
        return this;
    }

}
