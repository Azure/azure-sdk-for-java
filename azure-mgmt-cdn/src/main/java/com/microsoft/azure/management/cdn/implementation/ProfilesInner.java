/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.cdn.ErrorResponseException;
import com.microsoft.azure.management.cdn.ProfileUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Profiles.
 */
public final class ProfilesInner {
    /** The Retrofit service to perform REST calls. */
    private ProfilesService service;
    /** The service client containing this operation class. */
    private CdnManagementClientImpl client;

    /**
     * Initializes an instance of ProfilesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ProfilesInner(Retrofit retrofit, CdnManagementClientImpl client) {
        this.service = retrofit.create(ProfilesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Profiles to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ProfilesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Cdn/profiles")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}")
        Observable<Response<ResponseBody>> create(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Body ProfileInner profile, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Body ProfileInner profile, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ProfileUpdateParameters profileUpdateParameters, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ProfileUpdateParameters profileUpdateParameters, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/generateSsoUri")
        Observable<Response<ResponseBody>> generateSsoUri(@Path("resourceGroupName") String resourceGroupName, @Path("profileName") String profileName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @return the PagedList&lt;ProfileInner&gt; object if successful.
     */
    public PagedList<ProfileInner> list() {
        ServiceResponse<Page<ProfileInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ProfileInner>(response.getBody()) {
            @Override
            public Page<ProfileInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ProfileInner>> listAsync(final ListOperationCallback<ProfileInner> serviceCallback) {
        return AzureServiceCall.create(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<Page<ProfileInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ProfileInner>>, Page<ProfileInner>>() {
                @Override
                public Page<ProfileInner> call(ServiceResponse<Page<ProfileInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ProfileInner>>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(ServiceResponse<Page<ProfileInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @return the PagedList&lt;ProfileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProfileInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProfileInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProfileInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ProfileInner>, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ProfileInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @return the PagedList&lt;ProfileInner&gt; object if successful.
     */
    public PagedList<ProfileInner> listByResourceGroup() {
        ServiceResponse<Page<ProfileInner>> response = listByResourceGroupSinglePageAsync().toBlocking().single();
        return new PagedList<ProfileInner>(response.getBody()) {
            @Override
            public Page<ProfileInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ProfileInner>> listByResourceGroupAsync(final ListOperationCallback<ProfileInner> serviceCallback) {
        return AzureServiceCall.create(
            listByResourceGroupSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<Page<ProfileInner>> listByResourceGroupAsync() {
        return listByResourceGroupWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ProfileInner>>, Page<ProfileInner>>() {
                @Override
                public Page<ProfileInner> call(ServiceResponse<Page<ProfileInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listByResourceGroupWithServiceResponseAsync() {
        return listByResourceGroupSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ProfileInner>>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(ServiceResponse<Page<ProfileInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @return the PagedList&lt;ProfileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listByResourceGroupSinglePageAsync() {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProfileInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProfileInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProfileInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ProfileInner>, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ProfileInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the ProfileInner object if successful.
     */
    public ProfileInner get(String profileName) {
        return getWithServiceResponseAsync(profileName).toBlocking().single().getBody();
    }

    /**
     * Gets a CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ProfileInner> getAsync(String profileName, final ServiceCallback<ProfileInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(profileName), serviceCallback);
    }

    /**
     * Gets a CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the observable to the ProfileInner object
     */
    public Observable<ProfileInner> getAsync(String profileName) {
        return getWithServiceResponseAsync(profileName).map(new Func1<ServiceResponse<ProfileInner>, ProfileInner>() {
            @Override
            public ProfileInner call(ServiceResponse<ProfileInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets a CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the observable to the ProfileInner object
     */
    public Observable<ServiceResponse<ProfileInner>> getWithServiceResponseAsync(String profileName) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<ProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProfileInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProfileInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ProfileInner, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ProfileInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @return the ProfileInner object if successful.
     */
    public ProfileInner create(String profileName, ProfileInner profile) {
        return createWithServiceResponseAsync(profileName, profile).toBlocking().last().getBody();
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ProfileInner> createAsync(String profileName, ProfileInner profile, final ServiceCallback<ProfileInner> serviceCallback) {
        return ServiceCall.create(createWithServiceResponseAsync(profileName, profile), serviceCallback);
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @return the observable for the request
     */
    public Observable<ProfileInner> createAsync(String profileName, ProfileInner profile) {
        return createWithServiceResponseAsync(profileName, profile).map(new Func1<ServiceResponse<ProfileInner>, ProfileInner>() {
            @Override
            public ProfileInner call(ServiceResponse<ProfileInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProfileInner>> createWithServiceResponseAsync(String profileName, ProfileInner profile) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (profile == null) {
            throw new IllegalArgumentException("Parameter profile is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(profile);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), profile, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ProfileInner>() { }.getType());
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @return the ProfileInner object if successful.
     */
    public ProfileInner beginCreate(String profileName, ProfileInner profile) {
        return beginCreateWithServiceResponseAsync(profileName, profile).toBlocking().single().getBody();
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ProfileInner> beginCreateAsync(String profileName, ProfileInner profile, final ServiceCallback<ProfileInner> serviceCallback) {
        return ServiceCall.create(beginCreateWithServiceResponseAsync(profileName, profile), serviceCallback);
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @return the observable to the ProfileInner object
     */
    public Observable<ProfileInner> beginCreateAsync(String profileName, ProfileInner profile) {
        return beginCreateWithServiceResponseAsync(profileName, profile).map(new Func1<ServiceResponse<ProfileInner>, ProfileInner>() {
            @Override
            public ProfileInner call(ServiceResponse<ProfileInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param profile Profile properties needed to create a new profile.
     * @return the observable to the ProfileInner object
     */
    public Observable<ServiceResponse<ProfileInner>> beginCreateWithServiceResponseAsync(String profileName, ProfileInner profile) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (profile == null) {
            throw new IllegalArgumentException("Parameter profile is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(profile);
        return service.beginCreate(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), profile, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<ProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProfileInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProfileInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ProfileInner, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ProfileInner>() { }.getType())
                .register(201, new TypeToken<ProfileInner>() { }.getType())
                .register(202, new TypeToken<ProfileInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @return the ProfileInner object if successful.
     */
    public ProfileInner update(String profileName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(profileName, tags).toBlocking().last().getBody();
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ProfileInner> updateAsync(String profileName, Map<String, String> tags, final ServiceCallback<ProfileInner> serviceCallback) {
        return ServiceCall.create(updateWithServiceResponseAsync(profileName, tags), serviceCallback);
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @return the observable for the request
     */
    public Observable<ProfileInner> updateAsync(String profileName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(profileName, tags).map(new Func1<ServiceResponse<ProfileInner>, ProfileInner>() {
            @Override
            public ProfileInner call(ServiceResponse<ProfileInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProfileInner>> updateWithServiceResponseAsync(String profileName, Map<String, String> tags) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (tags == null) {
            throw new IllegalArgumentException("Parameter tags is required and cannot be null.");
        }
        Validator.validate(tags);
        ProfileUpdateParameters profileUpdateParameters = new ProfileUpdateParameters();
        profileUpdateParameters.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), profileUpdateParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ProfileInner>() { }.getType());
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @return the ProfileInner object if successful.
     */
    public ProfileInner beginUpdate(String profileName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(profileName, tags).toBlocking().single().getBody();
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ProfileInner> beginUpdateAsync(String profileName, Map<String, String> tags, final ServiceCallback<ProfileInner> serviceCallback) {
        return ServiceCall.create(beginUpdateWithServiceResponseAsync(profileName, tags), serviceCallback);
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @return the observable to the ProfileInner object
     */
    public Observable<ProfileInner> beginUpdateAsync(String profileName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(profileName, tags).map(new Func1<ServiceResponse<ProfileInner>, ProfileInner>() {
            @Override
            public ProfileInner call(ServiceResponse<ProfileInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param tags Profile tags
     * @return the observable to the ProfileInner object
     */
    public Observable<ServiceResponse<ProfileInner>> beginUpdateWithServiceResponseAsync(String profileName, Map<String, String> tags) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (tags == null) {
            throw new IllegalArgumentException("Parameter tags is required and cannot be null.");
        }
        Validator.validate(tags);
        ProfileUpdateParameters profileUpdateParameters = new ProfileUpdateParameters();
        profileUpdateParameters.withTags(tags);
        return service.beginUpdate(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), profileUpdateParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<ProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProfileInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProfileInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ProfileInner, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ProfileInner>() { }.getType())
                .register(202, new TypeToken<ProfileInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     */
    public void delete(String profileName) {
        deleteWithServiceResponseAsync(profileName).toBlocking().last().getBody();
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAsync(String profileName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(profileName), serviceCallback);
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String profileName) {
        return deleteWithServiceResponseAsync(profileName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String profileName) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     */
    public void beginDelete(String profileName) {
        beginDeleteWithServiceResponseAsync(profileName).toBlocking().single().getBody();
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> beginDeleteAsync(String profileName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(beginDeleteWithServiceResponseAsync(profileName), serviceCallback);
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String profileName) {
        return beginDeleteWithServiceResponseAsync(profileName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all subresources including endpoints, origins and custom domains.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String profileName) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, ErrorResponseException>(this.client.mapperAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Generates a dynamic SSO URI used to sign in to the CDN supplemental portal. Supplemnetal portal is used to configure advanced feature capabilities that are not yet available in the Azure portal, such as core reports in a standard profile; rules engine, advanced HTTP reports, and real-time stats and alerts in a premium profile. The SSO URI changes approximately every 10 minutes.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the SsoUriInner object if successful.
     */
    public SsoUriInner generateSsoUri(String profileName) {
        return generateSsoUriWithServiceResponseAsync(profileName).toBlocking().single().getBody();
    }

    /**
     * Generates a dynamic SSO URI used to sign in to the CDN supplemental portal. Supplemnetal portal is used to configure advanced feature capabilities that are not yet available in the Azure portal, such as core reports in a standard profile; rules engine, advanced HTTP reports, and real-time stats and alerts in a premium profile. The SSO URI changes approximately every 10 minutes.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SsoUriInner> generateSsoUriAsync(String profileName, final ServiceCallback<SsoUriInner> serviceCallback) {
        return ServiceCall.create(generateSsoUriWithServiceResponseAsync(profileName), serviceCallback);
    }

    /**
     * Generates a dynamic SSO URI used to sign in to the CDN supplemental portal. Supplemnetal portal is used to configure advanced feature capabilities that are not yet available in the Azure portal, such as core reports in a standard profile; rules engine, advanced HTTP reports, and real-time stats and alerts in a premium profile. The SSO URI changes approximately every 10 minutes.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the observable to the SsoUriInner object
     */
    public Observable<SsoUriInner> generateSsoUriAsync(String profileName) {
        return generateSsoUriWithServiceResponseAsync(profileName).map(new Func1<ServiceResponse<SsoUriInner>, SsoUriInner>() {
            @Override
            public SsoUriInner call(ServiceResponse<SsoUriInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Generates a dynamic SSO URI used to sign in to the CDN supplemental portal. Supplemnetal portal is used to configure advanced feature capabilities that are not yet available in the Azure portal, such as core reports in a standard profile; rules engine, advanced HTTP reports, and real-time stats and alerts in a premium profile. The SSO URI changes approximately every 10 minutes.
     *
     * @param profileName Name of the CDN profile which is unique within the resource group.
     * @return the observable to the SsoUriInner object
     */
    public Observable<ServiceResponse<SsoUriInner>> generateSsoUriWithServiceResponseAsync(String profileName) {
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (profileName == null) {
            throw new IllegalArgumentException("Parameter profileName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.generateSsoUri(this.client.resourceGroupName(), profileName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SsoUriInner>>>() {
                @Override
                public Observable<ServiceResponse<SsoUriInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SsoUriInner> clientResponse = generateSsoUriDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SsoUriInner> generateSsoUriDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SsoUriInner, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SsoUriInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ProfileInner&gt; object if successful.
     */
    public PagedList<ProfileInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ProfileInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProfileInner>(response.getBody()) {
            @Override
            public Page<ProfileInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ProfileInner>> listNextAsync(final String nextPageLink, final ServiceCall<List<ProfileInner>> serviceCall, final ListOperationCallback<ProfileInner> serviceCallback) {
        return AzureServiceCall.create(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<Page<ProfileInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProfileInner>>, Page<ProfileInner>>() {
                @Override
                public Page<ProfileInner> call(ServiceResponse<Page<ProfileInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProfileInner>>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(ServiceResponse<Page<ProfileInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the CDN profiles within an Azure subscription.
     *
    ServiceResponse<PageImpl<ProfileInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ProfileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProfileInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProfileInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProfileInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ProfileInner>, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ProfileInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ProfileInner&gt; object if successful.
     */
    public PagedList<ProfileInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ProfileInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProfileInner>(response.getBody()) {
            @Override
            public Page<ProfileInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ProfileInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceCall<List<ProfileInner>> serviceCall, final ListOperationCallback<ProfileInner> serviceCallback) {
        return AzureServiceCall.create(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<Page<ProfileInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProfileInner>>, Page<ProfileInner>>() {
                @Override
                public Page<ProfileInner> call(ServiceResponse<Page<ProfileInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ProfileInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProfileInner>>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(ServiceResponse<Page<ProfileInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the CDN profiles within a resource group.
     *
    ServiceResponse<PageImpl<ProfileInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ProfileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProfileInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listByResourceGroupNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProfileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProfileInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProfileInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProfileInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ProfileInner>, ErrorResponseException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ProfileInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
