/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.implementation;

import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.ServiceUnitResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.DeploymentMode;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.ServiceUnitArtifacts;

class ServiceUnitResourceImpl extends CreatableUpdatableImpl<ServiceUnitResource, ServiceUnitResourceInner, ServiceUnitResourceImpl> implements ServiceUnitResource, ServiceUnitResource.Definition, ServiceUnitResource.Update {
    private final DeploymentManagerManager manager;
    private String resourceGroupName;
    private String serviceTopologyName;
    private String serviceName;
    private String serviceUnitName;

    ServiceUnitResourceImpl(String name, DeploymentManagerManager manager) {
        super(name, new ServiceUnitResourceInner());
        this.manager = manager;
        // Set resource name
        this.serviceUnitName = name;
        //
    }

    ServiceUnitResourceImpl(ServiceUnitResourceInner inner, DeploymentManagerManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.serviceUnitName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceTopologyName = IdParsingUtils.getValueFromIdByName(inner.id(), "serviceTopologies");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "services");
        this.serviceUnitName = IdParsingUtils.getValueFromIdByName(inner.id(), "serviceUnits");
        //
    }

    @Override
    public DeploymentManagerManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServiceUnitResource> createResourceAsync() {
        ServiceUnitsInner client = this.manager().inner().serviceUnits();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceTopologyName, this.serviceName, this.serviceUnitName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ServiceUnitResource> updateResourceAsync() {
        ServiceUnitsInner client = this.manager().inner().serviceUnits();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceTopologyName, this.serviceName, this.serviceUnitName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ServiceUnitResourceInner> getInnerAsync() {
        ServiceUnitsInner client = this.manager().inner().serviceUnits();
        return client.getAsync(this.resourceGroupName, this.serviceTopologyName, this.serviceName, this.serviceUnitName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public ServiceUnitArtifacts artifacts() {
        return this.inner().artifacts();
    }

    @Override
    public DeploymentMode deploymentMode() {
        return this.inner().deploymentMode();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String targetResourceGroup() {
        return this.inner().targetResourceGroup();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ServiceUnitResourceImpl withExistingService(String resourceGroupName, String serviceTopologyName, String serviceName) {
        this.resourceGroupName = resourceGroupName;
        this.serviceTopologyName = serviceTopologyName;
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public ServiceUnitResourceImpl withDeploymentMode(DeploymentMode deploymentMode) {
        this.inner().withDeploymentMode(deploymentMode);
        return this;
    }

    @Override
    public ServiceUnitResourceImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ServiceUnitResourceImpl withTargetResourceGroup(String targetResourceGroup) {
        this.inner().withTargetResourceGroup(targetResourceGroup);
        return this;
    }

    @Override
    public ServiceUnitResourceImpl withArtifacts(ServiceUnitArtifacts artifacts) {
        this.inner().withArtifacts(artifacts);
        return this;
    }

    @Override
    public ServiceUnitResourceImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
