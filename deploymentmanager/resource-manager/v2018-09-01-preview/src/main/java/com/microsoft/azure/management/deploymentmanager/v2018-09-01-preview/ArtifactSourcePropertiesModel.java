/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties that define the source location where the artifacts are
 * located.
 */
public class ArtifactSourcePropertiesModel {
    /**
     * The type of artifact source used.
     */
    @JsonProperty(value = "sourceType", required = true)
    private String sourceType;

    /**
     * The path from the location that the 'authentication' property [say, a
     * SAS URI to the blob container] refers to, to the location of the
     * artifacts. This can be used to differentiate different versions of the
     * artifacts. Or, different types of artifacts like binaries or templates.
     * The location referenced by the authentication property concatenated with
     * this optional artifactRoot path forms the artifact source location where
     * the artifacts are expected to be found.
     */
    @JsonProperty(value = "artifactRoot")
    private String artifactRoot;

    /**
     * The authentication method to use to access the artifact source.
     */
    @JsonProperty(value = "authentication", required = true)
    private Authentication authentication;

    /**
     * Get the type of artifact source used.
     *
     * @return the sourceType value
     */
    public String sourceType() {
        return this.sourceType;
    }

    /**
     * Set the type of artifact source used.
     *
     * @param sourceType the sourceType value to set
     * @return the ArtifactSourcePropertiesModel object itself.
     */
    public ArtifactSourcePropertiesModel withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
     *
     * @return the artifactRoot value
     */
    public String artifactRoot() {
        return this.artifactRoot;
    }

    /**
     * Set the path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
     *
     * @param artifactRoot the artifactRoot value to set
     * @return the ArtifactSourcePropertiesModel object itself.
     */
    public ArtifactSourcePropertiesModel withArtifactRoot(String artifactRoot) {
        this.artifactRoot = artifactRoot;
        return this;
    }

    /**
     * Get the authentication method to use to access the artifact source.
     *
     * @return the authentication value
     */
    public Authentication authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication method to use to access the artifact source.
     *
     * @param authentication the authentication value to set
     * @return the ArtifactSourcePropertiesModel object itself.
     */
    public ArtifactSourcePropertiesModel withAuthentication(Authentication authentication) {
        this.authentication = authentication;
        return this;
    }

}
