/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.ServiceTopologies;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.Services;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.ServiceUnits;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.Steps;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.Rollouts;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.ArtifactSources;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.Operations;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure DeploymentManager resource management.
 */
public final class DeploymentManagerManager extends ManagerCore<DeploymentManagerManager, AzureDeploymentManagerImpl> {
    private ServiceTopologies serviceTopologies;
    private Services services;
    private ServiceUnits serviceUnits;
    private Steps steps;
    private Rollouts rollouts;
    private ArtifactSources artifactSources;
    private Operations operations;
    /**
    * Get a Configurable instance that can be used to create DeploymentManagerManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new DeploymentManagerManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of DeploymentManagerManager that exposes DeploymentManager resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the DeploymentManagerManager
    */
    public static DeploymentManagerManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new DeploymentManagerManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of DeploymentManagerManager that exposes DeploymentManager resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the DeploymentManagerManager
    */
    public static DeploymentManagerManager authenticate(RestClient restClient, String subscriptionId) {
        return new DeploymentManagerManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of DeploymentManagerManager that exposes DeploymentManager management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing DeploymentManager management API entry points that work across subscriptions
        */
        DeploymentManagerManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage ServiceTopologies.
     */
    public ServiceTopologies serviceTopologies() {
        if (this.serviceTopologies == null) {
            this.serviceTopologies = new ServiceTopologiesImpl(this);
        }
        return this.serviceTopologies;
    }

    /**
     * @return Entry point to manage Services.
     */
    public Services services() {
        if (this.services == null) {
            this.services = new ServicesImpl(this);
        }
        return this.services;
    }

    /**
     * @return Entry point to manage ServiceUnits.
     */
    public ServiceUnits serviceUnits() {
        if (this.serviceUnits == null) {
            this.serviceUnits = new ServiceUnitsImpl(this);
        }
        return this.serviceUnits;
    }

    /**
     * @return Entry point to manage Steps.
     */
    public Steps steps() {
        if (this.steps == null) {
            this.steps = new StepsImpl(this);
        }
        return this.steps;
    }

    /**
     * @return Entry point to manage Rollouts.
     */
    public Rollouts rollouts() {
        if (this.rollouts == null) {
            this.rollouts = new RolloutsImpl(this);
        }
        return this.rollouts;
    }

    /**
     * @return Entry point to manage ArtifactSources.
     */
    public ArtifactSources artifactSources() {
        if (this.artifactSources == null) {
            this.artifactSources = new ArtifactSourcesImpl(this);
        }
        return this.artifactSources;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public DeploymentManagerManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return DeploymentManagerManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private DeploymentManagerManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new AzureDeploymentManagerImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
