/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.Operations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.deploymentmanager.v2018-09-01-preview.Operation;

class OperationsImpl extends WrapperImpl<OperationsInner> implements Operations {
    private PagedListConverter<OperationInner, Operation> converter;
    private final DeploymentManagerManager manager;

    OperationsImpl(DeploymentManagerManager manager) {
        super(manager.inner().operations());
        this.manager = manager;
        this.converter = new PagedListConverter<OperationInner, Operation>() {
            @Override
            public Observable<Operation> typeConvertAsync(OperationInner inner) {
                return Observable.just((Operation) wrapModel(inner));
            }
        };
    }

    public DeploymentManagerManager manager() {
        return this.manager;
    }

    private OperationImpl wrapModel(OperationInner inner) {
        return  new OperationImpl(inner, manager());
    }

    @Override
    public PagedList<Operation> list() {
        OperationsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<Operation> listAsync() {
        OperationsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<OperationInner>, Observable<OperationInner>>() {
            @Override
            public Observable<OperationInner> call(Page<OperationInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<OperationInner, Operation>() {
            @Override
            public Operation call(OperationInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
