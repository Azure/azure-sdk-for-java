/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.AuthenticationDetails;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusterPatch;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ConnectedClusters.
 */
public class ConnectedClustersInner implements InnerSupportsGet<ConnectedClusterInner>, InnerSupportsDelete<Void>, InnerSupportsListing<ConnectedClusterInner> {
    /** The Retrofit service to perform REST calls. */
    private ConnectedClustersService service;
    /** The service client containing this operation class. */
    private HybridKubernetesManagementClientImpl client;

    /**
     * Initializes an instance of ConnectedClustersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConnectedClustersInner(Retrofit retrofit, HybridKubernetesManagementClientImpl client) {
        this.service = retrofit.create(ConnectedClustersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ConnectedClusters to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConnectedClustersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters create" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Body ConnectedClusterInner connectedCluster, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Body ConnectedClusterInner connectedCluster, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters update" })
        @PATCH("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Body ConnectedClusterPatch connectedClusterPatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters listClusterUserCredentials" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}/listClusterUserCredentials")
        Observable<Response<ResponseBody>> listClusterUserCredentials(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Body AuthenticationDetails clientAuthenticationDetails, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Kubernetes/connectedClusters")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusters listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedClusterInner object if successful.
     */
    public ConnectedClusterInner create(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, connectedCluster).toBlocking().last().body();
    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedClusterInner> createAsync(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster, final ServiceCallback<ConnectedClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, clusterName, connectedCluster), serviceCallback);
    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ConnectedClusterInner> createAsync(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, connectedCluster).map(new Func1<ServiceResponse<ConnectedClusterInner>, ConnectedClusterInner>() {
            @Override
            public ConnectedClusterInner call(ServiceResponse<ConnectedClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ConnectedClusterInner>> createWithServiceResponseAsync(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (connectedCluster == null) {
            throw new IllegalArgumentException("Parameter connectedCluster is required and cannot be null.");
        }
        Validator.validate(connectedCluster);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), connectedCluster, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ConnectedClusterInner>() { }.getType());
    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedClusterInner object if successful.
     */
    public ConnectedClusterInner beginCreate(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, connectedCluster).toBlocking().single().body();
    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedClusterInner> beginCreateAsync(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster, final ServiceCallback<ConnectedClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, connectedCluster), serviceCallback);
    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedClusterInner object
     */
    public Observable<ConnectedClusterInner> beginCreateAsync(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, connectedCluster).map(new Func1<ServiceResponse<ConnectedClusterInner>, ConnectedClusterInner>() {
            @Override
            public ConnectedClusterInner call(ServiceResponse<ConnectedClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Register a new Kubernetes cluster with Azure Resource Manager.
     * API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedCluster Parameters supplied to Create a Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedClusterInner object
     */
    public Observable<ServiceResponse<ConnectedClusterInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String clusterName, ConnectedClusterInner connectedCluster) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (connectedCluster == null) {
            throw new IllegalArgumentException("Parameter connectedCluster is required and cannot be null.");
        }
        Validator.validate(connectedCluster);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), connectedCluster, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectedClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectedClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectedClusterInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectedClusterInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectedClusterInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectedClusterInner>() { }.getType())
                .register(201, new TypeToken<ConnectedClusterInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates a connected cluster.
     * API to update certain properties of the connected cluster resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedClusterPatch Parameters supplied to update Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedClusterInner object if successful.
     */
    public ConnectedClusterInner update(String resourceGroupName, String clusterName, ConnectedClusterPatch connectedClusterPatch) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, connectedClusterPatch).toBlocking().single().body();
    }

    /**
     * Updates a connected cluster.
     * API to update certain properties of the connected cluster resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedClusterPatch Parameters supplied to update Connected Cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedClusterInner> updateAsync(String resourceGroupName, String clusterName, ConnectedClusterPatch connectedClusterPatch, final ServiceCallback<ConnectedClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, clusterName, connectedClusterPatch), serviceCallback);
    }

    /**
     * Updates a connected cluster.
     * API to update certain properties of the connected cluster resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedClusterPatch Parameters supplied to update Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedClusterInner object
     */
    public Observable<ConnectedClusterInner> updateAsync(String resourceGroupName, String clusterName, ConnectedClusterPatch connectedClusterPatch) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, connectedClusterPatch).map(new Func1<ServiceResponse<ConnectedClusterInner>, ConnectedClusterInner>() {
            @Override
            public ConnectedClusterInner call(ServiceResponse<ConnectedClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a connected cluster.
     * API to update certain properties of the connected cluster resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param connectedClusterPatch Parameters supplied to update Connected Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedClusterInner object
     */
    public Observable<ServiceResponse<ConnectedClusterInner>> updateWithServiceResponseAsync(String resourceGroupName, String clusterName, ConnectedClusterPatch connectedClusterPatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (connectedClusterPatch == null) {
            throw new IllegalArgumentException("Parameter connectedClusterPatch is required and cannot be null.");
        }
        Validator.validate(connectedClusterPatch);
        return service.update(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), connectedClusterPatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectedClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectedClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectedClusterInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectedClusterInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectedClusterInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectedClusterInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the properties of the specified connected cluster.
     * Returns the properties of the specified connected cluster, including name, identity, properties, and additional cluster details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedClusterInner object if successful.
     */
    public ConnectedClusterInner getByResourceGroup(String resourceGroupName, String clusterName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Get the properties of the specified connected cluster.
     * Returns the properties of the specified connected cluster, including name, identity, properties, and additional cluster details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedClusterInner> getByResourceGroupAsync(String resourceGroupName, String clusterName, final ServiceCallback<ConnectedClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Get the properties of the specified connected cluster.
     * Returns the properties of the specified connected cluster, including name, identity, properties, and additional cluster details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedClusterInner object
     */
    public Observable<ConnectedClusterInner> getByResourceGroupAsync(String resourceGroupName, String clusterName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<ConnectedClusterInner>, ConnectedClusterInner>() {
            @Override
            public ConnectedClusterInner call(ServiceResponse<ConnectedClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the properties of the specified connected cluster.
     * Returns the properties of the specified connected cluster, including name, identity, properties, and additional cluster details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedClusterInner object
     */
    public Observable<ServiceResponse<ConnectedClusterInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectedClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectedClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectedClusterInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectedClusterInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectedClusterInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectedClusterInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().last().body();
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String clusterName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String clusterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String clusterName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a connected cluster.
     * Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CredentialResultsInner object if successful.
     */
    public CredentialResultsInner listClusterUserCredentials(String resourceGroupName, String clusterName) {
        return listClusterUserCredentialsWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CredentialResultsInner> listClusterUserCredentialsAsync(String resourceGroupName, String clusterName, final ServiceCallback<CredentialResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listClusterUserCredentialsWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResultsInner object
     */
    public Observable<CredentialResultsInner> listClusterUserCredentialsAsync(String resourceGroupName, String clusterName) {
        return listClusterUserCredentialsWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<CredentialResultsInner>, CredentialResultsInner>() {
            @Override
            public CredentialResultsInner call(ServiceResponse<CredentialResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResultsInner object
     */
    public Observable<ServiceResponse<CredentialResultsInner>> listClusterUserCredentialsWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final AuthenticationDetails clientAuthenticationDetails = null;
        return service.listClusterUserCredentials(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), clientAuthenticationDetails, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CredentialResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<CredentialResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CredentialResultsInner> clientResponse = listClusterUserCredentialsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param clientAuthenticationDetails Authentication parameters supplied by the user to fetch credentials for accessing the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CredentialResultsInner object if successful.
     */
    public CredentialResultsInner listClusterUserCredentials(String resourceGroupName, String clusterName, AuthenticationDetails clientAuthenticationDetails) {
        return listClusterUserCredentialsWithServiceResponseAsync(resourceGroupName, clusterName, clientAuthenticationDetails).toBlocking().single().body();
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param clientAuthenticationDetails Authentication parameters supplied by the user to fetch credentials for accessing the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CredentialResultsInner> listClusterUserCredentialsAsync(String resourceGroupName, String clusterName, AuthenticationDetails clientAuthenticationDetails, final ServiceCallback<CredentialResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listClusterUserCredentialsWithServiceResponseAsync(resourceGroupName, clusterName, clientAuthenticationDetails), serviceCallback);
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param clientAuthenticationDetails Authentication parameters supplied by the user to fetch credentials for accessing the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResultsInner object
     */
    public Observable<CredentialResultsInner> listClusterUserCredentialsAsync(String resourceGroupName, String clusterName, AuthenticationDetails clientAuthenticationDetails) {
        return listClusterUserCredentialsWithServiceResponseAsync(resourceGroupName, clusterName, clientAuthenticationDetails).map(new Func1<ServiceResponse<CredentialResultsInner>, CredentialResultsInner>() {
            @Override
            public CredentialResultsInner call(ServiceResponse<CredentialResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets cluster user credentials of a connected cluster.
     * Gets cluster user credentials of the connected cluster with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kubernetes cluster on which get is called.
     * @param clientAuthenticationDetails Authentication parameters supplied by the user to fetch credentials for accessing the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResultsInner object
     */
    public Observable<ServiceResponse<CredentialResultsInner>> listClusterUserCredentialsWithServiceResponseAsync(String resourceGroupName, String clusterName, AuthenticationDetails clientAuthenticationDetails) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(clientAuthenticationDetails);
        return service.listClusterUserCredentials(this.client.subscriptionId(), resourceGroupName, clusterName, this.client.apiVersion(), clientAuthenticationDetails, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CredentialResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<CredentialResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CredentialResultsInner> clientResponse = listClusterUserCredentialsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CredentialResultsInner> listClusterUserCredentialsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CredentialResultsInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CredentialResultsInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectedClusterInner&gt; object if successful.
     */
    public PagedList<ConnectedClusterInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ConnectedClusterInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ConnectedClusterInner>(response.body()) {
            @Override
            public Page<ConnectedClusterInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectedClusterInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ConnectedClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<Page<ConnectedClusterInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Page<ConnectedClusterInner>>() {
                @Override
                public Page<ConnectedClusterInner> call(ServiceResponse<Page<ConnectedClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(ServiceResponse<Page<ConnectedClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
    ServiceResponse<PageImpl<ConnectedClusterInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectedClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectedClusterInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectedClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectedClusterInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectedClusterInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectedClusterInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectedClusterInner&gt; object if successful.
     */
    public PagedList<ConnectedClusterInner> list() {
        ServiceResponse<Page<ConnectedClusterInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ConnectedClusterInner>(response.body()) {
            @Override
            public Page<ConnectedClusterInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectedClusterInner>> listAsync(final ListOperationCallback<ConnectedClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<Page<ConnectedClusterInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Page<ConnectedClusterInner>>() {
                @Override
                public Page<ConnectedClusterInner> call(ServiceResponse<Page<ConnectedClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(ServiceResponse<Page<ConnectedClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectedClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectedClusterInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectedClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectedClusterInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectedClusterInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectedClusterInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectedClusterInner&gt; object if successful.
     */
    public PagedList<ConnectedClusterInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ConnectedClusterInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConnectedClusterInner>(response.body()) {
            @Override
            public Page<ConnectedClusterInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectedClusterInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ConnectedClusterInner>> serviceFuture, final ListOperationCallback<ConnectedClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<Page<ConnectedClusterInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Page<ConnectedClusterInner>>() {
                @Override
                public Page<ConnectedClusterInner> call(ServiceResponse<Page<ConnectedClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(ServiceResponse<Page<ConnectedClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Resource Group.
     *
    ServiceResponse<PageImpl<ConnectedClusterInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectedClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectedClusterInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectedClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectedClusterInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectedClusterInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectedClusterInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectedClusterInner&gt; object if successful.
     */
    public PagedList<ConnectedClusterInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ConnectedClusterInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConnectedClusterInner>(response.body()) {
            @Override
            public Page<ConnectedClusterInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectedClusterInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ConnectedClusterInner>> serviceFuture, final ListOperationCallback<ConnectedClusterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<Page<ConnectedClusterInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Page<ConnectedClusterInner>>() {
                @Override
                public Page<ConnectedClusterInner> call(ServiceResponse<Page<ConnectedClusterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedClusterInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConnectedClusterInner>>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(ServiceResponse<Page<ConnectedClusterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all connected clusters.
     * API to enumerate registered connected K8s clusters under a Subscription.
     *
    ServiceResponse<PageImpl<ConnectedClusterInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectedClusterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectedClusterInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectedClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectedClusterInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectedClusterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectedClusterInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectedClusterInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectedClusterInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
