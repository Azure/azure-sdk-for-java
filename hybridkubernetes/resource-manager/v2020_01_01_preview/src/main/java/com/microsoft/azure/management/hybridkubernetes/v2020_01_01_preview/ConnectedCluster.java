/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.implementation.KubernetesManager;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.implementation.ConnectedClusterInner;

/**
 * Type representing ConnectedCluster.
 */
public interface ConnectedCluster extends HasInner<ConnectedClusterInner>, Resource, GroupableResourceCore<KubernetesManager, ConnectedClusterInner>, HasResourceGroup, Refreshable<ConnectedCluster>, Updatable<ConnectedCluster.Update>, HasManager<KubernetesManager> {
    /**
     * @return the aadProfile value.
     */
    ConnectedClusterAADProfile aadProfile();

    /**
     * @return the agentPublicKeyCertificate value.
     */
    String agentPublicKeyCertificate();

    /**
     * @return the agentVersion value.
     */
    String agentVersion();

    /**
     * @return the identity value.
     */
    ConnectedClusterIdentity identity();

    /**
     * @return the kubernetesVersion value.
     */
    String kubernetesVersion();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the totalNodeCount value.
     */
    Integer totalNodeCount();

    /**
     * The entirety of the ConnectedCluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithAadProfile, DefinitionStages.WithAgentPublicKeyCertificate, DefinitionStages.WithIdentity, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ConnectedCluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ConnectedCluster definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the ConnectedCluster definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithAadProfile> {
        }

        /**
         * The stage of the connectedcluster definition allowing to specify AadProfile.
         */
        interface WithAadProfile {
           /**
            * Specifies aadProfile.
            * @param aadProfile the aadProfile parameter value
            * @return the next definition stage
*/
            WithAgentPublicKeyCertificate withAadProfile(ConnectedClusterAADProfile aadProfile);
        }

        /**
         * The stage of the connectedcluster definition allowing to specify AgentPublicKeyCertificate.
         */
        interface WithAgentPublicKeyCertificate {
           /**
            * Specifies agentPublicKeyCertificate.
            * @param agentPublicKeyCertificate Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure
            * @return the next definition stage
*/
            WithIdentity withAgentPublicKeyCertificate(String agentPublicKeyCertificate);
        }

        /**
         * The stage of the connectedcluster definition allowing to specify Identity.
         */
        interface WithIdentity {
           /**
            * Specifies identity.
            * @param identity The identity of the connected cluster
            * @return the next definition stage
*/
            WithCreate withIdentity(ConnectedClusterIdentity identity);
        }

        /**
         * The stage of the connectedcluster definition allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Provisioning', 'Updating', 'Deleting', 'Accepted'
             * @return the next definition stage
             */
            WithCreate withProvisioningState(ProvisioningState provisioningState);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ConnectedCluster>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithProvisioningState {
        }
    }
    /**
     * The template for a ConnectedCluster update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ConnectedCluster>, Resource.UpdateWithTags<Update>, UpdateStages.WithAgentPublicKeyCertificate {
    }

    /**
     * Grouping of ConnectedCluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the connectedcluster update allowing to specify AgentPublicKeyCertificate.
         */
        interface WithAgentPublicKeyCertificate {
            /**
             * Specifies agentPublicKeyCertificate.
             * @param agentPublicKeyCertificate Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure
             * @return the next update stage
             */
            Update withAgentPublicKeyCertificate(String agentPublicKeyCertificate);
        }

    }
}
