/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.servicebus.v2017_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.servicebus.v2017_04_01.Topics;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.servicebus.v2017_04_01.SBTopic;
import com.microsoft.azure.management.servicebus.v2017_04_01.TopicNamespaceSBAuthorizationRule;
import com.microsoft.azure.management.servicebus.v2017_04_01.AccessKeys;
import com.microsoft.azure.management.servicebus.v2017_04_01.RegenerateAccessKeyParameters;

class TopicsImpl extends WrapperImpl<TopicsInner> implements Topics {
    private final ServiceBusManager manager;

    TopicsImpl(ServiceBusManager manager) {
        super(manager.inner().topics());
        this.manager = manager;
    }

    public ServiceBusManager manager() {
        return this.manager;
    }

    @Override
    public SBTopicImpl define(String name) {
        return wrapModel(name);
    }

    private SBTopicImpl wrapModel(SBTopicInner inner) {
        return  new SBTopicImpl(inner, manager());
    }

    private SBTopicImpl wrapModel(String name) {
        return new SBTopicImpl(name, this.manager());
    }

    @Override
    public Observable<SBTopic> listByNamespaceAsync(final String resourceGroupName, final String namespaceName) {
        TopicsInner client = this.inner();
        return client.listByNamespaceAsync(resourceGroupName, namespaceName)
        .flatMapIterable(new Func1<Page<SBTopicInner>, Iterable<SBTopicInner>>() {
            @Override
            public Iterable<SBTopicInner> call(Page<SBTopicInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SBTopicInner, SBTopic>() {
            @Override
            public SBTopic call(SBTopicInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<SBTopic> getAsync(String resourceGroupName, String namespaceName, String topicName) {
        TopicsInner client = this.inner();
        return client.getAsync(resourceGroupName, namespaceName, topicName)
        .map(new Func1<SBTopicInner, SBTopic>() {
            @Override
            public SBTopic call(SBTopicInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String namespaceName, String topicName) {
        TopicsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, namespaceName, topicName).toCompletable();
    }

    @Override
    public TopicNamespaceSBAuthorizationRuleImpl defineAuthorizationRule(String name) {
        return wrapAuthorizationRuleModel(name);
    }

    private TopicNamespaceSBAuthorizationRuleImpl wrapAuthorizationRuleModel(String name) {
        return new TopicNamespaceSBAuthorizationRuleImpl(name, this.manager());
    }

    private TopicNamespaceSBAuthorizationRuleImpl wrapTopicNamespaceSBAuthorizationRuleModel(SBAuthorizationRuleInner inner) {
        return  new TopicNamespaceSBAuthorizationRuleImpl(inner, manager());
    }

    private Observable<SBAuthorizationRuleInner> getSBAuthorizationRuleInnerUsingTopicsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String namespaceName = IdParsingUtils.getValueFromIdByName(id, "namespaces");
        String topicName = IdParsingUtils.getValueFromIdByName(id, "topics");
        String authorizationRuleName = IdParsingUtils.getValueFromIdByName(id, "authorizationRules");
        TopicsInner client = this.inner();
        return client.getAuthorizationRuleAsync(resourceGroupName, namespaceName, topicName, authorizationRuleName);
    }

    @Override
    public Observable<TopicNamespaceSBAuthorizationRule> getAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName) {
        TopicsInner client = this.inner();
        return client.getAuthorizationRuleAsync(resourceGroupName, namespaceName, topicName, authorizationRuleName)
        .map(new Func1<SBAuthorizationRuleInner, TopicNamespaceSBAuthorizationRule>() {
            @Override
            public TopicNamespaceSBAuthorizationRule call(SBAuthorizationRuleInner inner) {
                return wrapTopicNamespaceSBAuthorizationRuleModel(inner);
            }
       });
    }

    @Override
    public Observable<TopicNamespaceSBAuthorizationRule> listAuthorizationRulesAsync(final String resourceGroupName, final String namespaceName, final String topicName) {
        TopicsInner client = this.inner();
        return client.listAuthorizationRulesAsync(resourceGroupName, namespaceName, topicName)
        .flatMapIterable(new Func1<Page<SBAuthorizationRuleInner>, Iterable<SBAuthorizationRuleInner>>() {
            @Override
            public Iterable<SBAuthorizationRuleInner> call(Page<SBAuthorizationRuleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SBAuthorizationRuleInner, TopicNamespaceSBAuthorizationRule>() {
            @Override
            public TopicNamespaceSBAuthorizationRule call(SBAuthorizationRuleInner inner) {
                return wrapTopicNamespaceSBAuthorizationRuleModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName) {
        TopicsInner client = this.inner();
        return client.deleteAuthorizationRuleAsync(resourceGroupName, namespaceName, topicName, authorizationRuleName).toCompletable();
    }

    @Override
    public Observable<AccessKeys> listKeysAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName) {
        TopicsInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, namespaceName, topicName, authorizationRuleName)
        .map(new Func1<AccessKeysInner, AccessKeys>() {
            @Override
            public AccessKeys call(AccessKeysInner inner) {
                return new AccessKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AccessKeys> regenerateKeysAsync(String resourceGroupName, String namespaceName, String topicName, String authorizationRuleName, RegenerateAccessKeyParameters parameters) {
        TopicsInner client = this.inner();
        return client.regenerateKeysAsync(resourceGroupName, namespaceName, topicName, authorizationRuleName, parameters)
        .map(new Func1<AccessKeysInner, AccessKeys>() {
            @Override
            public AccessKeys call(AccessKeysInner inner) {
                return new AccessKeysImpl(inner, manager());
            }
        });
    }

}
