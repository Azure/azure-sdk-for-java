/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicebus.v2015_08_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.servicebus.v2015_08_01.implementation.SubscriptionResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.servicebus.v2015_08_01.implementation.ServiceBusManager;
import org.joda.time.DateTime;

/**
 * Type representing SubscriptionResource.
 */
public interface SubscriptionResource extends HasInner<SubscriptionResourceInner>, Indexable, Refreshable<SubscriptionResource>, Updatable<SubscriptionResource.Update>, HasManager<ServiceBusManager> {
    /**
     * @return the accessedAt value.
     */
    DateTime accessedAt();

    /**
     * @return the autoDeleteOnIdle value.
     */
    String autoDeleteOnIdle();

    /**
     * @return the countDetails value.
     */
    MessageCountDetails countDetails();

    /**
     * @return the createdAt value.
     */
    DateTime createdAt();

    /**
     * @return the deadLetteringOnFilterEvaluationExceptions value.
     */
    Boolean deadLetteringOnFilterEvaluationExceptions();

    /**
     * @return the deadLetteringOnMessageExpiration value.
     */
    Boolean deadLetteringOnMessageExpiration();

    /**
     * @return the defaultMessageTimeToLive value.
     */
    String defaultMessageTimeToLive();

    /**
     * @return the enableBatchedOperations value.
     */
    Boolean enableBatchedOperations();

    /**
     * @return the entityAvailabilityStatus value.
     */
    EntityAvailabilityStatus entityAvailabilityStatus();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the isReadOnly value.
     */
    Boolean isReadOnly();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the lockDuration value.
     */
    String lockDuration();

    /**
     * @return the maxDeliveryCount value.
     */
    Integer maxDeliveryCount();

    /**
     * @return the messageCount value.
     */
    Long messageCount();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the requiresSession value.
     */
    Boolean requiresSession();

    /**
     * @return the status value.
     */
    EntityStatus status();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the updatedAt value.
     */
    DateTime updatedAt();

    /**
     * The entirety of the SubscriptionResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithTopic, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of SubscriptionResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a SubscriptionResource definition.
         */
        interface Blank extends WithTopic {
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify Topic.
         */
        interface WithTopic {
           /**
            * Specifies resourceGroupName, namespaceName, topicName.
            * @param resourceGroupName Name of the Resource group within the Azure subscription
            * @param namespaceName The namespace name
            * @param topicName The topic name
            * @return the next definition stage
            */
            WithLocation withExistingTopic(String resourceGroupName, String namespaceName, String topicName);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Subscription data center location
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify AutoDeleteOnIdle.
         */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies autoDeleteOnIdle.
             * @param autoDeleteOnIdle TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes
             * @return the next definition stage
             */
            WithCreate withAutoDeleteOnIdle(String autoDeleteOnIdle);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify DeadLetteringOnFilterEvaluationExceptions.
         */
        interface WithDeadLetteringOnFilterEvaluationExceptions {
            /**
             * Specifies deadLetteringOnFilterEvaluationExceptions.
             * @param deadLetteringOnFilterEvaluationExceptions Value that indicates whether a subscription has dead letter support on filter evaluation exceptions
             * @return the next definition stage
             */
            WithCreate withDeadLetteringOnFilterEvaluationExceptions(Boolean deadLetteringOnFilterEvaluationExceptions);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify DeadLetteringOnMessageExpiration.
         */
        interface WithDeadLetteringOnMessageExpiration {
            /**
             * Specifies deadLetteringOnMessageExpiration.
             * @param deadLetteringOnMessageExpiration Value that indicates whether a subscription has dead letter support when a message expires
             * @return the next definition stage
             */
            WithCreate withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify DefaultMessageTimeToLive.
         */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies defaultMessageTimeToLive.
             * @param defaultMessageTimeToLive Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself
             * @return the next definition stage
             */
            WithCreate withDefaultMessageTimeToLive(String defaultMessageTimeToLive);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify EnableBatchedOperations.
         */
        interface WithEnableBatchedOperations {
            /**
             * Specifies enableBatchedOperations.
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled
             * @return the next definition stage
             */
            WithCreate withEnableBatchedOperations(Boolean enableBatchedOperations);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify EntityAvailabilityStatus.
         */
        interface WithEntityAvailabilityStatus {
            /**
             * Specifies entityAvailabilityStatus.
             * @param entityAvailabilityStatus Entity availability status for the topic. Possible values include: 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown'
             * @return the next definition stage
             */
            WithCreate withEntityAvailabilityStatus(EntityAvailabilityStatus entityAvailabilityStatus);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify IsReadOnly.
         */
        interface WithIsReadOnly {
            /**
             * Specifies isReadOnly.
             * @param isReadOnly Value that indicates whether the entity description is read-only
             * @return the next definition stage
             */
            WithCreate withIsReadOnly(Boolean isReadOnly);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify LockDuration.
         */
        interface WithLockDuration {
            /**
             * Specifies lockDuration.
             * @param lockDuration The lock duration time span for the subscription
             * @return the next definition stage
             */
            WithCreate withLockDuration(String lockDuration);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify MaxDeliveryCount.
         */
        interface WithMaxDeliveryCount {
            /**
             * Specifies maxDeliveryCount.
             * @param maxDeliveryCount Number of maximum deliveries
             * @return the next definition stage
             */
            WithCreate withMaxDeliveryCount(Integer maxDeliveryCount);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify RequiresSession.
         */
        interface WithRequiresSession {
            /**
             * Specifies requiresSession.
             * @param requiresSession Value indicating if a subscription supports the concept of sessions
             * @return the next definition stage
             */
            WithCreate withRequiresSession(Boolean requiresSession);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status Enumerates the possible values for the status of a messaging entity. Possible values include: 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown'
             * @return the next definition stage
             */
            WithCreate withStatus(EntityStatus status);
        }

        /**
         * The stage of the subscriptionresource definition allowing to specify Type.
         */
        interface WithType {
            /**
             * Specifies type.
             * @param type Resource manager type of the resource
             * @return the next definition stage
             */
            WithCreate withType(String type);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<SubscriptionResource>, DefinitionStages.WithAutoDeleteOnIdle, DefinitionStages.WithDeadLetteringOnFilterEvaluationExceptions, DefinitionStages.WithDeadLetteringOnMessageExpiration, DefinitionStages.WithDefaultMessageTimeToLive, DefinitionStages.WithEnableBatchedOperations, DefinitionStages.WithEntityAvailabilityStatus, DefinitionStages.WithIsReadOnly, DefinitionStages.WithLockDuration, DefinitionStages.WithMaxDeliveryCount, DefinitionStages.WithRequiresSession, DefinitionStages.WithStatus, DefinitionStages.WithType {
        }
    }
    /**
     * The template for a SubscriptionResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<SubscriptionResource>, UpdateStages.WithAutoDeleteOnIdle, UpdateStages.WithDeadLetteringOnFilterEvaluationExceptions, UpdateStages.WithDeadLetteringOnMessageExpiration, UpdateStages.WithDefaultMessageTimeToLive, UpdateStages.WithEnableBatchedOperations, UpdateStages.WithEntityAvailabilityStatus, UpdateStages.WithIsReadOnly, UpdateStages.WithLockDuration, UpdateStages.WithMaxDeliveryCount, UpdateStages.WithRequiresSession, UpdateStages.WithStatus, UpdateStages.WithType {
    }

    /**
     * Grouping of SubscriptionResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the subscriptionresource update allowing to specify AutoDeleteOnIdle.
         */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies autoDeleteOnIdle.
             * @param autoDeleteOnIdle TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes
             * @return the next update stage
             */
            Update withAutoDeleteOnIdle(String autoDeleteOnIdle);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify DeadLetteringOnFilterEvaluationExceptions.
         */
        interface WithDeadLetteringOnFilterEvaluationExceptions {
            /**
             * Specifies deadLetteringOnFilterEvaluationExceptions.
             * @param deadLetteringOnFilterEvaluationExceptions Value that indicates whether a subscription has dead letter support on filter evaluation exceptions
             * @return the next update stage
             */
            Update withDeadLetteringOnFilterEvaluationExceptions(Boolean deadLetteringOnFilterEvaluationExceptions);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify DeadLetteringOnMessageExpiration.
         */
        interface WithDeadLetteringOnMessageExpiration {
            /**
             * Specifies deadLetteringOnMessageExpiration.
             * @param deadLetteringOnMessageExpiration Value that indicates whether a subscription has dead letter support when a message expires
             * @return the next update stage
             */
            Update withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify DefaultMessageTimeToLive.
         */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies defaultMessageTimeToLive.
             * @param defaultMessageTimeToLive Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself
             * @return the next update stage
             */
            Update withDefaultMessageTimeToLive(String defaultMessageTimeToLive);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify EnableBatchedOperations.
         */
        interface WithEnableBatchedOperations {
            /**
             * Specifies enableBatchedOperations.
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled
             * @return the next update stage
             */
            Update withEnableBatchedOperations(Boolean enableBatchedOperations);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify EntityAvailabilityStatus.
         */
        interface WithEntityAvailabilityStatus {
            /**
             * Specifies entityAvailabilityStatus.
             * @param entityAvailabilityStatus Entity availability status for the topic. Possible values include: 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown'
             * @return the next update stage
             */
            Update withEntityAvailabilityStatus(EntityAvailabilityStatus entityAvailabilityStatus);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify IsReadOnly.
         */
        interface WithIsReadOnly {
            /**
             * Specifies isReadOnly.
             * @param isReadOnly Value that indicates whether the entity description is read-only
             * @return the next update stage
             */
            Update withIsReadOnly(Boolean isReadOnly);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify LockDuration.
         */
        interface WithLockDuration {
            /**
             * Specifies lockDuration.
             * @param lockDuration The lock duration time span for the subscription
             * @return the next update stage
             */
            Update withLockDuration(String lockDuration);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify MaxDeliveryCount.
         */
        interface WithMaxDeliveryCount {
            /**
             * Specifies maxDeliveryCount.
             * @param maxDeliveryCount Number of maximum deliveries
             * @return the next update stage
             */
            Update withMaxDeliveryCount(Integer maxDeliveryCount);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify RequiresSession.
         */
        interface WithRequiresSession {
            /**
             * Specifies requiresSession.
             * @param requiresSession Value indicating if a subscription supports the concept of sessions
             * @return the next update stage
             */
            Update withRequiresSession(Boolean requiresSession);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status Enumerates the possible values for the status of a messaging entity. Possible values include: 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown'
             * @return the next update stage
             */
            Update withStatus(EntityStatus status);
        }

        /**
         * The stage of the subscriptionresource update allowing to specify Type.
         */
        interface WithType {
            /**
             * Specifies type.
             * @param type Resource manager type of the resource
             * @return the next update stage
             */
            Update withType(String type);
        }

    }
}
