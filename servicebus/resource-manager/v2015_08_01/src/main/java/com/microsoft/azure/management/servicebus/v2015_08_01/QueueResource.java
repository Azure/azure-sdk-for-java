/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicebus.v2015_08_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.servicebus.v2015_08_01.implementation.QueueResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.servicebus.v2015_08_01.implementation.ServiceBusManager;
import org.joda.time.DateTime;

/**
 * Type representing QueueResource.
 */
public interface QueueResource extends HasInner<QueueResourceInner>, Indexable, Refreshable<QueueResource>, Updatable<QueueResource.Update>, HasManager<ServiceBusManager> {
    /**
     * @return the accessedAt value.
     */
    DateTime accessedAt();

    /**
     * @return the autoDeleteOnIdle value.
     */
    String autoDeleteOnIdle();

    /**
     * @return the countDetails value.
     */
    MessageCountDetails countDetails();

    /**
     * @return the createdAt value.
     */
    DateTime createdAt();

    /**
     * @return the deadLetteringOnMessageExpiration value.
     */
    Boolean deadLetteringOnMessageExpiration();

    /**
     * @return the defaultMessageTimeToLive value.
     */
    String defaultMessageTimeToLive();

    /**
     * @return the duplicateDetectionHistoryTimeWindow value.
     */
    String duplicateDetectionHistoryTimeWindow();

    /**
     * @return the enableBatchedOperations value.
     */
    Boolean enableBatchedOperations();

    /**
     * @return the enableExpress value.
     */
    Boolean enableExpress();

    /**
     * @return the enablePartitioning value.
     */
    Boolean enablePartitioning();

    /**
     * @return the entityAvailabilityStatus value.
     */
    EntityAvailabilityStatus entityAvailabilityStatus();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the isAnonymousAccessible value.
     */
    Boolean isAnonymousAccessible();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the lockDuration value.
     */
    String lockDuration();

    /**
     * @return the maxDeliveryCount value.
     */
    Integer maxDeliveryCount();

    /**
     * @return the maxSizeInMegabytes value.
     */
    Long maxSizeInMegabytes();

    /**
     * @return the messageCount value.
     */
    Long messageCount();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the requiresDuplicateDetection value.
     */
    Boolean requiresDuplicateDetection();

    /**
     * @return the requiresSession value.
     */
    Boolean requiresSession();

    /**
     * @return the sizeInBytes value.
     */
    Long sizeInBytes();

    /**
     * @return the status value.
     */
    EntityStatus status();

    /**
     * @return the supportOrdering value.
     */
    Boolean supportOrdering();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the updatedAt value.
     */
    DateTime updatedAt();

    /**
     * The entirety of the QueueResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithNamespace, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of QueueResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a QueueResource definition.
         */
        interface Blank extends WithNamespace {
        }

        /**
         * The stage of the queueresource definition allowing to specify Namespace.
         */
        interface WithNamespace {
           /**
            * Specifies resourceGroupName, namespaceName.
            * @param resourceGroupName Name of the Resource group within the Azure subscription
            * @param namespaceName The namespace name
            * @return the next definition stage
            */
            WithLocation withExistingNamespace(String resourceGroupName, String namespaceName);
        }

        /**
         * The stage of the queueresource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location location of the resource
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the queueresource definition allowing to specify AutoDeleteOnIdle.
         */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies autoDeleteOnIdle.
             * @param autoDeleteOnIdle the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes
             * @return the next definition stage
             */
            WithCreate withAutoDeleteOnIdle(String autoDeleteOnIdle);
        }

        /**
         * The stage of the queueresource definition allowing to specify DeadLetteringOnMessageExpiration.
         */
        interface WithDeadLetteringOnMessageExpiration {
            /**
             * Specifies deadLetteringOnMessageExpiration.
             * @param deadLetteringOnMessageExpiration A value that indicates whether this queue has dead letter support when a message expires
             * @return the next definition stage
             */
            WithCreate withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration);
        }

        /**
         * The stage of the queueresource definition allowing to specify DefaultMessageTimeToLive.
         */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies defaultMessageTimeToLive.
             * @param defaultMessageTimeToLive The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself
             * @return the next definition stage
             */
            WithCreate withDefaultMessageTimeToLive(String defaultMessageTimeToLive);
        }

        /**
         * The stage of the queueresource definition allowing to specify DuplicateDetectionHistoryTimeWindow.
         */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies duplicateDetectionHistoryTimeWindow.
             * @param duplicateDetectionHistoryTimeWindow TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes
             * @return the next definition stage
             */
            WithCreate withDuplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow);
        }

        /**
         * The stage of the queueresource definition allowing to specify EnableBatchedOperations.
         */
        interface WithEnableBatchedOperations {
            /**
             * Specifies enableBatchedOperations.
             * @param enableBatchedOperations A value that indicates whether server-side batched operations are enabled
             * @return the next definition stage
             */
            WithCreate withEnableBatchedOperations(Boolean enableBatchedOperations);
        }

        /**
         * The stage of the queueresource definition allowing to specify EnableExpress.
         */
        interface WithEnableExpress {
            /**
             * Specifies enableExpress.
             * @param enableExpress A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage
             * @return the next definition stage
             */
            WithCreate withEnableExpress(Boolean enableExpress);
        }

        /**
         * The stage of the queueresource definition allowing to specify EnablePartitioning.
         */
        interface WithEnablePartitioning {
            /**
             * Specifies enablePartitioning.
             * @param enablePartitioning A value that indicates whether the queue is to be partitioned across multiple message brokers
             * @return the next definition stage
             */
            WithCreate withEnablePartitioning(Boolean enablePartitioning);
        }

        /**
         * The stage of the queueresource definition allowing to specify EntityAvailabilityStatus.
         */
        interface WithEntityAvailabilityStatus {
            /**
             * Specifies entityAvailabilityStatus.
             * @param entityAvailabilityStatus Entity availability status for the queue. Possible values include: 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown'
             * @return the next definition stage
             */
            WithCreate withEntityAvailabilityStatus(EntityAvailabilityStatus entityAvailabilityStatus);
        }

        /**
         * The stage of the queueresource definition allowing to specify IsAnonymousAccessible.
         */
        interface WithIsAnonymousAccessible {
            /**
             * Specifies isAnonymousAccessible.
             * @param isAnonymousAccessible A value that indicates whether the message is accessible anonymously
             * @return the next definition stage
             */
            WithCreate withIsAnonymousAccessible(Boolean isAnonymousAccessible);
        }

        /**
         * The stage of the queueresource definition allowing to specify LockDuration.
         */
        interface WithLockDuration {
            /**
             * Specifies lockDuration.
             * @param lockDuration The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute
             * @return the next definition stage
             */
            WithCreate withLockDuration(String lockDuration);
        }

        /**
         * The stage of the queueresource definition allowing to specify MaxDeliveryCount.
         */
        interface WithMaxDeliveryCount {
            /**
             * Specifies maxDeliveryCount.
             * @param maxDeliveryCount The maximum delivery count. A message is automatically deadlettered after this number of deliveries
             * @return the next definition stage
             */
            WithCreate withMaxDeliveryCount(Integer maxDeliveryCount);
        }

        /**
         * The stage of the queueresource definition allowing to specify MaxSizeInMegabytes.
         */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies maxSizeInMegabytes.
             * @param maxSizeInMegabytes The maximum size of the queue in megabytes, which is the size of memory allocated for the queue
             * @return the next definition stage
             */
            WithCreate withMaxSizeInMegabytes(Long maxSizeInMegabytes);
        }

        /**
         * The stage of the queueresource definition allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name Queue name
             * @return the next definition stage
             */
            WithCreate withName(String name);
        }

        /**
         * The stage of the queueresource definition allowing to specify RequiresDuplicateDetection.
         */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies requiresDuplicateDetection.
             * @param requiresDuplicateDetection A value indicating if this queue requires duplicate detection
             * @return the next definition stage
             */
            WithCreate withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }

        /**
         * The stage of the queueresource definition allowing to specify RequiresSession.
         */
        interface WithRequiresSession {
            /**
             * Specifies requiresSession.
             * @param requiresSession A value that indicates whether the queue supports the concept of sessions
             * @return the next definition stage
             */
            WithCreate withRequiresSession(Boolean requiresSession);
        }

        /**
         * The stage of the queueresource definition allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status Enumerates the possible values for the status of a messaging entity. Possible values include: 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown'
             * @return the next definition stage
             */
            WithCreate withStatus(EntityStatus status);
        }

        /**
         * The stage of the queueresource definition allowing to specify SupportOrdering.
         */
        interface WithSupportOrdering {
            /**
             * Specifies supportOrdering.
             * @param supportOrdering A value that indicates whether the queue supports ordering
             * @return the next definition stage
             */
            WithCreate withSupportOrdering(Boolean supportOrdering);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<QueueResource>, DefinitionStages.WithAutoDeleteOnIdle, DefinitionStages.WithDeadLetteringOnMessageExpiration, DefinitionStages.WithDefaultMessageTimeToLive, DefinitionStages.WithDuplicateDetectionHistoryTimeWindow, DefinitionStages.WithEnableBatchedOperations, DefinitionStages.WithEnableExpress, DefinitionStages.WithEnablePartitioning, DefinitionStages.WithEntityAvailabilityStatus, DefinitionStages.WithIsAnonymousAccessible, DefinitionStages.WithLockDuration, DefinitionStages.WithMaxDeliveryCount, DefinitionStages.WithMaxSizeInMegabytes, DefinitionStages.WithName, DefinitionStages.WithRequiresDuplicateDetection, DefinitionStages.WithRequiresSession, DefinitionStages.WithStatus, DefinitionStages.WithSupportOrdering {
        }
    }
    /**
     * The template for a QueueResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<QueueResource>, UpdateStages.WithAutoDeleteOnIdle, UpdateStages.WithDeadLetteringOnMessageExpiration, UpdateStages.WithDefaultMessageTimeToLive, UpdateStages.WithDuplicateDetectionHistoryTimeWindow, UpdateStages.WithEnableBatchedOperations, UpdateStages.WithEnableExpress, UpdateStages.WithEnablePartitioning, UpdateStages.WithEntityAvailabilityStatus, UpdateStages.WithIsAnonymousAccessible, UpdateStages.WithLockDuration, UpdateStages.WithMaxDeliveryCount, UpdateStages.WithMaxSizeInMegabytes, UpdateStages.WithName, UpdateStages.WithRequiresDuplicateDetection, UpdateStages.WithRequiresSession, UpdateStages.WithStatus, UpdateStages.WithSupportOrdering {
    }

    /**
     * Grouping of QueueResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the queueresource update allowing to specify AutoDeleteOnIdle.
         */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies autoDeleteOnIdle.
             * @param autoDeleteOnIdle the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes
             * @return the next update stage
             */
            Update withAutoDeleteOnIdle(String autoDeleteOnIdle);
        }

        /**
         * The stage of the queueresource update allowing to specify DeadLetteringOnMessageExpiration.
         */
        interface WithDeadLetteringOnMessageExpiration {
            /**
             * Specifies deadLetteringOnMessageExpiration.
             * @param deadLetteringOnMessageExpiration A value that indicates whether this queue has dead letter support when a message expires
             * @return the next update stage
             */
            Update withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration);
        }

        /**
         * The stage of the queueresource update allowing to specify DefaultMessageTimeToLive.
         */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies defaultMessageTimeToLive.
             * @param defaultMessageTimeToLive The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself
             * @return the next update stage
             */
            Update withDefaultMessageTimeToLive(String defaultMessageTimeToLive);
        }

        /**
         * The stage of the queueresource update allowing to specify DuplicateDetectionHistoryTimeWindow.
         */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies duplicateDetectionHistoryTimeWindow.
             * @param duplicateDetectionHistoryTimeWindow TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes
             * @return the next update stage
             */
            Update withDuplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow);
        }

        /**
         * The stage of the queueresource update allowing to specify EnableBatchedOperations.
         */
        interface WithEnableBatchedOperations {
            /**
             * Specifies enableBatchedOperations.
             * @param enableBatchedOperations A value that indicates whether server-side batched operations are enabled
             * @return the next update stage
             */
            Update withEnableBatchedOperations(Boolean enableBatchedOperations);
        }

        /**
         * The stage of the queueresource update allowing to specify EnableExpress.
         */
        interface WithEnableExpress {
            /**
             * Specifies enableExpress.
             * @param enableExpress A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage
             * @return the next update stage
             */
            Update withEnableExpress(Boolean enableExpress);
        }

        /**
         * The stage of the queueresource update allowing to specify EnablePartitioning.
         */
        interface WithEnablePartitioning {
            /**
             * Specifies enablePartitioning.
             * @param enablePartitioning A value that indicates whether the queue is to be partitioned across multiple message brokers
             * @return the next update stage
             */
            Update withEnablePartitioning(Boolean enablePartitioning);
        }

        /**
         * The stage of the queueresource update allowing to specify EntityAvailabilityStatus.
         */
        interface WithEntityAvailabilityStatus {
            /**
             * Specifies entityAvailabilityStatus.
             * @param entityAvailabilityStatus Entity availability status for the queue. Possible values include: 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown'
             * @return the next update stage
             */
            Update withEntityAvailabilityStatus(EntityAvailabilityStatus entityAvailabilityStatus);
        }

        /**
         * The stage of the queueresource update allowing to specify IsAnonymousAccessible.
         */
        interface WithIsAnonymousAccessible {
            /**
             * Specifies isAnonymousAccessible.
             * @param isAnonymousAccessible A value that indicates whether the message is accessible anonymously
             * @return the next update stage
             */
            Update withIsAnonymousAccessible(Boolean isAnonymousAccessible);
        }

        /**
         * The stage of the queueresource update allowing to specify LockDuration.
         */
        interface WithLockDuration {
            /**
             * Specifies lockDuration.
             * @param lockDuration The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute
             * @return the next update stage
             */
            Update withLockDuration(String lockDuration);
        }

        /**
         * The stage of the queueresource update allowing to specify MaxDeliveryCount.
         */
        interface WithMaxDeliveryCount {
            /**
             * Specifies maxDeliveryCount.
             * @param maxDeliveryCount The maximum delivery count. A message is automatically deadlettered after this number of deliveries
             * @return the next update stage
             */
            Update withMaxDeliveryCount(Integer maxDeliveryCount);
        }

        /**
         * The stage of the queueresource update allowing to specify MaxSizeInMegabytes.
         */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies maxSizeInMegabytes.
             * @param maxSizeInMegabytes The maximum size of the queue in megabytes, which is the size of memory allocated for the queue
             * @return the next update stage
             */
            Update withMaxSizeInMegabytes(Long maxSizeInMegabytes);
        }

        /**
         * The stage of the queueresource update allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name Queue name
             * @return the next update stage
             */
            Update withName(String name);
        }

        /**
         * The stage of the queueresource update allowing to specify RequiresDuplicateDetection.
         */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies requiresDuplicateDetection.
             * @param requiresDuplicateDetection A value indicating if this queue requires duplicate detection
             * @return the next update stage
             */
            Update withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }

        /**
         * The stage of the queueresource update allowing to specify RequiresSession.
         */
        interface WithRequiresSession {
            /**
             * Specifies requiresSession.
             * @param requiresSession A value that indicates whether the queue supports the concept of sessions
             * @return the next update stage
             */
            Update withRequiresSession(Boolean requiresSession);
        }

        /**
         * The stage of the queueresource update allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status Enumerates the possible values for the status of a messaging entity. Possible values include: 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown'
             * @return the next update stage
             */
            Update withStatus(EntityStatus status);
        }

        /**
         * The stage of the queueresource update allowing to specify SupportOrdering.
         */
        interface WithSupportOrdering {
            /**
             * Specifies supportOrdering.
             * @param supportOrdering A value that indicates whether the queue supports ordering
             * @return the next update stage
             */
            Update withSupportOrdering(Boolean supportOrdering);
        }

    }
}
