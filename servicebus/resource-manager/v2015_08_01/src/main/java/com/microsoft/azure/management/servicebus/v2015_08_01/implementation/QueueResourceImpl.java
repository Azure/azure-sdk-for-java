/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicebus.v2015_08_01.implementation;

import com.microsoft.azure.management.servicebus.v2015_08_01.QueueResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.servicebus.v2015_08_01.QueueCreateOrUpdateParameters;
import org.joda.time.DateTime;
import com.microsoft.azure.management.servicebus.v2015_08_01.MessageCountDetails;
import com.microsoft.azure.management.servicebus.v2015_08_01.EntityAvailabilityStatus;
import com.microsoft.azure.management.servicebus.v2015_08_01.EntityStatus;
import rx.functions.Func1;

class QueueResourceImpl extends CreatableUpdatableImpl<QueueResource, QueueResourceInner, QueueResourceImpl> implements QueueResource, QueueResource.Definition, QueueResource.Update {
    private final ServiceBusManager manager;
    private String resourceGroupName;
    private String namespaceName;
    private String queueName;
    private QueueCreateOrUpdateParameters createOrUpdateParameter;

    QueueResourceImpl(String name, ServiceBusManager manager) {
        super(name, new QueueResourceInner());
        this.manager = manager;
        // Set resource name
        this.queueName = name;
        //
        this.createOrUpdateParameter = new QueueCreateOrUpdateParameters();
    }

    QueueResourceImpl(QueueResourceInner inner, ServiceBusManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.queueName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.namespaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "namespaces");
        this.queueName = IdParsingUtils.getValueFromIdByName(inner.id(), "queues");
        //
        this.createOrUpdateParameter = new QueueCreateOrUpdateParameters();
    }

    @Override
    public ServiceBusManager manager() {
        return this.manager;
    }

    @Override
    public Observable<QueueResource> createResourceAsync() {
        QueuesInner client = this.manager().inner().queues();
        return client.createOrUpdateAsync(this.resourceGroupName, this.namespaceName, this.queueName, this.createOrUpdateParameter)
            .map(new Func1<QueueResourceInner, QueueResourceInner>() {
               @Override
               public QueueResourceInner call(QueueResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<QueueResource> updateResourceAsync() {
        QueuesInner client = this.manager().inner().queues();
        return client.createOrUpdateAsync(this.resourceGroupName, this.namespaceName, this.queueName, this.createOrUpdateParameter)
            .map(new Func1<QueueResourceInner, QueueResourceInner>() {
               @Override
               public QueueResourceInner call(QueueResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<QueueResourceInner> getInnerAsync() {
        QueuesInner client = this.manager().inner().queues();
        return client.getAsync(this.resourceGroupName, this.namespaceName, this.queueName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new QueueCreateOrUpdateParameters();
    }

    @Override
    public DateTime accessedAt() {
        return this.inner().accessedAt();
    }

    @Override
    public String autoDeleteOnIdle() {
        return this.inner().autoDeleteOnIdle();
    }

    @Override
    public MessageCountDetails countDetails() {
        return this.inner().countDetails();
    }

    @Override
    public DateTime createdAt() {
        return this.inner().createdAt();
    }

    @Override
    public Boolean deadLetteringOnMessageExpiration() {
        return this.inner().deadLetteringOnMessageExpiration();
    }

    @Override
    public String defaultMessageTimeToLive() {
        return this.inner().defaultMessageTimeToLive();
    }

    @Override
    public String duplicateDetectionHistoryTimeWindow() {
        return this.inner().duplicateDetectionHistoryTimeWindow();
    }

    @Override
    public Boolean enableBatchedOperations() {
        return this.inner().enableBatchedOperations();
    }

    @Override
    public Boolean enableExpress() {
        return this.inner().enableExpress();
    }

    @Override
    public Boolean enablePartitioning() {
        return this.inner().enablePartitioning();
    }

    @Override
    public EntityAvailabilityStatus entityAvailabilityStatus() {
        return this.inner().entityAvailabilityStatus();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isAnonymousAccessible() {
        return this.inner().isAnonymousAccessible();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String lockDuration() {
        return this.inner().lockDuration();
    }

    @Override
    public Integer maxDeliveryCount() {
        return this.inner().maxDeliveryCount();
    }

    @Override
    public Long maxSizeInMegabytes() {
        return this.inner().maxSizeInMegabytes();
    }

    @Override
    public Long messageCount() {
        return this.inner().messageCount();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Boolean requiresDuplicateDetection() {
        return this.inner().requiresDuplicateDetection();
    }

    @Override
    public Boolean requiresSession() {
        return this.inner().requiresSession();
    }

    @Override
    public Long sizeInBytes() {
        return this.inner().sizeInBytes();
    }

    @Override
    public EntityStatus status() {
        return this.inner().status();
    }

    @Override
    public Boolean supportOrdering() {
        return this.inner().supportOrdering();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DateTime updatedAt() {
        return this.inner().updatedAt();
    }

    @Override
    public QueueResourceImpl withExistingNamespace(String resourceGroupName, String namespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.namespaceName = namespaceName;
        return this;
    }

    @Override
    public QueueResourceImpl withLocation(String location) {
        this.createOrUpdateParameter.withLocation(location);
        return this;
    }

    @Override
    public QueueResourceImpl withAutoDeleteOnIdle(String autoDeleteOnIdle) {
        this.createOrUpdateParameter.withAutoDeleteOnIdle(autoDeleteOnIdle);
        return this;
    }

    @Override
    public QueueResourceImpl withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
        this.createOrUpdateParameter.withDeadLetteringOnMessageExpiration(deadLetteringOnMessageExpiration);
        return this;
    }

    @Override
    public QueueResourceImpl withDefaultMessageTimeToLive(String defaultMessageTimeToLive) {
        this.createOrUpdateParameter.withDefaultMessageTimeToLive(defaultMessageTimeToLive);
        return this;
    }

    @Override
    public QueueResourceImpl withDuplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow) {
        this.createOrUpdateParameter.withDuplicateDetectionHistoryTimeWindow(duplicateDetectionHistoryTimeWindow);
        return this;
    }

    @Override
    public QueueResourceImpl withEnableBatchedOperations(Boolean enableBatchedOperations) {
        this.createOrUpdateParameter.withEnableBatchedOperations(enableBatchedOperations);
        return this;
    }

    @Override
    public QueueResourceImpl withEnableExpress(Boolean enableExpress) {
        this.createOrUpdateParameter.withEnableExpress(enableExpress);
        return this;
    }

    @Override
    public QueueResourceImpl withEnablePartitioning(Boolean enablePartitioning) {
        this.createOrUpdateParameter.withEnablePartitioning(enablePartitioning);
        return this;
    }

    @Override
    public QueueResourceImpl withEntityAvailabilityStatus(EntityAvailabilityStatus entityAvailabilityStatus) {
        this.createOrUpdateParameter.withEntityAvailabilityStatus(entityAvailabilityStatus);
        return this;
    }

    @Override
    public QueueResourceImpl withIsAnonymousAccessible(Boolean isAnonymousAccessible) {
        this.createOrUpdateParameter.withIsAnonymousAccessible(isAnonymousAccessible);
        return this;
    }

    @Override
    public QueueResourceImpl withLockDuration(String lockDuration) {
        this.createOrUpdateParameter.withLockDuration(lockDuration);
        return this;
    }

    @Override
    public QueueResourceImpl withMaxDeliveryCount(Integer maxDeliveryCount) {
        this.createOrUpdateParameter.withMaxDeliveryCount(maxDeliveryCount);
        return this;
    }

    @Override
    public QueueResourceImpl withMaxSizeInMegabytes(Long maxSizeInMegabytes) {
        this.createOrUpdateParameter.withMaxSizeInMegabytes(maxSizeInMegabytes);
        return this;
    }

    @Override
    public QueueResourceImpl withName(String name) {
        this.createOrUpdateParameter.withName(name);
        return this;
    }

    @Override
    public QueueResourceImpl withRequiresDuplicateDetection(Boolean requiresDuplicateDetection) {
        this.createOrUpdateParameter.withRequiresDuplicateDetection(requiresDuplicateDetection);
        return this;
    }

    @Override
    public QueueResourceImpl withRequiresSession(Boolean requiresSession) {
        this.createOrUpdateParameter.withRequiresSession(requiresSession);
        return this;
    }

    @Override
    public QueueResourceImpl withStatus(EntityStatus status) {
        this.createOrUpdateParameter.withStatus(status);
        return this;
    }

    @Override
    public QueueResourceImpl withSupportOrdering(Boolean supportOrdering) {
        this.createOrUpdateParameter.withSupportOrdering(supportOrdering);
        return this;
    }

}
