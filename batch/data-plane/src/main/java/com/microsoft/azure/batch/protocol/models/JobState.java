/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.batch.protocol.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Defines values for JobState.
 */
public enum JobState {
    /** The job is available to have tasks scheduled. */
    ACTIVE("active"),

    /** A user has requested that the job be disabled, but the disable operation is still in progress (for example, waiting for tasks to terminate). */
    DISABLING("disabling"),

    /** A user has disabled the job. No tasks are running, and no new tasks will be scheduled. */
    DISABLED("disabled"),

    /** A user has requested that the job be enabled, but the enable operation is still in progress. */
    ENABLING("enabling"),

    /** The job is about to complete, either because a Job Manager task has completed or because the user has terminated the job, but the terminate operation is still in progress (for example, because Job Release tasks are running). */
    TERMINATING("terminating"),

    /** All tasks have terminated, and the system will not accept any more tasks or any further changes to the job. */
    COMPLETED("completed"),

    /** A user has requested that the job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running tasks). */
    DELETING("deleting");

    /** The actual serialized value for a JobState instance. */
    private String value;

    JobState(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a JobState instance.
     *
     * @param value the serialized value to parse.
     * @return the parsed JobState object, or null if unable to parse.
     */
    @JsonCreator
    public static JobState fromString(String value) {
        JobState[] items = JobState.values();
        for (JobState item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    @JsonValue
    @Override
    public String toString() {
        return this.value;
    }
}
