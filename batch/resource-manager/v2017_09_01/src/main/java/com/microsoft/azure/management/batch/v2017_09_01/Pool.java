/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batch.v2017_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.batch.v2017_09_01.implementation.PoolInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.batch.v2017_09_01.implementation.BatchManager;
import org.joda.time.DateTime;
import java.util.List;

/**
 * Type representing Pool.
 */
public interface Pool extends HasInner<PoolInner>, Indexable, Refreshable<Pool>, Updatable<Pool.Update>, HasManager<BatchManager> {
    /**
     * @return the allocationState value.
     */
    AllocationState allocationState();

    /**
     * @return the allocationStateTransitionTime value.
     */
    DateTime allocationStateTransitionTime();

    /**
     * @return the applicationLicenses value.
     */
    List<String> applicationLicenses();

    /**
     * @return the applicationPackages value.
     */
    List<ApplicationPackageReference> applicationPackages();

    /**
     * @return the autoScaleRun value.
     */
    AutoScaleRun autoScaleRun();

    /**
     * @return the certificates value.
     */
    List<CertificateReference> certificates();

    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the currentDedicatedNodes value.
     */
    Integer currentDedicatedNodes();

    /**
     * @return the currentLowPriorityNodes value.
     */
    Integer currentLowPriorityNodes();

    /**
     * @return the deploymentConfiguration value.
     */
    DeploymentConfiguration deploymentConfiguration();

    /**
     * @return the displayName value.
     */
    String displayName();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the interNodeCommunication value.
     */
    InterNodeCommunicationState interNodeCommunication();

    /**
     * @return the lastModified value.
     */
    DateTime lastModified();

    /**
     * @return the maxTasksPerNode value.
     */
    Integer maxTasksPerNode();

    /**
     * @return the metadata value.
     */
    List<MetadataItem> metadata();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the networkConfiguration value.
     */
    NetworkConfiguration networkConfiguration();

    /**
     * @return the provisioningState value.
     */
    PoolProvisioningState provisioningState();

    /**
     * @return the provisioningStateTransitionTime value.
     */
    DateTime provisioningStateTransitionTime();

    /**
     * @return the resizeOperationStatus value.
     */
    ResizeOperationStatus resizeOperationStatus();

    /**
     * @return the scaleSettings value.
     */
    ScaleSettings scaleSettings();

    /**
     * @return the startTask value.
     */
    StartTask startTask();

    /**
     * @return the taskSchedulingPolicy value.
     */
    TaskSchedulingPolicy taskSchedulingPolicy();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the userAccounts value.
     */
    List<UserAccount> userAccounts();

    /**
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * The entirety of the Pool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithBatchAccount, DefinitionStages.WithIfMatch, DefinitionStages.WithIfNoneMatch, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Pool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Pool definition.
         */
        interface Blank extends WithBatchAccount {
        }

        /**
         * The stage of the pool definition allowing to specify BatchAccount.
         */
        interface WithBatchAccount {
           /**
            * Specifies resourceGroupName, accountName.
            * @param resourceGroupName The name of the resource group that contains the Batch account
            * @param accountName The name of the Batch account
            * @return the next definition stage
            */
            WithIfMatch withExistingBatchAccount(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the pool definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch The entity state (ETag) version of the pool to update. A value of "*" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied
            * @return the next definition stage
            */
            WithIfNoneMatch withIfMatch(String ifMatch);
        }

        /**
         * The stage of the pool definition allowing to specify IfNoneMatch.
         */
        interface WithIfNoneMatch {
           /**
            * Specifies ifNoneMatch.
            * @param ifNoneMatch Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored
            * @return the next definition stage
            */
            WithCreate withIfNoneMatch(String ifNoneMatch);
        }

        /**
         * The stage of the pool definition allowing to specify ApplicationLicenses.
         */
        interface WithApplicationLicenses {
            /**
             * Specifies applicationLicenses.
             * @param applicationLicenses The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail
             * @return the next definition stage
             */
            WithCreate withApplicationLicenses(List<String> applicationLicenses);
        }

        /**
         * The stage of the pool definition allowing to specify ApplicationPackages.
         */
        interface WithApplicationPackages {
            /**
             * Specifies applicationPackages.
             * @param applicationPackages Changes to application packages affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged
             * @return the next definition stage
             */
            WithCreate withApplicationPackages(List<ApplicationPackageReference> applicationPackages);
        }

        /**
         * The stage of the pool definition allowing to specify Certificates.
         */
        interface WithCertificates {
            /**
             * Specifies certificates.
             * @param certificates For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory
             * @return the next definition stage
             */
            WithCreate withCertificates(List<CertificateReference> certificates);
        }

        /**
         * The stage of the pool definition allowing to specify DeploymentConfiguration.
         */
        interface WithDeploymentConfiguration {
            /**
             * Specifies deploymentConfiguration.
             * @param deploymentConfiguration Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS)
             * @return the next definition stage
             */
            WithCreate withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration);
        }

        /**
         * The stage of the pool definition allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024
             * @return the next definition stage
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the pool definition allowing to specify InterNodeCommunication.
         */
        interface WithInterNodeCommunication {
            /**
             * Specifies interNodeCommunication.
             * @param interNodeCommunication This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withInterNodeCommunication(InterNodeCommunicationState interNodeCommunication);
        }

        /**
         * The stage of the pool definition allowing to specify MaxTasksPerNode.
         */
        interface WithMaxTasksPerNode {
            /**
             * Specifies maxTasksPerNode.
             * @param maxTasksPerNode the maxTasksPerNode parameter value
             * @return the next definition stage
             */
            WithCreate withMaxTasksPerNode(Integer maxTasksPerNode);
        }

        /**
         * The stage of the pool definition allowing to specify Metadata.
         */
        interface WithMetadata {
            /**
             * Specifies metadata.
             * @param metadata The Batch service does not assign any meaning to metadata; it is solely for the use of user code
             * @return the next definition stage
             */
            WithCreate withMetadata(List<MetadataItem> metadata);
        }

        /**
         * The stage of the pool definition allowing to specify NetworkConfiguration.
         */
        interface WithNetworkConfiguration {
            /**
             * Specifies networkConfiguration.
             * @param networkConfiguration the networkConfiguration parameter value
             * @return the next definition stage
             */
            WithCreate withNetworkConfiguration(NetworkConfiguration networkConfiguration);
        }

        /**
         * The stage of the pool definition allowing to specify ScaleSettings.
         */
        interface WithScaleSettings {
            /**
             * Specifies scaleSettings.
             * @param scaleSettings the scaleSettings parameter value
             * @return the next definition stage
             */
            WithCreate withScaleSettings(ScaleSettings scaleSettings);
        }

        /**
         * The stage of the pool definition allowing to specify StartTask.
         */
        interface WithStartTask {
            /**
             * Specifies startTask.
             * @param startTask In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool
             * @return the next definition stage
             */
            WithCreate withStartTask(StartTask startTask);
        }

        /**
         * The stage of the pool definition allowing to specify TaskSchedulingPolicy.
         */
        interface WithTaskSchedulingPolicy {
            /**
             * Specifies taskSchedulingPolicy.
             * @param taskSchedulingPolicy the taskSchedulingPolicy parameter value
             * @return the next definition stage
             */
            WithCreate withTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy);
        }

        /**
         * The stage of the pool definition allowing to specify UserAccounts.
         */
        interface WithUserAccounts {
            /**
             * Specifies userAccounts.
             * @param userAccounts the userAccounts parameter value
             * @return the next definition stage
             */
            WithCreate withUserAccounts(List<UserAccount> userAccounts);
        }

        /**
         * The stage of the pool definition allowing to specify VmSize.
         */
        interface WithVmSize {
            /**
             * Specifies vmSize.
             * @param vmSize For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)
             * @return the next definition stage
             */
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Pool>, DefinitionStages.WithApplicationLicenses, DefinitionStages.WithApplicationPackages, DefinitionStages.WithCertificates, DefinitionStages.WithDeploymentConfiguration, DefinitionStages.WithDisplayName, DefinitionStages.WithInterNodeCommunication, DefinitionStages.WithMaxTasksPerNode, DefinitionStages.WithMetadata, DefinitionStages.WithNetworkConfiguration, DefinitionStages.WithScaleSettings, DefinitionStages.WithStartTask, DefinitionStages.WithTaskSchedulingPolicy, DefinitionStages.WithUserAccounts, DefinitionStages.WithVmSize {
        }
    }
    /**
     * The template for a Pool update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Pool>, UpdateStages.WithIfMatch, UpdateStages.WithApplicationLicenses, UpdateStages.WithApplicationPackages, UpdateStages.WithCertificates, UpdateStages.WithDeploymentConfiguration, UpdateStages.WithDisplayName, UpdateStages.WithInterNodeCommunication, UpdateStages.WithMaxTasksPerNode, UpdateStages.WithMetadata, UpdateStages.WithNetworkConfiguration, UpdateStages.WithScaleSettings, UpdateStages.WithStartTask, UpdateStages.WithTaskSchedulingPolicy, UpdateStages.WithUserAccounts, UpdateStages.WithVmSize {
    }

    /**
     * Grouping of Pool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the pool update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the pool update allowing to specify ApplicationLicenses.
         */
        interface WithApplicationLicenses {
            /**
             * Specifies applicationLicenses.
             * @param applicationLicenses The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail
             * @return the next update stage
             */
            Update withApplicationLicenses(List<String> applicationLicenses);
        }

        /**
         * The stage of the pool update allowing to specify ApplicationPackages.
         */
        interface WithApplicationPackages {
            /**
             * Specifies applicationPackages.
             * @param applicationPackages Changes to application packages affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged
             * @return the next update stage
             */
            Update withApplicationPackages(List<ApplicationPackageReference> applicationPackages);
        }

        /**
         * The stage of the pool update allowing to specify Certificates.
         */
        interface WithCertificates {
            /**
             * Specifies certificates.
             * @param certificates For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory
             * @return the next update stage
             */
            Update withCertificates(List<CertificateReference> certificates);
        }

        /**
         * The stage of the pool update allowing to specify DeploymentConfiguration.
         */
        interface WithDeploymentConfiguration {
            /**
             * Specifies deploymentConfiguration.
             * @param deploymentConfiguration Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS)
             * @return the next update stage
             */
            Update withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration);
        }

        /**
         * The stage of the pool update allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024
             * @return the next update stage
             */
            Update withDisplayName(String displayName);
        }

        /**
         * The stage of the pool update allowing to specify InterNodeCommunication.
         */
        interface WithInterNodeCommunication {
            /**
             * Specifies interNodeCommunication.
             * @param interNodeCommunication This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withInterNodeCommunication(InterNodeCommunicationState interNodeCommunication);
        }

        /**
         * The stage of the pool update allowing to specify MaxTasksPerNode.
         */
        interface WithMaxTasksPerNode {
            /**
             * Specifies maxTasksPerNode.
             * @param maxTasksPerNode the maxTasksPerNode parameter value
             * @return the next update stage
             */
            Update withMaxTasksPerNode(Integer maxTasksPerNode);
        }

        /**
         * The stage of the pool update allowing to specify Metadata.
         */
        interface WithMetadata {
            /**
             * Specifies metadata.
             * @param metadata The Batch service does not assign any meaning to metadata; it is solely for the use of user code
             * @return the next update stage
             */
            Update withMetadata(List<MetadataItem> metadata);
        }

        /**
         * The stage of the pool update allowing to specify NetworkConfiguration.
         */
        interface WithNetworkConfiguration {
            /**
             * Specifies networkConfiguration.
             * @param networkConfiguration the networkConfiguration parameter value
             * @return the next update stage
             */
            Update withNetworkConfiguration(NetworkConfiguration networkConfiguration);
        }

        /**
         * The stage of the pool update allowing to specify ScaleSettings.
         */
        interface WithScaleSettings {
            /**
             * Specifies scaleSettings.
             * @param scaleSettings the scaleSettings parameter value
             * @return the next update stage
             */
            Update withScaleSettings(ScaleSettings scaleSettings);
        }

        /**
         * The stage of the pool update allowing to specify StartTask.
         */
        interface WithStartTask {
            /**
             * Specifies startTask.
             * @param startTask In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool
             * @return the next update stage
             */
            Update withStartTask(StartTask startTask);
        }

        /**
         * The stage of the pool update allowing to specify TaskSchedulingPolicy.
         */
        interface WithTaskSchedulingPolicy {
            /**
             * Specifies taskSchedulingPolicy.
             * @param taskSchedulingPolicy the taskSchedulingPolicy parameter value
             * @return the next update stage
             */
            Update withTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy);
        }

        /**
         * The stage of the pool update allowing to specify UserAccounts.
         */
        interface WithUserAccounts {
            /**
             * Specifies userAccounts.
             * @param userAccounts the userAccounts parameter value
             * @return the next update stage
             */
            Update withUserAccounts(List<UserAccount> userAccounts);
        }

        /**
         * The stage of the pool update allowing to specify VmSize.
         */
        interface WithVmSize {
            /**
             * Specifies vmSize.
             * @param vmSize For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)
             * @return the next update stage
             */
            Update withVmSize(String vmSize);
        }

    }
}
