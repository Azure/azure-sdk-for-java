/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2019_05_01_preview;

import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Deployment settings payload.
 */
public class DeploymentSettings {
    /**
     * Required CPU.
     */
    @JsonProperty(value = "cpu")
    private Integer cpu;

    /**
     * Required Memory size in GB.
     */
    @JsonProperty(value = "memoryInGB")
    private Integer memoryInGB;

    /**
     * JVM parameter.
     */
    @JsonProperty(value = "jvmOptions")
    private String jvmOptions;

    /**
     * Instance count.
     */
    @JsonProperty(value = "instanceCount")
    private Integer instanceCount;

    /**
     * Collection of environment variables.
     */
    @JsonProperty(value = "environmentVariables")
    private Map<String, String> environmentVariables;

    /**
     * Runtime version. Possible values include: 'Java_8', 'Java_11'.
     */
    @JsonProperty(value = "runtimeVersion")
    private RuntimeVersion runtimeVersion;

    /**
     * Get required CPU.
     *
     * @return the cpu value
     */
    public Integer cpu() {
        return this.cpu;
    }

    /**
     * Set required CPU.
     *
     * @param cpu the cpu value to set
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withCpu(Integer cpu) {
        this.cpu = cpu;
        return this;
    }

    /**
     * Get required Memory size in GB.
     *
     * @return the memoryInGB value
     */
    public Integer memoryInGB() {
        return this.memoryInGB;
    }

    /**
     * Set required Memory size in GB.
     *
     * @param memoryInGB the memoryInGB value to set
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withMemoryInGB(Integer memoryInGB) {
        this.memoryInGB = memoryInGB;
        return this;
    }

    /**
     * Get jVM parameter.
     *
     * @return the jvmOptions value
     */
    public String jvmOptions() {
        return this.jvmOptions;
    }

    /**
     * Set jVM parameter.
     *
     * @param jvmOptions the jvmOptions value to set
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withJvmOptions(String jvmOptions) {
        this.jvmOptions = jvmOptions;
        return this;
    }

    /**
     * Get instance count.
     *
     * @return the instanceCount value
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }

    /**
     * Set instance count.
     *
     * @param instanceCount the instanceCount value to set
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withInstanceCount(Integer instanceCount) {
        this.instanceCount = instanceCount;
        return this;
    }

    /**
     * Get collection of environment variables.
     *
     * @return the environmentVariables value
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set collection of environment variables.
     *
     * @param environmentVariables the environmentVariables value to set
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get runtime version. Possible values include: 'Java_8', 'Java_11'.
     *
     * @return the runtimeVersion value
     */
    public RuntimeVersion runtimeVersion() {
        return this.runtimeVersion;
    }

    /**
     * Set runtime version. Possible values include: 'Java_8', 'Java_11'.
     *
     * @param runtimeVersion the runtimeVersion value to set
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withRuntimeVersion(RuntimeVersion runtimeVersion) {
        this.runtimeVersion = runtimeVersion;
        return this;
    }

}
