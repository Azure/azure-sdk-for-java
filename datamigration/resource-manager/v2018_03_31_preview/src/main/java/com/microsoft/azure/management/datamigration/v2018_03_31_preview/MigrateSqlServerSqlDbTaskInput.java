/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_03_31_preview;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL
 * Database.
 */
public class MigrateSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
    /**
     * Databases to migrate.
     */
    @JsonProperty(value = "selectedDatabases", required = true)
    private List<MigrateSqlServerSqlDbDatabaseInput> selectedDatabases;

    /**
     * Options for enabling various post migration validations. Available
     * options,
     * 1.) Data Integrity Check: Performs a checksum based comparison on source
     * and target tables after the migration to ensure the correctness of the
     * data.
     * 2.) Schema Validation: Performs a thorough schema comparison between the
     * source and target tables and provides a list of differences between the
     * source and target database, 3.) Query Analysis: Executes a set of
     * queries picked up automatically either from the Query Plan Cache or
     * Query Store and execute them and compares the execution time between the
     * source and target database.
     */
    @JsonProperty(value = "validationOptions")
    private MigrationValidationOptions validationOptions;

    /**
     * Get databases to migrate.
     *
     * @return the selectedDatabases value
     */
    public List<MigrateSqlServerSqlDbDatabaseInput> selectedDatabases() {
        return this.selectedDatabases;
    }

    /**
     * Set databases to migrate.
     *
     * @param selectedDatabases the selectedDatabases value to set
     * @return the MigrateSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSqlServerSqlDbTaskInput withSelectedDatabases(List<MigrateSqlServerSqlDbDatabaseInput> selectedDatabases) {
        this.selectedDatabases = selectedDatabases;
        return this;
    }

    /**
     * Get options for enabling various post migration validations. Available options,
      1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
      2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
     *
     * @return the validationOptions value
     */
    public MigrationValidationOptions validationOptions() {
        return this.validationOptions;
    }

    /**
     * Set options for enabling various post migration validations. Available options,
      1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
      2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
     *
     * @param validationOptions the validationOptions value to set
     * @return the MigrateSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSqlServerSqlDbTaskInput withValidationOptions(MigrationValidationOptions validationOptions) {
        this.validationOptions = validationOptions;
        return this;
    }

}
