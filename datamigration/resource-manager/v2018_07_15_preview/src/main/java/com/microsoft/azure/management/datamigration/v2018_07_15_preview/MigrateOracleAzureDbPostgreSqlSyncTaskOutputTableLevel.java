/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel model.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "resultType", defaultImpl = MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel.class)
@JsonTypeName("TableLevelOutput")
public class MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel extends MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
    /**
     * Name of the table.
     */
    @JsonProperty(value = "tableName", access = JsonProperty.Access.WRITE_ONLY)
    private String tableName;

    /**
     * Name of the database.
     */
    @JsonProperty(value = "databaseName", access = JsonProperty.Access.WRITE_ONLY)
    private String databaseName;

    /**
     * Number of applied inserts.
     */
    @JsonProperty(value = "cdcInsertCounter", access = JsonProperty.Access.WRITE_ONLY)
    private Long cdcInsertCounter;

    /**
     * Number of applied updates.
     */
    @JsonProperty(value = "cdcUpdateCounter", access = JsonProperty.Access.WRITE_ONLY)
    private Long cdcUpdateCounter;

    /**
     * Number of applied deletes.
     */
    @JsonProperty(value = "cdcDeleteCounter", access = JsonProperty.Access.WRITE_ONLY)
    private Long cdcDeleteCounter;

    /**
     * Estimate to finish full load.
     */
    @JsonProperty(value = "fullLoadEstFinishTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime fullLoadEstFinishTime;

    /**
     * Full load start time.
     */
    @JsonProperty(value = "fullLoadStartedOn", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime fullLoadStartedOn;

    /**
     * Full load end time.
     */
    @JsonProperty(value = "fullLoadEndedOn", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime fullLoadEndedOn;

    /**
     * Number of rows applied in full load.
     */
    @JsonProperty(value = "fullLoadTotalRows", access = JsonProperty.Access.WRITE_ONLY)
    private Long fullLoadTotalRows;

    /**
     * Current state of the table migration. Possible values include:
     * 'BEFORE_LOAD', 'FULL_LOAD', 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'.
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private SyncTableMigrationState state;

    /**
     * Total number of applied changes.
     */
    @JsonProperty(value = "totalChangesApplied", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalChangesApplied;

    /**
     * Number of data errors occurred.
     */
    @JsonProperty(value = "dataErrorsCounter", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataErrorsCounter;

    /**
     * Last modified time on target.
     */
    @JsonProperty(value = "lastModifiedTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastModifiedTime;

    /**
     * Get name of the table.
     *
     * @return the tableName value
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Get name of the database.
     *
     * @return the databaseName value
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get number of applied inserts.
     *
     * @return the cdcInsertCounter value
     */
    public Long cdcInsertCounter() {
        return this.cdcInsertCounter;
    }

    /**
     * Get number of applied updates.
     *
     * @return the cdcUpdateCounter value
     */
    public Long cdcUpdateCounter() {
        return this.cdcUpdateCounter;
    }

    /**
     * Get number of applied deletes.
     *
     * @return the cdcDeleteCounter value
     */
    public Long cdcDeleteCounter() {
        return this.cdcDeleteCounter;
    }

    /**
     * Get estimate to finish full load.
     *
     * @return the fullLoadEstFinishTime value
     */
    public DateTime fullLoadEstFinishTime() {
        return this.fullLoadEstFinishTime;
    }

    /**
     * Get full load start time.
     *
     * @return the fullLoadStartedOn value
     */
    public DateTime fullLoadStartedOn() {
        return this.fullLoadStartedOn;
    }

    /**
     * Get full load end time.
     *
     * @return the fullLoadEndedOn value
     */
    public DateTime fullLoadEndedOn() {
        return this.fullLoadEndedOn;
    }

    /**
     * Get number of rows applied in full load.
     *
     * @return the fullLoadTotalRows value
     */
    public Long fullLoadTotalRows() {
        return this.fullLoadTotalRows;
    }

    /**
     * Get current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD', 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'.
     *
     * @return the state value
     */
    public SyncTableMigrationState state() {
        return this.state;
    }

    /**
     * Get total number of applied changes.
     *
     * @return the totalChangesApplied value
     */
    public Long totalChangesApplied() {
        return this.totalChangesApplied;
    }

    /**
     * Get number of data errors occurred.
     *
     * @return the dataErrorsCounter value
     */
    public Long dataErrorsCounter() {
        return this.dataErrorsCounter;
    }

    /**
     * Get last modified time on target.
     *
     * @return the lastModifiedTime value
     */
    public DateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

}
