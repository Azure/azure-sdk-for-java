/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.datalake.analytics.models;

import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The parameters that can be used to update existing Data Lake Analytics job
 * information properties. (Only for use internally with Scope job type.).
 */
public class UpdateJobParameters {
    /**
     * The degree of parallelism used for this job.
     */
    @JsonProperty(value = "degreeOfParallelism")
    private Integer degreeOfParallelism;

    /**
     * the degree of parallelism in percentage used for this job.
     */
    @JsonProperty(value = "degreeOfParallelismPercent")
    private Double degreeOfParallelismPercent;

    /**
     * The priority value for the current job. Lower numbers have a higher
     * priority. By default, a job has a priority of 1000. This must be greater
     * than 0.
     */
    @JsonProperty(value = "priority")
    private Integer priority;

    /**
     * The key-value pairs used to add additional metadata to the job
     * information.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /**
     * Get the degree of parallelism used for this job.
     *
     * @return the degreeOfParallelism value
     */
    public Integer degreeOfParallelism() {
        return this.degreeOfParallelism;
    }

    /**
     * Set the degree of parallelism used for this job.
     *
     * @param degreeOfParallelism the degreeOfParallelism value to set
     * @return the UpdateJobParameters object itself.
     */
    public UpdateJobParameters withDegreeOfParallelism(Integer degreeOfParallelism) {
        this.degreeOfParallelism = degreeOfParallelism;
        return this;
    }

    /**
     * Get the degree of parallelism in percentage used for this job.
     *
     * @return the degreeOfParallelismPercent value
     */
    public Double degreeOfParallelismPercent() {
        return this.degreeOfParallelismPercent;
    }

    /**
     * Set the degree of parallelism in percentage used for this job.
     *
     * @param degreeOfParallelismPercent the degreeOfParallelismPercent value to set
     * @return the UpdateJobParameters object itself.
     */
    public UpdateJobParameters withDegreeOfParallelismPercent(Double degreeOfParallelismPercent) {
        this.degreeOfParallelismPercent = degreeOfParallelismPercent;
        return this;
    }

    /**
     * Get the priority value for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.
     *
     * @return the priority value
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set the priority value for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.
     *
     * @param priority the priority value to set
     * @return the UpdateJobParameters object itself.
     */
    public UpdateJobParameters withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the key-value pairs used to add additional metadata to the job information.
     *
     * @return the tags value
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the key-value pairs used to add additional metadata to the job information.
     *
     * @param tags the tags value to set
     * @return the UpdateJobParameters object itself.
     */
    public UpdateJobParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

}
