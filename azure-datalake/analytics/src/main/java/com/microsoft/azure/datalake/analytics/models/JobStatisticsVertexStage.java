/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.datalake.analytics.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The Data Lake Analytics U-SQL job statistics vertex stage information.
 */
public class JobStatisticsVertexStage {
    /**
     * Gets the amount of data read, in bytes.
     */
    @JsonProperty(value = "dataRead", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataRead;

    /**
     * Gets the amount of data read across multiple pods, in bytes.
     */
    @JsonProperty(value = "dataReadCrossPod", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataReadCrossPod;

    /**
     * Gets the amount of data read in one pod, in bytes.
     */
    @JsonProperty(value = "dataReadIntraPod", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataReadIntraPod;

    /**
     * Gets the amount of data remaining to be read, in bytes.
     */
    @JsonProperty(value = "dataToRead", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataToRead;

    /**
     * Gets the amount of data written, in bytes.
     */
    @JsonProperty(value = "dataWritten", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataWritten;

    /**
     * Gets the number of duplicates that were discarded.
     */
    @JsonProperty(value = "duplicateDiscardCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer duplicateDiscardCount;

    /**
     * Gets the number of failures that occurred in this stage.
     */
    @JsonProperty(value = "failedCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer failedCount;

    /**
     * Gets the maximum amount of data read in a single vertex, in bytes.
     */
    @JsonProperty(value = "maxVertexDataRead", access = JsonProperty.Access.WRITE_ONLY)
    private Long maxVertexDataRead;

    /**
     * Gets the minimum amount of data read in a single vertex, in bytes.
     */
    @JsonProperty(value = "minVertexDataRead", access = JsonProperty.Access.WRITE_ONLY)
    private Long minVertexDataRead;

    /**
     * Gets the number of read failures in this stage.
     */
    @JsonProperty(value = "readFailureCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer readFailureCount;

    /**
     * Gets the number of vertices that were revoked during this stage.
     */
    @JsonProperty(value = "revocationCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer revocationCount;

    /**
     * Gets the number of currently running vertices in this stage.
     */
    @JsonProperty(value = "runningCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer runningCount;

    /**
     * Gets the number of currently scheduled vertices in this stage.
     */
    @JsonProperty(value = "scheduledCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer scheduledCount;

    /**
     * Gets the name of this stage in job execution.
     */
    @JsonProperty(value = "stageName", access = JsonProperty.Access.WRITE_ONLY)
    private String stageName;

    /**
     * Gets the number of vertices that succeeded in this stage.
     */
    @JsonProperty(value = "succeededCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer succeededCount;

    /**
     * Gets the amount of temporary data written, in bytes.
     */
    @JsonProperty(value = "tempDataWritten", access = JsonProperty.Access.WRITE_ONLY)
    private Long tempDataWritten;

    /**
     * Gets the total vertex count for this stage.
     */
    @JsonProperty(value = "totalCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalCount;

    /**
     * Gets the amount of time that failed vertices took up in this stage.
     */
    @JsonProperty(value = "totalFailedTime", access = JsonProperty.Access.WRITE_ONLY)
    private String totalFailedTime;

    /**
     * Gets the current progress of this stage, as a percentage.
     */
    @JsonProperty(value = "totalProgress", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalProgress;

    /**
     * Gets the amount of time all successful vertices took in this stage.
     */
    @JsonProperty(value = "totalSucceededTime", access = JsonProperty.Access.WRITE_ONLY)
    private String totalSucceededTime;

    /**
     * Get gets the amount of data read, in bytes.
     *
     * @return the dataRead value
     */
    public Long dataRead() {
        return this.dataRead;
    }

    /**
     * Get gets the amount of data read across multiple pods, in bytes.
     *
     * @return the dataReadCrossPod value
     */
    public Long dataReadCrossPod() {
        return this.dataReadCrossPod;
    }

    /**
     * Get gets the amount of data read in one pod, in bytes.
     *
     * @return the dataReadIntraPod value
     */
    public Long dataReadIntraPod() {
        return this.dataReadIntraPod;
    }

    /**
     * Get gets the amount of data remaining to be read, in bytes.
     *
     * @return the dataToRead value
     */
    public Long dataToRead() {
        return this.dataToRead;
    }

    /**
     * Get gets the amount of data written, in bytes.
     *
     * @return the dataWritten value
     */
    public Long dataWritten() {
        return this.dataWritten;
    }

    /**
     * Get gets the number of duplicates that were discarded.
     *
     * @return the duplicateDiscardCount value
     */
    public Integer duplicateDiscardCount() {
        return this.duplicateDiscardCount;
    }

    /**
     * Get gets the number of failures that occurred in this stage.
     *
     * @return the failedCount value
     */
    public Integer failedCount() {
        return this.failedCount;
    }

    /**
     * Get gets the maximum amount of data read in a single vertex, in bytes.
     *
     * @return the maxVertexDataRead value
     */
    public Long maxVertexDataRead() {
        return this.maxVertexDataRead;
    }

    /**
     * Get gets the minimum amount of data read in a single vertex, in bytes.
     *
     * @return the minVertexDataRead value
     */
    public Long minVertexDataRead() {
        return this.minVertexDataRead;
    }

    /**
     * Get gets the number of read failures in this stage.
     *
     * @return the readFailureCount value
     */
    public Integer readFailureCount() {
        return this.readFailureCount;
    }

    /**
     * Get gets the number of vertices that were revoked during this stage.
     *
     * @return the revocationCount value
     */
    public Integer revocationCount() {
        return this.revocationCount;
    }

    /**
     * Get gets the number of currently running vertices in this stage.
     *
     * @return the runningCount value
     */
    public Integer runningCount() {
        return this.runningCount;
    }

    /**
     * Get gets the number of currently scheduled vertices in this stage.
     *
     * @return the scheduledCount value
     */
    public Integer scheduledCount() {
        return this.scheduledCount;
    }

    /**
     * Get gets the name of this stage in job execution.
     *
     * @return the stageName value
     */
    public String stageName() {
        return this.stageName;
    }

    /**
     * Get gets the number of vertices that succeeded in this stage.
     *
     * @return the succeededCount value
     */
    public Integer succeededCount() {
        return this.succeededCount;
    }

    /**
     * Get gets the amount of temporary data written, in bytes.
     *
     * @return the tempDataWritten value
     */
    public Long tempDataWritten() {
        return this.tempDataWritten;
    }

    /**
     * Get gets the total vertex count for this stage.
     *
     * @return the totalCount value
     */
    public Integer totalCount() {
        return this.totalCount;
    }

    /**
     * Get gets the amount of time that failed vertices took up in this stage.
     *
     * @return the totalFailedTime value
     */
    public String totalFailedTime() {
        return this.totalFailedTime;
    }

    /**
     * Get gets the current progress of this stage, as a percentage.
     *
     * @return the totalProgress value
     */
    public Integer totalProgress() {
        return this.totalProgress;
    }

    /**
     * Get gets the amount of time all successful vertices took in this stage.
     *
     * @return the totalSucceededTime value
     */
    public String totalSucceededTime() {
        return this.totalSucceededTime;
    }

}
