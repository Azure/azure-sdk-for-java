/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.implementation;

import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.ApplicationGroupApplication;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.ApplicationPatch;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.CommandLineSetting;
import rx.functions.Func1;

class ApplicationGroupApplicationImpl extends CreatableUpdatableImpl<ApplicationGroupApplication, ApplicationInner, ApplicationGroupApplicationImpl> implements ApplicationGroupApplication, ApplicationGroupApplication.Definition, ApplicationGroupApplication.Update {
    private final DesktopVirtualizationManager manager;
    private String resourceGroupName;
    private String applicationGroupName;
    private String applicationName;
    private ApplicationPatch updateParameter;

    ApplicationGroupApplicationImpl(String name, DesktopVirtualizationManager manager) {
        super(name, new ApplicationInner());
        this.manager = manager;
        // Set resource name
        this.applicationName = name;
        //
        this.updateParameter = new ApplicationPatch();
    }

    ApplicationGroupApplicationImpl(ApplicationInner inner, DesktopVirtualizationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.applicationName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.applicationGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "applicationGroups");
        this.applicationName = IdParsingUtils.getValueFromIdByName(inner.id(), "applications");
        //
        this.updateParameter = new ApplicationPatch();
    }

    @Override
    public DesktopVirtualizationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ApplicationGroupApplication> createResourceAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.createOrUpdateAsync(this.resourceGroupName, this.applicationGroupName, this.applicationName, this.inner())
            .map(new Func1<ApplicationInner, ApplicationInner>() {
               @Override
               public ApplicationInner call(ApplicationInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ApplicationGroupApplication> updateResourceAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.updateAsync(this.resourceGroupName, this.applicationGroupName, this.applicationName, this.updateParameter)
            .map(new Func1<ApplicationInner, ApplicationInner>() {
               @Override
               public ApplicationInner call(ApplicationInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ApplicationInner> getInnerAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.getAsync(this.resourceGroupName, this.applicationGroupName, this.applicationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new ApplicationPatch();
    }

    @Override
    public String commandLineArguments() {
        return this.inner().commandLineArguments();
    }

    @Override
    public CommandLineSetting commandLineSetting() {
        return this.inner().commandLineSetting();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String filePath() {
        return this.inner().filePath();
    }

    @Override
    public String friendlyName() {
        return this.inner().friendlyName();
    }

    @Override
    public byte[] iconContent() {
        return this.inner().iconContent();
    }

    @Override
    public String iconHash() {
        return this.inner().iconHash();
    }

    @Override
    public Integer iconIndex() {
        return this.inner().iconIndex();
    }

    @Override
    public String iconPath() {
        return this.inner().iconPath();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Boolean showInPortal() {
        return this.inner().showInPortal();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ApplicationGroupApplicationImpl withExistingApplicationGroup(String resourceGroupName, String applicationGroupName) {
        this.resourceGroupName = resourceGroupName;
        this.applicationGroupName = applicationGroupName;
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withTags(Object tags) {
        this.updateParameter.withTags(tags);
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withCommandLineArguments(String commandLineArguments) {
        if (isInCreateMode()) {
            this.inner().withCommandLineArguments(commandLineArguments);
        } else {
            this.updateParameter.withCommandLineArguments(commandLineArguments);
        }
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withCommandLineSetting(CommandLineSetting commandLineSetting) {
        if (isInCreateMode()) {
            this.inner().withCommandLineSetting(commandLineSetting);
        } else {
            this.updateParameter.withCommandLineSetting(commandLineSetting);
        }
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.inner().withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withFilePath(String filePath) {
        if (isInCreateMode()) {
            this.inner().withFilePath(filePath);
        } else {
            this.updateParameter.withFilePath(filePath);
        }
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withFriendlyName(String friendlyName) {
        if (isInCreateMode()) {
            this.inner().withFriendlyName(friendlyName);
        } else {
            this.updateParameter.withFriendlyName(friendlyName);
        }
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withIconIndex(Integer iconIndex) {
        if (isInCreateMode()) {
            this.inner().withIconIndex(iconIndex);
        } else {
            this.updateParameter.withIconIndex(iconIndex);
        }
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withIconPath(String iconPath) {
        if (isInCreateMode()) {
            this.inner().withIconPath(iconPath);
        } else {
            this.updateParameter.withIconPath(iconPath);
        }
        return this;
    }

    @Override
    public ApplicationGroupApplicationImpl withShowInPortal(Boolean showInPortal) {
        if (isInCreateMode()) {
            this.inner().withShowInPortal(showInPortal);
        } else {
            this.updateParameter.withShowInPortal(showInPortal);
        }
        return this;
    }

}
