/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import com.microsoft.azure.management.hybriddata.State;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.hybriddata.DmsBaseObject;

/**
 * Data Service.
 */
@JsonFlatten
public class DataServiceInner extends DmsBaseObject {
    /**
     * State of the data service. Possible values include: 'Disabled',
     * 'Enabled', 'Supported'.
     */
    @JsonProperty(value = "properties.state", required = true)
    private State state;

    /**
     * Supported data store types which can be used as a sink.
     */
    @JsonProperty(value = "properties.supportedDataSinkTypes")
    private List<String> supportedDataSinkTypes;

    /**
     * Supported data store types which can be used as a source.
     */
    @JsonProperty(value = "properties.supportedDataSourceTypes")
    private List<String> supportedDataSourceTypes;

    /**
     * Get state of the data service. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @return the state value
     */
    public State state() {
        return this.state;
    }

    /**
     * Set state of the data service. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @param state the state value to set
     * @return the DataServiceInner object itself.
     */
    public DataServiceInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get supported data store types which can be used as a sink.
     *
     * @return the supportedDataSinkTypes value
     */
    public List<String> supportedDataSinkTypes() {
        return this.supportedDataSinkTypes;
    }

    /**
     * Set supported data store types which can be used as a sink.
     *
     * @param supportedDataSinkTypes the supportedDataSinkTypes value to set
     * @return the DataServiceInner object itself.
     */
    public DataServiceInner withSupportedDataSinkTypes(List<String> supportedDataSinkTypes) {
        this.supportedDataSinkTypes = supportedDataSinkTypes;
        return this;
    }

    /**
     * Get supported data store types which can be used as a source.
     *
     * @return the supportedDataSourceTypes value
     */
    public List<String> supportedDataSourceTypes() {
        return this.supportedDataSourceTypes;
    }

    /**
     * Set supported data store types which can be used as a source.
     *
     * @param supportedDataSourceTypes the supportedDataSourceTypes value to set
     * @return the DataServiceInner object itself.
     */
    public DataServiceInner withSupportedDataSourceTypes(List<String> supportedDataSourceTypes) {
        this.supportedDataSourceTypes = supportedDataSourceTypes;
        return this;
    }

}
