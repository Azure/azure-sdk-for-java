/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.hybriddata.DataManagerUpdateParameter;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DataManagers.
 */
public class DataManagersInner implements InnerSupportsGet<DataManagerInner>, InnerSupportsDelete<Void>, InnerSupportsListing<DataManagerInner> {
    /** The Retrofit service to perform REST calls. */
    private DataManagersService service;
    /** The service client containing this operation class. */
    private HybridDataManagementClientImpl client;

    /**
     * Initializes an instance of DataManagersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DataManagersInner(Retrofit retrofit, HybridDataManagementClientImpl client) {
        this.service = retrofit.create(DataManagersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DataManagers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DataManagersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Body DataManagerInner dataManager, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Body DataManagerInner dataManager, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Body DataManagerUpdateParameter dataManagerUpdateParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataManagers beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Body DataManagerUpdateParameter dataManagerUpdateParameter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all the data manager resources available under the subscription.
     *
     * @return the PagedList<DataManagerInner> object if successful.
     */
    public PagedList<DataManagerInner> list() {
        PageImpl1<DataManagerInner> page = new PageImpl1<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<DataManagerInner>(page) {
            @Override
            public Page<DataManagerInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all the data manager resources available under the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataManagerInner>> listAsync(final ServiceCallback<List<DataManagerInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the data manager resources available under the subscription.
     *
     * @return the observable to the List&lt;DataManagerInner&gt; object
     */
    public Observable<Page<DataManagerInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<DataManagerInner>>, Page<DataManagerInner>>() {
            @Override
            public Page<DataManagerInner> call(ServiceResponse<List<DataManagerInner>> response) {
                PageImpl1<DataManagerInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all the data manager resources available under the subscription.
     *
     * @return the observable to the List&lt;DataManagerInner&gt; object
     */
    public Observable<ServiceResponse<List<DataManagerInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DataManagerInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DataManagerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<DataManagerInner>> result = listDelegate(response);
                        List<DataManagerInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<DataManagerInner>> clientResponse = new ServiceResponse<List<DataManagerInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<DataManagerInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<DataManagerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<DataManagerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the data manager resources available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @return the PagedList<DataManagerInner> object if successful.
     */
    public PagedList<DataManagerInner> listByResourceGroup(String resourceGroupName) {
        PageImpl1<DataManagerInner> page = new PageImpl1<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<DataManagerInner>(page) {
            @Override
            public Page<DataManagerInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all the data manager resources available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataManagerInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<DataManagerInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Lists all the data manager resources available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @return the observable to the List&lt;DataManagerInner&gt; object
     */
    public Observable<Page<DataManagerInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<DataManagerInner>>, Page<DataManagerInner>>() {
            @Override
            public Page<DataManagerInner> call(ServiceResponse<List<DataManagerInner>> response) {
                PageImpl1<DataManagerInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all the data manager resources available under the given resource group.
     *
     * @param resourceGroupName The Resource Group Name
     * @return the observable to the List&lt;DataManagerInner&gt; object
     */
    public Observable<ServiceResponse<List<DataManagerInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DataManagerInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DataManagerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<DataManagerInner>> result = listByResourceGroupDelegate(response);
                        List<DataManagerInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<DataManagerInner>> clientResponse = new ServiceResponse<List<DataManagerInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<DataManagerInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<DataManagerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<DataManagerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets information about the specified data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataManagerInner object if successful.
     */
    public DataManagerInner getByResourceGroup(String resourceGroupName, String dataManagerName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * Gets information about the specified data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataManagerInner> getByResourceGroupAsync(String resourceGroupName, String dataManagerName, final ServiceCallback<DataManagerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Gets information about the specified data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<DataManagerInner> getByResourceGroupAsync(String resourceGroupName, String dataManagerName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<DataManagerInner>, DataManagerInner>() {
            @Override
            public DataManagerInner call(ServiceResponse<DataManagerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the specified data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<ServiceResponse<DataManagerInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String dataManagerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataManagerInner>>>() {
                @Override
                public Observable<ServiceResponse<DataManagerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataManagerInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataManagerInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataManagerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataManagerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataManagerInner object if successful.
     */
    public DataManagerInner create(String resourceGroupName, String dataManagerName, DataManagerInner dataManager) {
        return createWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManager).toBlocking().last().body();
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataManagerInner> createAsync(String resourceGroupName, String dataManagerName, DataManagerInner dataManager, final ServiceCallback<DataManagerInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManager), serviceCallback);
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DataManagerInner> createAsync(String resourceGroupName, String dataManagerName, DataManagerInner dataManager) {
        return createWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManager).map(new Func1<ServiceResponse<DataManagerInner>, DataManagerInner>() {
            @Override
            public DataManagerInner call(ServiceResponse<DataManagerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DataManagerInner>> createWithServiceResponseAsync(String resourceGroupName, String dataManagerName, DataManagerInner dataManager) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dataManager == null) {
            throw new IllegalArgumentException("Parameter dataManager is required and cannot be null.");
        }
        Validator.validate(dataManager);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), dataManager, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DataManagerInner>() { }.getType());
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataManagerInner object if successful.
     */
    public DataManagerInner beginCreate(String resourceGroupName, String dataManagerName, DataManagerInner dataManager) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManager).toBlocking().single().body();
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataManagerInner> beginCreateAsync(String resourceGroupName, String dataManagerName, DataManagerInner dataManager, final ServiceCallback<DataManagerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManager), serviceCallback);
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<DataManagerInner> beginCreateAsync(String resourceGroupName, String dataManagerName, DataManagerInner dataManager) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManager).map(new Func1<ServiceResponse<DataManagerInner>, DataManagerInner>() {
            @Override
            public DataManagerInner call(ServiceResponse<DataManagerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
     and should instead be updated with the Update data manager resource API.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManager Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<ServiceResponse<DataManagerInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String dataManagerName, DataManagerInner dataManager) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dataManager == null) {
            throw new IllegalArgumentException("Parameter dataManager is required and cannot be null.");
        }
        Validator.validate(dataManager);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), dataManager, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataManagerInner>>>() {
                @Override
                public Observable<ServiceResponse<DataManagerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataManagerInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataManagerInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataManagerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataManagerInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String dataManagerName) {
        deleteWithServiceResponseAsync(resourceGroupName, dataManagerName).toBlocking().last().body();
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String dataManagerName) {
        return deleteWithServiceResponseAsync(resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String dataManagerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String dataManagerName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String dataManagerName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String dataManagerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataManagerInner object if successful.
     */
    public DataManagerInner update(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter) {
        return updateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter).toBlocking().last().body();
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataManagerInner> updateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, final ServiceCallback<DataManagerInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter), serviceCallback);
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DataManagerInner> updateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter) {
        return updateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter).map(new Func1<ServiceResponse<DataManagerInner>, DataManagerInner>() {
            @Override
            public DataManagerInner call(ServiceResponse<DataManagerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DataManagerInner>> updateWithServiceResponseAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dataManagerUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter dataManagerUpdateParameter is required and cannot be null.");
        }
        Validator.validate(dataManagerUpdateParameter);
        final String ifMatch = null;
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), ifMatch, dataManagerUpdateParameter, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DataManagerInner>() { }.getType());
    }
    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataManagerInner object if successful.
     */
    public DataManagerInner update(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch).toBlocking().last().body();
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataManagerInner> updateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch, final ServiceCallback<DataManagerInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch), serviceCallback);
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DataManagerInner> updateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch).map(new Func1<ServiceResponse<DataManagerInner>, DataManagerInner>() {
            @Override
            public DataManagerInner call(ServiceResponse<DataManagerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DataManagerInner>> updateWithServiceResponseAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dataManagerUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter dataManagerUpdateParameter is required and cannot be null.");
        }
        Validator.validate(dataManagerUpdateParameter);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), ifMatch, dataManagerUpdateParameter, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DataManagerInner>() { }.getType());
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataManagerInner object if successful.
     */
    public DataManagerInner beginUpdate(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter).toBlocking().single().body();
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataManagerInner> beginUpdateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, final ServiceCallback<DataManagerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter), serviceCallback);
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<DataManagerInner> beginUpdateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter).map(new Func1<ServiceResponse<DataManagerInner>, DataManagerInner>() {
            @Override
            public DataManagerInner call(ServiceResponse<DataManagerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<ServiceResponse<DataManagerInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dataManagerUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter dataManagerUpdateParameter is required and cannot be null.");
        }
        Validator.validate(dataManagerUpdateParameter);
        final String ifMatch = null;
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), ifMatch, dataManagerUpdateParameter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataManagerInner>>>() {
                @Override
                public Observable<ServiceResponse<DataManagerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataManagerInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataManagerInner object if successful.
     */
    public DataManagerInner beginUpdate(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch).toBlocking().single().body();
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataManagerInner> beginUpdateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch, final ServiceCallback<DataManagerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch), serviceCallback);
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<DataManagerInner> beginUpdateAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch).map(new Func1<ServiceResponse<DataManagerInner>, DataManagerInner>() {
            @Override
            public DataManagerInner call(ServiceResponse<DataManagerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the properties of an existing data manager resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataManagerUpdateParameter Data manager resource details from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataManagerInner object
     */
    public Observable<ServiceResponse<DataManagerInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dataManagerUpdateParameter == null) {
            throw new IllegalArgumentException("Parameter dataManagerUpdateParameter is required and cannot be null.");
        }
        Validator.validate(dataManagerUpdateParameter);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), ifMatch, dataManagerUpdateParameter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataManagerInner>>>() {
                @Override
                public Observable<ServiceResponse<DataManagerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataManagerInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataManagerInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataManagerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataManagerInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
