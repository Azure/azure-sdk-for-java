/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import com.microsoft.azure.management.hybriddata.JobStatus;
import org.joda.time.DateTime;
import com.microsoft.azure.management.hybriddata.IsJobCancellable;
import com.microsoft.azure.management.hybriddata.JobDetails;
import com.microsoft.azure.management.hybriddata.Error;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.hybriddata.DmsBaseObject;

/**
 * Data service job.
 */
@JsonFlatten
public class JobInner extends DmsBaseObject {
    /**
     * Status of the job. Possible values include: 'None', 'InProgress',
     * 'Succeeded', 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling'.
     */
    @JsonProperty(value = "status", required = true)
    private JobStatus status;

    /**
     * Time at which the job was started in UTC ISO 8601 format.
     */
    @JsonProperty(value = "startTime", required = true)
    private DateTime startTime;

    /**
     * Time at which the job ended in UTC ISO 8601 format.
     */
    @JsonProperty(value = "endTime")
    private DateTime endTime;

    /**
     * Describes whether the job is cancellable. Possible values include:
     * 'NotCancellable', 'Cancellable'.
     */
    @JsonProperty(value = "properties.isCancellable", required = true)
    private IsJobCancellable isCancellable;

    /**
     * Number of bytes processed by the job as of now.
     */
    @JsonProperty(value = "properties.bytesProcessed")
    private Long bytesProcessed;

    /**
     * Number of items processed by the job as of now.
     */
    @JsonProperty(value = "properties.itemsProcessed")
    private Long itemsProcessed;

    /**
     * Number of bytes to be processed by the job in total.
     */
    @JsonProperty(value = "properties.totalBytesToProcess")
    private Long totalBytesToProcess;

    /**
     * Number of items to be processed by the job in total.
     */
    @JsonProperty(value = "properties.totalItemsToProcess")
    private Long totalItemsToProcess;

    /**
     * Details of a job run. This field will only be sent for expand details
     * filter.
     */
    @JsonProperty(value = "properties.details")
    private JobDetails details;

    /**
     * Name of the data source on which the job was triggered.
     */
    @JsonProperty(value = "properties.dataSourceName")
    private String dataSourceName;

    /**
     * Name of the data sink on which the job was triggered.
     */
    @JsonProperty(value = "properties.dataSinkName")
    private String dataSinkName;

    /**
     * Top level error for the job.
     */
    @JsonProperty(value = "error")
    private Error error;

    /**
     * Get status of the job. Possible values include: 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling'.
     *
     * @return the status value
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set status of the job. Possible values include: 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling'.
     *
     * @param status the status value to set
     * @return the JobInner object itself.
     */
    public JobInner withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get time at which the job was started in UTC ISO 8601 format.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Set time at which the job was started in UTC ISO 8601 format.
     *
     * @param startTime the startTime value to set
     * @return the JobInner object itself.
     */
    public JobInner withStartTime(DateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get time at which the job ended in UTC ISO 8601 format.
     *
     * @return the endTime value
     */
    public DateTime endTime() {
        return this.endTime;
    }

    /**
     * Set time at which the job ended in UTC ISO 8601 format.
     *
     * @param endTime the endTime value to set
     * @return the JobInner object itself.
     */
    public JobInner withEndTime(DateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get describes whether the job is cancellable. Possible values include: 'NotCancellable', 'Cancellable'.
     *
     * @return the isCancellable value
     */
    public IsJobCancellable isCancellable() {
        return this.isCancellable;
    }

    /**
     * Set describes whether the job is cancellable. Possible values include: 'NotCancellable', 'Cancellable'.
     *
     * @param isCancellable the isCancellable value to set
     * @return the JobInner object itself.
     */
    public JobInner withIsCancellable(IsJobCancellable isCancellable) {
        this.isCancellable = isCancellable;
        return this;
    }

    /**
     * Get number of bytes processed by the job as of now.
     *
     * @return the bytesProcessed value
     */
    public Long bytesProcessed() {
        return this.bytesProcessed;
    }

    /**
     * Set number of bytes processed by the job as of now.
     *
     * @param bytesProcessed the bytesProcessed value to set
     * @return the JobInner object itself.
     */
    public JobInner withBytesProcessed(Long bytesProcessed) {
        this.bytesProcessed = bytesProcessed;
        return this;
    }

    /**
     * Get number of items processed by the job as of now.
     *
     * @return the itemsProcessed value
     */
    public Long itemsProcessed() {
        return this.itemsProcessed;
    }

    /**
     * Set number of items processed by the job as of now.
     *
     * @param itemsProcessed the itemsProcessed value to set
     * @return the JobInner object itself.
     */
    public JobInner withItemsProcessed(Long itemsProcessed) {
        this.itemsProcessed = itemsProcessed;
        return this;
    }

    /**
     * Get number of bytes to be processed by the job in total.
     *
     * @return the totalBytesToProcess value
     */
    public Long totalBytesToProcess() {
        return this.totalBytesToProcess;
    }

    /**
     * Set number of bytes to be processed by the job in total.
     *
     * @param totalBytesToProcess the totalBytesToProcess value to set
     * @return the JobInner object itself.
     */
    public JobInner withTotalBytesToProcess(Long totalBytesToProcess) {
        this.totalBytesToProcess = totalBytesToProcess;
        return this;
    }

    /**
     * Get number of items to be processed by the job in total.
     *
     * @return the totalItemsToProcess value
     */
    public Long totalItemsToProcess() {
        return this.totalItemsToProcess;
    }

    /**
     * Set number of items to be processed by the job in total.
     *
     * @param totalItemsToProcess the totalItemsToProcess value to set
     * @return the JobInner object itself.
     */
    public JobInner withTotalItemsToProcess(Long totalItemsToProcess) {
        this.totalItemsToProcess = totalItemsToProcess;
        return this;
    }

    /**
     * Get details of a job run. This field will only be sent for expand details filter.
     *
     * @return the details value
     */
    public JobDetails details() {
        return this.details;
    }

    /**
     * Set details of a job run. This field will only be sent for expand details filter.
     *
     * @param details the details value to set
     * @return the JobInner object itself.
     */
    public JobInner withDetails(JobDetails details) {
        this.details = details;
        return this;
    }

    /**
     * Get name of the data source on which the job was triggered.
     *
     * @return the dataSourceName value
     */
    public String dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Set name of the data source on which the job was triggered.
     *
     * @param dataSourceName the dataSourceName value to set
     * @return the JobInner object itself.
     */
    public JobInner withDataSourceName(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        return this;
    }

    /**
     * Get name of the data sink on which the job was triggered.
     *
     * @return the dataSinkName value
     */
    public String dataSinkName() {
        return this.dataSinkName;
    }

    /**
     * Set name of the data sink on which the job was triggered.
     *
     * @param dataSinkName the dataSinkName value to set
     * @return the JobInner object itself.
     */
    public JobInner withDataSinkName(String dataSinkName) {
        this.dataSinkName = dataSinkName;
        return this;
    }

    /**
     * Get top level error for the job.
     *
     * @return the error value
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set top level error for the job.
     *
     * @param error the error value to set
     * @return the JobInner object itself.
     */
    public JobInner withError(Error error) {
        this.error = error;
        return this;
    }

}
