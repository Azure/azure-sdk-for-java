/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import com.microsoft.azure.management.hybriddata.State;
import java.util.List;
import com.microsoft.azure.management.hybriddata.CustomerSecret;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.hybriddata.DmsBaseObject;

/**
 * Data store.
 */
@JsonFlatten
public class DataStoreInner extends DmsBaseObject {
    /**
     * Arm Id for the manager resource to which the data source is associated.
     * This is optional.
     */
    @JsonProperty(value = "properties.repositoryId")
    private String repositoryId;

    /**
     * State of the data source. Possible values include: 'Disabled',
     * 'Enabled', 'Supported'.
     */
    @JsonProperty(value = "properties.state", required = true)
    private State state;

    /**
     * A generic json used differently by each data source type.
     */
    @JsonProperty(value = "properties.extendedProperties")
    private Object extendedProperties;

    /**
     * The arm id of the data store type.
     */
    @JsonProperty(value = "properties.dataStoreTypeId", required = true)
    private String dataStoreTypeId;

    /**
     * List of customer secrets containing a key identifier and key value. The
     * key identifier is a way for the specific data source to understand the
     * key. Value contains customer secret encrypted by the encryptionKeys.
     */
    @JsonProperty(value = "properties.customerSecrets")
    private List<CustomerSecret> customerSecrets;

    /**
     * Get arm Id for the manager resource to which the data source is associated. This is optional.
     *
     * @return the repositoryId value
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * Set arm Id for the manager resource to which the data source is associated. This is optional.
     *
     * @param repositoryId the repositoryId value to set
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withRepositoryId(String repositoryId) {
        this.repositoryId = repositoryId;
        return this;
    }

    /**
     * Get state of the data source. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @return the state value
     */
    public State state() {
        return this.state;
    }

    /**
     * Set state of the data source. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @param state the state value to set
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get a generic json used differently by each data source type.
     *
     * @return the extendedProperties value
     */
    public Object extendedProperties() {
        return this.extendedProperties;
    }

    /**
     * Set a generic json used differently by each data source type.
     *
     * @param extendedProperties the extendedProperties value to set
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withExtendedProperties(Object extendedProperties) {
        this.extendedProperties = extendedProperties;
        return this;
    }

    /**
     * Get the arm id of the data store type.
     *
     * @return the dataStoreTypeId value
     */
    public String dataStoreTypeId() {
        return this.dataStoreTypeId;
    }

    /**
     * Set the arm id of the data store type.
     *
     * @param dataStoreTypeId the dataStoreTypeId value to set
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withDataStoreTypeId(String dataStoreTypeId) {
        this.dataStoreTypeId = dataStoreTypeId;
        return this;
    }

    /**
     * Get list of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     *
     * @return the customerSecrets value
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set list of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     *
     * @param customerSecrets the customerSecrets value to set
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

}
