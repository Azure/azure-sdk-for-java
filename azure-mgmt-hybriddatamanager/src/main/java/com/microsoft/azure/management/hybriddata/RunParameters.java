/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Run parameters for a job.
 */
public class RunParameters {
    /**
     * Enum to detect if user confirmation is required. If not passed will
     * default to NotRequired. Possible values include: 'NotRequired',
     * 'Required'.
     */
    @JsonProperty(value = "userConfirmation")
    private UserConfirmation userConfirmation;

    /**
     * A generic json used differently by each data service type.
     */
    @JsonProperty(value = "dataServiceInput")
    private Object dataServiceInput;

    /**
     * List of customer secrets containing a key identifier and key value. The
     * key identifier is a way for the specific data source to understand the
     * key. Value contains customer secret encrypted by the encryptionKeys.
     */
    @JsonProperty(value = "customerSecrets")
    private List<CustomerSecret> customerSecrets;

    /**
     * Get enum to detect if user confirmation is required. If not passed will default to NotRequired. Possible values include: 'NotRequired', 'Required'.
     *
     * @return the userConfirmation value
     */
    public UserConfirmation userConfirmation() {
        return this.userConfirmation;
    }

    /**
     * Set enum to detect if user confirmation is required. If not passed will default to NotRequired. Possible values include: 'NotRequired', 'Required'.
     *
     * @param userConfirmation the userConfirmation value to set
     * @return the RunParameters object itself.
     */
    public RunParameters withUserConfirmation(UserConfirmation userConfirmation) {
        this.userConfirmation = userConfirmation;
        return this;
    }

    /**
     * Get a generic json used differently by each data service type.
     *
     * @return the dataServiceInput value
     */
    public Object dataServiceInput() {
        return this.dataServiceInput;
    }

    /**
     * Set a generic json used differently by each data service type.
     *
     * @param dataServiceInput the dataServiceInput value to set
     * @return the RunParameters object itself.
     */
    public RunParameters withDataServiceInput(Object dataServiceInput) {
        this.dataServiceInput = dataServiceInput;
        return this;
    }

    /**
     * Get list of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     *
     * @return the customerSecrets value
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set list of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     *
     * @param customerSecrets the customerSecrets value to set
     * @return the RunParameters object itself.
     */
    public RunParameters withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

}
