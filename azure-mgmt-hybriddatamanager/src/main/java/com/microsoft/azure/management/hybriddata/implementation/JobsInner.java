/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public class JobsInner {
    /** The Retrofit service to perform REST calls. */
    private JobsService service;
    /** The service client containing this operation class. */
    private HybridDataManagementClientImpl client;

    /**
     * Initializes an instance of JobsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JobsInner(Retrofit retrofit, HybridDataManagementClientImpl client) {
        this.service = retrofit.create(JobsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Jobs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JobsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs listByJobDefinition" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs")
        Observable<Response<ResponseBody>> listByJobDefinition(@Path("dataServiceName") String dataServiceName, @Path("jobDefinitionName") String jobDefinitionName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}")
        Observable<Response<ResponseBody>> get(@Path("dataServiceName") String dataServiceName, @Path("jobDefinitionName") String jobDefinitionName, @Path("jobId") String jobId, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs cancel" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel")
        Observable<Response<ResponseBody>> cancel(@Path("dataServiceName") String dataServiceName, @Path("jobDefinitionName") String jobDefinitionName, @Path("jobId") String jobId, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs beginCancel" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel")
        Observable<Response<ResponseBody>> beginCancel(@Path("dataServiceName") String dataServiceName, @Path("jobDefinitionName") String jobDefinitionName, @Path("jobId") String jobId, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs resume" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume")
        Observable<Response<ResponseBody>> resume(@Path("dataServiceName") String dataServiceName, @Path("jobDefinitionName") String jobDefinitionName, @Path("jobId") String jobId, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs beginResume" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume")
        Observable<Response<ResponseBody>> beginResume(@Path("dataServiceName") String dataServiceName, @Path("jobDefinitionName") String jobDefinitionName, @Path("jobId") String jobId, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs listByDataService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs")
        Observable<Response<ResponseBody>> listByDataService(@Path("dataServiceName") String dataServiceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs listByDataManager" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs")
        Observable<Response<ResponseBody>> listByDataManager(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs listByJobDefinitionNext" })
        @GET
        Observable<Response<ResponseBody>> listByJobDefinitionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs listByDataServiceNext" })
        @GET
        Observable<Response<ResponseBody>> listByDataServiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.Jobs listByDataManagerNext" })
        @GET
        Observable<Response<ResponseBody>> listByDataManagerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByJobDefinition(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName) {
        ServiceResponse<Page<JobInner>> response = listByJobDefinitionSinglePageAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByJobDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByJobDefinitionAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByJobDefinitionSinglePageAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByJobDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByJobDefinitionAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName) {
        return listByJobDefinitionWithServiceResponseAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByJobDefinitionWithServiceResponseAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName) {
        return listByJobDefinitionSinglePageAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByJobDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByJobDefinitionSinglePageAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByJobDefinition(dataServiceName, jobDefinitionName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByJobDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByJobDefinition(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName, final String filter) {
        ServiceResponse<Page<JobInner>> response = listByJobDefinitionSinglePageAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByJobDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByJobDefinitionAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName, final String filter, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByJobDefinitionSinglePageAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByJobDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByJobDefinitionAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByJobDefinitionWithServiceResponseAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByJobDefinitionWithServiceResponseAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByJobDefinitionSinglePageAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByJobDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
    ServiceResponse<PageImpl<JobInner>> * @param dataServiceName The name of the data service of the job definition.
    ServiceResponse<PageImpl<JobInner>> * @param jobDefinitionName The name of the job definition for which jobs are needed.
    ServiceResponse<PageImpl<JobInner>> * @param resourceGroupName The Resource Group Name
    ServiceResponse<PageImpl<JobInner>> * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
    ServiceResponse<PageImpl<JobInner>> * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByJobDefinitionSinglePageAsync(final String dataServiceName, final String jobDefinitionName, final String resourceGroupName, final String dataManagerName, final String filter) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByJobDefinition(dataServiceName, jobDefinitionName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByJobDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobInner>> listByJobDefinitionDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobInner object if successful.
     */
    public JobInner get(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        return getWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobInner> getAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, final ServiceCallback<JobInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobInner object
     */
    public Observable<JobInner> getAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        return getWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<JobInner>, JobInner>() {
            @Override
            public JobInner call(ServiceResponse<JobInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobInner object
     */
    public Observable<ServiceResponse<JobInner>> getWithServiceResponseAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.get(dataServiceName, jobDefinitionName, jobId, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobInner>>>() {
                @Override
                public Observable<ServiceResponse<JobInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobInner object if successful.
     */
    public JobInner get(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, String expand) {
        return getWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand).toBlocking().single().body();
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobInner> getAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, String expand, final ServiceCallback<JobInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand), serviceCallback);
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobInner object
     */
    public Observable<JobInner> getAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, String expand) {
        return getWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand).map(new Func1<ServiceResponse<JobInner>, JobInner>() {
            @Override
            public JobInner call(ServiceResponse<JobInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobInner object
     */
    public Observable<ServiceResponse<JobInner>> getWithServiceResponseAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, String expand) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(dataServiceName, jobDefinitionName, jobId, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobInner>>>() {
                @Override
                public Observable<ServiceResponse<JobInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void cancel(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        cancelWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).toBlocking().last().body();
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> cancelAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(cancelWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> cancelAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        return cancelWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.cancel(dataServiceName, jobDefinitionName, jobId, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginCancel(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        beginCancelWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginCancelAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginCancelWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginCancelAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        return beginCancelWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginCancelWithServiceResponseAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCancel(dataServiceName, jobDefinitionName, jobId, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginCancelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginCancelDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void resume(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        resumeWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).toBlocking().last().body();
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> resumeAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(resumeWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> resumeAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        return resumeWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> resumeWithServiceResponseAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.resume(dataServiceName, jobDefinitionName, jobId, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginResume(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        beginResumeWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginResumeAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginResumeWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginResumeAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        return beginResumeWithServiceResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginResumeWithServiceResponseAsync(String dataServiceName, String jobDefinitionName, String jobId, String resourceGroupName, String dataManagerName) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (jobDefinitionName == null) {
            throw new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginResume(dataServiceName, jobDefinitionName, jobId, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginResumeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginResumeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByDataService(final String dataServiceName, final String resourceGroupName, final String dataManagerName) {
        ServiceResponse<Page<JobInner>> response = listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByDataServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByDataServiceAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByDataServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByDataServiceAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName) {
        return listByDataServiceWithServiceResponseAsync(dataServiceName, resourceGroupName, dataManagerName)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataServiceWithServiceResponseAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName) {
        return listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataServiceSinglePageAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByDataService(dataServiceName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByDataServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByDataService(final String dataServiceName, final String resourceGroupName, final String dataManagerName, final String filter) {
        ServiceResponse<Page<JobInner>> response = listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName, filter).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByDataServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByDataServiceAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName, final String filter, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByDataServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByDataServiceAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByDataServiceWithServiceResponseAsync(dataServiceName, resourceGroupName, dataManagerName, filter)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataServiceWithServiceResponseAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
    ServiceResponse<PageImpl<JobInner>> * @param dataServiceName The name of the data service of interest.
    ServiceResponse<PageImpl<JobInner>> * @param resourceGroupName The Resource Group Name
    ServiceResponse<PageImpl<JobInner>> * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
    ServiceResponse<PageImpl<JobInner>> * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataServiceSinglePageAsync(final String dataServiceName, final String resourceGroupName, final String dataManagerName, final String filter) {
        if (dataServiceName == null) {
            throw new IllegalArgumentException("Parameter dataServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDataService(dataServiceName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByDataServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobInner>> listByDataServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByDataManager(final String resourceGroupName, final String dataManagerName) {
        ServiceResponse<Page<JobInner>> response = listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName) {
        return listByDataManagerWithServiceResponseAsync(resourceGroupName, dataManagerName)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataManagerWithServiceResponseAsync(final String resourceGroupName, final String dataManagerName) {
        return listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataManagerSinglePageAsync(final String resourceGroupName, final String dataManagerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByDataManager(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByDataManagerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByDataManager(final String resourceGroupName, final String dataManagerName, final String filter) {
        ServiceResponse<Page<JobInner>> response = listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName, final String filter, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByDataManagerWithServiceResponseAsync(resourceGroupName, dataManagerName, filter)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataManagerWithServiceResponseAsync(final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
    ServiceResponse<PageImpl<JobInner>> * @param resourceGroupName The Resource Group Name
    ServiceResponse<PageImpl<JobInner>> * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
    ServiceResponse<PageImpl<JobInner>> * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataManagerSinglePageAsync(final String resourceGroupName, final String dataManagerName, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDataManager(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByDataManagerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobInner>> listByDataManagerDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByJobDefinitionNext(final String nextPageLink) {
        ServiceResponse<Page<JobInner>> response = listByJobDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByJobDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByJobDefinitionNextAsync(final String nextPageLink, final ServiceFuture<List<JobInner>> serviceFuture, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByJobDefinitionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByJobDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByJobDefinitionNextAsync(final String nextPageLink) {
        return listByJobDefinitionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByJobDefinitionNextWithServiceResponseAsync(final String nextPageLink) {
        return listByJobDefinitionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByJobDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
    ServiceResponse<PageImpl<JobInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByJobDefinitionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByJobDefinitionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByJobDefinitionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobInner>> listByJobDefinitionNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByDataServiceNext(final String nextPageLink) {
        ServiceResponse<Page<JobInner>> response = listByDataServiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByDataServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByDataServiceNextAsync(final String nextPageLink, final ServiceFuture<List<JobInner>> serviceFuture, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataServiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByDataServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByDataServiceNextAsync(final String nextPageLink) {
        return listByDataServiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataServiceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByDataServiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
    ServiceResponse<PageImpl<JobInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataServiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDataServiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByDataServiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobInner>> listByDataServiceNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobInner&gt; object if successful.
     */
    public PagedList<JobInner> listByDataManagerNext(final String nextPageLink) {
        ServiceResponse<Page<JobInner>> response = listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobInner>(response.body()) {
            @Override
            public Page<JobInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobInner>> listByDataManagerNextAsync(final String nextPageLink, final ServiceFuture<List<JobInner>> serviceFuture, final ListOperationCallback<JobInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<Page<JobInner>> listByDataManagerNextAsync(final String nextPageLink) {
        return listByDataManagerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobInner>>, Page<JobInner>>() {
                @Override
                public Page<JobInner> call(ServiceResponse<Page<JobInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataManagerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByDataManagerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobInner>>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(ServiceResponse<Page<JobInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
    ServiceResponse<PageImpl<JobInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobInner>>> listByDataManagerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDataManagerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobInner>> result = listByDataManagerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobInner>> listByDataManagerNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
