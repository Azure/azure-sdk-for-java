/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DataStoreTypes.
 */
public class DataStoreTypesInner {
    /** The Retrofit service to perform REST calls. */
    private DataStoreTypesService service;
    /** The service client containing this operation class. */
    private HybridDataManagementClientImpl client;

    /**
     * Initializes an instance of DataStoreTypesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DataStoreTypesInner(Retrofit retrofit, HybridDataManagementClientImpl client) {
        this.service = retrofit.create(DataStoreTypesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DataStoreTypes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DataStoreTypesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStoreTypes listByDataManager" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes")
        Observable<Response<ResponseBody>> listByDataManager(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStoreTypes get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes/{dataStoreTypeName}")
        Observable<Response<ResponseBody>> get(@Path("dataStoreTypeName") String dataStoreTypeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStoreTypes listByDataManagerNext" })
        @GET
        Observable<Response<ResponseBody>> listByDataManagerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataStoreTypeInner&gt; object if successful.
     */
    public PagedList<DataStoreTypeInner> listByDataManager(final String resourceGroupName, final String dataManagerName) {
        ServiceResponse<Page<DataStoreTypeInner>> response = listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName).toBlocking().single();
        return new PagedList<DataStoreTypeInner>(response.body()) {
            @Override
            public Page<DataStoreTypeInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataStoreTypeInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName, final ListOperationCallback<DataStoreTypeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName),
            new Func1<String, Observable<ServiceResponse<Page<DataStoreTypeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreTypeInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreTypeInner&gt; object
     */
    public Observable<Page<DataStoreTypeInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName) {
        return listByDataManagerWithServiceResponseAsync(resourceGroupName, dataManagerName)
            .map(new Func1<ServiceResponse<Page<DataStoreTypeInner>>, Page<DataStoreTypeInner>>() {
                @Override
                public Page<DataStoreTypeInner> call(ServiceResponse<Page<DataStoreTypeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreTypeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataStoreTypeInner>>> listByDataManagerWithServiceResponseAsync(final String resourceGroupName, final String dataManagerName) {
        return listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName)
            .concatMap(new Func1<ServiceResponse<Page<DataStoreTypeInner>>, Observable<ServiceResponse<Page<DataStoreTypeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreTypeInner>>> call(ServiceResponse<Page<DataStoreTypeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
    ServiceResponse<PageImpl<DataStoreTypeInner>> * @param resourceGroupName The Resource Group Name
    ServiceResponse<PageImpl<DataStoreTypeInner>> * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataStoreTypeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataStoreTypeInner>>> listByDataManagerSinglePageAsync(final String resourceGroupName, final String dataManagerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDataManager(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataStoreTypeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreTypeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataStoreTypeInner>> result = listByDataManagerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataStoreTypeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataStoreTypeInner>> listByDataManagerDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataStoreTypeInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataStoreTypeInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the data store/repository type given its name.
     *
     * @param dataStoreTypeName The data store/repository type name for which details are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataStoreTypeInner object if successful.
     */
    public DataStoreTypeInner get(String dataStoreTypeName, String resourceGroupName, String dataManagerName) {
        return getWithServiceResponseAsync(dataStoreTypeName, resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * Gets the data store/repository type given its name.
     *
     * @param dataStoreTypeName The data store/repository type name for which details are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataStoreTypeInner> getAsync(String dataStoreTypeName, String resourceGroupName, String dataManagerName, final ServiceCallback<DataStoreTypeInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(dataStoreTypeName, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * Gets the data store/repository type given its name.
     *
     * @param dataStoreTypeName The data store/repository type name for which details are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataStoreTypeInner object
     */
    public Observable<DataStoreTypeInner> getAsync(String dataStoreTypeName, String resourceGroupName, String dataManagerName) {
        return getWithServiceResponseAsync(dataStoreTypeName, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<DataStoreTypeInner>, DataStoreTypeInner>() {
            @Override
            public DataStoreTypeInner call(ServiceResponse<DataStoreTypeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the data store/repository type given its name.
     *
     * @param dataStoreTypeName The data store/repository type name for which details are needed.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataStoreTypeInner object
     */
    public Observable<ServiceResponse<DataStoreTypeInner>> getWithServiceResponseAsync(String dataStoreTypeName, String resourceGroupName, String dataManagerName) {
        if (dataStoreTypeName == null) {
            throw new IllegalArgumentException("Parameter dataStoreTypeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(dataStoreTypeName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataStoreTypeInner>>>() {
                @Override
                public Observable<ServiceResponse<DataStoreTypeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataStoreTypeInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataStoreTypeInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataStoreTypeInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataStoreTypeInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataStoreTypeInner&gt; object if successful.
     */
    public PagedList<DataStoreTypeInner> listByDataManagerNext(final String nextPageLink) {
        ServiceResponse<Page<DataStoreTypeInner>> response = listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DataStoreTypeInner>(response.body()) {
            @Override
            public Page<DataStoreTypeInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataStoreTypeInner>> listByDataManagerNextAsync(final String nextPageLink, final ServiceFuture<List<DataStoreTypeInner>> serviceFuture, final ListOperationCallback<DataStoreTypeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DataStoreTypeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreTypeInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreTypeInner&gt; object
     */
    public Observable<Page<DataStoreTypeInner>> listByDataManagerNextAsync(final String nextPageLink) {
        return listByDataManagerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DataStoreTypeInner>>, Page<DataStoreTypeInner>>() {
                @Override
                public Page<DataStoreTypeInner> call(ServiceResponse<Page<DataStoreTypeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreTypeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataStoreTypeInner>>> listByDataManagerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByDataManagerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DataStoreTypeInner>>, Observable<ServiceResponse<Page<DataStoreTypeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreTypeInner>>> call(ServiceResponse<Page<DataStoreTypeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the data store/repository types that the resource supports.
     *
    ServiceResponse<PageImpl<DataStoreTypeInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataStoreTypeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataStoreTypeInner>>> listByDataManagerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDataManagerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataStoreTypeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreTypeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataStoreTypeInner>> result = listByDataManagerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataStoreTypeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataStoreTypeInner>> listByDataManagerNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataStoreTypeInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataStoreTypeInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
