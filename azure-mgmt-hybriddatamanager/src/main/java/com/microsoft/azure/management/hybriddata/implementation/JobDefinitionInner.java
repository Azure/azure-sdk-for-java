/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import java.util.List;
import com.microsoft.azure.management.hybriddata.Schedule;
import com.microsoft.azure.management.hybriddata.State;
import org.joda.time.DateTime;
import com.microsoft.azure.management.hybriddata.RunLocation;
import com.microsoft.azure.management.hybriddata.UserConfirmation;
import com.microsoft.azure.management.hybriddata.CustomerSecret;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.hybriddata.DmsBaseObject;

/**
 * Job Definition.
 */
@JsonFlatten
public class JobDefinitionInner extends DmsBaseObject {
    /**
     * Data Source Id associated to the job definition.
     */
    @JsonProperty(value = "properties.dataSourceId", required = true)
    private String dataSourceId;

    /**
     * Data Sink Id associated to the job definition.
     */
    @JsonProperty(value = "properties.dataSinkId", required = true)
    private String dataSinkId;

    /**
     * Schedule for running the job definition.
     */
    @JsonProperty(value = "properties.schedules")
    private List<Schedule> schedules;

    /**
     * State of the job definition. Possible values include: 'Disabled',
     * 'Enabled', 'Supported'.
     */
    @JsonProperty(value = "properties.state", required = true)
    private State state;

    /**
     * Last modified time of the job definition.
     */
    @JsonProperty(value = "properties.lastModifiedTime")
    private DateTime lastModifiedTime;

    /**
     * This is the preferred geo location for the job to run. Possible values
     * include: 'none', 'australiaeast', 'australiasoutheast', 'brazilsouth',
     * 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia',
     * 'eastus', 'eastus2', 'japaneast', 'japanwest', 'koreacentral',
     * 'koreasouth', 'southeastasia', 'southcentralus', 'southindia',
     * 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus',
     * 'westeurope', 'westindia', 'westus', 'westus2'.
     */
    @JsonProperty(value = "properties.runLocation")
    private RunLocation runLocation;

    /**
     * Enum to detect if user confirmation is required. If not passed will
     * default to NotRequired. Possible values include: 'NotRequired',
     * 'Required'.
     */
    @JsonProperty(value = "properties.userConfirmation")
    private UserConfirmation userConfirmation;

    /**
     * A generic json used differently by each data service type.
     */
    @JsonProperty(value = "properties.dataServiceInput")
    private Object dataServiceInput;

    /**
     * List of customer secrets containing a key identifier and key value. The
     * key identifier is a way for the specific data source to understand the
     * key. Value contains customer secret encrypted by the encryptionKeys.
     */
    @JsonProperty(value = "properties.customerSecrets")
    private List<CustomerSecret> customerSecrets;

    /**
     * Get data Source Id associated to the job definition.
     *
     * @return the dataSourceId value
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Set data Source Id associated to the job definition.
     *
     * @param dataSourceId the dataSourceId value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }

    /**
     * Get data Sink Id associated to the job definition.
     *
     * @return the dataSinkId value
     */
    public String dataSinkId() {
        return this.dataSinkId;
    }

    /**
     * Set data Sink Id associated to the job definition.
     *
     * @param dataSinkId the dataSinkId value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataSinkId(String dataSinkId) {
        this.dataSinkId = dataSinkId;
        return this;
    }

    /**
     * Get schedule for running the job definition.
     *
     * @return the schedules value
     */
    public List<Schedule> schedules() {
        return this.schedules;
    }

    /**
     * Set schedule for running the job definition.
     *
     * @param schedules the schedules value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withSchedules(List<Schedule> schedules) {
        this.schedules = schedules;
        return this;
    }

    /**
     * Get state of the job definition. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @return the state value
     */
    public State state() {
        return this.state;
    }

    /**
     * Set state of the job definition. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @param state the state value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get last modified time of the job definition.
     *
     * @return the lastModifiedTime value
     */
    public DateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Set last modified time of the job definition.
     *
     * @param lastModifiedTime the lastModifiedTime value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withLastModifiedTime(DateTime lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }

    /**
     * Get this is the preferred geo location for the job to run. Possible values include: 'none', 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia', 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'.
     *
     * @return the runLocation value
     */
    public RunLocation runLocation() {
        return this.runLocation;
    }

    /**
     * Set this is the preferred geo location for the job to run. Possible values include: 'none', 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia', 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'.
     *
     * @param runLocation the runLocation value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withRunLocation(RunLocation runLocation) {
        this.runLocation = runLocation;
        return this;
    }

    /**
     * Get enum to detect if user confirmation is required. If not passed will default to NotRequired. Possible values include: 'NotRequired', 'Required'.
     *
     * @return the userConfirmation value
     */
    public UserConfirmation userConfirmation() {
        return this.userConfirmation;
    }

    /**
     * Set enum to detect if user confirmation is required. If not passed will default to NotRequired. Possible values include: 'NotRequired', 'Required'.
     *
     * @param userConfirmation the userConfirmation value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withUserConfirmation(UserConfirmation userConfirmation) {
        this.userConfirmation = userConfirmation;
        return this;
    }

    /**
     * Get a generic json used differently by each data service type.
     *
     * @return the dataServiceInput value
     */
    public Object dataServiceInput() {
        return this.dataServiceInput;
    }

    /**
     * Set a generic json used differently by each data service type.
     *
     * @param dataServiceInput the dataServiceInput value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataServiceInput(Object dataServiceInput) {
        this.dataServiceInput = dataServiceInput;
        return this;
    }

    /**
     * Get list of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     *
     * @return the customerSecrets value
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set list of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     *
     * @param customerSecrets the customerSecrets value to set
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

}
