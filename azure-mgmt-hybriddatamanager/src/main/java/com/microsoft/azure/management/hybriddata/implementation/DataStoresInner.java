/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DataStores.
 */
public class DataStoresInner {
    /** The Retrofit service to perform REST calls. */
    private DataStoresService service;
    /** The service client containing this operation class. */
    private HybridDataManagementClientImpl client;

    /**
     * Initializes an instance of DataStoresInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DataStoresInner(Retrofit retrofit, HybridDataManagementClientImpl client) {
        this.service = retrofit.create(DataStoresService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DataStores to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DataStoresService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStores listByDataManager" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores")
        Observable<Response<ResponseBody>> listByDataManager(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStores get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}")
        Observable<Response<ResponseBody>> get(@Path("dataStoreName") String dataStoreName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStores createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("dataStoreName") String dataStoreName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Body DataStoreInner dataStore, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStores beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("dataStoreName") String dataStoreName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Body DataStoreInner dataStore, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStores delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("dataStoreName") String dataStoreName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStores beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("dataStoreName") String dataStoreName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dataManagerName") String dataManagerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybriddata.DataStores listByDataManagerNext" })
        @GET
        Observable<Response<ResponseBody>> listByDataManagerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataStoreInner&gt; object if successful.
     */
    public PagedList<DataStoreInner> listByDataManager(final String resourceGroupName, final String dataManagerName) {
        ServiceResponse<Page<DataStoreInner>> response = listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName).toBlocking().single();
        return new PagedList<DataStoreInner>(response.body()) {
            @Override
            public Page<DataStoreInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataStoreInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName, final ListOperationCallback<DataStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName),
            new Func1<String, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreInner&gt; object
     */
    public Observable<Page<DataStoreInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName) {
        return listByDataManagerWithServiceResponseAsync(resourceGroupName, dataManagerName)
            .map(new Func1<ServiceResponse<Page<DataStoreInner>>, Page<DataStoreInner>>() {
                @Override
                public Page<DataStoreInner> call(ServiceResponse<Page<DataStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataStoreInner>>> listByDataManagerWithServiceResponseAsync(final String resourceGroupName, final String dataManagerName) {
        return listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName)
            .concatMap(new Func1<ServiceResponse<Page<DataStoreInner>>, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(ServiceResponse<Page<DataStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataStoreInner>>> listByDataManagerSinglePageAsync(final String resourceGroupName, final String dataManagerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByDataManager(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataStoreInner>> result = listByDataManagerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataStoreInner&gt; object if successful.
     */
    public PagedList<DataStoreInner> listByDataManager(final String resourceGroupName, final String dataManagerName, final String filter) {
        ServiceResponse<Page<DataStoreInner>> response = listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter).toBlocking().single();
        return new PagedList<DataStoreInner>(response.body()) {
            @Override
            public Page<DataStoreInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataStoreInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName, final String filter, final ListOperationCallback<DataStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter),
            new Func1<String, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreInner&gt; object
     */
    public Observable<Page<DataStoreInner>> listByDataManagerAsync(final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByDataManagerWithServiceResponseAsync(resourceGroupName, dataManagerName, filter)
            .map(new Func1<ServiceResponse<Page<DataStoreInner>>, Page<DataStoreInner>>() {
                @Override
                public Page<DataStoreInner> call(ServiceResponse<Page<DataStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataStoreInner>>> listByDataManagerWithServiceResponseAsync(final String resourceGroupName, final String dataManagerName, final String filter) {
        return listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter)
            .concatMap(new Func1<ServiceResponse<Page<DataStoreInner>>, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(ServiceResponse<Page<DataStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
    ServiceResponse<PageImpl<DataStoreInner>> * @param resourceGroupName The Resource Group Name
    ServiceResponse<PageImpl<DataStoreInner>> * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
    ServiceResponse<PageImpl<DataStoreInner>> * @param filter OData Filter options
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataStoreInner>>> listByDataManagerSinglePageAsync(final String resourceGroupName, final String dataManagerName, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDataManager(this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataStoreInner>> result = listByDataManagerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataStoreInner>> listByDataManagerDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataStoreInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataStoreInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method gets the data store/repository by name.
     *
     * @param dataStoreName The data store/repository name queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataStoreInner object if successful.
     */
    public DataStoreInner get(String dataStoreName, String resourceGroupName, String dataManagerName) {
        return getWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * This method gets the data store/repository by name.
     *
     * @param dataStoreName The data store/repository name queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataStoreInner> getAsync(String dataStoreName, String resourceGroupName, String dataManagerName, final ServiceCallback<DataStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * This method gets the data store/repository by name.
     *
     * @param dataStoreName The data store/repository name queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataStoreInner object
     */
    public Observable<DataStoreInner> getAsync(String dataStoreName, String resourceGroupName, String dataManagerName) {
        return getWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<DataStoreInner>, DataStoreInner>() {
            @Override
            public DataStoreInner call(ServiceResponse<DataStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This method gets the data store/repository by name.
     *
     * @param dataStoreName The data store/repository name queried.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataStoreInner object
     */
    public Observable<ServiceResponse<DataStoreInner>> getWithServiceResponseAsync(String dataStoreName, String resourceGroupName, String dataManagerName) {
        if (dataStoreName == null) {
            throw new IllegalArgumentException("Parameter dataStoreName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(dataStoreName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataStoreInner>>>() {
                @Override
                public Observable<ServiceResponse<DataStoreInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataStoreInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataStoreInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataStoreInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataStoreInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataStoreInner object if successful.
     */
    public DataStoreInner createOrUpdate(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore) {
        return createOrUpdateWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName, dataStore).toBlocking().last().body();
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataStoreInner> createOrUpdateAsync(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore, final ServiceCallback<DataStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName, dataStore), serviceCallback);
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DataStoreInner> createOrUpdateAsync(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore) {
        return createOrUpdateWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName, dataStore).map(new Func1<ServiceResponse<DataStoreInner>, DataStoreInner>() {
            @Override
            public DataStoreInner call(ServiceResponse<DataStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DataStoreInner>> createOrUpdateWithServiceResponseAsync(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore) {
        if (dataStoreName == null) {
            throw new IllegalArgumentException("Parameter dataStoreName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (dataStore == null) {
            throw new IllegalArgumentException("Parameter dataStore is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataStore);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(dataStoreName, this.client.subscriptionId(), resourceGroupName, dataManagerName, dataStore, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DataStoreInner>() { }.getType());
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataStoreInner object if successful.
     */
    public DataStoreInner beginCreateOrUpdate(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore) {
        return beginCreateOrUpdateWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName, dataStore).toBlocking().single().body();
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataStoreInner> beginCreateOrUpdateAsync(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore, final ServiceCallback<DataStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName, dataStore), serviceCallback);
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataStoreInner object
     */
    public Observable<DataStoreInner> beginCreateOrUpdateAsync(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore) {
        return beginCreateOrUpdateWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName, dataStore).map(new Func1<ServiceResponse<DataStoreInner>, DataStoreInner>() {
            @Override
            public DataStoreInner call(ServiceResponse<DataStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param dataStoreName The data store/repository name to be created or updated.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param dataStore The data store/repository object to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataStoreInner object
     */
    public Observable<ServiceResponse<DataStoreInner>> beginCreateOrUpdateWithServiceResponseAsync(String dataStoreName, String resourceGroupName, String dataManagerName, DataStoreInner dataStore) {
        if (dataStoreName == null) {
            throw new IllegalArgumentException("Parameter dataStoreName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (dataStore == null) {
            throw new IllegalArgumentException("Parameter dataStore is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataStore);
        return service.beginCreateOrUpdate(dataStoreName, this.client.subscriptionId(), resourceGroupName, dataManagerName, dataStore, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataStoreInner>>>() {
                @Override
                public Observable<ServiceResponse<DataStoreInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataStoreInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataStoreInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataStoreInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataStoreInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String dataStoreName, String resourceGroupName, String dataManagerName) {
        deleteWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName).toBlocking().last().body();
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String dataStoreName, String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String dataStoreName, String resourceGroupName, String dataManagerName) {
        return deleteWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String dataStoreName, String resourceGroupName, String dataManagerName) {
        if (dataStoreName == null) {
            throw new IllegalArgumentException("Parameter dataStoreName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(dataStoreName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String dataStoreName, String resourceGroupName, String dataManagerName) {
        beginDeleteWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName).toBlocking().single().body();
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String dataStoreName, String resourceGroupName, String dataManagerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName), serviceCallback);
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String dataStoreName, String resourceGroupName, String dataManagerName) {
        return beginDeleteWithServiceResponseAsync(dataStoreName, resourceGroupName, dataManagerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * This method deletes the given data store/repository.
     *
     * @param dataStoreName The data store/repository name to be deleted.
     * @param resourceGroupName The Resource Group Name
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String dataStoreName, String resourceGroupName, String dataManagerName) {
        if (dataStoreName == null) {
            throw new IllegalArgumentException("Parameter dataStoreName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataManagerName == null) {
            throw new IllegalArgumentException("Parameter dataManagerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(dataStoreName, this.client.subscriptionId(), resourceGroupName, dataManagerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataStoreInner&gt; object if successful.
     */
    public PagedList<DataStoreInner> listByDataManagerNext(final String nextPageLink) {
        ServiceResponse<Page<DataStoreInner>> response = listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DataStoreInner>(response.body()) {
            @Override
            public Page<DataStoreInner> nextPage(String nextPageLink) {
                return listByDataManagerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataStoreInner>> listByDataManagerNextAsync(final String nextPageLink, final ServiceFuture<List<DataStoreInner>> serviceFuture, final ListOperationCallback<DataStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataManagerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(String nextPageLink) {
                    return listByDataManagerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreInner&gt; object
     */
    public Observable<Page<DataStoreInner>> listByDataManagerNextAsync(final String nextPageLink) {
        return listByDataManagerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DataStoreInner>>, Page<DataStoreInner>>() {
                @Override
                public Page<DataStoreInner> call(ServiceResponse<Page<DataStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataStoreInner>>> listByDataManagerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByDataManagerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DataStoreInner>>, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(ServiceResponse<Page<DataStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataManagerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the data stores/repositories in the given resource.
     *
    ServiceResponse<PageImpl<DataStoreInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataStoreInner>>> listByDataManagerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDataManagerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataStoreInner>> result = listByDataManagerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataStoreInner>> listByDataManagerNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataStoreInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataStoreInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
