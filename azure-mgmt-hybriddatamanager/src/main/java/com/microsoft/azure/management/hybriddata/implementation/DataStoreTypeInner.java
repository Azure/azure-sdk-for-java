/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybriddata.implementation;

import com.microsoft.azure.management.hybriddata.State;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.hybriddata.DmsBaseObject;

/**
 * Data Store Type.
 */
@JsonFlatten
public class DataStoreTypeInner extends DmsBaseObject {
    /**
     * Arm type for the manager resource to which the data source type is
     * associated. This is optional.
     */
    @JsonProperty(value = "properties.repositoryType")
    private String repositoryType;

    /**
     * State of the data store type. Possible values include: 'Disabled',
     * 'Enabled', 'Supported'.
     */
    @JsonProperty(value = "properties.state", required = true)
    private State state;

    /**
     * Supported data services where it can be used as a sink.
     */
    @JsonProperty(value = "properties.supportedDataServicesAsSink")
    private List<String> supportedDataServicesAsSink;

    /**
     * Supported data services where it can be used as a source.
     */
    @JsonProperty(value = "properties.supportedDataServicesAsSource")
    private List<String> supportedDataServicesAsSource;

    /**
     * Get arm type for the manager resource to which the data source type is associated. This is optional.
     *
     * @return the repositoryType value
     */
    public String repositoryType() {
        return this.repositoryType;
    }

    /**
     * Set arm type for the manager resource to which the data source type is associated. This is optional.
     *
     * @param repositoryType the repositoryType value to set
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withRepositoryType(String repositoryType) {
        this.repositoryType = repositoryType;
        return this;
    }

    /**
     * Get state of the data store type. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @return the state value
     */
    public State state() {
        return this.state;
    }

    /**
     * Set state of the data store type. Possible values include: 'Disabled', 'Enabled', 'Supported'.
     *
     * @param state the state value to set
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get supported data services where it can be used as a sink.
     *
     * @return the supportedDataServicesAsSink value
     */
    public List<String> supportedDataServicesAsSink() {
        return this.supportedDataServicesAsSink;
    }

    /**
     * Set supported data services where it can be used as a sink.
     *
     * @param supportedDataServicesAsSink the supportedDataServicesAsSink value to set
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withSupportedDataServicesAsSink(List<String> supportedDataServicesAsSink) {
        this.supportedDataServicesAsSink = supportedDataServicesAsSink;
        return this;
    }

    /**
     * Get supported data services where it can be used as a source.
     *
     * @return the supportedDataServicesAsSource value
     */
    public List<String> supportedDataServicesAsSource() {
        return this.supportedDataServicesAsSource;
    }

    /**
     * Set supported data services where it can be used as a source.
     *
     * @param supportedDataServicesAsSource the supportedDataServicesAsSource value to set
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withSupportedDataServicesAsSource(List<String> supportedDataServicesAsSource) {
        this.supportedDataServicesAsSource = supportedDataServicesAsSource;
        return this;
    }

}
