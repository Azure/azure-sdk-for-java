/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2015_04_08.implementation;

import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongoCollection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongoCollectionCreateUpdateParameters;
import java.util.Map;
import java.util.List;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongoIndex;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongoCollectionResource;
import rx.functions.Func1;

class MongoCollectionImpl extends CreatableUpdatableImpl<MongoCollection, MongoCollectionInner, MongoCollectionImpl> implements MongoCollection, MongoCollection.Definition, MongoCollection.Update {
    private final DocumentDBManager manager;
    private String resourceGroupName;
    private String accountName;
    private String databaseRid;
    private String collectionRid;
    private MongoCollectionCreateUpdateParameters createOrUpdateParameter;

    MongoCollectionImpl(String name, DocumentDBManager manager) {
        super(name, new MongoCollectionInner());
        this.manager = manager;
        // Set resource name
        this.collectionRid = name;
        //
        this.createOrUpdateParameter = new MongoCollectionCreateUpdateParameters();
    }

    MongoCollectionImpl(MongoCollectionInner inner, DocumentDBManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.collectionRid = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "databaseAccounts");
        this.databaseRid = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.collectionRid = IdParsingUtils.getValueFromIdByName(inner.id(), "collections");
        //
        this.createOrUpdateParameter = new MongoCollectionCreateUpdateParameters();
    }

    @Override
    public DocumentDBManager manager() {
        return this.manager;
    }

    @Override
    public Observable<MongoCollection> createResourceAsync() {
        DatabaseAccountsInner client = this.manager().inner().databaseAccounts();
        return client.createUpdateMongoCollectionAsync(this.resourceGroupName, this.accountName, this.databaseRid, this.collectionRid, this.createOrUpdateParameter)
            .map(new Func1<MongoCollectionInner, MongoCollectionInner>() {
               @Override
               public MongoCollectionInner call(MongoCollectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<MongoCollection> updateResourceAsync() {
        DatabaseAccountsInner client = this.manager().inner().databaseAccounts();
        return client.createUpdateMongoCollectionAsync(this.resourceGroupName, this.accountName, this.databaseRid, this.collectionRid, this.createOrUpdateParameter)
            .map(new Func1<MongoCollectionInner, MongoCollectionInner>() {
               @Override
               public MongoCollectionInner call(MongoCollectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MongoCollectionInner> getInnerAsync() {
        DatabaseAccountsInner client = this.manager().inner().databaseAccounts();
        return client.getMongoCollectionAsync(this.resourceGroupName, this.accountName, this.databaseRid, this.collectionRid);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new MongoCollectionCreateUpdateParameters();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<MongoIndex> indexes() {
        return this.inner().indexes();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String mongoCollectionId() {
        return this.inner().mongoCollectionId();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> shardKey() {
        return this.inner().shardKey();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public MongoCollectionImpl withExistingDatabasis(String resourceGroupName, String accountName, String databaseRid) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.databaseRid = databaseRid;
        return this;
    }

    @Override
    public MongoCollectionImpl withOptions(Map<String, String> options) {
        this.createOrUpdateParameter.withOptions(options);
        return this;
    }

    @Override
    public MongoCollectionImpl withResource(MongoCollectionResource resource) {
        this.createOrUpdateParameter.withResource(resource);
        return this;
    }

}
