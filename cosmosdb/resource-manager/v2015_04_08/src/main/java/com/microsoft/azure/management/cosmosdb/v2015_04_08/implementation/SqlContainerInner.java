/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2015_04_08.implementation;

import com.microsoft.azure.management.cosmosdb.v2015_04_08.IndexingPolicy;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.SqlPartitionKey;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.UniqueKeyPolicy;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.ConflictResolutionPolicy;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * An Azure Cosmos DB SQL container.
 */
@JsonFlatten
public class SqlContainerInner extends Resource {
    /**
     * Name of the Cosmos DB SQL container.
     */
    @JsonProperty(value = "properties.id", required = true)
    private String sqlContainerId;

    /**
     * The configuration of the indexing policy. By default, the indexing is
     * automatic for all document paths within the SQL container.
     */
    @JsonProperty(value = "properties.indexingPolicy")
    private IndexingPolicy indexingPolicy;

    /**
     * The configuration of the partition key to be used for partitioning data
     * into multiple partitions.
     */
    @JsonProperty(value = "properties.partitionKey")
    private SqlPartitionKey partitionKey;

    /**
     * Default time to live.
     */
    @JsonProperty(value = "properties.defaultTtl")
    private Integer defaultTtl;

    /**
     * The unique key policy configuration for specifying uniqueness
     * constraints on documents in the collection in the Azure Cosmos DB
     * service.
     */
    @JsonProperty(value = "properties.uniqueKeyPolicy")
    private UniqueKeyPolicy uniqueKeyPolicy;

    /**
     * The conflict resolution policy for the SQL container.
     */
    @JsonProperty(value = "properties.conflictResolutionPolicy")
    private ConflictResolutionPolicy conflictResolutionPolicy;

    /**
     * A system generated property. A unique identifier.
     */
    @JsonProperty(value = "properties._rid")
    private String _rid;

    /**
     * A system generated property that denotes the last updated timestamp of
     * the resource.
     */
    @JsonProperty(value = "properties._ts")
    private Object _ts;

    /**
     * A system generated property. It is the unique addressable URI for the
     * resource.
     */
    @JsonProperty(value = "properties._self")
    private String _self;

    /**
     * A system generated property representing the resource etag required for
     * optimistic concurrency control.
     */
    @JsonProperty(value = "properties._etag")
    private String _etag;

    /**
     * A system generated property that specifies the addressable path of the
     * documents resource.
     */
    @JsonProperty(value = "properties._doc")
    private String _doc;

    /**
     * A system generated property that specifies the addressable path of the
     * stored procedures (sprocs) resource.
     */
    @JsonProperty(value = "properties._sprocs")
    private String _sprocs;

    /**
     * A system generated property that specifies the addressable path of the
     * triggers resource.
     */
    @JsonProperty(value = "properties._triggers")
    private String _triggers;

    /**
     * A system generated property that specifies the addressable path of the
     * user-defined functions (udfs) resource.
     */
    @JsonProperty(value = "properties._udfs")
    private String _udfs;

    /**
     * A system generated property that specifies the addressable path of the
     * conflicts resource.
     */
    @JsonProperty(value = "properties._conflicts")
    private String _conflicts;

    /**
     * Get name of the Cosmos DB SQL container.
     *
     * @return the sqlContainerId value
     */
    public String sqlContainerId() {
        return this.sqlContainerId;
    }

    /**
     * Set name of the Cosmos DB SQL container.
     *
     * @param sqlContainerId the sqlContainerId value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner withSqlContainerId(String sqlContainerId) {
        this.sqlContainerId = sqlContainerId;
        return this;
    }

    /**
     * Get the configuration of the indexing policy. By default, the indexing is automatic for all document paths within the SQL container.
     *
     * @return the indexingPolicy value
     */
    public IndexingPolicy indexingPolicy() {
        return this.indexingPolicy;
    }

    /**
     * Set the configuration of the indexing policy. By default, the indexing is automatic for all document paths within the SQL container.
     *
     * @param indexingPolicy the indexingPolicy value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner withIndexingPolicy(IndexingPolicy indexingPolicy) {
        this.indexingPolicy = indexingPolicy;
        return this;
    }

    /**
     * Get the configuration of the partition key to be used for partitioning data into multiple partitions.
     *
     * @return the partitionKey value
     */
    public SqlPartitionKey partitionKey() {
        return this.partitionKey;
    }

    /**
     * Set the configuration of the partition key to be used for partitioning data into multiple partitions.
     *
     * @param partitionKey the partitionKey value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner withPartitionKey(SqlPartitionKey partitionKey) {
        this.partitionKey = partitionKey;
        return this;
    }

    /**
     * Get default time to live.
     *
     * @return the defaultTtl value
     */
    public Integer defaultTtl() {
        return this.defaultTtl;
    }

    /**
     * Set default time to live.
     *
     * @param defaultTtl the defaultTtl value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner withDefaultTtl(Integer defaultTtl) {
        this.defaultTtl = defaultTtl;
        return this;
    }

    /**
     * Get the unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
     *
     * @return the uniqueKeyPolicy value
     */
    public UniqueKeyPolicy uniqueKeyPolicy() {
        return this.uniqueKeyPolicy;
    }

    /**
     * Set the unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
     *
     * @param uniqueKeyPolicy the uniqueKeyPolicy value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy) {
        this.uniqueKeyPolicy = uniqueKeyPolicy;
        return this;
    }

    /**
     * Get the conflict resolution policy for the SQL container.
     *
     * @return the conflictResolutionPolicy value
     */
    public ConflictResolutionPolicy conflictResolutionPolicy() {
        return this.conflictResolutionPolicy;
    }

    /**
     * Set the conflict resolution policy for the SQL container.
     *
     * @param conflictResolutionPolicy the conflictResolutionPolicy value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy) {
        this.conflictResolutionPolicy = conflictResolutionPolicy;
        return this;
    }

    /**
     * Get a system generated property. A unique identifier.
     *
     * @return the _rid value
     */
    public String _rid() {
        return this._rid;
    }

    /**
     * Set a system generated property. A unique identifier.
     *
     * @param _rid the _rid value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_rid(String _rid) {
        this._rid = _rid;
        return this;
    }

    /**
     * Get a system generated property that denotes the last updated timestamp of the resource.
     *
     * @return the _ts value
     */
    public Object _ts() {
        return this._ts;
    }

    /**
     * Set a system generated property that denotes the last updated timestamp of the resource.
     *
     * @param _ts the _ts value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_ts(Object _ts) {
        this._ts = _ts;
        return this;
    }

    /**
     * Get a system generated property. It is the unique addressable URI for the resource.
     *
     * @return the _self value
     */
    public String _self() {
        return this._self;
    }

    /**
     * Set a system generated property. It is the unique addressable URI for the resource.
     *
     * @param _self the _self value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_self(String _self) {
        this._self = _self;
        return this;
    }

    /**
     * Get a system generated property representing the resource etag required for optimistic concurrency control.
     *
     * @return the _etag value
     */
    public String _etag() {
        return this._etag;
    }

    /**
     * Set a system generated property representing the resource etag required for optimistic concurrency control.
     *
     * @param _etag the _etag value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_etag(String _etag) {
        this._etag = _etag;
        return this;
    }

    /**
     * Get a system generated property that specifies the addressable path of the documents resource.
     *
     * @return the _doc value
     */
    public String _doc() {
        return this._doc;
    }

    /**
     * Set a system generated property that specifies the addressable path of the documents resource.
     *
     * @param _doc the _doc value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_doc(String _doc) {
        this._doc = _doc;
        return this;
    }

    /**
     * Get a system generated property that specifies the addressable path of the stored procedures (sprocs) resource.
     *
     * @return the _sprocs value
     */
    public String _sprocs() {
        return this._sprocs;
    }

    /**
     * Set a system generated property that specifies the addressable path of the stored procedures (sprocs) resource.
     *
     * @param _sprocs the _sprocs value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_sprocs(String _sprocs) {
        this._sprocs = _sprocs;
        return this;
    }

    /**
     * Get a system generated property that specifies the addressable path of the triggers resource.
     *
     * @return the _triggers value
     */
    public String _triggers() {
        return this._triggers;
    }

    /**
     * Set a system generated property that specifies the addressable path of the triggers resource.
     *
     * @param _triggers the _triggers value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_triggers(String _triggers) {
        this._triggers = _triggers;
        return this;
    }

    /**
     * Get a system generated property that specifies the addressable path of the user-defined functions (udfs) resource.
     *
     * @return the _udfs value
     */
    public String _udfs() {
        return this._udfs;
    }

    /**
     * Set a system generated property that specifies the addressable path of the user-defined functions (udfs) resource.
     *
     * @param _udfs the _udfs value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_udfs(String _udfs) {
        this._udfs = _udfs;
        return this;
    }

    /**
     * Get a system generated property that specifies the addressable path of the conflicts resource.
     *
     * @return the _conflicts value
     */
    public String _conflicts() {
        return this._conflicts;
    }

    /**
     * Set a system generated property that specifies the addressable path of the conflicts resource.
     *
     * @param _conflicts the _conflicts value to set
     * @return the SqlContainerInner object itself.
     */
    public SqlContainerInner with_conflicts(String _conflicts) {
        this._conflicts = _conflicts;
        return this;
    }

}
