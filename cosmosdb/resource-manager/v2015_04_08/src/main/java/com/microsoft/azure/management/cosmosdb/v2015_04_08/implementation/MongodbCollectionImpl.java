/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2015_04_08.implementation;

import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongodbCollection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongodbCollectionCreateUpdateParameters;
import java.util.Map;
import java.util.List;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongoIndex;
import com.microsoft.azure.management.cosmosdb.v2015_04_08.MongodbCollectionResource;
import rx.functions.Func1;

class MongodbCollectionImpl extends CreatableUpdatableImpl<MongodbCollection, MongodbCollectionInner, MongodbCollectionImpl> implements MongodbCollection, MongodbCollection.Definition, MongodbCollection.Update {
    private final DocumentDBManager manager;
    private String resourceGroupName;
    private String accountName;
    private String databaseName;
    private String collectionName;
    private MongodbCollectionCreateUpdateParameters createOrUpdateParameter;

    MongodbCollectionImpl(String name, DocumentDBManager manager) {
        super(name, new MongodbCollectionInner());
        this.manager = manager;
        // Set resource name
        this.collectionName = name;
        //
        this.createOrUpdateParameter = new MongodbCollectionCreateUpdateParameters();
    }

    MongodbCollectionImpl(MongodbCollectionInner inner, DocumentDBManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.collectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "databaseAccounts");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.collectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "collections");
        //
        this.createOrUpdateParameter = new MongodbCollectionCreateUpdateParameters();
    }

    @Override
    public DocumentDBManager manager() {
        return this.manager;
    }

    @Override
    public Observable<MongodbCollection> createResourceAsync() {
        DatabaseAccountsInner client = this.manager().inner().databaseAccounts();
        return client.createUpdateMongodbCollectionAsync(this.resourceGroupName, this.accountName, this.databaseName, this.collectionName, this.createOrUpdateParameter)
            .map(new Func1<MongodbCollectionInner, MongodbCollectionInner>() {
               @Override
               public MongodbCollectionInner call(MongodbCollectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<MongodbCollection> updateResourceAsync() {
        DatabaseAccountsInner client = this.manager().inner().databaseAccounts();
        return client.createUpdateMongodbCollectionAsync(this.resourceGroupName, this.accountName, this.databaseName, this.collectionName, this.createOrUpdateParameter)
            .map(new Func1<MongodbCollectionInner, MongodbCollectionInner>() {
               @Override
               public MongodbCollectionInner call(MongodbCollectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MongodbCollectionInner> getInnerAsync() {
        DatabaseAccountsInner client = this.manager().inner().databaseAccounts();
        return client.getMongodbCollectionAsync(this.resourceGroupName, this.accountName, this.databaseName, this.collectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new MongodbCollectionCreateUpdateParameters();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<MongoIndex> indexes() {
        return this.inner().indexes();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String mongodbCollectionId() {
        return this.inner().mongodbCollectionId();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> shardKey() {
        return this.inner().shardKey();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public MongodbCollectionImpl withExistingDatabasis(String resourceGroupName, String accountName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.databaseName = databaseName;
        return this;
    }

    @Override
    public MongodbCollectionImpl withOptions(Map<String, String> options) {
        this.createOrUpdateParameter.withOptions(options);
        return this;
    }

    @Override
    public MongodbCollectionImpl withResource(MongodbCollectionResource resource) {
        this.createOrUpdateParameter.withResource(resource);
        return this;
    }

}
