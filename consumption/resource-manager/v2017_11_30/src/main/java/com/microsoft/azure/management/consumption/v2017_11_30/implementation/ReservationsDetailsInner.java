/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.consumption.v2017_11_30.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.consumption.v2017_11_30.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReservationsDetails.
 */
public class ReservationsDetailsInner {
    /** The Retrofit service to perform REST calls. */
    private ReservationsDetailsService service;
    /** The service client containing this operation class. */
    private ConsumptionManagementClientImpl client;

    /**
     * Initializes an instance of ReservationsDetailsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReservationsDetailsInner(Retrofit retrofit, ConsumptionManagementClientImpl client) {
        this.service = retrofit.create(ReservationsDetailsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReservationsDetails to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReservationsDetailsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2017_11_30.ReservationsDetails list" })
        @GET("{scope}/providers/Microsoft.Consumption/reservationDetails")
        Observable<Response<ResponseBody>> list(@Path(value = "scope", encoded = true) String scope, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the reservations details for provided date range.
     *
     * @param scope The scope of the reservation details. The scope can be 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}' or 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}/reservations/{ReservationId}'
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ReservationDetailsInner&gt; object if successful.
     */
    public List<ReservationDetailsInner> list(String scope, String filter) {
        return listWithServiceResponseAsync(scope, filter).toBlocking().single().body();
    }

    /**
     * Lists the reservations details for provided date range.
     *
     * @param scope The scope of the reservation details. The scope can be 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}' or 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}/reservations/{ReservationId}'
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReservationDetailsInner>> listAsync(String scope, String filter, final ServiceCallback<List<ReservationDetailsInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(scope, filter), serviceCallback);
    }

    /**
     * Lists the reservations details for provided date range.
     *
     * @param scope The scope of the reservation details. The scope can be 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}' or 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}/reservations/{ReservationId}'
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ReservationDetailsInner&gt; object
     */
    public Observable<List<ReservationDetailsInner>> listAsync(String scope, String filter) {
        return listWithServiceResponseAsync(scope, filter).map(new Func1<ServiceResponse<List<ReservationDetailsInner>>, List<ReservationDetailsInner>>() {
            @Override
            public List<ReservationDetailsInner> call(ServiceResponse<List<ReservationDetailsInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the reservations details for provided date range.
     *
     * @param scope The scope of the reservation details. The scope can be 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}' or 'providers/Microsoft.Capacity/reservationorders/{ReservationOrderId}/reservations/{ReservationId}'
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ReservationDetailsInner&gt; object
     */
    public Observable<ServiceResponse<List<ReservationDetailsInner>>> listWithServiceResponseAsync(String scope, String filter) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(scope, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ReservationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ReservationDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ReservationDetailsInner>> result = listDelegate(response);
                        List<ReservationDetailsInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ReservationDetailsInner>> clientResponse = new ServiceResponse<List<ReservationDetailsInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ReservationDetailsInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<ReservationDetailsInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<ReservationDetailsInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
