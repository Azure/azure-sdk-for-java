/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.relay.v2016_07_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.relay.v2016_07_01.WCFRelays;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.relay.v2016_07_01.NamespaceAuthorizationRule;
import com.microsoft.azure.management.relay.v2016_07_01.WcfRelay;
import com.microsoft.azure.management.relay.v2016_07_01.WcfRelayNamespaceAuthorizationRule;
import com.microsoft.azure.management.relay.v2016_07_01.AuthorizationRuleKeys;

class WCFRelaysImpl extends WrapperImpl<WCFRelaysInner> implements WCFRelays {
    private final RelayManager manager;

    WCFRelaysImpl(RelayManager manager) {
        super(manager.inner().wCFRelays());
        this.manager = manager;
    }

    public RelayManager manager() {
        return this.manager;
    }

    @Override
    public WcfRelayImpl define(String name) {
        return wrapModel(name);
    }

    private WcfRelayImpl wrapModel(WcfRelayInner inner) {
        return  new WcfRelayImpl(inner, manager());
    }

    private WcfRelayImpl wrapModel(String name) {
        return new WcfRelayImpl(name, this.manager());
    }

    @Override
    public Observable<NamespaceAuthorizationRule> listPostAuthorizationRulesAsync(final String resourceGroupName, final String namespaceName, final String relayName) {
        WCFRelaysInner client = this.inner();
        return client.listPostAuthorizationRulesAsync(resourceGroupName, namespaceName, relayName)
        .flatMapIterable(new Func1<Page<AuthorizationRuleInner>, Iterable<AuthorizationRuleInner>>() {
            @Override
            public Iterable<AuthorizationRuleInner> call(Page<AuthorizationRuleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AuthorizationRuleInner, NamespaceAuthorizationRule>() {
            @Override
            public NamespaceAuthorizationRule call(AuthorizationRuleInner inner) {
                return new NamespaceAuthorizationRuleImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WcfRelay> listByNamespaceAsync(final String resourceGroupName, final String namespaceName) {
        WCFRelaysInner client = this.inner();
        return client.listByNamespaceAsync(resourceGroupName, namespaceName)
        .flatMapIterable(new Func1<Page<WcfRelayInner>, Iterable<WcfRelayInner>>() {
            @Override
            public Iterable<WcfRelayInner> call(Page<WcfRelayInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WcfRelayInner, WcfRelay>() {
            @Override
            public WcfRelay call(WcfRelayInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<WcfRelay> getAsync(String resourceGroupName, String namespaceName, String relayName) {
        WCFRelaysInner client = this.inner();
        return client.getAsync(resourceGroupName, namespaceName, relayName)
        .map(new Func1<WcfRelayInner, WcfRelay>() {
            @Override
            public WcfRelay call(WcfRelayInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String namespaceName, String relayName) {
        WCFRelaysInner client = this.inner();
        return client.deleteAsync(resourceGroupName, namespaceName, relayName).toCompletable();
    }

    @Override
    public WcfRelayNamespaceAuthorizationRuleImpl defineAuthorizationRule(String name) {
        return wrapAuthorizationRuleModel(name);
    }

    private WcfRelayNamespaceAuthorizationRuleImpl wrapAuthorizationRuleModel(String name) {
        return new WcfRelayNamespaceAuthorizationRuleImpl(name, this.manager());
    }

    private WcfRelayNamespaceAuthorizationRuleImpl wrapWcfRelayNamespaceAuthorizationRuleModel(AuthorizationRuleInner inner) {
        return  new WcfRelayNamespaceAuthorizationRuleImpl(inner, manager());
    }

    private Observable<AuthorizationRuleInner> getAuthorizationRuleInnerUsingWCFRelaysInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String namespaceName = IdParsingUtils.getValueFromIdByName(id, "namespaces");
        String relayName = IdParsingUtils.getValueFromIdByName(id, "WcfRelays");
        String authorizationRuleName = IdParsingUtils.getValueFromIdByName(id, "authorizationRules");
        WCFRelaysInner client = this.inner();
        return client.getAuthorizationRuleAsync(resourceGroupName, namespaceName, relayName, authorizationRuleName);
    }

    @Override
    public Observable<WcfRelayNamespaceAuthorizationRule> getAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName) {
        WCFRelaysInner client = this.inner();
        return client.getAuthorizationRuleAsync(resourceGroupName, namespaceName, relayName, authorizationRuleName)
        .map(new Func1<AuthorizationRuleInner, WcfRelayNamespaceAuthorizationRule>() {
            @Override
            public WcfRelayNamespaceAuthorizationRule call(AuthorizationRuleInner inner) {
                return wrapWcfRelayNamespaceAuthorizationRuleModel(inner);
            }
       });
    }

    @Override
    public Observable<WcfRelayNamespaceAuthorizationRule> listAuthorizationRulesAsync(final String resourceGroupName, final String namespaceName, final String relayName) {
        WCFRelaysInner client = this.inner();
        return client.listAuthorizationRulesAsync(resourceGroupName, namespaceName, relayName)
        .flatMapIterable(new Func1<Page<AuthorizationRuleInner>, Iterable<AuthorizationRuleInner>>() {
            @Override
            public Iterable<AuthorizationRuleInner> call(Page<AuthorizationRuleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AuthorizationRuleInner, WcfRelayNamespaceAuthorizationRule>() {
            @Override
            public WcfRelayNamespaceAuthorizationRule call(AuthorizationRuleInner inner) {
                return wrapWcfRelayNamespaceAuthorizationRuleModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName) {
        WCFRelaysInner client = this.inner();
        return client.deleteAuthorizationRuleAsync(resourceGroupName, namespaceName, relayName, authorizationRuleName).toCompletable();
    }

    @Override
    public Observable<NamespaceAuthorizationRule> postAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName) {
        WCFRelaysInner client = this.inner();
        return client.postAuthorizationRuleAsync(resourceGroupName, namespaceName, relayName, authorizationRuleName)
        .map(new Func1<AuthorizationRuleInner, NamespaceAuthorizationRule>() {
            @Override
            public NamespaceAuthorizationRule call(AuthorizationRuleInner inner) {
                return new NamespaceAuthorizationRuleImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AuthorizationRuleKeys> listKeysAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName) {
        WCFRelaysInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, namespaceName, relayName, authorizationRuleName)
        .map(new Func1<AuthorizationRuleKeysInner, AuthorizationRuleKeys>() {
            @Override
            public AuthorizationRuleKeys call(AuthorizationRuleKeysInner inner) {
                return new AuthorizationRuleKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AuthorizationRuleKeys> regenerateKeysAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName) {
        WCFRelaysInner client = this.inner();
        return client.regenerateKeysAsync(resourceGroupName, namespaceName, relayName, authorizationRuleName)
        .map(new Func1<AuthorizationRuleKeysInner, AuthorizationRuleKeys>() {
            @Override
            public AuthorizationRuleKeys call(AuthorizationRuleKeysInner inner) {
                return new AuthorizationRuleKeysImpl(inner, manager());
            }
        });
    }

}
