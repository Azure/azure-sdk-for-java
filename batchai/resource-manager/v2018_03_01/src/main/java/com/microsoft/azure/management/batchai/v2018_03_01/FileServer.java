/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batchai.v2018_03_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.batchai.v2018_03_01.implementation.BatchAIManager;
import org.joda.time.DateTime;
import com.microsoft.azure.management.batchai.v2018_03_01.implementation.FileServerInner;

/**
 * Type representing FileServer.
 */
public interface FileServer extends HasInner<FileServerInner>, Resource, GroupableResourceCore<BatchAIManager, FileServerInner>, HasResourceGroup, Refreshable<FileServer>, Updatable<FileServer.Update>, HasManager<BatchAIManager> {
    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the dataDisks value.
     */
    DataDisks dataDisks();

    /**
     * @return the mountSettings value.
     */
    MountSettings mountSettings();

    /**
     * @return the provisioningState value.
     */
    FileServerProvisioningState provisioningState();

    /**
     * @return the provisioningStateTransitionTime value.
     */
    DateTime provisioningStateTransitionTime();

    /**
     * @return the sshConfiguration value.
     */
    SshConfiguration sshConfiguration();

    /**
     * @return the subnet value.
     */
    ResourceId subnet();

    /**
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * The entirety of the FileServer definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithDataDisks, DefinitionStages.WithSshConfiguration, DefinitionStages.WithVmSize, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of FileServer definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a FileServer definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the FileServer definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithDataDisks> {
        }

        /**
         * The stage of the fileserver definition allowing to specify DataDisks.
         */
        interface WithDataDisks {
           /**
            * Specifies dataDisks.
            * @param dataDisks the dataDisks parameter value
            * @return the next definition stage
*/
            WithSshConfiguration withDataDisks(DataDisks dataDisks);
        }

        /**
         * The stage of the fileserver definition allowing to specify SshConfiguration.
         */
        interface WithSshConfiguration {
           /**
            * Specifies sshConfiguration.
            * @param sshConfiguration the sshConfiguration parameter value
            * @return the next definition stage
*/
            WithVmSize withSshConfiguration(SshConfiguration sshConfiguration);
        }

        /**
         * The stage of the fileserver definition allowing to specify VmSize.
         */
        interface WithVmSize {
           /**
            * Specifies vmSize.
            * @param vmSize For information about available VM sizes for fileservers from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux)
            * @return the next definition stage
*/
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the fileserver definition allowing to specify Subnet.
         */
        interface WithSubnet {
            /**
             * Specifies subnet.
             * @param subnet the subnet parameter value
             * @return the next definition stage
             */
            WithCreate withSubnet(ResourceId subnet);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<FileServer>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithSubnet {
        }
    }
    /**
     * The template for a FileServer update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<FileServer>, Resource.UpdateWithTags<Update>, UpdateStages.WithSubnet {
    }

    /**
     * Grouping of FileServer update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the fileserver update allowing to specify Subnet.
         */
        interface WithSubnet {
            /**
             * Specifies subnet.
             * @param subnet the subnet parameter value
             * @return the next update stage
             */
            Update withSubnet(ResourceId subnet);
        }

    }
}
