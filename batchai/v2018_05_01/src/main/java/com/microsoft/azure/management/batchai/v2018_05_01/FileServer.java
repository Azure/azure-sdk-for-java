/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batchai.v2018_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.batchai.v2018_05_01.implementation.FileServerInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.batchai.v2018_05_01.implementation.BatchAIManager;
import java.util.Map;
import org.joda.time.DateTime;

/**
 * Type representing FileServer.
 */
public interface FileServer extends HasInner<FileServerInner>, Indexable, Refreshable<FileServer>, Updatable<FileServer.Update>, HasManager<BatchAIManager> {
    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the dataDisks value.
     */
    DataDisks dataDisks();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the mountSettings value.
     */
    MountSettings mountSettings();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    FileServerProvisioningState provisioningState();

    /**
     * @return the provisioningStateTransitionTime value.
     */
    DateTime provisioningStateTransitionTime();

    /**
     * @return the sshConfiguration value.
     */
    SshConfiguration sshConfiguration();

    /**
     * @return the subnet value.
     */
    ResourceId subnet();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * The entirety of the FileServer definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithWorkspace, DefinitionStages.WithDataDisks, DefinitionStages.WithLocation, DefinitionStages.WithSshConfiguration, DefinitionStages.WithVmSize, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of FileServer definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a FileServer definition.
         */
        interface Blank extends WithWorkspace {
        }

        /**
         * The stage of the fileserver definition allowing to specify Workspace.
         */
        interface WithWorkspace {
           /**
            * Specifies resourceGroupName, workspaceName.
            */
            WithDataDisks withExistingWorkspace(String resourceGroupName, String workspaceName);
        }

        /**
         * The stage of the fileserver definition allowing to specify DataDisks.
         */
        interface WithDataDisks {
           /**
            * Specifies dataDisks.
            */
            WithLocation withDataDisks(DataDisks dataDisks);
        }

        /**
         * The stage of the fileserver definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            */
            WithSshConfiguration withLocation(String location);
        }

        /**
         * The stage of the fileserver definition allowing to specify SshConfiguration.
         */
        interface WithSshConfiguration {
           /**
            * Specifies sshConfiguration.
            */
            WithVmSize withSshConfiguration(SshConfiguration sshConfiguration);
        }

        /**
         * The stage of the fileserver definition allowing to specify VmSize.
         */
        interface WithVmSize {
           /**
            * Specifies vmSize.
            */
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the fileserver definition allowing to specify Subnet.
         */
        interface WithSubnet {
            /**
             * Specifies subnet.
             */
            WithCreate withSubnet(ResourceId subnet);
        }

        /**
         * The stage of the fileserver definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<FileServer>, DefinitionStages.WithSubnet, DefinitionStages.WithTags {
        }
    }
    /**
     * The template for a FileServer update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<FileServer>, UpdateStages.WithSubnet, UpdateStages.WithTags {
    }

    /**
     * Grouping of FileServer update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the fileserver update allowing to specify Subnet.
         */
        interface WithSubnet {
            /**
             * Specifies subnet.
             */
            Update withSubnet(ResourceId subnet);
        }

        /**
         * The stage of the fileserver update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
