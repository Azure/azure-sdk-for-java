/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2016_09_01;

import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Cluster update request.
 */
@JsonFlatten
public class ClusterUpdateParameters {
    /**
     * This level is used to set the number of replicas of the system services.
     * Possible values include: 'Bronze', 'Silver', 'Gold'.
     */
    @JsonProperty(value = "properties.reliabilityLevel")
    private String reliabilityLevel;

    /**
     * Cluster upgrade mode indicates if fabric upgrade is initiated
     * automatically by the system or not. Possible values include:
     * 'Automatic', 'Manual'.
     */
    @JsonProperty(value = "properties.upgradeMode")
    private String upgradeMode;

    /**
     * The ServiceFabric code version, if set it, please make sure you have set
     * upgradeMode to Manual, otherwise ,it will fail, if you are using PUT new
     * cluster, you can get the version by using ClusterVersions_List, if you
     * are updating existing cluster, you can get the availableClusterVersions
     * from Clusters_Get.
     */
    @JsonProperty(value = "properties.clusterCodeVersion")
    private String clusterCodeVersion;

    /**
     * This primary certificate will be used as cluster node to node security,
     * SSL certificate for cluster management endpoint and default admin
     * client, the certificate should exist in the virtual machine scale sets
     * or Azure key vault, before you add it. It will override original value.
     */
    @JsonProperty(value = "properties.certificate")
    private CertificateDescription certificate;

    /**
     * The client thumbprint details, it is used for client access for cluster
     * operation, it will override existing collection.
     */
    @JsonProperty(value = "properties.clientCertificateThumbprints")
    private List<ClientCertificateThumbprint> clientCertificateThumbprints;

    /**
     * List of client certificates to whitelist based on common names.
     */
    @JsonProperty(value = "properties.clientCertificateCommonNames")
    private List<ClientCertificateCommonName> clientCertificateCommonNames;

    /**
     * List of custom fabric settings to configure the cluster, Note, it will
     * overwrite existing collection.
     */
    @JsonProperty(value = "properties.fabricSettings")
    private List<SettingsSectionDescription> fabricSettings;

    /**
     * Certificate for the reverse proxy.
     */
    @JsonProperty(value = "properties.reverseProxyCertificate")
    private CertificateDescription reverseProxyCertificate;

    /**
     * The list of node types that make up the cluster, it will override.
     */
    @JsonProperty(value = "properties.nodeTypes")
    private List<NodeTypeDescription> nodeTypes;

    /**
     * The policy to use when upgrading the cluster.
     */
    @JsonProperty(value = "properties.upgradeDescription")
    private ClusterUpgradePolicy upgradeDescription;

    /**
     * Cluster update parameters.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /**
     * Get this level is used to set the number of replicas of the system services. Possible values include: 'Bronze', 'Silver', 'Gold'.
     *
     * @return the reliabilityLevel value
     */
    public String reliabilityLevel() {
        return this.reliabilityLevel;
    }

    /**
     * Set this level is used to set the number of replicas of the system services. Possible values include: 'Bronze', 'Silver', 'Gold'.
     *
     * @param reliabilityLevel the reliabilityLevel value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withReliabilityLevel(String reliabilityLevel) {
        this.reliabilityLevel = reliabilityLevel;
        return this;
    }

    /**
     * Get cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not. Possible values include: 'Automatic', 'Manual'.
     *
     * @return the upgradeMode value
     */
    public String upgradeMode() {
        return this.upgradeMode;
    }

    /**
     * Set cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not. Possible values include: 'Automatic', 'Manual'.
     *
     * @param upgradeMode the upgradeMode value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withUpgradeMode(String upgradeMode) {
        this.upgradeMode = upgradeMode;
        return this;
    }

    /**
     * Get the ServiceFabric code version, if set it, please make sure you have set upgradeMode to Manual, otherwise ,it will fail, if you are using PUT new cluster, you can get the version by using ClusterVersions_List, if you are updating existing cluster, you can get the availableClusterVersions from Clusters_Get.
     *
     * @return the clusterCodeVersion value
     */
    public String clusterCodeVersion() {
        return this.clusterCodeVersion;
    }

    /**
     * Set the ServiceFabric code version, if set it, please make sure you have set upgradeMode to Manual, otherwise ,it will fail, if you are using PUT new cluster, you can get the version by using ClusterVersions_List, if you are updating existing cluster, you can get the availableClusterVersions from Clusters_Get.
     *
     * @param clusterCodeVersion the clusterCodeVersion value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withClusterCodeVersion(String clusterCodeVersion) {
        this.clusterCodeVersion = clusterCodeVersion;
        return this;
    }

    /**
     * Get this primary certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client, the certificate should exist in the virtual machine scale sets or Azure key vault, before you add it. It will override original value.
     *
     * @return the certificate value
     */
    public CertificateDescription certificate() {
        return this.certificate;
    }

    /**
     * Set this primary certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client, the certificate should exist in the virtual machine scale sets or Azure key vault, before you add it. It will override original value.
     *
     * @param certificate the certificate value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withCertificate(CertificateDescription certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * Get the client thumbprint details, it is used for client access for cluster operation, it will override existing collection.
     *
     * @return the clientCertificateThumbprints value
     */
    public List<ClientCertificateThumbprint> clientCertificateThumbprints() {
        return this.clientCertificateThumbprints;
    }

    /**
     * Set the client thumbprint details, it is used for client access for cluster operation, it will override existing collection.
     *
     * @param clientCertificateThumbprints the clientCertificateThumbprints value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withClientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints) {
        this.clientCertificateThumbprints = clientCertificateThumbprints;
        return this;
    }

    /**
     * Get list of client certificates to whitelist based on common names.
     *
     * @return the clientCertificateCommonNames value
     */
    public List<ClientCertificateCommonName> clientCertificateCommonNames() {
        return this.clientCertificateCommonNames;
    }

    /**
     * Set list of client certificates to whitelist based on common names.
     *
     * @param clientCertificateCommonNames the clientCertificateCommonNames value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withClientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames) {
        this.clientCertificateCommonNames = clientCertificateCommonNames;
        return this;
    }

    /**
     * Get list of custom fabric settings to configure the cluster, Note, it will overwrite existing collection.
     *
     * @return the fabricSettings value
     */
    public List<SettingsSectionDescription> fabricSettings() {
        return this.fabricSettings;
    }

    /**
     * Set list of custom fabric settings to configure the cluster, Note, it will overwrite existing collection.
     *
     * @param fabricSettings the fabricSettings value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withFabricSettings(List<SettingsSectionDescription> fabricSettings) {
        this.fabricSettings = fabricSettings;
        return this;
    }

    /**
     * Get certificate for the reverse proxy.
     *
     * @return the reverseProxyCertificate value
     */
    public CertificateDescription reverseProxyCertificate() {
        return this.reverseProxyCertificate;
    }

    /**
     * Set certificate for the reverse proxy.
     *
     * @param reverseProxyCertificate the reverseProxyCertificate value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withReverseProxyCertificate(CertificateDescription reverseProxyCertificate) {
        this.reverseProxyCertificate = reverseProxyCertificate;
        return this;
    }

    /**
     * Get the list of node types that make up the cluster, it will override.
     *
     * @return the nodeTypes value
     */
    public List<NodeTypeDescription> nodeTypes() {
        return this.nodeTypes;
    }

    /**
     * Set the list of node types that make up the cluster, it will override.
     *
     * @param nodeTypes the nodeTypes value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withNodeTypes(List<NodeTypeDescription> nodeTypes) {
        this.nodeTypes = nodeTypes;
        return this;
    }

    /**
     * Get the policy to use when upgrading the cluster.
     *
     * @return the upgradeDescription value
     */
    public ClusterUpgradePolicy upgradeDescription() {
        return this.upgradeDescription;
    }

    /**
     * Set the policy to use when upgrading the cluster.
     *
     * @param upgradeDescription the upgradeDescription value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withUpgradeDescription(ClusterUpgradePolicy upgradeDescription) {
        this.upgradeDescription = upgradeDescription;
        return this;
    }

    /**
     * Get cluster update parameters.
     *
     * @return the tags value
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set cluster update parameters.
     *
     * @param tags the tags value to set
     * @return the ClusterUpdateParameters object itself.
     */
    public ClusterUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

}
