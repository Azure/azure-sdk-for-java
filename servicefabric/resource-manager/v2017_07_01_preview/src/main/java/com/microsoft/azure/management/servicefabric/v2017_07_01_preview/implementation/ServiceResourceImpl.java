/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation;

import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ServiceResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ServiceCorrelationDescription;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ServiceLoadMetricDescription;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ServicePlacementPolicyDescription;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.PartitionSchemeDescription;
import rx.functions.Func1;

class ServiceResourceImpl extends CreatableUpdatableImpl<ServiceResource, ServiceResourceInner, ServiceResourceImpl> implements ServiceResource, ServiceResource.Definition, ServiceResource.Update {
    private final ServiceFabricManager manager;
    private String subscriptionId;
    private String resourceGroupName;
    private String clusterName;
    private String applicationName;
    private String serviceName;
    private String capiVersion;
    private String uapiVersion;
    private ServiceResourceUpdateInner updateParameter;

    ServiceResourceImpl(String name, ServiceFabricManager manager) {
        super(name, new ServiceResourceInner());
        this.manager = manager;
        // Set resource name
        this.serviceName = name;
        //
        this.updateParameter = new ServiceResourceUpdateInner();
    }

    ServiceResourceImpl(ServiceResourceInner inner, ServiceFabricManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.serviceName = inner.name();
        // set resource ancestor and positional variables
        this.subscriptionId = IdParsingUtils.getValueFromIdByName(inner.id(), "subscriptions");
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterName = IdParsingUtils.getValueFromIdByName(inner.id(), "clusters");
        this.applicationName = IdParsingUtils.getValueFromIdByName(inner.id(), "applications");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "services");
        //
        this.updateParameter = new ServiceResourceUpdateInner();
    }

    @Override
    public ServiceFabricManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServiceResource> createResourceAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.putAsync(this.subscriptionId, this.resourceGroupName, this.clusterName, this.applicationName, this.serviceName, this.capiVersion, this.inner())
            .map(new Func1<ServiceResourceInner, ServiceResourceInner>() {
               @Override
               public ServiceResourceInner call(ServiceResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ServiceResource> updateResourceAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.patchAsync(this.subscriptionId, this.resourceGroupName, this.clusterName, this.applicationName, this.serviceName, this.uapiVersion, this.updateParameter)
            .map(new Func1<ServiceResourceInner, ServiceResourceInner>() {
               @Override
               public ServiceResourceInner call(ServiceResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ServiceResourceInner> getInnerAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.getAsync(this.subscriptionId, this.resourceGroupName, this.clusterName, this.applicationName, this.serviceName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new ServiceResourceUpdateInner();
    }

    @Override
    public List<ServiceCorrelationDescription> correlationScheme() {
        return this.inner().correlationScheme();
    }

    @Override
    public String defaultMoveCost() {
        return this.inner().defaultMoveCost();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public PartitionSchemeDescription partitionDescription() {
        return this.inner().partitionDescription();
    }

    @Override
    public String placementConstraints() {
        return this.inner().placementConstraints();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public List<ServiceLoadMetricDescription> serviceLoadMetrics() {
        return this.inner().serviceLoadMetrics();
    }

    @Override
    public List<ServicePlacementPolicyDescription> servicePlacementPolicies() {
        return this.inner().servicePlacementPolicies();
    }

    @Override
    public String serviceTypeName() {
        return this.inner().serviceTypeName();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ServiceResourceImpl withExistingApplication(String subscriptionId, String resourceGroupName, String clusterName, String applicationName) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        this.applicationName = applicationName;
        return this;
    }

    @Override
    public ServiceResourceImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ServiceResourceImpl withPartitionDescription(PartitionSchemeDescription partitionDescription) {
        this.inner().withPartitionDescription(partitionDescription);
        return this;
    }

    @Override
    public ServiceResourceImpl withServiceTypeName(String serviceTypeName) {
        this.inner().withServiceTypeName(serviceTypeName);
        return this;
    }

    @Override
    public ServiceResourceImpl withApiVersion(String apiVersion) {
        if (isInCreateMode()) {
            this.capiVersion = apiVersion;
        } else {
            this.uapiVersion = apiVersion;
        }
        return this;
    }

    @Override
    public ServiceResourceImpl withCorrelationScheme(List<ServiceCorrelationDescription> correlationScheme) {
        if (isInCreateMode()) {
            this.inner().withCorrelationScheme(correlationScheme);
        } else {
            this.updateParameter.withCorrelationScheme(correlationScheme);
        }
        return this;
    }

    @Override
    public ServiceResourceImpl withDefaultMoveCost(String defaultMoveCost) {
        if (isInCreateMode()) {
            this.inner().withDefaultMoveCost(defaultMoveCost);
        } else {
            this.updateParameter.withDefaultMoveCost(defaultMoveCost);
        }
        return this;
    }

    @Override
    public ServiceResourceImpl withPlacementConstraints(String placementConstraints) {
        if (isInCreateMode()) {
            this.inner().withPlacementConstraints(placementConstraints);
        } else {
            this.updateParameter.withPlacementConstraints(placementConstraints);
        }
        return this;
    }

    @Override
    public ServiceResourceImpl withServiceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics) {
        if (isInCreateMode()) {
            this.inner().withServiceLoadMetrics(serviceLoadMetrics);
        } else {
            this.updateParameter.withServiceLoadMetrics(serviceLoadMetrics);
        }
        return this;
    }

    @Override
    public ServiceResourceImpl withServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies) {
        if (isInCreateMode()) {
            this.inner().withServicePlacementPolicies(servicePlacementPolicies);
        } else {
            this.updateParameter.withServicePlacementPolicies(servicePlacementPolicies);
        }
        return this;
    }

}
