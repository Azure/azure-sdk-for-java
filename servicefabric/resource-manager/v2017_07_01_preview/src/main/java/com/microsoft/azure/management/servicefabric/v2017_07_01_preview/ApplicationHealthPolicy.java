/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Defines a health policy used to evaluate the health of an application or one
 * of its children entities.
 */
public class ApplicationHealthPolicy {
    /**
     * Indicates whether warnings are treated with the same severity as errors.
     */
    @JsonProperty(value = "ConsiderWarningAsError")
    private Boolean considerWarningAsError;

    /**
     * The maximum allowed percentage of unhealthy deployed applications.
     * Allowed values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered
     * in error.
     * This is calculated by dividing the number of unhealthy deployed
     * applications over the number of nodes where the application is currently
     * deployed on in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of
     * nodes. Default percentage is zero.
     */
    @JsonProperty(value = "MaxPercentUnhealthyDeployedApplications")
    private Integer maxPercentUnhealthyDeployedApplications;

    /**
     * The defaultServiceTypeHealthPolicy property.
     */
    @JsonProperty(value = "DefaultServiceTypeHealthPolicy")
    private ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy;

    /**
     * The serviceTypeHealthPolicyMap property.
     */
    @JsonProperty(value = "ServiceTypeHealthPolicyMap")
    private List<ServiceTypeHealthPolicyMapItem> serviceTypeHealthPolicyMap;

    /**
     * Get indicates whether warnings are treated with the same severity as errors.
     *
     * @return the considerWarningAsError value
     */
    public Boolean considerWarningAsError() {
        return this.considerWarningAsError;
    }

    /**
     * Set indicates whether warnings are treated with the same severity as errors.
     *
     * @param considerWarningAsError the considerWarningAsError value to set
     * @return the ApplicationHealthPolicy object itself.
     */
    public ApplicationHealthPolicy withConsiderWarningAsError(Boolean considerWarningAsError) {
        this.considerWarningAsError = considerWarningAsError;
        return this;
    }

    /**
     * Get the maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     *
     * @return the maxPercentUnhealthyDeployedApplications value
     */
    public Integer maxPercentUnhealthyDeployedApplications() {
        return this.maxPercentUnhealthyDeployedApplications;
    }

    /**
     * Set the maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     *
     * @param maxPercentUnhealthyDeployedApplications the maxPercentUnhealthyDeployedApplications value to set
     * @return the ApplicationHealthPolicy object itself.
     */
    public ApplicationHealthPolicy withMaxPercentUnhealthyDeployedApplications(Integer maxPercentUnhealthyDeployedApplications) {
        this.maxPercentUnhealthyDeployedApplications = maxPercentUnhealthyDeployedApplications;
        return this;
    }

    /**
     * Get the defaultServiceTypeHealthPolicy value.
     *
     * @return the defaultServiceTypeHealthPolicy value
     */
    public ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy() {
        return this.defaultServiceTypeHealthPolicy;
    }

    /**
     * Set the defaultServiceTypeHealthPolicy value.
     *
     * @param defaultServiceTypeHealthPolicy the defaultServiceTypeHealthPolicy value to set
     * @return the ApplicationHealthPolicy object itself.
     */
    public ApplicationHealthPolicy withDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy) {
        this.defaultServiceTypeHealthPolicy = defaultServiceTypeHealthPolicy;
        return this;
    }

    /**
     * Get the serviceTypeHealthPolicyMap value.
     *
     * @return the serviceTypeHealthPolicyMap value
     */
    public List<ServiceTypeHealthPolicyMapItem> serviceTypeHealthPolicyMap() {
        return this.serviceTypeHealthPolicyMap;
    }

    /**
     * Set the serviceTypeHealthPolicyMap value.
     *
     * @param serviceTypeHealthPolicyMap the serviceTypeHealthPolicyMap value to set
     * @return the ApplicationHealthPolicy object itself.
     */
    public ApplicationHealthPolicy withServiceTypeHealthPolicyMap(List<ServiceTypeHealthPolicyMapItem> serviceTypeHealthPolicyMap) {
        this.serviceTypeHealthPolicyMap = serviceTypeHealthPolicyMap;
        return this;
    }

}
