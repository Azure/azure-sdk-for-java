/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ClusterVersions;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Operations;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationTypes;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Versions;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Applications;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Services;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure ServiceFabric resource management.
 */
public final class ServiceFabricManager extends ManagerCore<ServiceFabricManager, ServiceFabricManagementClientImpl> {
    private Clusters clusters;
    private ClusterVersions clusterVersions;
    private Operations operations;
    private ApplicationTypes applicationTypes;
    private Versions versions;
    private Applications applications;
    private Services services;
    /**
    * Get a Configurable instance that can be used to create ServiceFabricManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new ServiceFabricManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of ServiceFabricManager that exposes ServiceFabric resource management API entry points.
    *
    * @param credentials the credentials to use
    * @return the ServiceFabricManager
    */
    public static ServiceFabricManager authenticate(AzureTokenCredentials credentials) {
        return new ServiceFabricManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build());
    }
    /**
    * Creates an instance of ServiceFabricManager that exposes ServiceFabric resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @return the ServiceFabricManager
    */
    public static ServiceFabricManager authenticate(RestClient restClient) {
        return new ServiceFabricManager(restClient);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of ServiceFabricManager that exposes ServiceFabric management API entry points.
        *
        * @param credentials the credentials to use
        * @return the interface exposing ServiceFabric management API entry points that work across subscriptions
        */
        ServiceFabricManager authenticate(AzureTokenCredentials credentials);
    }

    /**
     * @return Entry point to manage Clusters.
     */
    public Clusters clusters() {
        if (this.clusters == null) {
            this.clusters = new ClustersImpl(this);
        }
        return this.clusters;
    }

    /**
     * @return Entry point to manage ClusterVersions.
     */
    public ClusterVersions clusterVersions() {
        if (this.clusterVersions == null) {
            this.clusterVersions = new ClusterVersionsImpl(this);
        }
        return this.clusterVersions;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage ApplicationTypes.
     */
    public ApplicationTypes applicationTypes() {
        if (this.applicationTypes == null) {
            this.applicationTypes = new ApplicationTypesImpl(this);
        }
        return this.applicationTypes;
    }

    /**
     * @return Entry point to manage Versions.
     */
    public Versions versions() {
        if (this.versions == null) {
            this.versions = new VersionsImpl(this);
        }
        return this.versions;
    }

    /**
     * @return Entry point to manage Applications.
     */
    public Applications applications() {
        if (this.applications == null) {
            this.applications = new ApplicationsImpl(this);
        }
        return this.applications;
    }

    /**
     * @return Entry point to manage Services.
     */
    public Services services() {
        if (this.services == null) {
            this.services = new ServicesImpl(this);
        }
        return this.services;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public ServiceFabricManager authenticate(AzureTokenCredentials credentials) {
           return ServiceFabricManager.authenticate(buildRestClient(credentials));
        }
     }
    private ServiceFabricManager(RestClient restClient) {
        super(
            restClient,
            null,
            new ServiceFabricManagementClientImpl(restClient));
    }
}
