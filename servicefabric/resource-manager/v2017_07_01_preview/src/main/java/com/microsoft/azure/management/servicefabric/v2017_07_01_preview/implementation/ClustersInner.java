/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ClusterUpdateParameters;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ErrorModelException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Clusters.
 */
public class ClustersInner {
    /** The Retrofit service to perform REST calls. */
    private ClustersService service;
    /** The service client containing this operation class. */
    private ServiceFabricManagementClientImpl client;

    /**
     * Initializes an instance of ClustersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ClustersInner(Retrofit retrofit, ServiceFabricManagementClientImpl client) {
        this.service = retrofit.create(ClustersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Clusters to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ClustersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}")
        Observable<Response<ResponseBody>> create(@Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body ClusterInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body ClusterInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body ClusterUpdateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body ClusterUpdateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.Clusters list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/clusters")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterInner object if successful.
     */
    public ClusterInner create(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).toBlocking().last().body();
    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterInner> createAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters, final ServiceCallback<ClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters), serviceCallback);
    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ClusterInner> createAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).map(new Func1<ServiceResponse<ClusterInner>, ClusterInner>() {
            @Override
            public ClusterInner call(ServiceResponse<ClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ClusterInner>> createWithServiceResponseAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.create(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ClusterInner>() { }.getType());
    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterInner object if successful.
     */
    public ClusterInner beginCreate(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).toBlocking().single().body();
    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterInner> beginCreateAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters, final ServiceCallback<ClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters), serviceCallback);
    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterInner object
     */
    public Observable<ClusterInner> beginCreateAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).map(new Func1<ServiceResponse<ClusterInner>, ClusterInner>() {
            @Override
            public ClusterInner call(ServiceResponse<ClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a ServiceFabric cluster.
     * Create cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterInner object
     */
    public Observable<ServiceResponse<ClusterInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreate(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<ClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClusterInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClusterInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClusterInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClusterInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Delete cluster resource.
     * Delete cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion).toBlocking().single().body();
    }

    /**
     * Delete cluster resource.
     * Delete cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion), serviceCallback);
    }

    /**
     * Delete cluster resource.
     * Delete cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete cluster resource.
     * Delete cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.delete(resourceGroupName, clusterName, subscriptionId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Get cluster resource.
     * Get cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterInner object if successful.
     */
    public ClusterInner getByResourceGroup(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion).toBlocking().single().body();
    }

    /**
     * Get cluster resource.
     * Get cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterInner> getByResourceGroupAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, final ServiceCallback<ClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion), serviceCallback);
    }

    /**
     * Get cluster resource.
     * Get cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterInner object
     */
    public Observable<ClusterInner> getByResourceGroupAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion).map(new Func1<ServiceResponse<ClusterInner>, ClusterInner>() {
            @Override
            public ClusterInner call(ServiceResponse<ClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get cluster resource.
     * Get cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterInner object
     */
    public Observable<ServiceResponse<ClusterInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, clusterName, subscriptionId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<ClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClusterInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClusterInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClusterInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClusterInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterInner object if successful.
     */
    public ClusterInner update(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).toBlocking().last().body();
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterInner> updateAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters, final ServiceCallback<ClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters), serviceCallback);
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ClusterInner> updateAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).map(new Func1<ServiceResponse<ClusterInner>, ClusterInner>() {
            @Override
            public ClusterInner call(ServiceResponse<ClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ClusterInner>> updateWithServiceResponseAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.update(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ClusterInner>() { }.getType());
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterInner object if successful.
     */
    public ClusterInner beginUpdate(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).toBlocking().single().body();
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterInner> beginUpdateAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters, final ServiceCallback<ClusterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters), serviceCallback);
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterInner object
     */
    public Observable<ClusterInner> beginUpdateAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters).map(new Func1<ServiceResponse<ClusterInner>, ClusterInner>() {
            @Override
            public ClusterInner call(ServiceResponse<ClusterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update cluster configuration.
     * Update cluster configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param parameters The parameters which contains the property value and property name which used to update the cluster configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterInner object
     */
    public Observable<ServiceResponse<ClusterInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, ClusterUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginUpdate(resourceGroupName, clusterName, subscriptionId, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClusterInner>>>() {
                @Override
                public Observable<ServiceResponse<ClusterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClusterInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClusterInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClusterInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClusterInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * List cluster resource by resource group.
     * List cluster resource by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @return the PagedList<ClusterInner> object if successful.
     */
    public PagedList<ClusterInner> listByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) {
        PageImpl<ClusterInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName, subscriptionId, apiVersion).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<ClusterInner>(page) {
            @Override
            public Page<ClusterInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * List cluster resource by resource group.
     * List cluster resource by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ClusterInner>> listByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ServiceCallback<List<ClusterInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName, subscriptionId, apiVersion), serviceCallback);
    }

    /**
     * List cluster resource by resource group.
     * List cluster resource by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @return the observable to the List&lt;ClusterInner&gt; object
     */
    public Observable<Page<ClusterInner>> listByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, subscriptionId, apiVersion).map(new Func1<ServiceResponse<List<ClusterInner>>, Page<ClusterInner>>() {
            @Override
            public Page<ClusterInner> call(ServiceResponse<List<ClusterInner>> response) {
                PageImpl<ClusterInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * List cluster resource by resource group.
     * List cluster resource by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @return the observable to the List&lt;ClusterInner&gt; object
     */
    public Observable<ServiceResponse<List<ClusterInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName, String subscriptionId, String apiVersion) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, subscriptionId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ClusterInner>> result = listByResourceGroupDelegate(response);
                        List<ClusterInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ClusterInner>> clientResponse = new ServiceResponse<List<ClusterInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ClusterInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ClusterInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ClusterInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * List cluster resource.
     * List cluster resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @return the PagedList<ClusterInner> object if successful.
     */
    public PagedList<ClusterInner> list(String subscriptionId, String apiVersion) {
        PageImpl<ClusterInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync(subscriptionId, apiVersion).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<ClusterInner>(page) {
            @Override
            public Page<ClusterInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * List cluster resource.
     * List cluster resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ClusterInner>> listAsync(String subscriptionId, String apiVersion, final ServiceCallback<List<ClusterInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(subscriptionId, apiVersion), serviceCallback);
    }

    /**
     * List cluster resource.
     * List cluster resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @return the observable to the List&lt;ClusterInner&gt; object
     */
    public Observable<Page<ClusterInner>> listAsync(String subscriptionId, String apiVersion) {
        return listWithServiceResponseAsync(subscriptionId, apiVersion).map(new Func1<ServiceResponse<List<ClusterInner>>, Page<ClusterInner>>() {
            @Override
            public Page<ClusterInner> call(ServiceResponse<List<ClusterInner>> response) {
                PageImpl<ClusterInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * List cluster resource.
     * List cluster resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param apiVersion The version of the API.
     * @return the observable to the List&lt;ClusterInner&gt; object
     */
    public Observable<ServiceResponse<List<ClusterInner>>> listWithServiceResponseAsync(String subscriptionId, String apiVersion) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.list(subscriptionId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ClusterInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ClusterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ClusterInner>> result = listDelegate(response);
                        List<ClusterInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ClusterInner>> clientResponse = new ServiceResponse<List<ClusterInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ClusterInner>> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ClusterInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ClusterInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
