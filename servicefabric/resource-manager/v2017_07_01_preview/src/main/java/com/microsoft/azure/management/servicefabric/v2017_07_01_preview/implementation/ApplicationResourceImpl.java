/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation;

import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationParameter;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationUpgradePolicy;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationMetricDescription;
import rx.functions.Func1;

class ApplicationResourceImpl extends CreatableUpdatableImpl<ApplicationResource, ApplicationResourceInner, ApplicationResourceImpl> implements ApplicationResource, ApplicationResource.Definition, ApplicationResource.Update {
    private final ServiceFabricManager manager;
    private String subscriptionId;
    private String resourceGroupName;
    private String clusterName;
    private String applicationName;
    private String capiVersion;
    private String uapiVersion;
    private ApplicationResourceUpdateInner updateParameter;

    ApplicationResourceImpl(String name, ServiceFabricManager manager) {
        super(name, new ApplicationResourceInner());
        this.manager = manager;
        // Set resource name
        this.applicationName = name;
        //
        this.updateParameter = new ApplicationResourceUpdateInner();
    }

    ApplicationResourceImpl(ApplicationResourceInner inner, ServiceFabricManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.applicationName = inner.name();
        // set resource ancestor and positional variables
        this.subscriptionId = IdParsingUtils.getValueFromIdByName(inner.id(), "subscriptions");
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterName = IdParsingUtils.getValueFromIdByName(inner.id(), "clusters");
        this.applicationName = IdParsingUtils.getValueFromIdByName(inner.id(), "applications");
        //
        this.updateParameter = new ApplicationResourceUpdateInner();
    }

    @Override
    public ServiceFabricManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ApplicationResource> createResourceAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.putAsync(this.subscriptionId, this.resourceGroupName, this.clusterName, this.applicationName, this.capiVersion, this.inner())
            .map(new Func1<ApplicationResourceInner, ApplicationResourceInner>() {
               @Override
               public ApplicationResourceInner call(ApplicationResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ApplicationResource> updateResourceAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.patchAsync(this.subscriptionId, this.resourceGroupName, this.clusterName, this.applicationName, this.uapiVersion, this.updateParameter)
            .map(new Func1<ApplicationResourceInner, ApplicationResourceInner>() {
               @Override
               public ApplicationResourceInner call(ApplicationResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ApplicationResourceInner> getInnerAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.getAsync(this.subscriptionId, this.resourceGroupName, this.clusterName, this.applicationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new ApplicationResourceUpdateInner();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public Long maximumNodes() {
        return this.inner().maximumNodes();
    }

    @Override
    public List<ApplicationMetricDescription> metrics() {
        return this.inner().metrics();
    }

    @Override
    public Long minimumNodes() {
        return this.inner().minimumNodes();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<ApplicationParameter> parameters() {
        return this.inner().parameters();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Boolean removeApplicationCapacity() {
        return this.inner().removeApplicationCapacity();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String typeName() {
        return this.inner().typeName();
    }

    @Override
    public String typeVersion() {
        return this.inner().typeVersion();
    }

    @Override
    public ApplicationUpgradePolicy upgradePolicy() {
        return this.inner().upgradePolicy();
    }

    @Override
    public ApplicationResourceImpl withExistingCluster(String subscriptionId, String resourceGroupName, String clusterName) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    @Override
    public ApplicationResourceImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ApplicationResourceImpl withTypeName(String typeName) {
        this.inner().withTypeName(typeName);
        return this;
    }

    @Override
    public ApplicationResourceImpl withApiVersion(String apiVersion) {
        if (isInCreateMode()) {
            this.capiVersion = apiVersion;
        } else {
            this.uapiVersion = apiVersion;
        }
        return this;
    }

    @Override
    public ApplicationResourceImpl withMaximumNodes(Long maximumNodes) {
        if (isInCreateMode()) {
            this.inner().withMaximumNodes(maximumNodes);
        } else {
            this.updateParameter.withMaximumNodes(maximumNodes);
        }
        return this;
    }

    @Override
    public ApplicationResourceImpl withMetrics(List<ApplicationMetricDescription> metrics) {
        if (isInCreateMode()) {
            this.inner().withMetrics(metrics);
        } else {
            this.updateParameter.withMetrics(metrics);
        }
        return this;
    }

    @Override
    public ApplicationResourceImpl withMinimumNodes(Long minimumNodes) {
        if (isInCreateMode()) {
            this.inner().withMinimumNodes(minimumNodes);
        } else {
            this.updateParameter.withMinimumNodes(minimumNodes);
        }
        return this;
    }

    @Override
    public ApplicationResourceImpl withParameters(List<ApplicationParameter> parameters) {
        if (isInCreateMode()) {
            this.inner().withParameters(parameters);
        } else {
            this.updateParameter.withParameters(parameters);
        }
        return this;
    }

    @Override
    public ApplicationResourceImpl withRemoveApplicationCapacity(Boolean removeApplicationCapacity) {
        if (isInCreateMode()) {
            this.inner().withRemoveApplicationCapacity(removeApplicationCapacity);
        } else {
            this.updateParameter.withRemoveApplicationCapacity(removeApplicationCapacity);
        }
        return this;
    }

    @Override
    public ApplicationResourceImpl withTypeVersion(String typeVersion) {
        if (isInCreateMode()) {
            this.inner().withTypeVersion(typeVersion);
        } else {
            this.updateParameter.withTypeVersion(typeVersion);
        }
        return this;
    }

    @Override
    public ApplicationResourceImpl withUpgradePolicy(ApplicationUpgradePolicy upgradePolicy) {
        if (isInCreateMode()) {
            this.inner().withUpgradePolicy(upgradePolicy);
        } else {
            this.updateParameter.withUpgradePolicy(upgradePolicy);
        }
        return this;
    }

}
