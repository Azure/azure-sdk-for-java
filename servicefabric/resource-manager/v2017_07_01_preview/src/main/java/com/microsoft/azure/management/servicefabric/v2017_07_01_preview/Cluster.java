/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation.ServiceFabricManager;
import java.util.List;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation.ClusterInner;

/**
 * Type representing Cluster.
 */
public interface Cluster extends HasInner<ClusterInner>, Resource, GroupableResourceCore<ServiceFabricManager, ClusterInner>, HasResourceGroup, Updatable<Cluster.Update>, HasManager<ServiceFabricManager> {
    /**
     * @return the addOnFeatures value.
     */
    List<String> addOnFeatures();

    /**
     * @return the availableClusterVersions value.
     */
    List<ClusterVersionDetails> availableClusterVersions();

    /**
     * @return the azureActiveDirectory value.
     */
    AzureActiveDirectory azureActiveDirectory();

    /**
     * @return the certificate value.
     */
    CertificateDescription certificate();

    /**
     * @return the clientCertificateCommonNames value.
     */
    List<ClientCertificateCommonName> clientCertificateCommonNames();

    /**
     * @return the clientCertificateThumbprints value.
     */
    List<ClientCertificateThumbprint> clientCertificateThumbprints();

    /**
     * @return the clusterCodeVersion value.
     */
    String clusterCodeVersion();

    /**
     * @return the clusterEndpoint value.
     */
    String clusterEndpoint();

    /**
     * @return the clusterId value.
     */
    String clusterId();

    /**
     * @return the clusterState value.
     */
    String clusterState();

    /**
     * @return the diagnosticsStorageAccountConfig value.
     */
    DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig();

    /**
     * @return the fabricSettings value.
     */
    List<SettingsSectionDescription> fabricSettings();

    /**
     * @return the managementEndpoint value.
     */
    String managementEndpoint();

    /**
     * @return the nodeTypes value.
     */
    List<NodeTypeDescription> nodeTypes();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the reliabilityLevel value.
     */
    String reliabilityLevel();

    /**
     * @return the reverseProxyCertificate value.
     */
    CertificateDescription reverseProxyCertificate();

    /**
     * @return the upgradeDescription value.
     */
    ClusterUpgradePolicy upgradeDescription();

    /**
     * @return the upgradeMode value.
     */
    String upgradeMode();

    /**
     * @return the vmImage value.
     */
    String vmImage();

    /**
     * The entirety of the Cluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithApiVersion, DefinitionStages.WithManagementEndpoint, DefinitionStages.WithNodeTypes, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Cluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Cluster definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Cluster definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithApiVersion> {
        }

        /**
         * The stage of the cluster definition allowing to specify ApiVersion.
         */
        interface WithApiVersion {
           /**
            * Specifies apiVersion.
            * @param apiVersion The version of the API
            * @return the next definition stage
*/
            WithManagementEndpoint withApiVersion(String apiVersion);
        }

        /**
         * The stage of the cluster definition allowing to specify ManagementEndpoint.
         */
        interface WithManagementEndpoint {
           /**
            * Specifies managementEndpoint.
            * @param managementEndpoint The http management endpoint of the cluster
            * @return the next definition stage
*/
            WithNodeTypes withManagementEndpoint(String managementEndpoint);
        }

        /**
         * The stage of the cluster definition allowing to specify NodeTypes.
         */
        interface WithNodeTypes {
           /**
            * Specifies nodeTypes.
            * @param nodeTypes The list of node types in the cluster
            * @return the next definition stage
*/
            WithCreate withNodeTypes(List<NodeTypeDescription> nodeTypes);
        }

        /**
         * The stage of the cluster definition allowing to specify AddOnFeatures.
         */
        interface WithAddOnFeatures {
            /**
             * Specifies addOnFeatures.
             * @param addOnFeatures The list of add-on features to enable in the cluster
             * @return the next definition stage
             */
            WithCreate withAddOnFeatures(List<String> addOnFeatures);
        }

        /**
         * The stage of the cluster definition allowing to specify AvailableClusterVersions.
         */
        interface WithAvailableClusterVersions {
            /**
             * Specifies availableClusterVersions.
             * @param availableClusterVersions The Service Fabric runtime versions available for this cluster
             * @return the next definition stage
             */
            WithCreate withAvailableClusterVersions(List<ClusterVersionDetails> availableClusterVersions);
        }

        /**
         * The stage of the cluster definition allowing to specify AzureActiveDirectory.
         */
        interface WithAzureActiveDirectory {
            /**
             * Specifies azureActiveDirectory.
             * @param azureActiveDirectory The AAD authentication settings of the cluster
             * @return the next definition stage
             */
            WithCreate withAzureActiveDirectory(AzureActiveDirectory azureActiveDirectory);
        }

        /**
         * The stage of the cluster definition allowing to specify Certificate.
         */
        interface WithCertificate {
            /**
             * Specifies certificate.
             * @param certificate The certificate to use for securing the cluster. The certificate provided will be used for  node to node security within the cluster, SSL certificate for cluster management endpoint and default  admin client
             * @return the next definition stage
             */
            WithCreate withCertificate(CertificateDescription certificate);
        }

        /**
         * The stage of the cluster definition allowing to specify ClientCertificateCommonNames.
         */
        interface WithClientCertificateCommonNames {
            /**
             * Specifies clientCertificateCommonNames.
             * @param clientCertificateCommonNames The list of client certificates referenced by common name that are allowed to manage the cluster
             * @return the next definition stage
             */
            WithCreate withClientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames);
        }

        /**
         * The stage of the cluster definition allowing to specify ClientCertificateThumbprints.
         */
        interface WithClientCertificateThumbprints {
            /**
             * Specifies clientCertificateThumbprints.
             * @param clientCertificateThumbprints The list of client certificates referenced by thumbprint that are allowed to manage the cluster
             * @return the next definition stage
             */
            WithCreate withClientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints);
        }

        /**
         * The stage of the cluster definition allowing to specify ClusterCodeVersion.
         */
        interface WithClusterCodeVersion {
            /**
             * Specifies clusterCodeVersion.
             * @param clusterCodeVersion The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**
             * @return the next definition stage
             */
            WithCreate withClusterCodeVersion(String clusterCodeVersion);
        }

        /**
         * The stage of the cluster definition allowing to specify ClusterState.
         */
        interface WithClusterState {
            /**
             * Specifies clusterState.
             * @param clusterState Possible values include: 'WaitingForNodes', 'Deploying', 'BaselineUpgrade', 'UpdatingUserConfiguration', 'UpdatingUserCertificate', 'UpdatingInfrastructure', 'EnforcingClusterVersion', 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
             * @return the next definition stage
             */
            WithCreate withClusterState(String clusterState);
        }

        /**
         * The stage of the cluster definition allowing to specify DiagnosticsStorageAccountConfig.
         */
        interface WithDiagnosticsStorageAccountConfig {
            /**
             * Specifies diagnosticsStorageAccountConfig.
             * @param diagnosticsStorageAccountConfig The storage account information for storing Service Fabric diagnostic logs
             * @return the next definition stage
             */
            WithCreate withDiagnosticsStorageAccountConfig(DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig);
        }

        /**
         * The stage of the cluster definition allowing to specify FabricSettings.
         */
        interface WithFabricSettings {
            /**
             * Specifies fabricSettings.
             * @param fabricSettings The list of custom fabric settings to configure the cluster
             * @return the next definition stage
             */
            WithCreate withFabricSettings(List<SettingsSectionDescription> fabricSettings);
        }

        /**
         * The stage of the cluster definition allowing to specify ReliabilityLevel.
         */
        interface WithReliabilityLevel {
            /**
             * Specifies reliabilityLevel.
             * @param reliabilityLevel Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
             * @return the next definition stage
             */
            WithCreate withReliabilityLevel(String reliabilityLevel);
        }

        /**
         * The stage of the cluster definition allowing to specify ReverseProxyCertificate.
         */
        interface WithReverseProxyCertificate {
            /**
             * Specifies reverseProxyCertificate.
             * @param reverseProxyCertificate The server certificate used by reverse proxy
             * @return the next definition stage
             */
            WithCreate withReverseProxyCertificate(CertificateDescription reverseProxyCertificate);
        }

        /**
         * The stage of the cluster definition allowing to specify UpgradeDescription.
         */
        interface WithUpgradeDescription {
            /**
             * Specifies upgradeDescription.
             * @param upgradeDescription The policy to use when upgrading the cluster
             * @return the next definition stage
             */
            WithCreate withUpgradeDescription(ClusterUpgradePolicy upgradeDescription);
        }

        /**
         * The stage of the cluster definition allowing to specify UpgradeMode.
         */
        interface WithUpgradeMode {
            /**
             * Specifies upgradeMode.
             * @param upgradeMode Possible values include: 'Automatic', 'Manual'
             * @return the next definition stage
             */
            WithCreate withUpgradeMode(String upgradeMode);
        }

        /**
         * The stage of the cluster definition allowing to specify VmImage.
         */
        interface WithVmImage {
            /**
             * Specifies vmImage.
             * @param vmImage The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used
             * @return the next definition stage
             */
            WithCreate withVmImage(String vmImage);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Cluster>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithAddOnFeatures, DefinitionStages.WithAvailableClusterVersions, DefinitionStages.WithAzureActiveDirectory, DefinitionStages.WithCertificate, DefinitionStages.WithClientCertificateCommonNames, DefinitionStages.WithClientCertificateThumbprints, DefinitionStages.WithClusterCodeVersion, DefinitionStages.WithClusterState, DefinitionStages.WithDiagnosticsStorageAccountConfig, DefinitionStages.WithFabricSettings, DefinitionStages.WithReliabilityLevel, DefinitionStages.WithReverseProxyCertificate, DefinitionStages.WithUpgradeDescription, DefinitionStages.WithUpgradeMode, DefinitionStages.WithVmImage {
        }
    }
    /**
     * The template for a Cluster update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Cluster>, Resource.UpdateWithTags<Update>, UpdateStages.WithApiVersion, UpdateStages.WithAddOnFeatures, UpdateStages.WithCertificate, UpdateStages.WithClientCertificateCommonNames, UpdateStages.WithClientCertificateThumbprints, UpdateStages.WithClusterCodeVersion, UpdateStages.WithFabricSettings, UpdateStages.WithNodeTypes, UpdateStages.WithReliabilityLevel, UpdateStages.WithReverseProxyCertificate, UpdateStages.WithUpgradeDescription, UpdateStages.WithUpgradeMode {
    }

    /**
     * Grouping of Cluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the cluster update allowing to specify ApiVersion.
         */
        interface WithApiVersion {
            /**
             * Specifies apiVersion.
             * @param apiVersion The version of the API
             * @return the next update stage
             */
            Update withApiVersion(String apiVersion);
        }

        /**
         * The stage of the cluster update allowing to specify AddOnFeatures.
         */
        interface WithAddOnFeatures {
            /**
             * Specifies addOnFeatures.
             * @param addOnFeatures The list of add-on features to enable in the cluster
             * @return the next update stage
             */
            Update withAddOnFeatures(List<String> addOnFeatures);
        }

        /**
         * The stage of the cluster update allowing to specify Certificate.
         */
        interface WithCertificate {
            /**
             * Specifies certificate.
             * @param certificate The certificate to use for securing the cluster. The certificate provided will be used for  node to node security within the cluster, SSL certificate for cluster management endpoint and default  admin client
             * @return the next update stage
             */
            Update withCertificate(CertificateDescription certificate);
        }

        /**
         * The stage of the cluster update allowing to specify ClientCertificateCommonNames.
         */
        interface WithClientCertificateCommonNames {
            /**
             * Specifies clientCertificateCommonNames.
             * @param clientCertificateCommonNames The list of client certificates referenced by common name that are allowed to manage the cluster. This will overwrite the existing list
             * @return the next update stage
             */
            Update withClientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames);
        }

        /**
         * The stage of the cluster update allowing to specify ClientCertificateThumbprints.
         */
        interface WithClientCertificateThumbprints {
            /**
             * Specifies clientCertificateThumbprints.
             * @param clientCertificateThumbprints The list of client certificates referenced by thumbprint that are allowed to manage the cluster. This will overwrite the existing list
             * @return the next update stage
             */
            Update withClientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints);
        }

        /**
         * The stage of the cluster update allowing to specify ClusterCodeVersion.
         */
        interface WithClusterCodeVersion {
            /**
             * Specifies clusterCodeVersion.
             * @param clusterCodeVersion The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**
             * @return the next update stage
             */
            Update withClusterCodeVersion(String clusterCodeVersion);
        }

        /**
         * The stage of the cluster update allowing to specify FabricSettings.
         */
        interface WithFabricSettings {
            /**
             * Specifies fabricSettings.
             * @param fabricSettings The list of custom fabric settings to configure the cluster. This will overwrite the existing list
             * @return the next update stage
             */
            Update withFabricSettings(List<SettingsSectionDescription> fabricSettings);
        }

        /**
         * The stage of the cluster update allowing to specify NodeTypes.
         */
        interface WithNodeTypes {
            /**
             * Specifies nodeTypes.
             * @param nodeTypes The list of node types in the cluster. This will overwrite the existing list
             * @return the next update stage
             */
            Update withNodeTypes(List<NodeTypeDescription> nodeTypes);
        }

        /**
         * The stage of the cluster update allowing to specify ReliabilityLevel.
         */
        interface WithReliabilityLevel {
            /**
             * Specifies reliabilityLevel.
             * @param reliabilityLevel The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity). Possible values include: 'Bronze', 'Silver', 'Gold'
             * @return the next update stage
             */
            Update withReliabilityLevel(String reliabilityLevel);
        }

        /**
         * The stage of the cluster update allowing to specify ReverseProxyCertificate.
         */
        interface WithReverseProxyCertificate {
            /**
             * Specifies reverseProxyCertificate.
             * @param reverseProxyCertificate The server certificate used by reverse proxy
             * @return the next update stage
             */
            Update withReverseProxyCertificate(CertificateDescription reverseProxyCertificate);
        }

        /**
         * The stage of the cluster update allowing to specify UpgradeDescription.
         */
        interface WithUpgradeDescription {
            /**
             * Specifies upgradeDescription.
             * @param upgradeDescription The policy to use when upgrading the cluster
             * @return the next update stage
             */
            Update withUpgradeDescription(ClusterUpgradePolicy upgradeDescription);
        }

        /**
         * The stage of the cluster update allowing to specify UpgradeMode.
         */
        interface WithUpgradeMode {
            /**
             * Specifies upgradeMode.
             * @param upgradeMode The upgrade mode of the cluster. This indicates if the cluster should be automatically upgraded when new Service Fabric runtime version is available. Possible values include: 'Automatic', 'Manual'
             * @return the next update stage
             */
            Update withUpgradeMode(String upgradeMode);
        }

    }
}
