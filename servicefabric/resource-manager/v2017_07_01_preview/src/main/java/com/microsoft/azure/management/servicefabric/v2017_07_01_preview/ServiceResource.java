/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation.ServiceResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation.ServiceFabricManager;
import java.util.List;

/**
 * Type representing ServiceResource.
 */
public interface ServiceResource extends HasInner<ServiceResourceInner>, Indexable, Refreshable<ServiceResource>, Updatable<ServiceResource.Update>, HasManager<ServiceFabricManager> {
    /**
     * @return the correlationScheme value.
     */
    List<ServiceCorrelationDescription> correlationScheme();

    /**
     * @return the defaultMoveCost value.
     */
    String defaultMoveCost();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the partitionDescription value.
     */
    PartitionSchemeDescription partitionDescription();

    /**
     * @return the placementConstraints value.
     */
    String placementConstraints();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the serviceLoadMetrics value.
     */
    List<ServiceLoadMetricDescription> serviceLoadMetrics();

    /**
     * @return the servicePlacementPolicies value.
     */
    List<ServicePlacementPolicyDescription> servicePlacementPolicies();

    /**
     * @return the serviceTypeName value.
     */
    String serviceTypeName();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ServiceResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithApplication, DefinitionStages.WithApiVersion, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ServiceResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ServiceResource definition.
         */
        interface Blank extends WithApplication {
        }

        /**
         * The stage of the serviceresource definition allowing to specify Application.
         */
        interface WithApplication {
           /**
            * Specifies subscriptionId, resourceGroupName, clusterName, applicationName.
            * @param subscriptionId The customer subscription identifier
            * @param resourceGroupName The name of the resource group
            * @param clusterName The name of the cluster resource
            * @param applicationName The name of the application resource
            * @return the next definition stage
            */
            WithApiVersion withExistingApplication(String subscriptionId, String resourceGroupName, String clusterName, String applicationName);
        }

        /**
         * The stage of the serviceresource definition allowing to specify ApiVersion.
         */
        interface WithApiVersion {
           /**
            * Specifies apiVersion.
            * @param apiVersion The version of the API
            * @return the next definition stage
            */
            WithLocation withApiVersion(String apiVersion);
        }

        /**
         * The stage of the serviceresource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the serviceresource definition allowing to specify CorrelationScheme.
         */
        interface WithCorrelationScheme {
            /**
             * Specifies correlationScheme.
             * @param correlationScheme the correlationScheme parameter value
             * @return the next definition stage
             */
            WithCreate withCorrelationScheme(List<ServiceCorrelationDescription> correlationScheme);
        }

        /**
         * The stage of the serviceresource definition allowing to specify DefaultMoveCost.
         */
        interface WithDefaultMoveCost {
            /**
             * Specifies defaultMoveCost.
             * @param defaultMoveCost Possible values include: 'Zero', 'Low', 'Medium', 'High'
             * @return the next definition stage
             */
            WithCreate withDefaultMoveCost(String defaultMoveCost);
        }

        /**
         * The stage of the serviceresource definition allowing to specify PartitionDescription.
         */
        interface WithPartitionDescription {
            /**
             * Specifies partitionDescription.
             * @param partitionDescription the partitionDescription parameter value
             * @return the next definition stage
             */
            WithCreate withPartitionDescription(PartitionSchemeDescription partitionDescription);
        }

        /**
         * The stage of the serviceresource definition allowing to specify PlacementConstraints.
         */
        interface WithPlacementConstraints {
            /**
             * Specifies placementConstraints.
             * @param placementConstraints The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)"
             * @return the next definition stage
             */
            WithCreate withPlacementConstraints(String placementConstraints);
        }

        /**
         * The stage of the serviceresource definition allowing to specify ServiceLoadMetrics.
         */
        interface WithServiceLoadMetrics {
            /**
             * Specifies serviceLoadMetrics.
             * @param serviceLoadMetrics the serviceLoadMetrics parameter value
             * @return the next definition stage
             */
            WithCreate withServiceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics);
        }

        /**
         * The stage of the serviceresource definition allowing to specify ServicePlacementPolicies.
         */
        interface WithServicePlacementPolicies {
            /**
             * Specifies servicePlacementPolicies.
             * @param servicePlacementPolicies the servicePlacementPolicies parameter value
             * @return the next definition stage
             */
            WithCreate withServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies);
        }

        /**
         * The stage of the serviceresource definition allowing to specify ServiceTypeName.
         */
        interface WithServiceTypeName {
            /**
             * Specifies serviceTypeName.
             * @param serviceTypeName The name of the service type
             * @return the next definition stage
             */
            WithCreate withServiceTypeName(String serviceTypeName);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ServiceResource>, DefinitionStages.WithCorrelationScheme, DefinitionStages.WithDefaultMoveCost, DefinitionStages.WithPartitionDescription, DefinitionStages.WithPlacementConstraints, DefinitionStages.WithServiceLoadMetrics, DefinitionStages.WithServicePlacementPolicies, DefinitionStages.WithServiceTypeName {
        }
    }
    /**
     * The template for a ServiceResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ServiceResource>, UpdateStages.WithApiVersion, UpdateStages.WithCorrelationScheme, UpdateStages.WithDefaultMoveCost, UpdateStages.WithPlacementConstraints, UpdateStages.WithServiceLoadMetrics, UpdateStages.WithServicePlacementPolicies {
    }

    /**
     * Grouping of ServiceResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the serviceresource update allowing to specify ApiVersion.
         */
        interface WithApiVersion {
            /**
             * Specifies apiVersion.
             * @param apiVersion The version of the API
             * @return the next update stage
             */
            Update withApiVersion(String apiVersion);
        }

        /**
         * The stage of the serviceresource update allowing to specify CorrelationScheme.
         */
        interface WithCorrelationScheme {
            /**
             * Specifies correlationScheme.
             * @param correlationScheme the correlationScheme parameter value
             * @return the next update stage
             */
            Update withCorrelationScheme(List<ServiceCorrelationDescription> correlationScheme);
        }

        /**
         * The stage of the serviceresource update allowing to specify DefaultMoveCost.
         */
        interface WithDefaultMoveCost {
            /**
             * Specifies defaultMoveCost.
             * @param defaultMoveCost Possible values include: 'Zero', 'Low', 'Medium', 'High'
             * @return the next update stage
             */
            Update withDefaultMoveCost(String defaultMoveCost);
        }

        /**
         * The stage of the serviceresource update allowing to specify PlacementConstraints.
         */
        interface WithPlacementConstraints {
            /**
             * Specifies placementConstraints.
             * @param placementConstraints The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)"
             * @return the next update stage
             */
            Update withPlacementConstraints(String placementConstraints);
        }

        /**
         * The stage of the serviceresource update allowing to specify ServiceLoadMetrics.
         */
        interface WithServiceLoadMetrics {
            /**
             * Specifies serviceLoadMetrics.
             * @param serviceLoadMetrics the serviceLoadMetrics parameter value
             * @return the next update stage
             */
            Update withServiceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics);
        }

        /**
         * The stage of the serviceresource update allowing to specify ServicePlacementPolicies.
         */
        interface WithServicePlacementPolicies {
            /**
             * Specifies servicePlacementPolicies.
             * @param servicePlacementPolicies the servicePlacementPolicies parameter value
             * @return the next update stage
             */
            Update withServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies);
        }

    }
}
