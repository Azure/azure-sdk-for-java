/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ErrorModelException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ApplicationTypes.
 */
public class ApplicationTypesInner {
    /** The Retrofit service to perform REST calls. */
    private ApplicationTypesService service;
    /** The service client containing this operation class. */
    private ServiceFabricManagementClientImpl client;

    /**
     * Initializes an instance of ApplicationTypesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApplicationTypesInner(Retrofit retrofit, ServiceFabricManagementClientImpl client) {
        this.service = retrofit.create(ApplicationTypesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ApplicationTypes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApplicationTypesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationTypes get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationTypes put" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}")
        Observable<Response<ResponseBody>> put(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ApplicationTypeResourceInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationTypes delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationTypes beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.v2017_07_01_preview.ApplicationTypes list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Returns an application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationTypeResourceInner object if successful.
     */
    public ApplicationTypeResourceInner get(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion).toBlocking().single().body();
    }

    /**
     * Returns an application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationTypeResourceInner> getAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, final ServiceCallback<ApplicationTypeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion), serviceCallback);
    }

    /**
     * Returns an application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeResourceInner object
     */
    public Observable<ApplicationTypeResourceInner> getAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion).map(new Func1<ServiceResponse<ApplicationTypeResourceInner>, ApplicationTypeResourceInner>() {
            @Override
            public ApplicationTypeResourceInner call(ServiceResponse<ApplicationTypeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns an application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeResourceInner object
     */
    public Observable<ServiceResponse<ApplicationTypeResourceInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.get(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationTypeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationTypeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationTypeResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationTypeResourceInner> getDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationTypeResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationTypeResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Creates the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @param location Resource location.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationTypeResourceInner object if successful.
     */
    public ApplicationTypeResourceInner put(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, String location) {
        return putWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, location).toBlocking().single().body();
    }

    /**
     * Creates the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @param location Resource location.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationTypeResourceInner> putAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, String location, final ServiceCallback<ApplicationTypeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(putWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, location), serviceCallback);
    }

    /**
     * Creates the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @param location Resource location.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeResourceInner object
     */
    public Observable<ApplicationTypeResourceInner> putAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, String location) {
        return putWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, location).map(new Func1<ServiceResponse<ApplicationTypeResourceInner>, ApplicationTypeResourceInner>() {
            @Override
            public ApplicationTypeResourceInner call(ServiceResponse<ApplicationTypeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @param location Resource location.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeResourceInner object
     */
    public Observable<ServiceResponse<ApplicationTypeResourceInner>> putWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, String location) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        ApplicationTypeResourceInner parameters = new ApplicationTypeResourceInner();
        parameters.withLocation(location);
        return service.put(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationTypeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationTypeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationTypeResourceInner> clientResponse = putDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationTypeResourceInner> putDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationTypeResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationTypeResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        deleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion).toBlocking().last().body();
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion), serviceCallback);
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        return deleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        beginDeleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion).toBlocking().single().body();
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion), serviceCallback);
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        return beginDeleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the application type name resource.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param applicationTypeName The name of the application type name resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.beginDelete(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Returns all application type names in the specified cluster.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationTypeResourceListInner object if successful.
     */
    public ApplicationTypeResourceListInner list(String subscriptionId, String resourceGroupName, String clusterName, String apiVersion) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, apiVersion).toBlocking().single().body();
    }

    /**
     * Returns all application type names in the specified cluster.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param apiVersion The version of the API.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationTypeResourceListInner> listAsync(String subscriptionId, String resourceGroupName, String clusterName, String apiVersion, final ServiceCallback<ApplicationTypeResourceListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, apiVersion), serviceCallback);
    }

    /**
     * Returns all application type names in the specified cluster.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeResourceListInner object
     */
    public Observable<ApplicationTypeResourceListInner> listAsync(String subscriptionId, String resourceGroupName, String clusterName, String apiVersion) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, apiVersion).map(new Func1<ServiceResponse<ApplicationTypeResourceListInner>, ApplicationTypeResourceListInner>() {
            @Override
            public ApplicationTypeResourceListInner call(ServiceResponse<ApplicationTypeResourceListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns all application type names in the specified cluster.
     *
     * @param subscriptionId The customer subscription identifier
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource
     * @param apiVersion The version of the API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeResourceListInner object
     */
    public Observable<ServiceResponse<ApplicationTypeResourceListInner>> listWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String apiVersion) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.list(subscriptionId, resourceGroupName, clusterName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationTypeResourceListInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationTypeResourceListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationTypeResourceListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationTypeResourceListInner> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationTypeResourceListInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationTypeResourceListInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
