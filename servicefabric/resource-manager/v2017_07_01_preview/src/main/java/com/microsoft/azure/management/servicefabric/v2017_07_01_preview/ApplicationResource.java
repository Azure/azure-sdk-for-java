/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.v2017_07_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation.ApplicationResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.servicefabric.v2017_07_01_preview.implementation.ServiceFabricManager;
import java.util.List;

/**
 * Type representing ApplicationResource.
 */
public interface ApplicationResource extends HasInner<ApplicationResourceInner>, Indexable, Refreshable<ApplicationResource>, Updatable<ApplicationResource.Update>, HasManager<ServiceFabricManager> {
    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the maximumNodes value.
     */
    Long maximumNodes();

    /**
     * @return the metrics value.
     */
    List<ApplicationMetricDescription> metrics();

    /**
     * @return the minimumNodes value.
     */
    Long minimumNodes();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the parameters value.
     */
    List<ApplicationParameter> parameters();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the removeApplicationCapacity value.
     */
    Boolean removeApplicationCapacity();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the typeName value.
     */
    String typeName();

    /**
     * @return the typeVersion value.
     */
    String typeVersion();

    /**
     * @return the upgradePolicy value.
     */
    ApplicationUpgradePolicy upgradePolicy();

    /**
     * The entirety of the ApplicationResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithCluster, DefinitionStages.WithApiVersion, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ApplicationResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ApplicationResource definition.
         */
        interface Blank extends WithCluster {
        }

        /**
         * The stage of the applicationresource definition allowing to specify Cluster.
         */
        interface WithCluster {
           /**
            * Specifies subscriptionId, resourceGroupName, clusterName.
            * @param subscriptionId The customer subscription identifier
            * @param resourceGroupName The name of the resource group
            * @param clusterName The name of the cluster resource
            * @return the next definition stage
            */
            WithApiVersion withExistingCluster(String subscriptionId, String resourceGroupName, String clusterName);
        }

        /**
         * The stage of the applicationresource definition allowing to specify ApiVersion.
         */
        interface WithApiVersion {
           /**
            * Specifies apiVersion.
            * @param apiVersion The version of the API
            * @return the next definition stage
            */
            WithLocation withApiVersion(String apiVersion);
        }

        /**
         * The stage of the applicationresource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the applicationresource definition allowing to specify MaximumNodes.
         */
        interface WithMaximumNodes {
            /**
             * Specifies maximumNodes.
             * @param maximumNodes The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node
             * @return the next definition stage
             */
            WithCreate withMaximumNodes(Long maximumNodes);
        }

        /**
         * The stage of the applicationresource definition allowing to specify Metrics.
         */
        interface WithMetrics {
            /**
             * Specifies metrics.
             * @param metrics the metrics parameter value
             * @return the next definition stage
             */
            WithCreate withMetrics(List<ApplicationMetricDescription> metrics);
        }

        /**
         * The stage of the applicationresource definition allowing to specify MinimumNodes.
         */
        interface WithMinimumNodes {
            /**
             * Specifies minimumNodes.
             * @param minimumNodes The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property
             * @return the next definition stage
             */
            WithCreate withMinimumNodes(Long minimumNodes);
        }

        /**
         * The stage of the applicationresource definition allowing to specify Parameters.
         */
        interface WithParameters {
            /**
             * Specifies parameters.
             * @param parameters the parameters parameter value
             * @return the next definition stage
             */
            WithCreate withParameters(List<ApplicationParameter> parameters);
        }

        /**
         * The stage of the applicationresource definition allowing to specify RemoveApplicationCapacity.
         */
        interface WithRemoveApplicationCapacity {
            /**
             * Specifies removeApplicationCapacity.
             * @param removeApplicationCapacity The version of the application type
             * @return the next definition stage
             */
            WithCreate withRemoveApplicationCapacity(Boolean removeApplicationCapacity);
        }

        /**
         * The stage of the applicationresource definition allowing to specify TypeName.
         */
        interface WithTypeName {
            /**
             * Specifies typeName.
             * @param typeName the typeName parameter value
             * @return the next definition stage
             */
            WithCreate withTypeName(String typeName);
        }

        /**
         * The stage of the applicationresource definition allowing to specify TypeVersion.
         */
        interface WithTypeVersion {
            /**
             * Specifies typeVersion.
             * @param typeVersion the typeVersion parameter value
             * @return the next definition stage
             */
            WithCreate withTypeVersion(String typeVersion);
        }

        /**
         * The stage of the applicationresource definition allowing to specify UpgradePolicy.
         */
        interface WithUpgradePolicy {
            /**
             * Specifies upgradePolicy.
             * @param upgradePolicy the upgradePolicy parameter value
             * @return the next definition stage
             */
            WithCreate withUpgradePolicy(ApplicationUpgradePolicy upgradePolicy);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ApplicationResource>, DefinitionStages.WithMaximumNodes, DefinitionStages.WithMetrics, DefinitionStages.WithMinimumNodes, DefinitionStages.WithParameters, DefinitionStages.WithRemoveApplicationCapacity, DefinitionStages.WithTypeName, DefinitionStages.WithTypeVersion, DefinitionStages.WithUpgradePolicy {
        }
    }
    /**
     * The template for a ApplicationResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ApplicationResource>, UpdateStages.WithApiVersion, UpdateStages.WithMaximumNodes, UpdateStages.WithMetrics, UpdateStages.WithMinimumNodes, UpdateStages.WithParameters, UpdateStages.WithRemoveApplicationCapacity, UpdateStages.WithTypeVersion, UpdateStages.WithUpgradePolicy {
    }

    /**
     * Grouping of ApplicationResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the applicationresource update allowing to specify ApiVersion.
         */
        interface WithApiVersion {
            /**
             * Specifies apiVersion.
             * @param apiVersion The version of the API
             * @return the next update stage
             */
            Update withApiVersion(String apiVersion);
        }

        /**
         * The stage of the applicationresource update allowing to specify MaximumNodes.
         */
        interface WithMaximumNodes {
            /**
             * Specifies maximumNodes.
             * @param maximumNodes The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node
             * @return the next update stage
             */
            Update withMaximumNodes(Long maximumNodes);
        }

        /**
         * The stage of the applicationresource update allowing to specify Metrics.
         */
        interface WithMetrics {
            /**
             * Specifies metrics.
             * @param metrics the metrics parameter value
             * @return the next update stage
             */
            Update withMetrics(List<ApplicationMetricDescription> metrics);
        }

        /**
         * The stage of the applicationresource update allowing to specify MinimumNodes.
         */
        interface WithMinimumNodes {
            /**
             * Specifies minimumNodes.
             * @param minimumNodes The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property
             * @return the next update stage
             */
            Update withMinimumNodes(Long minimumNodes);
        }

        /**
         * The stage of the applicationresource update allowing to specify Parameters.
         */
        interface WithParameters {
            /**
             * Specifies parameters.
             * @param parameters the parameters parameter value
             * @return the next update stage
             */
            Update withParameters(List<ApplicationParameter> parameters);
        }

        /**
         * The stage of the applicationresource update allowing to specify RemoveApplicationCapacity.
         */
        interface WithRemoveApplicationCapacity {
            /**
             * Specifies removeApplicationCapacity.
             * @param removeApplicationCapacity The version of the application type
             * @return the next update stage
             */
            Update withRemoveApplicationCapacity(Boolean removeApplicationCapacity);
        }

        /**
         * The stage of the applicationresource update allowing to specify TypeVersion.
         */
        interface WithTypeVersion {
            /**
             * Specifies typeVersion.
             * @param typeVersion the typeVersion parameter value
             * @return the next update stage
             */
            Update withTypeVersion(String typeVersion);
        }

        /**
         * The stage of the applicationresource update allowing to specify UpgradePolicy.
         */
        interface WithUpgradePolicy {
            /**
             * Specifies upgradePolicy.
             * @param upgradePolicy the upgradePolicy parameter value
             * @return the next update stage
             */
            Update withUpgradePolicy(ApplicationUpgradePolicy upgradePolicy);
        }

    }
}
