/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation.PolicyInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation.DevTestLabsManager;
import java.util.Map;
import org.joda.time.DateTime;

/**
 * Type representing Policy.
 */
public interface Policy extends HasInner<PolicyInner>, Indexable, Refreshable<Policy>, Updatable<Policy.Update>, HasManager<DevTestLabsManager> {
    /**
     * @return the createdDate value.
     */
    DateTime createdDate();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the evaluatorType value.
     */
    PolicyEvaluatorType evaluatorType();

    /**
     * @return the factData value.
     */
    String factData();

    /**
     * @return the factName value.
     */
    PolicyFactName factName();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the status value.
     */
    PolicyStatus status();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the threshold value.
     */
    String threshold();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * The entirety of the Policy definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithPolicyset, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Policy definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Policy definition.
         */
        interface Blank extends WithPolicyset {
        }

        /**
         * The stage of the policy definition allowing to specify Policyset.
         */
        interface WithPolicyset {
           /**
            * Specifies resourceGroupName, labName, policySetName.
            * @param resourceGroupName The name of the resource group
            * @param labName The name of the lab
            * @param policySetName The name of the policy set
            * @return the next definition stage
            */
            WithCreate withExistingPolicyset(String resourceGroupName, String labName, String policySetName);
        }

        /**
         * The stage of the policy definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The description of the policy
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the policy definition allowing to specify EvaluatorType.
         */
        interface WithEvaluatorType {
            /**
             * Specifies evaluatorType.
             * @param evaluatorType The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'
             * @return the next definition stage
             */
            WithCreate withEvaluatorType(PolicyEvaluatorType evaluatorType);
        }

        /**
         * The stage of the policy definition allowing to specify FactData.
         */
        interface WithFactData {
            /**
             * Specifies factData.
             * @param factData The fact data of the policy
             * @return the next definition stage
             */
            WithCreate withFactData(String factData);
        }

        /**
         * The stage of the policy definition allowing to specify FactName.
         */
        interface WithFactName {
            /**
             * Specifies factName.
             * @param factName The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include: 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount', 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage', 'UserOwnedLabVmCountInSubnet', 'LabTargetCost', 'EnvironmentTemplate', 'ScheduleEditPermission'
             * @return the next definition stage
             */
            WithCreate withFactName(PolicyFactName factName);
        }

        /**
         * The stage of the policy definition allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             * @param location The location of the resource
             * @return the next definition stage
             */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the policy definition allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status The status of the policy. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withStatus(PolicyStatus status);
        }

        /**
         * The stage of the policy definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags The tags of the resource
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the policy definition allowing to specify Threshold.
         */
        interface WithThreshold {
            /**
             * Specifies threshold.
             * @param threshold The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy)
             * @return the next definition stage
             */
            WithCreate withThreshold(String threshold);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Policy>, DefinitionStages.WithDescription, DefinitionStages.WithEvaluatorType, DefinitionStages.WithFactData, DefinitionStages.WithFactName, DefinitionStages.WithLocation, DefinitionStages.WithStatus, DefinitionStages.WithTags, DefinitionStages.WithThreshold {
        }
    }
    /**
     * The template for a Policy update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Policy>, UpdateStages.WithDescription, UpdateStages.WithEvaluatorType, UpdateStages.WithFactData, UpdateStages.WithFactName, UpdateStages.WithStatus, UpdateStages.WithTags, UpdateStages.WithThreshold {
    }

    /**
     * Grouping of Policy update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the policy update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The description of the policy
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the policy update allowing to specify EvaluatorType.
         */
        interface WithEvaluatorType {
            /**
             * Specifies evaluatorType.
             * @param evaluatorType The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'
             * @return the next update stage
             */
            Update withEvaluatorType(PolicyEvaluatorType evaluatorType);
        }

        /**
         * The stage of the policy update allowing to specify FactData.
         */
        interface WithFactData {
            /**
             * Specifies factData.
             * @param factData The fact data of the policy
             * @return the next update stage
             */
            Update withFactData(String factData);
        }

        /**
         * The stage of the policy update allowing to specify FactName.
         */
        interface WithFactName {
            /**
             * Specifies factName.
             * @param factName The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include: 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount', 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage', 'UserOwnedLabVmCountInSubnet', 'LabTargetCost', 'EnvironmentTemplate', 'ScheduleEditPermission'
             * @return the next update stage
             */
            Update withFactName(PolicyFactName factName);
        }

        /**
         * The stage of the policy update allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status The status of the policy. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withStatus(PolicyStatus status);
        }

        /**
         * The stage of the policy update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags The tags of the resource
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the policy update allowing to specify Threshold.
         */
        interface WithThreshold {
            /**
             * Specifies threshold.
             * @param threshold The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy)
             * @return the next update stage
             */
            Update withThreshold(String threshold);
        }

    }
}
