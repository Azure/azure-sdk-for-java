/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation;

import com.microsoft.azure.management.devtestlabs.v2018_09_15.ServiceRunner;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.IdentityProperties;

class ServiceRunnerImpl extends CreatableUpdatableImpl<ServiceRunner, ServiceRunnerInner, ServiceRunnerImpl> implements ServiceRunner, ServiceRunner.Definition, ServiceRunner.Update {
    private final DevTestLabsManager manager;
    private String resourceGroupName;
    private String labName;
    private String name;

    ServiceRunnerImpl(String name, DevTestLabsManager manager) {
        super(name, new ServiceRunnerInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    ServiceRunnerImpl(ServiceRunnerInner inner, DevTestLabsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "servicerunners");
        //
    }

    @Override
    public DevTestLabsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServiceRunner> createResourceAsync() {
        ServiceRunnersInner client = this.manager().inner().serviceRunners();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ServiceRunner> updateResourceAsync() {
        ServiceRunnersInner client = this.manager().inner().serviceRunners();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ServiceRunnerInner> getInnerAsync() {
        ServiceRunnersInner client = this.manager().inner().serviceRunners();
        return client.getAsync(this.resourceGroupName, this.labName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public IdentityProperties identity() {
        return this.inner().identity();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ServiceRunnerImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    @Override
    public ServiceRunnerImpl withIdentity(IdentityProperties identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public ServiceRunnerImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ServiceRunnerImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
