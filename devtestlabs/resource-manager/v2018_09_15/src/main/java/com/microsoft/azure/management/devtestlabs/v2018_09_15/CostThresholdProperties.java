/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties of a cost threshold item.
 */
public class CostThresholdProperties {
    /**
     * The ID of the cost threshold item.
     */
    @JsonProperty(value = "thresholdId")
    private String thresholdId;

    /**
     * The value of the percentage cost threshold.
     */
    @JsonProperty(value = "percentageThreshold")
    private PercentageCostThresholdProperties percentageThreshold;

    /**
     * Indicates whether this threshold will be displayed on cost charts.
     * Possible values include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "displayOnChart")
    private CostThresholdStatus displayOnChart;

    /**
     * Indicates whether notifications will be sent when this threshold is
     * exceeded. Possible values include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "sendNotificationWhenExceeded")
    private CostThresholdStatus sendNotificationWhenExceeded;

    /**
     * Indicates the datetime when notifications were last sent for this
     * threshold.
     */
    @JsonProperty(value = "notificationSent")
    private String notificationSent;

    /**
     * Get the ID of the cost threshold item.
     *
     * @return the thresholdId value
     */
    public String thresholdId() {
        return this.thresholdId;
    }

    /**
     * Set the ID of the cost threshold item.
     *
     * @param thresholdId the thresholdId value to set
     * @return the CostThresholdProperties object itself.
     */
    public CostThresholdProperties withThresholdId(String thresholdId) {
        this.thresholdId = thresholdId;
        return this;
    }

    /**
     * Get the value of the percentage cost threshold.
     *
     * @return the percentageThreshold value
     */
    public PercentageCostThresholdProperties percentageThreshold() {
        return this.percentageThreshold;
    }

    /**
     * Set the value of the percentage cost threshold.
     *
     * @param percentageThreshold the percentageThreshold value to set
     * @return the CostThresholdProperties object itself.
     */
    public CostThresholdProperties withPercentageThreshold(PercentageCostThresholdProperties percentageThreshold) {
        this.percentageThreshold = percentageThreshold;
        return this;
    }

    /**
     * Get indicates whether this threshold will be displayed on cost charts. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the displayOnChart value
     */
    public CostThresholdStatus displayOnChart() {
        return this.displayOnChart;
    }

    /**
     * Set indicates whether this threshold will be displayed on cost charts. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param displayOnChart the displayOnChart value to set
     * @return the CostThresholdProperties object itself.
     */
    public CostThresholdProperties withDisplayOnChart(CostThresholdStatus displayOnChart) {
        this.displayOnChart = displayOnChart;
        return this;
    }

    /**
     * Get indicates whether notifications will be sent when this threshold is exceeded. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the sendNotificationWhenExceeded value
     */
    public CostThresholdStatus sendNotificationWhenExceeded() {
        return this.sendNotificationWhenExceeded;
    }

    /**
     * Set indicates whether notifications will be sent when this threshold is exceeded. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param sendNotificationWhenExceeded the sendNotificationWhenExceeded value to set
     * @return the CostThresholdProperties object itself.
     */
    public CostThresholdProperties withSendNotificationWhenExceeded(CostThresholdStatus sendNotificationWhenExceeded) {
        this.sendNotificationWhenExceeded = sendNotificationWhenExceeded;
        return this;
    }

    /**
     * Get indicates the datetime when notifications were last sent for this threshold.
     *
     * @return the notificationSent value
     */
    public String notificationSent() {
        return this.notificationSent;
    }

    /**
     * Set indicates the datetime when notifications were last sent for this threshold.
     *
     * @param notificationSent the notificationSent value to set
     * @return the CostThresholdProperties object itself.
     */
    public CostThresholdProperties withNotificationSent(String notificationSent) {
        this.notificationSent = notificationSent;
        return this;
    }

}
