/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation;

import com.microsoft.azure.management.devtestlabs.v2018_09_15.Disk;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.DiskFragment;
import java.util.Map;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.StorageType;
import org.joda.time.DateTime;
import rx.functions.Func1;

class DiskImpl extends CreatableUpdatableImpl<Disk, DiskInner, DiskImpl> implements Disk, Disk.Definition, Disk.Update {
    private final DevTestLabsManager manager;
    private String resourceGroupName;
    private String labName;
    private String userName;
    private String name;
    private DiskFragment updateParameter;

    DiskImpl(String name, DevTestLabsManager manager) {
        super(name, new DiskInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
        this.updateParameter = new DiskFragment();
    }

    DiskImpl(DiskInner inner, DevTestLabsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.userName = IdParsingUtils.getValueFromIdByName(inner.id(), "users");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "disks");
        //
        this.updateParameter = new DiskFragment();
    }

    @Override
    public DevTestLabsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Disk> createResourceAsync() {
        DisksInner client = this.manager().inner().disks();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labName, this.userName, this.name, this.inner())
            .map(new Func1<DiskInner, DiskInner>() {
               @Override
               public DiskInner call(DiskInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Disk> updateResourceAsync() {
        DisksInner client = this.manager().inner().disks();
        return client.updateAsync(this.resourceGroupName, this.labName, this.userName, this.name, this.updateParameter)
            .map(new Func1<DiskInner, DiskInner>() {
               @Override
               public DiskInner call(DiskInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DiskInner> getInnerAsync() {
        DisksInner client = this.manager().inner().disks();
        return client.getAsync(this.resourceGroupName, this.labName, this.userName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new DiskFragment();
    }

    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String diskBlobName() {
        return this.inner().diskBlobName();
    }

    @Override
    public Integer diskSizeGiB() {
        return this.inner().diskSizeGiB();
    }

    @Override
    public StorageType diskType() {
        return this.inner().diskType();
    }

    @Override
    public String diskUri() {
        return this.inner().diskUri();
    }

    @Override
    public String hostCaching() {
        return this.inner().hostCaching();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String leasedByLabVmId() {
        return this.inner().leasedByLabVmId();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String managedDiskId() {
        return this.inner().managedDiskId();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String uniqueIdentifier() {
        return this.inner().uniqueIdentifier();
    }

    @Override
    public DiskImpl withExistingUser(String resourceGroupName, String labName, String userName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        this.userName = userName;
        return this;
    }

    @Override
    public DiskImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public DiskImpl withDiskBlobName(String diskBlobName) {
        if (isInCreateMode()) {
            this.inner().withDiskBlobName(diskBlobName);
        } else {
            this.updateParameter.withDiskBlobName(diskBlobName);
        }
        return this;
    }

    @Override
    public DiskImpl withDiskSizeGiB(Integer diskSizeGiB) {
        if (isInCreateMode()) {
            this.inner().withDiskSizeGiB(diskSizeGiB);
        } else {
            this.updateParameter.withDiskSizeGiB(diskSizeGiB);
        }
        return this;
    }

    @Override
    public DiskImpl withDiskType(StorageType diskType) {
        if (isInCreateMode()) {
            this.inner().withDiskType(diskType);
        } else {
            this.updateParameter.withDiskType(diskType);
        }
        return this;
    }

    @Override
    public DiskImpl withDiskUri(String diskUri) {
        if (isInCreateMode()) {
            this.inner().withDiskUri(diskUri);
        } else {
            this.updateParameter.withDiskUri(diskUri);
        }
        return this;
    }

    @Override
    public DiskImpl withHostCaching(String hostCaching) {
        if (isInCreateMode()) {
            this.inner().withHostCaching(hostCaching);
        } else {
            this.updateParameter.withHostCaching(hostCaching);
        }
        return this;
    }

    @Override
    public DiskImpl withLeasedByLabVmId(String leasedByLabVmId) {
        if (isInCreateMode()) {
            this.inner().withLeasedByLabVmId(leasedByLabVmId);
        } else {
            this.updateParameter.withLeasedByLabVmId(leasedByLabVmId);
        }
        return this;
    }

    @Override
    public DiskImpl withManagedDiskId(String managedDiskId) {
        if (isInCreateMode()) {
            this.inner().withManagedDiskId(managedDiskId);
        } else {
            this.updateParameter.withManagedDiskId(managedDiskId);
        }
        return this;
    }

    @Override
    public DiskImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
