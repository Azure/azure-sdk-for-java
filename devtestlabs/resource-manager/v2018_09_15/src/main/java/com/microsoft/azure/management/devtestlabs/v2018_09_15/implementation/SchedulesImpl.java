/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.Schedules;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.Schedule;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.LabSchedule;

class SchedulesImpl extends WrapperImpl<SchedulesInner> implements Schedules {
    private final DevTestLabsManager manager;

    SchedulesImpl(DevTestLabsManager manager) {
        super(manager.inner().schedules());
        this.manager = manager;
    }

    public DevTestLabsManager manager() {
        return this.manager;
    }

    @Override
    public LabScheduleImpl define(String name) {
        return wrapModel(name);
    }

    private LabScheduleImpl wrapModel(ScheduleInner inner) {
        return  new LabScheduleImpl(inner, manager());
    }

    private LabScheduleImpl wrapModel(String name) {
        return new LabScheduleImpl(name, this.manager());
    }

    @Override
    public Completable executeAsync(String resourceGroupName, String labName, String name) {
        SchedulesInner client = this.inner();
        return client.executeAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Observable<Schedule> listApplicableAsync(final String resourceGroupName, final String labName, final String name) {
        SchedulesInner client = this.inner();
        return client.listApplicableAsync(resourceGroupName, labName, name)
        .flatMapIterable(new Func1<Page<ScheduleInner>, Iterable<ScheduleInner>>() {
            @Override
            public Iterable<ScheduleInner> call(Page<ScheduleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ScheduleInner, Schedule>() {
            @Override
            public Schedule call(ScheduleInner inner) {
                return new ScheduleImpl(inner.name(), inner, manager());
            }
        });
    }

    @Override
    public Observable<LabSchedule> listAsync(final String resourceGroupName, final String labName) {
        SchedulesInner client = this.inner();
        return client.listAsync(resourceGroupName, labName)
        .flatMapIterable(new Func1<Page<ScheduleInner>, Iterable<ScheduleInner>>() {
            @Override
            public Iterable<ScheduleInner> call(Page<ScheduleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ScheduleInner, LabSchedule>() {
            @Override
            public LabSchedule call(ScheduleInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<LabSchedule> getAsync(String resourceGroupName, String labName, String name) {
        SchedulesInner client = this.inner();
        return client.getAsync(resourceGroupName, labName, name)
        .flatMap(new Func1<ScheduleInner, Observable<LabSchedule>>() {
            @Override
            public Observable<LabSchedule> call(ScheduleInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((LabSchedule)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String labName, String name) {
        SchedulesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, labName, name).toCompletable();
    }

}
