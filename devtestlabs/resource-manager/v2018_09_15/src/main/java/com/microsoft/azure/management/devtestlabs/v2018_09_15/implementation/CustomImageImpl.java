/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation;

import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImage;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImageFragment;
import java.util.Map;
import java.util.List;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImagePropertiesFromVm;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImagePropertiesCustom;
import org.joda.time.DateTime;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.DataDiskStorageTypeInfo;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImagePropertiesFromPlan;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImagePropertiesFromPlanFragment;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.DataDiskStorageTypeInfoFragment;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImagePropertiesCustomFragment;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.CustomImagePropertiesFromVmFragment;
import rx.functions.Func1;

class CustomImageImpl extends CreatableUpdatableImpl<CustomImage, CustomImageInner, CustomImageImpl> implements CustomImage, CustomImage.Definition, CustomImage.Update {
    private final DevTestLabsManager manager;
    private String resourceGroupName;
    private String labName;
    private String name;
    private CustomImageFragment updateParameter;

    CustomImageImpl(String name, DevTestLabsManager manager) {
        super(name, new CustomImageInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
        this.updateParameter = new CustomImageFragment();
    }

    CustomImageImpl(CustomImageInner inner, DevTestLabsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "customimages");
        //
        this.updateParameter = new CustomImageFragment();
    }

    @Override
    public DevTestLabsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<CustomImage> createResourceAsync() {
        CustomImagesInner client = this.manager().inner().customImages();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(new Func1<CustomImageInner, CustomImageInner>() {
               @Override
               public CustomImageInner call(CustomImageInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<CustomImage> updateResourceAsync() {
        CustomImagesInner client = this.manager().inner().customImages();
        return client.updateAsync(this.resourceGroupName, this.labName, this.name, this.updateParameter)
            .map(new Func1<CustomImageInner, CustomImageInner>() {
               @Override
               public CustomImageInner call(CustomImageInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CustomImageInner> getInnerAsync() {
        CustomImagesInner client = this.manager().inner().customImages();
        return client.getAsync(this.resourceGroupName, this.labName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new CustomImageFragment();
    }

    @Override
    public String author() {
        return this.inner().author();
    }

    @Override
    public DateTime creationDate() {
        return this.inner().creationDate();
    }

    @Override
    public CustomImagePropertiesFromPlan customImagePlan() {
        return this.inner().customImagePlan();
    }

    @Override
    public List<DataDiskStorageTypeInfo> dataDiskStorageInfo() {
        return this.inner().dataDiskStorageInfo();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isPlanAuthorized() {
        return this.inner().isPlanAuthorized();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String managedImageId() {
        return this.inner().managedImageId();
    }

    @Override
    public String managedSnapshotId() {
        return this.inner().managedSnapshotId();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String uniqueIdentifier() {
        return this.inner().uniqueIdentifier();
    }

    @Override
    public CustomImagePropertiesCustom vhd() {
        return this.inner().vhd();
    }

    @Override
    public CustomImagePropertiesFromVm vm() {
        return this.inner().vm();
    }

    @Override
    public CustomImageImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    @Override
    public CustomImageImpl withCustomImagePlan(CustomImagePropertiesFromPlan customImagePlan) {
        this.inner().withCustomImagePlan(customImagePlan);
        return this;
    }

    @Override
    public CustomImageImpl withDataDiskStorageInfo(List<DataDiskStorageTypeInfo> dataDiskStorageInfo) {
        this.inner().withDataDiskStorageInfo(dataDiskStorageInfo);
        return this;
    }

    @Override
    public CustomImageImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public CustomImageImpl withVhd(CustomImagePropertiesCustom vhd) {
        this.inner().withVhd(vhd);
        return this;
    }

    @Override
    public CustomImageImpl withVm(CustomImagePropertiesFromVm vm) {
        this.inner().withVm(vm);
        return this;
    }

    @Override
    public CustomImageImpl withCustomImagePlan(CustomImagePropertiesFromPlanFragment customImagePlan) {
        this.updateParameter.withCustomImagePlan(customImagePlan);
        return this;
    }

    @Override
    public CustomImageImpl withDataDiskStorageInfoFragment(List<DataDiskStorageTypeInfoFragment> dataDiskStorageInfo) {
        this.updateParameter.withDataDiskStorageInfo(dataDiskStorageInfo);
        return this;
    }

    @Override
    public CustomImageImpl withVhd(CustomImagePropertiesCustomFragment vhd) {
        this.updateParameter.withVhd(vhd);
        return this;
    }

    @Override
    public CustomImageImpl withVm(CustomImagePropertiesFromVmFragment vm) {
        this.updateParameter.withVm(vm);
        return this;
    }

    @Override
    public CustomImageImpl withAuthor(String author) {
        if (isInCreateMode()) {
            this.inner().withAuthor(author);
        } else {
            this.updateParameter.withAuthor(author);
        }
        return this;
    }

    @Override
    public CustomImageImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.inner().withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public CustomImageImpl withIsPlanAuthorized(Boolean isPlanAuthorized) {
        if (isInCreateMode()) {
            this.inner().withIsPlanAuthorized(isPlanAuthorized);
        } else {
            this.updateParameter.withIsPlanAuthorized(isPlanAuthorized);
        }
        return this;
    }

    @Override
    public CustomImageImpl withManagedImageId(String managedImageId) {
        if (isInCreateMode()) {
            this.inner().withManagedImageId(managedImageId);
        } else {
            this.updateParameter.withManagedImageId(managedImageId);
        }
        return this;
    }

    @Override
    public CustomImageImpl withManagedSnapshotId(String managedSnapshotId) {
        if (isInCreateMode()) {
            this.inner().withManagedSnapshotId(managedSnapshotId);
        } else {
            this.updateParameter.withManagedSnapshotId(managedSnapshotId);
        }
        return this;
    }

    @Override
    public CustomImageImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
