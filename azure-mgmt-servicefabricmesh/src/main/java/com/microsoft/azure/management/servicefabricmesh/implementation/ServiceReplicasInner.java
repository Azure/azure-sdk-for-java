/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabricmesh.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.servicefabricmesh.ErrorModelException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ServiceReplicas.
 */
public class ServiceReplicasInner {
    /** The Retrofit service to perform REST calls. */
    private ServiceReplicasService service;
    /** The service client containing this operation class. */
    private ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of ServiceReplicasInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServiceReplicasInner(Retrofit retrofit, ServiceFabricMeshManagementClientImpl client) {
        this.service = retrofit.create(ServiceReplicasService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceReplicas to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServiceReplicasService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.ServiceReplicas get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services/{serviceResourceName}/replicas/{replicaName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "applicationResourceName", encoded = true) String applicationResourceName, @Path(value = "serviceResourceName", encoded = true) String serviceResourceName, @Path(value = "replicaName", encoded = true) String replicaName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.ServiceReplicas list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services/{serviceResourceName}/replicas")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "applicationResourceName", encoded = true) String applicationResourceName, @Path(value = "serviceResourceName", encoded = true) String serviceResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.ServiceReplicas listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceReplicaDescriptionInner object if successful.
     */
    public ServiceReplicaDescriptionInner get(String resourceGroupName, String applicationResourceName, String serviceResourceName, String replicaName) {
        return getWithServiceResponseAsync(resourceGroupName, applicationResourceName, serviceResourceName, replicaName).toBlocking().single().body();
    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceReplicaDescriptionInner> getAsync(String resourceGroupName, String applicationResourceName, String serviceResourceName, String replicaName, final ServiceCallback<ServiceReplicaDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, applicationResourceName, serviceResourceName, replicaName), serviceCallback);
    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceReplicaDescriptionInner object
     */
    public Observable<ServiceReplicaDescriptionInner> getAsync(String resourceGroupName, String applicationResourceName, String serviceResourceName, String replicaName) {
        return getWithServiceResponseAsync(resourceGroupName, applicationResourceName, serviceResourceName, replicaName).map(new Func1<ServiceResponse<ServiceReplicaDescriptionInner>, ServiceReplicaDescriptionInner>() {
            @Override
            public ServiceReplicaDescriptionInner call(ServiceResponse<ServiceReplicaDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceReplicaDescriptionInner object
     */
    public Observable<ServiceResponse<ServiceReplicaDescriptionInner>> getWithServiceResponseAsync(String resourceGroupName, String applicationResourceName, String serviceResourceName, String replicaName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationResourceName == null) {
            throw new IllegalArgumentException("Parameter applicationResourceName is required and cannot be null.");
        }
        if (serviceResourceName == null) {
            throw new IllegalArgumentException("Parameter serviceResourceName is required and cannot be null.");
        }
        if (replicaName == null) {
            throw new IllegalArgumentException("Parameter replicaName is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, applicationResourceName, serviceResourceName, replicaName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceReplicaDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceReplicaDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceReplicaDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceReplicaDescriptionInner> getDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceReplicaDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceReplicaDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServiceReplicaDescriptionInner&gt; object if successful.
     */
    public PagedList<ServiceReplicaDescriptionInner> list(final String resourceGroupName, final String applicationResourceName, final String serviceResourceName) {
        ServiceResponse<Page<ServiceReplicaDescriptionInner>> response = listSinglePageAsync(resourceGroupName, applicationResourceName, serviceResourceName).toBlocking().single();
        return new PagedList<ServiceReplicaDescriptionInner>(response.body()) {
            @Override
            public Page<ServiceReplicaDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServiceReplicaDescriptionInner>> listAsync(final String resourceGroupName, final String applicationResourceName, final String serviceResourceName, final ListOperationCallback<ServiceReplicaDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, applicationResourceName, serviceResourceName),
            new Func1<String, Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceReplicaDescriptionInner&gt; object
     */
    public Observable<Page<ServiceReplicaDescriptionInner>> listAsync(final String resourceGroupName, final String applicationResourceName, final String serviceResourceName) {
        return listWithServiceResponseAsync(resourceGroupName, applicationResourceName, serviceResourceName)
            .map(new Func1<ServiceResponse<Page<ServiceReplicaDescriptionInner>>, Page<ServiceReplicaDescriptionInner>>() {
                @Override
                public Page<ServiceReplicaDescriptionInner> call(ServiceResponse<Page<ServiceReplicaDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceReplicaDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String applicationResourceName, final String serviceResourceName) {
        return listSinglePageAsync(resourceGroupName, applicationResourceName, serviceResourceName)
            .concatMap(new Func1<ServiceResponse<Page<ServiceReplicaDescriptionInner>>, Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> call(ServiceResponse<Page<ServiceReplicaDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
    ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> * @param resourceGroupName Azure resource group name
    ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> * @param applicationResourceName The identity of the application.
    ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> * @param serviceResourceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServiceReplicaDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> listSinglePageAsync(final String resourceGroupName, final String applicationResourceName, final String serviceResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationResourceName == null) {
            throw new IllegalArgumentException("Parameter applicationResourceName is required and cannot be null.");
        }
        if (serviceResourceName == null) {
            throw new IllegalArgumentException("Parameter serviceResourceName is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, applicationResourceName, serviceResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServiceReplicaDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServiceReplicaDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServiceReplicaDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServiceReplicaDescriptionInner&gt; object if successful.
     */
    public PagedList<ServiceReplicaDescriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ServiceReplicaDescriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ServiceReplicaDescriptionInner>(response.body()) {
            @Override
            public Page<ServiceReplicaDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServiceReplicaDescriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ServiceReplicaDescriptionInner>> serviceFuture, final ListOperationCallback<ServiceReplicaDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceReplicaDescriptionInner&gt; object
     */
    public Observable<Page<ServiceReplicaDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ServiceReplicaDescriptionInner>>, Page<ServiceReplicaDescriptionInner>>() {
                @Override
                public Page<ServiceReplicaDescriptionInner> call(ServiceResponse<Page<ServiceReplicaDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceReplicaDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ServiceReplicaDescriptionInner>>, Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> call(ServiceResponse<Page<ServiceReplicaDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
    ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServiceReplicaDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceReplicaDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServiceReplicaDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServiceReplicaDescriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServiceReplicaDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServiceReplicaDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
