/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabricmesh.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Services.
 */
public class ServicesInner {
    /** The Retrofit service to perform REST calls. */
    private ServicesService service;
    /** The service client containing this operation class. */
    private ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of ServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServicesInner(Retrofit retrofit, ServiceFabricMeshManagementClientImpl client) {
        this.service = retrofit.create(ServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Services to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Services listByApplicationName" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services")
        Observable<Response<ResponseBody>> listByApplicationName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "applicationName", encoded = true) String applicationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Services get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "applicationName", encoded = true) String applicationName, @Path(value = "serviceName", encoded = true) String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Services listByApplicationNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByApplicationNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServiceResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<ServiceResourceDescriptionInner> listByApplicationName(final String resourceGroupName, final String applicationName) {
        ServiceResponse<Page<ServiceResourceDescriptionInner>> response = listByApplicationNameSinglePageAsync(resourceGroupName, applicationName).toBlocking().single();
        return new PagedList<ServiceResourceDescriptionInner>(response.body()) {
            @Override
            public Page<ServiceResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByApplicationNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServiceResourceDescriptionInner>> listByApplicationNameAsync(final String resourceGroupName, final String applicationName, final ListOperationCallback<ServiceResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApplicationNameSinglePageAsync(resourceGroupName, applicationName),
            new Func1<String, Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByApplicationNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceResourceDescriptionInner&gt; object
     */
    public Observable<Page<ServiceResourceDescriptionInner>> listByApplicationNameAsync(final String resourceGroupName, final String applicationName) {
        return listByApplicationNameWithServiceResponseAsync(resourceGroupName, applicationName)
            .map(new Func1<ServiceResponse<Page<ServiceResourceDescriptionInner>>, Page<ServiceResourceDescriptionInner>>() {
                @Override
                public Page<ServiceResourceDescriptionInner> call(ServiceResponse<Page<ServiceResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> listByApplicationNameWithServiceResponseAsync(final String resourceGroupName, final String applicationName) {
        return listByApplicationNameSinglePageAsync(resourceGroupName, applicationName)
            .concatMap(new Func1<ServiceResponse<Page<ServiceResourceDescriptionInner>>, Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> call(ServiceResponse<Page<ServiceResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApplicationNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
    ServiceResponse<PageImpl<ServiceResourceDescriptionInner>> * @param resourceGroupName Azure resource group name
    ServiceResponse<PageImpl<ServiceResourceDescriptionInner>> * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServiceResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> listByApplicationNameSinglePageAsync(final String resourceGroupName, final String applicationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        return service.listByApplicationName(this.client.subscriptionId(), resourceGroupName, applicationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServiceResourceDescriptionInner>> result = listByApplicationNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServiceResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServiceResourceDescriptionInner>> listByApplicationNameDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServiceResourceDescriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServiceResourceDescriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the properties of the service.
     * The operation returns the properties of the service.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param serviceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceResourceDescriptionInner object if successful.
     */
    public ServiceResourceDescriptionInner get(String resourceGroupName, String applicationName, String serviceName) {
        return getWithServiceResponseAsync(resourceGroupName, applicationName, serviceName).toBlocking().single().body();
    }

    /**
     * Gets the properties of the service.
     * The operation returns the properties of the service.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param serviceName The identity of the service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceResourceDescriptionInner> getAsync(String resourceGroupName, String applicationName, String serviceName, final ServiceCallback<ServiceResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, applicationName, serviceName), serviceCallback);
    }

    /**
     * Gets the properties of the service.
     * The operation returns the properties of the service.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param serviceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceDescriptionInner object
     */
    public Observable<ServiceResourceDescriptionInner> getAsync(String resourceGroupName, String applicationName, String serviceName) {
        return getWithServiceResponseAsync(resourceGroupName, applicationName, serviceName).map(new Func1<ServiceResponse<ServiceResourceDescriptionInner>, ServiceResourceDescriptionInner>() {
            @Override
            public ServiceResourceDescriptionInner call(ServiceResponse<ServiceResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the properties of the service.
     * The operation returns the properties of the service.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param serviceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceDescriptionInner object
     */
    public Observable<ServiceResponse<ServiceResourceDescriptionInner>> getWithServiceResponseAsync(String resourceGroupName, String applicationName, String serviceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, applicationName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceResourceDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceResourceDescriptionInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceResourceDescriptionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceResourceDescriptionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServiceResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<ServiceResourceDescriptionInner> listByApplicationNameNext(final String nextPageLink) {
        ServiceResponse<Page<ServiceResourceDescriptionInner>> response = listByApplicationNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ServiceResourceDescriptionInner>(response.body()) {
            @Override
            public Page<ServiceResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByApplicationNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServiceResourceDescriptionInner>> listByApplicationNameNextAsync(final String nextPageLink, final ServiceFuture<List<ServiceResourceDescriptionInner>> serviceFuture, final ListOperationCallback<ServiceResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApplicationNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByApplicationNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceResourceDescriptionInner&gt; object
     */
    public Observable<Page<ServiceResourceDescriptionInner>> listByApplicationNameNextAsync(final String nextPageLink) {
        return listByApplicationNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ServiceResourceDescriptionInner>>, Page<ServiceResourceDescriptionInner>>() {
                @Override
                public Page<ServiceResourceDescriptionInner> call(ServiceResponse<Page<ServiceResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServiceResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> listByApplicationNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByApplicationNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ServiceResourceDescriptionInner>>, Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> call(ServiceResponse<Page<ServiceResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApplicationNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     *
    ServiceResponse<PageImpl<ServiceResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServiceResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> listByApplicationNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByApplicationNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServiceResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServiceResourceDescriptionInner>> result = listByApplicationNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServiceResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServiceResourceDescriptionInner>> listByApplicationNameNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServiceResourceDescriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServiceResourceDescriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
