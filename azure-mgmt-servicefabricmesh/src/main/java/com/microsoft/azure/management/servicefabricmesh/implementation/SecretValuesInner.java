/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabricmesh.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.servicefabricmesh.ErrorModelException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SecretValues.
 */
public class SecretValuesInner {
    /** The Retrofit service to perform REST calls. */
    private SecretValuesService service;
    /** The service client containing this operation class. */
    private ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of SecretValuesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SecretValuesInner(Retrofit retrofit, ServiceFabricMeshManagementClientImpl client) {
        this.service = retrofit.create(SecretValuesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SecretValues to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SecretValuesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.SecretValues create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "secretResourceName", encoded = true) String secretResourceName, @Path(value = "secretValueResourceName", encoded = true) String secretValueResourceName, @Query("api-version") String apiVersion, @Body SecretValueResourceDescriptionInner secretValueResourceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.SecretValues get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "secretResourceName", encoded = true) String secretResourceName, @Path(value = "secretValueResourceName", encoded = true) String secretValueResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.SecretValues delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "secretResourceName", encoded = true) String secretResourceName, @Path(value = "secretValueResourceName", encoded = true) String secretValueResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.SecretValues list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "secretResourceName", encoded = true) String secretResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.SecretValues listValue" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}/list_value")
        Observable<Response<ResponseBody>> listValue(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "secretResourceName", encoded = true) String secretResourceName, @Path(value = "secretValueResourceName", encoded = true) String secretValueResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.SecretValues listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Adds the specified value as a new version of the specified secret resource.
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SecretValueResourceDescriptionInner object if successful.
     */
    public SecretValueResourceDescriptionInner create(String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescriptionInner secretValueResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription).toBlocking().single().body();
    }

    /**
     * Adds the specified value as a new version of the specified secret resource.
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SecretValueResourceDescriptionInner> createAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescriptionInner secretValueResourceDescription, final ServiceCallback<SecretValueResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription), serviceCallback);
    }

    /**
     * Adds the specified value as a new version of the specified secret resource.
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretValueResourceDescriptionInner object
     */
    public Observable<SecretValueResourceDescriptionInner> createAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescriptionInner secretValueResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription).map(new Func1<ServiceResponse<SecretValueResourceDescriptionInner>, SecretValueResourceDescriptionInner>() {
            @Override
            public SecretValueResourceDescriptionInner call(ServiceResponse<SecretValueResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds the specified value as a new version of the specified secret resource.
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretValueResourceDescriptionInner object
     */
    public Observable<ServiceResponse<SecretValueResourceDescriptionInner>> createWithServiceResponseAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescriptionInner secretValueResourceDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (secretResourceName == null) {
            throw new IllegalArgumentException("Parameter secretResourceName is required and cannot be null.");
        }
        if (secretValueResourceName == null) {
            throw new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null.");
        }
        if (secretValueResourceDescription == null) {
            throw new IllegalArgumentException("Parameter secretValueResourceDescription is required and cannot be null.");
        }
        Validator.validate(secretValueResourceDescription);
        return service.create(this.client.subscriptionId(), resourceGroupName, secretResourceName, secretValueResourceName, this.client.apiVersion(), secretValueResourceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SecretValueResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<SecretValueResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SecretValueResourceDescriptionInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SecretValueResourceDescriptionInner> createDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SecretValueResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SecretValueResourceDescriptionInner>() { }.getType())
                .register(201, new TypeToken<SecretValueResourceDescriptionInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets the specified secret value resource.
     * Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SecretValueResourceDescriptionInner object if successful.
     */
    public SecretValueResourceDescriptionInner get(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return getWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName).toBlocking().single().body();
    }

    /**
     * Gets the specified secret value resource.
     * Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SecretValueResourceDescriptionInner> getAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName, final ServiceCallback<SecretValueResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName), serviceCallback);
    }

    /**
     * Gets the specified secret value resource.
     * Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretValueResourceDescriptionInner object
     */
    public Observable<SecretValueResourceDescriptionInner> getAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return getWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName).map(new Func1<ServiceResponse<SecretValueResourceDescriptionInner>, SecretValueResourceDescriptionInner>() {
            @Override
            public SecretValueResourceDescriptionInner call(ServiceResponse<SecretValueResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the specified secret value resource.
     * Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretValueResourceDescriptionInner object
     */
    public Observable<ServiceResponse<SecretValueResourceDescriptionInner>> getWithServiceResponseAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (secretResourceName == null) {
            throw new IllegalArgumentException("Parameter secretResourceName is required and cannot be null.");
        }
        if (secretValueResourceName == null) {
            throw new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, secretResourceName, secretValueResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SecretValueResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<SecretValueResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SecretValueResourceDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SecretValueResourceDescriptionInner> getDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SecretValueResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SecretValueResourceDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes the specified  value of the named secret resource.
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        deleteWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName).toBlocking().single().body();
    }

    /**
     * Deletes the specified  value of the named secret resource.
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName), serviceCallback);
    }

    /**
     * Deletes the specified  value of the named secret resource.
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified  value of the named secret resource.
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (secretResourceName == null) {
            throw new IllegalArgumentException("Parameter secretResourceName is required and cannot be null.");
        }
        if (secretValueResourceName == null) {
            throw new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, secretResourceName, secretValueResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SecretValueResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<SecretValueResourceDescriptionInner> list(final String resourceGroupName, final String secretResourceName) {
        ServiceResponse<Page<SecretValueResourceDescriptionInner>> response = listSinglePageAsync(resourceGroupName, secretResourceName).toBlocking().single();
        return new PagedList<SecretValueResourceDescriptionInner>(response.body()) {
            @Override
            public Page<SecretValueResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SecretValueResourceDescriptionInner>> listAsync(final String resourceGroupName, final String secretResourceName, final ListOperationCallback<SecretValueResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, secretResourceName),
            new Func1<String, Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretValueResourceDescriptionInner&gt; object
     */
    public Observable<Page<SecretValueResourceDescriptionInner>> listAsync(final String resourceGroupName, final String secretResourceName) {
        return listWithServiceResponseAsync(resourceGroupName, secretResourceName)
            .map(new Func1<ServiceResponse<Page<SecretValueResourceDescriptionInner>>, Page<SecretValueResourceDescriptionInner>>() {
                @Override
                public Page<SecretValueResourceDescriptionInner> call(ServiceResponse<Page<SecretValueResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretValueResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String secretResourceName) {
        return listSinglePageAsync(resourceGroupName, secretResourceName)
            .concatMap(new Func1<ServiceResponse<Page<SecretValueResourceDescriptionInner>>, Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> call(ServiceResponse<Page<SecretValueResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
    ServiceResponse<PageImpl<SecretValueResourceDescriptionInner>> * @param resourceGroupName Azure resource group name
    ServiceResponse<PageImpl<SecretValueResourceDescriptionInner>> * @param secretResourceName The name of the secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SecretValueResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> listSinglePageAsync(final String resourceGroupName, final String secretResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (secretResourceName == null) {
            throw new IllegalArgumentException("Parameter secretResourceName is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, secretResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SecretValueResourceDescriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SecretValueResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SecretValueResourceDescriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SecretValueResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SecretValueResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Lists the specified value of the secret resource.
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SecretValueInner object if successful.
     */
    public SecretValueInner listValue(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return listValueWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName).toBlocking().single().body();
    }

    /**
     * Lists the specified value of the secret resource.
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SecretValueInner> listValueAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName, final ServiceCallback<SecretValueInner> serviceCallback) {
        return ServiceFuture.fromResponse(listValueWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName), serviceCallback);
    }

    /**
     * Lists the specified value of the secret resource.
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretValueInner object
     */
    public Observable<SecretValueInner> listValueAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return listValueWithServiceResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName).map(new Func1<ServiceResponse<SecretValueInner>, SecretValueInner>() {
            @Override
            public SecretValueInner call(ServiceResponse<SecretValueInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the specified value of the secret resource.
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretValueInner object
     */
    public Observable<ServiceResponse<SecretValueInner>> listValueWithServiceResponseAsync(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (secretResourceName == null) {
            throw new IllegalArgumentException("Parameter secretResourceName is required and cannot be null.");
        }
        if (secretValueResourceName == null) {
            throw new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null.");
        }
        return service.listValue(this.client.subscriptionId(), resourceGroupName, secretResourceName, secretValueResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SecretValueInner>>>() {
                @Override
                public Observable<ServiceResponse<SecretValueInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SecretValueInner> clientResponse = listValueDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SecretValueInner> listValueDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SecretValueInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SecretValueInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SecretValueResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<SecretValueResourceDescriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<SecretValueResourceDescriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SecretValueResourceDescriptionInner>(response.body()) {
            @Override
            public Page<SecretValueResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SecretValueResourceDescriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<SecretValueResourceDescriptionInner>> serviceFuture, final ListOperationCallback<SecretValueResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretValueResourceDescriptionInner&gt; object
     */
    public Observable<Page<SecretValueResourceDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SecretValueResourceDescriptionInner>>, Page<SecretValueResourceDescriptionInner>>() {
                @Override
                public Page<SecretValueResourceDescriptionInner> call(ServiceResponse<Page<SecretValueResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretValueResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SecretValueResourceDescriptionInner>>, Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> call(ServiceResponse<Page<SecretValueResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     *
    ServiceResponse<PageImpl<SecretValueResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SecretValueResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretValueResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SecretValueResourceDescriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SecretValueResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SecretValueResourceDescriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SecretValueResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SecretValueResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
