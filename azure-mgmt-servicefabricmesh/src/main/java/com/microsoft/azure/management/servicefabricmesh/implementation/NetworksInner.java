/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabricmesh.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.servicefabricmesh.ErrorModelException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Networks.
 */
public class NetworksInner implements InnerSupportsGet<NetworkResourceDescriptionInner>, InnerSupportsDelete<Void>, InnerSupportsListing<NetworkResourceDescriptionInner> {
    /** The Retrofit service to perform REST calls. */
    private NetworksService service;
    /** The service client containing this operation class. */
    private ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of NetworksInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public NetworksInner(Retrofit retrofit, ServiceFabricMeshManagementClientImpl client) {
        this.service = retrofit.create(NetworksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Networks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface NetworksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Networks create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "networkName", encoded = true) String networkName, @Query("api-version") String apiVersion, @Body NetworkResourceDescriptionInner networkResourceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Networks getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "networkName", encoded = true) String networkName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Networks delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "networkName", encoded = true) String networkName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Networks listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Networks list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/networks")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Networks listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Networks listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a network resource.
     * Creates a network resource with the specified name and description. If a network with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to create private network and configure public connectivity for services within your application.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @param networkResourceDescription Description for creating a network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkResourceDescriptionInner object if successful.
     */
    public NetworkResourceDescriptionInner create(String resourceGroupName, String networkName, NetworkResourceDescriptionInner networkResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, networkName, networkResourceDescription).toBlocking().single().body();
    }

    /**
     * Creates or updates a network resource.
     * Creates a network resource with the specified name and description. If a network with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to create private network and configure public connectivity for services within your application.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @param networkResourceDescription Description for creating a network resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkResourceDescriptionInner> createAsync(String resourceGroupName, String networkName, NetworkResourceDescriptionInner networkResourceDescription, final ServiceCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, networkName, networkResourceDescription), serviceCallback);
    }

    /**
     * Creates or updates a network resource.
     * Creates a network resource with the specified name and description. If a network with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to create private network and configure public connectivity for services within your application.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @param networkResourceDescription Description for creating a network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<NetworkResourceDescriptionInner> createAsync(String resourceGroupName, String networkName, NetworkResourceDescriptionInner networkResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, networkName, networkResourceDescription).map(new Func1<ServiceResponse<NetworkResourceDescriptionInner>, NetworkResourceDescriptionInner>() {
            @Override
            public NetworkResourceDescriptionInner call(ServiceResponse<NetworkResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a network resource.
     * Creates a network resource with the specified name and description. If a network with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to create private network and configure public connectivity for services within your application.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @param networkResourceDescription Description for creating a network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<ServiceResponse<NetworkResourceDescriptionInner>> createWithServiceResponseAsync(String resourceGroupName, String networkName, NetworkResourceDescriptionInner networkResourceDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkResourceDescription == null) {
            throw new IllegalArgumentException("Parameter networkResourceDescription is required and cannot be null.");
        }
        Validator.validate(networkResourceDescription);
        return service.create(this.client.subscriptionId(), resourceGroupName, networkName, this.client.apiVersion(), networkResourceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkResourceDescriptionInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkResourceDescriptionInner> createDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkResourceDescriptionInner>() { }.getType())
                .register(201, new TypeToken<NetworkResourceDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets the network resource.
     * Gets the information about the network resource with a given name. This information includes the network description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkResourceDescriptionInner object if successful.
     */
    public NetworkResourceDescriptionInner getByResourceGroup(String resourceGroupName, String networkName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, networkName).toBlocking().single().body();
    }

    /**
     * Gets the network resource.
     * Gets the information about the network resource with a given name. This information includes the network description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkResourceDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String networkName, final ServiceCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, networkName), serviceCallback);
    }

    /**
     * Gets the network resource.
     * Gets the information about the network resource with a given name. This information includes the network description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<NetworkResourceDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String networkName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, networkName).map(new Func1<ServiceResponse<NetworkResourceDescriptionInner>, NetworkResourceDescriptionInner>() {
            @Override
            public NetworkResourceDescriptionInner call(ServiceResponse<NetworkResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the network resource.
     * Gets the information about the network resource with a given name. This information includes the network description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<ServiceResponse<NetworkResourceDescriptionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String networkName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, networkName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkResourceDescriptionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkResourceDescriptionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkResourceDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes the network resource.
     * Deletes the network resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String networkName) {
        deleteWithServiceResponseAsync(resourceGroupName, networkName).toBlocking().single().body();
    }

    /**
     * Deletes the network resource.
     * Deletes the network resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String networkName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, networkName), serviceCallback);
    }

    /**
     * Deletes the network resource.
     * Deletes the network resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String networkName) {
        return deleteWithServiceResponseAsync(resourceGroupName, networkName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the network resource.
     * Deletes the network resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param networkName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String networkName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, networkName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<NetworkResourceDescriptionInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<NetworkResourceDescriptionInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<NetworkResourceDescriptionInner>(response.body()) {
            @Override
            public Page<NetworkResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkResourceDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<Page<NetworkResourceDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Page<NetworkResourceDescriptionInner>>() {
                @Override
                public Page<NetworkResourceDescriptionInner> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
    ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<NetworkResourceDescriptionInner> list() {
        ServiceResponse<Page<NetworkResourceDescriptionInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<NetworkResourceDescriptionInner>(response.body()) {
            @Override
            public Page<NetworkResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkResourceDescriptionInner>> listAsync(final ListOperationCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<Page<NetworkResourceDescriptionInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Page<NetworkResourceDescriptionInner>>() {
                @Override
                public Page<NetworkResourceDescriptionInner> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<NetworkResourceDescriptionInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<NetworkResourceDescriptionInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<NetworkResourceDescriptionInner>(response.body()) {
            @Override
            public Page<NetworkResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkResourceDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<NetworkResourceDescriptionInner>> serviceFuture, final ListOperationCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<Page<NetworkResourceDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Page<NetworkResourceDescriptionInner>>() {
                @Override
                public Page<NetworkResourceDescriptionInner> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties.
     *
    ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<NetworkResourceDescriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<NetworkResourceDescriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<NetworkResourceDescriptionInner>(response.body()) {
            @Override
            public Page<NetworkResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkResourceDescriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<NetworkResourceDescriptionInner>> serviceFuture, final ListOperationCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<Page<NetworkResourceDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Page<NetworkResourceDescriptionInner>>() {
                @Override
                public Page<NetworkResourceDescriptionInner> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<NetworkResourceDescriptionInner>>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(ServiceResponse<Page<NetworkResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     *
    ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkResourceDescriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
