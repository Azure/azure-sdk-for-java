/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabricmesh.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.servicefabricmesh.ErrorModelException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Volumes.
 */
public class VolumesInner implements InnerSupportsGet<VolumeResourceDescriptionInner>, InnerSupportsDelete<Void>, InnerSupportsListing<VolumeResourceDescriptionInner> {
    /** The Retrofit service to perform REST calls. */
    private VolumesService service;
    /** The service client containing this operation class. */
    private ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of VolumesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public VolumesInner(Retrofit retrofit, ServiceFabricMeshManagementClientImpl client) {
        this.service = retrofit.create(VolumesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Volumes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface VolumesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Volumes create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "volumeName", encoded = true) String volumeName, @Query("api-version") String apiVersion, @Body VolumeResourceDescriptionInner volumeResourceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Volumes getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "volumeName", encoded = true) String volumeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Volumes delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "volumeName", encoded = true) String volumeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Volumes listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Volumes list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/volumes")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Volumes listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Volumes listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a volume resource.
     * Creates a volume resource with the specified name and description. If a volume with the same name already exists, then its description is updated to the one indicated in this request.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @param volumeResourceDescription Description for creating a volume resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VolumeResourceDescriptionInner object if successful.
     */
    public VolumeResourceDescriptionInner create(String resourceGroupName, String volumeName, VolumeResourceDescriptionInner volumeResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, volumeName, volumeResourceDescription).toBlocking().single().body();
    }

    /**
     * Creates or updates a volume resource.
     * Creates a volume resource with the specified name and description. If a volume with the same name already exists, then its description is updated to the one indicated in this request.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @param volumeResourceDescription Description for creating a volume resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VolumeResourceDescriptionInner> createAsync(String resourceGroupName, String volumeName, VolumeResourceDescriptionInner volumeResourceDescription, final ServiceCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, volumeName, volumeResourceDescription), serviceCallback);
    }

    /**
     * Creates or updates a volume resource.
     * Creates a volume resource with the specified name and description. If a volume with the same name already exists, then its description is updated to the one indicated in this request.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @param volumeResourceDescription Description for creating a volume resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<VolumeResourceDescriptionInner> createAsync(String resourceGroupName, String volumeName, VolumeResourceDescriptionInner volumeResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, volumeName, volumeResourceDescription).map(new Func1<ServiceResponse<VolumeResourceDescriptionInner>, VolumeResourceDescriptionInner>() {
            @Override
            public VolumeResourceDescriptionInner call(ServiceResponse<VolumeResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a volume resource.
     * Creates a volume resource with the specified name and description. If a volume with the same name already exists, then its description is updated to the one indicated in this request.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @param volumeResourceDescription Description for creating a volume resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<ServiceResponse<VolumeResourceDescriptionInner>> createWithServiceResponseAsync(String resourceGroupName, String volumeName, VolumeResourceDescriptionInner volumeResourceDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (volumeResourceDescription == null) {
            throw new IllegalArgumentException("Parameter volumeResourceDescription is required and cannot be null.");
        }
        Validator.validate(volumeResourceDescription);
        return service.create(this.client.subscriptionId(), resourceGroupName, volumeName, this.client.apiVersion(), volumeResourceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VolumeResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<VolumeResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VolumeResourceDescriptionInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VolumeResourceDescriptionInner> createDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VolumeResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VolumeResourceDescriptionInner>() { }.getType())
                .register(201, new TypeToken<VolumeResourceDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets the volume resource.
     * Gets the information about the volume resource with a given name. This information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VolumeResourceDescriptionInner object if successful.
     */
    public VolumeResourceDescriptionInner getByResourceGroup(String resourceGroupName, String volumeName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, volumeName).toBlocking().single().body();
    }

    /**
     * Gets the volume resource.
     * Gets the information about the volume resource with a given name. This information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VolumeResourceDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String volumeName, final ServiceCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, volumeName), serviceCallback);
    }

    /**
     * Gets the volume resource.
     * Gets the information about the volume resource with a given name. This information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<VolumeResourceDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String volumeName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, volumeName).map(new Func1<ServiceResponse<VolumeResourceDescriptionInner>, VolumeResourceDescriptionInner>() {
            @Override
            public VolumeResourceDescriptionInner call(ServiceResponse<VolumeResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the volume resource.
     * Gets the information about the volume resource with a given name. This information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<ServiceResponse<VolumeResourceDescriptionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String volumeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, volumeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VolumeResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<VolumeResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VolumeResourceDescriptionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VolumeResourceDescriptionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VolumeResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VolumeResourceDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes the volume resource.
     * Deletes the volume identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String volumeName) {
        deleteWithServiceResponseAsync(resourceGroupName, volumeName).toBlocking().single().body();
    }

    /**
     * Deletes the volume resource.
     * Deletes the volume identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String volumeName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, volumeName), serviceCallback);
    }

    /**
     * Deletes the volume resource.
     * Deletes the volume identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String volumeName) {
        return deleteWithServiceResponseAsync(resourceGroupName, volumeName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the volume resource.
     * Deletes the volume identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param volumeName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String volumeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, volumeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<VolumeResourceDescriptionInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<VolumeResourceDescriptionInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<VolumeResourceDescriptionInner>(response.body()) {
            @Override
            public Page<VolumeResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VolumeResourceDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<Page<VolumeResourceDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Page<VolumeResourceDescriptionInner>>() {
                @Override
                public Page<VolumeResourceDescriptionInner> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
    ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VolumeResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VolumeResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VolumeResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<VolumeResourceDescriptionInner> list() {
        ServiceResponse<Page<VolumeResourceDescriptionInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<VolumeResourceDescriptionInner>(response.body()) {
            @Override
            public Page<VolumeResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VolumeResourceDescriptionInner>> listAsync(final ListOperationCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<Page<VolumeResourceDescriptionInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Page<VolumeResourceDescriptionInner>>() {
                @Override
                public Page<VolumeResourceDescriptionInner> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VolumeResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VolumeResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VolumeResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<VolumeResourceDescriptionInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<VolumeResourceDescriptionInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VolumeResourceDescriptionInner>(response.body()) {
            @Override
            public Page<VolumeResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VolumeResourceDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<VolumeResourceDescriptionInner>> serviceFuture, final ListOperationCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<Page<VolumeResourceDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Page<VolumeResourceDescriptionInner>>() {
                @Override
                public Page<VolumeResourceDescriptionInner> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the volume resources in a given resource group.
     * Gets the information about all volume resources in a given resource group. The information includes the volume description and other runtime information.
     *
    ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VolumeResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VolumeResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VolumeResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<VolumeResourceDescriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<VolumeResourceDescriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VolumeResourceDescriptionInner>(response.body()) {
            @Override
            public Page<VolumeResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VolumeResourceDescriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<VolumeResourceDescriptionInner>> serviceFuture, final ListOperationCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<Page<VolumeResourceDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Page<VolumeResourceDescriptionInner>>() {
                @Override
                public Page<VolumeResourceDescriptionInner> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VolumeResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VolumeResourceDescriptionInner>>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(ServiceResponse<Page<VolumeResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the volume resources in a given subscription.
     * Gets the information about all volume resources in a given subscription. The information includes the volume description and other runtime information.
     *
    ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VolumeResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VolumeResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VolumeResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VolumeResourceDescriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VolumeResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VolumeResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
