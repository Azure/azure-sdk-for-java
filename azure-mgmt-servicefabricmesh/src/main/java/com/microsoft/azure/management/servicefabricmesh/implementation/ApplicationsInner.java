/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabricmesh.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.servicefabricmesh.ErrorModelException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Applications.
 */
public class ApplicationsInner implements InnerSupportsGet<ApplicationResourceDescriptionInner>, InnerSupportsDelete<Void>, InnerSupportsListing<ApplicationResourceDescriptionInner> {
    /** The Retrofit service to perform REST calls. */
    private ApplicationsService service;
    /** The service client containing this operation class. */
    private ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of ApplicationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApplicationsInner(Retrofit retrofit, ServiceFabricMeshManagementClientImpl client) {
        this.service = retrofit.create(ApplicationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Applications to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApplicationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Applications create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "applicationName", encoded = true) String applicationName, @Query("api-version") String apiVersion, @Body ApplicationResourceDescriptionInner applicationResourceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Applications getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "applicationName", encoded = true) String applicationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Applications delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path(value = "applicationName", encoded = true) String applicationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Applications listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Applications list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/applications")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Applications listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabricmesh.Applications listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates an application resource.
     * Creates an application resource with the specified name and description. If an application with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to provide public connectivity to the services of an application.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param applicationResourceDescription Description for creating an application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceDescriptionInner object if successful.
     */
    public ApplicationResourceDescriptionInner create(String resourceGroupName, String applicationName, ApplicationResourceDescriptionInner applicationResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, applicationName, applicationResourceDescription).toBlocking().single().body();
    }

    /**
     * Creates or updates an application resource.
     * Creates an application resource with the specified name and description. If an application with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to provide public connectivity to the services of an application.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param applicationResourceDescription Description for creating an application resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceDescriptionInner> createAsync(String resourceGroupName, String applicationName, ApplicationResourceDescriptionInner applicationResourceDescription, final ServiceCallback<ApplicationResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, applicationName, applicationResourceDescription), serviceCallback);
    }

    /**
     * Creates or updates an application resource.
     * Creates an application resource with the specified name and description. If an application with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to provide public connectivity to the services of an application.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param applicationResourceDescription Description for creating an application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceDescriptionInner object
     */
    public Observable<ApplicationResourceDescriptionInner> createAsync(String resourceGroupName, String applicationName, ApplicationResourceDescriptionInner applicationResourceDescription) {
        return createWithServiceResponseAsync(resourceGroupName, applicationName, applicationResourceDescription).map(new Func1<ServiceResponse<ApplicationResourceDescriptionInner>, ApplicationResourceDescriptionInner>() {
            @Override
            public ApplicationResourceDescriptionInner call(ServiceResponse<ApplicationResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an application resource.
     * Creates an application resource with the specified name and description. If an application with the same name already exists, then its description is updated to the one indicated in this request.
     Use network resources to provide public connectivity to the services of an application.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param applicationResourceDescription Description for creating an application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceDescriptionInner object
     */
    public Observable<ServiceResponse<ApplicationResourceDescriptionInner>> createWithServiceResponseAsync(String resourceGroupName, String applicationName, ApplicationResourceDescriptionInner applicationResourceDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (applicationResourceDescription == null) {
            throw new IllegalArgumentException("Parameter applicationResourceDescription is required and cannot be null.");
        }
        Validator.validate(applicationResourceDescription);
        return service.create(this.client.subscriptionId(), resourceGroupName, applicationName, this.client.apiVersion(), applicationResourceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationResourceDescriptionInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationResourceDescriptionInner> createDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationResourceDescriptionInner>() { }.getType())
                .register(201, new TypeToken<ApplicationResourceDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets the application resource.
     * Gets the information about the application resource with a given name. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceDescriptionInner object if successful.
     */
    public ApplicationResourceDescriptionInner getByResourceGroup(String resourceGroupName, String applicationName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, applicationName).toBlocking().single().body();
    }

    /**
     * Gets the application resource.
     * Gets the information about the application resource with a given name. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String applicationName, final ServiceCallback<ApplicationResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, applicationName), serviceCallback);
    }

    /**
     * Gets the application resource.
     * Gets the information about the application resource with a given name. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceDescriptionInner object
     */
    public Observable<ApplicationResourceDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String applicationName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, applicationName).map(new Func1<ServiceResponse<ApplicationResourceDescriptionInner>, ApplicationResourceDescriptionInner>() {
            @Override
            public ApplicationResourceDescriptionInner call(ServiceResponse<ApplicationResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the application resource.
     * Gets the information about the application resource with a given name. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceDescriptionInner object
     */
    public Observable<ServiceResponse<ApplicationResourceDescriptionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String applicationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, applicationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationResourceDescriptionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationResourceDescriptionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationResourceDescriptionInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationResourceDescriptionInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes the application resource.
     * Deletes the application resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String applicationName) {
        deleteWithServiceResponseAsync(resourceGroupName, applicationName).toBlocking().single().body();
    }

    /**
     * Deletes the application resource.
     * Deletes the application resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String applicationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, applicationName), serviceCallback);
    }

    /**
     * Deletes the application resource.
     * Deletes the application resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String applicationName) {
        return deleteWithServiceResponseAsync(resourceGroupName, applicationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the application resource.
     * Deletes the application resource identified by the name.
     *
     * @param resourceGroupName Azure resource group name
     * @param applicationName The identity of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String applicationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, applicationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<ApplicationResourceDescriptionInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ApplicationResourceDescriptionInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ApplicationResourceDescriptionInner>(response.body()) {
            @Override
            public Page<ApplicationResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationResourceDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ApplicationResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<Page<ApplicationResourceDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Page<ApplicationResourceDescriptionInner>>() {
                @Override
                public Page<ApplicationResourceDescriptionInner> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
    ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> * @param resourceGroupName Azure resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<ApplicationResourceDescriptionInner> list() {
        ServiceResponse<Page<ApplicationResourceDescriptionInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ApplicationResourceDescriptionInner>(response.body()) {
            @Override
            public Page<ApplicationResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationResourceDescriptionInner>> listAsync(final ListOperationCallback<ApplicationResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<Page<ApplicationResourceDescriptionInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Page<ApplicationResourceDescriptionInner>>() {
                @Override
                public Page<ApplicationResourceDescriptionInner> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<ApplicationResourceDescriptionInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ApplicationResourceDescriptionInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApplicationResourceDescriptionInner>(response.body()) {
            @Override
            public Page<ApplicationResourceDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationResourceDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationResourceDescriptionInner>> serviceFuture, final ListOperationCallback<ApplicationResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<Page<ApplicationResourceDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Page<ApplicationResourceDescriptionInner>>() {
                @Override
                public Page<ApplicationResourceDescriptionInner> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application's services and other runtime properties.
     *
    ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object if successful.
     */
    public PagedList<ApplicationResourceDescriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ApplicationResourceDescriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApplicationResourceDescriptionInner>(response.body()) {
            @Override
            public Page<ApplicationResourceDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationResourceDescriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationResourceDescriptionInner>> serviceFuture, final ListOperationCallback<ApplicationResourceDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<Page<ApplicationResourceDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Page<ApplicationResourceDescriptionInner>>() {
                @Override
                public Page<ApplicationResourceDescriptionInner> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationResourceDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationResourceDescriptionInner>>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(ServiceResponse<Page<ApplicationResourceDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application's services and other runtime properties.
     *
    ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationResourceDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationResourceDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationResourceDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationResourceDescriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationResourceDescriptionInner>, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationResourceDescriptionInner>>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
