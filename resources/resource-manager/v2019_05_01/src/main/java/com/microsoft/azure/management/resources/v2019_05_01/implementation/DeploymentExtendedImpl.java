/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resources.v2019_05_01.implementation;

import com.microsoft.azure.management.resources.v2019_05_01.DeploymentExtended;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.resources.v2019_05_01.DeploymentProperties;
import com.microsoft.azure.management.resources.v2019_05_01.DeploymentPropertiesExtended;
import rx.functions.Func1;

class DeploymentExtendedImpl extends CreatableUpdatableImpl<DeploymentExtended, DeploymentExtendedInner, DeploymentExtendedImpl> implements DeploymentExtended, DeploymentExtended.Definition, DeploymentExtended.Update {
    private final ResourcesManager manager;
    private String groupId;
    private String deploymentName;
    private DeploymentInner createOrUpdateParameter;

    DeploymentExtendedImpl(String name, ResourcesManager manager) {
        super(name, new DeploymentExtendedInner());
        this.manager = manager;
        // Set resource name
        this.deploymentName = name;
        //
        this.createOrUpdateParameter = new DeploymentInner();
    }

    DeploymentExtendedImpl(DeploymentExtendedInner inner, ResourcesManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.deploymentName = inner.name();
        // set resource ancestor and positional variables
        this.groupId = IdParsingUtils.getValueFromIdByName(inner.id(), "managementGroups");
        this.deploymentName = IdParsingUtils.getValueFromIdByName(inner.id(), "deployments");
        //
        this.createOrUpdateParameter = new DeploymentInner();
    }

    @Override
    public ResourcesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DeploymentExtended> createResourceAsync() {
        DeploymentsInner client = this.manager().inner().deployments();
        return client.createOrUpdateAtManagementGroupScopeAsync(this.groupId, this.deploymentName, this.createOrUpdateParameter)
            .map(new Func1<DeploymentExtendedInner, DeploymentExtendedInner>() {
               @Override
               public DeploymentExtendedInner call(DeploymentExtendedInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DeploymentExtended> updateResourceAsync() {
        DeploymentsInner client = this.manager().inner().deployments();
        return client.createOrUpdateAtManagementGroupScopeAsync(this.groupId, this.deploymentName, this.createOrUpdateParameter)
            .map(new Func1<DeploymentExtendedInner, DeploymentExtendedInner>() {
               @Override
               public DeploymentExtendedInner call(DeploymentExtendedInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DeploymentExtendedInner> getInnerAsync() {
        DeploymentsInner client = this.manager().inner().deployments();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new DeploymentInner();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public DeploymentPropertiesExtended properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DeploymentExtendedImpl withExistingMicrosoft.Resource(String groupId) {
        this.groupId = groupId;
        return this;
    }

    @Override
    public DeploymentExtendedImpl withProperties(DeploymentProperties properties) {
        this.createOrUpdateParameter.withProperties(properties);
        return this;
    }

    @Override
    public DeploymentExtendedImpl withLocation(String location) {
        this.createOrUpdateParameter.withLocation(location);
        return this;
    }

}
