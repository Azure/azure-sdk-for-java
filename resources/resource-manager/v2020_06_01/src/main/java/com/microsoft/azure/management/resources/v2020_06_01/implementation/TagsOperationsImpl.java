/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.resources.v2020_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.resources.v2020_06_01.TagsOperations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.resources.v2020_06_01.TagDetails;
import rx.Completable;
import com.microsoft.azure.management.resources.v2020_06_01.TagValue;
import com.microsoft.azure.management.resources.v2020_06_01.TagsResource;
import com.microsoft.azure.management.resources.v2020_06_01.Tags;
import com.microsoft.azure.management.resources.v2020_06_01.TagsPatchResource;

class TagsOperationsImpl extends WrapperImpl<TagsOperationsInner> implements TagsOperations {
    private final ResourcesManager manager;

    TagsOperationsImpl(ResourcesManager manager) {
        super(manager.inner().tagsOperations());
        this.manager = manager;
    }

    public ResourcesManager manager() {
        return this.manager;
    }

    private TagDetailsImpl wrapTagDetailsModel(TagDetailsInner inner) {
        return  new TagDetailsImpl(inner, manager());
    }

    @Override
    public Observable<TagDetails> listAsync() {
        TagsOperationsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<TagDetailsInner>, Iterable<TagDetailsInner>>() {
            @Override
            public Iterable<TagDetailsInner> call(Page<TagDetailsInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TagDetailsInner, TagDetails>() {
            @Override
            public TagDetails call(TagDetailsInner inner) {
                return wrapTagDetailsModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String tagName) {
        TagsOperationsInner client = this.inner();
        return client.deleteAsync(tagName).toCompletable();
    }

    @Override
    public Observable<TagDetails> createOrUpdateAsync(String tagName) {
        TagsOperationsInner client = this.inner();
        return client.createOrUpdateAsync(tagName)
        .map(new Func1<TagDetailsInner, TagDetails>() {
            @Override
            public TagDetails call(TagDetailsInner inner) {
                return new TagDetailsImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteValueAsync(String tagName, String tagValue) {
        TagsOperationsInner client = this.inner();
        return client.deleteValueAsync(tagName, tagValue).toCompletable();
    }

    @Override
    public Observable<TagValue> createOrUpdateValueAsync(String tagName, String tagValue) {
        TagsOperationsInner client = this.inner();
        return client.createOrUpdateValueAsync(tagName, tagValue)
        .map(new Func1<TagValueInner, TagValue>() {
            @Override
            public TagValue call(TagValueInner inner) {
                return new TagValueImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TagsResource> createOrUpdateAtScopeAsync(String scope, Tags properties) {
        TagsOperationsInner client = this.inner();
        return client.createOrUpdateAtScopeAsync(scope, properties)
        .map(new Func1<TagsResourceInner, TagsResource>() {
            @Override
            public TagsResource call(TagsResourceInner inner) {
                return new TagsResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TagsResource> updateAtScopeAsync(String scope, TagsPatchResource parameters) {
        TagsOperationsInner client = this.inner();
        return client.updateAtScopeAsync(scope, parameters)
        .map(new Func1<TagsResourceInner, TagsResource>() {
            @Override
            public TagsResource call(TagsResourceInner inner) {
                return new TagsResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TagsResource> getAtScopeAsync(String scope) {
        TagsOperationsInner client = this.inner();
        return client.getAtScopeAsync(scope)
        .map(new Func1<TagsResourceInner, TagsResource>() {
            @Override
            public TagsResource call(TagsResourceInner inner) {
                return new TagsResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAtScopeAsync(String scope) {
        TagsOperationsInner client = this.inner();
        return client.deleteAtScopeAsync(scope).toCompletable();
    }

}
