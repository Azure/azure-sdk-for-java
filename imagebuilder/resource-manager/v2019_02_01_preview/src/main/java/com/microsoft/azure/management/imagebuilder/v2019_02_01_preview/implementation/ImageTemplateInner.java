/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.implementation;

import com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.ImageTemplateSource;
import java.util.List;
import com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.ImageTemplateCustomizer;
import com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.ImageTemplateDistributor;
import com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.ProvisioningError;
import com.microsoft.azure.management.imagebuilder.v2019_02_01_preview.ImageTemplateLastRunStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * The ImageTemplateInner model.
 */
@JsonFlatten
public class ImageTemplateInner extends Resource {
    /**
     * Specifies the properties used to describe the source image.
     */
    @JsonProperty(value = "properties.source", required = true)
    private ImageTemplateSource source;

    /**
     * Specifies the properties used to describe the customization steps of the
     * image, like Image source etc.
     */
    @JsonProperty(value = "properties.customize")
    private List<ImageTemplateCustomizer> customize;

    /**
     * The distribution targets where the image output needs to go to.
     */
    @JsonProperty(value = "properties.distribute", required = true)
    private List<ImageTemplateDistributor> distribute;

    /**
     * Provisioning state of the resource. Possible values include: 'Creating',
     * 'Succeeded', 'Failed', 'Deleting'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Provisioning error, if any.
     */
    @JsonProperty(value = "properties.provisioningError", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningError provisioningError;

    /**
     * State of 'run' that is currently executing or was last executed.
     */
    @JsonProperty(value = "properties.lastRunStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ImageTemplateLastRunStatus lastRunStatus;

    /**
     * Get specifies the properties used to describe the source image.
     *
     * @return the source value
     */
    public ImageTemplateSource source() {
        return this.source;
    }

    /**
     * Set specifies the properties used to describe the source image.
     *
     * @param source the source value to set
     * @return the ImageTemplateInner object itself.
     */
    public ImageTemplateInner withSource(ImageTemplateSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get specifies the properties used to describe the customization steps of the image, like Image source etc.
     *
     * @return the customize value
     */
    public List<ImageTemplateCustomizer> customize() {
        return this.customize;
    }

    /**
     * Set specifies the properties used to describe the customization steps of the image, like Image source etc.
     *
     * @param customize the customize value to set
     * @return the ImageTemplateInner object itself.
     */
    public ImageTemplateInner withCustomize(List<ImageTemplateCustomizer> customize) {
        this.customize = customize;
        return this;
    }

    /**
     * Get the distribution targets where the image output needs to go to.
     *
     * @return the distribute value
     */
    public List<ImageTemplateDistributor> distribute() {
        return this.distribute;
    }

    /**
     * Set the distribution targets where the image output needs to go to.
     *
     * @param distribute the distribute value to set
     * @return the ImageTemplateInner object itself.
     */
    public ImageTemplateInner withDistribute(List<ImageTemplateDistributor> distribute) {
        this.distribute = distribute;
        return this;
    }

    /**
     * Get provisioning state of the resource. Possible values include: 'Creating', 'Succeeded', 'Failed', 'Deleting'.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get provisioning error, if any.
     *
     * @return the provisioningError value
     */
    public ProvisioningError provisioningError() {
        return this.provisioningError;
    }

    /**
     * Get state of 'run' that is currently executing or was last executed.
     *
     * @return the lastRunStatus value
     */
    public ImageTemplateLastRunStatus lastRunStatus() {
        return this.lastRunStatus;
    }

}
