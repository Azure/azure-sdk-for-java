/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.scheduler.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public class JobsInner {
    /** The Retrofit service to perform REST calls. */
    private JobsService service;
    /** The service client containing this operation class. */
    private SchedulerManagementClientImpl client;

    /**
     * Initializes an instance of JobsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JobsInner(Retrofit retrofit, SchedulerManagementClientImpl client) {
        this.service = retrofit.create(JobsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Jobs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JobsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobCollectionName") String jobCollectionName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobCollectionName") String jobCollectionName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body JobDefinitionInner job, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs patch" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}")
        Observable<Response<ResponseBody>> patch(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobCollectionName") String jobCollectionName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body JobDefinitionInner job, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobCollectionName") String jobCollectionName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs run" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run")
        Observable<Response<ResponseBody>> run(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobCollectionName") String jobCollectionName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobCollectionName") String jobCollectionName, @Query("api-version") String apiVersion, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs listJobHistory" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history")
        Observable<Response<ResponseBody>> listJobHistory(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("jobCollectionName") String jobCollectionName, @Path("jobName") String jobName, @Query("api-version") String apiVersion, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.scheduler.Jobs listJobHistoryNext" })
        @GET
        Observable<Response<ResponseBody>> listJobHistoryNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDefinitionInner object if successful.
     */
    public JobDefinitionInner get(String resourceGroupName, String jobCollectionName, String jobName) {
        return getWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).toBlocking().single().body();
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDefinitionInner> getAsync(String resourceGroupName, String jobCollectionName, String jobName, final ServiceCallback<JobDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName), serviceCallback);
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<JobDefinitionInner> getAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return getWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).map(new Func1<ServiceResponse<JobDefinitionInner>, JobDefinitionInner>() {
            @Override
            public JobDefinitionInner call(ServiceResponse<JobDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<ServiceResponse<JobDefinitionInner>> getWithServiceResponseAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JobDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDefinitionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobDefinitionInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobDefinitionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobDefinitionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDefinitionInner object if successful.
     */
    public JobDefinitionInner createOrUpdate(String resourceGroupName, String jobCollectionName, String jobName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).toBlocking().single().body();
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDefinitionInner> createOrUpdateAsync(String resourceGroupName, String jobCollectionName, String jobName, final ServiceCallback<JobDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName), serviceCallback);
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<JobDefinitionInner> createOrUpdateAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).map(new Func1<ServiceResponse<JobDefinitionInner>, JobDefinitionInner>() {
            @Override
            public JobDefinitionInner call(ServiceResponse<JobDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<ServiceResponse<JobDefinitionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final JobPropertiesInner properties = null;
        JobDefinitionInner job = new JobDefinitionInner();
        job.withProperties(null);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), job, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JobDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDefinitionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDefinitionInner object if successful.
     */
    public JobDefinitionInner createOrUpdate(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName, properties).toBlocking().single().body();
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDefinitionInner> createOrUpdateAsync(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties, final ServiceCallback<JobDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName, properties), serviceCallback);
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<JobDefinitionInner> createOrUpdateAsync(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName, properties).map(new Func1<ServiceResponse<JobDefinitionInner>, JobDefinitionInner>() {
            @Override
            public JobDefinitionInner call(ServiceResponse<JobDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<ServiceResponse<JobDefinitionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        JobDefinitionInner job = new JobDefinitionInner();
        job.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), job, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JobDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDefinitionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobDefinitionInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobDefinitionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobDefinitionInner>() { }.getType())
                .register(201, new TypeToken<JobDefinitionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDefinitionInner object if successful.
     */
    public JobDefinitionInner patch(String resourceGroupName, String jobCollectionName, String jobName) {
        return patchWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).toBlocking().single().body();
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDefinitionInner> patchAsync(String resourceGroupName, String jobCollectionName, String jobName, final ServiceCallback<JobDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName), serviceCallback);
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<JobDefinitionInner> patchAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return patchWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).map(new Func1<ServiceResponse<JobDefinitionInner>, JobDefinitionInner>() {
            @Override
            public JobDefinitionInner call(ServiceResponse<JobDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<ServiceResponse<JobDefinitionInner>> patchWithServiceResponseAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final JobPropertiesInner properties = null;
        JobDefinitionInner job = new JobDefinitionInner();
        job.withProperties(null);
        return service.patch(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), job, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JobDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDefinitionInner> clientResponse = patchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDefinitionInner object if successful.
     */
    public JobDefinitionInner patch(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties) {
        return patchWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName, properties).toBlocking().single().body();
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDefinitionInner> patchAsync(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties, final ServiceCallback<JobDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName, properties), serviceCallback);
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<JobDefinitionInner> patchAsync(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties) {
        return patchWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName, properties).map(new Func1<ServiceResponse<JobDefinitionInner>, JobDefinitionInner>() {
            @Override
            public JobDefinitionInner call(ServiceResponse<JobDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param properties Gets or sets the job properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDefinitionInner object
     */
    public Observable<ServiceResponse<JobDefinitionInner>> patchWithServiceResponseAsync(String resourceGroupName, String jobCollectionName, String jobName, JobPropertiesInner properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        JobDefinitionInner job = new JobDefinitionInner();
        job.withProperties(properties);
        return service.patch(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), job, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JobDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDefinitionInner> clientResponse = patchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobDefinitionInner> patchDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobDefinitionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobDefinitionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String jobCollectionName, String jobName) {
        deleteWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).toBlocking().single().body();
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String jobCollectionName, String jobName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName), serviceCallback);
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return deleteWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void run(String resourceGroupName, String jobCollectionName, String jobName) {
        runWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).toBlocking().single().body();
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> runAsync(String resourceGroupName, String jobCollectionName, String jobName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(runWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName), serviceCallback);
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> runAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return runWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> runWithServiceResponseAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.run(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = runDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> runDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobDefinitionInner&gt; object if successful.
     */
    public PagedList<JobDefinitionInner> list(final String resourceGroupName, final String jobCollectionName) {
        ServiceResponse<Page<JobDefinitionInner>> response = listSinglePageAsync(resourceGroupName, jobCollectionName).toBlocking().single();
        return new PagedList<JobDefinitionInner>(response.body()) {
            @Override
            public Page<JobDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobDefinitionInner>> listAsync(final String resourceGroupName, final String jobCollectionName, final ListOperationCallback<JobDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, jobCollectionName),
            new Func1<String, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobDefinitionInner&gt; object
     */
    public Observable<Page<JobDefinitionInner>> listAsync(final String resourceGroupName, final String jobCollectionName) {
        return listWithServiceResponseAsync(resourceGroupName, jobCollectionName)
            .map(new Func1<ServiceResponse<Page<JobDefinitionInner>>, Page<JobDefinitionInner>>() {
                @Override
                public Page<JobDefinitionInner> call(ServiceResponse<Page<JobDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobDefinitionInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String jobCollectionName) {
        return listSinglePageAsync(resourceGroupName, jobCollectionName)
            .concatMap(new Func1<ServiceResponse<Page<JobDefinitionInner>>, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(ServiceResponse<Page<JobDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobDefinitionInner>>> listSinglePageAsync(final String resourceGroupName, final String jobCollectionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String filter = null;
        return service.list(this.client.subscriptionId(), resourceGroupName, jobCollectionName, this.client.apiVersion(), top, skip, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobDefinitionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobDefinitionInner&gt; object if successful.
     */
    public PagedList<JobDefinitionInner> list(final String resourceGroupName, final String jobCollectionName, final Integer top, final Integer skip, final String filter) {
        ServiceResponse<Page<JobDefinitionInner>> response = listSinglePageAsync(resourceGroupName, jobCollectionName, top, skip, filter).toBlocking().single();
        return new PagedList<JobDefinitionInner>(response.body()) {
            @Override
            public Page<JobDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobDefinitionInner>> listAsync(final String resourceGroupName, final String jobCollectionName, final Integer top, final Integer skip, final String filter, final ListOperationCallback<JobDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, jobCollectionName, top, skip, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobDefinitionInner&gt; object
     */
    public Observable<Page<JobDefinitionInner>> listAsync(final String resourceGroupName, final String jobCollectionName, final Integer top, final Integer skip, final String filter) {
        return listWithServiceResponseAsync(resourceGroupName, jobCollectionName, top, skip, filter)
            .map(new Func1<ServiceResponse<Page<JobDefinitionInner>>, Page<JobDefinitionInner>>() {
                @Override
                public Page<JobDefinitionInner> call(ServiceResponse<Page<JobDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobDefinitionInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String jobCollectionName, final Integer top, final Integer skip, final String filter) {
        return listSinglePageAsync(resourceGroupName, jobCollectionName, top, skip, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobDefinitionInner>>, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(ServiceResponse<Page<JobDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all jobs under the specified job collection.
     *
    ServiceResponse<PageImpl<JobDefinitionInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<JobDefinitionInner>> * @param jobCollectionName The job collection name.
    ServiceResponse<PageImpl<JobDefinitionInner>> * @param top The number of jobs to request, in the of range of [1..100].
    ServiceResponse<PageImpl<JobDefinitionInner>> * @param skip The (0-based) index of the job history list from which to begin requesting entries.
    ServiceResponse<PageImpl<JobDefinitionInner>> * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobDefinitionInner>>> listSinglePageAsync(final String resourceGroupName, final String jobCollectionName, final Integer top, final Integer skip, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, jobCollectionName, this.client.apiVersion(), top, skip, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobDefinitionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobDefinitionInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobDefinitionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobDefinitionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobHistoryDefinitionInner&gt; object if successful.
     */
    public PagedList<JobHistoryDefinitionInner> listJobHistory(final String resourceGroupName, final String jobCollectionName, final String jobName) {
        ServiceResponse<Page<JobHistoryDefinitionInner>> response = listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName).toBlocking().single();
        return new PagedList<JobHistoryDefinitionInner>(response.body()) {
            @Override
            public Page<JobHistoryDefinitionInner> nextPage(String nextPageLink) {
                return listJobHistoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobHistoryDefinitionInner>> listJobHistoryAsync(final String resourceGroupName, final String jobCollectionName, final String jobName, final ListOperationCallback<JobHistoryDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName),
            new Func1<String, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(String nextPageLink) {
                    return listJobHistoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobHistoryDefinitionInner&gt; object
     */
    public Observable<Page<JobHistoryDefinitionInner>> listJobHistoryAsync(final String resourceGroupName, final String jobCollectionName, final String jobName) {
        return listJobHistoryWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName)
            .map(new Func1<ServiceResponse<Page<JobHistoryDefinitionInner>>, Page<JobHistoryDefinitionInner>>() {
                @Override
                public Page<JobHistoryDefinitionInner> call(ServiceResponse<Page<JobHistoryDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobHistoryDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> listJobHistoryWithServiceResponseAsync(final String resourceGroupName, final String jobCollectionName, final String jobName) {
        return listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName)
            .concatMap(new Func1<ServiceResponse<Page<JobHistoryDefinitionInner>>, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(ServiceResponse<Page<JobHistoryDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listJobHistoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobHistoryDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> listJobHistorySinglePageAsync(final String resourceGroupName, final String jobCollectionName, final String jobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String filter = null;
        return service.listJobHistory(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), top, skip, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobHistoryDefinitionInner>> result = listJobHistoryDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobHistoryDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobHistoryDefinitionInner&gt; object if successful.
     */
    public PagedList<JobHistoryDefinitionInner> listJobHistory(final String resourceGroupName, final String jobCollectionName, final String jobName, final Integer top, final Integer skip, final String filter) {
        ServiceResponse<Page<JobHistoryDefinitionInner>> response = listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter).toBlocking().single();
        return new PagedList<JobHistoryDefinitionInner>(response.body()) {
            @Override
            public Page<JobHistoryDefinitionInner> nextPage(String nextPageLink) {
                return listJobHistoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobHistoryDefinitionInner>> listJobHistoryAsync(final String resourceGroupName, final String jobCollectionName, final String jobName, final Integer top, final Integer skip, final String filter, final ListOperationCallback<JobHistoryDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(String nextPageLink) {
                    return listJobHistoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobHistoryDefinitionInner&gt; object
     */
    public Observable<Page<JobHistoryDefinitionInner>> listJobHistoryAsync(final String resourceGroupName, final String jobCollectionName, final String jobName, final Integer top, final Integer skip, final String filter) {
        return listJobHistoryWithServiceResponseAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter)
            .map(new Func1<ServiceResponse<Page<JobHistoryDefinitionInner>>, Page<JobHistoryDefinitionInner>>() {
                @Override
                public Page<JobHistoryDefinitionInner> call(ServiceResponse<Page<JobHistoryDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobHistoryDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> listJobHistoryWithServiceResponseAsync(final String resourceGroupName, final String jobCollectionName, final String jobName, final Integer top, final Integer skip, final String filter) {
        return listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobHistoryDefinitionInner>>, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(ServiceResponse<Page<JobHistoryDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listJobHistoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists job history.
     *
    ServiceResponse<PageImpl<JobHistoryDefinitionInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<JobHistoryDefinitionInner>> * @param jobCollectionName The job collection name.
    ServiceResponse<PageImpl<JobHistoryDefinitionInner>> * @param jobName The job name.
    ServiceResponse<PageImpl<JobHistoryDefinitionInner>> * @param top the number of job history to request, in the of range of [1..100].
    ServiceResponse<PageImpl<JobHistoryDefinitionInner>> * @param skip The (0-based) index of the job history list from which to begin requesting entries.
    ServiceResponse<PageImpl<JobHistoryDefinitionInner>> * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobHistoryDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> listJobHistorySinglePageAsync(final String resourceGroupName, final String jobCollectionName, final String jobName, final Integer top, final Integer skip, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jobCollectionName == null) {
            throw new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null.");
        }
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listJobHistory(this.client.subscriptionId(), resourceGroupName, jobCollectionName, jobName, this.client.apiVersion(), top, skip, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobHistoryDefinitionInner>> result = listJobHistoryDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobHistoryDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobHistoryDefinitionInner>> listJobHistoryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobHistoryDefinitionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobHistoryDefinitionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobDefinitionInner&gt; object if successful.
     */
    public PagedList<JobDefinitionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<JobDefinitionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobDefinitionInner>(response.body()) {
            @Override
            public Page<JobDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobDefinitionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<JobDefinitionInner>> serviceFuture, final ListOperationCallback<JobDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobDefinitionInner&gt; object
     */
    public Observable<Page<JobDefinitionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobDefinitionInner>>, Page<JobDefinitionInner>>() {
                @Override
                public Page<JobDefinitionInner> call(ServiceResponse<Page<JobDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobDefinitionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobDefinitionInner>>, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(ServiceResponse<Page<JobDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all jobs under the specified job collection.
     *
    ServiceResponse<PageImpl<JobDefinitionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobDefinitionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobDefinitionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobDefinitionInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobDefinitionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobDefinitionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists job history.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobHistoryDefinitionInner&gt; object if successful.
     */
    public PagedList<JobHistoryDefinitionInner> listJobHistoryNext(final String nextPageLink) {
        ServiceResponse<Page<JobHistoryDefinitionInner>> response = listJobHistoryNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobHistoryDefinitionInner>(response.body()) {
            @Override
            public Page<JobHistoryDefinitionInner> nextPage(String nextPageLink) {
                return listJobHistoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists job history.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobHistoryDefinitionInner>> listJobHistoryNextAsync(final String nextPageLink, final ServiceFuture<List<JobHistoryDefinitionInner>> serviceFuture, final ListOperationCallback<JobHistoryDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listJobHistoryNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(String nextPageLink) {
                    return listJobHistoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists job history.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobHistoryDefinitionInner&gt; object
     */
    public Observable<Page<JobHistoryDefinitionInner>> listJobHistoryNextAsync(final String nextPageLink) {
        return listJobHistoryNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobHistoryDefinitionInner>>, Page<JobHistoryDefinitionInner>>() {
                @Override
                public Page<JobHistoryDefinitionInner> call(ServiceResponse<Page<JobHistoryDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists job history.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobHistoryDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> listJobHistoryNextWithServiceResponseAsync(final String nextPageLink) {
        return listJobHistoryNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobHistoryDefinitionInner>>, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(ServiceResponse<Page<JobHistoryDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listJobHistoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists job history.
     *
    ServiceResponse<PageImpl<JobHistoryDefinitionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobHistoryDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> listJobHistoryNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listJobHistoryNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobHistoryDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobHistoryDefinitionInner>> result = listJobHistoryNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobHistoryDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobHistoryDefinitionInner>> listJobHistoryNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobHistoryDefinitionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobHistoryDefinitionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
