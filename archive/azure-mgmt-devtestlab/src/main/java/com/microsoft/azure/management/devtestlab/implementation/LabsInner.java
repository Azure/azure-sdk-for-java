/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.implementation;

import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.devtestlab.GenerateUploadUriParameter;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Labs.
 */
public class LabsInner implements InnerSupportsGet<LabInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private LabsService service;
    /** The service client containing this operation class. */
    private DevTestLabsClientImpl client;

    /**
     * Initializes an instance of LabsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LabsInner(Retrofit retrofit, DevTestLabsClientImpl client) {
        this.service = retrofit.create(LabsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Labs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LabsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs listBySubscription" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs")
        Observable<Response<ResponseBody>> listBySubscription(@Path("subscriptionId") String subscriptionId, @Query("$expand") String expand, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("$expand") String expand, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Query("$expand") String expand, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Body LabInner lab, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Body LabInner lab, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Body LabFragmentInner lab, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs claimAnyVm" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/claimAnyVm")
        Observable<Response<ResponseBody>> claimAnyVm(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs beginClaimAnyVm" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/claimAnyVm")
        Observable<Response<ResponseBody>> beginClaimAnyVm(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs createEnvironment" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment")
        Observable<Response<ResponseBody>> createEnvironment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Body LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs beginCreateEnvironment" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment")
        Observable<Response<ResponseBody>> beginCreateEnvironment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Body LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs exportResourceUsage" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/exportResourceUsage")
        Observable<Response<ResponseBody>> exportResourceUsage(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Body ExportResourceUsageParametersInner exportResourceUsageParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs beginExportResourceUsage" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/exportResourceUsage")
        Observable<Response<ResponseBody>> beginExportResourceUsage(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Body ExportResourceUsageParametersInner exportResourceUsageParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs generateUploadUri" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri")
        Observable<Response<ResponseBody>> generateUploadUri(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body GenerateUploadUriParameter generateUploadUriParameter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs listVhds" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds")
        Observable<Response<ResponseBody>> listVhds(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs listBySubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listBySubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.Labs listVhdsNext" })
        @GET
        Observable<Response<ResponseBody>> listVhdsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List labs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabInner&gt; object if successful.
     */
    public PagedList<LabInner> listBySubscription() {
        ServiceResponse<Page<LabInner>> response = listBySubscriptionSinglePageAsync().toBlocking().single();
        return new PagedList<LabInner>(response.body()) {
            @Override
            public Page<LabInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List labs in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabInner>> listBySubscriptionAsync(final ListOperationCallback<LabInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List labs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<Page<LabInner>> listBySubscriptionAsync() {
        return listBySubscriptionWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<LabInner>>, Page<LabInner>>() {
                @Override
                public Page<LabInner> call(ServiceResponse<Page<LabInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List labs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabInner>>> listBySubscriptionWithServiceResponseAsync() {
        return listBySubscriptionSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<LabInner>>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(ServiceResponse<Page<LabInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List labs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabInner>>> listBySubscriptionSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        final Integer top = null;
        final String orderby = null;
        return service.listBySubscription(this.client.subscriptionId(), expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabInner>> result = listBySubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List labs in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabInner&gt; object if successful.
     */
    public PagedList<LabInner> listBySubscription(final String expand, final String filter, final Integer top, final String orderby) {
        ServiceResponse<Page<LabInner>> response = listBySubscriptionSinglePageAsync(expand, filter, top, orderby).toBlocking().single();
        return new PagedList<LabInner>(response.body()) {
            @Override
            public Page<LabInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List labs in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabInner>> listBySubscriptionAsync(final String expand, final String filter, final Integer top, final String orderby, final ListOperationCallback<LabInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionSinglePageAsync(expand, filter, top, orderby),
            new Func1<String, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List labs in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<Page<LabInner>> listBySubscriptionAsync(final String expand, final String filter, final Integer top, final String orderby) {
        return listBySubscriptionWithServiceResponseAsync(expand, filter, top, orderby)
            .map(new Func1<ServiceResponse<Page<LabInner>>, Page<LabInner>>() {
                @Override
                public Page<LabInner> call(ServiceResponse<Page<LabInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List labs in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabInner>>> listBySubscriptionWithServiceResponseAsync(final String expand, final String filter, final Integer top, final String orderby) {
        return listBySubscriptionSinglePageAsync(expand, filter, top, orderby)
            .concatMap(new Func1<ServiceResponse<Page<LabInner>>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(ServiceResponse<Page<LabInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List labs in a subscription.
     *
    ServiceResponse<PageImpl<LabInner>> * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
    ServiceResponse<PageImpl<LabInner>> * @param filter The filter to apply to the operation.
    ServiceResponse<PageImpl<LabInner>> * @param top The maximum number of resources to return from the operation.
    ServiceResponse<PageImpl<LabInner>> * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabInner>>> listBySubscriptionSinglePageAsync(final String expand, final String filter, final Integer top, final String orderby) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listBySubscription(this.client.subscriptionId(), expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabInner>> result = listBySubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabInner>> listBySubscriptionDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabInner&gt; object if successful.
     */
    public PagedList<LabInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<LabInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<LabInner>(response.body()) {
            @Override
            public Page<LabInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<LabInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<Page<LabInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<LabInner>>, Page<LabInner>>() {
                @Override
                public Page<LabInner> call(ServiceResponse<Page<LabInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<LabInner>>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(ServiceResponse<Page<LabInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        final Integer top = null;
        final String orderby = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabInner&gt; object if successful.
     */
    public PagedList<LabInner> listByResourceGroup(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        ServiceResponse<Page<LabInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, expand, filter, top, orderby).toBlocking().single();
        return new PagedList<LabInner>(response.body()) {
            @Override
            public Page<LabInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabInner>> listByResourceGroupAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby, final ListOperationCallback<LabInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, expand, filter, top, orderby),
            new Func1<String, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<Page<LabInner>> listByResourceGroupAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, expand, filter, top, orderby)
            .map(new Func1<ServiceResponse<Page<LabInner>>, Page<LabInner>>() {
                @Override
                public Page<LabInner> call(ServiceResponse<Page<LabInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List labs in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, expand, filter, top, orderby)
            .concatMap(new Func1<ServiceResponse<Page<LabInner>>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(ServiceResponse<Page<LabInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List labs in a resource group.
     *
    ServiceResponse<PageImpl<LabInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<LabInner>> * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
    ServiceResponse<PageImpl<LabInner>> * @param filter The filter to apply to the operation.
    ServiceResponse<PageImpl<LabInner>> * @param top The maximum number of resources to return from the operation.
    ServiceResponse<PageImpl<LabInner>> * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabInner object if successful.
     */
    public LabInner getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabInner> getByResourceGroupAsync(String resourceGroupName, String name, final ServiceCallback<LabInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<LabInner> getByResourceGroupAsync(String resourceGroupName, String name) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<LabInner>, LabInner>() {
            @Override
            public LabInner call(ServiceResponse<LabInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<ServiceResponse<LabInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, name, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabInner>>>() {
                @Override
                public Observable<ServiceResponse<LabInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabInner object if successful.
     */
    public LabInner getByResourceGroup(String resourceGroupName, String name, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, name, expand).toBlocking().single().body();
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabInner> getByResourceGroupAsync(String resourceGroupName, String name, String expand, final ServiceCallback<LabInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, name, expand), serviceCallback);
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<LabInner> getByResourceGroupAsync(String resourceGroupName, String name, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, name, expand).map(new Func1<ServiceResponse<LabInner>, LabInner>() {
            @Override
            public LabInner call(ServiceResponse<LabInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param expand Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<ServiceResponse<LabInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String name, String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, name, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabInner>>>() {
                @Override
                public Observable<ServiceResponse<LabInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LabInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LabInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LabInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabInner object if successful.
     */
    public LabInner createOrUpdate(String resourceGroupName, String name, LabInner lab) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, lab).toBlocking().last().body();
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabInner> createOrUpdateAsync(String resourceGroupName, String name, LabInner lab, final ServiceCallback<LabInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, name, lab), serviceCallback);
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<LabInner> createOrUpdateAsync(String resourceGroupName, String name, LabInner lab) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, lab).map(new Func1<ServiceResponse<LabInner>, LabInner>() {
            @Override
            public LabInner call(ServiceResponse<LabInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<LabInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String name, LabInner lab) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (lab == null) {
            throw new IllegalArgumentException("Parameter lab is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(lab);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, name, lab, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<LabInner>() { }.getType());
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabInner object if successful.
     */
    public LabInner beginCreateOrUpdate(String resourceGroupName, String name, LabInner lab) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, lab).toBlocking().single().body();
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabInner> beginCreateOrUpdateAsync(String resourceGroupName, String name, LabInner lab, final ServiceCallback<LabInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, lab), serviceCallback);
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<LabInner> beginCreateOrUpdateAsync(String resourceGroupName, String name, LabInner lab) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, lab).map(new Func1<ServiceResponse<LabInner>, LabInner>() {
            @Override
            public LabInner call(ServiceResponse<LabInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<ServiceResponse<LabInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String name, LabInner lab) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (lab == null) {
            throw new IllegalArgumentException("Parameter lab is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(lab);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, name, lab, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabInner>>>() {
                @Override
                public Observable<ServiceResponse<LabInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LabInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LabInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LabInner>() { }.getType())
                .register(201, new TypeToken<LabInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String name) {
        deleteWithServiceResponseAsync(resourceGroupName, name).toBlocking().last().body();
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String name) {
        return deleteWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String name) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String name) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Modify properties of labs.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabInner object if successful.
     */
    public LabInner update(String resourceGroupName, String name, LabFragmentInner lab) {
        return updateWithServiceResponseAsync(resourceGroupName, name, lab).toBlocking().single().body();
    }

    /**
     * Modify properties of labs.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabInner> updateAsync(String resourceGroupName, String name, LabFragmentInner lab, final ServiceCallback<LabInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, name, lab), serviceCallback);
    }

    /**
     * Modify properties of labs.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<LabInner> updateAsync(String resourceGroupName, String name, LabFragmentInner lab) {
        return updateWithServiceResponseAsync(resourceGroupName, name, lab).map(new Func1<ServiceResponse<LabInner>, LabInner>() {
            @Override
            public LabInner call(ServiceResponse<LabInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Modify properties of labs.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabInner object
     */
    public Observable<ServiceResponse<LabInner>> updateWithServiceResponseAsync(String resourceGroupName, String name, LabFragmentInner lab) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (lab == null) {
            throw new IllegalArgumentException("Parameter lab is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(lab);
        return service.update(this.client.subscriptionId(), resourceGroupName, name, lab, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabInner>>>() {
                @Override
                public Observable<ServiceResponse<LabInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LabInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LabInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LabInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void claimAnyVm(String resourceGroupName, String name) {
        claimAnyVmWithServiceResponseAsync(resourceGroupName, name).toBlocking().last().body();
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> claimAnyVmAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(claimAnyVmWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> claimAnyVmAsync(String resourceGroupName, String name) {
        return claimAnyVmWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> claimAnyVmWithServiceResponseAsync(String resourceGroupName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.claimAnyVm(this.client.subscriptionId(), resourceGroupName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginClaimAnyVm(String resourceGroupName, String name) {
        beginClaimAnyVmWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginClaimAnyVmAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginClaimAnyVmWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginClaimAnyVmAsync(String resourceGroupName, String name) {
        return beginClaimAnyVmWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginClaimAnyVmWithServiceResponseAsync(String resourceGroupName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginClaimAnyVm(this.client.subscriptionId(), resourceGroupName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginClaimAnyVmDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginClaimAnyVmDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void createEnvironment(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter) {
        createEnvironmentWithServiceResponseAsync(resourceGroupName, name, labVirtualMachineCreationParameter).toBlocking().last().body();
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createEnvironmentAsync(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createEnvironmentWithServiceResponseAsync(resourceGroupName, name, labVirtualMachineCreationParameter), serviceCallback);
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> createEnvironmentAsync(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter) {
        return createEnvironmentWithServiceResponseAsync(resourceGroupName, name, labVirtualMachineCreationParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> createEnvironmentWithServiceResponseAsync(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (labVirtualMachineCreationParameter == null) {
            throw new IllegalArgumentException("Parameter labVirtualMachineCreationParameter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(labVirtualMachineCreationParameter);
        Observable<Response<ResponseBody>> observable = service.createEnvironment(this.client.subscriptionId(), resourceGroupName, name, labVirtualMachineCreationParameter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginCreateEnvironment(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter) {
        beginCreateEnvironmentWithServiceResponseAsync(resourceGroupName, name, labVirtualMachineCreationParameter).toBlocking().single().body();
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginCreateEnvironmentAsync(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateEnvironmentWithServiceResponseAsync(resourceGroupName, name, labVirtualMachineCreationParameter), serviceCallback);
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginCreateEnvironmentAsync(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter) {
        return beginCreateEnvironmentWithServiceResponseAsync(resourceGroupName, name, labVirtualMachineCreationParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginCreateEnvironmentWithServiceResponseAsync(String resourceGroupName, String name, LabVirtualMachineCreationParameterInner labVirtualMachineCreationParameter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (labVirtualMachineCreationParameter == null) {
            throw new IllegalArgumentException("Parameter labVirtualMachineCreationParameter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(labVirtualMachineCreationParameter);
        return service.beginCreateEnvironment(this.client.subscriptionId(), resourceGroupName, name, labVirtualMachineCreationParameter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginCreateEnvironmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginCreateEnvironmentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void exportResourceUsage(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters) {
        exportResourceUsageWithServiceResponseAsync(resourceGroupName, name, exportResourceUsageParameters).toBlocking().last().body();
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> exportResourceUsageAsync(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(exportResourceUsageWithServiceResponseAsync(resourceGroupName, name, exportResourceUsageParameters), serviceCallback);
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> exportResourceUsageAsync(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters) {
        return exportResourceUsageWithServiceResponseAsync(resourceGroupName, name, exportResourceUsageParameters).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> exportResourceUsageWithServiceResponseAsync(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (exportResourceUsageParameters == null) {
            throw new IllegalArgumentException("Parameter exportResourceUsageParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(exportResourceUsageParameters);
        Observable<Response<ResponseBody>> observable = service.exportResourceUsage(this.client.subscriptionId(), resourceGroupName, name, exportResourceUsageParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginExportResourceUsage(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters) {
        beginExportResourceUsageWithServiceResponseAsync(resourceGroupName, name, exportResourceUsageParameters).toBlocking().single().body();
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginExportResourceUsageAsync(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginExportResourceUsageWithServiceResponseAsync(resourceGroupName, name, exportResourceUsageParameters), serviceCallback);
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginExportResourceUsageAsync(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters) {
        return beginExportResourceUsageWithServiceResponseAsync(resourceGroupName, name, exportResourceUsageParameters).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginExportResourceUsageWithServiceResponseAsync(String resourceGroupName, String name, ExportResourceUsageParametersInner exportResourceUsageParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (exportResourceUsageParameters == null) {
            throw new IllegalArgumentException("Parameter exportResourceUsageParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(exportResourceUsageParameters);
        return service.beginExportResourceUsage(this.client.subscriptionId(), resourceGroupName, name, exportResourceUsageParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginExportResourceUsageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginExportResourceUsageDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GenerateUploadUriResponseInner object if successful.
     */
    public GenerateUploadUriResponseInner generateUploadUri(String resourceGroupName, String name) {
        return generateUploadUriWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GenerateUploadUriResponseInner> generateUploadUriAsync(String resourceGroupName, String name, final ServiceCallback<GenerateUploadUriResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(generateUploadUriWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GenerateUploadUriResponseInner object
     */
    public Observable<GenerateUploadUriResponseInner> generateUploadUriAsync(String resourceGroupName, String name) {
        return generateUploadUriWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<GenerateUploadUriResponseInner>, GenerateUploadUriResponseInner>() {
            @Override
            public GenerateUploadUriResponseInner call(ServiceResponse<GenerateUploadUriResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GenerateUploadUriResponseInner object
     */
    public Observable<ServiceResponse<GenerateUploadUriResponseInner>> generateUploadUriWithServiceResponseAsync(String resourceGroupName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String blobName = null;
        GenerateUploadUriParameter generateUploadUriParameter = new GenerateUploadUriParameter();
        generateUploadUriParameter.withBlobName(null);
        return service.generateUploadUri(this.client.subscriptionId(), resourceGroupName, name, this.client.apiVersion(), this.client.acceptLanguage(), generateUploadUriParameter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GenerateUploadUriResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<GenerateUploadUriResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GenerateUploadUriResponseInner> clientResponse = generateUploadUriDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param blobName The blob name of the upload URI.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GenerateUploadUriResponseInner object if successful.
     */
    public GenerateUploadUriResponseInner generateUploadUri(String resourceGroupName, String name, String blobName) {
        return generateUploadUriWithServiceResponseAsync(resourceGroupName, name, blobName).toBlocking().single().body();
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param blobName The blob name of the upload URI.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GenerateUploadUriResponseInner> generateUploadUriAsync(String resourceGroupName, String name, String blobName, final ServiceCallback<GenerateUploadUriResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(generateUploadUriWithServiceResponseAsync(resourceGroupName, name, blobName), serviceCallback);
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param blobName The blob name of the upload URI.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GenerateUploadUriResponseInner object
     */
    public Observable<GenerateUploadUriResponseInner> generateUploadUriAsync(String resourceGroupName, String name, String blobName) {
        return generateUploadUriWithServiceResponseAsync(resourceGroupName, name, blobName).map(new Func1<ServiceResponse<GenerateUploadUriResponseInner>, GenerateUploadUriResponseInner>() {
            @Override
            public GenerateUploadUriResponseInner call(ServiceResponse<GenerateUploadUriResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param blobName The blob name of the upload URI.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GenerateUploadUriResponseInner object
     */
    public Observable<ServiceResponse<GenerateUploadUriResponseInner>> generateUploadUriWithServiceResponseAsync(String resourceGroupName, String name, String blobName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        GenerateUploadUriParameter generateUploadUriParameter = new GenerateUploadUriParameter();
        generateUploadUriParameter.withBlobName(blobName);
        return service.generateUploadUri(this.client.subscriptionId(), resourceGroupName, name, this.client.apiVersion(), this.client.acceptLanguage(), generateUploadUriParameter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GenerateUploadUriResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<GenerateUploadUriResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GenerateUploadUriResponseInner> clientResponse = generateUploadUriDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GenerateUploadUriResponseInner> generateUploadUriDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GenerateUploadUriResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GenerateUploadUriResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabVhdInner&gt; object if successful.
     */
    public PagedList<LabVhdInner> listVhds(final String resourceGroupName, final String name) {
        ServiceResponse<Page<LabVhdInner>> response = listVhdsSinglePageAsync(resourceGroupName, name).toBlocking().single();
        return new PagedList<LabVhdInner>(response.body()) {
            @Override
            public Page<LabVhdInner> nextPage(String nextPageLink) {
                return listVhdsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabVhdInner>> listVhdsAsync(final String resourceGroupName, final String name, final ListOperationCallback<LabVhdInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVhdsSinglePageAsync(resourceGroupName, name),
            new Func1<String, Observable<ServiceResponse<Page<LabVhdInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabVhdInner>>> call(String nextPageLink) {
                    return listVhdsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabVhdInner&gt; object
     */
    public Observable<Page<LabVhdInner>> listVhdsAsync(final String resourceGroupName, final String name) {
        return listVhdsWithServiceResponseAsync(resourceGroupName, name)
            .map(new Func1<ServiceResponse<Page<LabVhdInner>>, Page<LabVhdInner>>() {
                @Override
                public Page<LabVhdInner> call(ServiceResponse<Page<LabVhdInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabVhdInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabVhdInner>>> listVhdsWithServiceResponseAsync(final String resourceGroupName, final String name) {
        return listVhdsSinglePageAsync(resourceGroupName, name)
            .concatMap(new Func1<ServiceResponse<Page<LabVhdInner>>, Observable<ServiceResponse<Page<LabVhdInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabVhdInner>>> call(ServiceResponse<Page<LabVhdInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVhdsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List disk images available for custom image creation.
     *
    ServiceResponse<PageImpl<LabVhdInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<LabVhdInner>> * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabVhdInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabVhdInner>>> listVhdsSinglePageAsync(final String resourceGroupName, final String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listVhds(this.client.subscriptionId(), resourceGroupName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabVhdInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabVhdInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabVhdInner>> result = listVhdsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabVhdInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabVhdInner>> listVhdsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabVhdInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabVhdInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List labs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabInner&gt; object if successful.
     */
    public PagedList<LabInner> listBySubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<LabInner>> response = listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<LabInner>(response.body()) {
            @Override
            public Page<LabInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List labs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabInner>> listBySubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<LabInner>> serviceFuture, final ListOperationCallback<LabInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List labs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<Page<LabInner>> listBySubscriptionNextAsync(final String nextPageLink) {
        return listBySubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<LabInner>>, Page<LabInner>>() {
                @Override
                public Page<LabInner> call(ServiceResponse<Page<LabInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List labs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabInner>>> listBySubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listBySubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<LabInner>>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(ServiceResponse<Page<LabInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List labs in a subscription.
     *
    ServiceResponse<PageImpl<LabInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabInner>>> listBySubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBySubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabInner>> result = listBySubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabInner>> listBySubscriptionNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List labs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabInner&gt; object if successful.
     */
    public PagedList<LabInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<LabInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<LabInner>(response.body()) {
            @Override
            public Page<LabInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List labs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<LabInner>> serviceFuture, final ListOperationCallback<LabInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List labs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<Page<LabInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<LabInner>>, Page<LabInner>>() {
                @Override
                public Page<LabInner> call(ServiceResponse<Page<LabInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List labs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<LabInner>>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(ServiceResponse<Page<LabInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List labs in a resource group.
     *
    ServiceResponse<PageImpl<LabInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabVhdInner&gt; object if successful.
     */
    public PagedList<LabVhdInner> listVhdsNext(final String nextPageLink) {
        ServiceResponse<Page<LabVhdInner>> response = listVhdsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<LabVhdInner>(response.body()) {
            @Override
            public Page<LabVhdInner> nextPage(String nextPageLink) {
                return listVhdsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabVhdInner>> listVhdsNextAsync(final String nextPageLink, final ServiceFuture<List<LabVhdInner>> serviceFuture, final ListOperationCallback<LabVhdInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVhdsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<LabVhdInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabVhdInner>>> call(String nextPageLink) {
                    return listVhdsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabVhdInner&gt; object
     */
    public Observable<Page<LabVhdInner>> listVhdsNextAsync(final String nextPageLink) {
        return listVhdsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<LabVhdInner>>, Page<LabVhdInner>>() {
                @Override
                public Page<LabVhdInner> call(ServiceResponse<Page<LabVhdInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List disk images available for custom image creation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabVhdInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabVhdInner>>> listVhdsNextWithServiceResponseAsync(final String nextPageLink) {
        return listVhdsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<LabVhdInner>>, Observable<ServiceResponse<Page<LabVhdInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabVhdInner>>> call(ServiceResponse<Page<LabVhdInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVhdsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List disk images available for custom image creation.
     *
    ServiceResponse<PageImpl<LabVhdInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabVhdInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabVhdInner>>> listVhdsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listVhdsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabVhdInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabVhdInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabVhdInner>> result = listVhdsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabVhdInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabVhdInner>> listVhdsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabVhdInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabVhdInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
