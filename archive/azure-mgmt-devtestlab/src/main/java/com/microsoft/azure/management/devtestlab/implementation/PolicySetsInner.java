/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.devtestlab.EvaluatePoliciesRequest;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PolicySets.
 */
public class PolicySetsInner {
    /** The Retrofit service to perform REST calls. */
    private PolicySetsService service;
    /** The service client containing this operation class. */
    private DevTestLabsClientImpl client;

    /**
     * Initializes an instance of PolicySetsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PolicySetsInner(Retrofit retrofit, DevTestLabsClientImpl client) {
        this.service = retrofit.create(PolicySetsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicySets to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PolicySetsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devtestlab.PolicySets evaluatePolicies" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{name}/evaluatePolicies")
        Observable<Response<ResponseBody>> evaluatePolicies(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labName") String labName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body EvaluatePoliciesRequest evaluatePoliciesRequest, @Header("User-Agent") String userAgent);

    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EvaluatePoliciesResponseInner object if successful.
     */
    public EvaluatePoliciesResponseInner evaluatePolicies(String resourceGroupName, String labName, String name) {
        return evaluatePoliciesWithServiceResponseAsync(resourceGroupName, labName, name).toBlocking().single().body();
    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EvaluatePoliciesResponseInner> evaluatePoliciesAsync(String resourceGroupName, String labName, String name, final ServiceCallback<EvaluatePoliciesResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(evaluatePoliciesWithServiceResponseAsync(resourceGroupName, labName, name), serviceCallback);
    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EvaluatePoliciesResponseInner object
     */
    public Observable<EvaluatePoliciesResponseInner> evaluatePoliciesAsync(String resourceGroupName, String labName, String name) {
        return evaluatePoliciesWithServiceResponseAsync(resourceGroupName, labName, name).map(new Func1<ServiceResponse<EvaluatePoliciesResponseInner>, EvaluatePoliciesResponseInner>() {
            @Override
            public EvaluatePoliciesResponseInner call(ServiceResponse<EvaluatePoliciesResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EvaluatePoliciesResponseInner object
     */
    public Observable<ServiceResponse<EvaluatePoliciesResponseInner>> evaluatePoliciesWithServiceResponseAsync(String resourceGroupName, String labName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final List<EvaluatePoliciesPropertiesInner> policies = null;
        EvaluatePoliciesRequest evaluatePoliciesRequest = new EvaluatePoliciesRequest();
        evaluatePoliciesRequest.withPolicies(null);
        return service.evaluatePolicies(this.client.subscriptionId(), resourceGroupName, labName, name, this.client.apiVersion(), this.client.acceptLanguage(), evaluatePoliciesRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EvaluatePoliciesResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<EvaluatePoliciesResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EvaluatePoliciesResponseInner> clientResponse = evaluatePoliciesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @param policies Policies to evaluate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EvaluatePoliciesResponseInner object if successful.
     */
    public EvaluatePoliciesResponseInner evaluatePolicies(String resourceGroupName, String labName, String name, List<EvaluatePoliciesPropertiesInner> policies) {
        return evaluatePoliciesWithServiceResponseAsync(resourceGroupName, labName, name, policies).toBlocking().single().body();
    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @param policies Policies to evaluate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EvaluatePoliciesResponseInner> evaluatePoliciesAsync(String resourceGroupName, String labName, String name, List<EvaluatePoliciesPropertiesInner> policies, final ServiceCallback<EvaluatePoliciesResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(evaluatePoliciesWithServiceResponseAsync(resourceGroupName, labName, name, policies), serviceCallback);
    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @param policies Policies to evaluate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EvaluatePoliciesResponseInner object
     */
    public Observable<EvaluatePoliciesResponseInner> evaluatePoliciesAsync(String resourceGroupName, String labName, String name, List<EvaluatePoliciesPropertiesInner> policies) {
        return evaluatePoliciesWithServiceResponseAsync(resourceGroupName, labName, name, policies).map(new Func1<ServiceResponse<EvaluatePoliciesResponseInner>, EvaluatePoliciesResponseInner>() {
            @Override
            public EvaluatePoliciesResponseInner call(ServiceResponse<EvaluatePoliciesResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Evaluates lab policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @param policies Policies to evaluate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EvaluatePoliciesResponseInner object
     */
    public Observable<ServiceResponse<EvaluatePoliciesResponseInner>> evaluatePoliciesWithServiceResponseAsync(String resourceGroupName, String labName, String name, List<EvaluatePoliciesPropertiesInner> policies) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(policies);
        EvaluatePoliciesRequest evaluatePoliciesRequest = new EvaluatePoliciesRequest();
        evaluatePoliciesRequest.withPolicies(policies);
        return service.evaluatePolicies(this.client.subscriptionId(), resourceGroupName, labName, name, this.client.apiVersion(), this.client.acceptLanguage(), evaluatePoliciesRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EvaluatePoliciesResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<EvaluatePoliciesResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EvaluatePoliciesResponseInner> clientResponse = evaluatePoliciesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EvaluatePoliciesResponseInner> evaluatePoliciesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EvaluatePoliciesResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EvaluatePoliciesResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
