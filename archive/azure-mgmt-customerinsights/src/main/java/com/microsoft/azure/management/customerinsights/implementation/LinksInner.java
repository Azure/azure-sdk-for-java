/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.customerinsights.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Links.
 */
public class LinksInner {
    /** The Retrofit service to perform REST calls. */
    private LinksService service;
    /** The service client containing this operation class. */
    private CustomerInsightsManagementClientImpl client;

    /**
     * Initializes an instance of LinksInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LinksInner(Retrofit retrofit, CustomerInsightsManagementClientImpl client) {
        this.service = retrofit.create(LinksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Links to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LinksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Links createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("linkName") String linkName, @Path("subscriptionId") String subscriptionId, @Body LinkResourceFormatInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Links beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("linkName") String linkName, @Path("subscriptionId") String subscriptionId, @Body LinkResourceFormatInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Links get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("linkName") String linkName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Links delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("linkName") String linkName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Links listByHub" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links")
        Observable<Response<ResponseBody>> listByHub(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Links listByHubNext" })
        @GET
        Observable<Response<ResponseBody>> listByHubNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LinkResourceFormatInner object if successful.
     */
    public LinkResourceFormatInner createOrUpdate(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, linkName, parameters).toBlocking().last().body();
    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LinkResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters, final ServiceCallback<LinkResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, linkName, parameters), serviceCallback);
    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<LinkResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, linkName, parameters).map(new Func1<ServiceResponse<LinkResourceFormatInner>, LinkResourceFormatInner>() {
            @Override
            public LinkResourceFormatInner call(ServiceResponse<LinkResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<LinkResourceFormatInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (linkName == null) {
            throw new IllegalArgumentException("Parameter linkName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, hubName, linkName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<LinkResourceFormatInner>() { }.getType());
    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LinkResourceFormatInner object if successful.
     */
    public LinkResourceFormatInner beginCreateOrUpdate(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, linkName, parameters).toBlocking().single().body();
    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LinkResourceFormatInner> beginCreateOrUpdateAsync(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters, final ServiceCallback<LinkResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, linkName, parameters), serviceCallback);
    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkResourceFormatInner object
     */
    public Observable<LinkResourceFormatInner> beginCreateOrUpdateAsync(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, linkName, parameters).map(new Func1<ServiceResponse<LinkResourceFormatInner>, LinkResourceFormatInner>() {
            @Override
            public LinkResourceFormatInner call(ServiceResponse<LinkResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkResourceFormatInner object
     */
    public Observable<ServiceResponse<LinkResourceFormatInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String hubName, String linkName, LinkResourceFormatInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (linkName == null) {
            throw new IllegalArgumentException("Parameter linkName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(resourceGroupName, hubName, linkName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LinkResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<LinkResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LinkResourceFormatInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LinkResourceFormatInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LinkResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LinkResourceFormatInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LinkResourceFormatInner object if successful.
     */
    public LinkResourceFormatInner get(String resourceGroupName, String hubName, String linkName) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, linkName).toBlocking().single().body();
    }

    /**
     * Gets a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LinkResourceFormatInner> getAsync(String resourceGroupName, String hubName, String linkName, final ServiceCallback<LinkResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, hubName, linkName), serviceCallback);
    }

    /**
     * Gets a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkResourceFormatInner object
     */
    public Observable<LinkResourceFormatInner> getAsync(String resourceGroupName, String hubName, String linkName) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, linkName).map(new Func1<ServiceResponse<LinkResourceFormatInner>, LinkResourceFormatInner>() {
            @Override
            public LinkResourceFormatInner call(ServiceResponse<LinkResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkResourceFormatInner object
     */
    public Observable<ServiceResponse<LinkResourceFormatInner>> getWithServiceResponseAsync(String resourceGroupName, String hubName, String linkName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (linkName == null) {
            throw new IllegalArgumentException("Parameter linkName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, hubName, linkName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LinkResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<LinkResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LinkResourceFormatInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LinkResourceFormatInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LinkResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LinkResourceFormatInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String hubName, String linkName) {
        deleteWithServiceResponseAsync(resourceGroupName, hubName, linkName).toBlocking().single().body();
    }

    /**
     * Deletes a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String hubName, String linkName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, hubName, linkName), serviceCallback);
    }

    /**
     * Deletes a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String hubName, String linkName) {
        return deleteWithServiceResponseAsync(resourceGroupName, hubName, linkName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a link in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String hubName, String linkName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (linkName == null) {
            throw new IllegalArgumentException("Parameter linkName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, hubName, linkName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LinkResourceFormatInner&gt; object if successful.
     */
    public PagedList<LinkResourceFormatInner> listByHub(final String resourceGroupName, final String hubName) {
        ServiceResponse<Page<LinkResourceFormatInner>> response = listByHubSinglePageAsync(resourceGroupName, hubName).toBlocking().single();
        return new PagedList<LinkResourceFormatInner>(response.body()) {
            @Override
            public Page<LinkResourceFormatInner> nextPage(String nextPageLink) {
                return listByHubNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LinkResourceFormatInner>> listByHubAsync(final String resourceGroupName, final String hubName, final ListOperationCallback<LinkResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByHubSinglePageAsync(resourceGroupName, hubName),
            new Func1<String, Observable<ServiceResponse<Page<LinkResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> call(String nextPageLink) {
                    return listByHubNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LinkResourceFormatInner&gt; object
     */
    public Observable<Page<LinkResourceFormatInner>> listByHubAsync(final String resourceGroupName, final String hubName) {
        return listByHubWithServiceResponseAsync(resourceGroupName, hubName)
            .map(new Func1<ServiceResponse<Page<LinkResourceFormatInner>>, Page<LinkResourceFormatInner>>() {
                @Override
                public Page<LinkResourceFormatInner> call(ServiceResponse<Page<LinkResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LinkResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> listByHubWithServiceResponseAsync(final String resourceGroupName, final String hubName) {
        return listByHubSinglePageAsync(resourceGroupName, hubName)
            .concatMap(new Func1<ServiceResponse<Page<LinkResourceFormatInner>>, Observable<ServiceResponse<Page<LinkResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> call(ServiceResponse<Page<LinkResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByHubNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the links in the specified hub.
     *
    ServiceResponse<PageImpl<LinkResourceFormatInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<LinkResourceFormatInner>> * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LinkResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> listByHubSinglePageAsync(final String resourceGroupName, final String hubName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByHub(resourceGroupName, hubName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LinkResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LinkResourceFormatInner>> result = listByHubDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LinkResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LinkResourceFormatInner>> listByHubDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LinkResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LinkResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LinkResourceFormatInner&gt; object if successful.
     */
    public PagedList<LinkResourceFormatInner> listByHubNext(final String nextPageLink) {
        ServiceResponse<Page<LinkResourceFormatInner>> response = listByHubNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<LinkResourceFormatInner>(response.body()) {
            @Override
            public Page<LinkResourceFormatInner> nextPage(String nextPageLink) {
                return listByHubNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LinkResourceFormatInner>> listByHubNextAsync(final String nextPageLink, final ServiceFuture<List<LinkResourceFormatInner>> serviceFuture, final ListOperationCallback<LinkResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByHubNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<LinkResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> call(String nextPageLink) {
                    return listByHubNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LinkResourceFormatInner&gt; object
     */
    public Observable<Page<LinkResourceFormatInner>> listByHubNextAsync(final String nextPageLink) {
        return listByHubNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<LinkResourceFormatInner>>, Page<LinkResourceFormatInner>>() {
                @Override
                public Page<LinkResourceFormatInner> call(ServiceResponse<Page<LinkResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the links in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LinkResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> listByHubNextWithServiceResponseAsync(final String nextPageLink) {
        return listByHubNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<LinkResourceFormatInner>>, Observable<ServiceResponse<Page<LinkResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> call(ServiceResponse<Page<LinkResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByHubNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the links in the specified hub.
     *
    ServiceResponse<PageImpl<LinkResourceFormatInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LinkResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> listByHubNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByHubNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LinkResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LinkResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LinkResourceFormatInner>> result = listByHubNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LinkResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LinkResourceFormatInner>> listByHubNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LinkResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LinkResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
