/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.customerinsights.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Views.
 */
public class ViewsInner {
    /** The Retrofit service to perform REST calls. */
    private ViewsService service;
    /** The service client containing this operation class. */
    private CustomerInsightsManagementClientImpl client;

    /**
     * Initializes an instance of ViewsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ViewsInner(Retrofit retrofit, CustomerInsightsManagementClientImpl client) {
        this.service = retrofit.create(ViewsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Views to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ViewsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Views listByHub" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views")
        Observable<Response<ResponseBody>> listByHub(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("userId") String userId, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Views createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("viewName") String viewName, @Path("subscriptionId") String subscriptionId, @Body ViewResourceFormatInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Views get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("viewName") String viewName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("userId") String userId, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Views delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("viewName") String viewName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("userId") String userId, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.Views listByHubNext" })
        @GET
        Observable<Response<ResponseBody>> listByHubNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param userId The user ID. Use * to retreive hub level views.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ViewResourceFormatInner&gt; object if successful.
     */
    public PagedList<ViewResourceFormatInner> listByHub(final String resourceGroupName, final String hubName, final String userId) {
        ServiceResponse<Page<ViewResourceFormatInner>> response = listByHubSinglePageAsync(resourceGroupName, hubName, userId).toBlocking().single();
        return new PagedList<ViewResourceFormatInner>(response.body()) {
            @Override
            public Page<ViewResourceFormatInner> nextPage(String nextPageLink) {
                return listByHubNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param userId The user ID. Use * to retreive hub level views.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ViewResourceFormatInner>> listByHubAsync(final String resourceGroupName, final String hubName, final String userId, final ListOperationCallback<ViewResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByHubSinglePageAsync(resourceGroupName, hubName, userId),
            new Func1<String, Observable<ServiceResponse<Page<ViewResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> call(String nextPageLink) {
                    return listByHubNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param userId The user ID. Use * to retreive hub level views.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ViewResourceFormatInner&gt; object
     */
    public Observable<Page<ViewResourceFormatInner>> listByHubAsync(final String resourceGroupName, final String hubName, final String userId) {
        return listByHubWithServiceResponseAsync(resourceGroupName, hubName, userId)
            .map(new Func1<ServiceResponse<Page<ViewResourceFormatInner>>, Page<ViewResourceFormatInner>>() {
                @Override
                public Page<ViewResourceFormatInner> call(ServiceResponse<Page<ViewResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param userId The user ID. Use * to retreive hub level views.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ViewResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> listByHubWithServiceResponseAsync(final String resourceGroupName, final String hubName, final String userId) {
        return listByHubSinglePageAsync(resourceGroupName, hubName, userId)
            .concatMap(new Func1<ServiceResponse<Page<ViewResourceFormatInner>>, Observable<ServiceResponse<Page<ViewResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> call(ServiceResponse<Page<ViewResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByHubNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
    ServiceResponse<PageImpl<ViewResourceFormatInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ViewResourceFormatInner>> * @param hubName The name of the hub.
    ServiceResponse<PageImpl<ViewResourceFormatInner>> * @param userId The user ID. Use * to retreive hub level views.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ViewResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> listByHubSinglePageAsync(final String resourceGroupName, final String hubName, final String userId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (userId == null) {
            throw new IllegalArgumentException("Parameter userId is required and cannot be null.");
        }
        return service.listByHub(resourceGroupName, hubName, this.client.subscriptionId(), this.client.apiVersion(), userId, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ViewResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ViewResourceFormatInner>> result = listByHubDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ViewResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ViewResourceFormatInner>> listByHubDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ViewResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ViewResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a view or updates an exisiting view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ViewResourceFormatInner object if successful.
     */
    public ViewResourceFormatInner createOrUpdate(String resourceGroupName, String hubName, String viewName, ViewResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, viewName, parameters).toBlocking().single().body();
    }

    /**
     * Creates a view or updates an exisiting view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ViewResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String viewName, ViewResourceFormatInner parameters, final ServiceCallback<ViewResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, viewName, parameters), serviceCallback);
    }

    /**
     * Creates a view or updates an exisiting view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ViewResourceFormatInner object
     */
    public Observable<ViewResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String viewName, ViewResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, viewName, parameters).map(new Func1<ServiceResponse<ViewResourceFormatInner>, ViewResourceFormatInner>() {
            @Override
            public ViewResourceFormatInner call(ServiceResponse<ViewResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a view or updates an exisiting view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ViewResourceFormatInner object
     */
    public Observable<ServiceResponse<ViewResourceFormatInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String hubName, String viewName, ViewResourceFormatInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (viewName == null) {
            throw new IllegalArgumentException("Parameter viewName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, hubName, viewName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ViewResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<ViewResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ViewResourceFormatInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ViewResourceFormatInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ViewResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ViewResourceFormatInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ViewResourceFormatInner object if successful.
     */
    public ViewResourceFormatInner get(String resourceGroupName, String hubName, String viewName, String userId) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, viewName, userId).toBlocking().single().body();
    }

    /**
     * Gets a view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ViewResourceFormatInner> getAsync(String resourceGroupName, String hubName, String viewName, String userId, final ServiceCallback<ViewResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, hubName, viewName, userId), serviceCallback);
    }

    /**
     * Gets a view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ViewResourceFormatInner object
     */
    public Observable<ViewResourceFormatInner> getAsync(String resourceGroupName, String hubName, String viewName, String userId) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, viewName, userId).map(new Func1<ServiceResponse<ViewResourceFormatInner>, ViewResourceFormatInner>() {
            @Override
            public ViewResourceFormatInner call(ServiceResponse<ViewResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a view in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ViewResourceFormatInner object
     */
    public Observable<ServiceResponse<ViewResourceFormatInner>> getWithServiceResponseAsync(String resourceGroupName, String hubName, String viewName, String userId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (viewName == null) {
            throw new IllegalArgumentException("Parameter viewName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (userId == null) {
            throw new IllegalArgumentException("Parameter userId is required and cannot be null.");
        }
        return service.get(resourceGroupName, hubName, viewName, this.client.subscriptionId(), this.client.apiVersion(), userId, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ViewResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<ViewResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ViewResourceFormatInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ViewResourceFormatInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ViewResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ViewResourceFormatInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a view in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String hubName, String viewName, String userId) {
        deleteWithServiceResponseAsync(resourceGroupName, hubName, viewName, userId).toBlocking().single().body();
    }

    /**
     * Deletes a view in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String hubName, String viewName, String userId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, hubName, viewName, userId), serviceCallback);
    }

    /**
     * Deletes a view in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String hubName, String viewName, String userId) {
        return deleteWithServiceResponseAsync(resourceGroupName, hubName, viewName, userId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a view in the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retreive hub level view.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String hubName, String viewName, String userId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (viewName == null) {
            throw new IllegalArgumentException("Parameter viewName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (userId == null) {
            throw new IllegalArgumentException("Parameter userId is required and cannot be null.");
        }
        return service.delete(resourceGroupName, hubName, viewName, this.client.subscriptionId(), this.client.apiVersion(), userId, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ViewResourceFormatInner&gt; object if successful.
     */
    public PagedList<ViewResourceFormatInner> listByHubNext(final String nextPageLink) {
        ServiceResponse<Page<ViewResourceFormatInner>> response = listByHubNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ViewResourceFormatInner>(response.body()) {
            @Override
            public Page<ViewResourceFormatInner> nextPage(String nextPageLink) {
                return listByHubNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ViewResourceFormatInner>> listByHubNextAsync(final String nextPageLink, final ServiceFuture<List<ViewResourceFormatInner>> serviceFuture, final ListOperationCallback<ViewResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByHubNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ViewResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> call(String nextPageLink) {
                    return listByHubNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ViewResourceFormatInner&gt; object
     */
    public Observable<Page<ViewResourceFormatInner>> listByHubNextAsync(final String nextPageLink) {
        return listByHubNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ViewResourceFormatInner>>, Page<ViewResourceFormatInner>>() {
                @Override
                public Page<ViewResourceFormatInner> call(ServiceResponse<Page<ViewResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ViewResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> listByHubNextWithServiceResponseAsync(final String nextPageLink) {
        return listByHubNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ViewResourceFormatInner>>, Observable<ServiceResponse<Page<ViewResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> call(ServiceResponse<Page<ViewResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByHubNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all available views for given user in the specified hub.
     *
    ServiceResponse<PageImpl<ViewResourceFormatInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ViewResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> listByHubNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByHubNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ViewResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ViewResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ViewResourceFormatInner>> result = listByHubNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ViewResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ViewResourceFormatInner>> listByHubNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ViewResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ViewResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
