/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.customerinsights;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The connector mapping properties.
 */
public class ConnectorMappingProperties {
    /**
     * The folder path for the mapping.
     */
    @JsonProperty(value = "folderPath")
    private String folderPath;

    /**
     * The file filter for the mapping.
     */
    @JsonProperty(value = "fileFilter")
    private String fileFilter;

    /**
     * If the file contains a header or not.
     */
    @JsonProperty(value = "hasHeader")
    private Boolean hasHeader;

    /**
     * The error management setting for the mapping.
     */
    @JsonProperty(value = "errorManagement", required = true)
    private ConnectorMappingErrorManagement errorManagement;

    /**
     * The format of mapping property.
     */
    @JsonProperty(value = "format", required = true)
    private ConnectorMappingFormat format;

    /**
     * The availability of mapping property.
     */
    @JsonProperty(value = "availability", required = true)
    private ConnectorMappingAvailability availability;

    /**
     * Ingestion mapping information at property level.
     */
    @JsonProperty(value = "structure", required = true)
    private List<ConnectorMappingStructure> structure;

    /**
     * The operation after import is done.
     */
    @JsonProperty(value = "completeOperation", required = true)
    private ConnectorMappingCompleteOperation completeOperation;

    /**
     * Get the folderPath value.
     *
     * @return the folderPath value
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Set the folderPath value.
     *
     * @param folderPath the folderPath value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withFolderPath(String folderPath) {
        this.folderPath = folderPath;
        return this;
    }

    /**
     * Get the fileFilter value.
     *
     * @return the fileFilter value
     */
    public String fileFilter() {
        return this.fileFilter;
    }

    /**
     * Set the fileFilter value.
     *
     * @param fileFilter the fileFilter value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withFileFilter(String fileFilter) {
        this.fileFilter = fileFilter;
        return this;
    }

    /**
     * Get the hasHeader value.
     *
     * @return the hasHeader value
     */
    public Boolean hasHeader() {
        return this.hasHeader;
    }

    /**
     * Set the hasHeader value.
     *
     * @param hasHeader the hasHeader value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withHasHeader(Boolean hasHeader) {
        this.hasHeader = hasHeader;
        return this;
    }

    /**
     * Get the errorManagement value.
     *
     * @return the errorManagement value
     */
    public ConnectorMappingErrorManagement errorManagement() {
        return this.errorManagement;
    }

    /**
     * Set the errorManagement value.
     *
     * @param errorManagement the errorManagement value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withErrorManagement(ConnectorMappingErrorManagement errorManagement) {
        this.errorManagement = errorManagement;
        return this;
    }

    /**
     * Get the format value.
     *
     * @return the format value
     */
    public ConnectorMappingFormat format() {
        return this.format;
    }

    /**
     * Set the format value.
     *
     * @param format the format value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withFormat(ConnectorMappingFormat format) {
        this.format = format;
        return this;
    }

    /**
     * Get the availability value.
     *
     * @return the availability value
     */
    public ConnectorMappingAvailability availability() {
        return this.availability;
    }

    /**
     * Set the availability value.
     *
     * @param availability the availability value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withAvailability(ConnectorMappingAvailability availability) {
        this.availability = availability;
        return this;
    }

    /**
     * Get the structure value.
     *
     * @return the structure value
     */
    public List<ConnectorMappingStructure> structure() {
        return this.structure;
    }

    /**
     * Set the structure value.
     *
     * @param structure the structure value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withStructure(List<ConnectorMappingStructure> structure) {
        this.structure = structure;
        return this;
    }

    /**
     * Get the completeOperation value.
     *
     * @return the completeOperation value
     */
    public ConnectorMappingCompleteOperation completeOperation() {
        return this.completeOperation;
    }

    /**
     * Set the completeOperation value.
     *
     * @param completeOperation the completeOperation value to set
     * @return the ConnectorMappingProperties object itself.
     */
    public ConnectorMappingProperties withCompleteOperation(ConnectorMappingCompleteOperation completeOperation) {
        this.completeOperation = completeOperation;
        return this;
    }

}
