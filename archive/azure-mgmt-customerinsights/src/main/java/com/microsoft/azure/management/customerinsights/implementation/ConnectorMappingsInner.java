/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.customerinsights.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ConnectorMappings.
 */
public class ConnectorMappingsInner {
    /** The Retrofit service to perform REST calls. */
    private ConnectorMappingsService service;
    /** The service client containing this operation class. */
    private CustomerInsightsManagementClientImpl client;

    /**
     * Initializes an instance of ConnectorMappingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConnectorMappingsInner(Retrofit retrofit, CustomerInsightsManagementClientImpl client) {
        this.service = retrofit.create(ConnectorMappingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ConnectorMappings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConnectorMappingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.ConnectorMappings createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("connectorName") String connectorName, @Path("mappingName") String mappingName, @Path("subscriptionId") String subscriptionId, @Body ConnectorMappingResourceFormatInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.ConnectorMappings get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("connectorName") String connectorName, @Path("mappingName") String mappingName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.ConnectorMappings delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("connectorName") String connectorName, @Path("mappingName") String mappingName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.ConnectorMappings listByConnector" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings")
        Observable<Response<ResponseBody>> listByConnector(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("connectorName") String connectorName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.ConnectorMappings listByConnectorNext" })
        @GET
        Observable<Response<ResponseBody>> listByConnectorNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectorMappingResourceFormatInner object if successful.
     */
    public ConnectorMappingResourceFormatInner createOrUpdate(String resourceGroupName, String hubName, String connectorName, String mappingName, ConnectorMappingResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName, parameters).toBlocking().single().body();
    }

    /**
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectorMappingResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, ConnectorMappingResourceFormatInner parameters, final ServiceCallback<ConnectorMappingResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName, parameters), serviceCallback);
    }

    /**
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectorMappingResourceFormatInner object
     */
    public Observable<ConnectorMappingResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, ConnectorMappingResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName, parameters).map(new Func1<ServiceResponse<ConnectorMappingResourceFormatInner>, ConnectorMappingResourceFormatInner>() {
            @Override
            public ConnectorMappingResourceFormatInner call(ServiceResponse<ConnectorMappingResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectorMappingResourceFormatInner object
     */
    public Observable<ServiceResponse<ConnectorMappingResourceFormatInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, ConnectorMappingResourceFormatInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (connectorName == null) {
            throw new IllegalArgumentException("Parameter connectorName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, hubName, connectorName, mappingName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectorMappingResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectorMappingResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectorMappingResourceFormatInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectorMappingResourceFormatInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectorMappingResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectorMappingResourceFormatInner>() { }.getType())
                .register(201, new TypeToken<ConnectorMappingResourceFormatInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectorMappingResourceFormatInner object if successful.
     */
    public ConnectorMappingResourceFormatInner get(String resourceGroupName, String hubName, String connectorName, String mappingName) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName).toBlocking().single().body();
    }

    /**
     * Gets a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectorMappingResourceFormatInner> getAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, final ServiceCallback<ConnectorMappingResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName), serviceCallback);
    }

    /**
     * Gets a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectorMappingResourceFormatInner object
     */
    public Observable<ConnectorMappingResourceFormatInner> getAsync(String resourceGroupName, String hubName, String connectorName, String mappingName) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName).map(new Func1<ServiceResponse<ConnectorMappingResourceFormatInner>, ConnectorMappingResourceFormatInner>() {
            @Override
            public ConnectorMappingResourceFormatInner call(ServiceResponse<ConnectorMappingResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectorMappingResourceFormatInner object
     */
    public Observable<ServiceResponse<ConnectorMappingResourceFormatInner>> getWithServiceResponseAsync(String resourceGroupName, String hubName, String connectorName, String mappingName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (connectorName == null) {
            throw new IllegalArgumentException("Parameter connectorName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, hubName, connectorName, mappingName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectorMappingResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectorMappingResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectorMappingResourceFormatInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectorMappingResourceFormatInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectorMappingResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectorMappingResourceFormatInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String hubName, String connectorName, String mappingName) {
        deleteWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName).toBlocking().single().body();
    }

    /**
     * Deletes a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName), serviceCallback);
    }

    /**
     * Deletes a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String hubName, String connectorName, String mappingName) {
        return deleteWithServiceResponseAsync(resourceGroupName, hubName, connectorName, mappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a connector mapping in the connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String hubName, String connectorName, String mappingName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (connectorName == null) {
            throw new IllegalArgumentException("Parameter connectorName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, hubName, connectorName, mappingName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object if successful.
     */
    public PagedList<ConnectorMappingResourceFormatInner> listByConnector(final String resourceGroupName, final String hubName, final String connectorName) {
        ServiceResponse<Page<ConnectorMappingResourceFormatInner>> response = listByConnectorSinglePageAsync(resourceGroupName, hubName, connectorName).toBlocking().single();
        return new PagedList<ConnectorMappingResourceFormatInner>(response.body()) {
            @Override
            public Page<ConnectorMappingResourceFormatInner> nextPage(String nextPageLink) {
                return listByConnectorNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectorMappingResourceFormatInner>> listByConnectorAsync(final String resourceGroupName, final String hubName, final String connectorName, final ListOperationCallback<ConnectorMappingResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByConnectorSinglePageAsync(resourceGroupName, hubName, connectorName),
            new Func1<String, Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> call(String nextPageLink) {
                    return listByConnectorNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object
     */
    public Observable<Page<ConnectorMappingResourceFormatInner>> listByConnectorAsync(final String resourceGroupName, final String hubName, final String connectorName) {
        return listByConnectorWithServiceResponseAsync(resourceGroupName, hubName, connectorName)
            .map(new Func1<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>, Page<ConnectorMappingResourceFormatInner>>() {
                @Override
                public Page<ConnectorMappingResourceFormatInner> call(ServiceResponse<Page<ConnectorMappingResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> listByConnectorWithServiceResponseAsync(final String resourceGroupName, final String hubName, final String connectorName) {
        return listByConnectorSinglePageAsync(resourceGroupName, hubName, connectorName)
            .concatMap(new Func1<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>, Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> call(ServiceResponse<Page<ConnectorMappingResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByConnectorNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
    ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> * @param hubName The name of the hub.
    ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> listByConnectorSinglePageAsync(final String resourceGroupName, final String hubName, final String connectorName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (connectorName == null) {
            throw new IllegalArgumentException("Parameter connectorName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByConnector(resourceGroupName, hubName, connectorName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> result = listByConnectorDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectorMappingResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> listByConnectorDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectorMappingResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectorMappingResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object if successful.
     */
    public PagedList<ConnectorMappingResourceFormatInner> listByConnectorNext(final String nextPageLink) {
        ServiceResponse<Page<ConnectorMappingResourceFormatInner>> response = listByConnectorNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConnectorMappingResourceFormatInner>(response.body()) {
            @Override
            public Page<ConnectorMappingResourceFormatInner> nextPage(String nextPageLink) {
                return listByConnectorNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectorMappingResourceFormatInner>> listByConnectorNextAsync(final String nextPageLink, final ServiceFuture<List<ConnectorMappingResourceFormatInner>> serviceFuture, final ListOperationCallback<ConnectorMappingResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByConnectorNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> call(String nextPageLink) {
                    return listByConnectorNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object
     */
    public Observable<Page<ConnectorMappingResourceFormatInner>> listByConnectorNextAsync(final String nextPageLink) {
        return listByConnectorNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>, Page<ConnectorMappingResourceFormatInner>>() {
                @Override
                public Page<ConnectorMappingResourceFormatInner> call(ServiceResponse<Page<ConnectorMappingResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> listByConnectorNextWithServiceResponseAsync(final String nextPageLink) {
        return listByConnectorNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>, Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> call(ServiceResponse<Page<ConnectorMappingResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByConnectorNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the connector mappings in the specified connector.
     *
    ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectorMappingResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> listByConnectorNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByConnectorNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectorMappingResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> result = listByConnectorNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectorMappingResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectorMappingResourceFormatInner>> listByConnectorNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectorMappingResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectorMappingResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
