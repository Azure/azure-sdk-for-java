/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.customerinsights.implementation;

import com.microsoft.azure.management.customerinsights.ConnectorTypes;
import org.joda.time.DateTime;
import com.microsoft.azure.management.customerinsights.EntityTypes;
import com.microsoft.azure.management.customerinsights.ConnectorMappingProperties;
import com.microsoft.azure.management.customerinsights.ConnectorMappingStates;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.customerinsights.ProxyResource;

/**
 * The c onnector mapping resource format.
 */
@JsonFlatten
public class ConnectorMappingResourceFormatInner extends ProxyResource {
    /**
     * The connector name.
     */
    @JsonProperty(value = "properties.connectorName", access = JsonProperty.Access.WRITE_ONLY)
    private String connectorName;

    /**
     * Type of connector. Possible values include: 'None', 'CRM', 'AzureBlob',
     * 'Salesforce', 'ExchangeOnline', 'Outbound'.
     */
    @JsonProperty(value = "properties.connectorType")
    private ConnectorTypes connectorType;

    /**
     * The created time.
     */
    @JsonProperty(value = "properties.created", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime created;

    /**
     * The last monified time.
     */
    @JsonProperty(value = "properties.lastModified", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastModified;

    /**
     * Defines which entity type the file should map to. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'.
     */
    @JsonProperty(value = "properties.entityType", required = true)
    private EntityTypes entityType;

    /**
     * The mapping entity name.
     */
    @JsonProperty(value = "properties.entityTypeName", required = true)
    private String entityTypeName;

    /**
     * The connector mapping name.
     */
    @JsonProperty(value = "properties.connectorMappingName", access = JsonProperty.Access.WRITE_ONLY)
    private String connectorMappingName;

    /**
     * Display name for the connector mapping.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /**
     * The description of the connector mapping.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /**
     * The DataFormat ID.
     */
    @JsonProperty(value = "properties.dataFormatId", access = JsonProperty.Access.WRITE_ONLY)
    private String dataFormatId;

    /**
     * The properties of the mapping.
     */
    @JsonProperty(value = "properties.mappingProperties", required = true)
    private ConnectorMappingProperties mappingProperties;

    /**
     * The next run time based on customer's settings.
     */
    @JsonProperty(value = "properties.nextRunTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime nextRunTime;

    /**
     * The RunId.
     */
    @JsonProperty(value = "properties.runId", access = JsonProperty.Access.WRITE_ONLY)
    private String runId;

    /**
     * State of connector mapping. Possible values include: 'Creating',
     * 'Created', 'Failed', 'Ready', 'Running', 'Stopped', 'Expiring'.
     */
    @JsonProperty(value = "properties.state", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectorMappingStates state;

    /**
     * The hub name.
     */
    @JsonProperty(value = "properties.tenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String tenantId;

    /**
     * Get the connectorName value.
     *
     * @return the connectorName value
     */
    public String connectorName() {
        return this.connectorName;
    }

    /**
     * Get the connectorType value.
     *
     * @return the connectorType value
     */
    public ConnectorTypes connectorType() {
        return this.connectorType;
    }

    /**
     * Set the connectorType value.
     *
     * @param connectorType the connectorType value to set
     * @return the ConnectorMappingResourceFormatInner object itself.
     */
    public ConnectorMappingResourceFormatInner withConnectorType(ConnectorTypes connectorType) {
        this.connectorType = connectorType;
        return this;
    }

    /**
     * Get the created value.
     *
     * @return the created value
     */
    public DateTime created() {
        return this.created;
    }

    /**
     * Get the lastModified value.
     *
     * @return the lastModified value
     */
    public DateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Get the entityType value.
     *
     * @return the entityType value
     */
    public EntityTypes entityType() {
        return this.entityType;
    }

    /**
     * Set the entityType value.
     *
     * @param entityType the entityType value to set
     * @return the ConnectorMappingResourceFormatInner object itself.
     */
    public ConnectorMappingResourceFormatInner withEntityType(EntityTypes entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the entityTypeName value.
     *
     * @return the entityTypeName value
     */
    public String entityTypeName() {
        return this.entityTypeName;
    }

    /**
     * Set the entityTypeName value.
     *
     * @param entityTypeName the entityTypeName value to set
     * @return the ConnectorMappingResourceFormatInner object itself.
     */
    public ConnectorMappingResourceFormatInner withEntityTypeName(String entityTypeName) {
        this.entityTypeName = entityTypeName;
        return this;
    }

    /**
     * Get the connectorMappingName value.
     *
     * @return the connectorMappingName value
     */
    public String connectorMappingName() {
        return this.connectorMappingName;
    }

    /**
     * Get the displayName value.
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName value.
     *
     * @param displayName the displayName value to set
     * @return the ConnectorMappingResourceFormatInner object itself.
     */
    public ConnectorMappingResourceFormatInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description value.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description value.
     *
     * @param description the description value to set
     * @return the ConnectorMappingResourceFormatInner object itself.
     */
    public ConnectorMappingResourceFormatInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the dataFormatId value.
     *
     * @return the dataFormatId value
     */
    public String dataFormatId() {
        return this.dataFormatId;
    }

    /**
     * Get the mappingProperties value.
     *
     * @return the mappingProperties value
     */
    public ConnectorMappingProperties mappingProperties() {
        return this.mappingProperties;
    }

    /**
     * Set the mappingProperties value.
     *
     * @param mappingProperties the mappingProperties value to set
     * @return the ConnectorMappingResourceFormatInner object itself.
     */
    public ConnectorMappingResourceFormatInner withMappingProperties(ConnectorMappingProperties mappingProperties) {
        this.mappingProperties = mappingProperties;
        return this;
    }

    /**
     * Get the nextRunTime value.
     *
     * @return the nextRunTime value
     */
    public DateTime nextRunTime() {
        return this.nextRunTime;
    }

    /**
     * Get the runId value.
     *
     * @return the runId value
     */
    public String runId() {
        return this.runId;
    }

    /**
     * Get the state value.
     *
     * @return the state value
     */
    public ConnectorMappingStates state() {
        return this.state;
    }

    /**
     * Get the tenantId value.
     *
     * @return the tenantId value
     */
    public String tenantId() {
        return this.tenantId;
    }

}
