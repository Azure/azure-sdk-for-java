/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package consumption.models;

import java.math.BigDecimal;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * A budget resource.
 */
@JsonFlatten
public class Budget extends ProxyResource {
    /**
     * The category of the budget, whether the budget tracks cost or usage.
     * Possible values include: 'Cost', 'Usage'.
     */
    @JsonProperty(value = "properties.category", required = true)
    private CategoryType category;

    /**
     * The total amount of cost to track with the budget.
     */
    @JsonProperty(value = "properties.amount", required = true)
    private BigDecimal amount;

    /**
     * The time covered by a budget. Tracking of the amount will be reset based
     * on the time grain. Possible values include: 'Monthly', 'Quarterly',
     * 'Annually'.
     */
    @JsonProperty(value = "properties.timeGrain", required = true)
    private TimeGrainType timeGrain;

    /**
     * Has start and end date of the budget. The start date must be first of
     * the month and should be less than the end date. Budget start date must
     * be on or after June 1, 2017. Future start date should not be more than
     * three months. Past start date should  be selected within the timegrain
     * preiod. There are no restrictions on the end date.
     */
    @JsonProperty(value = "properties.timePeriod", required = true)
    private BudgetTimePeriod timePeriod;

    /**
     * May be used to filter budgets by resource group, resource, or meter.
     */
    @JsonProperty(value = "properties.filters")
    private Filters filters;

    /**
     * The current amount of cost which is being tracked for a budget.
     */
    @JsonProperty(value = "properties.currentSpend", access = JsonProperty.Access.WRITE_ONLY)
    private CurrentSpend currentSpend;

    /**
     * Dictionary of notifications associated with the budget. Budget can have
     * up to five notifications.
     */
    @JsonProperty(value = "properties.notifications")
    private Map<String, Notification> notifications;

    /**
     * Get the category value.
     *
     * @return the category value
     */
    public CategoryType category() {
        return this.category;
    }

    /**
     * Set the category value.
     *
     * @param category the category value to set
     * @return the Budget object itself.
     */
    public Budget withCategory(CategoryType category) {
        this.category = category;
        return this;
    }

    /**
     * Get the amount value.
     *
     * @return the amount value
     */
    public BigDecimal amount() {
        return this.amount;
    }

    /**
     * Set the amount value.
     *
     * @param amount the amount value to set
     * @return the Budget object itself.
     */
    public Budget withAmount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get the timeGrain value.
     *
     * @return the timeGrain value
     */
    public TimeGrainType timeGrain() {
        return this.timeGrain;
    }

    /**
     * Set the timeGrain value.
     *
     * @param timeGrain the timeGrain value to set
     * @return the Budget object itself.
     */
    public Budget withTimeGrain(TimeGrainType timeGrain) {
        this.timeGrain = timeGrain;
        return this;
    }

    /**
     * Get the timePeriod value.
     *
     * @return the timePeriod value
     */
    public BudgetTimePeriod timePeriod() {
        return this.timePeriod;
    }

    /**
     * Set the timePeriod value.
     *
     * @param timePeriod the timePeriod value to set
     * @return the Budget object itself.
     */
    public Budget withTimePeriod(BudgetTimePeriod timePeriod) {
        this.timePeriod = timePeriod;
        return this;
    }

    /**
     * Get the filters value.
     *
     * @return the filters value
     */
    public Filters filters() {
        return this.filters;
    }

    /**
     * Set the filters value.
     *
     * @param filters the filters value to set
     * @return the Budget object itself.
     */
    public Budget withFilters(Filters filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Get the currentSpend value.
     *
     * @return the currentSpend value
     */
    public CurrentSpend currentSpend() {
        return this.currentSpend;
    }

    /**
     * Get the notifications value.
     *
     * @return the notifications value
     */
    public Map<String, Notification> notifications() {
        return this.notifications;
    }

    /**
     * Set the notifications value.
     *
     * @param notifications the notifications value to set
     * @return the Budget object itself.
     */
    public Budget withNotifications(Map<String, Notification> notifications) {
        this.notifications = notifications;
        return this;
    }

}
