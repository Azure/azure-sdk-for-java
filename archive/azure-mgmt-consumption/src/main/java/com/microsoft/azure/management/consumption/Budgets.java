/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package consumption;

import .models.Budget;
import .models.ErrorResponseException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Budgets.
 */
public interface Budgets {
    /**
     * Lists all budgets for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    PagedList<Budget> list();

    /**
     * Lists all budgets for a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Budget>> listAsync(final ListOperationCallback<Budget> serviceCallback);

    /**
     * Lists all budgets for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<Page<Budget>> listAsync();

    /**
     * Lists all budgets for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<ServiceResponse<Page<Budget>>> listWithServiceResponseAsync();

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    PagedList<Budget> listByResourceGroupName(final String resourceGroupName);

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Budget>> listByResourceGroupNameAsync(final String resourceGroupName, final ListOperationCallback<Budget> serviceCallback);

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<Page<Budget>> listByResourceGroupNameAsync(final String resourceGroupName);

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<ServiceResponse<Page<Budget>>> listByResourceGroupNameWithServiceResponseAsync(final String resourceGroupName);

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    Budget get(String budgetName);

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Budget> getAsync(String budgetName, final ServiceCallback<Budget> serviceCallback);

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<Budget> getAsync(String budgetName);

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<ServiceResponse<Budget>> getWithServiceResponseAsync(String budgetName);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    Budget createOrUpdate(String budgetName, Budget parameters);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Budget> createOrUpdateAsync(String budgetName, Budget parameters, final ServiceCallback<Budget> serviceCallback);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<Budget> createOrUpdateAsync(String budgetName, Budget parameters);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<ServiceResponse<Budget>> createOrUpdateWithServiceResponseAsync(String budgetName, Budget parameters);

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String budgetName);

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String budgetName, final ServiceCallback<Void> serviceCallback);

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String budgetName);

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String budgetName);

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    Budget getByResourceGroupName(String resourceGroupName, String budgetName);

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Budget> getByResourceGroupNameAsync(String resourceGroupName, String budgetName, final ServiceCallback<Budget> serviceCallback);

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<Budget> getByResourceGroupNameAsync(String resourceGroupName, String budgetName);

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<ServiceResponse<Budget>> getByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String budgetName);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    Budget createOrUpdateByResourceGroupName(String resourceGroupName, String budgetName, Budget parameters);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Budget> createOrUpdateByResourceGroupNameAsync(String resourceGroupName, String budgetName, Budget parameters, final ServiceCallback<Budget> serviceCallback);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<Budget> createOrUpdateByResourceGroupNameAsync(String resourceGroupName, String budgetName, Budget parameters);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    Observable<ServiceResponse<Budget>> createOrUpdateByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String budgetName, Budget parameters);

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteByResourceGroupName(String resourceGroupName, String budgetName);

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteByResourceGroupNameAsync(String resourceGroupName, String budgetName, final ServiceCallback<Void> serviceCallback);

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteByResourceGroupNameAsync(String resourceGroupName, String budgetName);

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String budgetName);

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    PagedList<Budget> listNext(final String nextPageLink);

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Budget>> listNextAsync(final String nextPageLink, final ServiceFuture<List<Budget>> serviceFuture, final ListOperationCallback<Budget> serviceCallback);

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<Page<Budget>> listNextAsync(final String nextPageLink);

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<ServiceResponse<Page<Budget>>> listNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    PagedList<Budget> listByResourceGroupNameNext(final String nextPageLink);

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Budget>> listByResourceGroupNameNextAsync(final String nextPageLink, final ServiceFuture<List<Budget>> serviceFuture, final ListOperationCallback<Budget> serviceCallback);

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<Page<Budget>> listByResourceGroupNameNextAsync(final String nextPageLink);

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    Observable<ServiceResponse<Page<Budget>>> listByResourceGroupNameNextWithServiceResponseAsync(final String nextPageLink);

}
