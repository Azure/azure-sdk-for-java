/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package consumption.implementation;

import retrofit2.Retrofit;
import .Budgets;
import .models.Budget;
import .models.ErrorResponseException;
import .models.PageImpl;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Budgets.
 */
public class BudgetsImpl implements Budgets {
    /** The Retrofit service to perform REST calls. */
    private BudgetsService service;
    /** The service client containing this operation class. */
    private ConsumptionManagementClientImpl client;

    /**
     * Initializes an instance of BudgetsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BudgetsImpl(Retrofit retrofit, ConsumptionManagementClientImpl client) {
        this.service = retrofit.create(BudgetsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Budgets to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BudgetsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets listByResourceGroupName" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets")
        Observable<Response<ResponseBody>> listByResourceGroupName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets get" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("budgetName") String budgetName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("budgetName") String budgetName, @Query("api-version") String apiVersion, @Body Budget parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("budgetName") String budgetName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets getByResourceGroupName" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}")
        Observable<Response<ResponseBody>> getByResourceGroupName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("budgetName") String budgetName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets createOrUpdateByResourceGroupName" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}")
        Observable<Response<ResponseBody>> createOrUpdateByResourceGroupName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("budgetName") String budgetName, @Query("api-version") String apiVersion, @Body Budget parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets deleteByResourceGroupName" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteByResourceGroupName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("budgetName") String budgetName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .Budgets listByResourceGroupNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all budgets for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    public PagedList<Budget> list() {
        ServiceResponse<Page<Budget>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<Budget>(response.body()) {
            @Override
            public Page<Budget> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Budget>> listAsync(final ListOperationCallback<Budget> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<Page<Budget>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<Budget>>, Page<Budget>>() {
                @Override
                public Page<Budget> call(ServiceResponse<Page<Budget>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<ServiceResponse<Page<Budget>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Budget>>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(ServiceResponse<Page<Budget>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;Budget&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Budget>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Budget>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Budget>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Budget>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<Budget>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<Budget>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    public PagedList<Budget> listByResourceGroupName(final String resourceGroupName) {
        ServiceResponse<Page<Budget>> response = listByResourceGroupNameSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<Budget>(response.body()) {
            @Override
            public Page<Budget> nextPage(String nextPageLink) {
                return listByResourceGroupNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Budget>> listByResourceGroupNameAsync(final String resourceGroupName, final ListOperationCallback<Budget> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNameSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(String nextPageLink) {
                    return listByResourceGroupNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<Page<Budget>> listByResourceGroupNameAsync(final String resourceGroupName) {
        return listByResourceGroupNameWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<Budget>>, Page<Budget>>() {
                @Override
                public Page<Budget> call(ServiceResponse<Page<Budget>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<ServiceResponse<Page<Budget>>> listByResourceGroupNameWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupNameSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<Budget>>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(ServiceResponse<Page<Budget>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
    ServiceResponse<PageImpl<Budget>> * @param resourceGroupName Azure Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;Budget&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Budget>>> listByResourceGroupNameSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroupName(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Budget>> result = listByResourceGroupNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Budget>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Budget>> listByResourceGroupNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<Budget>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<Budget>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    public Budget get(String budgetName) {
        return getWithServiceResponseAsync(budgetName).toBlocking().single().body();
    }

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Budget> getAsync(String budgetName, final ServiceCallback<Budget> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(budgetName), serviceCallback);
    }

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<Budget> getAsync(String budgetName) {
        return getWithServiceResponseAsync(budgetName).map(new Func1<ServiceResponse<Budget>, Budget>() {
            @Override
            public Budget call(ServiceResponse<Budget> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<ServiceResponse<Budget>> getWithServiceResponseAsync(String budgetName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (budgetName == null) {
            throw new IllegalArgumentException("Parameter budgetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), budgetName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Budget>>>() {
                @Override
                public Observable<ServiceResponse<Budget>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Budget> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Budget> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Budget, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Budget>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    public Budget createOrUpdate(String budgetName, Budget parameters) {
        return createOrUpdateWithServiceResponseAsync(budgetName, parameters).toBlocking().single().body();
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Budget> createOrUpdateAsync(String budgetName, Budget parameters, final ServiceCallback<Budget> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(budgetName, parameters), serviceCallback);
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<Budget> createOrUpdateAsync(String budgetName, Budget parameters) {
        return createOrUpdateWithServiceResponseAsync(budgetName, parameters).map(new Func1<ServiceResponse<Budget>, Budget>() {
            @Override
            public Budget call(ServiceResponse<Budget> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<ServiceResponse<Budget>> createOrUpdateWithServiceResponseAsync(String budgetName, Budget parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (budgetName == null) {
            throw new IllegalArgumentException("Parameter budgetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(this.client.subscriptionId(), budgetName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Budget>>>() {
                @Override
                public Observable<ServiceResponse<Budget>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Budget> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Budget> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Budget, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Budget>() { }.getType())
                .register(201, new TypeToken<Budget>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String budgetName) {
        deleteWithServiceResponseAsync(budgetName).toBlocking().single().body();
    }

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String budgetName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(budgetName), serviceCallback);
    }

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String budgetName) {
        return deleteWithServiceResponseAsync(budgetName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String budgetName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (budgetName == null) {
            throw new IllegalArgumentException("Parameter budgetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), budgetName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    public Budget getByResourceGroupName(String resourceGroupName, String budgetName) {
        return getByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName).toBlocking().single().body();
    }

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Budget> getByResourceGroupNameAsync(String resourceGroupName, String budgetName, final ServiceCallback<Budget> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName), serviceCallback);
    }

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<Budget> getByResourceGroupNameAsync(String resourceGroupName, String budgetName) {
        return getByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName).map(new Func1<ServiceResponse<Budget>, Budget>() {
            @Override
            public Budget call(ServiceResponse<Budget> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the budget for a resource group under a subscription by budget name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<ServiceResponse<Budget>> getByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String budgetName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (budgetName == null) {
            throw new IllegalArgumentException("Parameter budgetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroupName(this.client.subscriptionId(), resourceGroupName, budgetName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Budget>>>() {
                @Override
                public Observable<ServiceResponse<Budget>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Budget> clientResponse = getByResourceGroupNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Budget> getByResourceGroupNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Budget, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Budget>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Budget object if successful.
     */
    public Budget createOrUpdateByResourceGroupName(String resourceGroupName, String budgetName, Budget parameters) {
        return createOrUpdateByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName, parameters).toBlocking().single().body();
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Budget> createOrUpdateByResourceGroupNameAsync(String resourceGroupName, String budgetName, Budget parameters, final ServiceCallback<Budget> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName, parameters), serviceCallback);
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<Budget> createOrUpdateByResourceGroupNameAsync(String resourceGroupName, String budgetName, Budget parameters) {
        return createOrUpdateByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName, parameters).map(new Func1<ServiceResponse<Budget>, Budget>() {
            @Override
            public Budget call(ServiceResponse<Budget> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Budget object
     */
    public Observable<ServiceResponse<Budget>> createOrUpdateByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String budgetName, Budget parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (budgetName == null) {
            throw new IllegalArgumentException("Parameter budgetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdateByResourceGroupName(this.client.subscriptionId(), resourceGroupName, budgetName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Budget>>>() {
                @Override
                public Observable<ServiceResponse<Budget>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Budget> clientResponse = createOrUpdateByResourceGroupNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Budget> createOrUpdateByResourceGroupNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Budget, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Budget>() { }.getType())
                .register(201, new TypeToken<Budget>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteByResourceGroupName(String resourceGroupName, String budgetName) {
        deleteByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName).toBlocking().single().body();
    }

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteByResourceGroupNameAsync(String resourceGroupName, String budgetName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName), serviceCallback);
    }

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteByResourceGroupNameAsync(String resourceGroupName, String budgetName) {
        return deleteByResourceGroupNameWithServiceResponseAsync(resourceGroupName, budgetName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to delete a budget.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String budgetName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (budgetName == null) {
            throw new IllegalArgumentException("Parameter budgetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteByResourceGroupName(this.client.subscriptionId(), resourceGroupName, budgetName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteByResourceGroupNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteByResourceGroupNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    public PagedList<Budget> listNext(final String nextPageLink) {
        ServiceResponse<Page<Budget>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<Budget>(response.body()) {
            @Override
            public Page<Budget> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Budget>> listNextAsync(final String nextPageLink, final ServiceFuture<List<Budget>> serviceFuture, final ListOperationCallback<Budget> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<Page<Budget>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<Budget>>, Page<Budget>>() {
                @Override
                public Page<Budget> call(ServiceResponse<Page<Budget>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all budgets for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<ServiceResponse<Page<Budget>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Budget>>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(ServiceResponse<Page<Budget>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all budgets for a subscription.
     *
    ServiceResponse<PageImpl<Budget>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;Budget&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Budget>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Budget>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Budget>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Budget>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<Budget>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<Budget>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Budget&gt; object if successful.
     */
    public PagedList<Budget> listByResourceGroupNameNext(final String nextPageLink) {
        ServiceResponse<Page<Budget>> response = listByResourceGroupNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<Budget>(response.body()) {
            @Override
            public Page<Budget> nextPage(String nextPageLink) {
                return listByResourceGroupNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Budget>> listByResourceGroupNameNextAsync(final String nextPageLink, final ServiceFuture<List<Budget>> serviceFuture, final ListOperationCallback<Budget> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(String nextPageLink) {
                    return listByResourceGroupNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<Page<Budget>> listByResourceGroupNameNextAsync(final String nextPageLink) {
        return listByResourceGroupNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<Budget>>, Page<Budget>>() {
                @Override
                public Page<Budget> call(ServiceResponse<Page<Budget>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Budget&gt; object
     */
    public Observable<ServiceResponse<Page<Budget>>> listByResourceGroupNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Budget>>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(ServiceResponse<Page<Budget>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all budgets for a resource group under a subscription.
     *
    ServiceResponse<PageImpl<Budget>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;Budget&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Budget>>> listByResourceGroupNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Budget>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Budget>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Budget>> result = listByResourceGroupNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Budget>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Budget>> listByResourceGroupNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<Budget>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<Budget>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
