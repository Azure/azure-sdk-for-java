/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.management.devices.implementation;

import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.devices.OperationInputs;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in IotHubResources.
 */
public class IotHubResourcesInner implements InnerSupportsGet<IotHubDescriptionInner>, InnerSupportsDelete<Object> {
    /** The Retrofit service to perform REST calls. */
    private IotHubResourcesService service;
    /** The service client containing this operation class. */
    private IotHubClientImpl client;

    /**
     * Initializes an instance of IotHubResourcesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public IotHubResourcesInner(Retrofit retrofit, IotHubClientImpl client) {
        this.service = retrofit.create(IotHubResourcesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for IotHubResources to be
     * used by Retrofit to perform actually REST calls.
     */
    interface IotHubResourcesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body IotHubDescriptionInner iotHubDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body IotHubDescriptionInner iotHubDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listBySubscription" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs")
        Observable<Response<ResponseBody>> listBySubscription(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getStats" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats")
        Observable<Response<ResponseBody>> getStats(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getValidSkus" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus")
        Observable<Response<ResponseBody>> getValidSkus(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listEventHubConsumerGroups" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups")
        Observable<Response<ResponseBody>> listEventHubConsumerGroups(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("eventHubEndpointName") String eventHubEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getEventHubConsumerGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}")
        Observable<Response<ResponseBody>> getEventHubConsumerGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("eventHubEndpointName") String eventHubEndpointName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources createEventHubConsumerGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}")
        Observable<Response<ResponseBody>> createEventHubConsumerGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("eventHubEndpointName") String eventHubEndpointName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources deleteEventHubConsumerGroup" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteEventHubConsumerGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("eventHubEndpointName") String eventHubEndpointName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listJobs" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs")
        Observable<Response<ResponseBody>> listJobs(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getJob" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}")
        Observable<Response<ResponseBody>> getJob(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("jobId") String jobId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getQuotaMetrics" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics")
        Observable<Response<ResponseBody>> getQuotaMetrics(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body OperationInputs operationInputs, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getKeysForKeyName" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys")
        Observable<Response<ResponseBody>> getKeysForKeyName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("keyName") String keyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources exportDevices" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices")
        Observable<Response<ResponseBody>> exportDevices(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body ExportDevicesRequestInner exportDevicesParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources importDevices" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices")
        Observable<Response<ResponseBody>> importDevices(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body ImportDevicesRequestInner importDevicesParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listBySubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listBySubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getValidSkusNext" })
        @GET
        Observable<Response<ResponseBody>> getValidSkusNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listEventHubConsumerGroupsNext" })
        @GET
        Observable<Response<ResponseBody>> listEventHubConsumerGroupsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listJobsNext" })
        @GET
        Observable<Response<ResponseBody>> listJobsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources getQuotaMetricsNext" })
        @GET
        Observable<Response<ResponseBody>> getQuotaMetricsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.devices.IotHubResources listKeysNext" })
        @GET
        Observable<Response<ResponseBody>> listKeysNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the non-security related metadata of an IoT hub.
     * Get the non-security related metadata of an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IotHubDescriptionInner object if successful.
     */
    public IotHubDescriptionInner getByResourceGroup(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Get the non-security related metadata of an IoT hub.
     * Get the non-security related metadata of an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IotHubDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String resourceName, final ServiceCallback<IotHubDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Get the non-security related metadata of an IoT hub.
     * Get the non-security related metadata of an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IotHubDescriptionInner object
     */
    public Observable<IotHubDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<IotHubDescriptionInner>, IotHubDescriptionInner>() {
            @Override
            public IotHubDescriptionInner call(ServiceResponse<IotHubDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the non-security related metadata of an IoT hub.
     * Get the non-security related metadata of an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IotHubDescriptionInner object
     */
    public Observable<ServiceResponse<IotHubDescriptionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IotHubDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<IotHubDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IotHubDescriptionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IotHubDescriptionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IotHubDescriptionInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IotHubDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IotHubDescriptionInner object if successful.
     */
    public IotHubDescriptionInner createOrUpdate(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, iotHubDescription).toBlocking().last().body();
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IotHubDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription, final ServiceCallback<IotHubDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, iotHubDescription), serviceCallback);
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<IotHubDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, iotHubDescription).map(new Func1<ServiceResponse<IotHubDescriptionInner>, IotHubDescriptionInner>() {
            @Override
            public IotHubDescriptionInner call(ServiceResponse<IotHubDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<IotHubDescriptionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (iotHubDescription == null) {
            throw new IllegalArgumentException("Parameter iotHubDescription is required and cannot be null.");
        }
        Validator.validate(iotHubDescription);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), iotHubDescription, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<IotHubDescriptionInner>() { }.getType());
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IotHubDescriptionInner object if successful.
     */
    public IotHubDescriptionInner beginCreateOrUpdate(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, iotHubDescription).toBlocking().single().body();
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IotHubDescriptionInner> beginCreateOrUpdateAsync(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription, final ServiceCallback<IotHubDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, iotHubDescription), serviceCallback);
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IotHubDescriptionInner object
     */
    public Observable<IotHubDescriptionInner> beginCreateOrUpdateAsync(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, iotHubDescription).map(new Func1<ServiceResponse<IotHubDescriptionInner>, IotHubDescriptionInner>() {
            @Override
            public IotHubDescriptionInner call(ServiceResponse<IotHubDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to create or update.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IotHubDescriptionInner object
     */
    public Observable<ServiceResponse<IotHubDescriptionInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, IotHubDescriptionInner iotHubDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (iotHubDescription == null) {
            throw new IllegalArgumentException("Parameter iotHubDescription is required and cannot be null.");
        }
        Validator.validate(iotHubDescription);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), iotHubDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IotHubDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<IotHubDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IotHubDescriptionInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IotHubDescriptionInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IotHubDescriptionInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<IotHubDescriptionInner>() { }.getType())
                .register(200, new TypeToken<IotHubDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object delete(String resourceGroupName, String resourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().last().body();
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> deleteAsync(String resourceGroupName, String resourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Object>() { }.getType());
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginDelete(String resourceGroupName, String resourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginDeleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginDeleteAsync(String resourceGroupName, String resourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an IoT hub.
     * Delete an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<IotHubDescriptionInner>() { }.getType())
                .register(200, new TypeToken<IotHubDescriptionInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<ErrorDetailsInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object if successful.
     */
    public PagedList<IotHubDescriptionInner> listBySubscription() {
        ServiceResponse<Page<IotHubDescriptionInner>> response = listBySubscriptionSinglePageAsync().toBlocking().single();
        return new PagedList<IotHubDescriptionInner>(response.body()) {
            @Override
            public Page<IotHubDescriptionInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubDescriptionInner>> listBySubscriptionAsync(final ListOperationCallback<IotHubDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<Page<IotHubDescriptionInner>> listBySubscriptionAsync() {
        return listBySubscriptionWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Page<IotHubDescriptionInner>>() {
                @Override
                public Page<IotHubDescriptionInner> call(ServiceResponse<Page<IotHubDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listBySubscriptionWithServiceResponseAsync() {
        return listBySubscriptionSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(ServiceResponse<Page<IotHubDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listBySubscriptionSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listBySubscription(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubDescriptionInner>> result = listBySubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubDescriptionInner>> listBySubscriptionDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hubs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object if successful.
     */
    public PagedList<IotHubDescriptionInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<IotHubDescriptionInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<IotHubDescriptionInner>(response.body()) {
            @Override
            public Page<IotHubDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hubs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<IotHubDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hubs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<Page<IotHubDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Page<IotHubDescriptionInner>>() {
                @Override
                public Page<IotHubDescriptionInner> call(ServiceResponse<Page<IotHubDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hubs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(ServiceResponse<Page<IotHubDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
    ServiceResponse<PageImpl<IotHubDescriptionInner>> * @param resourceGroupName The name of the resource group that contains the IoT hubs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubDescriptionInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubDescriptionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the statistics from an IoT hub.
     * Get the statistics from an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegistryStatisticsInner object if successful.
     */
    public RegistryStatisticsInner getStats(String resourceGroupName, String resourceName) {
        return getStatsWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Get the statistics from an IoT hub.
     * Get the statistics from an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegistryStatisticsInner> getStatsAsync(String resourceGroupName, String resourceName, final ServiceCallback<RegistryStatisticsInner> serviceCallback) {
        return ServiceFuture.fromResponse(getStatsWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Get the statistics from an IoT hub.
     * Get the statistics from an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistryStatisticsInner object
     */
    public Observable<RegistryStatisticsInner> getStatsAsync(String resourceGroupName, String resourceName) {
        return getStatsWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<RegistryStatisticsInner>, RegistryStatisticsInner>() {
            @Override
            public RegistryStatisticsInner call(ServiceResponse<RegistryStatisticsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the statistics from an IoT hub.
     * Get the statistics from an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistryStatisticsInner object
     */
    public Observable<ServiceResponse<RegistryStatisticsInner>> getStatsWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getStats(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RegistryStatisticsInner>>>() {
                @Override
                public Observable<ServiceResponse<RegistryStatisticsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RegistryStatisticsInner> clientResponse = getStatsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RegistryStatisticsInner> getStatsDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegistryStatisticsInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegistryStatisticsInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubSkuDescriptionInner&gt; object if successful.
     */
    public PagedList<IotHubSkuDescriptionInner> getValidSkus(final String resourceGroupName, final String resourceName) {
        ServiceResponse<Page<IotHubSkuDescriptionInner>> response = getValidSkusSinglePageAsync(resourceGroupName, resourceName).toBlocking().single();
        return new PagedList<IotHubSkuDescriptionInner>(response.body()) {
            @Override
            public Page<IotHubSkuDescriptionInner> nextPage(String nextPageLink) {
                return getValidSkusNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubSkuDescriptionInner>> getValidSkusAsync(final String resourceGroupName, final String resourceName, final ListOperationCallback<IotHubSkuDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getValidSkusSinglePageAsync(resourceGroupName, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> call(String nextPageLink) {
                    return getValidSkusNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubSkuDescriptionInner&gt; object
     */
    public Observable<Page<IotHubSkuDescriptionInner>> getValidSkusAsync(final String resourceGroupName, final String resourceName) {
        return getValidSkusWithServiceResponseAsync(resourceGroupName, resourceName)
            .map(new Func1<ServiceResponse<Page<IotHubSkuDescriptionInner>>, Page<IotHubSkuDescriptionInner>>() {
                @Override
                public Page<IotHubSkuDescriptionInner> call(ServiceResponse<Page<IotHubSkuDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubSkuDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> getValidSkusWithServiceResponseAsync(final String resourceGroupName, final String resourceName) {
        return getValidSkusSinglePageAsync(resourceGroupName, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<IotHubSkuDescriptionInner>>, Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> call(ServiceResponse<Page<IotHubSkuDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getValidSkusNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
    ServiceResponse<PageImpl<IotHubSkuDescriptionInner>> * @param resourceGroupName The name of the resource group that contains the IoT hub.
    ServiceResponse<PageImpl<IotHubSkuDescriptionInner>> * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubSkuDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> getValidSkusSinglePageAsync(final String resourceGroupName, final String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getValidSkus(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubSkuDescriptionInner>> result = getValidSkusDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubSkuDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubSkuDescriptionInner>> getValidSkusDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubSkuDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubSkuDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;String&gt; object if successful.
     */
    public PagedList<String> listEventHubConsumerGroups(final String resourceGroupName, final String resourceName, final String eventHubEndpointName) {
        ServiceResponse<Page<String>> response = listEventHubConsumerGroupsSinglePageAsync(resourceGroupName, resourceName, eventHubEndpointName).toBlocking().single();
        return new PagedList<String>(response.body()) {
            @Override
            public Page<String> nextPage(String nextPageLink) {
                return listEventHubConsumerGroupsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<String>> listEventHubConsumerGroupsAsync(final String resourceGroupName, final String resourceName, final String eventHubEndpointName, final ListOperationCallback<String> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listEventHubConsumerGroupsSinglePageAsync(resourceGroupName, resourceName, eventHubEndpointName),
            new Func1<String, Observable<ServiceResponse<Page<String>>>>() {
                @Override
                public Observable<ServiceResponse<Page<String>>> call(String nextPageLink) {
                    return listEventHubConsumerGroupsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;String&gt; object
     */
    public Observable<Page<String>> listEventHubConsumerGroupsAsync(final String resourceGroupName, final String resourceName, final String eventHubEndpointName) {
        return listEventHubConsumerGroupsWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName)
            .map(new Func1<ServiceResponse<Page<String>>, Page<String>>() {
                @Override
                public Page<String> call(ServiceResponse<Page<String>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;String&gt; object
     */
    public Observable<ServiceResponse<Page<String>>> listEventHubConsumerGroupsWithServiceResponseAsync(final String resourceGroupName, final String resourceName, final String eventHubEndpointName) {
        return listEventHubConsumerGroupsSinglePageAsync(resourceGroupName, resourceName, eventHubEndpointName)
            .concatMap(new Func1<ServiceResponse<Page<String>>, Observable<ServiceResponse<Page<String>>>>() {
                @Override
                public Observable<ServiceResponse<Page<String>>> call(ServiceResponse<Page<String>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listEventHubConsumerGroupsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
    ServiceResponse<PageImpl<String>> * @param resourceGroupName The name of the resource group that contains the IoT hub.
    ServiceResponse<PageImpl<String>> * @param resourceName The name of the IoT hub.
    ServiceResponse<PageImpl<String>> * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;String&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<String>>> listEventHubConsumerGroupsSinglePageAsync(final String resourceGroupName, final String resourceName, final String eventHubEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (eventHubEndpointName == null) {
            throw new IllegalArgumentException("Parameter eventHubEndpointName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listEventHubConsumerGroups(this.client.subscriptionId(), resourceGroupName, resourceName, eventHubEndpointName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<String>>>>() {
                @Override
                public Observable<ServiceResponse<Page<String>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<String>> result = listEventHubConsumerGroupsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<String>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<String>> listEventHubConsumerGroupsDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<String>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<String>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventHubConsumerGroupInfoInner object if successful.
     */
    public EventHubConsumerGroupInfoInner getEventHubConsumerGroup(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        return getEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name).toBlocking().single().body();
    }

    /**
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventHubConsumerGroupInfoInner> getEventHubConsumerGroupAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name, final ServiceCallback<EventHubConsumerGroupInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(getEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name), serviceCallback);
    }

    /**
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventHubConsumerGroupInfoInner object
     */
    public Observable<EventHubConsumerGroupInfoInner> getEventHubConsumerGroupAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        return getEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name).map(new Func1<ServiceResponse<EventHubConsumerGroupInfoInner>, EventHubConsumerGroupInfoInner>() {
            @Override
            public EventHubConsumerGroupInfoInner call(ServiceResponse<EventHubConsumerGroupInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventHubConsumerGroupInfoInner object
     */
    public Observable<ServiceResponse<EventHubConsumerGroupInfoInner>> getEventHubConsumerGroupWithServiceResponseAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (eventHubEndpointName == null) {
            throw new IllegalArgumentException("Parameter eventHubEndpointName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEventHubConsumerGroup(this.client.subscriptionId(), resourceGroupName, resourceName, eventHubEndpointName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventHubConsumerGroupInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<EventHubConsumerGroupInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventHubConsumerGroupInfoInner> clientResponse = getEventHubConsumerGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventHubConsumerGroupInfoInner> getEventHubConsumerGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventHubConsumerGroupInfoInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EventHubConsumerGroupInfoInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventHubConsumerGroupInfoInner object if successful.
     */
    public EventHubConsumerGroupInfoInner createEventHubConsumerGroup(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        return createEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name).toBlocking().single().body();
    }

    /**
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to add.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventHubConsumerGroupInfoInner> createEventHubConsumerGroupAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name, final ServiceCallback<EventHubConsumerGroupInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(createEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name), serviceCallback);
    }

    /**
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventHubConsumerGroupInfoInner object
     */
    public Observable<EventHubConsumerGroupInfoInner> createEventHubConsumerGroupAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        return createEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name).map(new Func1<ServiceResponse<EventHubConsumerGroupInfoInner>, EventHubConsumerGroupInfoInner>() {
            @Override
            public EventHubConsumerGroupInfoInner call(ServiceResponse<EventHubConsumerGroupInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventHubConsumerGroupInfoInner object
     */
    public Observable<ServiceResponse<EventHubConsumerGroupInfoInner>> createEventHubConsumerGroupWithServiceResponseAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (eventHubEndpointName == null) {
            throw new IllegalArgumentException("Parameter eventHubEndpointName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.createEventHubConsumerGroup(this.client.subscriptionId(), resourceGroupName, resourceName, eventHubEndpointName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventHubConsumerGroupInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<EventHubConsumerGroupInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventHubConsumerGroupInfoInner> clientResponse = createEventHubConsumerGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventHubConsumerGroupInfoInner> createEventHubConsumerGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventHubConsumerGroupInfoInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EventHubConsumerGroupInfoInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteEventHubConsumerGroup(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        deleteEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name).toBlocking().single().body();
    }

    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteEventHubConsumerGroupAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name), serviceCallback);
    }

    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteEventHubConsumerGroupAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        return deleteEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteEventHubConsumerGroupWithServiceResponseAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (eventHubEndpointName == null) {
            throw new IllegalArgumentException("Parameter eventHubEndpointName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteEventHubConsumerGroup(this.client.subscriptionId(), resourceGroupName, resourceName, eventHubEndpointName, name, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteEventHubConsumerGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteEventHubConsumerGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> listJobs(final String resourceGroupName, final String resourceName) {
        ServiceResponse<Page<JobResponseInner>> response = listJobsSinglePageAsync(resourceGroupName, resourceName).toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listJobsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listJobsAsync(final String resourceGroupName, final String resourceName, final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listJobsSinglePageAsync(resourceGroupName, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listJobsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listJobsAsync(final String resourceGroupName, final String resourceName) {
        return listJobsWithServiceResponseAsync(resourceGroupName, resourceName)
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listJobsWithServiceResponseAsync(final String resourceGroupName, final String resourceName) {
        return listJobsSinglePageAsync(resourceGroupName, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listJobsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
    ServiceResponse<PageImpl<JobResponseInner>> * @param resourceGroupName The name of the resource group that contains the IoT hub.
    ServiceResponse<PageImpl<JobResponseInner>> * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listJobsSinglePageAsync(final String resourceGroupName, final String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listJobs(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResponseInner>> result = listJobsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobResponseInner>> listJobsDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobResponseInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobResponseInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param jobId The job identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResponseInner object if successful.
     */
    public JobResponseInner getJob(String resourceGroupName, String resourceName, String jobId) {
        return getJobWithServiceResponseAsync(resourceGroupName, resourceName, jobId).toBlocking().single().body();
    }

    /**
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param jobId The job identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResponseInner> getJobAsync(String resourceGroupName, String resourceName, String jobId, final ServiceCallback<JobResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getJobWithServiceResponseAsync(resourceGroupName, resourceName, jobId), serviceCallback);
    }

    /**
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param jobId The job identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<JobResponseInner> getJobAsync(String resourceGroupName, String resourceName, String jobId) {
        return getJobWithServiceResponseAsync(resourceGroupName, resourceName, jobId).map(new Func1<ServiceResponse<JobResponseInner>, JobResponseInner>() {
            @Override
            public JobResponseInner call(ServiceResponse<JobResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param jobId The job identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<ServiceResponse<JobResponseInner>> getJobWithServiceResponseAsync(String resourceGroupName, String resourceName, String jobId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getJob(this.client.subscriptionId(), resourceGroupName, resourceName, jobId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResponseInner> clientResponse = getJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResponseInner> getJobDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResponseInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResponseInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object if successful.
     */
    public PagedList<IotHubQuotaMetricInfoInner> getQuotaMetrics(final String resourceGroupName, final String resourceName) {
        ServiceResponse<Page<IotHubQuotaMetricInfoInner>> response = getQuotaMetricsSinglePageAsync(resourceGroupName, resourceName).toBlocking().single();
        return new PagedList<IotHubQuotaMetricInfoInner>(response.body()) {
            @Override
            public Page<IotHubQuotaMetricInfoInner> nextPage(String nextPageLink) {
                return getQuotaMetricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubQuotaMetricInfoInner>> getQuotaMetricsAsync(final String resourceGroupName, final String resourceName, final ListOperationCallback<IotHubQuotaMetricInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getQuotaMetricsSinglePageAsync(resourceGroupName, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> call(String nextPageLink) {
                    return getQuotaMetricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object
     */
    public Observable<Page<IotHubQuotaMetricInfoInner>> getQuotaMetricsAsync(final String resourceGroupName, final String resourceName) {
        return getQuotaMetricsWithServiceResponseAsync(resourceGroupName, resourceName)
            .map(new Func1<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>, Page<IotHubQuotaMetricInfoInner>>() {
                @Override
                public Page<IotHubQuotaMetricInfoInner> call(ServiceResponse<Page<IotHubQuotaMetricInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> getQuotaMetricsWithServiceResponseAsync(final String resourceGroupName, final String resourceName) {
        return getQuotaMetricsSinglePageAsync(resourceGroupName, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>, Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> call(ServiceResponse<Page<IotHubQuotaMetricInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getQuotaMetricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
    ServiceResponse<PageImpl<IotHubQuotaMetricInfoInner>> * @param resourceGroupName The name of the resource group that contains the IoT hub.
    ServiceResponse<PageImpl<IotHubQuotaMetricInfoInner>> * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> getQuotaMetricsSinglePageAsync(final String resourceGroupName, final String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getQuotaMetrics(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubQuotaMetricInfoInner>> result = getQuotaMetricsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubQuotaMetricInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubQuotaMetricInfoInner>> getQuotaMetricsDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubQuotaMetricInfoInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubQuotaMetricInfoInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Check if an IoT hub name is available.
     * Check if an IoT hub name is available.
     *
     * @param name The name of the IoT hub to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IotHubNameAvailabilityInfoInner object if successful.
     */
    public IotHubNameAvailabilityInfoInner checkNameAvailability(String name) {
        return checkNameAvailabilityWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     * Check if an IoT hub name is available.
     * Check if an IoT hub name is available.
     *
     * @param name The name of the IoT hub to check.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IotHubNameAvailabilityInfoInner> checkNameAvailabilityAsync(String name, final ServiceCallback<IotHubNameAvailabilityInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     * Check if an IoT hub name is available.
     * Check if an IoT hub name is available.
     *
     * @param name The name of the IoT hub to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IotHubNameAvailabilityInfoInner object
     */
    public Observable<IotHubNameAvailabilityInfoInner> checkNameAvailabilityAsync(String name) {
        return checkNameAvailabilityWithServiceResponseAsync(name).map(new Func1<ServiceResponse<IotHubNameAvailabilityInfoInner>, IotHubNameAvailabilityInfoInner>() {
            @Override
            public IotHubNameAvailabilityInfoInner call(ServiceResponse<IotHubNameAvailabilityInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check if an IoT hub name is available.
     * Check if an IoT hub name is available.
     *
     * @param name The name of the IoT hub to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IotHubNameAvailabilityInfoInner object
     */
    public Observable<ServiceResponse<IotHubNameAvailabilityInfoInner>> checkNameAvailabilityWithServiceResponseAsync(String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        OperationInputs operationInputs = new OperationInputs();
        operationInputs.withName(name);
        return service.checkNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), operationInputs, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IotHubNameAvailabilityInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<IotHubNameAvailabilityInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IotHubNameAvailabilityInfoInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IotHubNameAvailabilityInfoInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IotHubNameAvailabilityInfoInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IotHubNameAvailabilityInfoInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object if successful.
     */
    public PagedList<SharedAccessSignatureAuthorizationRuleInner> listKeys(final String resourceGroupName, final String resourceName) {
        ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>> response = listKeysSinglePageAsync(resourceGroupName, resourceName).toBlocking().single();
        return new PagedList<SharedAccessSignatureAuthorizationRuleInner>(response.body()) {
            @Override
            public Page<SharedAccessSignatureAuthorizationRuleInner> nextPage(String nextPageLink) {
                return listKeysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SharedAccessSignatureAuthorizationRuleInner>> listKeysAsync(final String resourceGroupName, final String resourceName, final ListOperationCallback<SharedAccessSignatureAuthorizationRuleInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listKeysSinglePageAsync(resourceGroupName, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> call(String nextPageLink) {
                    return listKeysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object
     */
    public Observable<Page<SharedAccessSignatureAuthorizationRuleInner>> listKeysAsync(final String resourceGroupName, final String resourceName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, resourceName)
            .map(new Func1<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>, Page<SharedAccessSignatureAuthorizationRuleInner>>() {
                @Override
                public Page<SharedAccessSignatureAuthorizationRuleInner> call(ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object
     */
    public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> listKeysWithServiceResponseAsync(final String resourceGroupName, final String resourceName) {
        return listKeysSinglePageAsync(resourceGroupName, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>, Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> call(ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listKeysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
    ServiceResponse<PageImpl<SharedAccessSignatureAuthorizationRuleInner>> * @param resourceGroupName The name of the resource group that contains the IoT hub.
    ServiceResponse<PageImpl<SharedAccessSignatureAuthorizationRuleInner>> * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> listKeysSinglePageAsync(final String resourceGroupName, final String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SharedAccessSignatureAuthorizationRuleInner>> result = listKeysDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SharedAccessSignatureAuthorizationRuleInner>> listKeysDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SharedAccessSignatureAuthorizationRuleInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SharedAccessSignatureAuthorizationRuleInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param keyName The name of the shared access policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SharedAccessSignatureAuthorizationRuleInner object if successful.
     */
    public SharedAccessSignatureAuthorizationRuleInner getKeysForKeyName(String resourceGroupName, String resourceName, String keyName) {
        return getKeysForKeyNameWithServiceResponseAsync(resourceGroupName, resourceName, keyName).toBlocking().single().body();
    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param keyName The name of the shared access policy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SharedAccessSignatureAuthorizationRuleInner> getKeysForKeyNameAsync(String resourceGroupName, String resourceName, String keyName, final ServiceCallback<SharedAccessSignatureAuthorizationRuleInner> serviceCallback) {
        return ServiceFuture.fromResponse(getKeysForKeyNameWithServiceResponseAsync(resourceGroupName, resourceName, keyName), serviceCallback);
    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param keyName The name of the shared access policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SharedAccessSignatureAuthorizationRuleInner object
     */
    public Observable<SharedAccessSignatureAuthorizationRuleInner> getKeysForKeyNameAsync(String resourceGroupName, String resourceName, String keyName) {
        return getKeysForKeyNameWithServiceResponseAsync(resourceGroupName, resourceName, keyName).map(new Func1<ServiceResponse<SharedAccessSignatureAuthorizationRuleInner>, SharedAccessSignatureAuthorizationRuleInner>() {
            @Override
            public SharedAccessSignatureAuthorizationRuleInner call(ServiceResponse<SharedAccessSignatureAuthorizationRuleInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param keyName The name of the shared access policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SharedAccessSignatureAuthorizationRuleInner object
     */
    public Observable<ServiceResponse<SharedAccessSignatureAuthorizationRuleInner>> getKeysForKeyNameWithServiceResponseAsync(String resourceGroupName, String resourceName, String keyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getKeysForKeyName(this.client.subscriptionId(), resourceGroupName, resourceName, keyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SharedAccessSignatureAuthorizationRuleInner>>>() {
                @Override
                public Observable<ServiceResponse<SharedAccessSignatureAuthorizationRuleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SharedAccessSignatureAuthorizationRuleInner> clientResponse = getKeysForKeyNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SharedAccessSignatureAuthorizationRuleInner> getKeysForKeyNameDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SharedAccessSignatureAuthorizationRuleInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SharedAccessSignatureAuthorizationRuleInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param exportDevicesParameters The parameters that specify the export devices operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResponseInner object if successful.
     */
    public JobResponseInner exportDevices(String resourceGroupName, String resourceName, ExportDevicesRequestInner exportDevicesParameters) {
        return exportDevicesWithServiceResponseAsync(resourceGroupName, resourceName, exportDevicesParameters).toBlocking().single().body();
    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param exportDevicesParameters The parameters that specify the export devices operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResponseInner> exportDevicesAsync(String resourceGroupName, String resourceName, ExportDevicesRequestInner exportDevicesParameters, final ServiceCallback<JobResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(exportDevicesWithServiceResponseAsync(resourceGroupName, resourceName, exportDevicesParameters), serviceCallback);
    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param exportDevicesParameters The parameters that specify the export devices operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<JobResponseInner> exportDevicesAsync(String resourceGroupName, String resourceName, ExportDevicesRequestInner exportDevicesParameters) {
        return exportDevicesWithServiceResponseAsync(resourceGroupName, resourceName, exportDevicesParameters).map(new Func1<ServiceResponse<JobResponseInner>, JobResponseInner>() {
            @Override
            public JobResponseInner call(ServiceResponse<JobResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param exportDevicesParameters The parameters that specify the export devices operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<ServiceResponse<JobResponseInner>> exportDevicesWithServiceResponseAsync(String resourceGroupName, String resourceName, ExportDevicesRequestInner exportDevicesParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (exportDevicesParameters == null) {
            throw new IllegalArgumentException("Parameter exportDevicesParameters is required and cannot be null.");
        }
        Validator.validate(exportDevicesParameters);
        return service.exportDevices(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), exportDevicesParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResponseInner> clientResponse = exportDevicesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResponseInner> exportDevicesDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResponseInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResponseInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param importDevicesParameters The parameters that specify the import devices operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResponseInner object if successful.
     */
    public JobResponseInner importDevices(String resourceGroupName, String resourceName, ImportDevicesRequestInner importDevicesParameters) {
        return importDevicesWithServiceResponseAsync(resourceGroupName, resourceName, importDevicesParameters).toBlocking().single().body();
    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param importDevicesParameters The parameters that specify the import devices operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResponseInner> importDevicesAsync(String resourceGroupName, String resourceName, ImportDevicesRequestInner importDevicesParameters, final ServiceCallback<JobResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(importDevicesWithServiceResponseAsync(resourceGroupName, resourceName, importDevicesParameters), serviceCallback);
    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param importDevicesParameters The parameters that specify the import devices operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<JobResponseInner> importDevicesAsync(String resourceGroupName, String resourceName, ImportDevicesRequestInner importDevicesParameters) {
        return importDevicesWithServiceResponseAsync(resourceGroupName, resourceName, importDevicesParameters).map(new Func1<ServiceResponse<JobResponseInner>, JobResponseInner>() {
            @Override
            public JobResponseInner call(ServiceResponse<JobResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param importDevicesParameters The parameters that specify the import devices operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<ServiceResponse<JobResponseInner>> importDevicesWithServiceResponseAsync(String resourceGroupName, String resourceName, ImportDevicesRequestInner importDevicesParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (importDevicesParameters == null) {
            throw new IllegalArgumentException("Parameter importDevicesParameters is required and cannot be null.");
        }
        Validator.validate(importDevicesParameters);
        return service.importDevices(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), importDevicesParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResponseInner> clientResponse = importDevicesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResponseInner> importDevicesDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResponseInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResponseInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object if successful.
     */
    public PagedList<IotHubDescriptionInner> listBySubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<IotHubDescriptionInner>> response = listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IotHubDescriptionInner>(response.body()) {
            @Override
            public Page<IotHubDescriptionInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubDescriptionInner>> listBySubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<IotHubDescriptionInner>> serviceFuture, final ListOperationCallback<IotHubDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<Page<IotHubDescriptionInner>> listBySubscriptionNextAsync(final String nextPageLink) {
        return listBySubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Page<IotHubDescriptionInner>>() {
                @Override
                public Page<IotHubDescriptionInner> call(ServiceResponse<Page<IotHubDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listBySubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listBySubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(ServiceResponse<Page<IotHubDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     * Get all the IoT hubs in a subscription.
     *
    ServiceResponse<PageImpl<IotHubDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listBySubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBySubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubDescriptionInner>> result = listBySubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubDescriptionInner>> listBySubscriptionNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object if successful.
     */
    public PagedList<IotHubDescriptionInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<IotHubDescriptionInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IotHubDescriptionInner>(response.body()) {
            @Override
            public Page<IotHubDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<IotHubDescriptionInner>> serviceFuture, final ListOperationCallback<IotHubDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<Page<IotHubDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Page<IotHubDescriptionInner>>() {
                @Override
                public Page<IotHubDescriptionInner> call(ServiceResponse<Page<IotHubDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IotHubDescriptionInner>>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(ServiceResponse<Page<IotHubDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     * Get all the IoT hubs in a resource group.
     *
    ServiceResponse<PageImpl<IotHubDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubDescriptionInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubDescriptionInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubSkuDescriptionInner&gt; object if successful.
     */
    public PagedList<IotHubSkuDescriptionInner> getValidSkusNext(final String nextPageLink) {
        ServiceResponse<Page<IotHubSkuDescriptionInner>> response = getValidSkusNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IotHubSkuDescriptionInner>(response.body()) {
            @Override
            public Page<IotHubSkuDescriptionInner> nextPage(String nextPageLink) {
                return getValidSkusNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubSkuDescriptionInner>> getValidSkusNextAsync(final String nextPageLink, final ServiceFuture<List<IotHubSkuDescriptionInner>> serviceFuture, final ListOperationCallback<IotHubSkuDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getValidSkusNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> call(String nextPageLink) {
                    return getValidSkusNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubSkuDescriptionInner&gt; object
     */
    public Observable<Page<IotHubSkuDescriptionInner>> getValidSkusNextAsync(final String nextPageLink) {
        return getValidSkusNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IotHubSkuDescriptionInner>>, Page<IotHubSkuDescriptionInner>>() {
                @Override
                public Page<IotHubSkuDescriptionInner> call(ServiceResponse<Page<IotHubSkuDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubSkuDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> getValidSkusNextWithServiceResponseAsync(final String nextPageLink) {
        return getValidSkusNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IotHubSkuDescriptionInner>>, Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> call(ServiceResponse<Page<IotHubSkuDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getValidSkusNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the list of valid SKUs for an IoT hub.
     * Get the list of valid SKUs for an IoT hub.
     *
    ServiceResponse<PageImpl<IotHubSkuDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubSkuDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> getValidSkusNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getValidSkusNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubSkuDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubSkuDescriptionInner>> result = getValidSkusNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubSkuDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubSkuDescriptionInner>> getValidSkusNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubSkuDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubSkuDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;String&gt; object if successful.
     */
    public PagedList<String> listEventHubConsumerGroupsNext(final String nextPageLink) {
        ServiceResponse<Page<String>> response = listEventHubConsumerGroupsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<String>(response.body()) {
            @Override
            public Page<String> nextPage(String nextPageLink) {
                return listEventHubConsumerGroupsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<String>> listEventHubConsumerGroupsNextAsync(final String nextPageLink, final ServiceFuture<List<String>> serviceFuture, final ListOperationCallback<String> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listEventHubConsumerGroupsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<String>>>>() {
                @Override
                public Observable<ServiceResponse<Page<String>>> call(String nextPageLink) {
                    return listEventHubConsumerGroupsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;String&gt; object
     */
    public Observable<Page<String>> listEventHubConsumerGroupsNextAsync(final String nextPageLink) {
        return listEventHubConsumerGroupsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<String>>, Page<String>>() {
                @Override
                public Page<String> call(ServiceResponse<Page<String>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;String&gt; object
     */
    public Observable<ServiceResponse<Page<String>>> listEventHubConsumerGroupsNextWithServiceResponseAsync(final String nextPageLink) {
        return listEventHubConsumerGroupsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<String>>, Observable<ServiceResponse<Page<String>>>>() {
                @Override
                public Observable<ServiceResponse<Page<String>>> call(ServiceResponse<Page<String>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listEventHubConsumerGroupsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
     *
    ServiceResponse<PageImpl<String>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;String&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<String>>> listEventHubConsumerGroupsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listEventHubConsumerGroupsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<String>>>>() {
                @Override
                public Observable<ServiceResponse<Page<String>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<String>> result = listEventHubConsumerGroupsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<String>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<String>> listEventHubConsumerGroupsNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<String>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<String>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> listJobsNext(final String nextPageLink) {
        ServiceResponse<Page<JobResponseInner>> response = listJobsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listJobsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listJobsNextAsync(final String nextPageLink, final ServiceFuture<List<JobResponseInner>> serviceFuture, final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listJobsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listJobsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listJobsNextAsync(final String nextPageLink) {
        return listJobsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listJobsNextWithServiceResponseAsync(final String nextPageLink) {
        return listJobsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listJobsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     *
    ServiceResponse<PageImpl<JobResponseInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listJobsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listJobsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobResponseInner>> result = listJobsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobResponseInner>> listJobsNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobResponseInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobResponseInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object if successful.
     */
    public PagedList<IotHubQuotaMetricInfoInner> getQuotaMetricsNext(final String nextPageLink) {
        ServiceResponse<Page<IotHubQuotaMetricInfoInner>> response = getQuotaMetricsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IotHubQuotaMetricInfoInner>(response.body()) {
            @Override
            public Page<IotHubQuotaMetricInfoInner> nextPage(String nextPageLink) {
                return getQuotaMetricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IotHubQuotaMetricInfoInner>> getQuotaMetricsNextAsync(final String nextPageLink, final ServiceFuture<List<IotHubQuotaMetricInfoInner>> serviceFuture, final ListOperationCallback<IotHubQuotaMetricInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getQuotaMetricsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> call(String nextPageLink) {
                    return getQuotaMetricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object
     */
    public Observable<Page<IotHubQuotaMetricInfoInner>> getQuotaMetricsNextAsync(final String nextPageLink) {
        return getQuotaMetricsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>, Page<IotHubQuotaMetricInfoInner>>() {
                @Override
                public Page<IotHubQuotaMetricInfoInner> call(ServiceResponse<Page<IotHubQuotaMetricInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> getQuotaMetricsNextWithServiceResponseAsync(final String nextPageLink) {
        return getQuotaMetricsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>, Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> call(ServiceResponse<Page<IotHubQuotaMetricInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getQuotaMetricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the quota metrics for an IoT hub.
     * Get the quota metrics for an IoT hub.
     *
    ServiceResponse<PageImpl<IotHubQuotaMetricInfoInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IotHubQuotaMetricInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> getQuotaMetricsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getQuotaMetricsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IotHubQuotaMetricInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IotHubQuotaMetricInfoInner>> result = getQuotaMetricsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IotHubQuotaMetricInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IotHubQuotaMetricInfoInner>> getQuotaMetricsNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IotHubQuotaMetricInfoInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IotHubQuotaMetricInfoInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object if successful.
     */
    public PagedList<SharedAccessSignatureAuthorizationRuleInner> listKeysNext(final String nextPageLink) {
        ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>> response = listKeysNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SharedAccessSignatureAuthorizationRuleInner>(response.body()) {
            @Override
            public Page<SharedAccessSignatureAuthorizationRuleInner> nextPage(String nextPageLink) {
                return listKeysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SharedAccessSignatureAuthorizationRuleInner>> listKeysNextAsync(final String nextPageLink, final ServiceFuture<List<SharedAccessSignatureAuthorizationRuleInner>> serviceFuture, final ListOperationCallback<SharedAccessSignatureAuthorizationRuleInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listKeysNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> call(String nextPageLink) {
                    return listKeysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object
     */
    public Observable<Page<SharedAccessSignatureAuthorizationRuleInner>> listKeysNextAsync(final String nextPageLink) {
        return listKeysNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>, Page<SharedAccessSignatureAuthorizationRuleInner>>() {
                @Override
                public Page<SharedAccessSignatureAuthorizationRuleInner> call(ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object
     */
    public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> listKeysNextWithServiceResponseAsync(final String nextPageLink) {
        return listKeysNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>, Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> call(ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listKeysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
    ServiceResponse<PageImpl<SharedAccessSignatureAuthorizationRuleInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SharedAccessSignatureAuthorizationRuleInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> listKeysNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listKeysNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SharedAccessSignatureAuthorizationRuleInner>> result = listKeysNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SharedAccessSignatureAuthorizationRuleInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SharedAccessSignatureAuthorizationRuleInner>> listKeysNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SharedAccessSignatureAuthorizationRuleInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SharedAccessSignatureAuthorizationRuleInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

}
