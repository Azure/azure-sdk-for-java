/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation.ArtifactSourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation.DevTestLabManager;
import java.util.Map;

/**
 * Type representing ArtifactSource.
 */
public interface ArtifactSource extends HasInner<ArtifactSourceInner>, Indexable, Refreshable<ArtifactSource>, Updatable<ArtifactSource.Update>, HasManager<DevTestLabManager> {
    /**
     * @return the branchRef value.
     */
    String branchRef();

    /**
     * @return the displayName value.
     */
    String displayName();

    /**
     * @return the folderPath value.
     */
    String folderPath();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the securityToken value.
     */
    String securityToken();

    /**
     * @return the sourceType value.
     */
    SourceControlType sourceType();

    /**
     * @return the status value.
     */
    EnableStatus status();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the uri value.
     */
    String uri();

    /**
     * The entirety of the ArtifactSource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLab, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ArtifactSource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ArtifactSource definition.
         */
        interface Blank extends WithLab {
        }

        /**
         * The stage of the artifactsource definition allowing to specify Lab.
         */
        interface WithLab {
           /**
            * Specifies resourceGroupName, labName.
            * @param resourceGroupName The name of the resource group
            * @param labName The name of the lab
            * @return the next definition stage
            */
            WithLocation withExistingLab(String resourceGroupName, String labName);
        }

        /**
         * The stage of the artifactsource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location the location parameter value
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the artifactsource definition allowing to specify BranchRef.
         */
        interface WithBranchRef {
            /**
             * Specifies branchRef.
             * @param branchRef The branch reference of the artifact source
             * @return the next definition stage
             */
            WithCreate withBranchRef(String branchRef);
        }

        /**
         * The stage of the artifactsource definition allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName The display name of the artifact source
             * @return the next definition stage
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the artifactsource definition allowing to specify FolderPath.
         */
        interface WithFolderPath {
            /**
             * Specifies folderPath.
             * @param folderPath The folder path of the artifact source
             * @return the next definition stage
             */
            WithCreate withFolderPath(String folderPath);
        }

        /**
         * The stage of the artifactsource definition allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState The provisioning status of the resource
             * @return the next definition stage
             */
            WithCreate withProvisioningState(String provisioningState);
        }

        /**
         * The stage of the artifactsource definition allowing to specify SecurityToken.
         */
        interface WithSecurityToken {
            /**
             * Specifies securityToken.
             * @param securityToken The security token of the artifact source
             * @return the next definition stage
             */
            WithCreate withSecurityToken(String securityToken);
        }

        /**
         * The stage of the artifactsource definition allowing to specify SourceType.
         */
        interface WithSourceType {
            /**
             * Specifies sourceType.
             * @param sourceType The type of the artifact source. Possible values include: 'VsoGit', 'GitHub'
             * @return the next definition stage
             */
            WithCreate withSourceType(SourceControlType sourceType);
        }

        /**
         * The stage of the artifactsource definition allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status The status of the artifact source. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withStatus(EnableStatus status);
        }

        /**
         * The stage of the artifactsource definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags the tags parameter value
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the artifactsource definition allowing to specify Uri.
         */
        interface WithUri {
            /**
             * Specifies uri.
             * @param uri The URI of the artifact source
             * @return the next definition stage
             */
            WithCreate withUri(String uri);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ArtifactSource>, DefinitionStages.WithBranchRef, DefinitionStages.WithDisplayName, DefinitionStages.WithFolderPath, DefinitionStages.WithProvisioningState, DefinitionStages.WithSecurityToken, DefinitionStages.WithSourceType, DefinitionStages.WithStatus, DefinitionStages.WithTags, DefinitionStages.WithUri {
        }
    }
    /**
     * The template for a ArtifactSource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ArtifactSource>, UpdateStages.WithBranchRef, UpdateStages.WithDisplayName, UpdateStages.WithFolderPath, UpdateStages.WithProvisioningState, UpdateStages.WithSecurityToken, UpdateStages.WithSourceType, UpdateStages.WithStatus, UpdateStages.WithTags, UpdateStages.WithUri {
    }

    /**
     * Grouping of ArtifactSource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the artifactsource update allowing to specify BranchRef.
         */
        interface WithBranchRef {
            /**
             * Specifies branchRef.
             * @param branchRef The branch reference of the artifact source
             * @return the next update stage
             */
            Update withBranchRef(String branchRef);
        }

        /**
         * The stage of the artifactsource update allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName The display name of the artifact source
             * @return the next update stage
             */
            Update withDisplayName(String displayName);
        }

        /**
         * The stage of the artifactsource update allowing to specify FolderPath.
         */
        interface WithFolderPath {
            /**
             * Specifies folderPath.
             * @param folderPath The folder path of the artifact source
             * @return the next update stage
             */
            Update withFolderPath(String folderPath);
        }

        /**
         * The stage of the artifactsource update allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState The provisioning status of the resource
             * @return the next update stage
             */
            Update withProvisioningState(String provisioningState);
        }

        /**
         * The stage of the artifactsource update allowing to specify SecurityToken.
         */
        interface WithSecurityToken {
            /**
             * Specifies securityToken.
             * @param securityToken The security token of the artifact source
             * @return the next update stage
             */
            Update withSecurityToken(String securityToken);
        }

        /**
         * The stage of the artifactsource update allowing to specify SourceType.
         */
        interface WithSourceType {
            /**
             * Specifies sourceType.
             * @param sourceType The type of the artifact source. Possible values include: 'VsoGit', 'GitHub'
             * @return the next update stage
             */
            Update withSourceType(SourceControlType sourceType);
        }

        /**
         * The stage of the artifactsource update allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status The status of the artifact source. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withStatus(EnableStatus status);
        }

        /**
         * The stage of the artifactsource update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags the tags parameter value
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the artifactsource update allowing to specify Uri.
         */
        interface WithUri {
            /**
             * Specifies uri.
             * @param uri The URI of the artifact source
             * @return the next update stage
             */
            Update withUri(String uri);
        }

    }
}
