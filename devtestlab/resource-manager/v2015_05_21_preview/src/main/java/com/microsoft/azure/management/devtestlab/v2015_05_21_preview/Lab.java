/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation.DevTestLabManager;
import java.util.List;
import org.joda.time.DateTime;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation.LabInner;

/**
 * Type representing Lab.
 */
public interface Lab extends HasInner<LabInner>, Resource, GroupableResourceCore<DevTestLabManager, LabInner>, HasResourceGroup, Refreshable<Lab>, Updatable<Lab.Update>, HasManager<DevTestLabManager> {
    /**
     * @return the artifactsStorageAccount value.
     */
    String artifactsStorageAccount();

    /**
     * @return the createdDate value.
     */
    DateTime createdDate();

    /**
     * @return the defaultStorageAccount value.
     */
    String defaultStorageAccount();

    /**
     * @return the defaultVirtualNetworkId value.
     */
    String defaultVirtualNetworkId();

    /**
     * @return the labStorageType value.
     */
    LabStorageType labStorageType();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the storageAccounts value.
     */
    List<String> storageAccounts();

    /**
     * @return the vaultName value.
     */
    String vaultName();

    /**
     * The entirety of the Lab definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Lab definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Lab definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Lab definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the lab definition allowing to specify ArtifactsStorageAccount.
         */
        interface WithArtifactsStorageAccount {
            /**
             * Specifies artifactsStorageAccount.
             * @param artifactsStorageAccount The artifact storage account of the lab
             * @return the next definition stage
             */
            WithCreate withArtifactsStorageAccount(String artifactsStorageAccount);
        }

        /**
         * The stage of the lab definition allowing to specify CreatedDate.
         */
        interface WithCreatedDate {
            /**
             * Specifies createdDate.
             * @param createdDate The creation date of the lab
             * @return the next definition stage
             */
            WithCreate withCreatedDate(DateTime createdDate);
        }

        /**
         * The stage of the lab definition allowing to specify DefaultStorageAccount.
         */
        interface WithDefaultStorageAccount {
            /**
             * Specifies defaultStorageAccount.
             * @param defaultStorageAccount The lab's default storage account
             * @return the next definition stage
             */
            WithCreate withDefaultStorageAccount(String defaultStorageAccount);
        }

        /**
         * The stage of the lab definition allowing to specify DefaultVirtualNetworkId.
         */
        interface WithDefaultVirtualNetworkId {
            /**
             * Specifies defaultVirtualNetworkId.
             * @param defaultVirtualNetworkId The default virtual network identifier of the lab
             * @return the next definition stage
             */
            WithCreate withDefaultVirtualNetworkId(String defaultVirtualNetworkId);
        }

        /**
         * The stage of the lab definition allowing to specify LabStorageType.
         */
        interface WithLabStorageType {
            /**
             * Specifies labStorageType.
             * @param labStorageType The type of the lab storage. Possible values include: 'Standard', 'Premium'
             * @return the next definition stage
             */
            WithCreate withLabStorageType(LabStorageType labStorageType);
        }

        /**
         * The stage of the lab definition allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState The provisioning status of the resource
             * @return the next definition stage
             */
            WithCreate withProvisioningState(String provisioningState);
        }

        /**
         * The stage of the lab definition allowing to specify StorageAccounts.
         */
        interface WithStorageAccounts {
            /**
             * Specifies storageAccounts.
             * @param storageAccounts The storage accounts of the lab
             * @return the next definition stage
             */
            WithCreate withStorageAccounts(List<String> storageAccounts);
        }

        /**
         * The stage of the lab definition allowing to specify VaultName.
         */
        interface WithVaultName {
            /**
             * Specifies vaultName.
             * @param vaultName The name of the key vault of the lab
             * @return the next definition stage
             */
            WithCreate withVaultName(String vaultName);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Lab>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithArtifactsStorageAccount, DefinitionStages.WithCreatedDate, DefinitionStages.WithDefaultStorageAccount, DefinitionStages.WithDefaultVirtualNetworkId, DefinitionStages.WithLabStorageType, DefinitionStages.WithProvisioningState, DefinitionStages.WithStorageAccounts, DefinitionStages.WithVaultName {
        }
    }
    /**
     * The template for a Lab update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Lab>, Resource.UpdateWithTags<Update>, UpdateStages.WithArtifactsStorageAccount, UpdateStages.WithCreatedDate, UpdateStages.WithDefaultStorageAccount, UpdateStages.WithDefaultVirtualNetworkId, UpdateStages.WithLabStorageType, UpdateStages.WithProvisioningState, UpdateStages.WithStorageAccounts, UpdateStages.WithVaultName {
    }

    /**
     * Grouping of Lab update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the lab update allowing to specify ArtifactsStorageAccount.
         */
        interface WithArtifactsStorageAccount {
            /**
             * Specifies artifactsStorageAccount.
             * @param artifactsStorageAccount The artifact storage account of the lab
             * @return the next update stage
             */
            Update withArtifactsStorageAccount(String artifactsStorageAccount);
        }

        /**
         * The stage of the lab update allowing to specify CreatedDate.
         */
        interface WithCreatedDate {
            /**
             * Specifies createdDate.
             * @param createdDate The creation date of the lab
             * @return the next update stage
             */
            Update withCreatedDate(DateTime createdDate);
        }

        /**
         * The stage of the lab update allowing to specify DefaultStorageAccount.
         */
        interface WithDefaultStorageAccount {
            /**
             * Specifies defaultStorageAccount.
             * @param defaultStorageAccount The lab's default storage account
             * @return the next update stage
             */
            Update withDefaultStorageAccount(String defaultStorageAccount);
        }

        /**
         * The stage of the lab update allowing to specify DefaultVirtualNetworkId.
         */
        interface WithDefaultVirtualNetworkId {
            /**
             * Specifies defaultVirtualNetworkId.
             * @param defaultVirtualNetworkId The default virtual network identifier of the lab
             * @return the next update stage
             */
            Update withDefaultVirtualNetworkId(String defaultVirtualNetworkId);
        }

        /**
         * The stage of the lab update allowing to specify LabStorageType.
         */
        interface WithLabStorageType {
            /**
             * Specifies labStorageType.
             * @param labStorageType The type of the lab storage. Possible values include: 'Standard', 'Premium'
             * @return the next update stage
             */
            Update withLabStorageType(LabStorageType labStorageType);
        }

        /**
         * The stage of the lab update allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState The provisioning status of the resource
             * @return the next update stage
             */
            Update withProvisioningState(String provisioningState);
        }

        /**
         * The stage of the lab update allowing to specify StorageAccounts.
         */
        interface WithStorageAccounts {
            /**
             * Specifies storageAccounts.
             * @param storageAccounts The storage accounts of the lab
             * @return the next update stage
             */
            Update withStorageAccounts(List<String> storageAccounts);
        }

        /**
         * The stage of the lab update allowing to specify VaultName.
         */
        interface WithVaultName {
            /**
             * Specifies vaultName.
             * @param vaultName The name of the key vault of the lab
             * @return the next update stage
             */
            Update withVaultName(String vaultName);
        }

    }
}
