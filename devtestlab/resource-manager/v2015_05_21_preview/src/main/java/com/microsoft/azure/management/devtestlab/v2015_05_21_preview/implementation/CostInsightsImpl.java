/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.CostInsights;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.CostInsight;

class CostInsightsImpl extends WrapperImpl<CostInsightsInner> implements CostInsights {
    private final DevTestLabManager manager;

    CostInsightsImpl(DevTestLabManager manager) {
        super(manager.inner().costInsights());
        this.manager = manager;
    }

    public DevTestLabManager manager() {
        return this.manager;
    }

    private CostInsightImpl wrapModel(CostInsightInner inner) {
        return  new CostInsightImpl(inner, manager());
    }

    @Override
    public Completable refreshDataAsync(String resourceGroupName, String labName, String name) {
        CostInsightsInner client = this.inner();
        return client.refreshDataAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Observable<CostInsight> listAsync(final String resourceGroupName, final String labName) {
        CostInsightsInner client = this.inner();
        return client.listAsync(resourceGroupName, labName)
        .flatMapIterable(new Func1<Page<CostInsightInner>, Iterable<CostInsightInner>>() {
            @Override
            public Iterable<CostInsightInner> call(Page<CostInsightInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CostInsightInner, CostInsight>() {
            @Override
            public CostInsight call(CostInsightInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CostInsight> getResourceAsync(String resourceGroupName, String labName, String name) {
        CostInsightsInner client = this.inner();
        return client.getResourceAsync(resourceGroupName, labName, name)
        .map(new Func1<CostInsightInner, CostInsight>() {
            @Override
            public CostInsight call(CostInsightInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
