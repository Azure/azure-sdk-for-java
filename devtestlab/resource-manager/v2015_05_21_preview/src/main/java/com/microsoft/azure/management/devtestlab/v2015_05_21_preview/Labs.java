/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import rx.Completable;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation.LabVirtualMachineInner;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation.LabsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Labs.
 */
public interface Labs extends SupportsCreating<Lab.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<Lab>, SupportsListingByResourceGroup<Lab>, SupportsListing<Lab>, HasInner<LabsInner> {
    /**
     * Create virtual machines in a Lab. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachine the LabVirtualMachineInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable createEnvironmentAsync(String resourceGroupName, String name, LabVirtualMachineInner labVirtualMachine);

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<GenerateUploadUriResponse> generateUploadUriAsync(String resourceGroupName, String name);

    /**
     * List disk images available for custom image creation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<LabVhd> listVhdsAsync(final String resourceGroupName, final String name);

}
