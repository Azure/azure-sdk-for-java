/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation;

import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Schedule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.EnableStatus;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.TaskType;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.WeekDetails;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.DayDetails;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.HourDetails;
import java.util.Map;

class ScheduleImpl extends CreatableUpdatableImpl<Schedule, ScheduleInner, ScheduleImpl> implements Schedule, Schedule.Definition, Schedule.Update {
    private final DevTestLabManager manager;
    private String resourceGroupName;
    private String labName;
    private String name;

    ScheduleImpl(String name, DevTestLabManager manager) {
        super(name, new ScheduleInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    ScheduleImpl(ScheduleInner inner, DevTestLabManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "schedules");
        //
    }

    @Override
    public DevTestLabManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Schedule> createResourceAsync() {
        SchedulesInner client = this.manager().inner().schedules();
        return client.createOrUpdateResourceAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Schedule> updateResourceAsync() {
        SchedulesInner client = this.manager().inner().schedules();
        return client.patchResourceAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ScheduleInner> getInnerAsync() {
        SchedulesInner client = this.manager().inner().schedules();
        return client.getResourceAsync(this.resourceGroupName, this.labName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DayDetails dailyRecurrence() {
        return this.inner().dailyRecurrence();
    }

    @Override
    public HourDetails hourlyRecurrence() {
        return this.inner().hourlyRecurrence();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public EnableStatus status() {
        return this.inner().status();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public TaskType taskType() {
        return this.inner().taskType();
    }

    @Override
    public String timeZoneId() {
        return this.inner().timeZoneId();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public WeekDetails weeklyRecurrence() {
        return this.inner().weeklyRecurrence();
    }

    @Override
    public ScheduleImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    @Override
    public ScheduleImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ScheduleImpl withDailyRecurrence(DayDetails dailyRecurrence) {
        this.inner().withDailyRecurrence(dailyRecurrence);
        return this;
    }

    @Override
    public ScheduleImpl withHourlyRecurrence(HourDetails hourlyRecurrence) {
        this.inner().withHourlyRecurrence(hourlyRecurrence);
        return this;
    }

    @Override
    public ScheduleImpl withProvisioningState(String provisioningState) {
        this.inner().withProvisioningState(provisioningState);
        return this;
    }

    @Override
    public ScheduleImpl withStatus(EnableStatus status) {
        this.inner().withStatus(status);
        return this;
    }

    @Override
    public ScheduleImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public ScheduleImpl withTaskType(TaskType taskType) {
        this.inner().withTaskType(taskType);
        return this;
    }

    @Override
    public ScheduleImpl withTimeZoneId(String timeZoneId) {
        this.inner().withTimeZoneId(timeZoneId);
        return this;
    }

    @Override
    public ScheduleImpl withWeeklyRecurrence(WeekDetails weeklyRecurrence) {
        this.inner().withWeeklyRecurrence(weeklyRecurrence);
        return this;
    }

}
