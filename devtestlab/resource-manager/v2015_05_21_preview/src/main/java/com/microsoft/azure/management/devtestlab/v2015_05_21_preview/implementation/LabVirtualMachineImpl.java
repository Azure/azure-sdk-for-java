/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation;

import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.LabVirtualMachine;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.ArtifactInstallProperties;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.ArtifactDeploymentStatusProperties;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.GalleryImageReference;
import java.util.Map;

class LabVirtualMachineImpl extends CreatableUpdatableImpl<LabVirtualMachine, LabVirtualMachineInner, LabVirtualMachineImpl> implements LabVirtualMachine, LabVirtualMachine.Definition, LabVirtualMachine.Update {
    private final DevTestLabManager manager;
    private String resourceGroupName;
    private String labName;
    private String name;

    LabVirtualMachineImpl(String name, DevTestLabManager manager) {
        super(name, new LabVirtualMachineInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    LabVirtualMachineImpl(LabVirtualMachineInner inner, DevTestLabManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "virtualmachines");
        //
    }

    @Override
    public DevTestLabManager manager() {
        return this.manager;
    }

    @Override
    public Observable<LabVirtualMachine> createResourceAsync() {
        VirtualMachinesInner client = this.manager().inner().virtualMachines();
        return client.createOrUpdateResourceAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<LabVirtualMachine> updateResourceAsync() {
        VirtualMachinesInner client = this.manager().inner().virtualMachines();
        return client.patchResourceAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<LabVirtualMachineInner> getInnerAsync() {
        VirtualMachinesInner client = this.manager().inner().virtualMachines();
        return client.getResourceAsync(this.resourceGroupName, this.labName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public ArtifactDeploymentStatusProperties artifactDeploymentStatus() {
        return this.inner().artifactDeploymentStatus();
    }

    @Override
    public List<ArtifactInstallProperties> artifacts() {
        return this.inner().artifacts();
    }

    @Override
    public String computeId() {
        return this.inner().computeId();
    }

    @Override
    public String createdByUser() {
        return this.inner().createdByUser();
    }

    @Override
    public String createdByUserId() {
        return this.inner().createdByUserId();
    }

    @Override
    public String customImageId() {
        return this.inner().customImageId();
    }

    @Override
    public Boolean disallowPublicIpAddress() {
        return this.inner().disallowPublicIpAddress();
    }

    @Override
    public String fqdn() {
        return this.inner().fqdn();
    }

    @Override
    public GalleryImageReference galleryImageReference() {
        return this.inner().galleryImageReference();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isAuthenticationWithSshKey() {
        return this.inner().isAuthenticationWithSshKey();
    }

    @Override
    public String labSubnetName() {
        return this.inner().labSubnetName();
    }

    @Override
    public String labVirtualNetworkId() {
        return this.inner().labVirtualNetworkId();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String notes() {
        return this.inner().notes();
    }

    @Override
    public String osType() {
        return this.inner().osType();
    }

    @Override
    public String ownerObjectId() {
        return this.inner().ownerObjectId();
    }

    @Override
    public String password() {
        return this.inner().password();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String size() {
        return this.inner().size();
    }

    @Override
    public String sshKey() {
        return this.inner().sshKey();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String userName() {
        return this.inner().userName();
    }

    @Override
    public LabVirtualMachineImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    @Override
    public LabVirtualMachineImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withArtifactDeploymentStatus(ArtifactDeploymentStatusProperties artifactDeploymentStatus) {
        this.inner().withArtifactDeploymentStatus(artifactDeploymentStatus);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withArtifacts(List<ArtifactInstallProperties> artifacts) {
        this.inner().withArtifacts(artifacts);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withComputeId(String computeId) {
        this.inner().withComputeId(computeId);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withCreatedByUser(String createdByUser) {
        this.inner().withCreatedByUser(createdByUser);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withCreatedByUserId(String createdByUserId) {
        this.inner().withCreatedByUserId(createdByUserId);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withCustomImageId(String customImageId) {
        this.inner().withCustomImageId(customImageId);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withDisallowPublicIpAddress(Boolean disallowPublicIpAddress) {
        this.inner().withDisallowPublicIpAddress(disallowPublicIpAddress);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withFqdn(String fqdn) {
        this.inner().withFqdn(fqdn);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withGalleryImageReference(GalleryImageReference galleryImageReference) {
        this.inner().withGalleryImageReference(galleryImageReference);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withIsAuthenticationWithSshKey(Boolean isAuthenticationWithSshKey) {
        this.inner().withIsAuthenticationWithSshKey(isAuthenticationWithSshKey);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withLabSubnetName(String labSubnetName) {
        this.inner().withLabSubnetName(labSubnetName);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withLabVirtualNetworkId(String labVirtualNetworkId) {
        this.inner().withLabVirtualNetworkId(labVirtualNetworkId);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withNotes(String notes) {
        this.inner().withNotes(notes);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withOsType(String osType) {
        this.inner().withOsType(osType);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withOwnerObjectId(String ownerObjectId) {
        this.inner().withOwnerObjectId(ownerObjectId);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withPassword(String password) {
        this.inner().withPassword(password);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withProvisioningState(String provisioningState) {
        this.inner().withProvisioningState(provisioningState);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withSize(String size) {
        this.inner().withSize(size);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withSshKey(String sshKey) {
        this.inner().withSshKey(sshKey);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public LabVirtualMachineImpl withUserName(String userName) {
        this.inner().withUserName(userName);
        return this;
    }

}
