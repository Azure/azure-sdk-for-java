/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Lab;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.LabStorageType;
import org.joda.time.DateTime;

class LabImpl extends GroupableResourceCoreImpl<Lab, LabInner, LabImpl, DevTestLabManager> implements Lab, Lab.Definition, Lab.Update {
    LabImpl(String name, LabInner inner, DevTestLabManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Lab> createResourceAsync() {
        LabsInner client = this.manager().inner().labs();
        return client.createOrUpdateResourceAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Lab> updateResourceAsync() {
        LabsInner client = this.manager().inner().labs();
        return client.patchResourceAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<LabInner> getInnerAsync() {
        LabsInner client = this.manager().inner().labs();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String artifactsStorageAccount() {
        return this.inner().artifactsStorageAccount();
    }

    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String defaultStorageAccount() {
        return this.inner().defaultStorageAccount();
    }

    @Override
    public String defaultVirtualNetworkId() {
        return this.inner().defaultVirtualNetworkId();
    }

    @Override
    public LabStorageType labStorageType() {
        return this.inner().labStorageType();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public List<String> storageAccounts() {
        return this.inner().storageAccounts();
    }

    @Override
    public String vaultName() {
        return this.inner().vaultName();
    }

    @Override
    public LabImpl withArtifactsStorageAccount(String artifactsStorageAccount) {
        this.inner().withArtifactsStorageAccount(artifactsStorageAccount);
        return this;
    }

    @Override
    public LabImpl withCreatedDate(DateTime createdDate) {
        this.inner().withCreatedDate(createdDate);
        return this;
    }

    @Override
    public LabImpl withDefaultStorageAccount(String defaultStorageAccount) {
        this.inner().withDefaultStorageAccount(defaultStorageAccount);
        return this;
    }

    @Override
    public LabImpl withDefaultVirtualNetworkId(String defaultVirtualNetworkId) {
        this.inner().withDefaultVirtualNetworkId(defaultVirtualNetworkId);
        return this;
    }

    @Override
    public LabImpl withLabStorageType(LabStorageType labStorageType) {
        this.inner().withLabStorageType(labStorageType);
        return this;
    }

    @Override
    public LabImpl withProvisioningState(String provisioningState) {
        this.inner().withProvisioningState(provisioningState);
        return this;
    }

    @Override
    public LabImpl withStorageAccounts(List<String> storageAccounts) {
        this.inner().withStorageAccounts(storageAccounts);
        return this;
    }

    @Override
    public LabImpl withVaultName(String vaultName) {
        this.inner().withVaultName(vaultName);
        return this;
    }

}
