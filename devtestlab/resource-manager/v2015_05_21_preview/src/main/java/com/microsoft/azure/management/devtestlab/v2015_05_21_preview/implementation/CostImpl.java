/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation;

import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Cost;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.CostPerDayProperties;
import java.util.Map;

class CostImpl extends IndexableRefreshableWrapperImpl<Cost, CostInner> implements Cost {
    private final DevTestLabManager manager;
    private String resourceGroupName;
    private String labName;
    private String name;

    CostImpl(CostInner inner,  DevTestLabManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "costs");
    }

    @Override
    public DevTestLabManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<CostInner> getInnerAsync() {
        CostsInner client = this.manager().inner().costs();
        return client.getResourceAsync(this.resourceGroupName, this.labName, this.name);
    }



    @Override
    public List<CostPerDayProperties> costs() {
        return this.inner().costs();
    }

    @Override
    public String currencyCode() {
        return this.inner().currencyCode();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
