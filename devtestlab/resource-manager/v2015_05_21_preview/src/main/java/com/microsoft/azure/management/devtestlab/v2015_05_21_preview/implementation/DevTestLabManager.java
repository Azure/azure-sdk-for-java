/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Labs;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.ArtifactSources;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Artifacts;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.CostInsights;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Costs;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.CustomImages;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Formulas;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.GalleryImages;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.PolicySets;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Policys;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Schedules;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.VirtualMachines;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.VirtualNetworks;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure DevTestLab resource management.
 */
public final class DevTestLabManager extends ManagerCore<DevTestLabManager, DevTestLabsClientImpl> {
    private Labs labs;
    private ArtifactSources artifactSources;
    private Artifacts artifacts;
    private CostInsights costInsights;
    private Costs costs;
    private CustomImages customImages;
    private Formulas formulas;
    private GalleryImages galleryImages;
    private PolicySets policySets;
    private Policys policys;
    private Schedules schedules;
    private VirtualMachines virtualMachines;
    private VirtualNetworks virtualNetworks;
    /**
    * Get a Configurable instance that can be used to create DevTestLabManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new DevTestLabManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of DevTestLabManager that exposes DevTestLab resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the DevTestLabManager
    */
    public static DevTestLabManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new DevTestLabManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of DevTestLabManager that exposes DevTestLab resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the DevTestLabManager
    */
    public static DevTestLabManager authenticate(RestClient restClient, String subscriptionId) {
        return new DevTestLabManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of DevTestLabManager that exposes DevTestLab management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing DevTestLab management API entry points that work across subscriptions
        */
        DevTestLabManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Labs.
     */
    public Labs labs() {
        if (this.labs == null) {
            this.labs = new LabsImpl(this);
        }
        return this.labs;
    }

    /**
     * @return Entry point to manage ArtifactSources.
     */
    public ArtifactSources artifactSources() {
        if (this.artifactSources == null) {
            this.artifactSources = new ArtifactSourcesImpl(this);
        }
        return this.artifactSources;
    }

    /**
     * @return Entry point to manage Artifacts.
     */
    public Artifacts artifacts() {
        if (this.artifacts == null) {
            this.artifacts = new ArtifactsImpl(this);
        }
        return this.artifacts;
    }

    /**
     * @return Entry point to manage CostInsights.
     */
    public CostInsights costInsights() {
        if (this.costInsights == null) {
            this.costInsights = new CostInsightsImpl(this);
        }
        return this.costInsights;
    }

    /**
     * @return Entry point to manage Costs.
     */
    public Costs costs() {
        if (this.costs == null) {
            this.costs = new CostsImpl(this);
        }
        return this.costs;
    }

    /**
     * @return Entry point to manage CustomImages.
     */
    public CustomImages customImages() {
        if (this.customImages == null) {
            this.customImages = new CustomImagesImpl(this);
        }
        return this.customImages;
    }

    /**
     * @return Entry point to manage Formulas.
     */
    public Formulas formulas() {
        if (this.formulas == null) {
            this.formulas = new FormulasImpl(this);
        }
        return this.formulas;
    }

    /**
     * @return Entry point to manage GalleryImages.
     */
    public GalleryImages galleryImages() {
        if (this.galleryImages == null) {
            this.galleryImages = new GalleryImagesImpl(this);
        }
        return this.galleryImages;
    }

    /**
     * @return Entry point to manage PolicySets.
     */
    public PolicySets policySets() {
        if (this.policySets == null) {
            this.policySets = new PolicySetsImpl(this);
        }
        return this.policySets;
    }

    /**
     * @return Entry point to manage Policys.
     */
    public Policys policys() {
        if (this.policys == null) {
            this.policys = new PolicysImpl(this);
        }
        return this.policys;
    }

    /**
     * @return Entry point to manage Schedules.
     */
    public Schedules schedules() {
        if (this.schedules == null) {
            this.schedules = new SchedulesImpl(this);
        }
        return this.schedules;
    }

    /**
     * @return Entry point to manage VirtualMachines.
     */
    public VirtualMachines virtualMachines() {
        if (this.virtualMachines == null) {
            this.virtualMachines = new VirtualMachinesImpl(this);
        }
        return this.virtualMachines;
    }

    /**
     * @return Entry point to manage VirtualNetworks.
     */
    public VirtualNetworks virtualNetworks() {
        if (this.virtualNetworks == null) {
            this.virtualNetworks = new VirtualNetworksImpl(this);
        }
        return this.virtualNetworks;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public DevTestLabManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return DevTestLabManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private DevTestLabManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new DevTestLabsClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
