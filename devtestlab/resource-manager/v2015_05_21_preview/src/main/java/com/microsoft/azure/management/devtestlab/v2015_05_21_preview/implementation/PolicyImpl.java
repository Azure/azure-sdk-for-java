/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2015_05_21_preview.implementation;

import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.Policy;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.PolicyStatus;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.PolicyFactName;
import com.microsoft.azure.management.devtestlab.v2015_05_21_preview.PolicyEvaluatorType;
import java.util.Map;

class PolicyImpl extends CreatableUpdatableImpl<Policy, PolicyInner, PolicyImpl> implements Policy, Policy.Definition, Policy.Update {
    private final DevTestLabManager manager;
    private String resourceGroupName;
    private String labName;
    private String policySetName;
    private String name;

    PolicyImpl(String name, DevTestLabManager manager) {
        super(name, new PolicyInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    PolicyImpl(PolicyInner inner, DevTestLabManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.policySetName = IdParsingUtils.getValueFromIdByName(inner.id(), "policysets");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "policies");
        //
    }

    @Override
    public DevTestLabManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Policy> createResourceAsync() {
        PolicysInner client = this.manager().inner().policys();
        return client.createOrUpdateResourceAsync(this.resourceGroupName, this.labName, this.policySetName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Policy> updateResourceAsync() {
        PolicysInner client = this.manager().inner().policys();
        return client.patchResourceAsync(this.resourceGroupName, this.labName, this.policySetName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PolicyInner> getInnerAsync() {
        PolicysInner client = this.manager().inner().policys();
        return client.getResourceAsync(this.resourceGroupName, this.labName, this.policySetName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public PolicyEvaluatorType evaluatorType() {
        return this.inner().evaluatorType();
    }

    @Override
    public String factData() {
        return this.inner().factData();
    }

    @Override
    public PolicyFactName factName() {
        return this.inner().factName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public PolicyStatus status() {
        return this.inner().status();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String threshold() {
        return this.inner().threshold();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PolicyImpl withExistingPolicyset(String resourceGroupName, String labName, String policySetName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        this.policySetName = policySetName;
        return this;
    }

    @Override
    public PolicyImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public PolicyImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public PolicyImpl withEvaluatorType(PolicyEvaluatorType evaluatorType) {
        this.inner().withEvaluatorType(evaluatorType);
        return this;
    }

    @Override
    public PolicyImpl withFactData(String factData) {
        this.inner().withFactData(factData);
        return this;
    }

    @Override
    public PolicyImpl withFactName(PolicyFactName factName) {
        this.inner().withFactName(factName);
        return this;
    }

    @Override
    public PolicyImpl withProvisioningState(String provisioningState) {
        this.inner().withProvisioningState(provisioningState);
        return this;
    }

    @Override
    public PolicyImpl withStatus(PolicyStatus status) {
        this.inner().withStatus(status);
        return this;
    }

    @Override
    public PolicyImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public PolicyImpl withThreshold(String threshold) {
        this.inner().withThreshold(threshold);
        return this;
    }

}
