/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.devtestlab.v2018_09_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.devtestlab.v2018_09_15.ServiceFabricSchedules;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.devtestlab.v2018_09_15.UserLabSchedule;

class ServiceFabricSchedulesImpl extends WrapperImpl<ServiceFabricSchedulesInner> implements ServiceFabricSchedules {
    private final DevTestLabManager manager;

    ServiceFabricSchedulesImpl(DevTestLabManager manager) {
        super(manager.inner().serviceFabricSchedules());
        this.manager = manager;
    }

    public DevTestLabManager manager() {
        return this.manager;
    }

    @Override
    public UserLabScheduleImpl define(String name) {
        return wrapModel(name);
    }

    private UserLabScheduleImpl wrapModel(ScheduleInner inner) {
        return  new UserLabScheduleImpl(inner, manager());
    }

    private UserLabScheduleImpl wrapModel(String name) {
        return new UserLabScheduleImpl(name, this.manager());
    }

    @Override
    public Completable executeAsync(String resourceGroupName, String labName, String userName, String serviceFabricName, String name) {
        ServiceFabricSchedulesInner client = this.inner();
        return client.executeAsync(resourceGroupName, labName, userName, serviceFabricName, name).toCompletable();
    }

    @Override
    public Observable<UserLabSchedule> listAsync(final String resourceGroupName, final String labName, final String userName, final String serviceFabricName) {
        ServiceFabricSchedulesInner client = this.inner();
        return client.listAsync(resourceGroupName, labName, userName, serviceFabricName)
        .flatMapIterable(new Func1<Page<ScheduleInner>, Iterable<ScheduleInner>>() {
            @Override
            public Iterable<ScheduleInner> call(Page<ScheduleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ScheduleInner, UserLabSchedule>() {
            @Override
            public UserLabSchedule call(ScheduleInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<UserLabSchedule> getAsync(String resourceGroupName, String labName, String userName, String serviceFabricName, String name) {
        ServiceFabricSchedulesInner client = this.inner();
        return client.getAsync(resourceGroupName, labName, userName, serviceFabricName, name)
        .map(new Func1<ScheduleInner, UserLabSchedule>() {
            @Override
            public UserLabSchedule call(ScheduleInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String labName, String userName, String serviceFabricName, String name) {
        ServiceFabricSchedulesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, labName, userName, serviceFabricName, name).toCompletable();
    }

}
