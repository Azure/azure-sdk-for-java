/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.devtestlab.v2016_05_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.devtestlab.v2016_05_15.Costs;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.devtestlab.v2016_05_15.LabCost;

class CostsImpl extends WrapperImpl<CostsInner> implements Costs {
    private final DevTestLabManager manager;

    CostsImpl(DevTestLabManager manager) {
        super(manager.inner().costs());
        this.manager = manager;
    }

    public DevTestLabManager manager() {
        return this.manager;
    }

    @Override
    public LabCostImpl define(String name) {
        return wrapModel(name);
    }

    private LabCostImpl wrapModel(LabCostInner inner) {
        return  new LabCostImpl(inner, manager());
    }

    private LabCostImpl wrapModel(String name) {
        return new LabCostImpl(name, this.manager());
    }

    @Override
    public Observable<LabCost> getAsync(String resourceGroupName, String labName, String name) {
        CostsInner client = this.inner();
        return client.getAsync(resourceGroupName, labName, name)
        .map(new Func1<LabCostInner, LabCost>() {
            @Override
            public LabCost call(LabCostInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
