/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlab.v2016_05_15.implementation;

import com.microsoft.azure.management.devtestlab.v2016_05_15.StorageType;
import org.joda.time.DateTime;
import com.microsoft.azure.management.devtestlab.v2016_05_15.PremiumDataDisk;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.rest.SkipParentValidation;
import com.microsoft.azure.Resource;

/**
 * A lab.
 */
@JsonFlatten
@SkipParentValidation
public class LabInner extends Resource {
    /**
     * The lab's default storage account.
     */
    @JsonProperty(value = "properties.defaultStorageAccount", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultStorageAccount;

    /**
     * The lab's default premium storage account.
     */
    @JsonProperty(value = "properties.defaultPremiumStorageAccount", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultPremiumStorageAccount;

    /**
     * The lab's artifact storage account.
     */
    @JsonProperty(value = "properties.artifactsStorageAccount", access = JsonProperty.Access.WRITE_ONLY)
    private String artifactsStorageAccount;

    /**
     * The lab's premium data disk storage account.
     */
    @JsonProperty(value = "properties.premiumDataDiskStorageAccount", access = JsonProperty.Access.WRITE_ONLY)
    private String premiumDataDiskStorageAccount;

    /**
     * The lab's Key vault.
     */
    @JsonProperty(value = "properties.vaultName", access = JsonProperty.Access.WRITE_ONLY)
    private String vaultName;

    /**
     * Type of storage used by the lab. It can be either Premium or Standard.
     * Default is Premium. Possible values include: 'Standard', 'Premium'.
     */
    @JsonProperty(value = "properties.labStorageType")
    private StorageType labStorageType;

    /**
     * The creation date of the lab.
     */
    @JsonProperty(value = "properties.createdDate", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime createdDate;

    /**
     * The setting to enable usage of premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks
     * is allowed.
     * When its value is 'Disabled', only creation of standard data disks is
     * allowed. Possible values include: 'Disabled', 'Enabled'.
     */
    @JsonProperty(value = "properties.premiumDataDisks")
    private PremiumDataDisk premiumDataDisks;

    /**
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /**
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "properties.uniqueIdentifier")
    private String uniqueIdentifier;

    /**
     * Get the lab's default storage account.
     *
     * @return the defaultStorageAccount value
     */
    public String defaultStorageAccount() {
        return this.defaultStorageAccount;
    }

    /**
     * Get the lab's default premium storage account.
     *
     * @return the defaultPremiumStorageAccount value
     */
    public String defaultPremiumStorageAccount() {
        return this.defaultPremiumStorageAccount;
    }

    /**
     * Get the lab's artifact storage account.
     *
     * @return the artifactsStorageAccount value
     */
    public String artifactsStorageAccount() {
        return this.artifactsStorageAccount;
    }

    /**
     * Get the lab's premium data disk storage account.
     *
     * @return the premiumDataDiskStorageAccount value
     */
    public String premiumDataDiskStorageAccount() {
        return this.premiumDataDiskStorageAccount;
    }

    /**
     * Get the lab's Key vault.
     *
     * @return the vaultName value
     */
    public String vaultName() {
        return this.vaultName;
    }

    /**
     * Get type of storage used by the lab. It can be either Premium or Standard. Default is Premium. Possible values include: 'Standard', 'Premium'.
     *
     * @return the labStorageType value
     */
    public StorageType labStorageType() {
        return this.labStorageType;
    }

    /**
     * Set type of storage used by the lab. It can be either Premium or Standard. Default is Premium. Possible values include: 'Standard', 'Premium'.
     *
     * @param labStorageType the labStorageType value to set
     * @return the LabInner object itself.
     */
    public LabInner withLabStorageType(StorageType labStorageType) {
        this.labStorageType = labStorageType;
        return this;
    }

    /**
     * Get the creation date of the lab.
     *
     * @return the createdDate value
     */
    public DateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Get the setting to enable usage of premium data disks.
     When its value is 'Enabled', creation of standard or premium data disks is allowed.
     When its value is 'Disabled', only creation of standard data disks is allowed. Possible values include: 'Disabled', 'Enabled'.
     *
     * @return the premiumDataDisks value
     */
    public PremiumDataDisk premiumDataDisks() {
        return this.premiumDataDisks;
    }

    /**
     * Set the setting to enable usage of premium data disks.
     When its value is 'Enabled', creation of standard or premium data disks is allowed.
     When its value is 'Disabled', only creation of standard data disks is allowed. Possible values include: 'Disabled', 'Enabled'.
     *
     * @param premiumDataDisks the premiumDataDisks value to set
     * @return the LabInner object itself.
     */
    public LabInner withPremiumDataDisks(PremiumDataDisk premiumDataDisks) {
        this.premiumDataDisks = premiumDataDisks;
        return this;
    }

    /**
     * Get the provisioning status of the resource.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioning status of the resource.
     *
     * @param provisioningState the provisioningState value to set
     * @return the LabInner object itself.
     */
    public LabInner withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Set the unique immutable identifier of a resource (Guid).
     *
     * @param uniqueIdentifier the uniqueIdentifier value to set
     * @return the LabInner object itself.
     */
    public LabInner withUniqueIdentifier(String uniqueIdentifier) {
        this.uniqueIdentifier = uniqueIdentifier;
        return this;
    }

}
