/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datafactory.v2018_06_01.RerunTumblingWindowTriggerActionParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RerunTriggers.
 */
public class RerunTriggersInner {
    /** The Retrofit service to perform REST calls. */
    private RerunTriggersService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of RerunTriggersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RerunTriggersInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(RerunTriggersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RerunTriggers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RerunTriggersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Path("rerunTriggerName") String rerunTriggerName, @Query("api-version") String apiVersion, @Body RerunTumblingWindowTriggerActionParameters rerunTumblingWindowTriggerActionParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers start" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/start")
        Observable<Response<ResponseBody>> start(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Path("rerunTriggerName") String rerunTriggerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers beginStart" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/start")
        Observable<Response<ResponseBody>> beginStart(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Path("rerunTriggerName") String rerunTriggerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers stop" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/stop")
        Observable<Response<ResponseBody>> stop(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Path("rerunTriggerName") String rerunTriggerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers beginStop" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/stop")
        Observable<Response<ResponseBody>> beginStop(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Path("rerunTriggerName") String rerunTriggerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers cancel" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/cancel")
        Observable<Response<ResponseBody>> cancel(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Path("rerunTriggerName") String rerunTriggerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers beginCancel" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/cancel")
        Observable<Response<ResponseBody>> beginCancel(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Path("rerunTriggerName") String rerunTriggerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers listByTrigger" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers")
        Observable<Response<ResponseBody>> listByTrigger(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("triggerName") String triggerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.RerunTriggers listByTriggerNext" })
        @GET
        Observable<Response<ResponseBody>> listByTriggerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a rerun trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TriggerResourceInner object if successful.
     */
    public TriggerResourceInner create(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, RerunTumblingWindowTriggerActionParameters rerunTumblingWindowTriggerActionParameters) {
        return createWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, rerunTumblingWindowTriggerActionParameters).toBlocking().single().body();
    }

    /**
     * Creates a rerun trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TriggerResourceInner> createAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, RerunTumblingWindowTriggerActionParameters rerunTumblingWindowTriggerActionParameters, final ServiceCallback<TriggerResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, rerunTumblingWindowTriggerActionParameters), serviceCallback);
    }

    /**
     * Creates a rerun trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TriggerResourceInner object
     */
    public Observable<TriggerResourceInner> createAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, RerunTumblingWindowTriggerActionParameters rerunTumblingWindowTriggerActionParameters) {
        return createWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, rerunTumblingWindowTriggerActionParameters).map(new Func1<ServiceResponse<TriggerResourceInner>, TriggerResourceInner>() {
            @Override
            public TriggerResourceInner call(ServiceResponse<TriggerResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a rerun trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TriggerResourceInner object
     */
    public Observable<ServiceResponse<TriggerResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, RerunTumblingWindowTriggerActionParameters rerunTumblingWindowTriggerActionParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (rerunTriggerName == null) {
            throw new IllegalArgumentException("Parameter rerunTriggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (rerunTumblingWindowTriggerActionParameters == null) {
            throw new IllegalArgumentException("Parameter rerunTumblingWindowTriggerActionParameters is required and cannot be null.");
        }
        Validator.validate(rerunTumblingWindowTriggerActionParameters);
        return service.create(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, rerunTriggerName, this.client.apiVersion(), rerunTumblingWindowTriggerActionParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TriggerResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<TriggerResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TriggerResourceInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TriggerResourceInner> createDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TriggerResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TriggerResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void start(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        startWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).toBlocking().last().body();
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> startAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(startWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName), serviceCallback);
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> startAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        return startWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> startWithServiceResponseAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (rerunTriggerName == null) {
            throw new IllegalArgumentException("Parameter rerunTriggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.start(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, rerunTriggerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginStart(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        beginStartWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).toBlocking().single().body();
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginStartAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginStartWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName), serviceCallback);
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginStartAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        return beginStartWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginStartWithServiceResponseAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (rerunTriggerName == null) {
            throw new IllegalArgumentException("Parameter rerunTriggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginStart(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, rerunTriggerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginStartDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginStartDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void stop(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        stopWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).toBlocking().last().body();
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> stopAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(stopWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName), serviceCallback);
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> stopAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        return stopWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> stopWithServiceResponseAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (rerunTriggerName == null) {
            throw new IllegalArgumentException("Parameter rerunTriggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.stop(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, rerunTriggerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginStop(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        beginStopWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).toBlocking().single().body();
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginStopAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginStopWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName), serviceCallback);
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginStopAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        return beginStopWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginStopWithServiceResponseAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (rerunTriggerName == null) {
            throw new IllegalArgumentException("Parameter rerunTriggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginStop(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, rerunTriggerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginStopDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginStopDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void cancel(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        cancelWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).toBlocking().last().body();
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> cancelAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(cancelWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName), serviceCallback);
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> cancelAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        return cancelWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (rerunTriggerName == null) {
            throw new IllegalArgumentException("Parameter rerunTriggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.cancel(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, rerunTriggerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginCancel(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        beginCancelWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).toBlocking().single().body();
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginCancelAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginCancelWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName), serviceCallback);
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginCancelAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        return beginCancelWithServiceResponseAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginCancelWithServiceResponseAsync(String resourceGroupName, String factoryName, String triggerName, String rerunTriggerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (rerunTriggerName == null) {
            throw new IllegalArgumentException("Parameter rerunTriggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCancel(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, rerunTriggerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginCancelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginCancelDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RerunTriggerResourceInner&gt; object if successful.
     */
    public PagedList<RerunTriggerResourceInner> listByTrigger(final String resourceGroupName, final String factoryName, final String triggerName) {
        ServiceResponse<Page<RerunTriggerResourceInner>> response = listByTriggerSinglePageAsync(resourceGroupName, factoryName, triggerName).toBlocking().single();
        return new PagedList<RerunTriggerResourceInner>(response.body()) {
            @Override
            public Page<RerunTriggerResourceInner> nextPage(String nextPageLink) {
                return listByTriggerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RerunTriggerResourceInner>> listByTriggerAsync(final String resourceGroupName, final String factoryName, final String triggerName, final ListOperationCallback<RerunTriggerResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTriggerSinglePageAsync(resourceGroupName, factoryName, triggerName),
            new Func1<String, Observable<ServiceResponse<Page<RerunTriggerResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> call(String nextPageLink) {
                    return listByTriggerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RerunTriggerResourceInner&gt; object
     */
    public Observable<Page<RerunTriggerResourceInner>> listByTriggerAsync(final String resourceGroupName, final String factoryName, final String triggerName) {
        return listByTriggerWithServiceResponseAsync(resourceGroupName, factoryName, triggerName)
            .map(new Func1<ServiceResponse<Page<RerunTriggerResourceInner>>, Page<RerunTriggerResourceInner>>() {
                @Override
                public Page<RerunTriggerResourceInner> call(ServiceResponse<Page<RerunTriggerResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RerunTriggerResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> listByTriggerWithServiceResponseAsync(final String resourceGroupName, final String factoryName, final String triggerName) {
        return listByTriggerSinglePageAsync(resourceGroupName, factoryName, triggerName)
            .concatMap(new Func1<ServiceResponse<Page<RerunTriggerResourceInner>>, Observable<ServiceResponse<Page<RerunTriggerResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> call(ServiceResponse<Page<RerunTriggerResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTriggerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
    ServiceResponse<PageImpl<RerunTriggerResourceInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<RerunTriggerResourceInner>> * @param factoryName The factory name.
    ServiceResponse<PageImpl<RerunTriggerResourceInner>> * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RerunTriggerResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> listByTriggerSinglePageAsync(final String resourceGroupName, final String factoryName, final String triggerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (triggerName == null) {
            throw new IllegalArgumentException("Parameter triggerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByTrigger(this.client.subscriptionId(), resourceGroupName, factoryName, triggerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RerunTriggerResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RerunTriggerResourceInner>> result = listByTriggerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RerunTriggerResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RerunTriggerResourceInner>> listByTriggerDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RerunTriggerResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RerunTriggerResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RerunTriggerResourceInner&gt; object if successful.
     */
    public PagedList<RerunTriggerResourceInner> listByTriggerNext(final String nextPageLink) {
        ServiceResponse<Page<RerunTriggerResourceInner>> response = listByTriggerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RerunTriggerResourceInner>(response.body()) {
            @Override
            public Page<RerunTriggerResourceInner> nextPage(String nextPageLink) {
                return listByTriggerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RerunTriggerResourceInner>> listByTriggerNextAsync(final String nextPageLink, final ServiceFuture<List<RerunTriggerResourceInner>> serviceFuture, final ListOperationCallback<RerunTriggerResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTriggerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RerunTriggerResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> call(String nextPageLink) {
                    return listByTriggerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RerunTriggerResourceInner&gt; object
     */
    public Observable<Page<RerunTriggerResourceInner>> listByTriggerNextAsync(final String nextPageLink) {
        return listByTriggerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RerunTriggerResourceInner>>, Page<RerunTriggerResourceInner>>() {
                @Override
                public Page<RerunTriggerResourceInner> call(ServiceResponse<Page<RerunTriggerResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RerunTriggerResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> listByTriggerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByTriggerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RerunTriggerResourceInner>>, Observable<ServiceResponse<Page<RerunTriggerResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> call(ServiceResponse<Page<RerunTriggerResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTriggerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists rerun triggers by an original trigger name.
     *
    ServiceResponse<PageImpl<RerunTriggerResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RerunTriggerResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> listByTriggerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByTriggerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RerunTriggerResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RerunTriggerResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RerunTriggerResourceInner>> result = listByTriggerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RerunTriggerResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RerunTriggerResourceInner>> listByTriggerNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RerunTriggerResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RerunTriggerResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
