/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import java.util.Map;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about an activity run in a pipeline.
 */
public class ActivityRunInner {
    /**
     * Unmatched properties from the message are deserialized this collection.
     */
    @JsonProperty(value = "")
    private Map<String, Object> additionalProperties;

    /**
     * The name of the pipeline.
     */
    @JsonProperty(value = "pipelineName", access = JsonProperty.Access.WRITE_ONLY)
    private String pipelineName;

    /**
     * The id of the pipeline run.
     */
    @JsonProperty(value = "pipelineRunId", access = JsonProperty.Access.WRITE_ONLY)
    private String pipelineRunId;

    /**
     * The name of the activity.
     */
    @JsonProperty(value = "activityName", access = JsonProperty.Access.WRITE_ONLY)
    private String activityName;

    /**
     * The type of the activity.
     */
    @JsonProperty(value = "activityType", access = JsonProperty.Access.WRITE_ONLY)
    private String activityType;

    /**
     * The id of the activity run.
     */
    @JsonProperty(value = "activityRunId", access = JsonProperty.Access.WRITE_ONLY)
    private String activityRunId;

    /**
     * The name of the compute linked service.
     */
    @JsonProperty(value = "linkedServiceName", access = JsonProperty.Access.WRITE_ONLY)
    private String linkedServiceName;

    /**
     * The status of the activity run.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /**
     * The start time of the activity run in 'ISO 8601' format.
     */
    @JsonProperty(value = "activityRunStart", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime activityRunStart;

    /**
     * The end time of the activity run in 'ISO 8601' format.
     */
    @JsonProperty(value = "activityRunEnd", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime activityRunEnd;

    /**
     * The duration of the activity run.
     */
    @JsonProperty(value = "durationInMs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer durationInMs;

    /**
     * The input for the activity.
     */
    @JsonProperty(value = "input", access = JsonProperty.Access.WRITE_ONLY)
    private Object input;

    /**
     * The output for the activity.
     */
    @JsonProperty(value = "output", access = JsonProperty.Access.WRITE_ONLY)
    private Object output;

    /**
     * The error if any from the activity run.
     */
    @JsonProperty(value = "error", access = JsonProperty.Access.WRITE_ONLY)
    private Object error;

    /**
     * Get unmatched properties from the message are deserialized this collection.
     *
     * @return the additionalProperties value
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set unmatched properties from the message are deserialized this collection.
     *
     * @param additionalProperties the additionalProperties value to set
     * @return the ActivityRunInner object itself.
     */
    public ActivityRunInner withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Get the name of the pipeline.
     *
     * @return the pipelineName value
     */
    public String pipelineName() {
        return this.pipelineName;
    }

    /**
     * Get the id of the pipeline run.
     *
     * @return the pipelineRunId value
     */
    public String pipelineRunId() {
        return this.pipelineRunId;
    }

    /**
     * Get the name of the activity.
     *
     * @return the activityName value
     */
    public String activityName() {
        return this.activityName;
    }

    /**
     * Get the type of the activity.
     *
     * @return the activityType value
     */
    public String activityType() {
        return this.activityType;
    }

    /**
     * Get the id of the activity run.
     *
     * @return the activityRunId value
     */
    public String activityRunId() {
        return this.activityRunId;
    }

    /**
     * Get the name of the compute linked service.
     *
     * @return the linkedServiceName value
     */
    public String linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * Get the status of the activity run.
     *
     * @return the status value
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the start time of the activity run in 'ISO 8601' format.
     *
     * @return the activityRunStart value
     */
    public DateTime activityRunStart() {
        return this.activityRunStart;
    }

    /**
     * Get the end time of the activity run in 'ISO 8601' format.
     *
     * @return the activityRunEnd value
     */
    public DateTime activityRunEnd() {
        return this.activityRunEnd;
    }

    /**
     * Get the duration of the activity run.
     *
     * @return the durationInMs value
     */
    public Integer durationInMs() {
        return this.durationInMs;
    }

    /**
     * Get the input for the activity.
     *
     * @return the input value
     */
    public Object input() {
        return this.input;
    }

    /**
     * Get the output for the activity.
     *
     * @return the output value
     */
    public Object output() {
        return this.output;
    }

    /**
     * Get the error if any from the activity run.
     *
     * @return the error value
     */
    public Object error() {
        return this.error;
    }

}
