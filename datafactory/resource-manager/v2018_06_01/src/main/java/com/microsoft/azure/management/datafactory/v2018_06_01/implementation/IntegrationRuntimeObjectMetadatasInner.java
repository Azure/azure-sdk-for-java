/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.datafactory.v2018_06_01.GetSsisObjectMetadataRequest;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in IntegrationRuntimeObjectMetadatas.
 */
public class IntegrationRuntimeObjectMetadatasInner {
    /** The Retrofit service to perform REST calls. */
    private IntegrationRuntimeObjectMetadatasService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of IntegrationRuntimeObjectMetadatasInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public IntegrationRuntimeObjectMetadatasInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(IntegrationRuntimeObjectMetadatasService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for IntegrationRuntimeObjectMetadatas to be
     * used by Retrofit to perform actually REST calls.
     */
    interface IntegrationRuntimeObjectMetadatasService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.IntegrationRuntimeObjectMetadatas refresh" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/refreshObjectMetadata")
        Observable<Response<ResponseBody>> refresh(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("integrationRuntimeName") String integrationRuntimeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.IntegrationRuntimeObjectMetadatas beginRefresh" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/refreshObjectMetadata")
        Observable<Response<ResponseBody>> beginRefresh(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("integrationRuntimeName") String integrationRuntimeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.IntegrationRuntimeObjectMetadatas get" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getObjectMetadata")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("integrationRuntimeName") String integrationRuntimeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body GetSsisObjectMetadataRequest getMetadataRequest, @Header("User-Agent") String userAgent);

    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SsisObjectMetadataStatusResponseInner object if successful.
     */
    public SsisObjectMetadataStatusResponseInner refresh(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        return refreshWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName).toBlocking().last().body();
    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SsisObjectMetadataStatusResponseInner> refreshAsync(String resourceGroupName, String factoryName, String integrationRuntimeName, final ServiceCallback<SsisObjectMetadataStatusResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(refreshWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName), serviceCallback);
    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SsisObjectMetadataStatusResponseInner> refreshAsync(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        return refreshWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName).map(new Func1<ServiceResponse<SsisObjectMetadataStatusResponseInner>, SsisObjectMetadataStatusResponseInner>() {
            @Override
            public SsisObjectMetadataStatusResponseInner call(ServiceResponse<SsisObjectMetadataStatusResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SsisObjectMetadataStatusResponseInner>> refreshWithServiceResponseAsync(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (integrationRuntimeName == null) {
            throw new IllegalArgumentException("Parameter integrationRuntimeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.refresh(this.client.subscriptionId(), resourceGroupName, factoryName, integrationRuntimeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<SsisObjectMetadataStatusResponseInner>() { }.getType());
    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SsisObjectMetadataStatusResponseInner object if successful.
     */
    public SsisObjectMetadataStatusResponseInner beginRefresh(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        return beginRefreshWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName).toBlocking().single().body();
    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SsisObjectMetadataStatusResponseInner> beginRefreshAsync(String resourceGroupName, String factoryName, String integrationRuntimeName, final ServiceCallback<SsisObjectMetadataStatusResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginRefreshWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName), serviceCallback);
    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SsisObjectMetadataStatusResponseInner object
     */
    public Observable<SsisObjectMetadataStatusResponseInner> beginRefreshAsync(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        return beginRefreshWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName).map(new Func1<ServiceResponse<SsisObjectMetadataStatusResponseInner>, SsisObjectMetadataStatusResponseInner>() {
            @Override
            public SsisObjectMetadataStatusResponseInner call(ServiceResponse<SsisObjectMetadataStatusResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Refresh a SSIS integration runtime object metadata.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SsisObjectMetadataStatusResponseInner object
     */
    public Observable<ServiceResponse<SsisObjectMetadataStatusResponseInner>> beginRefreshWithServiceResponseAsync(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (integrationRuntimeName == null) {
            throw new IllegalArgumentException("Parameter integrationRuntimeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginRefresh(this.client.subscriptionId(), resourceGroupName, factoryName, integrationRuntimeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SsisObjectMetadataStatusResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<SsisObjectMetadataStatusResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SsisObjectMetadataStatusResponseInner> clientResponse = beginRefreshDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SsisObjectMetadataStatusResponseInner> beginRefreshDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SsisObjectMetadataStatusResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SsisObjectMetadataStatusResponseInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SsisObjectMetadataListResponseInner object if successful.
     */
    public SsisObjectMetadataListResponseInner get(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName).toBlocking().single().body();
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SsisObjectMetadataListResponseInner> getAsync(String resourceGroupName, String factoryName, String integrationRuntimeName, final ServiceCallback<SsisObjectMetadataListResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName), serviceCallback);
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SsisObjectMetadataListResponseInner object
     */
    public Observable<SsisObjectMetadataListResponseInner> getAsync(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName).map(new Func1<ServiceResponse<SsisObjectMetadataListResponseInner>, SsisObjectMetadataListResponseInner>() {
            @Override
            public SsisObjectMetadataListResponseInner call(ServiceResponse<SsisObjectMetadataListResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SsisObjectMetadataListResponseInner object
     */
    public Observable<ServiceResponse<SsisObjectMetadataListResponseInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String integrationRuntimeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (integrationRuntimeName == null) {
            throw new IllegalArgumentException("Parameter integrationRuntimeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String metadataPath = null;
        GetSsisObjectMetadataRequest getMetadataRequest = new GetSsisObjectMetadataRequest();
        getMetadataRequest.withMetadataPath(null);
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, integrationRuntimeName, this.client.apiVersion(), this.client.acceptLanguage(), getMetadataRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SsisObjectMetadataListResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<SsisObjectMetadataListResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SsisObjectMetadataListResponseInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param metadataPath Metadata path.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SsisObjectMetadataListResponseInner object if successful.
     */
    public SsisObjectMetadataListResponseInner get(String resourceGroupName, String factoryName, String integrationRuntimeName, String metadataPath) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName, metadataPath).toBlocking().single().body();
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param metadataPath Metadata path.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SsisObjectMetadataListResponseInner> getAsync(String resourceGroupName, String factoryName, String integrationRuntimeName, String metadataPath, final ServiceCallback<SsisObjectMetadataListResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName, metadataPath), serviceCallback);
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param metadataPath Metadata path.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SsisObjectMetadataListResponseInner object
     */
    public Observable<SsisObjectMetadataListResponseInner> getAsync(String resourceGroupName, String factoryName, String integrationRuntimeName, String metadataPath) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, integrationRuntimeName, metadataPath).map(new Func1<ServiceResponse<SsisObjectMetadataListResponseInner>, SsisObjectMetadataListResponseInner>() {
            @Override
            public SsisObjectMetadataListResponseInner call(ServiceResponse<SsisObjectMetadataListResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param metadataPath Metadata path.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SsisObjectMetadataListResponseInner object
     */
    public Observable<ServiceResponse<SsisObjectMetadataListResponseInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String integrationRuntimeName, String metadataPath) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (integrationRuntimeName == null) {
            throw new IllegalArgumentException("Parameter integrationRuntimeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        GetSsisObjectMetadataRequest getMetadataRequest = null;
        if (metadataPath != null) {
            getMetadataRequest = new GetSsisObjectMetadataRequest();
            getMetadataRequest.withMetadataPath(metadataPath);
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, integrationRuntimeName, this.client.apiVersion(), this.client.acceptLanguage(), getMetadataRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SsisObjectMetadataListResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<SsisObjectMetadataListResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SsisObjectMetadataListResponseInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SsisObjectMetadataListResponseInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SsisObjectMetadataListResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SsisObjectMetadataListResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
