/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.datafactory.v2018_06_01.implementation.LinkedServiceInner;

/**
 * HDInsight linked service.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("HDInsight")
@JsonFlatten
public class HDInsightLinkedService extends LinkedServiceInner {
    /**
     * HDInsight cluster URI. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "typeProperties.clusterUri", required = true)
    private Object clusterUri;

    /**
     * HDInsight cluster user name. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "typeProperties.userName")
    private Object userName;

    /**
     * HDInsight cluster password.
     */
    @JsonProperty(value = "typeProperties.password")
    private SecretBase password;

    /**
     * The Azure Storage linked service reference.
     */
    @JsonProperty(value = "typeProperties.linkedServiceName")
    private LinkedServiceReference linkedServiceName;

    /**
     * A reference to the Azure SQL linked service that points to the HCatalog
     * database.
     */
    @JsonProperty(value = "typeProperties.hcatalogLinkedServiceName")
    private LinkedServiceReference hcatalogLinkedServiceName;

    /**
     * The encrypted credential used for authentication. Credentials are
     * encrypted using the integration runtime credential manager. Type: string
     * (or Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.encryptedCredential")
    private Object encryptedCredential;

    /**
     * Specify if the HDInsight is created with ESP (Enterprise Security
     * Package). Type: Boolean.
     */
    @JsonProperty(value = "typeProperties.isEspEnabled")
    private Object isEspEnabled;

    /**
     * Specify the FileSystem if the main storage for the HDInsight is ADLS
     * Gen2. Type: string (or Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.fileSystem")
    private Object fileSystem;

    /**
     * Get hDInsight cluster URI. Type: string (or Expression with resultType string).
     *
     * @return the clusterUri value
     */
    public Object clusterUri() {
        return this.clusterUri;
    }

    /**
     * Set hDInsight cluster URI. Type: string (or Expression with resultType string).
     *
     * @param clusterUri the clusterUri value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withClusterUri(Object clusterUri) {
        this.clusterUri = clusterUri;
        return this;
    }

    /**
     * Get hDInsight cluster user name. Type: string (or Expression with resultType string).
     *
     * @return the userName value
     */
    public Object userName() {
        return this.userName;
    }

    /**
     * Set hDInsight cluster user name. Type: string (or Expression with resultType string).
     *
     * @param userName the userName value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withUserName(Object userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get hDInsight cluster password.
     *
     * @return the password value
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set hDInsight cluster password.
     *
     * @param password the password value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the Azure Storage linked service reference.
     *
     * @return the linkedServiceName value
     */
    public LinkedServiceReference linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * Set the Azure Storage linked service reference.
     *
     * @param linkedServiceName the linkedServiceName value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withLinkedServiceName(LinkedServiceReference linkedServiceName) {
        this.linkedServiceName = linkedServiceName;
        return this;
    }

    /**
     * Get a reference to the Azure SQL linked service that points to the HCatalog database.
     *
     * @return the hcatalogLinkedServiceName value
     */
    public LinkedServiceReference hcatalogLinkedServiceName() {
        return this.hcatalogLinkedServiceName;
    }

    /**
     * Set a reference to the Azure SQL linked service that points to the HCatalog database.
     *
     * @param hcatalogLinkedServiceName the hcatalogLinkedServiceName value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withHcatalogLinkedServiceName(LinkedServiceReference hcatalogLinkedServiceName) {
        this.hcatalogLinkedServiceName = hcatalogLinkedServiceName;
        return this;
    }

    /**
     * Get the encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @return the encryptedCredential value
     */
    public Object encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @param encryptedCredential the encryptedCredential value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
     *
     * @return the isEspEnabled value
     */
    public Object isEspEnabled() {
        return this.isEspEnabled;
    }

    /**
     * Set specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
     *
     * @param isEspEnabled the isEspEnabled value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withIsEspEnabled(Object isEspEnabled) {
        this.isEspEnabled = isEspEnabled;
        return this;
    }

    /**
     * Get specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
     *
     * @return the fileSystem value
     */
    public Object fileSystem() {
        return this.fileSystem;
    }

    /**
     * Set specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
     *
     * @param fileSystem the fileSystem value to set
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService withFileSystem(Object fileSystem) {
        this.fileSystem = fileSystem;
        return this;
    }

}
