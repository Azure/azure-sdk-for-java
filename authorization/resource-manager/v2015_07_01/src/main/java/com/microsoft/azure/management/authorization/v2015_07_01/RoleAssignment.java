/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.authorization.v2015_07_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.authorization.v2015_07_01.implementation.RoleAssignmentInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.authorization.v2015_07_01.implementation.AuthorizationManager;

/**
 * Type representing RoleAssignment.
 */
public interface RoleAssignment extends HasInner<RoleAssignmentInner>, Indexable, Updatable<RoleAssignment.Update>, HasManager<AuthorizationManager> {
    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the properties value.
     */
    RoleAssignmentPropertiesWithScope properties();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the RoleAssignment definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithProvider, DefinitionStages.WithScope, DefinitionStages.WithProperties, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of RoleAssignment definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a RoleAssignment definition.
         */
        interface Blank extends WithProvider {
        }

        /**
         * The stage of the roleassignment definition allowing to specify Provider.
         */
        interface WithProvider {
           /**
            * Specifies .
            */
            WithScope withExistingProvider();
        }

        /**
         * The stage of the roleassignment definition allowing to specify Scope.
         */
        interface WithScope {
           /**
            * Specifies scope.
            */
            WithProperties withScope(String scope);
        }

        /**
         * The stage of the roleassignment definition allowing to specify Properties.
         */
        interface WithProperties {
           /**
            * Specifies properties.
            */
            WithCreate withProperties(RoleAssignmentProperties properties);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<RoleAssignment> {
        }
    }
    /**
     * The template for a RoleAssignment update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<RoleAssignment>, UpdateStages.WithProperties {
    }

    /**
     * Grouping of RoleAssignment update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the roleassignment update allowing to specify Properties.
         */
        interface WithProperties {
            /**
             * Specifies properties.
             */
            Update withProperties(RoleAssignmentProperties properties);
        }

    }
}
