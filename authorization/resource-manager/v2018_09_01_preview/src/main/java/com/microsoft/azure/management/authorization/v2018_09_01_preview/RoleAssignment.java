/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.authorization.v2018_09_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.authorization.v2018_09_01_preview.implementation.RoleAssignmentInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.authorization.v2018_09_01_preview.implementation.AuthorizationManager;

/**
 * Type representing RoleAssignment.
 */
public interface RoleAssignment extends HasInner<RoleAssignmentInner>, Indexable, Updatable<RoleAssignment.Update>, HasManager<AuthorizationManager> {
    /**
     * @return the canDelegate value.
     */
    Boolean canDelegate();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the principalId value.
     */
    String principalId();

    /**
     * @return the principalType value.
     */
    PrincipalType principalType();

    /**
     * @return the roleDefinitionId value.
     */
    String roleDefinitionId();

    /**
     * @return the scope value.
     */
    String scope();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the RoleAssignment definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithProvider, DefinitionStages.WithScope, DefinitionStages.WithPrincipalId, DefinitionStages.WithRoleDefinitionId, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of RoleAssignment definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a RoleAssignment definition.
         */
        interface Blank extends WithProvider {
        }

        /**
         * The stage of the roleassignment definition allowing to specify Provider.
         */
        interface WithProvider {
           /**
            * Specifies .
            * @return the next definition stage
            */
            WithScope withExistingProvider();
        }

        /**
         * The stage of the roleassignment definition allowing to specify Scope.
         */
        interface WithScope {
           /**
            * Specifies scope.
            * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource
            * @return the next definition stage
            */
            WithPrincipalId withScope(String scope);
        }

        /**
         * The stage of the roleassignment definition allowing to specify PrincipalId.
         */
        interface WithPrincipalId {
           /**
            * Specifies principalId.
            * @param principalId The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group
            * @return the next definition stage
            */
            WithRoleDefinitionId withPrincipalId(String principalId);
        }

        /**
         * The stage of the roleassignment definition allowing to specify RoleDefinitionId.
         */
        interface WithRoleDefinitionId {
           /**
            * Specifies roleDefinitionId.
            * @param roleDefinitionId The role definition ID used in the role assignment
            * @return the next definition stage
            */
            WithCreate withRoleDefinitionId(String roleDefinitionId);
        }

        /**
         * The stage of the roleassignment definition allowing to specify CanDelegate.
         */
        interface WithCanDelegate {
            /**
             * Specifies canDelegate.
             * @param canDelegate The delegation flag used for creating a role assignment
             * @return the next definition stage
             */
            WithCreate withCanDelegate(Boolean canDelegate);
        }

        /**
         * The stage of the roleassignment definition allowing to specify PrincipalType.
         */
        interface WithPrincipalType {
            /**
             * Specifies principalType.
             * @param principalType The principal type of the assigned principal ID. Possible values include: 'User', 'Group', 'ServicePrincipal', 'Unknown', 'DirectoryRoleTemplate', 'ForeignGroup', 'Application', 'MSI', 'DirectoryObjectOrGroup', 'Everyone'
             * @return the next definition stage
             */
            WithCreate withPrincipalType(PrincipalType principalType);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<RoleAssignment>, DefinitionStages.WithCanDelegate, DefinitionStages.WithPrincipalType {
        }
    }
    /**
     * The template for a RoleAssignment update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<RoleAssignment>, UpdateStages.WithCanDelegate, UpdateStages.WithPrincipalType {
    }

    /**
     * Grouping of RoleAssignment update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the roleassignment update allowing to specify CanDelegate.
         */
        interface WithCanDelegate {
            /**
             * Specifies canDelegate.
             * @param canDelegate The delegation flag used for creating a role assignment
             * @return the next update stage
             */
            Update withCanDelegate(Boolean canDelegate);
        }

        /**
         * The stage of the roleassignment update allowing to specify PrincipalType.
         */
        interface WithPrincipalType {
            /**
             * Specifies principalType.
             * @param principalType The principal type of the assigned principal ID. Possible values include: 'User', 'Group', 'ServicePrincipal', 'Unknown', 'DirectoryRoleTemplate', 'ForeignGroup', 'Application', 'MSI', 'DirectoryObjectOrGroup', 'Everyone'
             * @return the next update stage
             */
            Update withPrincipalType(PrincipalType principalType);
        }

    }
}
