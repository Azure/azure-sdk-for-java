/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.authorization.v2018_09_01_preview.implementation;

import com.microsoft.azure.management.authorization.v2018_09_01_preview.DenyAssignment;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import java.util.List;
import com.microsoft.azure.management.authorization.v2018_09_01_preview.Principal;
import com.microsoft.azure.management.authorization.v2018_09_01_preview.DenyAssignmentPermission;

class DenyAssignmentImpl extends WrapperImpl<DenyAssignmentInner> implements DenyAssignment {
    private final AuthorizationManager manager;
    DenyAssignmentImpl(DenyAssignmentInner inner, AuthorizationManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public AuthorizationManager manager() {
        return this.manager;
    }

    @Override
    public String denyAssignmentName() {
        return this.inner().denyAssignmentName();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public Boolean doNotApplyToChildScopes() {
        return this.inner().doNotApplyToChildScopes();
    }

    @Override
    public List<Principal> excludePrincipals() {
        return this.inner().excludePrincipals();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isSystemProtected() {
        return this.inner().isSystemProtected();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<DenyAssignmentPermission> permissions() {
        return this.inner().permissions();
    }

    @Override
    public List<Principal> principals() {
        return this.inner().principals();
    }

    @Override
    public String scope() {
        return this.inner().scope();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
