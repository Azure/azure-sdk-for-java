/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Details for upgrading vault.
 */
public class UpgradeDetails {
    /**
     * ID of the vault upgrade operation.
     */
    @JsonProperty(value = "operationId", access = JsonProperty.Access.WRITE_ONLY)
    private String operationId;

    /**
     * UTC time at which the upgrade operation has started.
     */
    @JsonProperty(value = "startTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime startTimeUtc;

    /**
     * UTC time at which the upgrade operation status was last updated.
     */
    @JsonProperty(value = "lastUpdatedTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastUpdatedTimeUtc;

    /**
     * UTC time at which the upgrade operation has ended.
     */
    @JsonProperty(value = "endTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime endTimeUtc;

    /**
     * Status of the vault upgrade operation. Possible values include:
     * 'Unknown', 'InProgress', 'Upgraded', 'Failed'.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private VaultUpgradeState status;

    /**
     * Message to the user containing information about the upgrade operation.
     */
    @JsonProperty(value = "message", access = JsonProperty.Access.WRITE_ONLY)
    private String message;

    /**
     * The way the vault upgradation was triggered. Possible values include:
     * 'UserTriggered', 'ForcedUpgrade'.
     */
    @JsonProperty(value = "triggerType", access = JsonProperty.Access.WRITE_ONLY)
    private TriggerType triggerType;

    /**
     * Resource ID of the upgraded vault.
     */
    @JsonProperty(value = "upgradedResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String upgradedResourceId;

    /**
     * Resource ID of the vault before the upgrade.
     */
    @JsonProperty(value = "previousResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String previousResourceId;

    /**
     * Get the operationId value.
     *
     * @return the operationId value
     */
    public String operationId() {
        return this.operationId;
    }

    /**
     * Get the startTimeUtc value.
     *
     * @return the startTimeUtc value
     */
    public DateTime startTimeUtc() {
        return this.startTimeUtc;
    }

    /**
     * Get the lastUpdatedTimeUtc value.
     *
     * @return the lastUpdatedTimeUtc value
     */
    public DateTime lastUpdatedTimeUtc() {
        return this.lastUpdatedTimeUtc;
    }

    /**
     * Get the endTimeUtc value.
     *
     * @return the endTimeUtc value
     */
    public DateTime endTimeUtc() {
        return this.endTimeUtc;
    }

    /**
     * Get the status value.
     *
     * @return the status value
     */
    public VaultUpgradeState status() {
        return this.status;
    }

    /**
     * Get the message value.
     *
     * @return the message value
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the triggerType value.
     *
     * @return the triggerType value
     */
    public TriggerType triggerType() {
        return this.triggerType;
    }

    /**
     * Get the upgradedResourceId value.
     *
     * @return the upgradedResourceId value
     */
    public String upgradedResourceId() {
        return this.upgradedResourceId;
    }

    /**
     * Get the previousResourceId value.
     *
     * @return the previousResourceId value
     */
    public String previousResourceId() {
        return this.previousResourceId;
    }

}
