/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AddsServicesUserPreferences.
 */
public class AddsServicesUserPreferencesInner implements InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private AddsServicesUserPreferencesService service;
    /** The service client containing this operation class. */
    private ADHybridHealthServiceImpl client;

    /**
     * Initializes an instance of AddsServicesUserPreferencesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AddsServicesUserPreferencesInner(Retrofit retrofit, ADHybridHealthServiceImpl client) {
        this.service = retrofit.create(AddsServicesUserPreferencesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AddsServicesUserPreferences to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AddsServicesUserPreferencesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServicesUserPreferences get" })
        @GET("providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference")
        Observable<Response<ResponseBody>> get(@Path("serviceName") String serviceName, @Path("featureName") String featureName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServicesUserPreferences delete" })
        @HTTP(path = "providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("serviceName") String serviceName, @Path("featureName") String featureName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServicesUserPreferences add" })
        @POST("providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference")
        Observable<Response<ResponseBody>> add(@Path("serviceName") String serviceName, @Path("featureName") String featureName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UserPreferenceInner setting, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserPreferenceInner object if successful.
     */
    public UserPreferenceInner get(String serviceName, String featureName) {
        return getWithServiceResponseAsync(serviceName, featureName).toBlocking().single().body();
    }

    /**
     * Gets the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UserPreferenceInner> getAsync(String serviceName, String featureName, final ServiceCallback<UserPreferenceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(serviceName, featureName), serviceCallback);
    }

    /**
     * Gets the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserPreferenceInner object
     */
    public Observable<UserPreferenceInner> getAsync(String serviceName, String featureName) {
        return getWithServiceResponseAsync(serviceName, featureName).map(new Func1<ServiceResponse<UserPreferenceInner>, UserPreferenceInner>() {
            @Override
            public UserPreferenceInner call(ServiceResponse<UserPreferenceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserPreferenceInner object
     */
    public Observable<ServiceResponse<UserPreferenceInner>> getWithServiceResponseAsync(String serviceName, String featureName) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (featureName == null) {
            throw new IllegalArgumentException("Parameter featureName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(serviceName, featureName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UserPreferenceInner>>>() {
                @Override
                public Observable<ServiceResponse<UserPreferenceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UserPreferenceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UserPreferenceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UserPreferenceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UserPreferenceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String serviceName, String featureName) {
        deleteWithServiceResponseAsync(serviceName, featureName).toBlocking().single().body();
    }

    /**
     * Deletes the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String serviceName, String featureName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(serviceName, featureName), serviceCallback);
    }

    /**
     * Deletes the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String serviceName, String featureName) {
        return deleteWithServiceResponseAsync(serviceName, featureName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String serviceName, String featureName) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (featureName == null) {
            throw new IllegalArgumentException("Parameter featureName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(serviceName, featureName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void add(String serviceName, String featureName) {
        addWithServiceResponseAsync(serviceName, featureName).toBlocking().single().body();
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> addAsync(String serviceName, String featureName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(addWithServiceResponseAsync(serviceName, featureName), serviceCallback);
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> addAsync(String serviceName, String featureName) {
        return addWithServiceResponseAsync(serviceName, featureName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> addWithServiceResponseAsync(String serviceName, String featureName) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (featureName == null) {
            throw new IllegalArgumentException("Parameter featureName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final List<String> metricNames = null;
        UserPreferenceInner setting = new UserPreferenceInner();
        setting.withMetricNames(null);
        return service.add(serviceName, featureName, this.client.apiVersion(), this.client.acceptLanguage(), setting, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = addDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @param metricNames The name of the metric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void add(String serviceName, String featureName, List<String> metricNames) {
        addWithServiceResponseAsync(serviceName, featureName, metricNames).toBlocking().single().body();
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @param metricNames The name of the metric.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> addAsync(String serviceName, String featureName, List<String> metricNames, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(addWithServiceResponseAsync(serviceName, featureName, metricNames), serviceCallback);
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @param metricNames The name of the metric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> addAsync(String serviceName, String featureName, List<String> metricNames) {
        return addWithServiceResponseAsync(serviceName, featureName, metricNames).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds the user preferences for a given feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @param metricNames The name of the metric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> addWithServiceResponseAsync(String serviceName, String featureName, List<String> metricNames) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (featureName == null) {
            throw new IllegalArgumentException("Parameter featureName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(metricNames);
        UserPreferenceInner setting = new UserPreferenceInner();
        setting.withMetricNames(metricNames);
        return service.add(serviceName, featureName, this.client.apiVersion(), this.client.acceptLanguage(), setting, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = addDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> addDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
