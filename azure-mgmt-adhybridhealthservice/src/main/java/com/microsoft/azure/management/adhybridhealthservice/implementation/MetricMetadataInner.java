/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.implementation;

import java.util.List;
import com.microsoft.azure.management.adhybridhealthservice.MetricGroup;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The metric meta data.
 */
public class MetricMetadataInner {
    /**
     * The name of the class which retrieve and process the metric.
     */
    @JsonProperty(value = "metricsProcessorClassName")
    private String metricsProcessorClassName;

    /**
     * The metric name.
     */
    @JsonProperty(value = "metricName")
    private String metricName;

    /**
     * The groupings for the metrics.
     */
    @JsonProperty(value = "groupings")
    private List<MetricGroup> groupings;

    /**
     * The display name for the metric.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /**
     * Indicates if the metrics is a rate,value, percent or duration type.
     */
    @JsonProperty(value = "valueKind")
    private String valueKind;

    /**
     * The minimum value.
     */
    @JsonProperty(value = "minValue")
    private Integer minValue;

    /**
     * The maximum value.
     */
    @JsonProperty(value = "maxValue")
    private Integer maxValue;

    /**
     * Indicates whether the dashboard to represent the metric is a line,
     * bar,pie, area or donut chart.
     */
    @JsonProperty(value = "kind")
    private String kind;

    /**
     * Indicates if the metric is a default metric or not.
     */
    @JsonProperty(value = "isDefault")
    private Boolean isDefault;

    /**
     * Indicates if the metric is a performance counter metric or not.
     */
    @JsonProperty(value = "isPerfCounter")
    private Boolean isPerfCounter;

    /**
     * Indicates if the metric is visible to DevOps or not.
     */
    @JsonProperty(value = "isDevOps")
    private Boolean isDevOps;

    /**
     * Get the name of the class which retrieve and process the metric.
     *
     * @return the metricsProcessorClassName value
     */
    public String metricsProcessorClassName() {
        return this.metricsProcessorClassName;
    }

    /**
     * Set the name of the class which retrieve and process the metric.
     *
     * @param metricsProcessorClassName the metricsProcessorClassName value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withMetricsProcessorClassName(String metricsProcessorClassName) {
        this.metricsProcessorClassName = metricsProcessorClassName;
        return this;
    }

    /**
     * Get the metric name.
     *
     * @return the metricName value
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metric name.
     *
     * @param metricName the metricName value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the groupings for the metrics.
     *
     * @return the groupings value
     */
    public List<MetricGroup> groupings() {
        return this.groupings;
    }

    /**
     * Set the groupings for the metrics.
     *
     * @param groupings the groupings value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withGroupings(List<MetricGroup> groupings) {
        this.groupings = groupings;
        return this;
    }

    /**
     * Get the display name for the metric.
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the display name for the metric.
     *
     * @param displayName the displayName value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get indicates if the metrics is a rate,value, percent or duration type.
     *
     * @return the valueKind value
     */
    public String valueKind() {
        return this.valueKind;
    }

    /**
     * Set indicates if the metrics is a rate,value, percent or duration type.
     *
     * @param valueKind the valueKind value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withValueKind(String valueKind) {
        this.valueKind = valueKind;
        return this;
    }

    /**
     * Get the minimum value.
     *
     * @return the minValue value
     */
    public Integer minValue() {
        return this.minValue;
    }

    /**
     * Set the minimum value.
     *
     * @param minValue the minValue value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withMinValue(Integer minValue) {
        this.minValue = minValue;
        return this;
    }

    /**
     * Get the maximum value.
     *
     * @return the maxValue value
     */
    public Integer maxValue() {
        return this.maxValue;
    }

    /**
     * Set the maximum value.
     *
     * @param maxValue the maxValue value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withMaxValue(Integer maxValue) {
        this.maxValue = maxValue;
        return this;
    }

    /**
     * Get indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.
     *
     * @return the kind value
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.
     *
     * @param kind the kind value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get indicates if the metric is a default metric or not.
     *
     * @return the isDefault value
     */
    public Boolean isDefault() {
        return this.isDefault;
    }

    /**
     * Set indicates if the metric is a default metric or not.
     *
     * @param isDefault the isDefault value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withIsDefault(Boolean isDefault) {
        this.isDefault = isDefault;
        return this;
    }

    /**
     * Get indicates if the metric is a performance counter metric or not.
     *
     * @return the isPerfCounter value
     */
    public Boolean isPerfCounter() {
        return this.isPerfCounter;
    }

    /**
     * Set indicates if the metric is a performance counter metric or not.
     *
     * @param isPerfCounter the isPerfCounter value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withIsPerfCounter(Boolean isPerfCounter) {
        this.isPerfCounter = isPerfCounter;
        return this;
    }

    /**
     * Get indicates if the metric is visible to DevOps or not.
     *
     * @return the isDevOps value
     */
    public Boolean isDevOps() {
        return this.isDevOps;
    }

    /**
     * Set indicates if the metric is visible to DevOps or not.
     *
     * @param isDevOps the isDevOps value to set
     * @return the MetricMetadataInner object itself.
     */
    public MetricMetadataInner withIsDevOps(Boolean isDevOps) {
        this.isDevOps = isDevOps;
        return this;
    }

}
