/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The import error details.
 */
public class ImportError {
    /**
     * The error Id.
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * The run step result Id.
     */
    @JsonProperty(value = "runStepResultId")
    private String runStepResultId;

    /**
     * The connector Id.
     */
    @JsonProperty(value = "connectorId")
    private String connectorId;

    /**
     * The type of error.
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * The time when the import error occurred.
     */
    @JsonProperty(value = "timeOccurred")
    private DateTime timeOccurred;

    /**
     * The time when the import error first occurred.
     */
    @JsonProperty(value = "timeFirstOccurred")
    private DateTime timeFirstOccurred;

    /**
     * The retry count.
     */
    @JsonProperty(value = "retryCount")
    private Integer retryCount;

    /**
     * The operation type specific  to error reporting. Possible values
     * include: 'Undefined', 'Staging', 'ConnectorFilter', 'Join',
     * 'Projection', 'ImportFlow', 'Provisioning', 'ValidateConnectorFilter',
     * 'Deprovisioning', 'ExportFlow', 'MvDeletion', 'Recall',
     * 'MvObjectTypeChange'.
     */
    @JsonProperty(value = "algorithmStepType")
    private AlgorithmStepType algorithmStepType;

    /**
     * The change details that is not re-imported.
     */
    @JsonProperty(value = "changeNotReimported")
    private ChangeNotReimported changeNotReimported;

    /**
     * The extension error information.
     */
    @JsonProperty(value = "extensionErrorInfo")
    private ExtensionErrorInfo extensionErrorInfo;

    /**
     * The error details in legacy rule processing.
     */
    @JsonProperty(value = "ruleErrorInfo")
    private RuleErrorInfo ruleErrorInfo;

    /**
     * The object Id.
     */
    @JsonProperty(value = "csObjectId")
    private String csObjectId;

    /**
     * The distinguished name.
     */
    @JsonProperty(value = "dn")
    private String dn;

    /**
     * Get the error Id.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the error Id.
     *
     * @param id the id value to set
     * @return the ImportError object itself.
     */
    public ImportError withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the run step result Id.
     *
     * @return the runStepResultId value
     */
    public String runStepResultId() {
        return this.runStepResultId;
    }

    /**
     * Set the run step result Id.
     *
     * @param runStepResultId the runStepResultId value to set
     * @return the ImportError object itself.
     */
    public ImportError withRunStepResultId(String runStepResultId) {
        this.runStepResultId = runStepResultId;
        return this;
    }

    /**
     * Get the connector Id.
     *
     * @return the connectorId value
     */
    public String connectorId() {
        return this.connectorId;
    }

    /**
     * Set the connector Id.
     *
     * @param connectorId the connectorId value to set
     * @return the ImportError object itself.
     */
    public ImportError withConnectorId(String connectorId) {
        this.connectorId = connectorId;
        return this;
    }

    /**
     * Get the type of error.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type of error.
     *
     * @param type the type value to set
     * @return the ImportError object itself.
     */
    public ImportError withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the time when the import error occurred.
     *
     * @return the timeOccurred value
     */
    public DateTime timeOccurred() {
        return this.timeOccurred;
    }

    /**
     * Set the time when the import error occurred.
     *
     * @param timeOccurred the timeOccurred value to set
     * @return the ImportError object itself.
     */
    public ImportError withTimeOccurred(DateTime timeOccurred) {
        this.timeOccurred = timeOccurred;
        return this;
    }

    /**
     * Get the time when the import error first occurred.
     *
     * @return the timeFirstOccurred value
     */
    public DateTime timeFirstOccurred() {
        return this.timeFirstOccurred;
    }

    /**
     * Set the time when the import error first occurred.
     *
     * @param timeFirstOccurred the timeFirstOccurred value to set
     * @return the ImportError object itself.
     */
    public ImportError withTimeFirstOccurred(DateTime timeFirstOccurred) {
        this.timeFirstOccurred = timeFirstOccurred;
        return this;
    }

    /**
     * Get the retry count.
     *
     * @return the retryCount value
     */
    public Integer retryCount() {
        return this.retryCount;
    }

    /**
     * Set the retry count.
     *
     * @param retryCount the retryCount value to set
     * @return the ImportError object itself.
     */
    public ImportError withRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
        return this;
    }

    /**
     * Get the operation type specific  to error reporting. Possible values include: 'Undefined', 'Staging', 'ConnectorFilter', 'Join', 'Projection', 'ImportFlow', 'Provisioning', 'ValidateConnectorFilter', 'Deprovisioning', 'ExportFlow', 'MvDeletion', 'Recall', 'MvObjectTypeChange'.
     *
     * @return the algorithmStepType value
     */
    public AlgorithmStepType algorithmStepType() {
        return this.algorithmStepType;
    }

    /**
     * Set the operation type specific  to error reporting. Possible values include: 'Undefined', 'Staging', 'ConnectorFilter', 'Join', 'Projection', 'ImportFlow', 'Provisioning', 'ValidateConnectorFilter', 'Deprovisioning', 'ExportFlow', 'MvDeletion', 'Recall', 'MvObjectTypeChange'.
     *
     * @param algorithmStepType the algorithmStepType value to set
     * @return the ImportError object itself.
     */
    public ImportError withAlgorithmStepType(AlgorithmStepType algorithmStepType) {
        this.algorithmStepType = algorithmStepType;
        return this;
    }

    /**
     * Get the change details that is not re-imported.
     *
     * @return the changeNotReimported value
     */
    public ChangeNotReimported changeNotReimported() {
        return this.changeNotReimported;
    }

    /**
     * Set the change details that is not re-imported.
     *
     * @param changeNotReimported the changeNotReimported value to set
     * @return the ImportError object itself.
     */
    public ImportError withChangeNotReimported(ChangeNotReimported changeNotReimported) {
        this.changeNotReimported = changeNotReimported;
        return this;
    }

    /**
     * Get the extension error information.
     *
     * @return the extensionErrorInfo value
     */
    public ExtensionErrorInfo extensionErrorInfo() {
        return this.extensionErrorInfo;
    }

    /**
     * Set the extension error information.
     *
     * @param extensionErrorInfo the extensionErrorInfo value to set
     * @return the ImportError object itself.
     */
    public ImportError withExtensionErrorInfo(ExtensionErrorInfo extensionErrorInfo) {
        this.extensionErrorInfo = extensionErrorInfo;
        return this;
    }

    /**
     * Get the error details in legacy rule processing.
     *
     * @return the ruleErrorInfo value
     */
    public RuleErrorInfo ruleErrorInfo() {
        return this.ruleErrorInfo;
    }

    /**
     * Set the error details in legacy rule processing.
     *
     * @param ruleErrorInfo the ruleErrorInfo value to set
     * @return the ImportError object itself.
     */
    public ImportError withRuleErrorInfo(RuleErrorInfo ruleErrorInfo) {
        this.ruleErrorInfo = ruleErrorInfo;
        return this;
    }

    /**
     * Get the object Id.
     *
     * @return the csObjectId value
     */
    public String csObjectId() {
        return this.csObjectId;
    }

    /**
     * Set the object Id.
     *
     * @param csObjectId the csObjectId value to set
     * @return the ImportError object itself.
     */
    public ImportError withCsObjectId(String csObjectId) {
        this.csObjectId = csObjectId;
        return this;
    }

    /**
     * Get the distinguished name.
     *
     * @return the dn value
     */
    public String dn() {
        return this.dn;
    }

    /**
     * Set the distinguished name.
     *
     * @param dn the dn value to set
     * @return the ImportError object itself.
     */
    public ImportError withDn(String dn) {
        this.dn = dn;
        return this;
    }

}
