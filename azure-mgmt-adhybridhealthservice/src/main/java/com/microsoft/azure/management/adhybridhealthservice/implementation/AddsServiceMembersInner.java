/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AddsServiceMembers.
 */
public class AddsServiceMembersInner implements InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private AddsServiceMembersService service;
    /** The service client containing this operation class. */
    private ADHybridHealthServiceImpl client;

    /**
     * Initializes an instance of AddsServiceMembersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AddsServiceMembersInner(Retrofit retrofit, ADHybridHealthServiceImpl client) {
        this.service = retrofit.create(AddsServiceMembersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AddsServiceMembers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AddsServiceMembersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServiceMembers list" })
        @GET("providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/addsservicemembers")
        Observable<Response<ResponseBody>> list(@Path("serviceName") String serviceName, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServiceMembers get" })
        @GET("providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}")
        Observable<Response<ResponseBody>> get(@Path("serviceName") String serviceName, @Path("serviceMemberId") UUID serviceMemberId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServiceMembers delete" })
        @HTTP(path = "providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("serviceName") String serviceName, @Path("serviceMemberId") UUID serviceMemberId, @Query("confirm") Boolean confirm, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServiceMembers listCredentials" })
        @GET("providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/credentials")
        Observable<Response<ResponseBody>> listCredentials(@Path("serviceName") String serviceName, @Path("serviceMemberId") UUID serviceMemberId, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.AddsServiceMembers listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AddsServiceMemberInner&gt; object if successful.
     */
    public PagedList<AddsServiceMemberInner> list(final String serviceName) {
        ServiceResponse<Page<AddsServiceMemberInner>> response = listSinglePageAsync(serviceName).toBlocking().single();
        return new PagedList<AddsServiceMemberInner>(response.body()) {
            @Override
            public Page<AddsServiceMemberInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AddsServiceMemberInner>> listAsync(final String serviceName, final ListOperationCallback<AddsServiceMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(serviceName),
            new Func1<String, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AddsServiceMemberInner&gt; object
     */
    public Observable<Page<AddsServiceMemberInner>> listAsync(final String serviceName) {
        return listWithServiceResponseAsync(serviceName)
            .map(new Func1<ServiceResponse<Page<AddsServiceMemberInner>>, Page<AddsServiceMemberInner>>() {
                @Override
                public Page<AddsServiceMemberInner> call(ServiceResponse<Page<AddsServiceMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AddsServiceMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> listWithServiceResponseAsync(final String serviceName) {
        return listSinglePageAsync(serviceName)
            .concatMap(new Func1<ServiceResponse<Page<AddsServiceMemberInner>>, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(ServiceResponse<Page<AddsServiceMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AddsServiceMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> listSinglePageAsync(final String serviceName) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(serviceName, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AddsServiceMemberInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AddsServiceMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @param filter The server property filter to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AddsServiceMemberInner&gt; object if successful.
     */
    public PagedList<AddsServiceMemberInner> list(final String serviceName, final String filter) {
        ServiceResponse<Page<AddsServiceMemberInner>> response = listSinglePageAsync(serviceName, filter).toBlocking().single();
        return new PagedList<AddsServiceMemberInner>(response.body()) {
            @Override
            public Page<AddsServiceMemberInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @param filter The server property filter to apply.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AddsServiceMemberInner>> listAsync(final String serviceName, final String filter, final ListOperationCallback<AddsServiceMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(serviceName, filter),
            new Func1<String, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @param filter The server property filter to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AddsServiceMemberInner&gt; object
     */
    public Observable<Page<AddsServiceMemberInner>> listAsync(final String serviceName, final String filter) {
        return listWithServiceResponseAsync(serviceName, filter)
            .map(new Func1<ServiceResponse<Page<AddsServiceMemberInner>>, Page<AddsServiceMemberInner>>() {
                @Override
                public Page<AddsServiceMemberInner> call(ServiceResponse<Page<AddsServiceMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @param filter The server property filter to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AddsServiceMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> listWithServiceResponseAsync(final String serviceName, final String filter) {
        return listSinglePageAsync(serviceName, filter)
            .concatMap(new Func1<ServiceResponse<Page<AddsServiceMemberInner>>, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(ServiceResponse<Page<AddsServiceMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
    ServiceResponse<PageImpl<AddsServiceMemberInner>> * @param serviceName The name of the service.
    ServiceResponse<PageImpl<AddsServiceMemberInner>> * @param filter The server property filter to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AddsServiceMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> listSinglePageAsync(final String serviceName, final String filter) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(serviceName, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AddsServiceMemberInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AddsServiceMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AddsServiceMemberInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AddsServiceMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AddsServiceMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceMemberInner object if successful.
     */
    public ServiceMemberInner get(String serviceName, UUID serviceMemberId) {
        return getWithServiceResponseAsync(serviceName, serviceMemberId).toBlocking().single().body();
    }

    /**
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceMemberInner> getAsync(String serviceName, UUID serviceMemberId, final ServiceCallback<ServiceMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(serviceName, serviceMemberId), serviceCallback);
    }

    /**
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceMemberInner object
     */
    public Observable<ServiceMemberInner> getAsync(String serviceName, UUID serviceMemberId) {
        return getWithServiceResponseAsync(serviceName, serviceMemberId).map(new Func1<ServiceResponse<ServiceMemberInner>, ServiceMemberInner>() {
            @Override
            public ServiceMemberInner call(ServiceResponse<ServiceMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceMemberInner object
     */
    public Observable<ServiceResponse<ServiceMemberInner>> getWithServiceResponseAsync(String serviceName, UUID serviceMemberId) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(serviceName, serviceMemberId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceMemberInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceMemberInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceMemberInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceMemberInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceMemberInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceMemberInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String serviceName, UUID serviceMemberId) {
        deleteWithServiceResponseAsync(serviceName, serviceMemberId).toBlocking().single().body();
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String serviceName, UUID serviceMemberId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(serviceName, serviceMemberId), serviceCallback);
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String serviceName, UUID serviceMemberId) {
        return deleteWithServiceResponseAsync(serviceName, serviceMemberId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String serviceName, UUID serviceMemberId) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Boolean confirm = null;
        return service.delete(serviceName, serviceMemberId, confirm, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String serviceName, UUID serviceMemberId, Boolean confirm) {
        deleteWithServiceResponseAsync(serviceName, serviceMemberId, confirm).toBlocking().single().body();
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String serviceName, UUID serviceMemberId, Boolean confirm, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(serviceName, serviceMemberId, confirm), serviceCallback);
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String serviceName, UUID serviceMemberId, Boolean confirm) {
        return deleteWithServiceResponseAsync(serviceName, serviceMemberId, confirm).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String serviceName, UUID serviceMemberId, Boolean confirm) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(serviceName, serviceMemberId, confirm, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CredentialInner&gt; object if successful.
     */
    public List<CredentialInner> listCredentials(String serviceName, UUID serviceMemberId) {
        return listCredentialsWithServiceResponseAsync(serviceName, serviceMemberId).toBlocking().single().body();
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CredentialInner>> listCredentialsAsync(String serviceName, UUID serviceMemberId, final ServiceCallback<List<CredentialInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listCredentialsWithServiceResponseAsync(serviceName, serviceMemberId), serviceCallback);
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CredentialInner&gt; object
     */
    public Observable<List<CredentialInner>> listCredentialsAsync(String serviceName, UUID serviceMemberId) {
        return listCredentialsWithServiceResponseAsync(serviceName, serviceMemberId).map(new Func1<ServiceResponse<List<CredentialInner>>, List<CredentialInner>>() {
            @Override
            public List<CredentialInner> call(ServiceResponse<List<CredentialInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CredentialInner&gt; object
     */
    public Observable<ServiceResponse<List<CredentialInner>>> listCredentialsWithServiceResponseAsync(String serviceName, UUID serviceMemberId) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listCredentials(serviceName, serviceMemberId, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CredentialInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<CredentialInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<CredentialInner>> result = listCredentialsDelegate(response);
                        List<CredentialInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<CredentialInner>> clientResponse = new ServiceResponse<List<CredentialInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param filter The property filter to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CredentialInner&gt; object if successful.
     */
    public List<CredentialInner> listCredentials(String serviceName, UUID serviceMemberId, String filter) {
        return listCredentialsWithServiceResponseAsync(serviceName, serviceMemberId, filter).toBlocking().single().body();
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param filter The property filter to apply.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CredentialInner>> listCredentialsAsync(String serviceName, UUID serviceMemberId, String filter, final ServiceCallback<List<CredentialInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listCredentialsWithServiceResponseAsync(serviceName, serviceMemberId, filter), serviceCallback);
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param filter The property filter to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CredentialInner&gt; object
     */
    public Observable<List<CredentialInner>> listCredentialsAsync(String serviceName, UUID serviceMemberId, String filter) {
        return listCredentialsWithServiceResponseAsync(serviceName, serviceMemberId, filter).map(new Func1<ServiceResponse<List<CredentialInner>>, List<CredentialInner>>() {
            @Override
            public List<CredentialInner> call(ServiceResponse<List<CredentialInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param filter The property filter to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CredentialInner&gt; object
     */
    public Observable<ServiceResponse<List<CredentialInner>>> listCredentialsWithServiceResponseAsync(String serviceName, UUID serviceMemberId, String filter) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listCredentials(serviceName, serviceMemberId, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CredentialInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<CredentialInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<CredentialInner>> result = listCredentialsDelegate(response);
                        List<CredentialInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<CredentialInner>> clientResponse = new ServiceResponse<List<CredentialInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<CredentialInner>> listCredentialsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<CredentialInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<CredentialInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AddsServiceMemberInner&gt; object if successful.
     */
    public PagedList<AddsServiceMemberInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<AddsServiceMemberInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AddsServiceMemberInner>(response.body()) {
            @Override
            public Page<AddsServiceMemberInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AddsServiceMemberInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<AddsServiceMemberInner>> serviceFuture, final ListOperationCallback<AddsServiceMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AddsServiceMemberInner&gt; object
     */
    public Observable<Page<AddsServiceMemberInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AddsServiceMemberInner>>, Page<AddsServiceMemberInner>>() {
                @Override
                public Page<AddsServiceMemberInner> call(ServiceResponse<Page<AddsServiceMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AddsServiceMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AddsServiceMemberInner>>, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(ServiceResponse<Page<AddsServiceMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     *
    ServiceResponse<PageImpl<AddsServiceMemberInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AddsServiceMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AddsServiceMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AddsServiceMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AddsServiceMemberInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AddsServiceMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AddsServiceMemberInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AddsServiceMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AddsServiceMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
