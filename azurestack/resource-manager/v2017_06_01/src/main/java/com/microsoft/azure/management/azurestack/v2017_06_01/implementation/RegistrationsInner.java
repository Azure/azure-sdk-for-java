/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.azurestack.v2017_06_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.azurestack.v2017_06_01.ErrorResponseException;
import com.microsoft.azure.management.azurestack.v2017_06_01.RegistrationParameter;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Registrations.
 */
public class RegistrationsInner implements InnerSupportsGet<RegistrationInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private RegistrationsService service;
    /** The service client containing this operation class. */
    private AzureStackManagementClientImpl client;

    /**
     * Initializes an instance of RegistrationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RegistrationsInner(Retrofit retrofit, AzureStackManagementClientImpl client) {
        this.service = retrofit.create(RegistrationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Registrations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RegistrationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.Registrations listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.Registrations getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.Registrations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.Registrations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Query("api-version") String apiVersion, @Body RegistrationParameter token, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.Registrations update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Query("api-version") String apiVersion, @Body RegistrationParameter token, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.Registrations getActivationKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/getactivationkey")
        Observable<Response<ResponseBody>> getActivationKey(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.Registrations listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Returns a list of all registrations.
     *
     * @param resourceGroup Name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RegistrationInner&gt; object if successful.
     */
    public PagedList<RegistrationInner> listByResourceGroup(final String resourceGroup) {
        ServiceResponse<Page<RegistrationInner>> response = listByResourceGroupSinglePageAsync(resourceGroup).toBlocking().single();
        return new PagedList<RegistrationInner>(response.body()) {
            @Override
            public Page<RegistrationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns a list of all registrations.
     *
     * @param resourceGroup Name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RegistrationInner>> listByResourceGroupAsync(final String resourceGroup, final ListOperationCallback<RegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroup),
            new Func1<String, Observable<ServiceResponse<Page<RegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RegistrationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns a list of all registrations.
     *
     * @param resourceGroup Name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RegistrationInner&gt; object
     */
    public Observable<Page<RegistrationInner>> listByResourceGroupAsync(final String resourceGroup) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroup)
            .map(new Func1<ServiceResponse<Page<RegistrationInner>>, Page<RegistrationInner>>() {
                @Override
                public Page<RegistrationInner> call(ServiceResponse<Page<RegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns a list of all registrations.
     *
     * @param resourceGroup Name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RegistrationInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroup) {
        return listByResourceGroupSinglePageAsync(resourceGroup)
            .concatMap(new Func1<ServiceResponse<Page<RegistrationInner>>, Observable<ServiceResponse<Page<RegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RegistrationInner>>> call(ServiceResponse<Page<RegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns a list of all registrations.
     *
    ServiceResponse<PageImpl<RegistrationInner>> * @param resourceGroup Name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RegistrationInner>>> listByResourceGroupSinglePageAsync(final String resourceGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroup, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RegistrationInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RegistrationInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RegistrationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RegistrationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Returns the properties of an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegistrationInner object if successful.
     */
    public RegistrationInner getByResourceGroup(String resourceGroup, String registrationName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroup, registrationName).toBlocking().single().body();
    }

    /**
     * Returns the properties of an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegistrationInner> getByResourceGroupAsync(String resourceGroup, String registrationName, final ServiceCallback<RegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroup, registrationName), serviceCallback);
    }

    /**
     * Returns the properties of an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistrationInner object
     */
    public Observable<RegistrationInner> getByResourceGroupAsync(String resourceGroup, String registrationName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroup, registrationName).map(new Func1<ServiceResponse<RegistrationInner>, RegistrationInner>() {
            @Override
            public RegistrationInner call(ServiceResponse<RegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns the properties of an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistrationInner object
     */
    public Observable<ServiceResponse<RegistrationInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroup, String registrationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroup, registrationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<RegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RegistrationInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RegistrationInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegistrationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegistrationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete the requested Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroup, String registrationName) {
        deleteWithServiceResponseAsync(resourceGroup, registrationName).toBlocking().single().body();
    }

    /**
     * Delete the requested Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroup, String registrationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroup, registrationName), serviceCallback);
    }

    /**
     * Delete the requested Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroup, String registrationName) {
        return deleteWithServiceResponseAsync(resourceGroup, registrationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the requested Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroup, String registrationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroup, registrationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create or update an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegistrationInner object if successful.
     */
    public RegistrationInner createOrUpdate(String resourceGroup, String registrationName, RegistrationParameter token) {
        return createOrUpdateWithServiceResponseAsync(resourceGroup, registrationName, token).toBlocking().single().body();
    }

    /**
     * Create or update an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegistrationInner> createOrUpdateAsync(String resourceGroup, String registrationName, RegistrationParameter token, final ServiceCallback<RegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroup, registrationName, token), serviceCallback);
    }

    /**
     * Create or update an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistrationInner object
     */
    public Observable<RegistrationInner> createOrUpdateAsync(String resourceGroup, String registrationName, RegistrationParameter token) {
        return createOrUpdateWithServiceResponseAsync(resourceGroup, registrationName, token).map(new Func1<ServiceResponse<RegistrationInner>, RegistrationInner>() {
            @Override
            public RegistrationInner call(ServiceResponse<RegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistrationInner object
     */
    public Observable<ServiceResponse<RegistrationInner>> createOrUpdateWithServiceResponseAsync(String resourceGroup, String registrationName, RegistrationParameter token) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (token == null) {
            throw new IllegalArgumentException("Parameter token is required and cannot be null.");
        }
        Validator.validate(token);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroup, registrationName, this.client.apiVersion(), token, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<RegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RegistrationInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RegistrationInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegistrationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegistrationInner>() { }.getType())
                .register(201, new TypeToken<RegistrationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Patch an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegistrationInner object if successful.
     */
    public RegistrationInner update(String resourceGroup, String registrationName, RegistrationParameter token) {
        return updateWithServiceResponseAsync(resourceGroup, registrationName, token).toBlocking().single().body();
    }

    /**
     * Patch an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegistrationInner> updateAsync(String resourceGroup, String registrationName, RegistrationParameter token, final ServiceCallback<RegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroup, registrationName, token), serviceCallback);
    }

    /**
     * Patch an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistrationInner object
     */
    public Observable<RegistrationInner> updateAsync(String resourceGroup, String registrationName, RegistrationParameter token) {
        return updateWithServiceResponseAsync(resourceGroup, registrationName, token).map(new Func1<ServiceResponse<RegistrationInner>, RegistrationInner>() {
            @Override
            public RegistrationInner call(ServiceResponse<RegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch an Azure Stack registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param token Registration token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegistrationInner object
     */
    public Observable<ServiceResponse<RegistrationInner>> updateWithServiceResponseAsync(String resourceGroup, String registrationName, RegistrationParameter token) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (token == null) {
            throw new IllegalArgumentException("Parameter token is required and cannot be null.");
        }
        Validator.validate(token);
        return service.update(this.client.subscriptionId(), resourceGroup, registrationName, this.client.apiVersion(), token, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<RegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RegistrationInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RegistrationInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegistrationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegistrationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Returns Azure Stack Activation Key.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActivationKeyResultInner object if successful.
     */
    public ActivationKeyResultInner getActivationKey(String resourceGroup, String registrationName) {
        return getActivationKeyWithServiceResponseAsync(resourceGroup, registrationName).toBlocking().single().body();
    }

    /**
     * Returns Azure Stack Activation Key.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActivationKeyResultInner> getActivationKeyAsync(String resourceGroup, String registrationName, final ServiceCallback<ActivationKeyResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(getActivationKeyWithServiceResponseAsync(resourceGroup, registrationName), serviceCallback);
    }

    /**
     * Returns Azure Stack Activation Key.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActivationKeyResultInner object
     */
    public Observable<ActivationKeyResultInner> getActivationKeyAsync(String resourceGroup, String registrationName) {
        return getActivationKeyWithServiceResponseAsync(resourceGroup, registrationName).map(new Func1<ServiceResponse<ActivationKeyResultInner>, ActivationKeyResultInner>() {
            @Override
            public ActivationKeyResultInner call(ServiceResponse<ActivationKeyResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns Azure Stack Activation Key.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActivationKeyResultInner object
     */
    public Observable<ServiceResponse<ActivationKeyResultInner>> getActivationKeyWithServiceResponseAsync(String resourceGroup, String registrationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getActivationKey(this.client.subscriptionId(), resourceGroup, registrationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActivationKeyResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ActivationKeyResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActivationKeyResultInner> clientResponse = getActivationKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActivationKeyResultInner> getActivationKeyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActivationKeyResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActivationKeyResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns a list of all registrations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RegistrationInner&gt; object if successful.
     */
    public PagedList<RegistrationInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<RegistrationInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RegistrationInner>(response.body()) {
            @Override
            public Page<RegistrationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns a list of all registrations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RegistrationInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RegistrationInner>> serviceFuture, final ListOperationCallback<RegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RegistrationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns a list of all registrations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RegistrationInner&gt; object
     */
    public Observable<Page<RegistrationInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RegistrationInner>>, Page<RegistrationInner>>() {
                @Override
                public Page<RegistrationInner> call(ServiceResponse<Page<RegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns a list of all registrations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RegistrationInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RegistrationInner>>, Observable<ServiceResponse<Page<RegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RegistrationInner>>> call(ServiceResponse<Page<RegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns a list of all registrations.
     *
    ServiceResponse<PageImpl<RegistrationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RegistrationInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RegistrationInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RegistrationInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RegistrationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RegistrationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
