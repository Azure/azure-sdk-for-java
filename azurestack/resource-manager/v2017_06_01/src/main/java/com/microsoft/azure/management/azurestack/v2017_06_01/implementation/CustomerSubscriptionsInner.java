/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.azurestack.v2017_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.azurestack.v2017_06_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CustomerSubscriptions.
 */
public class CustomerSubscriptionsInner {
    /** The Retrofit service to perform REST calls. */
    private CustomerSubscriptionsService service;
    /** The service client containing this operation class. */
    private AzureStackManagementClientImpl client;

    /**
     * Initializes an instance of CustomerSubscriptionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CustomerSubscriptionsInner(Retrofit retrofit, AzureStackManagementClientImpl client) {
        this.service = retrofit.create(CustomerSubscriptionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CustomerSubscriptions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CustomerSubscriptionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.CustomerSubscriptions list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.CustomerSubscriptions get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Path("customerSubscriptionName") String customerSubscriptionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.CustomerSubscriptions delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Path("customerSubscriptionName") String customerSubscriptionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.CustomerSubscriptions create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("registrationName") String registrationName, @Path("customerSubscriptionName") String customerSubscriptionName, @Query("api-version") String apiVersion, @Body CustomerSubscriptionInner customerCreationParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.CustomerSubscriptions listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Returns a list of products.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerSubscriptionInner&gt; object if successful.
     */
    public PagedList<CustomerSubscriptionInner> list(final String resourceGroup, final String registrationName) {
        ServiceResponse<Page<CustomerSubscriptionInner>> response = listSinglePageAsync(resourceGroup, registrationName).toBlocking().single();
        return new PagedList<CustomerSubscriptionInner>(response.body()) {
            @Override
            public Page<CustomerSubscriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns a list of products.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerSubscriptionInner>> listAsync(final String resourceGroup, final String registrationName, final ListOperationCallback<CustomerSubscriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroup, registrationName),
            new Func1<String, Observable<ServiceResponse<Page<CustomerSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns a list of products.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerSubscriptionInner&gt; object
     */
    public Observable<Page<CustomerSubscriptionInner>> listAsync(final String resourceGroup, final String registrationName) {
        return listWithServiceResponseAsync(resourceGroup, registrationName)
            .map(new Func1<ServiceResponse<Page<CustomerSubscriptionInner>>, Page<CustomerSubscriptionInner>>() {
                @Override
                public Page<CustomerSubscriptionInner> call(ServiceResponse<Page<CustomerSubscriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns a list of products.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> listWithServiceResponseAsync(final String resourceGroup, final String registrationName) {
        return listSinglePageAsync(resourceGroup, registrationName)
            .concatMap(new Func1<ServiceResponse<Page<CustomerSubscriptionInner>>, Observable<ServiceResponse<Page<CustomerSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> call(ServiceResponse<Page<CustomerSubscriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns a list of products.
     *
    ServiceResponse<PageImpl<CustomerSubscriptionInner>> * @param resourceGroup Name of the resource group.
    ServiceResponse<PageImpl<CustomerSubscriptionInner>> * @param registrationName Name of the Azure Stack registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerSubscriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> listSinglePageAsync(final String resourceGroup, final String registrationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroup, registrationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerSubscriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerSubscriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomerSubscriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomerSubscriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomerSubscriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Returns the specified product.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerSubscriptionInner object if successful.
     */
    public CustomerSubscriptionInner get(String resourceGroup, String registrationName, String customerSubscriptionName) {
        return getWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName).toBlocking().single().body();
    }

    /**
     * Returns the specified product.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerSubscriptionInner> getAsync(String resourceGroup, String registrationName, String customerSubscriptionName, final ServiceCallback<CustomerSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName), serviceCallback);
    }

    /**
     * Returns the specified product.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerSubscriptionInner object
     */
    public Observable<CustomerSubscriptionInner> getAsync(String resourceGroup, String registrationName, String customerSubscriptionName) {
        return getWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName).map(new Func1<ServiceResponse<CustomerSubscriptionInner>, CustomerSubscriptionInner>() {
            @Override
            public CustomerSubscriptionInner call(ServiceResponse<CustomerSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns the specified product.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerSubscriptionInner object
     */
    public Observable<ServiceResponse<CustomerSubscriptionInner>> getWithServiceResponseAsync(String resourceGroup, String registrationName, String customerSubscriptionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (customerSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter customerSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroup, registrationName, customerSubscriptionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerSubscriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerSubscriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerSubscriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomerSubscriptionInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomerSubscriptionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomerSubscriptionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroup, String registrationName, String customerSubscriptionName) {
        deleteWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName).toBlocking().single().body();
    }

    /**
     * Deletes a customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroup, String registrationName, String customerSubscriptionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName), serviceCallback);
    }

    /**
     * Deletes a customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroup, String registrationName, String customerSubscriptionName) {
        return deleteWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroup, String registrationName, String customerSubscriptionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (customerSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter customerSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroup, registrationName, customerSubscriptionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a new customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @param customerCreationParameters Parameters use to create a customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerSubscriptionInner object if successful.
     */
    public CustomerSubscriptionInner create(String resourceGroup, String registrationName, String customerSubscriptionName, CustomerSubscriptionInner customerCreationParameters) {
        return createWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName, customerCreationParameters).toBlocking().single().body();
    }

    /**
     * Creates a new customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @param customerCreationParameters Parameters use to create a customer subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerSubscriptionInner> createAsync(String resourceGroup, String registrationName, String customerSubscriptionName, CustomerSubscriptionInner customerCreationParameters, final ServiceCallback<CustomerSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName, customerCreationParameters), serviceCallback);
    }

    /**
     * Creates a new customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @param customerCreationParameters Parameters use to create a customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerSubscriptionInner object
     */
    public Observable<CustomerSubscriptionInner> createAsync(String resourceGroup, String registrationName, String customerSubscriptionName, CustomerSubscriptionInner customerCreationParameters) {
        return createWithServiceResponseAsync(resourceGroup, registrationName, customerSubscriptionName, customerCreationParameters).map(new Func1<ServiceResponse<CustomerSubscriptionInner>, CustomerSubscriptionInner>() {
            @Override
            public CustomerSubscriptionInner call(ServiceResponse<CustomerSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new customer subscription under a registration.
     *
     * @param resourceGroup Name of the resource group.
     * @param registrationName Name of the Azure Stack registration.
     * @param customerSubscriptionName Name of the product.
     * @param customerCreationParameters Parameters use to create a customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerSubscriptionInner object
     */
    public Observable<ServiceResponse<CustomerSubscriptionInner>> createWithServiceResponseAsync(String resourceGroup, String registrationName, String customerSubscriptionName, CustomerSubscriptionInner customerCreationParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (registrationName == null) {
            throw new IllegalArgumentException("Parameter registrationName is required and cannot be null.");
        }
        if (customerSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter customerSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (customerCreationParameters == null) {
            throw new IllegalArgumentException("Parameter customerCreationParameters is required and cannot be null.");
        }
        Validator.validate(customerCreationParameters);
        return service.create(this.client.subscriptionId(), resourceGroup, registrationName, customerSubscriptionName, this.client.apiVersion(), customerCreationParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerSubscriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerSubscriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerSubscriptionInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomerSubscriptionInner> createDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomerSubscriptionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomerSubscriptionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns a list of products.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerSubscriptionInner&gt; object if successful.
     */
    public PagedList<CustomerSubscriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<CustomerSubscriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CustomerSubscriptionInner>(response.body()) {
            @Override
            public Page<CustomerSubscriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns a list of products.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerSubscriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CustomerSubscriptionInner>> serviceFuture, final ListOperationCallback<CustomerSubscriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CustomerSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns a list of products.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerSubscriptionInner&gt; object
     */
    public Observable<Page<CustomerSubscriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CustomerSubscriptionInner>>, Page<CustomerSubscriptionInner>>() {
                @Override
                public Page<CustomerSubscriptionInner> call(ServiceResponse<Page<CustomerSubscriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns a list of products.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CustomerSubscriptionInner>>, Observable<ServiceResponse<Page<CustomerSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> call(ServiceResponse<Page<CustomerSubscriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns a list of products.
     *
    ServiceResponse<PageImpl<CustomerSubscriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerSubscriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerSubscriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerSubscriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomerSubscriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomerSubscriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomerSubscriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
