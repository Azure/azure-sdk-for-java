/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_05_31_preview.implementation;

import com.microsoft.azure.management.billing.v2018_05_31_preview.Project;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import java.util.ArrayList;
import com.microsoft.azure.management.billing.v2018_05_31_preview.EligibleOffer;

class ProjectImpl extends CreatableUpdatableImpl<Project, ProjectInner, ProjectImpl> implements Project, Project.Update {
    private final BillingManager manager;
    private String billingAccountId;
    private String projectId;

    ProjectImpl(String name, BillingManager manager) {
        super(name, new ProjectInner());
        this.manager = manager;
        // Set resource name
        this.projectId = name;
        //
    }

    ProjectImpl(ProjectInner inner, BillingManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.projectId = inner.name();
        // resource ancestor names
        this.billingAccountId = IdParsingUtils.getValueFromIdByName(inner.id(), "billingAccounts");
        this.projectId = IdParsingUtils.getValueFromIdByName(inner.id(), "projects");
        //
    }

    @Override
    public BillingManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Project> createResourceAsync() {
        ProjectsInner client = this.manager().inner().projects();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<Project> updateResourceAsync() {
        ProjectsInner client = this.manager().inner().projects();
        return client.updateAsync(this.billingAccountId, this.projectId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ProjectInner> getInnerAsync() {
        ProjectsInner client = this.manager().inner().projects();
        return client.getAsync(this.billingAccountId, this.projectId);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String costCenter() {
        return this.inner().costCenter();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public List<EligibleOffer> eligibleOffers() {
        List<EligibleOffer> lst = new ArrayList<EligibleOffer>();
        if (this.inner().eligibleOffers() != null) {
            for (EligibleOfferInner inner : this.inner().eligibleOffers()) {
                lst.add( new EligibleOfferImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ProjectImpl withCostCenter(String costCenter) {
        this.inner().withCostCenter(costCenter);
        return this;
    }

    @Override
    public ProjectImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

    @Override
    public ProjectImpl withEligibleOffers(List<EligibleOfferInner> eligibleOffers) {
        this.inner().withEligibleOffers(eligibleOffers);
        return this;
    }

}
