/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_05_31_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_05_31_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EligibleOffers.
 */
public class EligibleOffersInner {
    /** The Retrofit service to perform REST calls. */
    private EligibleOffersService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of EligibleOffersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EligibleOffersInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(EligibleOffersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for EligibleOffers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EligibleOffersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.EligibleOffers listByBillingAccountId" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/eligibleOffers")
        Observable<Response<ResponseBody>> listByBillingAccountId(@Path("billingAccountId") String billingAccountId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.EligibleOffers getById" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/projects/{projectId}/eligibleOffers/{eligibleOfferId}")
        Observable<Response<ResponseBody>> getById(@Path("billingAccountId") String billingAccountId, @Path("eligibleOfferId") String eligibleOfferId, @Path("projectId") String projectId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EligibleOfferListResultInner object if successful.
     */
    public EligibleOfferListResultInner listByBillingAccountId(String billingAccountId) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId).toBlocking().single().body();
    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EligibleOfferListResultInner> listByBillingAccountIdAsync(String billingAccountId, final ServiceCallback<EligibleOfferListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountIdWithServiceResponseAsync(billingAccountId), serviceCallback);
    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferListResultInner object
     */
    public Observable<EligibleOfferListResultInner> listByBillingAccountIdAsync(String billingAccountId) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId).map(new Func1<ServiceResponse<EligibleOfferListResultInner>, EligibleOfferListResultInner>() {
            @Override
            public EligibleOfferListResultInner call(ServiceResponse<EligibleOfferListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferListResultInner object
     */
    public Observable<ServiceResponse<EligibleOfferListResultInner>> listByBillingAccountIdWithServiceResponseAsync(String billingAccountId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.listByBillingAccountId(billingAccountId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EligibleOfferListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<EligibleOfferListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EligibleOfferListResultInner> clientResponse = listByBillingAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the billingProfiles.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EligibleOfferListResultInner object if successful.
     */
    public EligibleOfferListResultInner listByBillingAccountId(String billingAccountId, String expand) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand).toBlocking().single().body();
    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the billingProfiles.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EligibleOfferListResultInner> listByBillingAccountIdAsync(String billingAccountId, String expand, final ServiceCallback<EligibleOfferListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand), serviceCallback);
    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the billingProfiles.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferListResultInner object
     */
    public Observable<EligibleOfferListResultInner> listByBillingAccountIdAsync(String billingAccountId, String expand) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand).map(new Func1<ServiceResponse<EligibleOfferListResultInner>, EligibleOfferListResultInner>() {
            @Override
            public EligibleOfferListResultInner call(ServiceResponse<EligibleOfferListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the billingProfiles.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferListResultInner object
     */
    public Observable<ServiceResponse<EligibleOfferListResultInner>> listByBillingAccountIdWithServiceResponseAsync(String billingAccountId, String expand) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountId(billingAccountId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EligibleOfferListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<EligibleOfferListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EligibleOfferListResultInner> clientResponse = listByBillingAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EligibleOfferListResultInner> listByBillingAccountIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EligibleOfferListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EligibleOfferListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EligibleOfferInner object if successful.
     */
    public EligibleOfferInner getById(String billingAccountId, String eligibleOfferId, String projectId) {
        return getByIdWithServiceResponseAsync(billingAccountId, eligibleOfferId, projectId).toBlocking().single().body();
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EligibleOfferInner> getByIdAsync(String billingAccountId, String eligibleOfferId, String projectId, final ServiceCallback<EligibleOfferInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(billingAccountId, eligibleOfferId, projectId), serviceCallback);
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferInner object
     */
    public Observable<EligibleOfferInner> getByIdAsync(String billingAccountId, String eligibleOfferId, String projectId) {
        return getByIdWithServiceResponseAsync(billingAccountId, eligibleOfferId, projectId).map(new Func1<ServiceResponse<EligibleOfferInner>, EligibleOfferInner>() {
            @Override
            public EligibleOfferInner call(ServiceResponse<EligibleOfferInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferInner object
     */
    public Observable<ServiceResponse<EligibleOfferInner>> getByIdWithServiceResponseAsync(String billingAccountId, String eligibleOfferId, String projectId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (eligibleOfferId == null) {
            throw new IllegalArgumentException("Parameter eligibleOfferId is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.getById(billingAccountId, eligibleOfferId, projectId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EligibleOfferInner>>>() {
                @Override
                public Observable<ServiceResponse<EligibleOfferInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EligibleOfferInner> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the billingProfiles.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EligibleOfferInner object if successful.
     */
    public EligibleOfferInner getById(String billingAccountId, String eligibleOfferId, String projectId, String expand) {
        return getByIdWithServiceResponseAsync(billingAccountId, eligibleOfferId, projectId, expand).toBlocking().single().body();
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the billingProfiles.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EligibleOfferInner> getByIdAsync(String billingAccountId, String eligibleOfferId, String projectId, String expand, final ServiceCallback<EligibleOfferInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(billingAccountId, eligibleOfferId, projectId, expand), serviceCallback);
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the billingProfiles.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferInner object
     */
    public Observable<EligibleOfferInner> getByIdAsync(String billingAccountId, String eligibleOfferId, String projectId, String expand) {
        return getByIdWithServiceResponseAsync(billingAccountId, eligibleOfferId, projectId, expand).map(new Func1<ServiceResponse<EligibleOfferInner>, EligibleOfferInner>() {
            @Override
            public EligibleOfferInner call(ServiceResponse<EligibleOfferInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the eligible offer by id.
     *
     * @param billingAccountId billing Account Id.
     * @param eligibleOfferId Eligible Offer Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the billingProfiles.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EligibleOfferInner object
     */
    public Observable<ServiceResponse<EligibleOfferInner>> getByIdWithServiceResponseAsync(String billingAccountId, String eligibleOfferId, String projectId, String expand) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (eligibleOfferId == null) {
            throw new IllegalArgumentException("Parameter eligibleOfferId is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getById(billingAccountId, eligibleOfferId, projectId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EligibleOfferInner>>>() {
                @Override
                public Observable<ServiceResponse<EligibleOfferInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EligibleOfferInner> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EligibleOfferInner> getByIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EligibleOfferInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EligibleOfferInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
