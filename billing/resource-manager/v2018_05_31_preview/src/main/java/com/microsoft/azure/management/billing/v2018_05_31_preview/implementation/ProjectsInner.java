/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_05_31_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_05_31_preview.ErrorResponseException;
import com.microsoft.azure.management.billing.v2018_05_31_preview.ProjectsListByBillingAccountIdHeaders;
import com.microsoft.azure.management.billing.v2018_05_31_preview.ProjectsListWithCreateSubscriptionPermissionHeaders;
import com.microsoft.azure.management.billing.v2018_05_31_preview.ProjectsUpdateHeaders;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Projects.
 */
public class ProjectsInner {
    /** The Retrofit service to perform REST calls. */
    private ProjectsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of ProjectsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ProjectsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(ProjectsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Projects to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ProjectsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.Projects listByBillingAccountId" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/projects")
        Observable<Response<ResponseBody>> listByBillingAccountId(@Path("billingAccountId") String billingAccountId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.Projects create" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/projects")
        Observable<Response<ResponseBody>> create(@Path("billingAccountId") String billingAccountId, @Query("api-version") String apiVersion, @Body ProjectInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.Projects listWithCreateSubscriptionPermission" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/listProjectsWithCreateProjectPermission")
        Observable<Response<ResponseBody>> listWithCreateSubscriptionPermission(@Path("billingAccountId") String billingAccountId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.Projects get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/projects/{projectId}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountId") String billingAccountId, @Path("projectId") String projectId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.Projects update" })
        @PUT("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/projects/{projectId}")
        Observable<Response<ResponseBody>> update(@Path("billingAccountId") String billingAccountId, @Path("projectId") String projectId, @Query("api-version") String apiVersion, @Body ProjectInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectListResultInner object if successful.
     */
    public ProjectListResultInner listByBillingAccountId(String billingAccountId) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId).toBlocking().single().body();
    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectListResultInner> listByBillingAccountIdAsync(String billingAccountId, final ServiceCallback<ProjectListResultInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listByBillingAccountIdWithServiceResponseAsync(billingAccountId), serviceCallback);
    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ProjectListResultInner> listByBillingAccountIdAsync(String billingAccountId) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId).map(new Func1<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>, ProjectListResultInner>() {
            @Override
            public ProjectListResultInner call(ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>> listByBillingAccountIdWithServiceResponseAsync(String billingAccountId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.listByBillingAccountId(billingAccountId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders> clientResponse = listByBillingAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectListResultInner object if successful.
     */
    public ProjectListResultInner listByBillingAccountId(String billingAccountId, String expand) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand).toBlocking().single().body();
    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectListResultInner> listByBillingAccountIdAsync(String billingAccountId, String expand, final ServiceCallback<ProjectListResultInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand), serviceCallback);
    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ProjectListResultInner> listByBillingAccountIdAsync(String billingAccountId, String expand) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand).map(new Func1<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>, ProjectListResultInner>() {
            @Override
            public ProjectListResultInner call(ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>> listByBillingAccountIdWithServiceResponseAsync(String billingAccountId, String expand) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountId(billingAccountId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders> clientResponse = listByBillingAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListByBillingAccountIdHeaders> listByBillingAccountIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectListResultInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ProjectsListByBillingAccountIdHeaders.class);
    }

    /**
     * The operation to create a project.
     *
     * @param billingAccountId billing Account Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectInner object if successful.
     */
    public ProjectInner create(String billingAccountId, ProjectInner parameters) {
        return createWithServiceResponseAsync(billingAccountId, parameters).toBlocking().single().body();
    }

    /**
     * The operation to create a project.
     *
     * @param billingAccountId billing Account Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectInner> createAsync(String billingAccountId, ProjectInner parameters, final ServiceCallback<ProjectInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(billingAccountId, parameters), serviceCallback);
    }

    /**
     * The operation to create a project.
     *
     * @param billingAccountId billing Account Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ProjectInner> createAsync(String billingAccountId, ProjectInner parameters) {
        return createWithServiceResponseAsync(billingAccountId, parameters).map(new Func1<ServiceResponse<ProjectInner>, ProjectInner>() {
            @Override
            public ProjectInner call(ServiceResponse<ProjectInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create a project.
     *
     * @param billingAccountId billing Account Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ServiceResponse<ProjectInner>> createWithServiceResponseAsync(String billingAccountId, ProjectInner parameters) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(billingAccountId, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectInner> createDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<ProjectInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectListResultInner object if successful.
     */
    public ProjectListResultInner listWithCreateSubscriptionPermission(String billingAccountId) {
        return listWithCreateSubscriptionPermissionWithServiceResponseAsync(billingAccountId).toBlocking().single().body();
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectListResultInner> listWithCreateSubscriptionPermissionAsync(String billingAccountId, final ServiceCallback<ProjectListResultInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listWithCreateSubscriptionPermissionWithServiceResponseAsync(billingAccountId), serviceCallback);
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ProjectListResultInner> listWithCreateSubscriptionPermissionAsync(String billingAccountId) {
        return listWithCreateSubscriptionPermissionWithServiceResponseAsync(billingAccountId).map(new Func1<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>, ProjectListResultInner>() {
            @Override
            public ProjectListResultInner call(ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>> listWithCreateSubscriptionPermissionWithServiceResponseAsync(String billingAccountId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.listWithCreateSubscriptionPermission(billingAccountId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders> clientResponse = listWithCreateSubscriptionPermissionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectListResultInner object if successful.
     */
    public ProjectListResultInner listWithCreateSubscriptionPermission(String billingAccountId, String expand) {
        return listWithCreateSubscriptionPermissionWithServiceResponseAsync(billingAccountId, expand).toBlocking().single().body();
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectListResultInner> listWithCreateSubscriptionPermissionAsync(String billingAccountId, String expand, final ServiceCallback<ProjectListResultInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listWithCreateSubscriptionPermissionWithServiceResponseAsync(billingAccountId, expand), serviceCallback);
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ProjectListResultInner> listWithCreateSubscriptionPermissionAsync(String billingAccountId, String expand) {
        return listWithCreateSubscriptionPermissionWithServiceResponseAsync(billingAccountId, expand).map(new Func1<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>, ProjectListResultInner>() {
            @Override
            public ProjectListResultInner call(ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all projects with create subscription permission for a user.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the eligibleOffers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectListResultInner object
     */
    public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>> listWithCreateSubscriptionPermissionWithServiceResponseAsync(String billingAccountId, String expand) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listWithCreateSubscriptionPermission(billingAccountId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders> clientResponse = listWithCreateSubscriptionPermissionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ProjectListResultInner, ProjectsListWithCreateSubscriptionPermissionHeaders> listWithCreateSubscriptionPermissionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectListResultInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ProjectsListWithCreateSubscriptionPermissionHeaders.class);
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectInner object if successful.
     */
    public ProjectInner get(String billingAccountId, String projectId) {
        return getWithServiceResponseAsync(billingAccountId, projectId).toBlocking().single().body();
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectInner> getAsync(String billingAccountId, String projectId, final ServiceCallback<ProjectInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountId, projectId), serviceCallback);
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ProjectInner> getAsync(String billingAccountId, String projectId) {
        return getWithServiceResponseAsync(billingAccountId, projectId).map(new Func1<ServiceResponse<ProjectInner>, ProjectInner>() {
            @Override
            public ProjectInner call(ServiceResponse<ProjectInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ServiceResponse<ProjectInner>> getWithServiceResponseAsync(String billingAccountId, String projectId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        return service.get(billingAccountId, projectId, this.client.apiVersion(), expand, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the eligibleOffers.
     * @param filter May be used to filter by permission. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectInner object if successful.
     */
    public ProjectInner get(String billingAccountId, String projectId, String expand, String filter) {
        return getWithServiceResponseAsync(billingAccountId, projectId, expand, filter).toBlocking().single().body();
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the eligibleOffers.
     * @param filter May be used to filter by permission. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectInner> getAsync(String billingAccountId, String projectId, String expand, String filter, final ServiceCallback<ProjectInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountId, projectId, expand, filter), serviceCallback);
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the eligibleOffers.
     * @param filter May be used to filter by permission. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ProjectInner> getAsync(String billingAccountId, String projectId, String expand, String filter) {
        return getWithServiceResponseAsync(billingAccountId, projectId, expand, filter).map(new Func1<ServiceResponse<ProjectInner>, ProjectInner>() {
            @Override
            public ProjectInner call(ServiceResponse<ProjectInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the project by id.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param expand May be used to expand the eligibleOffers.
     * @param filter May be used to filter by permission. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ServiceResponse<ProjectInner>> getWithServiceResponseAsync(String billingAccountId, String projectId, String expand, String filter) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountId, projectId, this.client.apiVersion(), expand, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to update a project.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectInner object if successful.
     */
    public ProjectInner update(String billingAccountId, String projectId, ProjectInner parameters) {
        return updateWithServiceResponseAsync(billingAccountId, projectId, parameters).toBlocking().single().body();
    }

    /**
     * The operation to update a project.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectInner> updateAsync(String billingAccountId, String projectId, ProjectInner parameters, final ServiceCallback<ProjectInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(updateWithServiceResponseAsync(billingAccountId, projectId, parameters), serviceCallback);
    }

    /**
     * The operation to update a project.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ProjectInner> updateAsync(String billingAccountId, String projectId, ProjectInner parameters) {
        return updateWithServiceResponseAsync(billingAccountId, projectId, parameters).map(new Func1<ServiceResponseWithHeaders<ProjectInner, ProjectsUpdateHeaders>, ProjectInner>() {
            @Override
            public ProjectInner call(ServiceResponseWithHeaders<ProjectInner, ProjectsUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to update a project.
     *
     * @param billingAccountId billing Account Id.
     * @param projectId Project Id.
     * @param parameters Parameters supplied to the Create Project operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ServiceResponseWithHeaders<ProjectInner, ProjectsUpdateHeaders>> updateWithServiceResponseAsync(String billingAccountId, String projectId, ProjectInner parameters) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(billingAccountId, projectId, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ProjectInner, ProjectsUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ProjectInner, ProjectsUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ProjectInner, ProjectsUpdateHeaders> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ProjectInner, ProjectsUpdateHeaders> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ProjectsUpdateHeaders.class);
    }

}
