/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_05_31_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_05_31_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EnrollmentAccounts.
 */
public class EnrollmentAccountsInner {
    /** The Retrofit service to perform REST calls. */
    private EnrollmentAccountsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of EnrollmentAccountsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EnrollmentAccountsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(EnrollmentAccountsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for EnrollmentAccounts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EnrollmentAccountsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.EnrollmentAccounts listByBillingAccountId" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts")
        Observable<Response<ResponseBody>> listByBillingAccountId(@Path("billingAccountId") String billingAccountId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_05_31_preview.EnrollmentAccounts getByEnrollmentAccountAccountId" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}")
        Observable<Response<ResponseBody>> getByEnrollmentAccountAccountId(@Path("billingAccountId") String billingAccountId, @Path("enrollmentAccountId") String enrollmentAccountId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnrollmentAccountListResultInner object if successful.
     */
    public EnrollmentAccountListResultInner listByBillingAccountId(String billingAccountId) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId).toBlocking().single().body();
    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnrollmentAccountListResultInner> listByBillingAccountIdAsync(String billingAccountId, final ServiceCallback<EnrollmentAccountListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountIdWithServiceResponseAsync(billingAccountId), serviceCallback);
    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountListResultInner object
     */
    public Observable<EnrollmentAccountListResultInner> listByBillingAccountIdAsync(String billingAccountId) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId).map(new Func1<ServiceResponse<EnrollmentAccountListResultInner>, EnrollmentAccountListResultInner>() {
            @Override
            public EnrollmentAccountListResultInner call(ServiceResponse<EnrollmentAccountListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountListResultInner object
     */
    public Observable<ServiceResponse<EnrollmentAccountListResultInner>> listByBillingAccountIdWithServiceResponseAsync(String billingAccountId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        return service.listByBillingAccountId(billingAccountId, this.client.apiVersion(), expand, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnrollmentAccountListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<EnrollmentAccountListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnrollmentAccountListResultInner> clientResponse = listByBillingAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnrollmentAccountListResultInner object if successful.
     */
    public EnrollmentAccountListResultInner listByBillingAccountId(String billingAccountId, String expand, String filter) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand, filter).toBlocking().single().body();
    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnrollmentAccountListResultInner> listByBillingAccountIdAsync(String billingAccountId, String expand, String filter, final ServiceCallback<EnrollmentAccountListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand, filter), serviceCallback);
    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountListResultInner object
     */
    public Observable<EnrollmentAccountListResultInner> listByBillingAccountIdAsync(String billingAccountId, String expand, String filter) {
        return listByBillingAccountIdWithServiceResponseAsync(billingAccountId, expand, filter).map(new Func1<ServiceResponse<EnrollmentAccountListResultInner>, EnrollmentAccountListResultInner>() {
            @Override
            public EnrollmentAccountListResultInner call(ServiceResponse<EnrollmentAccountListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param billingAccountId billing Account Id.
     * @param expand May be used to expand the department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountListResultInner object
     */
    public Observable<ServiceResponse<EnrollmentAccountListResultInner>> listByBillingAccountIdWithServiceResponseAsync(String billingAccountId, String expand, String filter) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountId(billingAccountId, this.client.apiVersion(), expand, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnrollmentAccountListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<EnrollmentAccountListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnrollmentAccountListResultInner> clientResponse = listByBillingAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnrollmentAccountListResultInner> listByBillingAccountIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnrollmentAccountListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnrollmentAccountListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnrollmentAccountInner object if successful.
     */
    public EnrollmentAccountInner getByEnrollmentAccountAccountId(String billingAccountId, String enrollmentAccountId) {
        return getByEnrollmentAccountAccountIdWithServiceResponseAsync(billingAccountId, enrollmentAccountId).toBlocking().single().body();
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnrollmentAccountInner> getByEnrollmentAccountAccountIdAsync(String billingAccountId, String enrollmentAccountId, final ServiceCallback<EnrollmentAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByEnrollmentAccountAccountIdWithServiceResponseAsync(billingAccountId, enrollmentAccountId), serviceCallback);
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountInner object
     */
    public Observable<EnrollmentAccountInner> getByEnrollmentAccountAccountIdAsync(String billingAccountId, String enrollmentAccountId) {
        return getByEnrollmentAccountAccountIdWithServiceResponseAsync(billingAccountId, enrollmentAccountId).map(new Func1<ServiceResponse<EnrollmentAccountInner>, EnrollmentAccountInner>() {
            @Override
            public EnrollmentAccountInner call(ServiceResponse<EnrollmentAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountInner object
     */
    public Observable<ServiceResponse<EnrollmentAccountInner>> getByEnrollmentAccountAccountIdWithServiceResponseAsync(String billingAccountId, String enrollmentAccountId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (enrollmentAccountId == null) {
            throw new IllegalArgumentException("Parameter enrollmentAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        return service.getByEnrollmentAccountAccountId(billingAccountId, enrollmentAccountId, this.client.apiVersion(), expand, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnrollmentAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<EnrollmentAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnrollmentAccountInner> clientResponse = getByEnrollmentAccountAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @param expand May be used to expand the Department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnrollmentAccountInner object if successful.
     */
    public EnrollmentAccountInner getByEnrollmentAccountAccountId(String billingAccountId, String enrollmentAccountId, String expand, String filter) {
        return getByEnrollmentAccountAccountIdWithServiceResponseAsync(billingAccountId, enrollmentAccountId, expand, filter).toBlocking().single().body();
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @param expand May be used to expand the Department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnrollmentAccountInner> getByEnrollmentAccountAccountIdAsync(String billingAccountId, String enrollmentAccountId, String expand, String filter, final ServiceCallback<EnrollmentAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByEnrollmentAccountAccountIdWithServiceResponseAsync(billingAccountId, enrollmentAccountId, expand, filter), serviceCallback);
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @param expand May be used to expand the Department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountInner object
     */
    public Observable<EnrollmentAccountInner> getByEnrollmentAccountAccountIdAsync(String billingAccountId, String enrollmentAccountId, String expand, String filter) {
        return getByEnrollmentAccountAccountIdWithServiceResponseAsync(billingAccountId, enrollmentAccountId, expand, filter).map(new Func1<ServiceResponse<EnrollmentAccountInner>, EnrollmentAccountInner>() {
            @Override
            public EnrollmentAccountInner call(ServiceResponse<EnrollmentAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the enrollment account by id.
     *
     * @param billingAccountId billing Account Id.
     * @param enrollmentAccountId Enrollment Account Id.
     * @param expand May be used to expand the Department.
     * @param filter The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentAccountInner object
     */
    public Observable<ServiceResponse<EnrollmentAccountInner>> getByEnrollmentAccountAccountIdWithServiceResponseAsync(String billingAccountId, String enrollmentAccountId, String expand, String filter) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (enrollmentAccountId == null) {
            throw new IllegalArgumentException("Parameter enrollmentAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByEnrollmentAccountAccountId(billingAccountId, enrollmentAccountId, this.client.apiVersion(), expand, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnrollmentAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<EnrollmentAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnrollmentAccountInner> clientResponse = getByEnrollmentAccountAccountIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnrollmentAccountInner> getByEnrollmentAccountAccountIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnrollmentAccountInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnrollmentAccountInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
