/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_11_01_preview.BillingProfilesUpdateHeaders;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingProfiles.
 */
public class BillingProfilesInner {
    /** The Retrofit service to perform REST calls. */
    private BillingProfilesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingProfilesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingProfilesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingProfilesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingProfiles to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingProfilesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingProfiles get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountId") String billingAccountId, @Path("billingProfileId") String billingProfileId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingProfiles update" })
        @PUT("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}")
        Observable<Response<ResponseBody>> update(@Path("billingAccountId") String billingAccountId, @Path("billingProfileId") String billingProfileId, @Query("api-version") String apiVersion, @Body BillingProfileInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingProfiles beginUpdate" })
        @PUT("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("billingAccountId") String billingAccountId, @Path("billingProfileId") String billingProfileId, @Query("api-version") String apiVersion, @Body BillingProfileInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner get(String billingAccountId, String billingProfileId) {
        return getWithServiceResponseAsync(billingAccountId, billingProfileId).toBlocking().single().body();
    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> getAsync(String billingAccountId, String billingProfileId, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountId, billingProfileId), serviceCallback);
    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<BillingProfileInner> getAsync(String billingAccountId, String billingProfileId) {
        return getWithServiceResponseAsync(billingAccountId, billingProfileId).map(new Func1<ServiceResponse<BillingProfileInner>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponse<BillingProfileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<ServiceResponse<BillingProfileInner>> getWithServiceResponseAsync(String billingAccountId, String billingProfileId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (billingProfileId == null) {
            throw new IllegalArgumentException("Parameter billingProfileId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.get(billingAccountId, billingProfileId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingProfileInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param expand May be used to expand the invoiceSections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner get(String billingAccountId, String billingProfileId, String expand) {
        return getWithServiceResponseAsync(billingAccountId, billingProfileId, expand).toBlocking().single().body();
    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param expand May be used to expand the invoiceSections.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> getAsync(String billingAccountId, String billingProfileId, String expand, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountId, billingProfileId, expand), serviceCallback);
    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param expand May be used to expand the invoiceSections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<BillingProfileInner> getAsync(String billingAccountId, String billingProfileId, String expand) {
        return getWithServiceResponseAsync(billingAccountId, billingProfileId, expand).map(new Func1<ServiceResponse<BillingProfileInner>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponse<BillingProfileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the billing profile by id.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param expand May be used to expand the invoiceSections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<ServiceResponse<BillingProfileInner>> getWithServiceResponseAsync(String billingAccountId, String billingProfileId, String expand) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (billingProfileId == null) {
            throw new IllegalArgumentException("Parameter billingProfileId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountId, billingProfileId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingProfileInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingProfileInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingProfileInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingProfileInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner update(String billingAccountId, String billingProfileId, BillingProfileInner parameters) {
        return updateWithServiceResponseAsync(billingAccountId, billingProfileId, parameters).toBlocking().last().body();
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> updateAsync(String billingAccountId, String billingProfileId, BillingProfileInner parameters, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(updateWithServiceResponseAsync(billingAccountId, billingProfileId, parameters), serviceCallback);
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BillingProfileInner> updateAsync(String billingAccountId, String billingProfileId, BillingProfileInner parameters) {
        return updateWithServiceResponseAsync(billingAccountId, billingProfileId, parameters).map(new Func1<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders>> updateWithServiceResponseAsync(String billingAccountId, String billingProfileId, BillingProfileInner parameters) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (billingProfileId == null) {
            throw new IllegalArgumentException("Parameter billingProfileId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.update(billingAccountId, billingProfileId, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<BillingProfileInner>() { }.getType(), BillingProfilesUpdateHeaders.class);
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner beginUpdate(String billingAccountId, String billingProfileId, BillingProfileInner parameters) {
        return beginUpdateWithServiceResponseAsync(billingAccountId, billingProfileId, parameters).toBlocking().single().body();
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> beginUpdateAsync(String billingAccountId, String billingProfileId, BillingProfileInner parameters, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginUpdateWithServiceResponseAsync(billingAccountId, billingProfileId, parameters), serviceCallback);
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<BillingProfileInner> beginUpdateAsync(String billingAccountId, String billingProfileId, BillingProfileInner parameters) {
        return beginUpdateWithServiceResponseAsync(billingAccountId, billingProfileId, parameters).map(new Func1<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to update a billing profile.
     *
     * @param billingAccountId billing Account Id.
     * @param billingProfileId Billing Profile Id.
     * @param parameters Parameters supplied to the update billing profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders>> beginUpdateWithServiceResponseAsync(String billingAccountId, String billingProfileId, BillingProfileInner parameters) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (billingProfileId == null) {
            throw new IllegalArgumentException("Parameter billingProfileId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginUpdate(billingAccountId, billingProfileId, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesUpdateHeaders> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingProfileInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingProfileInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, BillingProfilesUpdateHeaders.class);
    }

}
