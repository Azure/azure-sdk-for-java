/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import com.microsoft.azure.management.billing.v2018_11_01_preview.InvoiceSection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import java.util.ArrayList;
import com.microsoft.azure.management.billing.v2018_11_01_preview.BillingProfile;

class InvoiceSectionImpl extends CreatableUpdatableImpl<InvoiceSection, InvoiceSectionInner, InvoiceSectionImpl> implements InvoiceSection, InvoiceSection.Update {
    private final BillingManager manager;
    private String billingAccountName;
    private String invoiceSectionName;

    InvoiceSectionImpl(String name, BillingManager manager) {
        super(name, new InvoiceSectionInner());
        this.manager = manager;
        // Set resource name
        this.invoiceSectionName = name;
        //
    }

    InvoiceSectionImpl(InvoiceSectionInner inner, BillingManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.invoiceSectionName = inner.name();
        // set resource ancestor and positional variables
        this.billingAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "billingAccounts");
        this.invoiceSectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "invoiceSections");
        //
    }

    @Override
    public BillingManager manager() {
        return this.manager;
    }

    @Override
    public Observable<InvoiceSection> createResourceAsync() {
        InvoiceSectionsInner client = this.manager().inner().invoiceSections();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<InvoiceSection> updateResourceAsync() {
        InvoiceSectionsInner client = this.manager().inner().invoiceSections();
        return client.updateAsync(this.billingAccountName, this.invoiceSectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<InvoiceSectionInner> getInnerAsync() {
        InvoiceSectionsInner client = this.manager().inner().invoiceSections();
        return client.getAsync(this.billingAccountName, this.invoiceSectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<BillingProfile> billingProfiles() {
        List<BillingProfile> lst = new ArrayList<BillingProfile>();
        if (this.inner().billingProfiles() != null) {
            for (BillingProfileInner inner : this.inner().billingProfiles()) {
                lst.add( new BillingProfileImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public InvoiceSectionImpl withBillingProfiles(List<BillingProfileInner> billingProfiles) {
        this.inner().withBillingProfiles(billingProfiles);
        return this;
    }

    @Override
    public InvoiceSectionImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

}
