/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Customers.
 */
public class CustomersInner {
    /** The Retrofit service to perform REST calls. */
    private CustomersService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of CustomersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CustomersInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(CustomersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Customers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CustomersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Customers listByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers")
        Observable<Response<ResponseBody>> listByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Customers get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("customerName") String customerName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerListResultInner object if successful.
     */
    public CustomerListResultInner listByBillingAccountName(String billingAccountName) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName).toBlocking().single().body();
    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerListResultInner> listByBillingAccountNameAsync(String billingAccountName, final ServiceCallback<CustomerListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountNameWithServiceResponseAsync(billingAccountName), serviceCallback);
    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerListResultInner object
     */
    public Observable<CustomerListResultInner> listByBillingAccountNameAsync(String billingAccountName) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName).map(new Func1<ServiceResponse<CustomerListResultInner>, CustomerListResultInner>() {
            @Override
            public CustomerListResultInner call(ServiceResponse<CustomerListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerListResultInner object
     */
    public Observable<ServiceResponse<CustomerListResultInner>> listByBillingAccountNameWithServiceResponseAsync(String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final String skiptoken = null;
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), filter, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerListResultInner> clientResponse = listByBillingAccountNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter using hasPermission('{permissionId}') to only return customers for which the caller has the specified permission.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerListResultInner object if successful.
     */
    public CustomerListResultInner listByBillingAccountName(String billingAccountName, String filter, String skiptoken) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName, filter, skiptoken).toBlocking().single().body();
    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter using hasPermission('{permissionId}') to only return customers for which the caller has the specified permission.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerListResultInner> listByBillingAccountNameAsync(String billingAccountName, String filter, String skiptoken, final ServiceCallback<CustomerListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountNameWithServiceResponseAsync(billingAccountName, filter, skiptoken), serviceCallback);
    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter using hasPermission('{permissionId}') to only return customers for which the caller has the specified permission.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerListResultInner object
     */
    public Observable<CustomerListResultInner> listByBillingAccountNameAsync(String billingAccountName, String filter, String skiptoken) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName, filter, skiptoken).map(new Func1<ServiceResponse<CustomerListResultInner>, CustomerListResultInner>() {
            @Override
            public CustomerListResultInner call(ServiceResponse<CustomerListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter using hasPermission('{permissionId}') to only return customers for which the caller has the specified permission.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerListResultInner object
     */
    public Observable<ServiceResponse<CustomerListResultInner>> listByBillingAccountNameWithServiceResponseAsync(String billingAccountName, String filter, String skiptoken) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), filter, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerListResultInner> clientResponse = listByBillingAccountNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomerListResultInner> listByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomerListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomerListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerInner object if successful.
     */
    public CustomerInner get(String billingAccountName, String customerName) {
        return getWithServiceResponseAsync(billingAccountName, customerName).toBlocking().single().body();
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerInner> getAsync(String billingAccountName, String customerName, final ServiceCallback<CustomerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, customerName), serviceCallback);
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<CustomerInner> getAsync(String billingAccountName, String customerName) {
        return getWithServiceResponseAsync(billingAccountName, customerName).map(new Func1<ServiceResponse<CustomerInner>, CustomerInner>() {
            @Override
            public CustomerInner call(ServiceResponse<CustomerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<ServiceResponse<CustomerInner>> getWithServiceResponseAsync(String billingAccountName, String customerName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.get(billingAccountName, customerName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @param expand May be used to expand enabledAzureSkus, serviceProviders.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerInner object if successful.
     */
    public CustomerInner get(String billingAccountName, String customerName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, customerName, expand).toBlocking().single().body();
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @param expand May be used to expand enabledAzureSkus, serviceProviders.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerInner> getAsync(String billingAccountName, String customerName, String expand, final ServiceCallback<CustomerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, customerName, expand), serviceCallback);
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @param expand May be used to expand enabledAzureSkus, serviceProviders.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<CustomerInner> getAsync(String billingAccountName, String customerName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, customerName, expand).map(new Func1<ServiceResponse<CustomerInner>, CustomerInner>() {
            @Override
            public CustomerInner call(ServiceResponse<CustomerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the customer by id.
     *
     * @param billingAccountName Billing Account Id.
     * @param customerName Customer Id.
     * @param expand May be used to expand enabledAzureSkus, serviceProviders.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<ServiceResponse<CustomerInner>> getWithServiceResponseAsync(String billingAccountName, String customerName, String expand) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, customerName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomerInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomerInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomerInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
