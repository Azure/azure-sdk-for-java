/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_11_01_preview.BillingRoleAssignmentPayload;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in InvoiceSectionBillingRoleAssignments.
 */
public class InvoiceSectionBillingRoleAssignmentsInner {
    /** The Retrofit service to perform REST calls. */
    private InvoiceSectionBillingRoleAssignmentsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of InvoiceSectionBillingRoleAssignmentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public InvoiceSectionBillingRoleAssignmentsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(InvoiceSectionBillingRoleAssignmentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for InvoiceSectionBillingRoleAssignments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface InvoiceSectionBillingRoleAssignmentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.InvoiceSectionBillingRoleAssignments get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingRoleAssignmentName") String billingRoleAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.InvoiceSectionBillingRoleAssignments delete" })
        @HTTP(path = "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingRoleAssignmentName") String billingRoleAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.InvoiceSectionBillingRoleAssignments list" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleAssignments")
        Observable<Response<ResponseBody>> list(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.InvoiceSectionBillingRoleAssignments add" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/createBillingRoleAssignment")
        Observable<Response<ResponseBody>> add(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BillingRoleAssignmentPayload parameters, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the role assignment for the caller on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleAssignmentInner object if successful.
     */
    public BillingRoleAssignmentInner get(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) {
        return getWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleAssignmentName).toBlocking().single().body();
    }

    /**
     * Get the role assignment for the caller on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleAssignmentInner> getAsync(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ServiceCallback<BillingRoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleAssignmentName), serviceCallback);
    }

    /**
     * Get the role assignment for the caller on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentInner object
     */
    public Observable<BillingRoleAssignmentInner> getAsync(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) {
        return getWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleAssignmentName).map(new Func1<ServiceResponse<BillingRoleAssignmentInner>, BillingRoleAssignmentInner>() {
            @Override
            public BillingRoleAssignmentInner call(ServiceResponse<BillingRoleAssignmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the role assignment for the caller on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentInner object
     */
    public Observable<ServiceResponse<BillingRoleAssignmentInner>> getWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingRoleAssignmentName == null) {
            throw new IllegalArgumentException("Parameter billingRoleAssignmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, invoiceSectionName, billingRoleAssignmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleAssignmentInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleAssignmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleAssignmentInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleAssignmentInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleAssignmentInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleAssignmentInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete the role assignment on this invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleAssignmentInner object if successful.
     */
    public BillingRoleAssignmentInner delete(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) {
        return deleteWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleAssignmentName).toBlocking().single().body();
    }

    /**
     * Delete the role assignment on this invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleAssignmentInner> deleteAsync(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ServiceCallback<BillingRoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleAssignmentName), serviceCallback);
    }

    /**
     * Delete the role assignment on this invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentInner object
     */
    public Observable<BillingRoleAssignmentInner> deleteAsync(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) {
        return deleteWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleAssignmentName).map(new Func1<ServiceResponse<BillingRoleAssignmentInner>, BillingRoleAssignmentInner>() {
            @Override
            public BillingRoleAssignmentInner call(ServiceResponse<BillingRoleAssignmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the role assignment on this invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleAssignmentName role assignment id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentInner object
     */
    public Observable<ServiceResponse<BillingRoleAssignmentInner>> deleteWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingRoleAssignmentName == null) {
            throw new IllegalArgumentException("Parameter billingRoleAssignmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(billingAccountName, invoiceSectionName, billingRoleAssignmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleAssignmentInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleAssignmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleAssignmentInner> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleAssignmentInner> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleAssignmentInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleAssignmentInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the role assignments on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleAssignmentListResultInner object if successful.
     */
    public BillingRoleAssignmentListResultInner list(String billingAccountName, String invoiceSectionName) {
        return listWithServiceResponseAsync(billingAccountName, invoiceSectionName).toBlocking().single().body();
    }

    /**
     * Get the role assignments on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleAssignmentListResultInner> listAsync(String billingAccountName, String invoiceSectionName, final ServiceCallback<BillingRoleAssignmentListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(billingAccountName, invoiceSectionName), serviceCallback);
    }

    /**
     * Get the role assignments on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentListResultInner object
     */
    public Observable<BillingRoleAssignmentListResultInner> listAsync(String billingAccountName, String invoiceSectionName) {
        return listWithServiceResponseAsync(billingAccountName, invoiceSectionName).map(new Func1<ServiceResponse<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>() {
            @Override
            public BillingRoleAssignmentListResultInner call(ServiceResponse<BillingRoleAssignmentListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the role assignments on the invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentListResultInner object
     */
    public Observable<ServiceResponse<BillingRoleAssignmentListResultInner>> listWithServiceResponseAsync(String billingAccountName, String invoiceSectionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(billingAccountName, invoiceSectionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleAssignmentListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleAssignmentListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleAssignmentListResultInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleAssignmentListResultInner> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleAssignmentListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleAssignmentListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to add a role assignment to a invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleAssignmentListResultInner object if successful.
     */
    public BillingRoleAssignmentListResultInner add(String billingAccountName, String invoiceSectionName) {
        return addWithServiceResponseAsync(billingAccountName, invoiceSectionName).toBlocking().single().body();
    }

    /**
     * The operation to add a role assignment to a invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleAssignmentListResultInner> addAsync(String billingAccountName, String invoiceSectionName, final ServiceCallback<BillingRoleAssignmentListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(addWithServiceResponseAsync(billingAccountName, invoiceSectionName), serviceCallback);
    }

    /**
     * The operation to add a role assignment to a invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentListResultInner object
     */
    public Observable<BillingRoleAssignmentListResultInner> addAsync(String billingAccountName, String invoiceSectionName) {
        return addWithServiceResponseAsync(billingAccountName, invoiceSectionName).map(new Func1<ServiceResponse<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>() {
            @Override
            public BillingRoleAssignmentListResultInner call(ServiceResponse<BillingRoleAssignmentListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to add a role assignment to a invoice Section.
     *
     * @param billingAccountName billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleAssignmentListResultInner object
     */
    public Observable<ServiceResponse<BillingRoleAssignmentListResultInner>> addWithServiceResponseAsync(String billingAccountName, String invoiceSectionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.add(billingAccountName, invoiceSectionName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleAssignmentListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleAssignmentListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleAssignmentListResultInner> clientResponse = addDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleAssignmentListResultInner> addDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleAssignmentListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<BillingRoleAssignmentListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
