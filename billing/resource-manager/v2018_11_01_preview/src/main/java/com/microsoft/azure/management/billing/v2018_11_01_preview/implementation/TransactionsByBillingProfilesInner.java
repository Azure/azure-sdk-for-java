/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TransactionsByBillingProfiles.
 */
public class TransactionsByBillingProfilesInner {
    /** The Retrofit service to perform REST calls. */
    private TransactionsByBillingProfilesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of TransactionsByBillingProfilesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TransactionsByBillingProfilesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(TransactionsByBillingProfilesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for TransactionsByBillingProfiles to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TransactionsByBillingProfilesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.TransactionsByBillingProfiles list" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions")
        Observable<Response<ResponseBody>> list(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("startDate") String startDate, @Query("endDate") String endDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionsListResultInner object if successful.
     */
    public TransactionsListResultInner list(String billingAccountName, String billingProfileName, String startDate, String endDate) {
        return listWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate).toBlocking().single().body();
    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionsListResultInner> listAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, final ServiceCallback<TransactionsListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate), serviceCallback);
    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionsListResultInner object
     */
    public Observable<TransactionsListResultInner> listAsync(String billingAccountName, String billingProfileName, String startDate, String endDate) {
        return listWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate).map(new Func1<ServiceResponse<TransactionsListResultInner>, TransactionsListResultInner>() {
            @Override
            public TransactionsListResultInner call(ServiceResponse<TransactionsListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionsListResultInner object
     */
    public Observable<ServiceResponse<TransactionsListResultInner>> listWithServiceResponseAsync(String billingAccountName, String billingProfileName, String startDate, String endDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        final String filter = null;
        return service.list(billingAccountName, billingProfileName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionsListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionsListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionsListResultInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionsListResultInner object if successful.
     */
    public TransactionsListResultInner list(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter) {
        return listWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate, filter).toBlocking().single().body();
    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionsListResultInner> listAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter, final ServiceCallback<TransactionsListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate, filter), serviceCallback);
    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionsListResultInner object
     */
    public Observable<TransactionsListResultInner> listAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter) {
        return listWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate, filter).map(new Func1<ServiceResponse<TransactionsListResultInner>, TransactionsListResultInner>() {
            @Override
            public TransactionsListResultInner call(ServiceResponse<TransactionsListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the transactions by billingProfileName for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionsListResultInner object
     */
    public Observable<ServiceResponse<TransactionsListResultInner>> listWithServiceResponseAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        return service.list(billingAccountName, billingProfileName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionsListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionsListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionsListResultInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionsListResultInner> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionsListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionsListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
