/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TransactionsByBillingAccounts.
 */
public class TransactionsByBillingAccountsInner {
    /** The Retrofit service to perform REST calls. */
    private TransactionsByBillingAccountsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of TransactionsByBillingAccountsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TransactionsByBillingAccountsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(TransactionsByBillingAccountsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for TransactionsByBillingAccounts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TransactionsByBillingAccountsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.TransactionsByBillingAccounts list" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/transactions")
        Observable<Response<ResponseBody>> list(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("startDate") String startDate, @Query("endDate") String endDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.TransactionsByBillingAccounts listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionsSummaryInner&gt; object if successful.
     */
    public PagedList<TransactionsSummaryInner> list(final String billingAccountName, final String startDate, final String endDate) {
        ServiceResponse<Page<TransactionsSummaryInner>> response = listSinglePageAsync(billingAccountName, startDate, endDate).toBlocking().single();
        return new PagedList<TransactionsSummaryInner>(response.body()) {
            @Override
            public Page<TransactionsSummaryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionsSummaryInner>> listAsync(final String billingAccountName, final String startDate, final String endDate, final ListOperationCallback<TransactionsSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(billingAccountName, startDate, endDate),
            new Func1<String, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionsSummaryInner&gt; object
     */
    public Observable<Page<TransactionsSummaryInner>> listAsync(final String billingAccountName, final String startDate, final String endDate) {
        return listWithServiceResponseAsync(billingAccountName, startDate, endDate)
            .map(new Func1<ServiceResponse<Page<TransactionsSummaryInner>>, Page<TransactionsSummaryInner>>() {
                @Override
                public Page<TransactionsSummaryInner> call(ServiceResponse<Page<TransactionsSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionsSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> listWithServiceResponseAsync(final String billingAccountName, final String startDate, final String endDate) {
        return listSinglePageAsync(billingAccountName, startDate, endDate)
            .concatMap(new Func1<ServiceResponse<Page<TransactionsSummaryInner>>, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(ServiceResponse<Page<TransactionsSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionsSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> listSinglePageAsync(final String billingAccountName, final String startDate, final String endDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        final String filter = null;
        return service.list(billingAccountName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionsSummaryInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionsSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionsSummaryInner&gt; object if successful.
     */
    public PagedList<TransactionsSummaryInner> list(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        ServiceResponse<Page<TransactionsSummaryInner>> response = listSinglePageAsync(billingAccountName, startDate, endDate, filter).toBlocking().single();
        return new PagedList<TransactionsSummaryInner>(response.body()) {
            @Override
            public Page<TransactionsSummaryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionsSummaryInner>> listAsync(final String billingAccountName, final String startDate, final String endDate, final String filter, final ListOperationCallback<TransactionsSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(billingAccountName, startDate, endDate, filter),
            new Func1<String, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionsSummaryInner&gt; object
     */
    public Observable<Page<TransactionsSummaryInner>> listAsync(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        return listWithServiceResponseAsync(billingAccountName, startDate, endDate, filter)
            .map(new Func1<ServiceResponse<Page<TransactionsSummaryInner>>, Page<TransactionsSummaryInner>>() {
                @Override
                public Page<TransactionsSummaryInner> call(ServiceResponse<Page<TransactionsSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionsSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> listWithServiceResponseAsync(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        return listSinglePageAsync(billingAccountName, startDate, endDate, filter)
            .concatMap(new Func1<ServiceResponse<Page<TransactionsSummaryInner>>, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(ServiceResponse<Page<TransactionsSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
    ServiceResponse<PageImpl<TransactionsSummaryInner>> * @param billingAccountName billing Account Id.
    ServiceResponse<PageImpl<TransactionsSummaryInner>> * @param startDate Start date
    ServiceResponse<PageImpl<TransactionsSummaryInner>> * @param endDate End date
    ServiceResponse<PageImpl<TransactionsSummaryInner>> * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionsSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> listSinglePageAsync(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        return service.list(billingAccountName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionsSummaryInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionsSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionsSummaryInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionsSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionsSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionsSummaryInner&gt; object if successful.
     */
    public PagedList<TransactionsSummaryInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<TransactionsSummaryInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TransactionsSummaryInner>(response.body()) {
            @Override
            public Page<TransactionsSummaryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionsSummaryInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<TransactionsSummaryInner>> serviceFuture, final ListOperationCallback<TransactionsSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionsSummaryInner&gt; object
     */
    public Observable<Page<TransactionsSummaryInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TransactionsSummaryInner>>, Page<TransactionsSummaryInner>>() {
                @Override
                public Page<TransactionsSummaryInner> call(ServiceResponse<Page<TransactionsSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionsSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TransactionsSummaryInner>>, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(ServiceResponse<Page<TransactionsSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions by billingAccountName for given start and end date.
     *
    ServiceResponse<PageImpl<TransactionsSummaryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionsSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionsSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionsSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionsSummaryInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionsSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionsSummaryInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionsSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionsSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
