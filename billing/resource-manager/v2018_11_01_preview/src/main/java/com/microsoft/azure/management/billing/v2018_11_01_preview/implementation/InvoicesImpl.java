/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2018_11_01_preview.Invoices;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2018_11_01_preview.InvoiceSummary;

class InvoicesImpl extends WrapperImpl<InvoicesInner> implements Invoices {
    private final BillingManager manager;

    InvoicesImpl(BillingManager manager) {
        super(manager.inner().invoices());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private InvoiceSummaryImpl wrapModel(InvoiceSummaryInner inner) {
        return  new InvoiceSummaryImpl(inner, manager());
    }

    @Override
    public Observable<InvoiceSummary> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        InvoicesInner client = this.inner();
        return client.listByBillingProfileAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate)
        .flatMapIterable(new Func1<Page<InvoiceSummaryInner>, Iterable<InvoiceSummaryInner>>() {
            @Override
            public Iterable<InvoiceSummaryInner> call(Page<InvoiceSummaryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<InvoiceSummaryInner, InvoiceSummary>() {
            @Override
            public InvoiceSummary call(InvoiceSummaryInner inner) {
                return new InvoiceSummaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<InvoiceSummary> getAsync(String billingAccountName, String billingProfileName, String invoiceName) {
        InvoicesInner client = this.inner();
        return client.getAsync(billingAccountName, billingProfileName, invoiceName)
        .map(new Func1<InvoiceSummaryInner, InvoiceSummary>() {
            @Override
            public InvoiceSummary call(InvoiceSummaryInner inner) {
                return new InvoiceSummaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<InvoiceSummary> listByBillingAccountNameAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        InvoicesInner client = this.inner();
        return client.listByBillingAccountNameAsync(billingAccountName, periodStartDate, periodEndDate)
        .flatMapIterable(new Func1<Page<InvoiceSummaryInner>, Iterable<InvoiceSummaryInner>>() {
            @Override
            public Iterable<InvoiceSummaryInner> call(Page<InvoiceSummaryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<InvoiceSummaryInner, InvoiceSummary>() {
            @Override
            public InvoiceSummary call(InvoiceSummaryInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
