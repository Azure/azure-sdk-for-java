/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ProductsByBillingAccounts.
 */
public class ProductsByBillingAccountsInner {
    /** The Retrofit service to perform REST calls. */
    private ProductsByBillingAccountsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of ProductsByBillingAccountsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ProductsByBillingAccountsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(ProductsByBillingAccountsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ProductsByBillingAccounts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ProductsByBillingAccountsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.ProductsByBillingAccounts list" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products")
        Observable<Response<ResponseBody>> list(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.ProductsByBillingAccounts listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> list(final String billingAccountName) {
        ServiceResponse<Page<ProductSummaryInner>> response = listSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listAsync(final String billingAccountName, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listAsync(final String billingAccountName) {
        return listWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listWithServiceResponseAsync(final String billingAccountName) {
        return listSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(billingAccountName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> list(final String billingAccountName, final String filter) {
        ServiceResponse<Page<ProductSummaryInner>> response = listSinglePageAsync(billingAccountName, filter).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listAsync(final String billingAccountName, final String filter, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(billingAccountName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listAsync(final String billingAccountName, final String filter) {
        return listWithServiceResponseAsync(billingAccountName, filter)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listWithServiceResponseAsync(final String billingAccountName, final String filter) {
        return listSinglePageAsync(billingAccountName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by billingAccountName.
     *
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param billingAccountName billing Account Id.
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listSinglePageAsync(final String billingAccountName, final String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(billingAccountName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProductSummaryInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProductSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProductSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ProductSummaryInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ProductSummaryInner>> serviceFuture, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by billingAccountName.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by billingAccountName.
     *
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProductSummaryInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProductSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProductSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
