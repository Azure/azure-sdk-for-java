/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PaymentMethods.
 */
public class PaymentMethodsInner {
    /** The Retrofit service to perform REST calls. */
    private PaymentMethodsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of PaymentMethodsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PaymentMethodsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(PaymentMethodsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PaymentMethods to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PaymentMethodsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.PaymentMethods listByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/paymentMethods")
        Observable<Response<ResponseBody>> listByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.PaymentMethods listByBillingProfileName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethods")
        Observable<Response<ResponseBody>> listByBillingProfileName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.PaymentMethods listByBillingAccountNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.PaymentMethods listByBillingProfileNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingProfileNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PaymentMethodInner&gt; object if successful.
     */
    public PagedList<PaymentMethodInner> listByBillingAccountName(final String billingAccountName) {
        ServiceResponse<Page<PaymentMethodInner>> response = listByBillingAccountNameSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<PaymentMethodInner>(response.body()) {
            @Override
            public Page<PaymentMethodInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param billingAccountName Billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PaymentMethodInner>> listByBillingAccountNameAsync(final String billingAccountName, final ListOperationCallback<PaymentMethodInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<Page<PaymentMethodInner>> listByBillingAccountNameAsync(final String billingAccountName) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Page<PaymentMethodInner>>() {
                @Override
                public Page<PaymentMethodInner> call(ServiceResponse<Page<PaymentMethodInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingAccountNameWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountNameSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(ServiceResponse<Page<PaymentMethodInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
    ServiceResponse<PageImpl<PaymentMethodInner>> * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PaymentMethodInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingAccountNameSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PaymentMethodInner>> result = listByBillingAccountNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PaymentMethodInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PaymentMethodInner>> listByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PaymentMethodInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PaymentMethodInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PaymentMethodInner&gt; object if successful.
     */
    public PagedList<PaymentMethodInner> listByBillingProfileName(final String billingAccountName, final String billingProfileName) {
        ServiceResponse<Page<PaymentMethodInner>> response = listByBillingProfileNameSinglePageAsync(billingAccountName, billingProfileName).toBlocking().single();
        return new PagedList<PaymentMethodInner>(response.body()) {
            @Override
            public Page<PaymentMethodInner> nextPage(String nextPageLink) {
                return listByBillingProfileNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PaymentMethodInner>> listByBillingProfileNameAsync(final String billingAccountName, final String billingProfileName, final ListOperationCallback<PaymentMethodInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNameSinglePageAsync(billingAccountName, billingProfileName),
            new Func1<String, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(String nextPageLink) {
                    return listByBillingProfileNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<Page<PaymentMethodInner>> listByBillingProfileNameAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName)
            .map(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Page<PaymentMethodInner>>() {
                @Override
                public Page<PaymentMethodInner> call(ServiceResponse<Page<PaymentMethodInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingProfileNameWithServiceResponseAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileNameSinglePageAsync(billingAccountName, billingProfileName)
            .concatMap(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(ServiceResponse<Page<PaymentMethodInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
    ServiceResponse<PageImpl<PaymentMethodInner>> * @param billingAccountName Billing Account Id.
    ServiceResponse<PageImpl<PaymentMethodInner>> * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PaymentMethodInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingProfileNameSinglePageAsync(final String billingAccountName, final String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingProfileName(billingAccountName, billingProfileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PaymentMethodInner>> result = listByBillingProfileNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PaymentMethodInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PaymentMethodInner>> listByBillingProfileNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PaymentMethodInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PaymentMethodInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PaymentMethodInner&gt; object if successful.
     */
    public PagedList<PaymentMethodInner> listByBillingAccountNameNext(final String nextPageLink) {
        ServiceResponse<Page<PaymentMethodInner>> response = listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PaymentMethodInner>(response.body()) {
            @Override
            public Page<PaymentMethodInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PaymentMethodInner>> listByBillingAccountNameNextAsync(final String nextPageLink, final ServiceFuture<List<PaymentMethodInner>> serviceFuture, final ListOperationCallback<PaymentMethodInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<Page<PaymentMethodInner>> listByBillingAccountNameNextAsync(final String nextPageLink) {
        return listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Page<PaymentMethodInner>>() {
                @Override
                public Page<PaymentMethodInner> call(ServiceResponse<Page<PaymentMethodInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingAccountNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(ServiceResponse<Page<PaymentMethodInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the Payment Methods by billing account Id.
     *
    ServiceResponse<PageImpl<PaymentMethodInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PaymentMethodInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingAccountNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PaymentMethodInner>> result = listByBillingAccountNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PaymentMethodInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PaymentMethodInner>> listByBillingAccountNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PaymentMethodInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PaymentMethodInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PaymentMethodInner&gt; object if successful.
     */
    public PagedList<PaymentMethodInner> listByBillingProfileNameNext(final String nextPageLink) {
        ServiceResponse<Page<PaymentMethodInner>> response = listByBillingProfileNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PaymentMethodInner>(response.body()) {
            @Override
            public Page<PaymentMethodInner> nextPage(String nextPageLink) {
                return listByBillingProfileNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PaymentMethodInner>> listByBillingProfileNameNextAsync(final String nextPageLink, final ServiceFuture<List<PaymentMethodInner>> serviceFuture, final ListOperationCallback<PaymentMethodInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(String nextPageLink) {
                    return listByBillingProfileNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<Page<PaymentMethodInner>> listByBillingProfileNameNextAsync(final String nextPageLink) {
        return listByBillingProfileNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Page<PaymentMethodInner>>() {
                @Override
                public Page<PaymentMethodInner> call(ServiceResponse<Page<PaymentMethodInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PaymentMethodInner&gt; object
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingProfileNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingProfileNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PaymentMethodInner>>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(ServiceResponse<Page<PaymentMethodInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the Payment Methods by billing profile Id.
     *
    ServiceResponse<PageImpl<PaymentMethodInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PaymentMethodInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PaymentMethodInner>>> listByBillingProfileNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingProfileNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PaymentMethodInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PaymentMethodInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PaymentMethodInner>> result = listByBillingProfileNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PaymentMethodInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PaymentMethodInner>> listByBillingProfileNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PaymentMethodInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PaymentMethodInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
