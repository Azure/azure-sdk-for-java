/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ProductsTransferHeaders;
import com.microsoft.azure.management.billing.v2018_11_01_preview.TransferProductRequestProperties;
import com.microsoft.azure.management.billing.v2018_11_01_preview.UpdateAutoRenew;
import com.microsoft.azure.management.billing.v2018_11_01_preview.UpdateAutoRenewRequest;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Products.
 */
public class ProductsInner {
    /** The Retrofit service to perform REST calls. */
    private ProductsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of ProductsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ProductsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(ProductsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Products to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ProductsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products listByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products")
        Observable<Response<ResponseBody>> listByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products listByInvoiceSectionName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products")
        Observable<Response<ResponseBody>> listByInvoiceSectionName(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Path("productName") String productName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products transfer" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}/transfer")
        Observable<Response<ResponseBody>> transfer(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Path("productName") String productName, @Query("api-version") String apiVersion, @Body TransferProductRequestProperties parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products validateTransfer" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}/validateTransferEligibility")
        Observable<Response<ResponseBody>> validateTransfer(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Path("productName") String productName, @Body TransferProductRequestProperties parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products updateAutoRenewByBillingAccountName" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}/updateAutoRenew")
        Observable<Response<ResponseBody>> updateAutoRenewByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Path("productName") String productName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateAutoRenewRequest body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products updateAutoRenewByInvoiceSectionName" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}/updateAutoRenew")
        Observable<Response<ResponseBody>> updateAutoRenewByInvoiceSectionName(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Path("productName") String productName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateAutoRenewRequest body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products listByBillingAccountNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Products listByInvoiceSectionNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByInvoiceSectionNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> listByBillingAccountName(final String billingAccountName) {
        ServiceResponse<Page<ProductSummaryInner>> response = listByBillingAccountNameSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listByBillingAccountNameAsync(final String billingAccountName, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listByBillingAccountNameAsync(final String billingAccountName) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByBillingAccountNameWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountNameSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByBillingAccountNameSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listByBillingAccountNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> listByBillingAccountName(final String billingAccountName, final String filter) {
        ServiceResponse<Page<ProductSummaryInner>> response = listByBillingAccountNameSinglePageAsync(billingAccountName, filter).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listByBillingAccountNameAsync(final String billingAccountName, final String filter, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameSinglePageAsync(billingAccountName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listByBillingAccountNameAsync(final String billingAccountName, final String filter) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName, filter)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByBillingAccountNameWithServiceResponseAsync(final String billingAccountName, final String filter) {
        return listByBillingAccountNameSinglePageAsync(billingAccountName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by billing account name.
     *
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param billingAccountName Billing Account Id.
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByBillingAccountNameSinglePageAsync(final String billingAccountName, final String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listByBillingAccountNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProductSummaryInner>> listByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProductSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProductSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> listByInvoiceSectionName(final String billingAccountName, final String invoiceSectionName) {
        ServiceResponse<Page<ProductSummaryInner>> response = listByInvoiceSectionNameSinglePageAsync(billingAccountName, invoiceSectionName).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listByInvoiceSectionNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listByInvoiceSectionNameAsync(final String billingAccountName, final String invoiceSectionName, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSectionNameSinglePageAsync(billingAccountName, invoiceSectionName),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listByInvoiceSectionNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listByInvoiceSectionNameAsync(final String billingAccountName, final String invoiceSectionName) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByInvoiceSectionNameWithServiceResponseAsync(final String billingAccountName, final String invoiceSectionName) {
        return listByInvoiceSectionNameSinglePageAsync(billingAccountName, invoiceSectionName)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceSectionNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByInvoiceSectionNameSinglePageAsync(final String billingAccountName, final String invoiceSectionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByInvoiceSectionName(billingAccountName, invoiceSectionName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listByInvoiceSectionNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> listByInvoiceSectionName(final String billingAccountName, final String invoiceSectionName, final String filter) {
        ServiceResponse<Page<ProductSummaryInner>> response = listByInvoiceSectionNameSinglePageAsync(billingAccountName, invoiceSectionName, filter).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listByInvoiceSectionNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listByInvoiceSectionNameAsync(final String billingAccountName, final String invoiceSectionName, final String filter, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSectionNameSinglePageAsync(billingAccountName, invoiceSectionName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listByInvoiceSectionNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listByInvoiceSectionNameAsync(final String billingAccountName, final String invoiceSectionName, final String filter) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, filter)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByInvoiceSectionNameWithServiceResponseAsync(final String billingAccountName, final String invoiceSectionName, final String filter) {
        return listByInvoiceSectionNameSinglePageAsync(billingAccountName, invoiceSectionName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceSectionNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by invoice section name.
     *
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param billingAccountName Billing Account Id.
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param invoiceSectionName InvoiceSection Id.
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param filter May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByInvoiceSectionNameSinglePageAsync(final String billingAccountName, final String invoiceSectionName, final String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByInvoiceSectionName(billingAccountName, invoiceSectionName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listByInvoiceSectionNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProductSummaryInner>> listByInvoiceSectionNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProductSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProductSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get a single product by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProductSummaryInner object if successful.
     */
    public ProductSummaryInner get(String billingAccountName, String invoiceSectionName, String productName) {
        return getWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName).toBlocking().single().body();
    }

    /**
     * Get a single product by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProductSummaryInner> getAsync(String billingAccountName, String invoiceSectionName, String productName, final ServiceCallback<ProductSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName), serviceCallback);
    }

    /**
     * Get a single product by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProductSummaryInner object
     */
    public Observable<ProductSummaryInner> getAsync(String billingAccountName, String invoiceSectionName, String productName) {
        return getWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName).map(new Func1<ServiceResponse<ProductSummaryInner>, ProductSummaryInner>() {
            @Override
            public ProductSummaryInner call(ServiceResponse<ProductSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a single product by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProductSummaryInner object
     */
    public Observable<ServiceResponse<ProductSummaryInner>> getWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String productName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (productName == null) {
            throw new IllegalArgumentException("Parameter productName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, invoiceSectionName, productName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProductSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<ProductSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProductSummaryInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProductSummaryInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProductSummaryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProductSummaryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to transfer a Product to another invoice section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Product operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProductSummaryInner object if successful.
     */
    public ProductSummaryInner transfer(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        return transferWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, parameters).toBlocking().single().body();
    }

    /**
     * The operation to transfer a Product to another invoice section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Product operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProductSummaryInner> transferAsync(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters, final ServiceCallback<ProductSummaryInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(transferWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, parameters), serviceCallback);
    }

    /**
     * The operation to transfer a Product to another invoice section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Product operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProductSummaryInner object
     */
    public Observable<ProductSummaryInner> transferAsync(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        return transferWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, parameters).map(new Func1<ServiceResponseWithHeaders<ProductSummaryInner, ProductsTransferHeaders>, ProductSummaryInner>() {
            @Override
            public ProductSummaryInner call(ServiceResponseWithHeaders<ProductSummaryInner, ProductsTransferHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to transfer a Product to another invoice section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Product operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProductSummaryInner object
     */
    public Observable<ServiceResponseWithHeaders<ProductSummaryInner, ProductsTransferHeaders>> transferWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (productName == null) {
            throw new IllegalArgumentException("Parameter productName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.transfer(billingAccountName, invoiceSectionName, productName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ProductSummaryInner, ProductsTransferHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ProductSummaryInner, ProductsTransferHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ProductSummaryInner, ProductsTransferHeaders> clientResponse = transferDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ProductSummaryInner, ProductsTransferHeaders> transferDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProductSummaryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProductSummaryInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ProductsTransferHeaders.class);
    }

    /**
     * Validates the transfer of products across invoice sections.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Products operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ValidateProductTransferEligibilityResultInner object if successful.
     */
    public ValidateProductTransferEligibilityResultInner validateTransfer(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        return validateTransferWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, parameters).toBlocking().single().body();
    }

    /**
     * Validates the transfer of products across invoice sections.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Products operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ValidateProductTransferEligibilityResultInner> validateTransferAsync(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters, final ServiceCallback<ValidateProductTransferEligibilityResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(validateTransferWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, parameters), serviceCallback);
    }

    /**
     * Validates the transfer of products across invoice sections.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Products operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidateProductTransferEligibilityResultInner object
     */
    public Observable<ValidateProductTransferEligibilityResultInner> validateTransferAsync(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        return validateTransferWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, parameters).map(new Func1<ServiceResponse<ValidateProductTransferEligibilityResultInner>, ValidateProductTransferEligibilityResultInner>() {
            @Override
            public ValidateProductTransferEligibilityResultInner call(ServiceResponse<ValidateProductTransferEligibilityResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Validates the transfer of products across invoice sections.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param parameters Parameters supplied to the Transfer Products operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidateProductTransferEligibilityResultInner object
     */
    public Observable<ServiceResponse<ValidateProductTransferEligibilityResultInner>> validateTransferWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (productName == null) {
            throw new IllegalArgumentException("Parameter productName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.validateTransfer(billingAccountName, invoiceSectionName, productName, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ValidateProductTransferEligibilityResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ValidateProductTransferEligibilityResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ValidateProductTransferEligibilityResultInner> clientResponse = validateTransferDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ValidateProductTransferEligibilityResultInner> validateTransferDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ValidateProductTransferEligibilityResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ValidateProductTransferEligibilityResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateAutoRenewOperationSummaryInner object if successful.
     */
    public UpdateAutoRenewOperationSummaryInner updateAutoRenewByBillingAccountName(String billingAccountName, String productName) {
        return updateAutoRenewByBillingAccountNameWithServiceResponseAsync(billingAccountName, productName).toBlocking().single().body();
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByBillingAccountNameAsync(String billingAccountName, String productName, final ServiceCallback<UpdateAutoRenewOperationSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateAutoRenewByBillingAccountNameWithServiceResponseAsync(billingAccountName, productName), serviceCallback);
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByBillingAccountNameAsync(String billingAccountName, String productName) {
        return updateAutoRenewByBillingAccountNameWithServiceResponseAsync(billingAccountName, productName).map(new Func1<ServiceResponse<UpdateAutoRenewOperationSummaryInner>, UpdateAutoRenewOperationSummaryInner>() {
            @Override
            public UpdateAutoRenewOperationSummaryInner call(ServiceResponse<UpdateAutoRenewOperationSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> updateAutoRenewByBillingAccountNameWithServiceResponseAsync(String billingAccountName, String productName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (productName == null) {
            throw new IllegalArgumentException("Parameter productName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateAutoRenew autoRenew = null;
        UpdateAutoRenewRequest body = new UpdateAutoRenewRequest();
        body.withAutoRenew(null);
        return service.updateAutoRenewByBillingAccountName(billingAccountName, productName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UpdateAutoRenewOperationSummaryInner> clientResponse = updateAutoRenewByBillingAccountNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateAutoRenewOperationSummaryInner object if successful.
     */
    public UpdateAutoRenewOperationSummaryInner updateAutoRenewByBillingAccountName(String billingAccountName, String productName, UpdateAutoRenew autoRenew) {
        return updateAutoRenewByBillingAccountNameWithServiceResponseAsync(billingAccountName, productName, autoRenew).toBlocking().single().body();
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByBillingAccountNameAsync(String billingAccountName, String productName, UpdateAutoRenew autoRenew, final ServiceCallback<UpdateAutoRenewOperationSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateAutoRenewByBillingAccountNameWithServiceResponseAsync(billingAccountName, productName, autoRenew), serviceCallback);
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByBillingAccountNameAsync(String billingAccountName, String productName, UpdateAutoRenew autoRenew) {
        return updateAutoRenewByBillingAccountNameWithServiceResponseAsync(billingAccountName, productName, autoRenew).map(new Func1<ServiceResponse<UpdateAutoRenewOperationSummaryInner>, UpdateAutoRenewOperationSummaryInner>() {
            @Override
            public UpdateAutoRenewOperationSummaryInner call(ServiceResponse<UpdateAutoRenewOperationSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancel auto renew for product by product id and billing account name.
     *
     * @param billingAccountName Billing Account Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> updateAutoRenewByBillingAccountNameWithServiceResponseAsync(String billingAccountName, String productName, UpdateAutoRenew autoRenew) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (productName == null) {
            throw new IllegalArgumentException("Parameter productName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        UpdateAutoRenewRequest body = new UpdateAutoRenewRequest();
        body.withAutoRenew(autoRenew);
        return service.updateAutoRenewByBillingAccountName(billingAccountName, productName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UpdateAutoRenewOperationSummaryInner> clientResponse = updateAutoRenewByBillingAccountNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UpdateAutoRenewOperationSummaryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UpdateAutoRenewOperationSummaryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateAutoRenewOperationSummaryInner object if successful.
     */
    public UpdateAutoRenewOperationSummaryInner updateAutoRenewByInvoiceSectionName(String billingAccountName, String invoiceSectionName, String productName) {
        return updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName).toBlocking().single().body();
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String productName, final ServiceCallback<UpdateAutoRenewOperationSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName), serviceCallback);
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String productName) {
        return updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName).map(new Func1<ServiceResponse<UpdateAutoRenewOperationSummaryInner>, UpdateAutoRenewOperationSummaryInner>() {
            @Override
            public UpdateAutoRenewOperationSummaryInner call(ServiceResponse<UpdateAutoRenewOperationSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String productName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (productName == null) {
            throw new IllegalArgumentException("Parameter productName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateAutoRenew autoRenew = null;
        UpdateAutoRenewRequest body = new UpdateAutoRenewRequest();
        body.withAutoRenew(null);
        return service.updateAutoRenewByInvoiceSectionName(billingAccountName, invoiceSectionName, productName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UpdateAutoRenewOperationSummaryInner> clientResponse = updateAutoRenewByInvoiceSectionNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateAutoRenewOperationSummaryInner object if successful.
     */
    public UpdateAutoRenewOperationSummaryInner updateAutoRenewByInvoiceSectionName(String billingAccountName, String invoiceSectionName, String productName, UpdateAutoRenew autoRenew) {
        return updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, autoRenew).toBlocking().single().body();
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String productName, UpdateAutoRenew autoRenew, final ServiceCallback<UpdateAutoRenewOperationSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, autoRenew), serviceCallback);
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String productName, UpdateAutoRenew autoRenew) {
        return updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, productName, autoRenew).map(new Func1<ServiceResponse<UpdateAutoRenewOperationSummaryInner>, UpdateAutoRenewOperationSummaryInner>() {
            @Override
            public UpdateAutoRenewOperationSummaryInner call(ServiceResponse<UpdateAutoRenewOperationSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancel auto renew for product by product id and invoice section name.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param productName Invoice Id.
     * @param autoRenew Request parameters to update auto renew policy a product. Possible values include: 'true', 'false'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateAutoRenewOperationSummaryInner object
     */
    public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> updateAutoRenewByInvoiceSectionNameWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String productName, UpdateAutoRenew autoRenew) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (productName == null) {
            throw new IllegalArgumentException("Parameter productName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        UpdateAutoRenewRequest body = new UpdateAutoRenewRequest();
        body.withAutoRenew(autoRenew);
        return service.updateAutoRenewByInvoiceSectionName(billingAccountName, invoiceSectionName, productName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<UpdateAutoRenewOperationSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UpdateAutoRenewOperationSummaryInner> clientResponse = updateAutoRenewByInvoiceSectionNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UpdateAutoRenewOperationSummaryInner> updateAutoRenewByInvoiceSectionNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UpdateAutoRenewOperationSummaryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UpdateAutoRenewOperationSummaryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists products by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> listByBillingAccountNameNext(final String nextPageLink) {
        ServiceResponse<Page<ProductSummaryInner>> response = listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listByBillingAccountNameNextAsync(final String nextPageLink, final ServiceFuture<List<ProductSummaryInner>> serviceFuture, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listByBillingAccountNameNextAsync(final String nextPageLink) {
        return listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByBillingAccountNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by billing account name.
     *
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByBillingAccountNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listByBillingAccountNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProductSummaryInner>> listByBillingAccountNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProductSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProductSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists products by invoice section name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProductSummaryInner&gt; object if successful.
     */
    public PagedList<ProductSummaryInner> listByInvoiceSectionNameNext(final String nextPageLink) {
        ServiceResponse<Page<ProductSummaryInner>> response = listByInvoiceSectionNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProductSummaryInner>(response.body()) {
            @Override
            public Page<ProductSummaryInner> nextPage(String nextPageLink) {
                return listByInvoiceSectionNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists products by invoice section name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProductSummaryInner>> listByInvoiceSectionNameNextAsync(final String nextPageLink, final ServiceFuture<List<ProductSummaryInner>> serviceFuture, final ListOperationCallback<ProductSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSectionNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(String nextPageLink) {
                    return listByInvoiceSectionNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists products by invoice section name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<Page<ProductSummaryInner>> listByInvoiceSectionNameNextAsync(final String nextPageLink) {
        return listByInvoiceSectionNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Page<ProductSummaryInner>>() {
                @Override
                public Page<ProductSummaryInner> call(ServiceResponse<Page<ProductSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists products by invoice section name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProductSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByInvoiceSectionNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByInvoiceSectionNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProductSummaryInner>>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(ServiceResponse<Page<ProductSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceSectionNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists products by invoice section name.
     *
    ServiceResponse<PageImpl<ProductSummaryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProductSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProductSummaryInner>>> listByInvoiceSectionNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByInvoiceSectionNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProductSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProductSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProductSummaryInner>> result = listByInvoiceSectionNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProductSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProductSummaryInner>> listByInvoiceSectionNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProductSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProductSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
