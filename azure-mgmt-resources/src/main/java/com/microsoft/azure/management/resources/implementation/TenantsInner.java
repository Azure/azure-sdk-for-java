/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resources.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.annotations.ExpectedResponses;
import com.microsoft.rest.annotations.GET;
import com.microsoft.rest.annotations.HeaderParam;
import com.microsoft.rest.annotations.Headers;
import com.microsoft.rest.annotations.Host;
import com.microsoft.rest.annotations.PathParam;
import com.microsoft.rest.annotations.QueryParam;
import com.microsoft.rest.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.http.HttpClient;
import com.microsoft.rest.ServiceFuture;
import java.io.IOException;
import java.util.List;
import rx.functions.Func1;
import rx.Observable;
import rx.Single;
import com.microsoft.azure.AzureProxy;

/**
 * An instance of this class provides access to all the operations defined
 * in Tenants.
 */
public class TenantsInner {
    /** The RestProxy service to perform REST calls. */
    private TenantsService service;
    /** The service client containing this operation class. */
    private SubscriptionClientImpl client;

    /**
     * Initializes an instance of TenantsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public TenantsInner(SubscriptionClientImpl client) {
        this.service = AzureProxy.create(TenantsService.class, client.restClient().baseURL(), client.httpClient(), client.serializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for Tenants to be
     * used by RestProxy to perform REST calls.
     */
    @Host("https://management.azure.com")
    interface TenantsService {
        @Headers({ "x-ms-logging-context: com.microsoft.azure.management.resources.Tenants list" })
        @GET("tenants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<PageImpl1<TenantIdDescriptionInner>> list(@QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({ "x-ms-logging-context: com.microsoft.azure.management.resources.Tenants listNext" })
        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<PageImpl1<TenantIdDescriptionInner>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

    }

    /**
     * Gets the tenants for your account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TenantIdDescriptionInner&gt; object if successful.
     */
    public PagedList<TenantIdDescriptionInner> list() {
        Page<TenantIdDescriptionInner> response = listSinglePageAsync().toBlocking().value();
        return new PagedList<TenantIdDescriptionInner>(response) {
            @Override
            public Page<TenantIdDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().value();
            }
        };
    }

    /**
     * Gets the tenants for your account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList<TenantIdDescriptionInner> object
     */
    public Observable<Page<TenantIdDescriptionInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap(new Func1<Page<TenantIdDescriptionInner>, Observable<Page<TenantIdDescriptionInner>>>() {
                @Override
                public Observable<Page<TenantIdDescriptionInner>> call(Page<TenantIdDescriptionInner> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the tenants for your account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList<TenantIdDescriptionInner> object if successful.
     */
    public Single<Page<TenantIdDescriptionInner>> listSinglePageAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent()).map(new Func1<PageImpl1<TenantIdDescriptionInner>, Page<TenantIdDescriptionInner>>() {
                @Override
                public Page<TenantIdDescriptionInner> call(PageImpl1<TenantIdDescriptionInner> productPage) {
                    return productPage;
                }
            });
    }


    /**
     * Gets the tenants for your account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TenantIdDescriptionInner&gt; object if successful.
     */
    public PagedList<TenantIdDescriptionInner> listNext(final String nextPageLink) {
        Page<TenantIdDescriptionInner> response = listNextSinglePageAsync(nextPageLink).toBlocking().value();
        return new PagedList<TenantIdDescriptionInner>(response) {
            @Override
            public Page<TenantIdDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().value();
            }
        };
    }

    /**
     * Gets the tenants for your account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList<TenantIdDescriptionInner> object
     */
    public Observable<Page<TenantIdDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Func1<Page<TenantIdDescriptionInner>, Observable<Page<TenantIdDescriptionInner>>>() {
                @Override
                public Observable<Page<TenantIdDescriptionInner>> call(Page<TenantIdDescriptionInner> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the tenants for your account.
     *
    PageImpl1<TenantIdDescriptionInner> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList<TenantIdDescriptionInner> object if successful.
     */
    public Single<Page<TenantIdDescriptionInner>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent()).map(new Func1<PageImpl1<TenantIdDescriptionInner>, Page<TenantIdDescriptionInner>>() {
                @Override
                public Page<TenantIdDescriptionInner> call(PageImpl1<TenantIdDescriptionInner> productPage) {
                    return productPage;
                }
            });
    }


}
