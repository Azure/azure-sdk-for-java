From e0d376a7635486270a0ed768fa6fa5a78374279e Mon Sep 17 00:00:00 2001
From: Mikhail Lipin <v-milipin@microsoft.com>
Date: Sun, 16 Jul 2023 04:16:46 +0300
Subject: [PATCH] Improving docs (AsyncContainer, AsyncDatabase,
 AsyncPermission, AsyncScripts and CosmosDatabase)

---
 .../azure/cosmos/CosmosAsyncContainer.java    |  87 +-
 .../com/azure/cosmos/CosmosAsyncDatabase.java | 233 +++++-
 .../azure/cosmos/CosmosAsyncPermission.java   |  28 +-
 .../com/azure/cosmos/CosmosAsyncScripts.java  | 198 ++++-
 .../java/com/azure/cosmos/CosmosDatabase.java | 281 ++++++-
 .../java/com/azure/cosmos/ReadmeSamples.java  | 768 ++++++++++++++++++
 6 files changed, 1525 insertions(+), 70 deletions(-)

diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java
index b2188d6906..b98f04c370 100644
--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java
+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java
@@ -167,7 +167,14 @@ public class CosmosAsyncContainer {
 
     /**
      * Reads the current container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.read -->
+     * <pre>
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerRequestOptions options = new CosmosContainerRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; containerResponse = container.read&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.read -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single Cosmos container response with
      * the read container. In case of failure the {@link Mono} will error.
@@ -181,7 +188,14 @@ public class CosmosAsyncContainer {
 
     /**
      * Reads the current container while specifying additional options such as If-Match.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.read -->
+     * <pre>
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerRequestOptions options = new CosmosContainerRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; containerResponse = container.read&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.read -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single Cosmos container response with
      * the read container. In case of failure the {@link Mono} will error.
@@ -197,7 +211,14 @@ public class CosmosAsyncContainer {
 
     /**
      * Deletes the container
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.delete -->
+     * <pre>
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerRequestOptions options = new CosmosContainerRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; containerResponse = container.delete&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.delete -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single Cosmos container response for the
      * deleted database. In case of failure the {@link Mono} will error.
@@ -213,7 +234,14 @@ public class CosmosAsyncContainer {
 
     /**
      * Deletes the current container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.delete -->
+     * <pre>
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerRequestOptions options = new CosmosContainerRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; containerResponse = container.delete&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.delete -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single Cosmos container response for the
      * deleted container. In case of failure the {@link Mono} will error.
@@ -227,7 +255,15 @@ public class CosmosAsyncContainer {
 
     /**
      * Replaces the current container's properties.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.replace -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; containerResponse = container.replace&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.replace -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single Cosmos container response with
      * the replaced container properties. In case of failure the {@link Mono} will
@@ -243,7 +279,15 @@ public class CosmosAsyncContainer {
 
     /**
      * Replaces the current container properties while using non-default request options.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.replace -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; containerResponse = container.replace&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.replace -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single Cosmos container response with
      * the replaced container properties. In case of failure the {@link Mono} will
@@ -265,7 +309,16 @@ public class CosmosAsyncContainer {
 
     /**
      * Creates an item.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.createItem -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosItemResponse&lt;CosmosContainerProperties&gt;&gt; containerResponse =
+     *      container.createItem&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.createItem -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single resource response with the
      * created Cosmos item. In case of failure the {@link Mono} will error.
@@ -281,7 +334,16 @@ public class CosmosAsyncContainer {
 
     /**
      * Creates an item.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.createItem -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosItemResponse&lt;CosmosContainerProperties&gt;&gt; containerResponse =
+     *      container.createItem&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.createItem -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a single resource response with the
      * created Cosmos item. In case of failure the {@link Mono} will error.
@@ -305,7 +367,16 @@ public class CosmosAsyncContainer {
 
     /**
      * Creates a Cosmos item.
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncContainer.createItem -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncContainer container = new CosmosAsyncContainer&#40;id, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
      *
+     * Mono&lt;CosmosItemResponse&lt;CosmosContainerProperties&gt;&gt; containerResponse =
+     *      container.createItem&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncContainer.createItem -->
      * @param <T> the type parameter.
      * @param item the item.
      * @param options the item request options.
diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java
index 0c37c0b0d2..0bccef39c6 100644
--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java
+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java
@@ -406,7 +406,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Creates a Cosmos container if it does not exist on the service.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; response =
+     *      cosmosAsyncDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a cosmos container response with the
      * created or existing container. In case of failure the {@link Mono} will
@@ -425,7 +434,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Creates a Cosmos container if it does not exist on the service.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; response =
+     *      cosmosAsyncDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
      * The throughput setting will only be used if the specified container
      * does not exist and therefore a new container will be created.
      * <p>
@@ -451,7 +469,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Creates a Cosmos container if it does not exist on the service.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; response =
+     *      cosmosAsyncDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
      * The throughput properties will only be used if the specified container
      * does not exist and therefor a new container will be created.
      * <p>
@@ -477,7 +504,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Creates a Cosmos container if it does not exist on the service.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; response =
+     *      cosmosAsyncDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
      * After subscription the operation will be performed. The {@link Mono} upon
      * successful completion will contain a cosmos container response with the
      * created container. In case of failure the {@link Mono} will error.
@@ -496,7 +532,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Creates a Cosmos container if it does not exist on the service.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; response =
+     *      cosmosAsyncDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
      * The throughput properties will only be used if the specified container
      * does not exist and therefor a new container will be created.
      * <p>
@@ -522,7 +567,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Creates a Cosmos container if it does not exist on the service.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosContainerProperties properties = new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * Mono&lt;CosmosContainerResponse&gt; response =
+     *      cosmosAsyncDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists -->
      * The throughput setting will only be used if the specified container
      * does not exist and a new container will be created.
      * <p>
@@ -548,7 +602,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Reads all cosmos containers.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.readAllContainers -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions options = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosAsyncDatabase.readAllContainers&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.readAllContainers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the read containers. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -587,7 +649,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Reads all cosmos containers.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.readAllContainers -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions options = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosAsyncDatabase.readAllContainers&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.readAllContainers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the read containers. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -601,7 +671,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos containers in a cosmos database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosAsyncDatabase.queryContainers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained containers. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -616,7 +694,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos containers in a cosmos database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosAsyncDatabase.queryContainers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained containers. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -636,7 +722,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos containers in a cosmos database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosAsyncDatabase.queryContainers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained containers. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -651,7 +745,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos containers in a cosmos database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosAsyncDatabase.queryContainers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryContainers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained containers. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -685,7 +787,14 @@ public class CosmosAsyncDatabase {
      * {@link Mono} upon successful completion will contain a single resource
      * response with the created user. In case of failure the {@link Mono} will
      * error.
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createUser -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosUserProperties properties = new CosmosUserProperties&#40;&#41;;
      *
+     * Mono&lt;CosmosUserResponse&gt; userResponse = cosmosAsyncDatabase.createUser&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createUser -->
      * @param userProperties the cosmos user properties
      * @return an {@link Mono} containing the single resource response with the
      * created cosmos user or an error.
@@ -699,7 +808,16 @@ public class CosmosAsyncDatabase {
      * {@link Mono} upon successful completion will contain a single resource
      * response with the created client encryption key. In case of failure the {@link Mono} will
      * error.
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.createClientEncryptionKey -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * ClientEncryptionKey key = new ClientEncryptionKey&#40;&#41;;
+     * CosmosClientEncryptionKeyProperties properties =
+     *      new CosmosClientEncryptionKeyProperties&#40;id, encryptionAlgorithm, wrappedDataEncryptionKey, metadata&#41;;
      *
+     * Mono&lt;CosmosClientEncryptionKeyResponse&gt; keyProperties =
+     *      cosmosAsyncDatabase.createClientEncryptionKey&#40;properties&#41;;
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.createClientEncryptionKey -->
      * @param keyProperties the cosmos client encryption key properties
      * @return an {@link Mono} containing the single resource response with the
      * created cosmos client encryption key or an error.
@@ -714,7 +832,14 @@ public class CosmosAsyncDatabase {
      * performed. The {@link Mono} upon successful completion will contain a single
      * resource response with the created user. In case of failure the {@link Mono}
      * will error.
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.upsertUser -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosUserProperties properties = new CosmosUserProperties&#40;&#41;;
      *
+     * Mono&lt;CosmosUserResponse&gt; userResponse = cosmosAsyncDatabase.upsertUser&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.upsertUser -->
      * @param userProperties the cosmos user properties
      * @return an {@link Mono} containing the single resource response with the
      * upserted user or an error.
@@ -725,7 +850,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Reads all cosmos users in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.readAllUsers -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions queryRequestOptions = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosAsyncDatabase.readAllUsers&#40;queryRequestOptions&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.readAllUsers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the read cosmos users. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -739,7 +872,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Reads all cosmos users in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.readAllUsers -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions queryRequestOptions = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosAsyncDatabase.readAllUsers&#40;queryRequestOptions&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.readAllUsers -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the read cosmos users. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -788,7 +929,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Reads all cosmos client encryption keys in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosUserProperties properties = new CosmosUserProperties&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosClientEncryptionKeyProperties&gt; keyProperties =
+     *      cosmosAsyncDatabase.readAllClientEncryptionKeys&#40;&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the read cosmos client encryption keys. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -802,7 +951,15 @@ public class CosmosAsyncDatabase {
 
     /**
      * Reads all cosmos client encryption keys in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys -->
+     * <pre>
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosUserProperties properties = new CosmosUserProperties&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosClientEncryptionKeyProperties&gt; keyProperties =
+     *      cosmosAsyncDatabase.readAllClientEncryptionKeys&#40;&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the read cosmos client encryption keys. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -841,7 +998,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos client encryption keys in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosClientEncryptionKeyProperties&gt; clientEncryptionKeys =
+     *      cosmosAsyncDatabase.queryClientEncryptionKeys&#40;query, requestOptions&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained client encryption keys. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -856,7 +1022,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos client encryption keys in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosClientEncryptionKeyProperties&gt; clientEncryptionKeys =
+     *      cosmosAsyncDatabase.queryClientEncryptionKeys&#40;query, requestOptions&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained client encryption keys. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -876,7 +1051,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos client encryption keys in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosClientEncryptionKeyProperties&gt; clientEncryptionKeys =
+     *      cosmosAsyncDatabase.queryClientEncryptionKeys&#40;query, requestOptions&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained client encryption keys. In case of
      * failure the {@link CosmosPagedFlux} will error.
@@ -891,7 +1075,16 @@ public class CosmosAsyncDatabase {
 
     /**
      * Query for cosmos client encryption keys in a database.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase&#40;id, cosmosAsyncClient&#41;;
+     * CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosClientEncryptionKeyProperties&gt; clientEncryptionKeys =
+     *      cosmosAsyncDatabase.queryClientEncryptionKeys&#40;query, requestOptions&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys -->
      * After subscription the operation will be performed. The {@link CosmosPagedFlux} will
      * contain one or several feed response of the obtained client encryption keys. In case of
      * failure the {@link CosmosPagedFlux} will error.
diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java
index 382b09582b..e971cb9d7f 100644
--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java
+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncPermission.java
@@ -51,7 +51,14 @@ public class CosmosAsyncPermission {
 
     /**
      * Reads a permission.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncPermission.read -->
+     * <pre>
+     * CosmosAsyncPermission permission = new CosmosAsyncPermission&#40;id, cosmosAsyncUser&#41;;
+     * CosmosPermissionRequestOptions options = new CosmosPermissionRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosPermissionResponse&gt; permissionResponse = permission.read&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncPermission.read -->
      * After subscription the operation will be performed.
      * The {@link Mono} upon successful completion will contain a single resource response with the read permission.
      * In case of failure the {@link Mono} will error.
@@ -70,7 +77,15 @@ public class CosmosAsyncPermission {
 
     /**
      * Replaces a permission.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncPermission.replace -->
+     * <pre>
+     * CosmosAsyncPermission permission = new CosmosAsyncPermission&#40;id, cosmosAsyncUser&#41;;
+     * CosmosPermissionProperties properties = new CosmosPermissionProperties&#40;&#41;;
+     * CosmosPermissionRequestOptions options = new CosmosPermissionRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosPermissionResponse&gt; permissionResponse = permission.replace&#40;properties, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncPermission.replace -->
      * After subscription the operation will be performed.
      * The {@link Mono} upon successful completion will contain a single resource response with the replaced permission.
      * In case of failure the {@link Mono} will error.
@@ -91,7 +106,14 @@ public class CosmosAsyncPermission {
 
     /**
      * Deletes a permission.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncPermission.delete -->
+     * <pre>
+     * CosmosAsyncPermission permission = new CosmosAsyncPermission&#40;id, cosmosAsyncUser&#41;;
+     * CosmosPermissionRequestOptions options = new CosmosPermissionRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosPermissionResponse&gt; permissionResponse = permission.delete&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncPermission.delete -->
      * After subscription the operation will be performed.
      * The {@link Mono} upon successful completion will contain a single resource response for the deleted permission.
      * In case of failure the {@link Mono} will error.
diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncScripts.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncScripts.java
index 3cbdafbb5f..96ee1e7ee1 100644
--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncScripts.java
+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncScripts.java
@@ -48,7 +48,19 @@ public class CosmosAsyncScripts {
 
     /**
      * Creates a cosmos stored procedure.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosStoredProcedureProperties properties =
+     *      new CosmosStoredProcedureProperties&#40;id, body&#41;;
+     * CosmosStoredProcedureRequestOptions options =
+     *      new CosmosStoredProcedureRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosStoredProcedureResponse&gt; response =
+     *      asyncScripts.createStoredProcedure&#40;properties, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure -->
      * After subscription the operation will be performed.
      * The {@link Mono} upon successful completion will contain a single cosmos stored procedure response with the
      * created cosmos stored procedure.
@@ -63,7 +75,19 @@ public class CosmosAsyncScripts {
 
     /**
      * Creates a cosmos stored procedure.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosStoredProcedureProperties properties =
+     *      new CosmosStoredProcedureProperties&#40;id, body&#41;;
+     * CosmosStoredProcedureRequestOptions options =
+     *      new CosmosStoredProcedureRequestOptions&#40;&#41;;
+     *
+     * Mono&lt;CosmosStoredProcedureResponse&gt; response =
+     *      asyncScripts.createStoredProcedure&#40;properties, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure -->
      * After subscription the operation will be performed.
      * The {@link Mono} upon successful completion will contain a single cosmos stored procedure response with the
      * created cosmos stored procedure.
@@ -88,7 +112,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Reads all cosmos stored procedures in a container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosStoredProcedureProperties&gt; properties =
+     *      asyncScripts.readAllStoredProcedures&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the read cosmos stored
      * procedure properties.
@@ -104,7 +138,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Reads all cosmos stored procedures in a container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosStoredProcedureProperties&gt; properties =
+     *      asyncScripts.readAllStoredProcedures&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the read cosmos stored
      * procedure properties.
@@ -147,7 +191,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Query for stored procedures in a container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosStoredProcedureProperties&gt; properties =
+     *      asyncScripts.queryStoredProcedures&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the obtained stored procedures.
      * In case of failure the {@link CosmosPagedFlux} will error.
@@ -170,7 +224,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Query for stored procedures in a container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosStoredProcedureProperties&gt; properties =
+     *      asyncScripts.queryStoredProcedures&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the obtained stored procedures.
      * In case of failure the {@link CosmosPagedFlux} will error.
@@ -205,7 +269,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Creates a cosmos user defined function.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosUserDefinedFunctionProperties properties =
+     *      new CosmosUserDefinedFunctionProperties&#40;id, body&#41;;
+     *
+     * Mono&lt;CosmosUserDefinedFunctionResponse&gt; procedureProperties =
+     *      asyncScripts.createUserDefinedFunction&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction -->
      * After subscription the operation will be performed.
      * The {@link Mono} upon successful completion will contain a single cosmos user defined function response.
      * In case of failure the {@link Mono} will error.
@@ -224,7 +298,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Reads all cosmos user defined functions in the container
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosUserDefinedFunctionProperties&gt; properties =
+     *      asyncScripts.readAllUserDefinedFunctions&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the read user defined functions.
      * In case of failure the {@link CosmosPagedFlux} will error.
@@ -239,7 +323,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Reads all cosmos user defined functions in the container
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosUserDefinedFunctionProperties&gt; properties =
+     *      asyncScripts.readAllUserDefinedFunctions&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the read user defined functions.
      * In case of failure the {@link CosmosPagedFlux} will error.
@@ -280,7 +374,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Query for user defined functions in the container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     * new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosUserDefinedFunctionProperties&gt; properties =
+     *      asyncScripts.queryUserDefinedFunctions&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the obtained user defined
      * functions.
@@ -304,7 +408,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Query for user defined functions in the container.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     * new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosUserDefinedFunctionProperties&gt; properties =
+     *      asyncScripts.queryUserDefinedFunctions&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the obtained user defined
      * functions.
@@ -340,7 +454,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Creates a Cosmos trigger.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.createTrigger -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosTriggerProperties properties =
+     *      new CosmosTriggerProperties&#40;id, body&#41;;
+     *
+     * Mono&lt;CosmosTriggerResponse&gt; triggerResponse =
+     *      asyncScripts.createTrigger&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.createTrigger -->
      * After subscription the operation will be performed.
      * The {@link Mono} upon successful completion will contain a cosmos trigger response
      * In case of failure the {@link Mono} will error.
@@ -354,7 +478,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Reads all triggers in a container
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.readAllTriggers -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosTriggerProperties&gt; triggerProperties =
+     *      asyncScripts.readAllTriggers&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.readAllTriggers -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the read cosmos trigger
      * properties.
@@ -370,7 +504,17 @@ public class CosmosAsyncScripts {
 
     /**
      * Reads all triggers in a container
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.readAllTriggers -->
+     * <pre>
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosTriggerProperties&gt; triggerProperties =
+     *      asyncScripts.readAllTriggers&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.readAllTriggers -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the read cosmos trigger
      * properties.
@@ -412,7 +556,18 @@ public class CosmosAsyncScripts {
 
     /**
      * Query for triggers in the container
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.queryTriggers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosTriggerProperties&gt; triggerProperties =
+     *      asyncScripts.queryTriggers&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.queryTriggers -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the obtained triggers.
      * In case of failure the {@link CosmosPagedFlux} will error.
@@ -432,7 +587,18 @@ public class CosmosAsyncScripts {
 
     /**
      * Query for triggers in the container
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosAsyncScripts.queryTriggers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosAsyncScripts asyncScripts =
+     *      new CosmosAsyncScripts&#40;cosmosAsyncContainer&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedFlux&lt;CosmosTriggerProperties&gt; triggerProperties =
+     *      asyncScripts.queryTriggers&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosAsyncScripts.queryTriggers -->
      * After subscription the operation will be performed.
      * The {@link CosmosPagedFlux} will contain one or several feed response pages of the obtained triggers.
      * In case of failure the {@link CosmosPagedFlux} will error.
diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java
index 4f688483d9..68c0ce5def 100644
--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java
+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java
@@ -72,13 +72,15 @@ public class CosmosDatabase {
 
     /**
      * Reads the current Cosmos database while specifying additional request options.
-     * Fetch the details and properties of a database based on its unique identifier.
      * <!-- src_embed com.azure.cosmos.CosmosDatabase.read -->
      * <pre>
-     * CosmosDatabase cosmosDatabase = cosmosClient
-     *     .getDatabase&#40;&quot;&lt;YOUR DATABASE NAME&gt;&quot;&#41;;
-     * CosmosDatabaseResponse readResponse = cosmosDatabase.read&#40;&#41;;
-     * </pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosDatabaseRequestOptions options =
+     *      new CosmosDatabaseRequestOptions&#40;&#41;;
+     *
+     * CosmosDatabaseResponse response = cosmosDatabase.read&#40;options&#41;;
+     * <pre>
      * <!-- end com.azure.cosmos.CosmosDatabase.read -->
      * @param options the {@link CosmosDatabaseRequestOptions} request options.
      * @return the {@link CosmosDatabaseResponse}
@@ -106,10 +108,13 @@ public class CosmosDatabase {
      * Delete the current Cosmos database while specifying additional request options.
      * <!-- src_embed com.azure.cosmos.CosmosDatabase.delete -->
      * <pre>
-     * CosmosDatabase cosmosDatabase = cosmosClient
-     *     .getDatabase&#40;&quot;&lt;YOUR DATABASE NAME&gt;&quot;&#41;;
-     * CosmosDatabaseResponse deleteResponse = cosmosDatabase.delete&#40;&#41;;
-     * </pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosDatabaseRequestOptions options =
+     *      new CosmosDatabaseRequestOptions&#40;&#41;;
+     *
+     * CosmosDatabaseResponse response = cosmosDatabase.delete&#40;options&#41;;
+     * <pre>
      * <!-- end com.azure.cosmos.CosmosDatabase.delete -->
      * @param options the {@link CosmosDatabaseRequestOptions} request options.
      * @return the {@link CosmosDatabaseResponse}.
@@ -315,7 +320,18 @@ public class CosmosDatabase {
 
     /**
      * Create container if one matching the id in the properties object does not exist.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties =
+     *      new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * CosmosContainerResponse response =
+     *      cosmosDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
      * @param containerProperties the container properties.
      * @return the cosmos container response.
      */
@@ -325,7 +341,18 @@ public class CosmosDatabase {
 
     /**
      * Create container if one does not exist.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties =
+     *      new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * CosmosContainerResponse response =
+     *      cosmosDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
      * @param containerProperties the container properties.
      * @param throughput the throughput.
      * @return the cosmos container response.
@@ -339,7 +366,18 @@ public class CosmosDatabase {
 
     /**
      * Creates a Cosmos container if one matching the id in the properties object does not exist.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties =
+     *      new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * CosmosContainerResponse response =
+     *      cosmosDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
      * The throughput properties will only be used if the specified container
      * does not exist and therefor a new container will be created.
      *
@@ -356,7 +394,18 @@ public class CosmosDatabase {
 
     /**
      * Creates a Cosmos container if one matching the id does not exist.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties =
+     *      new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * CosmosContainerResponse response =
+     *      cosmosDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
      * @param id the id.
      * @param partitionKeyPath the partition key path.
      * @return the cosmos container response.
@@ -369,7 +418,18 @@ public class CosmosDatabase {
 
     /**
      * Creates a Cosmos container if one matching the id does not exist.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties =
+     *      new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * CosmosContainerResponse response =
+     *      cosmosDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
      * The throughput settings will only be used if the specified container
      * does not exist and therefor a new container will be created.
      *
@@ -388,7 +448,18 @@ public class CosmosDatabase {
 
     /**
      * Creates a Cosmos container if one matching the id does not exist.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
+     * <pre>
+     * String partitionKeyPath = &quot;&lt;PARTITION_KEY_PATH&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosContainerProperties properties =
+     *      new CosmosContainerProperties&#40;id, partitionKeyPath&#41;;
+     *
+     * CosmosContainerResponse response =
+     *      cosmosDatabase.createContainerIfNotExists&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.createContainerIfNotExists -->
      * The throughput properties will only be used if the specified container
      * does not exist and therefor a new container will be created.
      *
@@ -426,7 +497,15 @@ public class CosmosDatabase {
 
     /**
      * Read all containers in the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.readAllContainers -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosDatabase.readAllContainers&#40;&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.readAllContainers -->
      * @param options the options.
      * @return the {@link CosmosPagedIterable}.
      */
@@ -436,7 +515,15 @@ public class CosmosDatabase {
 
     /**
      * Read all containers in the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.readAllContainers -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosDatabase.readAllContainers&#40;&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.readAllContainers -->
      @return the {@link CosmosPagedIterable}.
      */
     public CosmosPagedIterable<CosmosContainerProperties> readAllContainers() {
@@ -445,7 +532,18 @@ public class CosmosDatabase {
 
     /**
      * Query containers in the current database.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedIterable&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosDatabase.queryContainers&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryContainers -->
      * @param query the query.
      * @return the {@link CosmosPagedIterable}.
      */
@@ -455,7 +553,18 @@ public class CosmosDatabase {
 
     /**
      * Query containers iterator.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedIterable&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosDatabase.queryContainers&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryContainers -->
      * @param query the query.
      * @param options the options.
      * @return the {@link CosmosPagedIterable}.
@@ -466,7 +575,18 @@ public class CosmosDatabase {
 
     /**
      * Query containers in the current database.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedIterable&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosDatabase.queryContainers&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryContainers -->
      * @param querySpec the query spec.
      * @return the {@link CosmosPagedIterable}.
      */
@@ -476,7 +596,18 @@ public class CosmosDatabase {
 
     /**
      * Query containers in the current database.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryContainers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
+     *
+     * CosmosPagedIterable&lt;CosmosContainerProperties&gt; containerProperties =
+     *      cosmosDatabase.queryContainers&#40;query, options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryContainers -->
      * @param querySpec the query spec.
      * @param options the options.
      * @return the {@link CosmosPagedIterable}.
@@ -489,7 +620,14 @@ public class CosmosDatabase {
 
     /**
      * Gets a Cosmos container instance without making a service call.
-     * <p>
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.getContainer -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     *
+     * CosmosContainer cosmosContainer = cosmosDatabase.getContainer&#40;id&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.getContainer -->
      * To get the actual object a read operation must be performed first.
      *
      * @param id id of the container.
@@ -503,10 +641,17 @@ public class CosmosDatabase {
 
     /**
      * Create Cosmos user instance without making a service call.
-     * <p>
-     * To get the actual object a read operation must be performed first.
-     *
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.createUser -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosUserProperties properties =
+     *      new CosmosUserProperties&#40;&#41;;
      *
+     * CosmosUserResponse response = cosmosDatabase.createUser&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.createUser -->
+     * To get the actual object a read operation must be performed first.
      * @param userProperties the settings.
      * @return the cosmos user response.
      */
@@ -516,7 +661,16 @@ public class CosmosDatabase {
 
     /**
      * Upserts a Cosmos user.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.upsertUser -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosUserProperties properties =
+     *      new CosmosUserProperties&#40;&#41;;
      *
+     * CosmosUserResponse response = cosmosDatabase.upsertUser&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.upsertUser -->
      * @param userProperties the settings.
      * @return the cosmos user response.
      */
@@ -526,7 +680,17 @@ public class CosmosDatabase {
 
     /**
      * Read all Cosmos users for the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.readAllUsers -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosDatabase.readAllUsers&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.readAllUsers -->
      * @return the {@link CosmosPagedIterable}.
      */
     public CosmosPagedIterable<CosmosUserProperties> readAllUsers() {
@@ -535,7 +699,17 @@ public class CosmosDatabase {
 
     /**
      * Read all Cosmos users for the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.readAllUsers -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * CosmosQueryRequestOptions options =
+     *      new CosmosQueryRequestOptions&#40;&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosDatabase.readAllUsers&#40;options&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.readAllUsers -->
      * @param options the options.
      * @return the {@link CosmosPagedIterable}.
      */
@@ -545,7 +719,16 @@ public class CosmosDatabase {
 
     /**
      * Query all Cosmos users for the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryUsers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosDatabase.queryUsers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryUsers -->
      * @param query the query.
      * @return the {@link CosmosPagedIterable}.
      */
@@ -555,7 +738,16 @@ public class CosmosDatabase {
 
     /**
      * Query all Cosmos users for the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryUsers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosDatabase.queryUsers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryUsers -->
      * @param query the query.
      * @param options the options.
      * @return the {@link CosmosPagedIterable}.
@@ -566,7 +758,16 @@ public class CosmosDatabase {
 
     /**
      * Query all Cosmos users for the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryUsers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosDatabase.queryUsers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryUsers -->
      * @param querySpec the query spec.
      * @return the {@link CosmosPagedIterable}.
      */
@@ -576,7 +777,16 @@ public class CosmosDatabase {
 
     /**
      * Query all Cosmos users for the current database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.queryUsers -->
+     * <pre>
+     * String query = &quot;&lt;YOUR_QUERY&gt;&quot;;
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosUserProperties&gt; userProperties =
+     *      cosmosDatabase.queryUsers&#40;query&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.queryUsers -->
      * @param querySpec the query spec.
      * @param options the options.
      * @return the {@link CosmosPagedIterable}.
@@ -612,7 +822,16 @@ public class CosmosDatabase {
 
     /**
      * Sets the throughput.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.replaceThroughput -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
+     * ThroughputProperties properties =
+     *      ThroughputProperties.createManualThroughput&#40;throughputId&#41;;
      *
+     * ThroughputResponse response = cosmosDatabase.replaceThroughput&#40;properties&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.replaceThroughput -->
      * @param throughputProperties the throughput properties.
      * @return the throughput response.
      */
@@ -631,7 +850,15 @@ public class CosmosDatabase {
 
     /**
      * Gets a CosmosClientEncryptionKey object without making a service call
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.getClientEncryptionKey -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosClientEncryptionKey clientEncryptionKey =
+     *      cosmosDatabase.getClientEncryptionKey&#40;id&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.getClientEncryptionKey -->
      * @param id id of the clientEncryptionKey
      * @return Cosmos ClientEncryptionKey
      */
@@ -641,7 +868,15 @@ public class CosmosDatabase {
 
     /**
      * Reads all cosmos client encryption keys in a database.
+     * <!-- src_embed com.azure.cosmos.CosmosDatabase.readAllClientEncryptionKeys -->
+     * <pre>
+     * CosmosDatabase cosmosDatabase =
+     *      new CosmosDatabase&#40;id, cosmosClient, cosmosAsyncDatabase&#41;;
      *
+     * CosmosPagedIterable&lt;CosmosClientEncryptionKeyProperties&gt; response =
+     * cosmosDatabase.readAllClientEncryptionKeys&#40;&#41;;
+     * <pre>
+     * <!-- end com.azure.cosmos.CosmosDatabase.readAllClientEncryptionKeys -->
      * @return a {@link CosmosPagedIterable}.
      */
     public CosmosPagedIterable<CosmosClientEncryptionKeyProperties> readAllClientEncryptionKeys() {
diff --git a/sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ReadmeSamples.java b/sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ReadmeSamples.java
index 3da8617ac6..8dcdf6d8b1 100644
--- a/sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ReadmeSamples.java
+++ b/sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ReadmeSamples.java
@@ -3,6 +3,9 @@
 
 package com.azure.cosmos;
 
+import com.azure.cosmos.implementation.ClientEncryptionKey;
+import com.azure.cosmos.implementation.DiagnosticsClientContext;
+import com.azure.cosmos.implementation.FeedResponseDiagnostics;
 import com.azure.cosmos.implementation.NotFoundException;
 import com.azure.cosmos.models.*;
 import com.azure.cosmos.util.CosmosPagedIterable;
@@ -13,6 +16,7 @@ import java.util.*;
 public class ReadmeSamples {
     private final String serviceEndpoint = "<service-endpoint>";
     private final String key = "<key>";
+    private final String id = "<user-id>";
     private final DirectConnectionConfig directConnectionConfig = new DirectConnectionConfig();
     private final GatewayConnectionConfig gatewayConnectionConfig = new GatewayConnectionConfig();
 
@@ -35,6 +39,7 @@ public class ReadmeSamples {
     private final CosmosContainer cosmosContainer = cosmosDatabase
         .getContainer("<YOUR CONTAINER NAME>");
 
+    private final CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase("id", cosmosAsyncClient);
     public void createCosmosAsyncClient() {
         // BEGIN: readme-sample-createCosmosAsyncClient
         CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
@@ -341,7 +346,200 @@ public class ReadmeSamples {
             System.out.println("Failed to create container: " + ce);
         }
         // END: com.azure.cosmos.CosmosDatabase.createContainer
+    }
+
+    public void createDatabaseSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncClient.createDatabase
+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
+            .endpoint("<YOUR ENDPOINT HERE>")
+            .key("<YOUR KEY HERE>")
+            .buildAsyncClient();
+        String databaseId = "<YOUR DATABASE NAME>";
+        CosmosDatabaseProperties databaseProperties =
+            new CosmosDatabaseProperties(databaseId);
+
+        Mono<CosmosDatabaseResponse> cosmosDatabaseResponse = cosmosAsyncClient.createDatabase(databaseProperties);
+        // END: com.azure.cosmos.CosmosAsyncClient.createDatabase
+    }
+
+    public void createDatabaseIfNotExistsSample() {
+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
+            .buildAsyncClient();
+        // BEGIN: com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists
+        String databaseId = "<YOUR DATABASE NAME>";
+
+        Mono<CosmosDatabaseResponse> response = cosmosAsyncClient.createDatabaseIfNotExists(databaseId);
+        // END: com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists
+    }
+
+    public void readAllDatabasesSample() {
+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
+            .buildAsyncClient();
+        // BEGIN: com.azure.cosmos.CosmosAsyncClient.readAllDatabases
+        CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();
+
+        cosmosAsyncClient.readAllDatabases(requestOptions);
+        // END: com.azure.cosmos.CosmosAsyncClient.readAllDatabases
+    }
+
+    public void queryDatabasesSample() {
+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
+            .buildAsyncClient();
+
+        // BEGIN: com.azure.cosmos.CosmosAsyncClient.queryDatabases
+        String queryText = "<YOUR QUERY>";
+        SqlQuerySpec querySpec = new SqlQuerySpec(queryText);
+        CosmosQueryRequestOptions requestOptions =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosDatabaseProperties> dbProperties =
+            cosmosAsyncClient.queryDatabases(querySpec, requestOptions);
+        // END: com.azure.cosmos.CosmosAsyncClient.queryDatabases
+    }
+
+    public void getDatabaseSample() {
+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
+            .buildAsyncClient();
+        // BEGIN: com.azure.cosmos.CosmosAsyncClient.getDatabase
+        String databaseId = "<YOUR DATABASE NAME>";
+
+        CosmosAsyncDatabase database = cosmosAsyncClient.getDatabase(databaseId);
+        // END: com.azure.cosmos.CosmosAsyncClient.getDatabase
+    }
+
+    public void createGlobalThroughputControlConfigBuilderSample() {
+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
+            .buildAsyncClient();
+        // BEGIN: com.azure.cosmos.CosmosAsyncClient.createGlobalThroughputControlConfigBuilder
+        String databaseId = "<YOUR DATABASE NAME>";
+        String containerId = "<YOUR CONTAINER NAME>";
+
+        GlobalThroughputControlConfig config =
+            cosmosAsyncClient.createGlobalThroughputControlConfigBuilder(databaseId, containerId)
+                .build();
+        // END: com.azure.cosmos.CosmosAsyncClient.createGlobalThroughputControlConfigBuilder
+    }
+
+    public void readConflictSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncConflict.read
+        String conflictId = "CONFLICT_ID";
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(conflictId, cosmosAsyncClient);
+        CosmosAsyncContainer cosmosAsyncContainer =
+            new CosmosAsyncContainer(conflictId, cosmosAsyncDatabase);
+        CosmosConflictRequestOptions options =
+            new CosmosConflictRequestOptions();
+        CosmosAsyncConflict conflict =
+            new CosmosAsyncConflict(conflictId, cosmosAsyncContainer);
+
+        Mono<CosmosConflictResponse> conflictResponseMono = conflict.read(options);
+        // END: com.azure.cosmos.CosmosAsyncConflict.read
+    }
+
+    public void CosmosAsyncProcedureReadSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        // BEGIN: com.azure.cosmos.CosmosAsyncStoredProcedure.read
+        CosmosAsyncContainer cosmosAsyncContainer =
+            new CosmosAsyncContainer(id, cosmosAsyncDatabase);
+        CosmosAsyncStoredProcedure procedure =
+            new CosmosAsyncStoredProcedure(id, cosmosAsyncContainer);
+
+        Mono<CosmosStoredProcedureResponse> response = procedure.read();
+        // END: com.azure.cosmos.CosmosAsyncStoredProcedure.read
+    }
+
+    public void CosmosAsyncProcedureDeleteSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosAsyncContainer cosmosAsyncContainer =
+            new CosmosAsyncContainer(id, cosmosAsyncDatabase);
+        // BEGIN: com.azure.cosmos.CosmosAsyncStoredProcedure.delete
+        CosmosAsyncStoredProcedure procedure =
+            new CosmosAsyncStoredProcedure(id, cosmosAsyncContainer);
+        CosmosStoredProcedureRequestOptions options =
+            new CosmosStoredProcedureRequestOptions();
+
+        Mono<CosmosStoredProcedureResponse> response = procedure.delete();
+        // END: com.azure.cosmos.CosmosAsyncStoredProcedure.delete
+    }
+
+    public void CosmosAsyncProcedureExecuteSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncStoredProcedure.execute
+        String id = "ID";
+        CosmosAsyncStoredProcedure procedure =
+            new CosmosAsyncStoredProcedure(id, cosmosAsyncContainer);
+        CosmosStoredProcedureRequestOptions options =
+            new CosmosStoredProcedureRequestOptions();
+        List procedureParams = Collections.emptyList();
+
+        Mono<CosmosStoredProcedureResponse> response =
+            procedure.execute(procedureParams, options);
+        // END: com.azure.cosmos.CosmosAsyncStoredProcedure.execute
+    }
+
+    public void CosmosAsyncProcedureReplaceSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncStoredProcedure.replace
+        String id = "ID";
+        String body = "BODY";
+        CosmosAsyncStoredProcedure procedure =
+            new CosmosAsyncStoredProcedure(id, cosmosAsyncContainer);
+        CosmosStoredProcedureRequestOptions options =
+            new CosmosStoredProcedureRequestOptions();
+        CosmosStoredProcedureProperties properties =
+            new CosmosStoredProcedureProperties(id, body);
+
+        procedure.replace(properties, options);
+        // END: com.azure.cosmos.CosmosAsyncStoredProcedure.replace
+    }
+
+    public void CosmosAsyncTriggerReadSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncTrigger.read
+        String id = "ID";
+        CosmosAsyncTrigger trigger =
+            new CosmosAsyncTrigger(id, cosmosAsyncContainer);
+
+        Mono<CosmosTriggerResponse> response = trigger.read();
+        // END: com.azure.cosmos.CosmosAsyncTrigger.read
+    }
+
+    public void CosmosAsyncTriggerReplaceSample() {
+        String body = "BODY";
+        // BEGIN: com.azure.cosmos.CosmosAsyncTrigger.replace
+        CosmosAsyncTrigger trigger =
+            new CosmosAsyncTrigger(id, cosmosAsyncContainer);
+        CosmosTriggerProperties properties =
+            new CosmosTriggerProperties(id, body);
+
+        Mono<CosmosTriggerResponse> response =
+            trigger.replace(properties);
+        // END: com.azure.cosmos.CosmosAsyncTrigger.replace
+    }
+
+    public void CosmosAsyncTriggerDeleteSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncTrigger.delete
+        String id = "ID";
+        CosmosAsyncTrigger trigger =
+            new CosmosAsyncTrigger(id, cosmosAsyncContainer);
 
+        Mono<CosmosTriggerResponse> response = trigger.delete();
+        // END: com.azure.cosmos.CosmosAsyncTrigger.delete
+    }
+
+    public void CosmosAsyncUserReadSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(id, new CosmosClientBuilder().buildAsyncClient());
+        // BEGIN: com.azure.cosmos.CosmosAsyncUser.read
+        CosmosAsyncUser user = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+
+        Mono<CosmosUserResponse> response = user.read();
+        // END: com.azure.cosmos.CosmosAsyncUser.read
+    }
+
+    public void CosmosAsyncUserReplaceSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(id, new CosmosClientBuilder().buildAsyncClient());
+        // BEGIN: com.azure.cosmos.CosmosAsyncUser.replace
+        CosmosAsyncUser user = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+        CosmosUserProperties properties = new CosmosUserProperties();
     }
 
     public void databaseCreateContainerPropsSample() {
@@ -365,6 +563,76 @@ public class ReadmeSamples {
         // END: com.azure.cosmos.CosmosDatabase.createContainerProps
     }
 
+    public void CosmosAsyncUserDeleteSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(id, new CosmosClientBuilder().buildAsyncClient());
+        // BEGIN: com.azure.cosmos.CosmosAsyncUser.delete
+        CosmosAsyncUser user = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+
+        Mono<CosmosUserResponse> response = user.delete();
+        // END: com.azure.cosmos.CosmosAsyncUser.delete
+    }
+
+    public void CosmosAsyncUserCreatePermissionSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(id, new CosmosClientBuilder().buildAsyncClient());
+        // BEGIN: com.azure.cosmos.CosmosAsyncUser.createPermission
+        CosmosAsyncUser user = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+        CosmosPermissionProperties properties =
+            new CosmosPermissionProperties();
+        CosmosPermissionRequestOptions requestOptions =
+            new CosmosPermissionRequestOptions();
+
+        Mono<CosmosPermissionResponse> response =
+            user.createPermission(properties, requestOptions);
+        // END: com.azure.cosmos.CosmosAsyncUser.createPermission
+    }
+
+    public void CosmosAsyncUserUpsertPermissionSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(id, new CosmosClientBuilder().buildAsyncClient());
+        // BEGIN: com.azure.cosmos.CosmosAsyncUser.upsertPermission
+        CosmosAsyncUser user = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+        CosmosPermissionProperties properties =
+            new CosmosPermissionProperties();
+        CosmosPermissionRequestOptions requestOptions =
+            new CosmosPermissionRequestOptions();
+
+        Mono<CosmosPermissionResponse> response =
+            user.upsertPermission(properties, requestOptions);
+        // END: com.azure.cosmos.CosmosAsyncUser.upsertPermission
+    }
+
+    public void CosmosAsyncUserReadPermissionsSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(id, new CosmosClientBuilder().buildAsyncClient());
+        // BEGIN: com.azure.cosmos.CosmosAsyncUser.readAllPermissions
+        CosmosAsyncUser user = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+
+        CosmosPagedFlux<CosmosPermissionProperties> permissions =
+            user.readAllPermissions();
+        // END: com.azure.cosmos.CosmosAsyncUser.readAllPermissions
+    }
+
+    public void CosmosAsyncUserQueryPermissionsSample() {
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(id, new CosmosClientBuilder().buildAsyncClient());
+        // BEGIN: com.azure.cosmos.CosmosAsyncUser.queryPermissions
+        CosmosAsyncUser user = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+        String query = "YOUR_QUERY";
+        CosmosQueryRequestOptions options = new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosPermissionProperties> permissions =
+            user.queryPermissions(query, options);
+        // END: com.azure.cosmos.CosmosAsyncUser.queryPermissions
+    }
+
+    public void CosmosAsyncUserFuncReadSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncUserDefinedFunction.read
+        CosmosAsyncUserDefinedFunction userFunction =
+            new CosmosAsyncUserDefinedFunction(id, cosmosAsyncContainer);
+    }
+
     public void databaseCreateContainerThroughputSample() {
         String containerId = "passengers";
         PartitionKeyDefinition partitionKeyDefinition = new PartitionKeyDefinition();
@@ -387,6 +655,25 @@ public class ReadmeSamples {
         // END: com.azure.cosmos.CosmosDatabase.createContainerThroughput
     }
 
+    public void CosmosAsyncUserFuncReplaceSample() {
+        String body = "BODY";
+        // BEGIN: com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace
+        CosmosAsyncUserDefinedFunction userFunction =
+            new CosmosAsyncUserDefinedFunction(id, cosmosAsyncContainer);
+        CosmosUserDefinedFunctionProperties properties =
+            new CosmosUserDefinedFunctionProperties(id, body);
+
+        Mono<CosmosUserDefinedFunctionResponse> response =
+            userFunction.replace(properties);
+        // END: com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace
+    }
+
+    public void CosmosAsyncUserFuncDeleteSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncUserDefinedFunction.delete
+        CosmosAsyncUserDefinedFunction userFunction =
+            new CosmosAsyncUserDefinedFunction(id, cosmosAsyncContainer);
+    }
+
     public void databaseCreateContainerPartitionKeySample() {
         String containerId = "passengers";
         String partitionKeyPath = "/id";
@@ -407,6 +694,487 @@ public class ReadmeSamples {
         // END: com.azure.cosmos.CosmosDatabase.createContainerPartitionKey
     }
 
+    public void deleteConflictSample() {
+        String conflictId = "CONFLICT_ID";
+        CosmosAsyncClient asyncClient = new CosmosClientBuilder().buildAsyncClient();
+        CosmosAsyncDatabase cosmosAsyncDatabase =
+            new CosmosAsyncDatabase(conflictId, asyncClient);
+        CosmosAsyncContainer cosmosAsyncContainer =
+            new CosmosAsyncContainer(conflictId, cosmosAsyncDatabase);
+        // BEGIN: com.azure.cosmos.CosmosAsyncConflict.delete
+        CosmosConflictRequestOptions options =
+            new CosmosConflictRequestOptions();
+        CosmosAsyncConflict conflict =
+            new CosmosAsyncConflict(conflictId, cosmosAsyncContainer);
+
+        Mono<CosmosConflictResponse> conflictResponseMono = conflict.delete(options);
+        // END: com.azure.cosmos.CosmosAsyncConflict.delete
+    }
+
+    public void сosmosAsyncContainerReadSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncContainer.read
+        CosmosAsyncContainer container = new CosmosAsyncContainer(id, cosmosAsyncDatabase);
+        CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();
+
+        Mono<CosmosContainerResponse> containerResponse = container.read(options);
+        // END: com.azure.cosmos.CosmosAsyncContainer.read
+    }
+
+    public void сosmosAsyncContainerDeleteSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncContainer.delete
+        CosmosAsyncContainer container = new CosmosAsyncContainer(id, cosmosAsyncDatabase);
+        CosmosContainerRequestOptions options = new CosmosContainerRequestOptions();
+
+        Mono<CosmosContainerResponse> containerResponse = container.delete(options);
+        // END: com.azure.cosmos.CosmosAsyncContainer.delete
+    }
+
+    public void сosmosAsyncContainerReplaceSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncContainer.replace
+        String partitionKeyPath = "<PARTITION_KEY_PATH>";
+        CosmosAsyncContainer container = new CosmosAsyncContainer(id, cosmosAsyncDatabase);
+        CosmosContainerProperties properties = new CosmosContainerProperties(id, partitionKeyPath);
+
+        Mono<CosmosContainerResponse> containerResponse = container.replace(properties);
+        // END: com.azure.cosmos.CosmosAsyncContainer.replace
+    }
+
+    public void сosmosAsyncContainerCreateItemSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncContainer.createItem
+        String partitionKeyPath = "<PARTITION_KEY_PATH>";
+        CosmosAsyncContainer container = new CosmosAsyncContainer(id, cosmosAsyncDatabase);
+        CosmosContainerProperties properties = new CosmosContainerProperties(id, partitionKeyPath);
+
+        Mono<CosmosItemResponse<CosmosContainerProperties>> containerResponse =
+            container.createItem(properties);
+        // END: com.azure.cosmos.CosmosAsyncContainer.createItem
+    }
+
+    public void сosmosAsyncDatabaseReadSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.read
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();
+
+        Mono<CosmosDatabaseResponse> response = cosmosAsyncDatabase.read(requestOptions);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.read
+    }
+
+    public void сosmosAsyncDatabaseDeleteSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.delete
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosDatabaseRequestOptions requestOptions = new CosmosDatabaseRequestOptions();
+
+        Mono<CosmosDatabaseResponse> response = cosmosAsyncDatabase.delete(requestOptions);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.delete
+    }
+
+    public void сosmosAsyncDatabaseCreateContainerSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.createContainer
+        String partitionKeyPath = "<PARTITION_KEY_PATH>";
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosContainerProperties properties = new CosmosContainerProperties(id, partitionKeyPath);
+
+        Mono<CosmosContainerResponse> response = cosmosAsyncDatabase.createContainer(properties);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.createContainer
+    }
+
+    public void сosmosAsyncDatabaseContainerIfNotExistsSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists
+        String partitionKeyPath = "<PARTITION_KEY_PATH>";
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosContainerProperties properties = new CosmosContainerProperties(id, partitionKeyPath);
+
+        Mono<CosmosContainerResponse> response =
+            cosmosAsyncDatabase.createContainerIfNotExists(properties);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists
+    }
+
+    public void сosmosAsyncDatabaseReadAllContainersSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosQueryRequestOptions options = new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosContainerProperties> containerProperties =
+            cosmosAsyncDatabase.readAllContainers(options);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers
+    }
+
+    public void сosmosAsyncDatabaseQueryContainersSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.queryContainers
+        String query = "<YOUR_QUERY>";
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+
+        CosmosPagedFlux<CosmosContainerProperties> containerProperties =
+            cosmosAsyncDatabase.queryContainers(query);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.queryContainers
+    }
+
+    public void сosmosAsyncDatabaseCreateUserSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.createUser
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosUserProperties properties = new CosmosUserProperties();
+
+        Mono<CosmosUserResponse> userResponse = cosmosAsyncDatabase.createUser(properties);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.createUser
+    }
+
+    public void сosmosAsyncDatabaseUpsertUserSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.upsertUser
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosUserProperties properties = new CosmosUserProperties();
+
+        Mono<CosmosUserResponse> userResponse = cosmosAsyncDatabase.upsertUser(properties);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.upsertUser
+    }
+
+    public void сosmosAsyncDatabaseCreateClientKeySample() {
+        String encryptionAlgorithm = "";
+        byte[] wrappedDataEncryptionKey = new byte[]{};
+        EncryptionKeyWrapMetadata metadata = new EncryptionKeyWrapMetadata();
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.createClientEncryptionKey
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        ClientEncryptionKey key = new ClientEncryptionKey();
+        CosmosClientEncryptionKeyProperties properties =
+            new CosmosClientEncryptionKeyProperties(id, encryptionAlgorithm, wrappedDataEncryptionKey, metadata);
+
+        Mono<CosmosClientEncryptionKeyResponse> keyProperties =
+            cosmosAsyncDatabase.createClientEncryptionKey(properties);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.createClientEncryptionKey
+    }
+
+    public void сosmosAsyncDatabaseReadAllUsersSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.readAllUsers
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosQueryRequestOptions queryRequestOptions = new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosUserProperties> userProperties =
+            cosmosAsyncDatabase.readAllUsers(queryRequestOptions);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.readAllUsers
+    }
+
+    public void сosmosAsyncDatabaseReadAllClientEncryptionKeysSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosUserProperties properties = new CosmosUserProperties();
+
+        CosmosPagedFlux<CosmosClientEncryptionKeyProperties> keyProperties =
+            cosmosAsyncDatabase.readAllClientEncryptionKeys();
+        // END: com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys
+    }
+
+    public void сosmosAsyncDatabaseQueryClientKeysSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys
+        String query = "<YOUR_QUERY>";
+        CosmosAsyncDatabase cosmosAsyncDatabase = new CosmosAsyncDatabase(id, cosmosAsyncClient);
+        CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosClientEncryptionKeyProperties> clientEncryptionKeys =
+            cosmosAsyncDatabase.queryClientEncryptionKeys(query, requestOptions);
+        // END: com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys
+    }
+
+    public void сosmosAsyncPermissionReadSample() {
+        CosmosAsyncUser cosmosAsyncUser = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+        // BEGIN: com.azure.cosmos.CosmosAsyncPermission.read
+        CosmosAsyncPermission permission = new CosmosAsyncPermission(id, cosmosAsyncUser);
+        CosmosPermissionRequestOptions options = new CosmosPermissionRequestOptions();
+
+        Mono<CosmosPermissionResponse> permissionResponse = permission.read(options);
+        // END: com.azure.cosmos.CosmosAsyncPermission.read
+    }
+
+    public void сosmosAsyncPermissionReplaceSample() {
+        CosmosAsyncUser cosmosAsyncUser = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+        // BEGIN: com.azure.cosmos.CosmosAsyncPermission.replace
+        CosmosAsyncPermission permission = new CosmosAsyncPermission(id, cosmosAsyncUser);
+        CosmosPermissionProperties properties = new CosmosPermissionProperties();
+        CosmosPermissionRequestOptions options = new CosmosPermissionRequestOptions();
+
+        Mono<CosmosPermissionResponse> permissionResponse = permission.replace(properties, options);
+        // END: com.azure.cosmos.CosmosAsyncPermission.replace
+    }
+
+    public void сosmosAsyncPermissionDeleteSample() {
+        CosmosAsyncUser cosmosAsyncUser = new CosmosAsyncUser(id, cosmosAsyncDatabase);
+        // BEGIN: com.azure.cosmos.CosmosAsyncPermission.delete
+        CosmosAsyncPermission permission = new CosmosAsyncPermission(id, cosmosAsyncUser);
+        CosmosPermissionRequestOptions options = new CosmosPermissionRequestOptions();
+
+        Mono<CosmosPermissionResponse> permissionResponse = permission.delete(options);
+        // END: com.azure.cosmos.CosmosAsyncPermission.delete
+    }
+
+    public void cosmosAsyncScriptsQueryTriggersSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.queryTriggers
+        String query = "<YOUR_QUERY>";
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosTriggerProperties> triggerProperties =
+            asyncScripts.queryTriggers(query, options);
+        // END: com.azure.cosmos.CosmosAsyncScripts.queryTriggers
+    }
+
+    public void cosmosAsyncScriptsCreateStoredProcedureSample() {
+        String body = "";
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosStoredProcedureProperties properties =
+            new CosmosStoredProcedureProperties(id, body);
+        CosmosStoredProcedureRequestOptions options =
+            new CosmosStoredProcedureRequestOptions();
+
+        Mono<CosmosStoredProcedureResponse> response =
+            asyncScripts.createStoredProcedure(properties, options);
+        // END: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure
+    }
+
+    public void cosmosAsyncScriptsReadAllStoredProceduresSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosStoredProcedureProperties> properties =
+            asyncScripts.readAllStoredProcedures(options);
+        // END: com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures
+    }
+
+    public void cosmosAsyncScriptsQueryStoredProceduresSample() {
+        String query = "";
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosStoredProcedureProperties> properties =
+            asyncScripts.queryStoredProcedures(query, options);
+        // END: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures
+    }
+
+    public void cosmosAsyncScriptsCreateUserFunctionSample() {
+        String body = "";
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosUserDefinedFunctionProperties properties =
+            new CosmosUserDefinedFunctionProperties(id, body);
+
+        Mono<CosmosUserDefinedFunctionResponse> procedureProperties =
+            asyncScripts.createUserDefinedFunction(properties);
+        // END: com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction
+    }
+
+    public void cosmosAsyncScriptsReadAllUserFunctionsSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosUserDefinedFunctionProperties> properties =
+            asyncScripts.readAllUserDefinedFunctions(options);
+        // END: com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions
+    }
+
+    public void cosmosAsyncScriptsQueryUserDefinedFunctionsSample() {
+        String query = "";
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosUserDefinedFunctionProperties> properties =
+            asyncScripts.queryUserDefinedFunctions(query, options);
+        // END: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions
+    }
+
+    public void cosmosAsyncScriptsCreateTriggerSample() {
+        String body = "";
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.createTrigger
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosTriggerProperties properties =
+            new CosmosTriggerProperties(id, body);
+
+        Mono<CosmosTriggerResponse> triggerResponse =
+            asyncScripts.createTrigger(properties);
+        // END: com.azure.cosmos.CosmosAsyncScripts.createTrigger
+    }
+
+    public void cosmosAsyncScriptsReadAllTriggersSample() {
+        // BEGIN: com.azure.cosmos.CosmosAsyncScripts.readAllTriggers
+        CosmosAsyncScripts asyncScripts =
+            new CosmosAsyncScripts(cosmosAsyncContainer);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedFlux<CosmosTriggerProperties> triggerProperties =
+            asyncScripts.readAllTriggers(options);
+        // END: com.azure.cosmos.CosmosAsyncScripts.readAllTriggers
+    }
+
+    public void cosmosDatabaseReadSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.read
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosDatabaseRequestOptions options =
+            new CosmosDatabaseRequestOptions();
+
+        CosmosDatabaseResponse response = cosmosDatabase.read(options);
+        // END: com.azure.cosmos.CosmosDatabase.read
+    }
+
+    public void cosmosDatabaseDeleteSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.delete
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosDatabaseRequestOptions options =
+            new CosmosDatabaseRequestOptions();
+
+        CosmosDatabaseResponse response = cosmosDatabase.delete(options);
+        // END: com.azure.cosmos.CosmosDatabase.delete
+    }
+
+    public void cosmosDatabaseCreateContainerSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.createContainer
+        String partitionKeyPath = "<PARTITION_KEY_PATH>";
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosContainerProperties properties =
+            new CosmosContainerProperties(id, partitionKeyPath);
+
+        CosmosContainerResponse response = cosmosDatabase.createContainer(properties);
+        // END: com.azure.cosmos.CosmosDatabase.createContainer
+    }
+
+    public void cosmosDatabaseCreateContainerIfNotExistsSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists
+        String partitionKeyPath = "<PARTITION_KEY_PATH>";
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosContainerProperties properties =
+            new CosmosContainerProperties(id, partitionKeyPath);
+
+        CosmosContainerResponse response = cosmosDatabase.createContainerIfNotExists(properties);
+        // END: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists
+    }
+
+    public void cosmosDatabaseReadAllContainersSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.readAllContainers
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+
+        CosmosPagedIterable<CosmosContainerProperties> containerProperties =
+            cosmosDatabase.readAllContainers();
+        // END: com.azure.cosmos.CosmosDatabase.readAllContainers
+    }
+
+    public void cosmosDatabaseQueryContainersSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.queryContainers
+        String query = "<YOUR_QUERY>";
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedIterable<CosmosContainerProperties> containerProperties =
+            cosmosDatabase.queryContainers(query, options);
+        // END: com.azure.cosmos.CosmosDatabase.queryContainers
+    }
+
+    public void cosmosDatabaseGetContainerSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.getContainer
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+
+        CosmosContainer cosmosContainer = cosmosDatabase.getContainer(id);
+        // END: com.azure.cosmos.CosmosDatabase.getContainer
+    }
+
+    public void cosmosDatabaseCreateUserSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.createUser
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosUserProperties properties =
+            new CosmosUserProperties();
+
+        CosmosUserResponse response = cosmosDatabase.createUser(properties);
+        // END: com.azure.cosmos.CosmosDatabase.createUser
+    }
+
+    public void cosmosDatabaseUpsertUserSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.upsertUser
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosUserProperties properties =
+            new CosmosUserProperties();
+
+        CosmosUserResponse response = cosmosDatabase.upsertUser(properties);
+        // END: com.azure.cosmos.CosmosDatabase.upsertUser
+    }
+
+    public void cosmosDatabaseReadAllUsersSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.readAllUsers
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        CosmosQueryRequestOptions options =
+            new CosmosQueryRequestOptions();
+
+        CosmosPagedIterable<CosmosUserProperties> userProperties =
+            cosmosDatabase.readAllUsers(options);
+        // END: com.azure.cosmos.CosmosDatabase.readAllUsers
+    }
+
+    public void cosmosDatabaseQueryUsersSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.queryUsers
+        String query = "<YOUR_QUERY>";
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+
+        CosmosPagedIterable<CosmosUserProperties> userProperties =
+            cosmosDatabase.queryUsers(query);
+        // END: com.azure.cosmos.CosmosDatabase.queryUsers
+    }
+
+    public void cosmosDatabaseReplaceThroughputSample() {
+        int throughputId = 0;
+        // BEGIN: com.azure.cosmos.CosmosDatabase.replaceThroughput
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+        ThroughputProperties properties =
+            ThroughputProperties.createManualThroughput(throughputId);
+
+        ThroughputResponse response = cosmosDatabase.replaceThroughput(properties);
+        // END: com.azure.cosmos.CosmosDatabase.replaceThroughput
+    }
+
+    public void cosmosDatabaseGetClientKeySample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.getClientEncryptionKey
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+
+        CosmosClientEncryptionKey clientEncryptionKey =
+            cosmosDatabase.getClientEncryptionKey(id);
+        // END: com.azure.cosmos.CosmosDatabase.getClientEncryptionKey
+    }
+
+    public void cosmosDatabaseReadAllClientKeysSample() {
+        // BEGIN: com.azure.cosmos.CosmosDatabase.readAllClientEncryptionKeys
+        CosmosDatabase cosmosDatabase =
+            new CosmosDatabase(id, cosmosClient, cosmosAsyncDatabase);
+
+        CosmosPagedIterable<CosmosClientEncryptionKeyProperties> response =
+            cosmosDatabase.readAllClientEncryptionKeys();
+        // END: com.azure.cosmos.CosmosDatabase.readAllClientEncryptionKeys
+    }
+
     static final class Passenger {
         private final String id;
         private final String email;
-- 
2.41.0.windows.1

