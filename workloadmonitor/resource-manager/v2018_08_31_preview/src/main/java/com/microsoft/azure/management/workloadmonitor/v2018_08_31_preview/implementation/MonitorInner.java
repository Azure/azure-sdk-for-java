/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorType;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorCategory;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorState;
import java.util.List;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.MonitorCriteria;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.AlertGeneration;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Model for Monitor.
 */
@JsonFlatten
public class MonitorInner extends ProxyResource {
    /**
     * For optimistic concurrency control.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Description of the monitor.
     */
    @JsonProperty(value = "properties.description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /**
     * ID of the monitor.
     */
    @JsonProperty(value = "properties.monitorId", access = JsonProperty.Access.WRITE_ONLY)
    private String monitorId;

    /**
     * Name of the monitor.
     */
    @JsonProperty(value = "properties.monitorName", access = JsonProperty.Access.WRITE_ONLY)
    private String monitorName;

    /**
     * User friendly display name of the monitor.
     */
    @JsonProperty(value = "properties.monitorDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String monitorDisplayName;

    /**
     * Name of the parent monitor.
     */
    @JsonProperty(value = "properties.parentMonitorName", access = JsonProperty.Access.WRITE_ONLY)
    private String parentMonitorName;

    /**
     * User friendly display name of the parent monitor.
     */
    @JsonProperty(value = "properties.parentMonitorDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String parentMonitorDisplayName;

    /**
     * Type of the monitor. Possible values include: 'Aggregate', 'Dependency',
     * 'Unit'.
     */
    @JsonProperty(value = "properties.monitorType", access = JsonProperty.Access.WRITE_ONLY)
    private MonitorType monitorType;

    /**
     * Category of the monitor. Possible values include: 'AvailabilityHealth',
     * 'Configuration', 'EntityHealth', 'PerformanceHealth', 'Security'.
     */
    @JsonProperty(value = "properties.monitorCategory", access = JsonProperty.Access.WRITE_ONLY)
    private MonitorCategory monitorCategory;

    /**
     * Component Type Id of monitor.
     */
    @JsonProperty(value = "properties.componentTypeId", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeId;

    /**
     * Component Type Name of monitor.
     */
    @JsonProperty(value = "properties.componentTypeName", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeName;

    /**
     * Component Type Display Name of the monitor.
     */
    @JsonProperty(value = "properties.componentTypeDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String componentTypeDisplayName;

    /**
     * Is the monitor state enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "properties.monitorState", access = JsonProperty.Access.WRITE_ONLY)
    private MonitorState monitorState;

    /**
     * Collection of MonitorCriteria. For PATCH calls, instead of partial list,
     * complete list of expected criteria should be passed for proper updation.
     */
    @JsonProperty(value = "properties.criteria", access = JsonProperty.Access.WRITE_ONLY)
    private List<MonitorCriteria> criteria;

    /**
     * Generates alerts or not. Possible values include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "properties.alertGeneration", access = JsonProperty.Access.WRITE_ONLY)
    private AlertGeneration alertGeneration;

    /**
     * Frequency at which monitor condition is evaluated.
     */
    @JsonProperty(value = "properties.frequency", access = JsonProperty.Access.WRITE_ONLY)
    private Integer frequency;

    /**
     * The duration in minutes in the past during which the monitor is
     * evaluated.
     */
    @JsonProperty(value = "properties.lookbackDuration", access = JsonProperty.Access.WRITE_ONLY)
    private Integer lookbackDuration;

    /**
     * URL pointing to the documentation of the monitor.
     */
    @JsonProperty(value = "properties.documentationURL", access = JsonProperty.Access.WRITE_ONLY)
    private String documentationURL;

    /**
     * Name of the signal on which this monitor is configured.
     */
    @JsonProperty(value = "properties.signalName", access = JsonProperty.Access.WRITE_ONLY)
    private String signalName;

    /**
     * Type of the signal on which this monitor is configured.
     */
    @JsonProperty(value = "properties.signalType", access = JsonProperty.Access.WRITE_ONLY)
    private String signalType;

    /**
     * Get for optimistic concurrency control.
     *
     * @return the etag value
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get description of the monitor.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Get iD of the monitor.
     *
     * @return the monitorId value
     */
    public String monitorId() {
        return this.monitorId;
    }

    /**
     * Get name of the monitor.
     *
     * @return the monitorName value
     */
    public String monitorName() {
        return this.monitorName;
    }

    /**
     * Get user friendly display name of the monitor.
     *
     * @return the monitorDisplayName value
     */
    public String monitorDisplayName() {
        return this.monitorDisplayName;
    }

    /**
     * Get name of the parent monitor.
     *
     * @return the parentMonitorName value
     */
    public String parentMonitorName() {
        return this.parentMonitorName;
    }

    /**
     * Get user friendly display name of the parent monitor.
     *
     * @return the parentMonitorDisplayName value
     */
    public String parentMonitorDisplayName() {
        return this.parentMonitorDisplayName;
    }

    /**
     * Get type of the monitor. Possible values include: 'Aggregate', 'Dependency', 'Unit'.
     *
     * @return the monitorType value
     */
    public MonitorType monitorType() {
        return this.monitorType;
    }

    /**
     * Get category of the monitor. Possible values include: 'AvailabilityHealth', 'Configuration', 'EntityHealth', 'PerformanceHealth', 'Security'.
     *
     * @return the monitorCategory value
     */
    public MonitorCategory monitorCategory() {
        return this.monitorCategory;
    }

    /**
     * Get component Type Id of monitor.
     *
     * @return the componentTypeId value
     */
    public String componentTypeId() {
        return this.componentTypeId;
    }

    /**
     * Get component Type Name of monitor.
     *
     * @return the componentTypeName value
     */
    public String componentTypeName() {
        return this.componentTypeName;
    }

    /**
     * Get component Type Display Name of the monitor.
     *
     * @return the componentTypeDisplayName value
     */
    public String componentTypeDisplayName() {
        return this.componentTypeDisplayName;
    }

    /**
     * Get is the monitor state enabled or disabled. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the monitorState value
     */
    public MonitorState monitorState() {
        return this.monitorState;
    }

    /**
     * Get collection of MonitorCriteria. For PATCH calls, instead of partial list, complete list of expected criteria should be passed for proper updation.
     *
     * @return the criteria value
     */
    public List<MonitorCriteria> criteria() {
        return this.criteria;
    }

    /**
     * Get generates alerts or not. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the alertGeneration value
     */
    public AlertGeneration alertGeneration() {
        return this.alertGeneration;
    }

    /**
     * Get frequency at which monitor condition is evaluated.
     *
     * @return the frequency value
     */
    public Integer frequency() {
        return this.frequency;
    }

    /**
     * Get the duration in minutes in the past during which the monitor is evaluated.
     *
     * @return the lookbackDuration value
     */
    public Integer lookbackDuration() {
        return this.lookbackDuration;
    }

    /**
     * Get uRL pointing to the documentation of the monitor.
     *
     * @return the documentationURL value
     */
    public String documentationURL() {
        return this.documentationURL;
    }

    /**
     * Get name of the signal on which this monitor is configured.
     *
     * @return the signalName value
     */
    public String signalName() {
        return this.signalName;
    }

    /**
     * Get type of the signal on which this monitor is configured.
     *
     * @return the signalType value
     */
    public String signalType() {
        return this.signalType;
    }

}
