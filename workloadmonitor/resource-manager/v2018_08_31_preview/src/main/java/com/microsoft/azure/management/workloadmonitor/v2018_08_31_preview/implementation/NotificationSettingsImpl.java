/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.NotificationSettings;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.NotificationSettingsCollection;

class NotificationSettingsImpl extends WrapperImpl<NotificationSettingsInner> implements NotificationSettings {
    private final WorkloadMonitorManager manager;

    NotificationSettingsImpl(WorkloadMonitorManager manager) {
        super(manager.inner().notificationSettings());
        this.manager = manager;
    }

    public WorkloadMonitorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<NotificationSettingsCollection> listByResourceAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName) {
        NotificationSettingsInner client = this.inner();
        return client.listByResourceAsync(resourceGroupName, resourceNamespace, resourceType, resourceName)
        .map(new Func1<NotificationSettingsCollectionInner, NotificationSettingsCollection>() {
            @Override
            public NotificationSettingsCollection call(NotificationSettingsCollectionInner inner) {
                return new NotificationSettingsCollectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<NotificationSettingsCollection> updateAsync(String resourceGroupName, String resourceNamespace, String resourceType, String resourceName) {
        NotificationSettingsInner client = this.inner();
        return client.updateAsync(resourceGroupName, resourceNamespace, resourceType, resourceName)
        .map(new Func1<NotificationSettingsCollectionInner, NotificationSettingsCollection>() {
            @Override
            public NotificationSettingsCollection call(NotificationSettingsCollectionInner inner) {
                return new NotificationSettingsCollectionImpl(inner, manager());
            }
        });
    }

}
