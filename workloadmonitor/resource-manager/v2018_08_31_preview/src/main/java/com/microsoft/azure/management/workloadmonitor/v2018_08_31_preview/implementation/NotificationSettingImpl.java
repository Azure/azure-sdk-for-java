/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2018_08_31_preview.NotificationSetting;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;

class NotificationSettingImpl extends CreatableUpdatableImpl<NotificationSetting, NotificationSettingInner, NotificationSettingImpl> implements NotificationSetting, NotificationSetting.Update {
    private final WorkloadMonitorManager manager;
    private String resourceGroupName;
    private String resourceNamespace;
    private String resourceType;
    private String resourceName;

    NotificationSettingImpl(String name, WorkloadMonitorManager manager) {
        super(name, new NotificationSettingInner());
        this.manager = manager;
        // Set resource name
        this.resourceNamespace = name;
        //
    }

    NotificationSettingImpl(NotificationSettingInner inner, WorkloadMonitorManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.resourceNamespace = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.resourceNamespace = IdParsingUtils.getValueFromIdByName(inner.id(), "providers");
        this.resourceType = IdParsingUtils.getValueFromIdByPosition(inner.id(), 6);
        this.resourceName = IdParsingUtils.getValueFromIdByPosition(inner.id(), 7);
        //
    }

    @Override
    public WorkloadMonitorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<NotificationSetting> createResourceAsync() {
        NotificationSettingsInner client = this.manager().inner().notificationSettings();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<NotificationSetting> updateResourceAsync() {
        NotificationSettingsInner client = this.manager().inner().notificationSettings();
        return client.updateAsync(this.resourceGroupName, this.resourceNamespace, this.resourceType, this.resourceName)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<NotificationSettingInner> getInnerAsync() {
        NotificationSettingsInner client = this.manager().inner().notificationSettings();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<String> actionGroupResourceIds() {
        return this.inner().actionGroupResourceIds();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
