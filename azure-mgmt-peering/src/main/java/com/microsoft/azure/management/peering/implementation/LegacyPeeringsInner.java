/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.peering.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LegacyPeerings.
 */
public class LegacyPeeringsInner {
    /** The Retrofit service to perform REST calls. */
    private LegacyPeeringsService service;
    /** The service client containing this operation class. */
    private PeeringManagementClientImpl client;

    /**
     * Initializes an instance of LegacyPeeringsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LegacyPeeringsInner(Retrofit retrofit, PeeringManagementClientImpl client) {
        this.service = retrofit.create(LegacyPeeringsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for LegacyPeerings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LegacyPeeringsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.LegacyPeerings list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("peeringLocation") String peeringLocation, @Query("kind") String kind, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all of the legacy peerings under the given subscription matching the specified kind and location.
     *
     * @param peeringLocation The location of the peering.
     * @param kind The kind of the peering. Possible values include: 'Direct', 'Exchange'
     * @return the PagedList<PeeringInner> object if successful.
     */
    public PagedList<PeeringInner> list(String peeringLocation, String kind) {
        PageImpl<PeeringInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync(peeringLocation, kind).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<PeeringInner>(page) {
            @Override
            public Page<PeeringInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all of the legacy peerings under the given subscription matching the specified kind and location.
     *
     * @param peeringLocation The location of the peering.
     * @param kind The kind of the peering. Possible values include: 'Direct', 'Exchange'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringInner>> listAsync(String peeringLocation, String kind, final ServiceCallback<List<PeeringInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(peeringLocation, kind), serviceCallback);
    }

    /**
     * Lists all of the legacy peerings under the given subscription matching the specified kind and location.
     *
     * @param peeringLocation The location of the peering.
     * @param kind The kind of the peering. Possible values include: 'Direct', 'Exchange'
     * @return the observable to the List&lt;PeeringInner&gt; object
     */
    public Observable<Page<PeeringInner>> listAsync(String peeringLocation, String kind) {
        return listWithServiceResponseAsync(peeringLocation, kind).map(new Func1<ServiceResponse<List<PeeringInner>>, Page<PeeringInner>>() {
            @Override
            public Page<PeeringInner> call(ServiceResponse<List<PeeringInner>> response) {
                PageImpl<PeeringInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all of the legacy peerings under the given subscription matching the specified kind and location.
     *
     * @param peeringLocation The location of the peering.
     * @param kind The kind of the peering. Possible values include: 'Direct', 'Exchange'
     * @return the observable to the List&lt;PeeringInner&gt; object
     */
    public Observable<ServiceResponse<List<PeeringInner>>> listWithServiceResponseAsync(String peeringLocation, String kind) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (peeringLocation == null) {
            throw new IllegalArgumentException("Parameter peeringLocation is required and cannot be null.");
        }
        if (kind == null) {
            throw new IllegalArgumentException("Parameter kind is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), peeringLocation, kind, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PeeringInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<PeeringInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringInner>> result = listDelegate(response);
                        List<PeeringInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<PeeringInner>> clientResponse = new ServiceResponse<List<PeeringInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
