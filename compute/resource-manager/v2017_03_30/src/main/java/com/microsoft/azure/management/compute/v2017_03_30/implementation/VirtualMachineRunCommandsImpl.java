/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.compute.v2017_03_30.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineRunCommands;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.compute.v2017_03_30.RunCommandDocument;
import com.microsoft.azure.Page;

class VirtualMachineRunCommandsImpl extends WrapperImpl<VirtualMachineRunCommandsInner> implements VirtualMachineRunCommands {
    private final ComputeManager manager;

    VirtualMachineRunCommandsImpl(ComputeManager manager) {
        super(manager.inner().virtualMachineRunCommands());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    private RunCommandDocumentImpl wrapModel(RunCommandDocumentInner inner) {
        return  new RunCommandDocumentImpl(inner, manager());
    }

    @Override
    public Observable<RunCommandDocument> getAsync(String location, String commandId) {
        VirtualMachineRunCommandsInner client = this.inner();
        return client.getAsync(location, commandId)
        .map(new Func1<RunCommandDocumentInner, RunCommandDocument>() {
            @Override
            public RunCommandDocument call(RunCommandDocumentInner inner) {
                return wrapModel(inner);
            }
       });
    }

    private Observable<Page<RunCommandDocumentInner>> listNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        VirtualMachineRunCommandsInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<RunCommandDocumentInner>, Observable<Page<RunCommandDocumentInner>>>() {
            @Override
            public Observable<Page<RunCommandDocumentInner>> call(Page<RunCommandDocumentInner> page) {
                return Observable.just(page).concatWith(listNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<RunCommandDocument> listAsync(final String location) {
        VirtualMachineRunCommandsInner client = this.inner();
        return client.listAsync(location)
        .flatMap(new Func1<Page<RunCommandDocumentInner>, Observable<Page<RunCommandDocumentInner>>>() {
            @Override
            public Observable<Page<RunCommandDocumentInner>> call(Page<RunCommandDocumentInner> page) {
                return listNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<RunCommandDocumentInner>, Iterable<RunCommandDocumentInner>>() {
            @Override
            public Iterable<RunCommandDocumentInner> call(Page<RunCommandDocumentInner> page) {
                return page.items();
            }
       })
        .map(new Func1<RunCommandDocumentInner, RunCommandDocument>() {
            @Override
            public RunCommandDocument call(RunCommandDocumentInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
