/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.compute.v2017_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachines;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachine;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachineCaptureResult;
import com.microsoft.azure.management.compute.v2017_12_01.OperationStatusResponse;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachineInstanceView;
import com.microsoft.azure.management.compute.v2017_12_01.RunCommandResult;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachineCaptureParameters;
import com.microsoft.azure.management.compute.v2017_12_01.RunCommandInput;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachineExtensionsListResult;
import java.util.List;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachineVirtualMachineSize;

class VirtualMachinesImpl extends WrapperImpl<VirtualMachinesInner> implements VirtualMachines {
    private final ComputeManager manager;

    VirtualMachinesImpl(ComputeManager manager) {
        super(manager.inner().virtualMachines());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    @Override
    public VirtualMachineImpl defineVirtualMachine(String name) {
        return wrapVirtualMachineModel(name);
    }

    private VirtualMachineImpl wrapVirtualMachineModel(String name) {
        return new VirtualMachineImpl(name, this.manager());
    }

    private VirtualMachineImpl wrapVirtualMachineModel(VirtualMachineInner inner) {
        return  new VirtualMachineImpl(inner, manager());
    }

    private VirtualMachineVirtualMachineSizeImpl wrapVirtualMachineVirtualMachineSizeModel(VirtualMachineSizeInner inner) {
        return  new VirtualMachineVirtualMachineSizeImpl(inner, manager());
    }

    @Override
    public Observable<VirtualMachine> listByLocationAsync(final String location) {
        VirtualMachinesInner client = this.inner();
        return client.listByLocationAsync(location)
        .flatMapIterable(new Func1<Page<VirtualMachineInner>, Iterable<VirtualMachineInner>>() {
            @Override
            public Iterable<VirtualMachineInner> call(Page<VirtualMachineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualMachineInner, VirtualMachine>() {
            @Override
            public VirtualMachine call(VirtualMachineInner inner) {
                return wrapVirtualMachineModel(inner);
            }
        });
    }

    @Override
    public Observable<VirtualMachineCaptureResult> captureAsync(String resourceGroupName, String vmName, VirtualMachineCaptureParameters parameters) {
        VirtualMachinesInner client = this.inner();
        return client.captureAsync(resourceGroupName, vmName, parameters)
        .map(new Func1<VirtualMachineCaptureResultInner, VirtualMachineCaptureResult>() {
            @Override
            public VirtualMachineCaptureResult call(VirtualMachineCaptureResultInner inner) {
                return new VirtualMachineCaptureResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> deleteAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VirtualMachine> getByResourceGroupAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, vmName)
        .map(new Func1<VirtualMachineInner, VirtualMachine>() {
            @Override
            public VirtualMachine call(VirtualMachineInner inner) {
                return new VirtualMachineImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VirtualMachineInstanceView> instanceViewAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.instanceViewAsync(resourceGroupName, vmName)
        .map(new Func1<VirtualMachineInstanceViewInner, VirtualMachineInstanceView>() {
            @Override
            public VirtualMachineInstanceView call(VirtualMachineInstanceViewInner inner) {
                return new VirtualMachineInstanceViewImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> convertToManagedDisksAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.convertToManagedDisksAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> deallocateAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.deallocateAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> generalizeAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.generalizeAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> powerOffAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.powerOffAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> restartAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.restartAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> startAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.startAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> redeployAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.redeployAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationStatusResponse> performMaintenanceAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.performMaintenanceAsync(resourceGroupName, vmName)
        .map(new Func1<OperationStatusResponseInner, OperationStatusResponse>() {
            @Override
            public OperationStatusResponse call(OperationStatusResponseInner inner) {
                return new OperationStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RunCommandResult> runCommandAsync(String resourceGroupName, String vmName, RunCommandInput parameters) {
        VirtualMachinesInner client = this.inner();
        return client.runCommandAsync(resourceGroupName, vmName, parameters)
        .map(new Func1<RunCommandResultInner, RunCommandResult>() {
            @Override
            public RunCommandResult call(RunCommandResultInner inner) {
                return new RunCommandResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VirtualMachine> listByResourceGroupAsync(final String resourceGroupName) {
        VirtualMachinesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<VirtualMachineInner>, Iterable<VirtualMachineInner>>() {
            @Override
            public Iterable<VirtualMachineInner> call(Page<VirtualMachineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualMachineInner, VirtualMachine>() {
            @Override
            public VirtualMachine call(VirtualMachineInner inner) {
                return new VirtualMachineImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VirtualMachine> listAsync() {
        VirtualMachinesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<VirtualMachineInner>, Iterable<VirtualMachineInner>>() {
            @Override
            public Iterable<VirtualMachineInner> call(Page<VirtualMachineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualMachineInner, VirtualMachine>() {
            @Override
            public VirtualMachine call(VirtualMachineInner inner) {
                return new VirtualMachineImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VirtualMachineExtensionsListResult> getExtensionsAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.getExtensionsAsync(resourceGroupName, vmName)
        .map(new Func1<VirtualMachineExtensionsListResultInner, VirtualMachineExtensionsListResult>() {
            @Override
            public VirtualMachineExtensionsListResult call(VirtualMachineExtensionsListResultInner inner) {
                return new VirtualMachineExtensionsListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VirtualMachineVirtualMachineSize> listAvailableSizesAsync(String resourceGroupName, String vmName) {
        VirtualMachinesInner client = this.inner();
        return client.listAvailableSizesAsync(resourceGroupName, vmName)
        .flatMap(new Func1<List<VirtualMachineSizeInner>, Observable<VirtualMachineSizeInner>>() {
            @Override
            public Observable<VirtualMachineSizeInner> call(List<VirtualMachineSizeInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VirtualMachineSizeInner, VirtualMachineVirtualMachineSize>() {
            @Override
            public VirtualMachineVirtualMachineSize call(VirtualMachineSizeInner inner) {
                return wrapVirtualMachineVirtualMachineSizeModel(inner);
            }
        });
    }

}
