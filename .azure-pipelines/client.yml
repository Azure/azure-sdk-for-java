# External variables Settable at queue time:
# "pomFile" : "pom.client.xml".   This is the project object model file for Maven.

trigger:
  - master

variables:
  DefaultOptions: '--batch-mode -Dmaven.wagon.http.pool=false'
  LoggingOptions: '-Dorg.slf4j.simpleLogger.defaultLogLevel=error -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'

jobs:
  - job: 'Build'

    pool:
      vmImage: 'ubuntu-16.04'

    strategy:
      matrix:
        Java 8:
          ArtifactName: 'packages'
          ProfileFlag: ''
          JavaVersion: '1.8'
        Java LTS:
          ArtifactName: 'java-lts-packages'
          ProfileFlag: '-Djava-lts'
          JavaVersion: '1.11'

    steps:
      - task: Maven@3
        displayName: 'Build and Package'
        inputs:
          mavenPomFile: $(pomFile)
          goals: 'javadoc:jar source:jar package'
          options: '$(DefaultOptions) $(ProfileFlag) -Dmaven.test.skip=true -Dinclude-template' # We include template-module so we ensure it always builds in CI
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - powershell: |
          # use sources files as a marker to find POM files so we can copy them to the output. The sources.jar file is generally
          # in a target folder next to the pom.xml file so $_.Directory.Parent should get us the folder that contains the POM.
          dir -r -i *-sources.jar | % { copy (Join-Path $_.Directory.Parent.FullName "pom.xml") (Join-Path $(Build.ArtifactStagingDirectory) $_.Name.Replace("-sources.jar",".pom")) }
          dir -r -i *.jar | % { copy $_ $(Build.ArtifactStagingDirectory) }
        displayName: 'Copy JAR and POM files to artifact staging'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts $(ArtifactName)'
        inputs:
          artifactName: '$(ArtifactName)'

  - job: 'Analyze'

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      # sudo is required for pip install, as a console_entrypoint shim needs to be placed in bin
      - script: |
          pip install setuptools wheel
          sudo pip install doc-warden
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: 'Verify Readmes'

      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
        # builds should be sufficient.
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Component Detection'

      # We `install` separately from running `site:site site:stage` so that the `install` brings in the non-shipping-modules,
      # but we don't include them in the Maven site commands (so that we don't generate reports for the non-shipping modules).
      - task: Maven@3
        displayName: 'Install reporting tools'
        inputs:
          mavenPomFile: $(pomFile)
          options: '$(DefaultOptions) -Dinclude-non-shipping-modules -DskipTests -Dgpg.skip'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'install'

      - task: Maven@3
        displayName: 'Generate Maven project site, including JavaDocs, SpotBugs, and CheckStyle reports'
        inputs:
          mavenPomFile: $(pomFile)
          options: '$(DefaultOptions) -DskipTests -Dgpg.skip'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'site:site site:stage'

      - script: |
          git clone https://github.com/JonathanGiles/DependencyChecker.git
          mkdir input && cp dependencies.json input/
        displayName: 'Download dependency checker'

      - task: Maven@3
        displayName: 'Analyze dependencies'
        inputs:
          mavenPomFile: 'DependencyChecker/pom.xml'
          options: '-Dexec.args="-showall"'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'clean package exec:java'

      - powershell: |
          copy -r target/staging $(Build.ArtifactStagingDirectory)
          copy eng/code-quality-reports/src/main/resources/index.html $(Build.ArtifactStagingDirectory)
          copy eng/spotbugs-aggregate-report/target/spotbugs/spotbugsXml.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
          copy output/dependencies.html (Join-Path $(Build.ArtifactStagingDirectory) "staging")
        displayName: 'Copy reports to artifact staging'

      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish Report Artifacts'
        inputs:
          artifactName: reports

  - job: 'Test'

    strategy:
      matrix:
        Linux - Java 8:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          JavaVersion: '1.8'
          ProfileFlag: ''
        macOS - Java 8:
          OSName: 'macOS'
          OSVmImage: 'macOS-10.13'
          JavaVersion: '1.8'
          ProfileFlag: ''
        Windows - Java 8:
          OSName: 'Windows'
          OSVmImage: 'vs2017-win2016'
          JavaVersion: '1.8'
          ProfileFlag: ''
        Linux - Java LTS:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          JavaVersion: '1.11'
          ProfileFlag: '-Djava-lts'
        macOS - Java LTS:
          OSName: 'macOS'
          OSVmImage: 'macOS-10.13'
          JavaVersion: '1.11'
          ProfileFlag: '-Djava-lts'
        Windows - Java LTS:
          OSName: 'Windows'
          OSVmImage: 'vs2017-win2016'
          JavaVersion: '1.11'
          ProfileFlag: '-Djava-lts'

    pool:
      vmImage: $(OSVmImage)

    steps:
      - task: Maven@3
        displayName: 'Start Jetty'
        inputs:
          mavenPomFile: $(pomFile)
          options: '$(DefaultOptions) $(ProfileFlag)'
          mavenOptions: '$(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'jetty:run-forked'

      - task: Maven@3
        displayName: 'Run tests'
        inputs:
          mavenPomFile: $(pomFile)
          options: '$(DefaultOptions) $(ProfileFlag)'
          mavenOptions: '-Xmx3072m $(LoggingOptions)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'test'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          mergeTestResults: true
          testRunTitle: '$(OSName) on Java $(JavaVersion)'
