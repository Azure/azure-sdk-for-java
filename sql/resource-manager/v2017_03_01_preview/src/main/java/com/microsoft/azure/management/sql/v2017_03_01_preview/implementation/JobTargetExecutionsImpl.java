/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobTargetExecutions;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.ExecutionJobJobAgentServerJobExecutionModel;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobAgentServerJobExecution;
import java.util.UUID;

class JobTargetExecutionsImpl extends WrapperImpl<JobTargetExecutionsInner> implements JobTargetExecutions {
    private final SqlManager manager;

    JobTargetExecutionsImpl(SqlManager manager) {
        super(manager.inner().jobTargetExecutions());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private ExecutionJobJobAgentServerJobExecutionModelImpl wrapExecutionJobJobAgentServerJobExecutionModelModel(JobExecutionInner inner) {
        return  new ExecutionJobJobAgentServerJobExecutionModelImpl(inner, manager());
    }

    @Override
    public Observable<ExecutionJobJobAgentServerJobExecutionModel> listByJobExecutionAsync(final String resourceGroupName, final String serverName, final String jobAgentName, final String jobName, final UUID jobExecutionId) {
        JobTargetExecutionsInner client = this.inner();
        return client.listByJobExecutionAsync(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId)
        .flatMapIterable(new Func1<Page<JobExecutionInner>, Iterable<JobExecutionInner>>() {
            @Override
            public Iterable<JobExecutionInner> call(Page<JobExecutionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<JobExecutionInner, ExecutionJobJobAgentServerJobExecutionModel>() {
            @Override
            public ExecutionJobJobAgentServerJobExecutionModel call(JobExecutionInner inner) {
                return wrapExecutionJobJobAgentServerJobExecutionModelModel(inner);
            }
        });
    }

    @Override
    public Observable<JobAgentServerJobExecution> listByStepAsync(final String resourceGroupName, final String serverName, final String jobAgentName, final String jobName, final UUID jobExecutionId, final String stepName) {
        JobTargetExecutionsInner client = this.inner();
        return client.listByStepAsync(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName)
        .flatMapIterable(new Func1<Page<JobExecutionInner>, Iterable<JobExecutionInner>>() {
            @Override
            public Iterable<JobExecutionInner> call(Page<JobExecutionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<JobExecutionInner, JobAgentServerJobExecution>() {
            @Override
            public JobAgentServerJobExecution call(JobExecutionInner inner) {
                return new JobAgentServerJobExecutionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<JobAgentServerJobExecution> getAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId, String stepName, UUID targetId) {
        JobTargetExecutionsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, targetId)
        .map(new Func1<JobExecutionInner, JobAgentServerJobExecution>() {
            @Override
            public JobAgentServerJobExecution call(JobExecutionInner inner) {
                return new JobAgentServerJobExecutionImpl(inner, manager());
            }
        });
    }

}
