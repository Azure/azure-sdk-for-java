/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.DatabaseVulnerabilityAssessments;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.DatabaseVulnerabilityAssessment;

class DatabaseVulnerabilityAssessmentsImpl extends WrapperImpl<DatabaseVulnerabilityAssessmentsInner> implements DatabaseVulnerabilityAssessments {
    private final SqlManager manager;

    DatabaseVulnerabilityAssessmentsImpl(SqlManager manager) {
        super(manager.inner().databaseVulnerabilityAssessments());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public DatabaseVulnerabilityAssessmentImpl define(String name) {
        return wrapModel(name);
    }

    private DatabaseVulnerabilityAssessmentImpl wrapModel(DatabaseVulnerabilityAssessmentInner inner) {
        return  new DatabaseVulnerabilityAssessmentImpl(inner, manager());
    }

    private DatabaseVulnerabilityAssessmentImpl wrapModel(String name) {
        return new DatabaseVulnerabilityAssessmentImpl(name, this.manager());
    }

    @Override
    public Observable<DatabaseVulnerabilityAssessment> listByDatabaseAsync(final String resourceGroupName, final String serverName, final String databaseName) {
        DatabaseVulnerabilityAssessmentsInner client = this.inner();
        return client.listByDatabaseAsync(resourceGroupName, serverName, databaseName)
        .flatMapIterable(new Func1<Page<DatabaseVulnerabilityAssessmentInner>, Iterable<DatabaseVulnerabilityAssessmentInner>>() {
            @Override
            public Iterable<DatabaseVulnerabilityAssessmentInner> call(Page<DatabaseVulnerabilityAssessmentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DatabaseVulnerabilityAssessmentInner, DatabaseVulnerabilityAssessment>() {
            @Override
            public DatabaseVulnerabilityAssessment call(DatabaseVulnerabilityAssessmentInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DatabaseVulnerabilityAssessment> getAsync(String resourceGroupName, String serverName, String databaseName) {
        DatabaseVulnerabilityAssessmentsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName)
        .flatMap(new Func1<DatabaseVulnerabilityAssessmentInner, Observable<DatabaseVulnerabilityAssessment>>() {
            @Override
            public Observable<DatabaseVulnerabilityAssessment> call(DatabaseVulnerabilityAssessmentInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DatabaseVulnerabilityAssessment)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName, String databaseName) {
        DatabaseVulnerabilityAssessmentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName, databaseName).toCompletable();
    }

}
