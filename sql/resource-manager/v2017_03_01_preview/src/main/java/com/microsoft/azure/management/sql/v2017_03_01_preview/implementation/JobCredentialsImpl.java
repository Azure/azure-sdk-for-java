/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobCredentials;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobCredential;

class JobCredentialsImpl extends WrapperImpl<JobCredentialsInner> implements JobCredentials {
    private final SqlManager manager;

    JobCredentialsImpl(SqlManager manager) {
        super(manager.inner().jobCredentials());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public JobCredentialImpl define(String name) {
        return wrapModel(name);
    }

    private JobCredentialImpl wrapModel(JobCredentialInner inner) {
        return  new JobCredentialImpl(inner, manager());
    }

    private JobCredentialImpl wrapModel(String name) {
        return new JobCredentialImpl(name, this.manager());
    }

    @Override
    public Observable<JobCredential> listByAgentAsync(final String resourceGroupName, final String serverName, final String jobAgentName) {
        JobCredentialsInner client = this.inner();
        return client.listByAgentAsync(resourceGroupName, serverName, jobAgentName)
        .flatMapIterable(new Func1<Page<JobCredentialInner>, Iterable<JobCredentialInner>>() {
            @Override
            public Iterable<JobCredentialInner> call(Page<JobCredentialInner> page) {
                return page.items();
            }
        })
        .map(new Func1<JobCredentialInner, JobCredential>() {
            @Override
            public JobCredential call(JobCredentialInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<JobCredential> getAsync(String resourceGroupName, String serverName, String jobAgentName, String credentialName) {
        JobCredentialsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, jobAgentName, credentialName)
        .flatMap(new Func1<JobCredentialInner, Observable<JobCredential>>() {
            @Override
            public Observable<JobCredential> call(JobCredentialInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((JobCredential)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName, String jobAgentName, String credentialName) {
        JobCredentialsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName, jobAgentName, credentialName).toCompletable();
    }

}
