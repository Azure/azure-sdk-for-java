/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.management.sql.v2017_03_01_preview.DatabaseVulnerabilityAssessmentRuleBaseline;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.sql.v2017_03_01_preview.DatabaseVulnerabilityAssessmentRuleBaselineItem;
import com.microsoft.azure.management.sql.v2017_03_01_preview.VulnerabilityAssessmentPolicyBaselineName;

class DatabaseVulnerabilityAssessmentRuleBaselineImpl extends CreatableUpdatableImpl<DatabaseVulnerabilityAssessmentRuleBaseline, DatabaseVulnerabilityAssessmentRuleBaselineInner, DatabaseVulnerabilityAssessmentRuleBaselineImpl> implements DatabaseVulnerabilityAssessmentRuleBaseline, DatabaseVulnerabilityAssessmentRuleBaseline.Definition, DatabaseVulnerabilityAssessmentRuleBaseline.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String databaseName;
    private String ruleId;
    private VulnerabilityAssessmentPolicyBaselineName baselineName;
    private List<DatabaseVulnerabilityAssessmentRuleBaselineItem> cbaselineResults;
    private List<DatabaseVulnerabilityAssessmentRuleBaselineItem> ubaselineResults;

    DatabaseVulnerabilityAssessmentRuleBaselineImpl(String name, SqlManager manager) {
        super(name, new DatabaseVulnerabilityAssessmentRuleBaselineInner());
        this.manager = manager;
        // Set resource name
        this.baselineName = name;
        //
    }

    DatabaseVulnerabilityAssessmentRuleBaselineImpl(DatabaseVulnerabilityAssessmentRuleBaselineInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.baselineName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.ruleId = IdParsingUtils.getValueFromIdByName(inner.id(), "rules");
        this.baselineName = VulnerabilityAssessmentPolicyBaselineName.valueOf(IdParsingUtils.getValueFromIdByName(inner.id(), "baselines"));
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DatabaseVulnerabilityAssessmentRuleBaseline> createResourceAsync() {
        DatabaseVulnerabilityAssessmentRuleBaselinesInner client = this.manager().inner().databaseVulnerabilityAssessmentRuleBaselines();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.ruleId, this.baselineName, this.cbaselineResults)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DatabaseVulnerabilityAssessmentRuleBaseline> updateResourceAsync() {
        DatabaseVulnerabilityAssessmentRuleBaselinesInner client = this.manager().inner().databaseVulnerabilityAssessmentRuleBaselines();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.ruleId, this.baselineName, this.ubaselineResults)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DatabaseVulnerabilityAssessmentRuleBaselineInner> getInnerAsync() {
        DatabaseVulnerabilityAssessmentRuleBaselinesInner client = this.manager().inner().databaseVulnerabilityAssessmentRuleBaselines();
        return client.getAsync(this.resourceGroupName, this.serverName, this.databaseName, this.ruleId, this.baselineName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults() {
        return this.inner().baselineResults();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DatabaseVulnerabilityAssessmentRuleBaselineImpl withExistingRule(String resourceGroupName, String serverName, String databaseName, String ruleId) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        this.ruleId = ruleId;
        return this;
    }

    @Override
    public DatabaseVulnerabilityAssessmentRuleBaselineImpl withBaselineResults(List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        if (isInCreateMode()) {
            this.cbaselineResults = baselineResults;
        } else {
            this.ubaselineResults = baselineResults;
        }
        return this;
    }

}
