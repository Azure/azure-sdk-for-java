/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.management.sql.v2017_03_01_preview.JobAgent;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.sql.v2017_03_01_preview.Sku;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobAgentState;

class JobAgentImpl extends CreatableUpdatableImpl<JobAgent, JobAgentInner, JobAgentImpl> implements JobAgent, JobAgent.Definition, JobAgent.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String jobAgentName;

    JobAgentImpl(String name, SqlManager manager) {
        super(name, new JobAgentInner());
        this.manager = manager;
        // Set resource name
        this.jobAgentName = name;
        //
    }

    JobAgentImpl(JobAgentInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.jobAgentName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.jobAgentName = IdParsingUtils.getValueFromIdByName(inner.id(), "jobAgents");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<JobAgent> createResourceAsync() {
        JobAgentsInner client = this.manager().inner().jobAgents();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.jobAgentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<JobAgent> updateResourceAsync() {
        JobAgentsInner client = this.manager().inner().jobAgents();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.jobAgentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<JobAgentInner> getInnerAsync() {
        JobAgentsInner client = this.manager().inner().jobAgents();
        return client.getAsync(this.resourceGroupName, this.serverName, this.jobAgentName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String databaseId() {
        return this.inner().databaseId();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public JobAgentState state() {
        return this.inner().state();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public JobAgentImpl withExistingServer(String resourceGroupName, String serverName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        return this;
    }

    @Override
    public JobAgentImpl withDatabaseId(String databaseId) {
        this.inner().withDatabaseId(databaseId);
        return this;
    }

    @Override
    public JobAgentImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public JobAgentImpl withSku(Sku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public JobAgentImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
