/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobSteps;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobStep;

class JobStepsImpl extends WrapperImpl<JobStepsInner> implements JobSteps {
    private final SqlManager manager;

    JobStepsImpl(SqlManager manager) {
        super(manager.inner().jobSteps());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public JobStepImpl define(String name) {
        return wrapModel(name);
    }

    private JobStepImpl wrapModel(JobStepInner inner) {
        return  new JobStepImpl(inner, manager());
    }

    private JobStepImpl wrapModel(String name) {
        return new JobStepImpl(name, this.manager());
    }

    @Override
    public Observable<JobStep> listByJobAsync(final String resourceGroupName, final String serverName, final String jobAgentName, final String jobName) {
        JobStepsInner client = this.inner();
        return client.listByJobAsync(resourceGroupName, serverName, jobAgentName, jobName)
        .flatMapIterable(new Func1<Page<JobStepInner>, Iterable<JobStepInner>>() {
            @Override
            public Iterable<JobStepInner> call(Page<JobStepInner> page) {
                return page.items();
            }
        })
        .map(new Func1<JobStepInner, JobStep>() {
            @Override
            public JobStep call(JobStepInner inner) {
                return new JobStepImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<JobStep> getAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, String stepName) {
        JobStepsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, jobAgentName, jobName, stepName)
        .map(new Func1<JobStepInner, JobStep>() {
            @Override
            public JobStep call(JobStepInner inner) {
                return new JobStepImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, String stepName) {
        JobStepsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName, jobAgentName, jobName, stepName).toCompletable();
    }

    @Override
    public Observable<JobStep> listByVersionAsync(final String resourceGroupName, final String serverName, final String jobAgentName, final String jobName, final int jobVersion) {
        JobStepsInner client = this.inner();
        return client.listByVersionAsync(resourceGroupName, serverName, jobAgentName, jobName, jobVersion)
        .flatMapIterable(new Func1<Page<JobStepInner>, Iterable<JobStepInner>>() {
            @Override
            public Iterable<JobStepInner> call(Page<JobStepInner> page) {
                return page.items();
            }
        })
        .map(new Func1<JobStepInner, JobStep>() {
            @Override
            public JobStep call(JobStepInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<JobStep> getByVersionAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, int jobVersion, String stepName) {
        JobStepsInner client = this.inner();
        return client.getByVersionAsync(resourceGroupName, serverName, jobAgentName, jobName, jobVersion, stepName)
        .flatMap(new Func1<JobStepInner, Observable<JobStep>>() {
            @Override
            public Observable<JobStep> call(JobStepInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((JobStep)wrapModel(inner));
                }
            }
       });
    }

}
