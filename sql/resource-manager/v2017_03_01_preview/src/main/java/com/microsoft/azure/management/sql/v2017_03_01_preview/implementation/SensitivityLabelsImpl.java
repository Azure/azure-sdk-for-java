/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.SensitivityLabels;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2017_03_01_preview.SensitivityLabel;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.DatabasisServerSensitivityLabel;

class SensitivityLabelsImpl extends WrapperImpl<SensitivityLabelsInner> implements SensitivityLabels {
    private final SqlManager manager;

    SensitivityLabelsImpl(SqlManager manager) {
        super(manager.inner().sensitivityLabels());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public SensitivityLabelImpl define(String name) {
        return wrapModel(name);
    }

    private SensitivityLabelImpl wrapModel(SensitivityLabelInner inner) {
        return  new SensitivityLabelImpl(inner, manager());
    }

    private SensitivityLabelImpl wrapModel(String name) {
        return new SensitivityLabelImpl(name, this.manager());
    }

    @Override
    public Completable enableRecommendationAsync(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName) {
        SensitivityLabelsInner client = this.inner();
        return client.enableRecommendationAsync(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName).toCompletable();
    }

    @Override
    public Completable disableRecommendationAsync(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName) {
        SensitivityLabelsInner client = this.inner();
        return client.disableRecommendationAsync(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName).toCompletable();
    }

    @Override
    public Observable<SensitivityLabel> getAsync(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName, SensitivityLabelSource sensitivityLabelSource) {
        SensitivityLabelsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, sensitivityLabelSource)
        .flatMap(new Func1<SensitivityLabelInner, Observable<SensitivityLabel>>() {
            @Override
            public Observable<SensitivityLabel> call(SensitivityLabelInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((SensitivityLabel)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName) {
        SensitivityLabelsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName).toCompletable();
    }

    private DatabasisServerSensitivityLabelImpl wrapDatabasisServerSensitivityLabelModel(SensitivityLabelInner inner) {
        return  new DatabasisServerSensitivityLabelImpl(inner, manager());
    }

    @Override
    public Observable<DatabasisServerSensitivityLabel> listCurrentByDatabaseAsync(final String resourceGroupName, final String serverName, final String databaseName) {
        SensitivityLabelsInner client = this.inner();
        return client.listCurrentByDatabaseAsync(resourceGroupName, serverName, databaseName)
        .flatMapIterable(new Func1<Page<SensitivityLabelInner>, Iterable<SensitivityLabelInner>>() {
            @Override
            public Iterable<SensitivityLabelInner> call(Page<SensitivityLabelInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SensitivityLabelInner, DatabasisServerSensitivityLabel>() {
            @Override
            public DatabasisServerSensitivityLabel call(SensitivityLabelInner inner) {
                return wrapDatabasisServerSensitivityLabelModel(inner);
            }
        });
    }

}
