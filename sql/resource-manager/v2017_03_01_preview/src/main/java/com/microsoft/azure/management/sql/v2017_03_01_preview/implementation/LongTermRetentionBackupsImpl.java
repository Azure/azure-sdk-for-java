/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.LongTermRetentionBackups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.LongTermRetentionBackup;

class LongTermRetentionBackupsImpl extends WrapperImpl<LongTermRetentionBackupsInner> implements LongTermRetentionBackups {
    private final SqlManager manager;

    LongTermRetentionBackupsImpl(SqlManager manager) {
        super(manager.inner().longTermRetentionBackups());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private LongTermRetentionBackupImpl wrapModel(LongTermRetentionBackupInner inner) {
        return  new LongTermRetentionBackupImpl(inner, manager());
    }

    @Override
    public Observable<LongTermRetentionBackup> listByResourceGroupLocationAsync(final String resourceGroupName, final String locationName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.listByResourceGroupLocationAsync(resourceGroupName, locationName)
        .flatMapIterable(new Func1<Page<LongTermRetentionBackupInner>, Iterable<LongTermRetentionBackupInner>>() {
            @Override
            public Iterable<LongTermRetentionBackupInner> call(Page<LongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LongTermRetentionBackupInner, LongTermRetentionBackup>() {
            @Override
            public LongTermRetentionBackup call(LongTermRetentionBackupInner inner) {
                return new LongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<LongTermRetentionBackup> listByResourceGroupServerAsync(final String resourceGroupName, final String locationName, final String longTermRetentionServerName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.listByResourceGroupServerAsync(resourceGroupName, locationName, longTermRetentionServerName)
        .flatMapIterable(new Func1<Page<LongTermRetentionBackupInner>, Iterable<LongTermRetentionBackupInner>>() {
            @Override
            public Iterable<LongTermRetentionBackupInner> call(Page<LongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LongTermRetentionBackupInner, LongTermRetentionBackup>() {
            @Override
            public LongTermRetentionBackup call(LongTermRetentionBackupInner inner) {
                return new LongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<LongTermRetentionBackup> getAsync(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.getAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName)
        .map(new Func1<LongTermRetentionBackupInner, LongTermRetentionBackup>() {
            @Override
            public LongTermRetentionBackup call(LongTermRetentionBackupInner inner) {
                return new LongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.deleteAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).toCompletable();
    }

    @Override
    public Observable<LongTermRetentionBackup> listByDatabaseAsync(final String locationName, final String longTermRetentionServerName, final String longTermRetentionDatabaseName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.listByDatabaseAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName)
        .flatMapIterable(new Func1<Page<LongTermRetentionBackupInner>, Iterable<LongTermRetentionBackupInner>>() {
            @Override
            public Iterable<LongTermRetentionBackupInner> call(Page<LongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LongTermRetentionBackupInner, LongTermRetentionBackup>() {
            @Override
            public LongTermRetentionBackup call(LongTermRetentionBackupInner inner) {
                return new LongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<LongTermRetentionBackup> listByLocationAsync(final String locationName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.listByLocationAsync(locationName)
        .flatMapIterable(new Func1<Page<LongTermRetentionBackupInner>, Iterable<LongTermRetentionBackupInner>>() {
            @Override
            public Iterable<LongTermRetentionBackupInner> call(Page<LongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LongTermRetentionBackupInner, LongTermRetentionBackup>() {
            @Override
            public LongTermRetentionBackup call(LongTermRetentionBackupInner inner) {
                return new LongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<LongTermRetentionBackup> listByServerAsync(final String locationName, final String longTermRetentionServerName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.listByServerAsync(locationName, longTermRetentionServerName)
        .flatMapIterable(new Func1<Page<LongTermRetentionBackupInner>, Iterable<LongTermRetentionBackupInner>>() {
            @Override
            public Iterable<LongTermRetentionBackupInner> call(Page<LongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LongTermRetentionBackupInner, LongTermRetentionBackup>() {
            @Override
            public LongTermRetentionBackup call(LongTermRetentionBackupInner inner) {
                return new LongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<LongTermRetentionBackup> listByResourceGroupDatabaseAsync(final String resourceGroupName, final String locationName, final String longTermRetentionServerName, final String longTermRetentionDatabaseName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.listByResourceGroupDatabaseAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName)
        .flatMapIterable(new Func1<Page<LongTermRetentionBackupInner>, Iterable<LongTermRetentionBackupInner>>() {
            @Override
            public Iterable<LongTermRetentionBackupInner> call(Page<LongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LongTermRetentionBackupInner, LongTermRetentionBackup>() {
            @Override
            public LongTermRetentionBackup call(LongTermRetentionBackupInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<LongTermRetentionBackup> getByResourceGroupAsync(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName)
        .flatMap(new Func1<LongTermRetentionBackupInner, Observable<LongTermRetentionBackup>>() {
            @Override
            public Observable<LongTermRetentionBackup> call(LongTermRetentionBackupInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((LongTermRetentionBackup)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteByResourceGroupAsync(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName) {
        LongTermRetentionBackupsInner client = this.inner();
        return client.deleteByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).toCompletable();
    }

}
