/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicy;

class ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesImpl extends WrapperImpl<ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesInner> implements ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies {
    private final SqlManager manager;

    ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesImpl(SqlManager manager) {
        super(manager.inner().managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicyImpl define(String name) {
        return wrapModel(name);
    }

    private RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicyImpl wrapModel(ManagedBackupShortTermRetentionPolicyInner inner) {
        return  new RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicyImpl(inner, manager());
    }

    private RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicyImpl wrapModel(String name) {
        return new RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicyImpl(name, this.manager());
    }

    @Override
    public Observable<RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicy> listByRestorableDroppedDatabaseAsync(final String resourceGroupName, final String managedInstanceName, final String restorableDroppedDatabaseId) {
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesInner client = this.inner();
        return client.listByRestorableDroppedDatabaseAsync(resourceGroupName, managedInstanceName, restorableDroppedDatabaseId)
        .flatMapIterable(new Func1<Page<ManagedBackupShortTermRetentionPolicyInner>, Iterable<ManagedBackupShortTermRetentionPolicyInner>>() {
            @Override
            public Iterable<ManagedBackupShortTermRetentionPolicyInner> call(Page<ManagedBackupShortTermRetentionPolicyInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedBackupShortTermRetentionPolicyInner, RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicy>() {
            @Override
            public RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicy call(ManagedBackupShortTermRetentionPolicyInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicy> getAsync(String resourceGroupName, String managedInstanceName, String restorableDroppedDatabaseId) {
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName, restorableDroppedDatabaseId)
        .map(new Func1<ManagedBackupShortTermRetentionPolicyInner, RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicy>() {
            @Override
            public RestorableDroppedDatabasisManagedInstanceManagedBackupShortTermRetentionPolicy call(ManagedBackupShortTermRetentionPolicyInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
