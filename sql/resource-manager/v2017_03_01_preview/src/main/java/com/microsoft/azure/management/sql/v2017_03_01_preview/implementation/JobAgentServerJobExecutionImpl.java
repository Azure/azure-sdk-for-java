/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.management.sql.v2017_03_01_preview.JobAgentServerJobExecution;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.UUID;
import org.joda.time.DateTime;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobExecutionLifecycle;
import com.microsoft.azure.management.sql.v2017_03_01_preview.ProvisioningState;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobExecutionTarget;

class JobAgentServerJobExecutionImpl extends CreatableUpdatableImpl<JobAgentServerJobExecution, JobExecutionInner, JobAgentServerJobExecutionImpl> implements JobAgentServerJobExecution, JobAgentServerJobExecution.Definition, JobAgentServerJobExecution.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String jobAgentName;
    private String jobName;
    private UUID jobExecutionId;

    JobAgentServerJobExecutionImpl(String name, SqlManager manager) {
        super(name, new JobExecutionInner());
        this.manager = manager;
        // Set resource name
        this.jobExecutionId = name;
        //
    }

    JobAgentServerJobExecutionImpl(JobExecutionInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.jobExecutionId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.jobAgentName = IdParsingUtils.getValueFromIdByName(inner.id(), "jobAgents");
        this.jobName = IdParsingUtils.getValueFromIdByName(inner.id(), "jobs");
        this.jobExecutionId = UUID.fromString(IdParsingUtils.getValueFromIdByName(inner.id(), "executions"));
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<JobAgentServerJobExecution> createResourceAsync() {
        JobExecutionsInner client = this.manager().inner().jobExecutions();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.jobAgentName, this.jobName, this.jobExecutionId)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<JobAgentServerJobExecution> updateResourceAsync() {
        JobExecutionsInner client = this.manager().inner().jobExecutions();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.jobAgentName, this.jobName, this.jobExecutionId)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<JobExecutionInner> getInnerAsync() {
        JobExecutionsInner client = this.manager().inner().jobExecutions();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime createTime() {
        return this.inner().createTime();
    }

    @Override
    public Integer currentAttempts() {
        return this.inner().currentAttempts();
    }

    @Override
    public DateTime currentAttemptStartTime() {
        return this.inner().currentAttemptStartTime();
    }

    @Override
    public DateTime endTime() {
        return this.inner().endTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public UUID jobExecutionId() {
        return this.inner().jobExecutionId();
    }

    @Override
    public Integer jobVersion() {
        return this.inner().jobVersion();
    }

    @Override
    public String lastMessage() {
        return this.inner().lastMessage();
    }

    @Override
    public JobExecutionLifecycle lifecycle() {
        return this.inner().lifecycle();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public Integer stepId() {
        return this.inner().stepId();
    }

    @Override
    public String stepName() {
        return this.inner().stepName();
    }

    @Override
    public JobExecutionTarget target() {
        return this.inner().target();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public JobAgentServerJobExecutionImpl withExistingJobAgent(String resourceGroupName, String serverName, String jobAgentName, String jobName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.jobAgentName = jobAgentName;
        this.jobName = jobName;
        return this;
    }

}
