/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.RestorableDroppedManagedDatabases;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2017_03_01_preview.RestorableDroppedManagedDatabase;
import com.microsoft.azure.Page;

class RestorableDroppedManagedDatabasesImpl extends WrapperImpl<RestorableDroppedManagedDatabasesInner> implements RestorableDroppedManagedDatabases {
    private final SqlManager manager;

    RestorableDroppedManagedDatabasesImpl(SqlManager manager) {
        super(manager.inner().restorableDroppedManagedDatabases());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private RestorableDroppedManagedDatabaseImpl wrapRestorableDroppedManagedDatabaseModel(RestorableDroppedManagedDatabaseInner inner) {
        return  new RestorableDroppedManagedDatabaseImpl(inner, manager());
    }

    private Observable<RestorableDroppedManagedDatabaseInner> getRestorableDroppedManagedDatabaseInnerUsingRestorableDroppedManagedDatabasesInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String managedInstanceName = IdParsingUtils.getValueFromIdByName(id, "managedInstances");
        String restorableDroppedDatabaseId = IdParsingUtils.getValueFromIdByName(id, "restorableDroppedDatabases");
        RestorableDroppedManagedDatabasesInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName, restorableDroppedDatabaseId);
    }

    @Override
    public Observable<RestorableDroppedManagedDatabase> getAsync(String resourceGroupName, String managedInstanceName, String restorableDroppedDatabaseId) {
        RestorableDroppedManagedDatabasesInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName, restorableDroppedDatabaseId)
        .flatMap(new Func1<RestorableDroppedManagedDatabaseInner, Observable<RestorableDroppedManagedDatabase>>() {
            @Override
            public Observable<RestorableDroppedManagedDatabase> call(RestorableDroppedManagedDatabaseInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RestorableDroppedManagedDatabase)wrapRestorableDroppedManagedDatabaseModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<RestorableDroppedManagedDatabase> listByInstanceAsync(final String resourceGroupName, final String managedInstanceName) {
        RestorableDroppedManagedDatabasesInner client = this.inner();
        return client.listByInstanceAsync(resourceGroupName, managedInstanceName)
        .flatMapIterable(new Func1<Page<RestorableDroppedManagedDatabaseInner>, Iterable<RestorableDroppedManagedDatabaseInner>>() {
            @Override
            public Iterable<RestorableDroppedManagedDatabaseInner> call(Page<RestorableDroppedManagedDatabaseInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RestorableDroppedManagedDatabaseInner, RestorableDroppedManagedDatabase>() {
            @Override
            public RestorableDroppedManagedDatabase call(RestorableDroppedManagedDatabaseInner inner) {
                return wrapRestorableDroppedManagedDatabaseModel(inner);
            }
        });
    }

}
