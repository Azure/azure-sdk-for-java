/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstances;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstance;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2018_06_01_preview.MetricDefinition;
import com.microsoft.azure.management.sql.v2018_06_01_preview.Metric;

class ManagedInstancesImpl extends GroupableResourcesCoreImpl<ManagedInstance, ManagedInstanceImpl, ManagedInstanceInner, ManagedInstancesInner, SqlManager>  implements ManagedInstances {
    protected ManagedInstancesImpl(SqlManager manager) {
        super(manager.inner().managedInstances(), manager);
    }

    @Override
    protected Observable<ManagedInstanceInner> getInnerAsync(String resourceGroupName, String name) {
        ManagedInstancesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        ManagedInstancesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<ManagedInstance> listByResourceGroup(String resourceGroupName) {
        ManagedInstancesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<ManagedInstance> listByResourceGroupAsync(String resourceGroupName) {
        ManagedInstancesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<ManagedInstanceInner>, Iterable<ManagedInstanceInner>>() {
            @Override
            public Iterable<ManagedInstanceInner> call(Page<ManagedInstanceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceInner, ManagedInstance>() {
            @Override
            public ManagedInstance call(ManagedInstanceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<ManagedInstance> list() {
        ManagedInstancesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<ManagedInstance> listAsync() {
        ManagedInstancesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ManagedInstanceInner>, Iterable<ManagedInstanceInner>>() {
            @Override
            public Iterable<ManagedInstanceInner> call(Page<ManagedInstanceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceInner, ManagedInstance>() {
            @Override
            public ManagedInstance call(ManagedInstanceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public ManagedInstanceImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<ManagedInstance> listByInstancePoolAsync(final String resourceGroupName, final String instancePoolName) {
        ManagedInstancesInner client = this.inner();
        return client.listByInstancePoolAsync(resourceGroupName, instancePoolName)
        .flatMapIterable(new Func1<Page<ManagedInstanceInner>, Iterable<ManagedInstanceInner>>() {
            @Override
            public Iterable<ManagedInstanceInner> call(Page<ManagedInstanceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceInner, ManagedInstance>() {
            @Override
            public ManagedInstance call(ManagedInstanceInner inner) {
                return new ManagedInstanceImpl(inner.name(), inner, manager());
            }
        });
    }

    @Override
    protected ManagedInstanceImpl wrapModel(ManagedInstanceInner inner) {
        return  new ManagedInstanceImpl(inner.name(), inner, manager());
    }

    @Override
    protected ManagedInstanceImpl wrapModel(String name) {
        return new ManagedInstanceImpl(name, new ManagedInstanceInner(), this.manager());
    }

    private MetricDefinitionImpl wrapMetricDefinitionModel(MetricDefinitionInner inner) {
        return  new MetricDefinitionImpl(inner, manager());
    }

    private MetricImpl wrapMetricModel(MetricInner inner) {
        return  new MetricImpl(inner, manager());
    }

    @Override
    public Observable<MetricDefinition> listMetricDefinitionsAsync(final String resourceGroupName, final String managedInstanceName) {
        ManagedInstancesInner client = this.inner();
        return client.listMetricDefinitionsAsync(resourceGroupName, managedInstanceName)
        .flatMapIterable(new Func1<Page<MetricDefinitionInner>, Iterable<MetricDefinitionInner>>() {
            @Override
            public Iterable<MetricDefinitionInner> call(Page<MetricDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MetricDefinitionInner, MetricDefinition>() {
            @Override
            public MetricDefinition call(MetricDefinitionInner inner) {
                return wrapMetricDefinitionModel(inner);
            }
        });
    }

    @Override
    public Observable<Metric> listMetricsAsync(final String resourceGroupName, final String managedInstanceName) {
        ManagedInstancesInner client = this.inner();
        return client.listMetricsAsync(resourceGroupName, managedInstanceName)
        .flatMapIterable(new Func1<Page<MetricInner>, Iterable<MetricInner>>() {
            @Override
            public Iterable<MetricInner> call(Page<MetricInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MetricInner, Metric>() {
            @Override
            public Metric call(MetricInner inner) {
                return wrapMetricModel(inner);
            }
        });
    }

}
