/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedDatabaseSensitivityLabels;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2018_06_01_preview.SensitivityLabels;
import rx.Completable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2018_06_01_preview.CurrentSensitivityLabels;
import com.microsoft.azure.management.sql.v2018_06_01_preview.RecommendedSensitivityLabels;

class ManagedDatabaseSensitivityLabelsImpl extends WrapperImpl<ManagedDatabaseSensitivityLabelsInner> implements ManagedDatabaseSensitivityLabels {
    private final SqlManager manager;

    ManagedDatabaseSensitivityLabelsImpl(SqlManager manager) {
        super(manager.inner().managedDatabaseSensitivityLabels());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public SensitivityLabelsImpl defineSensitivityLabel(String name) {
        return wrapSensitivityLabelModel(name);
    }

    private SensitivityLabelsImpl wrapSensitivityLabelModel(String name) {
        return new SensitivityLabelsImpl(name, this.manager());
    }

    private SensitivityLabelsImpl wrapSensitivityLabelsModel(SensitivityLabelInner inner) {
        return  new SensitivityLabelsImpl(inner, manager());
    }

    private CurrentSensitivityLabelsImpl wrapCurrentSensitivityLabelsModel(SensitivityLabelInner inner) {
        return  new CurrentSensitivityLabelsImpl(inner, manager());
    }

    private RecommendedSensitivityLabelsImpl wrapRecommendedSensitivityLabelsModel(SensitivityLabelInner inner) {
        return  new RecommendedSensitivityLabelsImpl(inner, manager());
    }

    private Observable<SensitivityLabelInner> getSensitivityLabelInnerUsingManagedDatabaseSensitivityLabelsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String managedInstanceName = IdParsingUtils.getValueFromIdByName(id, "managedInstances");
        String databaseName = IdParsingUtils.getValueFromIdByName(id, "databases");
        String schemaName = IdParsingUtils.getValueFromIdByName(id, "schemas");
        String tableName = IdParsingUtils.getValueFromIdByName(id, "tables");
        String columnName = IdParsingUtils.getValueFromIdByName(id, "columns");
        String sensitivityLabelSource = SensitivityLabelSource.valueOf(IdParsingUtils.getValueFromIdByName(id, "sensitivityLabels"));
        ManagedDatabaseSensitivityLabelsInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, sensitivityLabelSource);
    }

    @Override
    public Observable<SensitivityLabels> getAsync(String resourceGroupName, String managedInstanceName, String databaseName, String schemaName, String tableName, String columnName, SensitivityLabelSource sensitivityLabelSource) {
        ManagedDatabaseSensitivityLabelsInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, sensitivityLabelSource)
        .map(new Func1<SensitivityLabelInner, SensitivityLabels>() {
            @Override
            public SensitivityLabels call(SensitivityLabelInner inner) {
                return wrapSensitivityLabelsModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String managedInstanceName, String databaseName, String schemaName, String tableName, String columnName) {
        ManagedDatabaseSensitivityLabelsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName).toCompletable();
    }

    @Override
    public Completable disableRecommendationAsync(String resourceGroupName, String managedInstanceName, String databaseName, String schemaName, String tableName, String columnName) {
        ManagedDatabaseSensitivityLabelsInner client = this.inner();
        return client.disableRecommendationAsync(resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName).toCompletable();
    }

    @Override
    public Completable enableRecommendationAsync(String resourceGroupName, String managedInstanceName, String databaseName, String schemaName, String tableName, String columnName) {
        ManagedDatabaseSensitivityLabelsInner client = this.inner();
        return client.enableRecommendationAsync(resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName).toCompletable();
    }

    @Override
    public Observable<CurrentSensitivityLabels> listCurrentByDatabaseAsync(final String resourceGroupName, final String managedInstanceName, final String databaseName) {
        ManagedDatabaseSensitivityLabelsInner client = this.inner();
        return client.listCurrentByDatabaseAsync(resourceGroupName, managedInstanceName, databaseName)
        .flatMapIterable(new Func1<Page<SensitivityLabelInner>, Iterable<SensitivityLabelInner>>() {
            @Override
            public Iterable<SensitivityLabelInner> call(Page<SensitivityLabelInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SensitivityLabelInner, CurrentSensitivityLabels>() {
            @Override
            public CurrentSensitivityLabels call(SensitivityLabelInner inner) {
                return wrapCurrentSensitivityLabelsModel(inner);
            }
        });
    }

    @Override
    public Observable<RecommendedSensitivityLabels> listRecommendedByDatabaseAsync(final String resourceGroupName, final String managedInstanceName, final String databaseName) {
        ManagedDatabaseSensitivityLabelsInner client = this.inner();
        return client.listRecommendedByDatabaseAsync(resourceGroupName, managedInstanceName, databaseName)
        .flatMapIterable(new Func1<Page<SensitivityLabelInner>, Iterable<SensitivityLabelInner>>() {
            @Override
            public Iterable<SensitivityLabelInner> call(Page<SensitivityLabelInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SensitivityLabelInner, RecommendedSensitivityLabels>() {
            @Override
            public RecommendedSensitivityLabels call(SensitivityLabelInner inner) {
                return wrapRecommendedSensitivityLabelsModel(inner);
            }
        });
    }

}
