/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_10_01_preview.RecoverableManagedDatabases;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_10_01_preview.RecoverableManagedDatabase;

class RecoverableManagedDatabasesImpl extends WrapperImpl<RecoverableManagedDatabasesInner> implements RecoverableManagedDatabases {
    private final SqlManager manager;

    RecoverableManagedDatabasesImpl(SqlManager manager) {
        super(manager.inner().recoverableManagedDatabases());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private RecoverableManagedDatabaseImpl wrapModel(RecoverableManagedDatabaseInner inner) {
        return  new RecoverableManagedDatabaseImpl(inner, manager());
    }

    @Override
    public Observable<RecoverableManagedDatabase> listByInstanceAsync(final String resourceGroupName, final String managedInstanceName) {
        RecoverableManagedDatabasesInner client = this.inner();
        return client.listByInstanceAsync(resourceGroupName, managedInstanceName)
        .flatMapIterable(new Func1<Page<RecoverableManagedDatabaseInner>, Iterable<RecoverableManagedDatabaseInner>>() {
            @Override
            public Iterable<RecoverableManagedDatabaseInner> call(Page<RecoverableManagedDatabaseInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RecoverableManagedDatabaseInner, RecoverableManagedDatabase>() {
            @Override
            public RecoverableManagedDatabase call(RecoverableManagedDatabaseInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RecoverableManagedDatabase> getAsync(String resourceGroupName, String managedInstanceName, String recoverableDatabaseName) {
        RecoverableManagedDatabasesInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName, recoverableDatabaseName)
        .map(new Func1<RecoverableManagedDatabaseInner, RecoverableManagedDatabase>() {
            @Override
            public RecoverableManagedDatabase call(RecoverableManagedDatabaseInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
