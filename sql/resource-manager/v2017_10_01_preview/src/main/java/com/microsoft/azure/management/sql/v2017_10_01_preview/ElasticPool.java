/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2017_10_01_preview.implementation.ElasticPoolInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2017_10_01_preview.implementation.SqlManager;
import java.util.Map;
import org.joda.time.DateTime;

/**
 * Type representing ElasticPool.
 */
public interface ElasticPool extends HasInner<ElasticPoolInner>, Indexable, Refreshable<ElasticPool>, Updatable<ElasticPool.Update>, HasManager<SqlManager> {
    /**
     * @return the creationDate value.
     */
    DateTime creationDate();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the licenseType value.
     */
    ElasticPoolLicenseType licenseType();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the maxSizeBytes value.
     */
    Long maxSizeBytes();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the perDatabaseSettings value.
     */
    ElasticPoolPerDatabaseSettings perDatabaseSettings();

    /**
     * @return the sku value.
     */
    Sku sku();

    /**
     * @return the state value.
     */
    ElasticPoolState state();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * The entirety of the ElasticPool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithServer, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ElasticPool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ElasticPool definition.
         */
        interface Blank extends WithServer {
        }

        /**
         * The stage of the elasticpool definition allowing to specify Server.
         */
        interface WithServer {
           /**
            * Specifies resourceGroupName, serverName.
            */
            WithLocation withExistingServer(String resourceGroupName, String serverName);
        }

        /**
         * The stage of the elasticpool definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the elasticpool definition allowing to specify LicenseType.
         */
        interface WithLicenseType {
            /**
             * Specifies licenseType.
             */
            WithCreate withLicenseType(ElasticPoolLicenseType licenseType);
        }

        /**
         * The stage of the elasticpool definition allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             */
            WithCreate withMaxSizeBytes(Long maxSizeBytes);
        }

        /**
         * The stage of the elasticpool definition allowing to specify PerDatabaseSettings.
         */
        interface WithPerDatabaseSettings {
            /**
             * Specifies perDatabaseSettings.
             */
            WithCreate withPerDatabaseSettings(ElasticPoolPerDatabaseSettings perDatabaseSettings);
        }

        /**
         * The stage of the elasticpool definition allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             */
            WithCreate withSku(Sku sku);
        }

        /**
         * The stage of the elasticpool definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the elasticpool definition allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ElasticPool>, DefinitionStages.WithLicenseType, DefinitionStages.WithMaxSizeBytes, DefinitionStages.WithPerDatabaseSettings, DefinitionStages.WithSku, DefinitionStages.WithTags, DefinitionStages.WithZoneRedundant {
        }
    }
    /**
     * The template for a ElasticPool update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ElasticPool>, UpdateStages.WithLicenseType, UpdateStages.WithMaxSizeBytes, UpdateStages.WithPerDatabaseSettings, UpdateStages.WithSku, UpdateStages.WithTags, UpdateStages.WithZoneRedundant {
    }

    /**
     * Grouping of ElasticPool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the elasticpool update allowing to specify LicenseType.
         */
        interface WithLicenseType {
            /**
             * Specifies licenseType.
             */
            Update withLicenseType(ElasticPoolLicenseType licenseType);
        }

        /**
         * The stage of the elasticpool update allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             */
            Update withMaxSizeBytes(Long maxSizeBytes);
        }

        /**
         * The stage of the elasticpool update allowing to specify PerDatabaseSettings.
         */
        interface WithPerDatabaseSettings {
            /**
             * Specifies perDatabaseSettings.
             */
            Update withPerDatabaseSettings(ElasticPoolPerDatabaseSettings perDatabaseSettings);
        }

        /**
         * The stage of the elasticpool update allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             */
            Update withSku(Sku sku);
        }

        /**
         * The stage of the elasticpool update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the elasticpool update allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }

    }
}
