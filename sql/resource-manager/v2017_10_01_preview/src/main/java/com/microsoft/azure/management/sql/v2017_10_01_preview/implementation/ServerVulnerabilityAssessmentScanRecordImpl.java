/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.management.sql.v2017_10_01_preview.ServerVulnerabilityAssessmentScanRecord;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.sql.v2017_10_01_preview.VulnerabilityAssessmentScanError;
import com.microsoft.azure.management.sql.v2017_10_01_preview.VulnerabilityAssessmentScanState;
import com.microsoft.azure.management.sql.v2017_10_01_preview.VulnerabilityAssessmentScanTriggerType;

class ServerVulnerabilityAssessmentScanRecordImpl extends IndexableRefreshableWrapperImpl<ServerVulnerabilityAssessmentScanRecord, VulnerabilityAssessmentScanRecordInner> implements ServerVulnerabilityAssessmentScanRecord {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String databaseName;
    private String scanId;

    ServerVulnerabilityAssessmentScanRecordImpl(VulnerabilityAssessmentScanRecordInner inner,  SqlManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.scanId = IdParsingUtils.getValueFromIdByName(inner.id(), "scans");
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<VulnerabilityAssessmentScanRecordInner> getInnerAsync() {
        DatabaseVulnerabilityAssessmentScansInner client = this.manager().inner().databaseVulnerabilityAssessmentScans();
        return client.getAsync(this.resourceGroupName, this.serverName, this.databaseName, this.scanId);
    }



    @Override
    public DateTime endTime() {
        return this.inner().endTime();
    }

    @Override
    public List<VulnerabilityAssessmentScanError> errors() {
        return this.inner().errors();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer numberOfFailedSecurityChecks() {
        return this.inner().numberOfFailedSecurityChecks();
    }

    @Override
    public String scanId() {
        return this.inner().scanId();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public VulnerabilityAssessmentScanState state() {
        return this.inner().state();
    }

    @Override
    public String storageContainerPath() {
        return this.inner().storageContainerPath();
    }

    @Override
    public VulnerabilityAssessmentScanTriggerType triggerType() {
        return this.inner().triggerType();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
