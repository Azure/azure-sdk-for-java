/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.management.sql.v2017_10_01_preview.InterfaceEndpointProfile;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2017_10_01_preview.InterfaceEndpointProfileStateType;

class InterfaceEndpointProfileImpl extends CreatableUpdatableImpl<InterfaceEndpointProfile, InterfaceEndpointProfileInner, InterfaceEndpointProfileImpl> implements InterfaceEndpointProfile, InterfaceEndpointProfile.Definition, InterfaceEndpointProfile.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String interfaceEndpointProfileName;
    private String cvirtualNetworkSubnetId;
    private String uvirtualNetworkSubnetId;

    InterfaceEndpointProfileImpl(String name, SqlManager manager) {
        super(name, new InterfaceEndpointProfileInner());
        this.manager = manager;
        // Set resource name
        this.interfaceEndpointProfileName = name;
        //
    }

    InterfaceEndpointProfileImpl(InterfaceEndpointProfileInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.interfaceEndpointProfileName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.interfaceEndpointProfileName = IdParsingUtils.getValueFromIdByName(inner.id(), "interfaceEndpointProfiles");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<InterfaceEndpointProfile> createResourceAsync() {
        InterfaceEndpointProfilesInner client = this.manager().inner().interfaceEndpointProfiles();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.interfaceEndpointProfileName, this.cvirtualNetworkSubnetId)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<InterfaceEndpointProfile> updateResourceAsync() {
        InterfaceEndpointProfilesInner client = this.manager().inner().interfaceEndpointProfiles();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.interfaceEndpointProfileName, this.uvirtualNetworkSubnetId)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<InterfaceEndpointProfileInner> getInnerAsync() {
        InterfaceEndpointProfilesInner client = this.manager().inner().interfaceEndpointProfiles();
        return client.getAsync(this.resourceGroupName, this.serverName, this.interfaceEndpointProfileName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String privateIp() {
        return this.inner().privateIp();
    }

    @Override
    public InterfaceEndpointProfileStateType state() {
        return this.inner().state();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String virtualNetworkSubnetId() {
        return this.inner().virtualNetworkSubnetId();
    }

    @Override
    public InterfaceEndpointProfileImpl withExistingServer(String resourceGroupName, String serverName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        return this;
    }

    @Override
    public InterfaceEndpointProfileImpl withVirtualNetworkSubnetId(String virtualNetworkSubnetId) {
        if (isInCreateMode()) {
            this.cvirtualNetworkSubnetId = virtualNetworkSubnetId;
        } else {
            this.uvirtualNetworkSubnetId = virtualNetworkSubnetId;
        }
        return this;
    }

}
