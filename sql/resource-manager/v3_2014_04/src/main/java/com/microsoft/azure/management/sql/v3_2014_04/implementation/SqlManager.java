/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v3_2014_04.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.sql.v3_2014_04.RecoverableDatabases;
import com.microsoft.azure.management.sql.v3_2014_04.RestorableDroppedDatabases;
import com.microsoft.azure.management.sql.v3_2014_04.Servers;
import com.microsoft.azure.management.sql.v3_2014_04.ServerConnectionPolicies;
import com.microsoft.azure.management.sql.v3_2014_04.DatabaseThreatDetectionPolicies;
import com.microsoft.azure.management.sql.v3_2014_04.DataMaskingPolicies;
import com.microsoft.azure.management.sql.v3_2014_04.DataMaskingRules;
import com.microsoft.azure.management.sql.v3_2014_04.FirewallRules;
import com.microsoft.azure.management.sql.v3_2014_04.GeoBackupPolicies;
import com.microsoft.azure.management.sql.v3_2014_04.Databases;
import com.microsoft.azure.management.sql.v3_2014_04.ElasticPools;
import com.microsoft.azure.management.sql.v3_2014_04.RecommendedElasticPools;
import com.microsoft.azure.management.sql.v3_2014_04.ReplicationLinks;
import com.microsoft.azure.management.sql.v3_2014_04.ServerAzureADAdministrators;
import com.microsoft.azure.management.sql.v3_2014_04.ServerCommunicationLinks;
import com.microsoft.azure.management.sql.v3_2014_04.ServiceObjectives;
import com.microsoft.azure.management.sql.v3_2014_04.ElasticPoolActivities;
import com.microsoft.azure.management.sql.v3_2014_04.ElasticPoolDatabaseActivities;
import com.microsoft.azure.management.sql.v3_2014_04.ServiceTierAdvisors;
import com.microsoft.azure.management.sql.v3_2014_04.TransparentDataEncryptions;
import com.microsoft.azure.management.sql.v3_2014_04.TransparentDataEncryptionActivities;
import com.microsoft.azure.management.sql.v3_2014_04.ServerUsages;
import com.microsoft.azure.management.sql.v3_2014_04.DatabaseUsages;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Sql resource management.
 */
public final class SqlManager extends ManagerCore<SqlManager, SqlManagementClientImpl> {
    private RecoverableDatabases recoverableDatabases;
    private RestorableDroppedDatabases restorableDroppedDatabases;
    private Servers servers;
    private ServerConnectionPolicies serverConnectionPolicies;
    private DatabaseThreatDetectionPolicies databaseThreatDetectionPolicies;
    private DataMaskingPolicies dataMaskingPolicies;
    private DataMaskingRules dataMaskingRules;
    private FirewallRules firewallRules;
    private GeoBackupPolicies geoBackupPolicies;
    private Databases databases;
    private ElasticPools elasticPools;
    private RecommendedElasticPools recommendedElasticPools;
    private ReplicationLinks replicationLinks;
    private ServerAzureADAdministrators serverAzureADAdministrators;
    private ServerCommunicationLinks serverCommunicationLinks;
    private ServiceObjectives serviceObjectives;
    private ElasticPoolActivities elasticPoolActivities;
    private ElasticPoolDatabaseActivities elasticPoolDatabaseActivities;
    private ServiceTierAdvisors serviceTierAdvisors;
    private TransparentDataEncryptions transparentDataEncryptions;
    private TransparentDataEncryptionActivities transparentDataEncryptionActivities;
    private ServerUsages serverUsages;
    private DatabaseUsages databaseUsages;
    /**
    * Get a Configurable instance that can be used to create SqlManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new SqlManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of SqlManager that exposes Sql resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the SqlManager
    */
    public static SqlManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new SqlManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of SqlManager that exposes Sql resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the SqlManager
    */
    public static SqlManager authenticate(RestClient restClient, String subscriptionId) {
        return new SqlManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of SqlManager that exposes Sql management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Sql management API entry points that work across subscriptions
        */
        SqlManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage RecoverableDatabases.
     */
    public RecoverableDatabases recoverableDatabases() {
        if (this.recoverableDatabases == null) {
            this.recoverableDatabases = new RecoverableDatabasesImpl(this);
        }
        return this.recoverableDatabases;
    }

    /**
     * @return Entry point to manage RestorableDroppedDatabases.
     */
    public RestorableDroppedDatabases restorableDroppedDatabases() {
        if (this.restorableDroppedDatabases == null) {
            this.restorableDroppedDatabases = new RestorableDroppedDatabasesImpl(this);
        }
        return this.restorableDroppedDatabases;
    }

    /**
     * @return Entry point to manage Servers.
     */
    public Servers servers() {
        if (this.servers == null) {
            this.servers = new ServersImpl(this);
        }
        return this.servers;
    }

    /**
     * @return Entry point to manage ServerConnectionPolicies.
     */
    public ServerConnectionPolicies serverConnectionPolicies() {
        if (this.serverConnectionPolicies == null) {
            this.serverConnectionPolicies = new ServerConnectionPoliciesImpl(this);
        }
        return this.serverConnectionPolicies;
    }

    /**
     * @return Entry point to manage DatabaseThreatDetectionPolicies.
     */
    public DatabaseThreatDetectionPolicies databaseThreatDetectionPolicies() {
        if (this.databaseThreatDetectionPolicies == null) {
            this.databaseThreatDetectionPolicies = new DatabaseThreatDetectionPoliciesImpl(this);
        }
        return this.databaseThreatDetectionPolicies;
    }

    /**
     * @return Entry point to manage DataMaskingPolicies.
     */
    public DataMaskingPolicies dataMaskingPolicies() {
        if (this.dataMaskingPolicies == null) {
            this.dataMaskingPolicies = new DataMaskingPoliciesImpl(this);
        }
        return this.dataMaskingPolicies;
    }

    /**
     * @return Entry point to manage DataMaskingRules.
     */
    public DataMaskingRules dataMaskingRules() {
        if (this.dataMaskingRules == null) {
            this.dataMaskingRules = new DataMaskingRulesImpl(this);
        }
        return this.dataMaskingRules;
    }

    /**
     * @return Entry point to manage FirewallRules.
     */
    public FirewallRules firewallRules() {
        if (this.firewallRules == null) {
            this.firewallRules = new FirewallRulesImpl(this);
        }
        return this.firewallRules;
    }

    /**
     * @return Entry point to manage GeoBackupPolicies.
     */
    public GeoBackupPolicies geoBackupPolicies() {
        if (this.geoBackupPolicies == null) {
            this.geoBackupPolicies = new GeoBackupPoliciesImpl(this);
        }
        return this.geoBackupPolicies;
    }

    /**
     * @return Entry point to manage Databases.
     */
    public Databases databases() {
        if (this.databases == null) {
            this.databases = new DatabasesImpl(this);
        }
        return this.databases;
    }

    /**
     * @return Entry point to manage ElasticPools.
     */
    public ElasticPools elasticPools() {
        if (this.elasticPools == null) {
            this.elasticPools = new ElasticPoolsImpl(this);
        }
        return this.elasticPools;
    }

    /**
     * @return Entry point to manage RecommendedElasticPools.
     */
    public RecommendedElasticPools recommendedElasticPools() {
        if (this.recommendedElasticPools == null) {
            this.recommendedElasticPools = new RecommendedElasticPoolsImpl(this);
        }
        return this.recommendedElasticPools;
    }

    /**
     * @return Entry point to manage ReplicationLinks.
     */
    public ReplicationLinks replicationLinks() {
        if (this.replicationLinks == null) {
            this.replicationLinks = new ReplicationLinksImpl(this);
        }
        return this.replicationLinks;
    }

    /**
     * @return Entry point to manage ServerAzureADAdministrators.
     */
    public ServerAzureADAdministrators serverAzureADAdministrators() {
        if (this.serverAzureADAdministrators == null) {
            this.serverAzureADAdministrators = new ServerAzureADAdministratorsImpl(this);
        }
        return this.serverAzureADAdministrators;
    }

    /**
     * @return Entry point to manage ServerCommunicationLinks.
     */
    public ServerCommunicationLinks serverCommunicationLinks() {
        if (this.serverCommunicationLinks == null) {
            this.serverCommunicationLinks = new ServerCommunicationLinksImpl(this);
        }
        return this.serverCommunicationLinks;
    }

    /**
     * @return Entry point to manage ServiceObjectives.
     */
    public ServiceObjectives serviceObjectives() {
        if (this.serviceObjectives == null) {
            this.serviceObjectives = new ServiceObjectivesImpl(this);
        }
        return this.serviceObjectives;
    }

    /**
     * @return Entry point to manage ElasticPoolActivities.
     */
    public ElasticPoolActivities elasticPoolActivities() {
        if (this.elasticPoolActivities == null) {
            this.elasticPoolActivities = new ElasticPoolActivitiesImpl(this);
        }
        return this.elasticPoolActivities;
    }

    /**
     * @return Entry point to manage ElasticPoolDatabaseActivities.
     */
    public ElasticPoolDatabaseActivities elasticPoolDatabaseActivities() {
        if (this.elasticPoolDatabaseActivities == null) {
            this.elasticPoolDatabaseActivities = new ElasticPoolDatabaseActivitiesImpl(this);
        }
        return this.elasticPoolDatabaseActivities;
    }

    /**
     * @return Entry point to manage ServiceTierAdvisors.
     */
    public ServiceTierAdvisors serviceTierAdvisors() {
        if (this.serviceTierAdvisors == null) {
            this.serviceTierAdvisors = new ServiceTierAdvisorsImpl(this);
        }
        return this.serviceTierAdvisors;
    }

    /**
     * @return Entry point to manage TransparentDataEncryptions.
     */
    public TransparentDataEncryptions transparentDataEncryptions() {
        if (this.transparentDataEncryptions == null) {
            this.transparentDataEncryptions = new TransparentDataEncryptionsImpl(this);
        }
        return this.transparentDataEncryptions;
    }

    /**
     * @return Entry point to manage TransparentDataEncryptionActivities.
     */
    public TransparentDataEncryptionActivities transparentDataEncryptionActivities() {
        if (this.transparentDataEncryptionActivities == null) {
            this.transparentDataEncryptionActivities = new TransparentDataEncryptionActivitiesImpl(this);
        }
        return this.transparentDataEncryptionActivities;
    }

    /**
     * @return Entry point to manage ServerUsages.
     */
    public ServerUsages serverUsages() {
        if (this.serverUsages == null) {
            this.serverUsages = new ServerUsagesImpl(this);
        }
        return this.serverUsages;
    }

    /**
     * @return Entry point to manage DatabaseUsages.
     */
    public DatabaseUsages databaseUsages() {
        if (this.databaseUsages == null) {
            this.databaseUsages = new DatabaseUsagesImpl(this);
        }
        return this.databaseUsages;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public SqlManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return SqlManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private SqlManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new SqlManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
