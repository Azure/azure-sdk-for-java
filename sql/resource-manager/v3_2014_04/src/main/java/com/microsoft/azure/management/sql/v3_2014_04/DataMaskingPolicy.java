/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v3_2014_04;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v3_2014_04.implementation.DataMaskingPolicyInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v3_2014_04.implementation.SqlManager;

/**
 * Type representing DataMaskingPolicy.
 */
public interface DataMaskingPolicy extends HasInner<DataMaskingPolicyInner>, Indexable, Refreshable<DataMaskingPolicy>, Updatable<DataMaskingPolicy.Update>, HasManager<SqlManager> {
    /**
     * @return the applicationPrincipals value.
     */
    String applicationPrincipals();

    /**
     * @return the dataMaskingState value.
     */
    DataMaskingState dataMaskingState();

    /**
     * @return the exemptPrincipals value.
     */
    String exemptPrincipals();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the maskingLevel value.
     */
    String maskingLevel();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the DataMaskingPolicy definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDatabasis, DefinitionStages.WithDataMaskingState, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of DataMaskingPolicy definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a DataMaskingPolicy definition.
         */
        interface Blank extends WithDatabasis {
        }

        /**
         * The stage of the datamaskingpolicy definition allowing to specify Databasis.
         */
        interface WithDatabasis {
           /**
            * Specifies resourceGroupName, serverName, databaseName.
            */
            WithDataMaskingState withExistingDatabasis(String resourceGroupName, String serverName, String databaseName);
        }

        /**
         * The stage of the datamaskingpolicy definition allowing to specify DataMaskingState.
         */
        interface WithDataMaskingState {
           /**
            * Specifies dataMaskingState.
            */
            WithCreate withDataMaskingState(DataMaskingState dataMaskingState);
        }

        /**
         * The stage of the datamaskingpolicy definition allowing to specify ExemptPrincipals.
         */
        interface WithExemptPrincipals {
            /**
             * Specifies exemptPrincipals.
             */
            WithCreate withExemptPrincipals(String exemptPrincipals);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<DataMaskingPolicy>, DefinitionStages.WithExemptPrincipals {
        }
    }
    /**
     * The template for a DataMaskingPolicy update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<DataMaskingPolicy>, UpdateStages.WithExemptPrincipals {
    }

    /**
     * Grouping of DataMaskingPolicy update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the datamaskingpolicy update allowing to specify ExemptPrincipals.
         */
        interface WithExemptPrincipals {
            /**
             * Specifies exemptPrincipals.
             */
            Update withExemptPrincipals(String exemptPrincipals);
        }

    }
}
