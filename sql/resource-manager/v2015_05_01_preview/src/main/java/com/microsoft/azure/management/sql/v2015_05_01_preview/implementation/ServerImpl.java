/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.sql.v2015_05_01_preview.Server;
import rx.Observable;
import com.microsoft.azure.management.sql.v2015_05_01_preview.ServerUpdate;
import com.microsoft.azure.management.sql.v2015_05_01_preview.ResourceIdentity;
import rx.functions.Func1;

class ServerImpl extends GroupableResourceCoreImpl<Server, ServerInner, ServerImpl, SqlManager> implements Server, Server.Definition, Server.Update {
    private ServerUpdate updateParameter;
    ServerImpl(String name, ServerInner inner, SqlManager manager) {
        super(name, inner, manager);
        this.updateParameter = new ServerUpdate();
    }

    @Override
    public Observable<Server> createResourceAsync() {
        ServersInner client = this.manager().inner().servers();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<ServerInner, ServerInner>() {
               @Override
               public ServerInner call(ServerInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Server> updateResourceAsync() {
        ServersInner client = this.manager().inner().servers();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<ServerInner, ServerInner>() {
               @Override
               public ServerInner call(ServerInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ServerInner> getInnerAsync() {
        ServersInner client = this.manager().inner().servers();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new ServerUpdate();
    }

    @Override
    public String administratorLogin() {
        return this.inner().administratorLogin();
    }

    @Override
    public String administratorLoginPassword() {
        return this.inner().administratorLoginPassword();
    }

    @Override
    public String fullyQualifiedDomainName() {
        return this.inner().fullyQualifiedDomainName();
    }

    @Override
    public ResourceIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String state() {
        return this.inner().state();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public ServerImpl withIdentity(ResourceIdentity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public ServerImpl withAdministratorLogin(String administratorLogin) {
        if (isInCreateMode()) {
            this.inner().withAdministratorLogin(administratorLogin);
        } else {
            this.updateParameter.withAdministratorLogin(administratorLogin);
        }
        return this;
    }

    @Override
    public ServerImpl withAdministratorLoginPassword(String administratorLoginPassword) {
        if (isInCreateMode()) {
            this.inner().withAdministratorLoginPassword(administratorLoginPassword);
        } else {
            this.updateParameter.withAdministratorLoginPassword(administratorLoginPassword);
        }
        return this;
    }

    @Override
    public ServerImpl withVersion(String version) {
        if (isInCreateMode()) {
            this.inner().withVersion(version);
        } else {
            this.updateParameter.withVersion(version);
        }
        return this;
    }

}
