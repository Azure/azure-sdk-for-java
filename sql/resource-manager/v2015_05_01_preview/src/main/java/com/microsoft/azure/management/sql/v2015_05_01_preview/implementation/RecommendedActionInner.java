/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import org.joda.time.DateTime;
import com.microsoft.azure.management.sql.v2015_05_01_preview.RecommendedActionStateInfo;
import com.microsoft.azure.management.sql.v2015_05_01_preview.RecommendedActionInitiatedBy;
import com.microsoft.azure.management.sql.v2015_05_01_preview.RecommendedActionImplementationInfo;
import com.microsoft.azure.management.sql.v2015_05_01_preview.RecommendedActionErrorInfo;
import java.util.List;
import com.microsoft.azure.management.sql.v2015_05_01_preview.RecommendedActionImpactRecord;
import com.microsoft.azure.management.sql.v2015_05_01_preview.RecommendedActionMetricInfo;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Database, Server or Elastic Pool Recommended Action.
 */
@JsonFlatten
public class RecommendedActionInner extends ProxyResource {
    /**
     * Resource kind.
     */
    @JsonProperty(value = "kind", access = JsonProperty.Access.WRITE_ONLY)
    private String kind;

    /**
     * Resource location.
     */
    @JsonProperty(value = "location", access = JsonProperty.Access.WRITE_ONLY)
    private String location;

    /**
     * Gets the reason for recommending this action. e.g., DuplicateIndex.
     */
    @JsonProperty(value = "properties.recommendationReason", access = JsonProperty.Access.WRITE_ONLY)
    private String recommendationReason;

    /**
     * Gets the time since when this recommended action is valid.
     */
    @JsonProperty(value = "properties.validSince", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime validSince;

    /**
     * Gets time when this recommended action was last refreshed.
     */
    @JsonProperty(value = "properties.lastRefresh", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastRefresh;

    /**
     * Gets the info of the current state the recommended action is in.
     */
    @JsonProperty(value = "properties.state", required = true)
    private RecommendedActionStateInfo state;

    /**
     * Gets if this recommended action is actionable by user.
     */
    @JsonProperty(value = "properties.isExecutableAction", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isExecutableAction;

    /**
     * Gets if changes applied by this recommended action can be reverted by
     * user.
     */
    @JsonProperty(value = "properties.isRevertableAction", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isRevertableAction;

    /**
     * Gets if this recommended action was suggested some time ago but user
     * chose to ignore this and system added a new recommended action again.
     */
    @JsonProperty(value = "properties.isArchivedAction", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isArchivedAction;

    /**
     * Gets the time when system started applying this recommended action on
     * the user resource. e.g., index creation start time.
     */
    @JsonProperty(value = "properties.executeActionStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime executeActionStartTime;

    /**
     * Gets the time taken for applying this recommended action on user
     * resource. e.g., time taken for index creation.
     */
    @JsonProperty(value = "properties.executeActionDuration", access = JsonProperty.Access.WRITE_ONLY)
    private String executeActionDuration;

    /**
     * Gets the time when system started reverting changes of this recommended
     * action on user resource. e.g., time when index drop is executed.
     */
    @JsonProperty(value = "properties.revertActionStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime revertActionStartTime;

    /**
     * Gets the time taken for reverting changes of this recommended action on
     * user resource. e.g., time taken for dropping the created index.
     */
    @JsonProperty(value = "properties.revertActionDuration", access = JsonProperty.Access.WRITE_ONLY)
    private String revertActionDuration;

    /**
     * Gets if approval for applying this recommended action was given by
     * user/system. Possible values include: 'User', 'System'.
     */
    @JsonProperty(value = "properties.executeActionInitiatedBy", access = JsonProperty.Access.WRITE_ONLY)
    private RecommendedActionInitiatedBy executeActionInitiatedBy;

    /**
     * Gets the time when this recommended action was approved for execution.
     */
    @JsonProperty(value = "properties.executeActionInitiatedTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime executeActionInitiatedTime;

    /**
     * Gets if approval for reverting this recommended action was given by
     * user/system. Possible values include: 'User', 'System'.
     */
    @JsonProperty(value = "properties.revertActionInitiatedBy", access = JsonProperty.Access.WRITE_ONLY)
    private RecommendedActionInitiatedBy revertActionInitiatedBy;

    /**
     * Gets the time when this recommended action was approved for revert.
     */
    @JsonProperty(value = "properties.revertActionInitiatedTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime revertActionInitiatedTime;

    /**
     * Gets the impact of this recommended action. Possible values are 1 - Low
     * impact, 2 - Medium Impact and 3 - High Impact.
     */
    @JsonProperty(value = "properties.score", access = JsonProperty.Access.WRITE_ONLY)
    private Integer score;

    /**
     * Gets the implementation details of this recommended action for user to
     * apply it manually.
     */
    @JsonProperty(value = "properties.implementationDetails", access = JsonProperty.Access.WRITE_ONLY)
    private RecommendedActionImplementationInfo implementationDetails;

    /**
     * Gets the error details if and why this recommended action is put to
     * error state.
     */
    @JsonProperty(value = "properties.errorDetails", access = JsonProperty.Access.WRITE_ONLY)
    private RecommendedActionErrorInfo errorDetails;

    /**
     * Gets the estimated impact info for this recommended action e.g.,
     * Estimated CPU gain, Estimated Disk Space change.
     */
    @JsonProperty(value = "properties.estimatedImpact", access = JsonProperty.Access.WRITE_ONLY)
    private List<RecommendedActionImpactRecord> estimatedImpact;

    /**
     * Gets the observed/actual impact info for this recommended action e.g.,
     * Actual CPU gain, Actual Disk Space change.
     */
    @JsonProperty(value = "properties.observedImpact", access = JsonProperty.Access.WRITE_ONLY)
    private List<RecommendedActionImpactRecord> observedImpact;

    /**
     * Gets the time series info of metrics for this recommended action e.g.,
     * CPU consumption time series.
     */
    @JsonProperty(value = "properties.timeSeries", access = JsonProperty.Access.WRITE_ONLY)
    private List<RecommendedActionMetricInfo> timeSeries;

    /**
     * Gets the linked objects, if any.
     */
    @JsonProperty(value = "properties.linkedObjects", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> linkedObjects;

    /**
     * Gets additional details specific to this recommended action.
     */
    @JsonProperty(value = "properties.details", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, Object> details;

    /**
     * Get resource kind.
     *
     * @return the kind value
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Get resource location.
     *
     * @return the location value
     */
    public String location() {
        return this.location;
    }

    /**
     * Get gets the reason for recommending this action. e.g., DuplicateIndex.
     *
     * @return the recommendationReason value
     */
    public String recommendationReason() {
        return this.recommendationReason;
    }

    /**
     * Get gets the time since when this recommended action is valid.
     *
     * @return the validSince value
     */
    public DateTime validSince() {
        return this.validSince;
    }

    /**
     * Get gets time when this recommended action was last refreshed.
     *
     * @return the lastRefresh value
     */
    public DateTime lastRefresh() {
        return this.lastRefresh;
    }

    /**
     * Get gets the info of the current state the recommended action is in.
     *
     * @return the state value
     */
    public RecommendedActionStateInfo state() {
        return this.state;
    }

    /**
     * Set gets the info of the current state the recommended action is in.
     *
     * @param state the state value to set
     * @return the RecommendedActionInner object itself.
     */
    public RecommendedActionInner withState(RecommendedActionStateInfo state) {
        this.state = state;
        return this;
    }

    /**
     * Get gets if this recommended action is actionable by user.
     *
     * @return the isExecutableAction value
     */
    public Boolean isExecutableAction() {
        return this.isExecutableAction;
    }

    /**
     * Get gets if changes applied by this recommended action can be reverted by user.
     *
     * @return the isRevertableAction value
     */
    public Boolean isRevertableAction() {
        return this.isRevertableAction;
    }

    /**
     * Get gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
     *
     * @return the isArchivedAction value
     */
    public Boolean isArchivedAction() {
        return this.isArchivedAction;
    }

    /**
     * Get gets the time when system started applying this recommended action on the user resource. e.g., index creation start time.
     *
     * @return the executeActionStartTime value
     */
    public DateTime executeActionStartTime() {
        return this.executeActionStartTime;
    }

    /**
     * Get gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation.
     *
     * @return the executeActionDuration value
     */
    public String executeActionDuration() {
        return this.executeActionDuration;
    }

    /**
     * Get gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
     *
     * @return the revertActionStartTime value
     */
    public DateTime revertActionStartTime() {
        return this.revertActionStartTime;
    }

    /**
     * Get gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
     *
     * @return the revertActionDuration value
     */
    public String revertActionDuration() {
        return this.revertActionDuration;
    }

    /**
     * Get gets if approval for applying this recommended action was given by user/system. Possible values include: 'User', 'System'.
     *
     * @return the executeActionInitiatedBy value
     */
    public RecommendedActionInitiatedBy executeActionInitiatedBy() {
        return this.executeActionInitiatedBy;
    }

    /**
     * Get gets the time when this recommended action was approved for execution.
     *
     * @return the executeActionInitiatedTime value
     */
    public DateTime executeActionInitiatedTime() {
        return this.executeActionInitiatedTime;
    }

    /**
     * Get gets if approval for reverting this recommended action was given by user/system. Possible values include: 'User', 'System'.
     *
     * @return the revertActionInitiatedBy value
     */
    public RecommendedActionInitiatedBy revertActionInitiatedBy() {
        return this.revertActionInitiatedBy;
    }

    /**
     * Get gets the time when this recommended action was approved for revert.
     *
     * @return the revertActionInitiatedTime value
     */
    public DateTime revertActionInitiatedTime() {
        return this.revertActionInitiatedTime;
    }

    /**
     * Get gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact.
     *
     * @return the score value
     */
    public Integer score() {
        return this.score;
    }

    /**
     * Get gets the implementation details of this recommended action for user to apply it manually.
     *
     * @return the implementationDetails value
     */
    public RecommendedActionImplementationInfo implementationDetails() {
        return this.implementationDetails;
    }

    /**
     * Get gets the error details if and why this recommended action is put to error state.
     *
     * @return the errorDetails value
     */
    public RecommendedActionErrorInfo errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change.
     *
     * @return the estimatedImpact value
     */
    public List<RecommendedActionImpactRecord> estimatedImpact() {
        return this.estimatedImpact;
    }

    /**
     * Get gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change.
     *
     * @return the observedImpact value
     */
    public List<RecommendedActionImpactRecord> observedImpact() {
        return this.observedImpact;
    }

    /**
     * Get gets the time series info of metrics for this recommended action e.g., CPU consumption time series.
     *
     * @return the timeSeries value
     */
    public List<RecommendedActionMetricInfo> timeSeries() {
        return this.timeSeries;
    }

    /**
     * Get gets the linked objects, if any.
     *
     * @return the linkedObjects value
     */
    public List<String> linkedObjects() {
        return this.linkedObjects;
    }

    /**
     * Get gets additional details specific to this recommended action.
     *
     * @return the details value
     */
    public Map<String, Object> details() {
        return this.details;
    }

}
