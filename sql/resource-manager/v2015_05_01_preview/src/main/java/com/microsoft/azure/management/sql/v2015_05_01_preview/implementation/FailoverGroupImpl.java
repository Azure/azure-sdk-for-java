/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.management.sql.v2015_05_01_preview.FailoverGroup;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2015_05_01_preview.FailoverGroupUpdate;
import java.util.List;
import java.util.Map;
import com.microsoft.azure.management.sql.v2015_05_01_preview.FailoverGroupReadWriteEndpoint;
import com.microsoft.azure.management.sql.v2015_05_01_preview.FailoverGroupReadOnlyEndpoint;
import com.microsoft.azure.management.sql.v2015_05_01_preview.FailoverGroupReplicationRole;
import com.microsoft.azure.management.sql.v2015_05_01_preview.PartnerInfo;
import rx.functions.Func1;

class FailoverGroupImpl extends CreatableUpdatableImpl<FailoverGroup, FailoverGroupInner, FailoverGroupImpl> implements FailoverGroup, FailoverGroup.Definition, FailoverGroup.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String failoverGroupName;
    private FailoverGroupUpdate updateParameter;

    FailoverGroupImpl(String name, SqlManager manager) {
        super(name, new FailoverGroupInner());
        this.manager = manager;
        // Set resource name
        this.failoverGroupName = name;
        //
        this.updateParameter = new FailoverGroupUpdate();
    }

    FailoverGroupImpl(FailoverGroupInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.failoverGroupName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.failoverGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "failoverGroups");
        //
        this.updateParameter = new FailoverGroupUpdate();
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<FailoverGroup> createResourceAsync() {
        FailoverGroupsInner client = this.manager().inner().failoverGroups();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.failoverGroupName, this.inner())
            .map(new Func1<FailoverGroupInner, FailoverGroupInner>() {
               @Override
               public FailoverGroupInner call(FailoverGroupInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<FailoverGroup> updateResourceAsync() {
        FailoverGroupsInner client = this.manager().inner().failoverGroups();
        return client.updateAsync(this.resourceGroupName, this.serverName, this.failoverGroupName, this.updateParameter)
            .map(new Func1<FailoverGroupInner, FailoverGroupInner>() {
               @Override
               public FailoverGroupInner call(FailoverGroupInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<FailoverGroupInner> getInnerAsync() {
        FailoverGroupsInner client = this.manager().inner().failoverGroups();
        return client.getAsync(this.resourceGroupName, this.serverName, this.failoverGroupName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new FailoverGroupUpdate();
    }

    @Override
    public List<String> databases() {
        return this.inner().databases();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<PartnerInfo> partnerServers() {
        return this.inner().partnerServers();
    }

    @Override
    public FailoverGroupReadOnlyEndpoint readOnlyEndpoint() {
        return this.inner().readOnlyEndpoint();
    }

    @Override
    public FailoverGroupReadWriteEndpoint readWriteEndpoint() {
        return this.inner().readWriteEndpoint();
    }

    @Override
    public FailoverGroupReplicationRole replicationRole() {
        return this.inner().replicationRole();
    }

    @Override
    public String replicationState() {
        return this.inner().replicationState();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public FailoverGroupImpl withExistingServer(String resourceGroupName, String serverName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        return this;
    }

    @Override
    public FailoverGroupImpl withPartnerServers(List<PartnerInfo> partnerServers) {
        this.inner().withPartnerServers(partnerServers);
        return this;
    }

    @Override
    public FailoverGroupImpl withReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint) {
        if (isInCreateMode()) {
            this.inner().withReadWriteEndpoint(readWriteEndpoint);
        } else {
            this.updateParameter.withReadWriteEndpoint(readWriteEndpoint);
        }
        return this;
    }

    @Override
    public FailoverGroupImpl withDatabases(List<String> databases) {
        if (isInCreateMode()) {
            this.inner().withDatabases(databases);
        } else {
            this.updateParameter.withDatabases(databases);
        }
        return this;
    }

    @Override
    public FailoverGroupImpl withReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint) {
        if (isInCreateMode()) {
            this.inner().withReadOnlyEndpoint(readOnlyEndpoint);
        } else {
            this.updateParameter.withReadOnlyEndpoint(readOnlyEndpoint);
        }
        return this;
    }

    @Override
    public FailoverGroupImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
