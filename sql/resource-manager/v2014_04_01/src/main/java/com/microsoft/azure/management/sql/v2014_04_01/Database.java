/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.DatabaseInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.SqlManager;
import java.util.Map;
import org.joda.time.DateTime;
import java.util.UUID;
import java.util.List;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.ServiceTierAdvisorInner;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.TransparentDataEncryptionInner;

/**
 * Type representing Database.
 */
public interface Database extends HasInner<DatabaseInner>, Indexable, Refreshable<Database>, Updatable<Database.Update>, HasManager<SqlManager> {
    /**
     * @return the collation value.
     */
    String collation();

    /**
     * @return the containmentState value.
     */
    Long containmentState();

    /**
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * @return the creationDate value.
     */
    DateTime creationDate();

    /**
     * @return the currentServiceObjectiveId value.
     */
    UUID currentServiceObjectiveId();

    /**
     * @return the databaseId value.
     */
    UUID databaseId();

    /**
     * @return the defaultSecondaryLocation value.
     */
    String defaultSecondaryLocation();

    /**
     * @return the earliestRestoreDate value.
     */
    DateTime earliestRestoreDate();

    /**
     * @return the edition value.
     */
    DatabaseEdition edition();

    /**
     * @return the elasticPoolName value.
     */
    String elasticPoolName();

    /**
     * @return the failoverGroupId value.
     */
    String failoverGroupId();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the maxSizeBytes value.
     */
    String maxSizeBytes();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the readScale value.
     */
    ReadScale readScale();

    /**
     * @return the recommendedIndex value.
     */
    List<RecommendedIndex> recommendedIndex();

    /**
     * @return the recoveryServicesRecoveryPointResourceId value.
     */
    String recoveryServicesRecoveryPointResourceId();

    /**
     * @return the requestedServiceObjectiveId value.
     */
    UUID requestedServiceObjectiveId();

    /**
     * @return the requestedServiceObjectiveName value.
     */
    ServiceObjectiveName requestedServiceObjectiveName();

    /**
     * @return the restorePointInTime value.
     */
    DateTime restorePointInTime();

    /**
     * @return the sampleName value.
     */
    SampleName sampleName();

    /**
     * @return the serviceLevelObjective value.
     */
    ServiceObjectiveName serviceLevelObjective();

    /**
     * @return the serviceTierAdvisors value.
     */
    List<ServiceTierAdvisor> serviceTierAdvisors();

    /**
     * @return the sourceDatabaseDeletionDate value.
     */
    DateTime sourceDatabaseDeletionDate();

    /**
     * @return the sourceDatabaseId value.
     */
    String sourceDatabaseId();

    /**
     * @return the status value.
     */
    String status();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the transparentDataEncryption value.
     */
    List<TransparentDataEncryption> transparentDataEncryption();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * The entirety of the Database definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithServer, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Database definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Database definition.
         */
        interface Blank extends WithServer {
        }

        /**
         * The stage of the database definition allowing to specify Server.
         */
        interface WithServer {
           /**
            * Specifies resourceGroupName, serverName.
            */
            WithLocation withExistingServer(String resourceGroupName, String serverName);
        }

        /**
         * The stage of the database definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the database definition allowing to specify Collation.
         */
        interface WithCollation {
            /**
             * Specifies collation.
             */
            WithCreate withCollation(String collation);
        }

        /**
         * The stage of the database definition allowing to specify CreateMode.
         */
        interface WithCreateMode {
            /**
             * Specifies createMode.
             */
            WithCreate withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the database definition allowing to specify Edition.
         */
        interface WithEdition {
            /**
             * Specifies edition.
             */
            WithCreate withEdition(DatabaseEdition edition);
        }

        /**
         * The stage of the database definition allowing to specify ElasticPoolName.
         */
        interface WithElasticPoolName {
            /**
             * Specifies elasticPoolName.
             */
            WithCreate withElasticPoolName(String elasticPoolName);
        }

        /**
         * The stage of the database definition allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             */
            WithCreate withMaxSizeBytes(String maxSizeBytes);
        }

        /**
         * The stage of the database definition allowing to specify ReadScale.
         */
        interface WithReadScale {
            /**
             * Specifies readScale.
             */
            WithCreate withReadScale(ReadScale readScale);
        }

        /**
         * The stage of the database definition allowing to specify RecoveryServicesRecoveryPointResourceId.
         */
        interface WithRecoveryServicesRecoveryPointResourceId {
            /**
             * Specifies recoveryServicesRecoveryPointResourceId.
             */
            WithCreate withRecoveryServicesRecoveryPointResourceId(String recoveryServicesRecoveryPointResourceId);
        }

        /**
         * The stage of the database definition allowing to specify RequestedServiceObjectiveId.
         */
        interface WithRequestedServiceObjectiveId {
            /**
             * Specifies requestedServiceObjectiveId.
             */
            WithCreate withRequestedServiceObjectiveId(UUID requestedServiceObjectiveId);
        }

        /**
         * The stage of the database definition allowing to specify RequestedServiceObjectiveName.
         */
        interface WithRequestedServiceObjectiveName {
            /**
             * Specifies requestedServiceObjectiveName.
             */
            WithCreate withRequestedServiceObjectiveName(ServiceObjectiveName requestedServiceObjectiveName);
        }

        /**
         * The stage of the database definition allowing to specify RestorePointInTime.
         */
        interface WithRestorePointInTime {
            /**
             * Specifies restorePointInTime.
             */
            WithCreate withRestorePointInTime(DateTime restorePointInTime);
        }

        /**
         * The stage of the database definition allowing to specify SampleName.
         */
        interface WithSampleName {
            /**
             * Specifies sampleName.
             */
            WithCreate withSampleName(SampleName sampleName);
        }

        /**
         * The stage of the database definition allowing to specify SourceDatabaseDeletionDate.
         */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies sourceDatabaseDeletionDate.
             */
            WithCreate withSourceDatabaseDeletionDate(DateTime sourceDatabaseDeletionDate);
        }

        /**
         * The stage of the database definition allowing to specify SourceDatabaseId.
         */
        interface WithSourceDatabaseId {
            /**
             * Specifies sourceDatabaseId.
             */
            WithCreate withSourceDatabaseId(String sourceDatabaseId);
        }

        /**
         * The stage of the database definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the database definition allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Database>, DefinitionStages.WithCollation, DefinitionStages.WithCreateMode, DefinitionStages.WithEdition, DefinitionStages.WithElasticPoolName, DefinitionStages.WithMaxSizeBytes, DefinitionStages.WithReadScale, DefinitionStages.WithRecoveryServicesRecoveryPointResourceId, DefinitionStages.WithRequestedServiceObjectiveId, DefinitionStages.WithRequestedServiceObjectiveName, DefinitionStages.WithRestorePointInTime, DefinitionStages.WithSampleName, DefinitionStages.WithSourceDatabaseDeletionDate, DefinitionStages.WithSourceDatabaseId, DefinitionStages.WithTags, DefinitionStages.WithZoneRedundant {
        }
    }
    /**
     * The template for a Database update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Database>, UpdateStages.WithCollation, UpdateStages.WithCreateMode, UpdateStages.WithEdition, UpdateStages.WithElasticPoolName, UpdateStages.WithMaxSizeBytes, UpdateStages.WithReadScale, UpdateStages.WithRecoveryServicesRecoveryPointResourceId, UpdateStages.WithRequestedServiceObjectiveId, UpdateStages.WithRequestedServiceObjectiveName, UpdateStages.WithRestorePointInTime, UpdateStages.WithSampleName, UpdateStages.WithSourceDatabaseDeletionDate, UpdateStages.WithSourceDatabaseId, UpdateStages.WithTags, UpdateStages.WithZoneRedundant {
    }

    /**
     * Grouping of Database update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the database update allowing to specify Collation.
         */
        interface WithCollation {
            /**
             * Specifies collation.
             */
            Update withCollation(String collation);
        }

        /**
         * The stage of the database update allowing to specify CreateMode.
         */
        interface WithCreateMode {
            /**
             * Specifies createMode.
             */
            Update withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the database update allowing to specify Edition.
         */
        interface WithEdition {
            /**
             * Specifies edition.
             */
            Update withEdition(DatabaseEdition edition);
        }

        /**
         * The stage of the database update allowing to specify ElasticPoolName.
         */
        interface WithElasticPoolName {
            /**
             * Specifies elasticPoolName.
             */
            Update withElasticPoolName(String elasticPoolName);
        }

        /**
         * The stage of the database update allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             */
            Update withMaxSizeBytes(String maxSizeBytes);
        }

        /**
         * The stage of the database update allowing to specify ReadScale.
         */
        interface WithReadScale {
            /**
             * Specifies readScale.
             */
            Update withReadScale(ReadScale readScale);
        }

        /**
         * The stage of the database update allowing to specify RecoveryServicesRecoveryPointResourceId.
         */
        interface WithRecoveryServicesRecoveryPointResourceId {
            /**
             * Specifies recoveryServicesRecoveryPointResourceId.
             */
            Update withRecoveryServicesRecoveryPointResourceId(String recoveryServicesRecoveryPointResourceId);
        }

        /**
         * The stage of the database update allowing to specify RequestedServiceObjectiveId.
         */
        interface WithRequestedServiceObjectiveId {
            /**
             * Specifies requestedServiceObjectiveId.
             */
            Update withRequestedServiceObjectiveId(UUID requestedServiceObjectiveId);
        }

        /**
         * The stage of the database update allowing to specify RequestedServiceObjectiveName.
         */
        interface WithRequestedServiceObjectiveName {
            /**
             * Specifies requestedServiceObjectiveName.
             */
            Update withRequestedServiceObjectiveName(ServiceObjectiveName requestedServiceObjectiveName);
        }

        /**
         * The stage of the database update allowing to specify RestorePointInTime.
         */
        interface WithRestorePointInTime {
            /**
             * Specifies restorePointInTime.
             */
            Update withRestorePointInTime(DateTime restorePointInTime);
        }

        /**
         * The stage of the database update allowing to specify SampleName.
         */
        interface WithSampleName {
            /**
             * Specifies sampleName.
             */
            Update withSampleName(SampleName sampleName);
        }

        /**
         * The stage of the database update allowing to specify SourceDatabaseDeletionDate.
         */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies sourceDatabaseDeletionDate.
             */
            Update withSourceDatabaseDeletionDate(DateTime sourceDatabaseDeletionDate);
        }

        /**
         * The stage of the database update allowing to specify SourceDatabaseId.
         */
        interface WithSourceDatabaseId {
            /**
             * Specifies sourceDatabaseId.
             */
            Update withSourceDatabaseId(String sourceDatabaseId);
        }

        /**
         * The stage of the database update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the database update allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }

    }
}
