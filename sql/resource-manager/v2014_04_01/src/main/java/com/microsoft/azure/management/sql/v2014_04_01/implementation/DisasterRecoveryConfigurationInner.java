/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.management.sql.v2014_04_01.DisasterRecoveryConfigurationStatus;
import com.microsoft.azure.management.sql.v2014_04_01.DisasterRecoveryConfigurationAutoFailover;
import com.microsoft.azure.management.sql.v2014_04_01.DisasterRecoveryConfigurationFailoverPolicy;
import com.microsoft.azure.management.sql.v2014_04_01.DisasterRecoveryConfigurationRole;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Represents a disaster recovery configuration.
 */
@JsonFlatten
public class DisasterRecoveryConfigurationInner extends ProxyResource {
    /**
     * The status of the disaster recovery configuration. Possible values
     * include: 'Creating', 'Ready', 'FailingOver', 'Dropping'.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private DisasterRecoveryConfigurationStatus status;

    /**
     * Whether or not failover can be done automatically. Possible values
     * include: 'Off', 'On'.
     */
    @JsonProperty(value = "properties.autoFailover", required = true)
    private DisasterRecoveryConfigurationAutoFailover autoFailover;

    /**
     * How aggressive the automatic failover should be. Possible values
     * include: 'Manual', 'Automatic'.
     */
    @JsonProperty(value = "properties.failoverPolicy", required = true)
    private DisasterRecoveryConfigurationFailoverPolicy failoverPolicy;

    /**
     * Id of the partner server.
     */
    @JsonProperty(value = "properties.partnerServerId", required = true)
    private String partnerServerId;

    /**
     * Logical name of the server.
     */
    @JsonProperty(value = "properties.logicalServerName", access = JsonProperty.Access.WRITE_ONLY)
    private String logicalServerName;

    /**
     * Logical name of the partner server.
     */
    @JsonProperty(value = "properties.partnerLogicalServerName", access = JsonProperty.Access.WRITE_ONLY)
    private String partnerLogicalServerName;

    /**
     * The role of the current server in the disaster recovery configuration.
     * Possible values include: 'None', 'Primary', 'Secondary'.
     */
    @JsonProperty(value = "properties.role", access = JsonProperty.Access.WRITE_ONLY)
    private DisasterRecoveryConfigurationRole role;

    /**
     * Location of the server that contains this disaster recovery
     * configuration.
     */
    @JsonProperty(value = "location", access = JsonProperty.Access.WRITE_ONLY)
    private String location;

    /**
     * Get the status of the disaster recovery configuration. Possible values include: 'Creating', 'Ready', 'FailingOver', 'Dropping'.
     *
     * @return the status value
     */
    public DisasterRecoveryConfigurationStatus status() {
        return this.status;
    }

    /**
     * Get whether or not failover can be done automatically. Possible values include: 'Off', 'On'.
     *
     * @return the autoFailover value
     */
    public DisasterRecoveryConfigurationAutoFailover autoFailover() {
        return this.autoFailover;
    }

    /**
     * Set whether or not failover can be done automatically. Possible values include: 'Off', 'On'.
     *
     * @param autoFailover the autoFailover value to set
     * @return the DisasterRecoveryConfigurationInner object itself.
     */
    public DisasterRecoveryConfigurationInner withAutoFailover(DisasterRecoveryConfigurationAutoFailover autoFailover) {
        this.autoFailover = autoFailover;
        return this;
    }

    /**
     * Get how aggressive the automatic failover should be. Possible values include: 'Manual', 'Automatic'.
     *
     * @return the failoverPolicy value
     */
    public DisasterRecoveryConfigurationFailoverPolicy failoverPolicy() {
        return this.failoverPolicy;
    }

    /**
     * Set how aggressive the automatic failover should be. Possible values include: 'Manual', 'Automatic'.
     *
     * @param failoverPolicy the failoverPolicy value to set
     * @return the DisasterRecoveryConfigurationInner object itself.
     */
    public DisasterRecoveryConfigurationInner withFailoverPolicy(DisasterRecoveryConfigurationFailoverPolicy failoverPolicy) {
        this.failoverPolicy = failoverPolicy;
        return this;
    }

    /**
     * Get id of the partner server.
     *
     * @return the partnerServerId value
     */
    public String partnerServerId() {
        return this.partnerServerId;
    }

    /**
     * Set id of the partner server.
     *
     * @param partnerServerId the partnerServerId value to set
     * @return the DisasterRecoveryConfigurationInner object itself.
     */
    public DisasterRecoveryConfigurationInner withPartnerServerId(String partnerServerId) {
        this.partnerServerId = partnerServerId;
        return this;
    }

    /**
     * Get logical name of the server.
     *
     * @return the logicalServerName value
     */
    public String logicalServerName() {
        return this.logicalServerName;
    }

    /**
     * Get logical name of the partner server.
     *
     * @return the partnerLogicalServerName value
     */
    public String partnerLogicalServerName() {
        return this.partnerLogicalServerName;
    }

    /**
     * Get the role of the current server in the disaster recovery configuration. Possible values include: 'None', 'Primary', 'Secondary'.
     *
     * @return the role value
     */
    public DisasterRecoveryConfigurationRole role() {
        return this.role;
    }

    /**
     * Get location of the server that contains this disaster recovery configuration.
     *
     * @return the location value
     */
    public String location() {
        return this.location;
    }

}
