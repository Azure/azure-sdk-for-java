/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.management.sql.v2014_04_01.RecommendedElasticPool;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2014_04_01.ElasticPoolEdition;
import java.util.ArrayList;
import com.microsoft.azure.management.sql.v2014_04_01.Database;
import java.util.List;
import com.microsoft.azure.management.sql.v2014_04_01.RecommendedElasticPoolMetric;
import org.joda.time.DateTime;

class RecommendedElasticPoolImpl extends IndexableRefreshableWrapperImpl<RecommendedElasticPool, RecommendedElasticPoolInner> implements RecommendedElasticPool {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String recommendedElasticPoolName;

    RecommendedElasticPoolImpl(RecommendedElasticPoolInner inner,  SqlManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.recommendedElasticPoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "recommendedElasticPools");
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<RecommendedElasticPoolInner> getInnerAsync() {
        RecommendedElasticPoolsInner client = this.manager().inner().recommendedElasticPools();
        return client.getAsync(this.resourceGroupName, this.serverName, this.recommendedElasticPoolName);
    }



    @Override
    public Double databaseDtuMax() {
        return this.inner().databaseDtuMax();
    }

    @Override
    public Double databaseDtuMin() {
        return this.inner().databaseDtuMin();
    }

    @Override
    public ElasticPoolEdition databaseEdition() {
        return this.inner().databaseEdition();
    }

    @Override
    public List<Database> databases() {
        List<Database> lst = new ArrayList<Database>();
        if (this.inner().databases() != null) {
            for (DatabaseInner inner : this.inner().databases()) {
                lst.add( new DatabaseImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public Double dtu() {
        return this.inner().dtu();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Double maxObservedDtu() {
        return this.inner().maxObservedDtu();
    }

    @Override
    public Double maxObservedStorageMB() {
        return this.inner().maxObservedStorageMB();
    }

    @Override
    public List<RecommendedElasticPoolMetric> metrics() {
        List<RecommendedElasticPoolMetric> lst = new ArrayList<RecommendedElasticPoolMetric>();
        if (this.inner().metrics() != null) {
            for (RecommendedElasticPoolMetricInner inner : this.inner().metrics()) {
                lst.add( new RecommendedElasticPoolMetricImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public DateTime observationPeriodEnd() {
        return this.inner().observationPeriodEnd();
    }

    @Override
    public DateTime observationPeriodStart() {
        return this.inner().observationPeriodStart();
    }

    @Override
    public Double storageMB() {
        return this.inner().storageMB();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
