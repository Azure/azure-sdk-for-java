/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.management.sql.v2014_04_01.BackupLongTermRetentionPolicy;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2014_04_01.BackupLongTermRetentionPolicyState;

class BackupLongTermRetentionPolicyImpl extends CreatableUpdatableImpl<BackupLongTermRetentionPolicy, BackupLongTermRetentionPolicyInner, BackupLongTermRetentionPolicyImpl> implements BackupLongTermRetentionPolicy, BackupLongTermRetentionPolicy.Definition, BackupLongTermRetentionPolicy.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String databaseName;

    BackupLongTermRetentionPolicyImpl(String name, SqlManager manager) {
        super(name, new BackupLongTermRetentionPolicyInner());
        this.manager = manager;
        // Set resource name
        this.databaseName = name;
        //
    }

    BackupLongTermRetentionPolicyImpl(BackupLongTermRetentionPolicyInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.databaseName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<BackupLongTermRetentionPolicy> createResourceAsync() {
        BackupLongTermRetentionPoliciesInner client = this.manager().inner().backupLongTermRetentionPolicies();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<BackupLongTermRetentionPolicy> updateResourceAsync() {
        BackupLongTermRetentionPoliciesInner client = this.manager().inner().backupLongTermRetentionPolicies();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<BackupLongTermRetentionPolicyInner> getInnerAsync() {
        BackupLongTermRetentionPoliciesInner client = this.manager().inner().backupLongTermRetentionPolicies();
        return client.getAsync(this.resourceGroupName, this.serverName, this.databaseName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String recoveryServicesBackupPolicyResourceId() {
        return this.inner().recoveryServicesBackupPolicyResourceId();
    }

    @Override
    public BackupLongTermRetentionPolicyState state() {
        return this.inner().state();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public BackupLongTermRetentionPolicyImpl withExistingDatabasis(String resourceGroupName, String serverName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        return this;
    }

    @Override
    public BackupLongTermRetentionPolicyImpl withRecoveryServicesBackupPolicyResourceId(String recoveryServicesBackupPolicyResourceId) {
        this.inner().withRecoveryServicesBackupPolicyResourceId(recoveryServicesBackupPolicyResourceId);
        return this;
    }

    @Override
    public BackupLongTermRetentionPolicyImpl withState(BackupLongTermRetentionPolicyState state) {
        this.inner().withState(state);
        return this;
    }

}
