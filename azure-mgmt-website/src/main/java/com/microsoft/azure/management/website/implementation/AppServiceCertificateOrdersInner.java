/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.website.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HTTP;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.Query;
import rx.Observable;
import rx.functions.Func1;

import java.io.IOException;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined
 * in AppServiceCertificateOrders.
 */
public final class AppServiceCertificateOrdersInner {
    /** The Retrofit service to perform REST calls. */
    private AppServiceCertificateOrdersService service;
    /** The service client containing this operation class. */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of AppServiceCertificateOrdersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AppServiceCertificateOrdersInner(Retrofit retrofit, WebSiteManagementClientImpl client) {
        this.service = retrofit.create(AppServiceCertificateOrdersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AppServiceCertificateOrders to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AppServiceCertificateOrdersService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation")
        Observable<Response<ResponseBody>> validatePurchaseInformation(@Path("subscriptionId") String subscriptionId, @Body AppServiceCertificateOrderInner appServiceCertificateOrder, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates")
        Observable<Response<ResponseBody>> listCertificates(@Path("resourceGroupName") String resourceGroupName, @Path("certificateOrderName") String certificateOrderName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        Observable<Response<ResponseBody>> getCertificate(@Path("resourceGroupName") String resourceGroupName, @Path("certificateOrderName") String certificateOrderName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        Observable<Response<ResponseBody>> createOrUpdateCertificate(@Path("resourceGroupName") String resourceGroupName, @Path("certificateOrderName") String certificateOrderName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body AppServiceCertificateInner keyVaultCertificate, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        Observable<Response<ResponseBody>> beginCreateOrUpdateCertificate(@Path("resourceGroupName") String resourceGroupName, @Path("certificateOrderName") String certificateOrderName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body AppServiceCertificateInner keyVaultCertificate, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteCertificate(@Path("resourceGroupName") String resourceGroupName, @Path("certificateOrderName") String certificateOrderName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body AppServiceCertificateOrderInner certificateDistinguishedName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body AppServiceCertificateOrderInner certificateDistinguishedName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteCertificateOrder(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue")
        Observable<Response<ResponseBody>> reissue(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body ReissueCertificateOrderRequestInner reissueCertificateOrderRequest, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew")
        Observable<Response<ResponseBody>> renew(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body RenewCertificateOrderRequestInner renewCertificateOrderRequest, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail")
        Observable<Response<ResponseBody>> resendCertificateEmail(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions")
        Observable<Response<ResponseBody>> retrieveCertificateActions(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory")
        Observable<Response<ResponseBody>> retrieveCertificateEmailHistory(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership")
        Observable<Response<ResponseBody>> verifyDomainOwnership(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listCertificatesNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object if successful.
     */
    public PagedList<AppServiceCertificateOrderInner> list() {
        ServiceResponse<Page<AppServiceCertificateOrderInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<AppServiceCertificateOrderInner>(response.getBody()) {
            @Override
            public Page<AppServiceCertificateOrderInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<AppServiceCertificateOrderInner>> listAsync(final ListOperationCallback<AppServiceCertificateOrderInner> serviceCallback) {
        return AzureServiceCall.create(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<Page<AppServiceCertificateOrderInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Page<AppServiceCertificateOrderInner>>() {
                @Override
                public Page<AppServiceCertificateOrderInner> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AppServiceCertificateOrderInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<AppServiceCertificateOrderInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<AppServiceCertificateOrderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Validate certificate purchase information.
     * Validate certificate purchase information.
     *
     * @param appServiceCertificateOrder Certificate order
     * @return the Object object if successful.
     */
    public Object validatePurchaseInformation(AppServiceCertificateOrderInner appServiceCertificateOrder) {
        return validatePurchaseInformationWithServiceResponseAsync(appServiceCertificateOrder).toBlocking().single().getBody();
    }

    /**
     * Validate certificate purchase information.
     * Validate certificate purchase information.
     *
     * @param appServiceCertificateOrder Certificate order
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> validatePurchaseInformationAsync(AppServiceCertificateOrderInner appServiceCertificateOrder, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(validatePurchaseInformationWithServiceResponseAsync(appServiceCertificateOrder), serviceCallback);
    }

    /**
     * Validate certificate purchase information.
     * Validate certificate purchase information.
     *
     * @param appServiceCertificateOrder Certificate order
     * @return the observable to the Object object
     */
    public Observable<Object> validatePurchaseInformationAsync(AppServiceCertificateOrderInner appServiceCertificateOrder) {
        return validatePurchaseInformationWithServiceResponseAsync(appServiceCertificateOrder).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Validate certificate purchase information.
     * Validate certificate purchase information.
     *
     * @param appServiceCertificateOrder Certificate order
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> validatePurchaseInformationWithServiceResponseAsync(AppServiceCertificateOrderInner appServiceCertificateOrder) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (appServiceCertificateOrder == null) {
            throw new IllegalArgumentException("Parameter appServiceCertificateOrder is required and cannot be null.");
        }
        Validator.validate(appServiceCertificateOrder);
        final String apiVersion = "2015-08-01";
        return service.validatePurchaseInformation(this.client.subscriptionId(), appServiceCertificateOrder, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = validatePurchaseInformationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> validatePurchaseInformationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param resourceGroupName Azure resource group name
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object if successful.
     */
    public PagedList<AppServiceCertificateOrderInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<AppServiceCertificateOrderInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<AppServiceCertificateOrderInner>(response.getBody()) {
            @Override
            public Page<AppServiceCertificateOrderInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param resourceGroupName Azure resource group name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<AppServiceCertificateOrderInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<AppServiceCertificateOrderInner> serviceCallback) {
        return AzureServiceCall.create(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param resourceGroupName Azure resource group name
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<Page<AppServiceCertificateOrderInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Page<AppServiceCertificateOrderInner>>() {
                @Override
                public Page<AppServiceCertificateOrderInner> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param resourceGroupName Azure resource group name
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
    ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> * @param resourceGroupName Azure resource group name
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AppServiceCertificateOrderInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<AppServiceCertificateOrderInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<AppServiceCertificateOrderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @return the PagedList&lt;AppServiceCertificateInner&gt; object if successful.
     */
    public PagedList<AppServiceCertificateInner> listCertificates(final String resourceGroupName, final String certificateOrderName) {
        ServiceResponse<Page<AppServiceCertificateInner>> response = listCertificatesSinglePageAsync(resourceGroupName, certificateOrderName).toBlocking().single();
        return new PagedList<AppServiceCertificateInner>(response.getBody()) {
            @Override
            public Page<AppServiceCertificateInner> nextPage(String nextPageLink) {
                return listCertificatesNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<AppServiceCertificateInner>> listCertificatesAsync(final String resourceGroupName, final String certificateOrderName, final ListOperationCallback<AppServiceCertificateInner> serviceCallback) {
        return AzureServiceCall.create(
            listCertificatesSinglePageAsync(resourceGroupName, certificateOrderName),
            new Func1<String, Observable<ServiceResponse<Page<AppServiceCertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> call(String nextPageLink) {
                    return listCertificatesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @return the observable to the PagedList&lt;AppServiceCertificateInner&gt; object
     */
    public Observable<Page<AppServiceCertificateInner>> listCertificatesAsync(final String resourceGroupName, final String certificateOrderName) {
        return listCertificatesWithServiceResponseAsync(resourceGroupName, certificateOrderName)
            .map(new Func1<ServiceResponse<Page<AppServiceCertificateInner>>, Page<AppServiceCertificateInner>>() {
                @Override
                public Page<AppServiceCertificateInner> call(ServiceResponse<Page<AppServiceCertificateInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @return the observable to the PagedList&lt;AppServiceCertificateInner&gt; object
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> listCertificatesWithServiceResponseAsync(final String resourceGroupName, final String certificateOrderName) {
        return listCertificatesSinglePageAsync(resourceGroupName, certificateOrderName)
            .concatMap(new Func1<ServiceResponse<Page<AppServiceCertificateInner>>, Observable<ServiceResponse<Page<AppServiceCertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> call(ServiceResponse<Page<AppServiceCertificateInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listCertificatesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
    ServiceResponse<PageImpl<AppServiceCertificateInner>> * @param resourceGroupName Azure resource group name
    ServiceResponse<PageImpl<AppServiceCertificateInner>> * @param certificateOrderName Certificate name
     * @return the PagedList&lt;AppServiceCertificateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> listCertificatesSinglePageAsync(final String resourceGroupName, final String certificateOrderName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (certificateOrderName == null) {
            throw new IllegalArgumentException("Parameter certificateOrderName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.listCertificates(resourceGroupName, certificateOrderName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AppServiceCertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AppServiceCertificateInner>> result = listCertificatesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AppServiceCertificateInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AppServiceCertificateInner>> listCertificatesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<AppServiceCertificateInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<AppServiceCertificateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get certificate associated with the certificate order.
     * Get certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @return the AppServiceCertificateInner object if successful.
     */
    public AppServiceCertificateInner getCertificate(String resourceGroupName, String certificateOrderName, String name) {
        return getCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name).toBlocking().single().getBody();
    }

    /**
     * Get certificate associated with the certificate order.
     * Get certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<AppServiceCertificateInner> getCertificateAsync(String resourceGroupName, String certificateOrderName, String name, final ServiceCallback<AppServiceCertificateInner> serviceCallback) {
        return ServiceCall.create(getCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name), serviceCallback);
    }

    /**
     * Get certificate associated with the certificate order.
     * Get certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @return the observable to the AppServiceCertificateInner object
     */
    public Observable<AppServiceCertificateInner> getCertificateAsync(String resourceGroupName, String certificateOrderName, String name) {
        return getCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name).map(new Func1<ServiceResponse<AppServiceCertificateInner>, AppServiceCertificateInner>() {
            @Override
            public AppServiceCertificateInner call(ServiceResponse<AppServiceCertificateInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get certificate associated with the certificate order.
     * Get certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @return the observable to the AppServiceCertificateInner object
     */
    public Observable<ServiceResponse<AppServiceCertificateInner>> getCertificateWithServiceResponseAsync(String resourceGroupName, String certificateOrderName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (certificateOrderName == null) {
            throw new IllegalArgumentException("Parameter certificateOrderName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.getCertificate(resourceGroupName, certificateOrderName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AppServiceCertificateInner>>>() {
                @Override
                public Observable<ServiceResponse<AppServiceCertificateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AppServiceCertificateInner> clientResponse = getCertificateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AppServiceCertificateInner> getCertificateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<AppServiceCertificateInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<AppServiceCertificateInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @return the AppServiceCertificateInner object if successful.
     */
    public AppServiceCertificateInner createOrUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate) {
        return createOrUpdateCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).toBlocking().last().getBody();
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<AppServiceCertificateInner> createOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate, final ServiceCallback<AppServiceCertificateInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), serviceCallback);
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @return the observable for the request
     */
    public Observable<AppServiceCertificateInner> createOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate) {
        return createOrUpdateCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).map(new Func1<ServiceResponse<AppServiceCertificateInner>, AppServiceCertificateInner>() {
            @Override
            public AppServiceCertificateInner call(ServiceResponse<AppServiceCertificateInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AppServiceCertificateInner>> createOrUpdateCertificateWithServiceResponseAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (certificateOrderName == null) {
            throw new IllegalArgumentException("Parameter certificateOrderName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (keyVaultCertificate == null) {
            throw new IllegalArgumentException("Parameter keyVaultCertificate is required and cannot be null.");
        }
        Validator.validate(keyVaultCertificate);
        final String apiVersion = "2015-08-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdateCertificate(resourceGroupName, certificateOrderName, name, this.client.subscriptionId(), keyVaultCertificate, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AppServiceCertificateInner>() { }.getType());
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @return the AppServiceCertificateInner object if successful.
     */
    public AppServiceCertificateInner beginCreateOrUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate) {
        return beginCreateOrUpdateCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).toBlocking().single().getBody();
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<AppServiceCertificateInner> beginCreateOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate, final ServiceCallback<AppServiceCertificateInner> serviceCallback) {
        return ServiceCall.create(beginCreateOrUpdateCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), serviceCallback);
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @return the observable to the AppServiceCertificateInner object
     */
    public Observable<AppServiceCertificateInner> beginCreateOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate) {
        return beginCreateOrUpdateCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).map(new Func1<ServiceResponse<AppServiceCertificateInner>, AppServiceCertificateInner>() {
            @Override
            public AppServiceCertificateInner call(ServiceResponse<AppServiceCertificateInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param keyVaultCertificate Key Vault secret csm Id
     * @return the observable to the AppServiceCertificateInner object
     */
    public Observable<ServiceResponse<AppServiceCertificateInner>> beginCreateOrUpdateCertificateWithServiceResponseAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateInner keyVaultCertificate) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (certificateOrderName == null) {
            throw new IllegalArgumentException("Parameter certificateOrderName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (keyVaultCertificate == null) {
            throw new IllegalArgumentException("Parameter keyVaultCertificate is required and cannot be null.");
        }
        Validator.validate(keyVaultCertificate);
        final String apiVersion = "2015-08-01";
        return service.beginCreateOrUpdateCertificate(resourceGroupName, certificateOrderName, name, this.client.subscriptionId(), keyVaultCertificate, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AppServiceCertificateInner>>>() {
                @Override
                public Observable<ServiceResponse<AppServiceCertificateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AppServiceCertificateInner> clientResponse = beginCreateOrUpdateCertificateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AppServiceCertificateInner> beginCreateOrUpdateCertificateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<AppServiceCertificateInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<AppServiceCertificateInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the certificate associated with the certificate order.
     * Deletes the certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @return the Object object if successful.
     */
    public Object deleteCertificate(String resourceGroupName, String certificateOrderName, String name) {
        return deleteCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name).toBlocking().single().getBody();
    }

    /**
     * Deletes the certificate associated with the certificate order.
     * Deletes the certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> deleteCertificateAsync(String resourceGroupName, String certificateOrderName, String name, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(deleteCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name), serviceCallback);
    }

    /**
     * Deletes the certificate associated with the certificate order.
     * Deletes the certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @return the observable to the Object object
     */
    public Observable<Object> deleteCertificateAsync(String resourceGroupName, String certificateOrderName, String name) {
        return deleteCertificateWithServiceResponseAsync(resourceGroupName, certificateOrderName, name).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes the certificate associated with the certificate order.
     * Deletes the certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param certificateOrderName Certificate name
     * @param name Certificate name
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteCertificateWithServiceResponseAsync(String resourceGroupName, String certificateOrderName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (certificateOrderName == null) {
            throw new IllegalArgumentException("Parameter certificateOrderName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.deleteCertificate(resourceGroupName, certificateOrderName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteCertificateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteCertificateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a certificate order.
     * Get a certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @return the AppServiceCertificateOrderInner object if successful.
     */
    public AppServiceCertificateOrderInner get(String resourceGroupName, String name) {
        return getWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Get a certificate order.
     * Get a certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<AppServiceCertificateOrderInner> getAsync(String resourceGroupName, String name, final ServiceCallback<AppServiceCertificateOrderInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Get a certificate order.
     * Get a certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @return the observable to the AppServiceCertificateOrderInner object
     */
    public Observable<AppServiceCertificateOrderInner> getAsync(String resourceGroupName, String name) {
        return getWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<AppServiceCertificateOrderInner>, AppServiceCertificateOrderInner>() {
            @Override
            public AppServiceCertificateOrderInner call(ServiceResponse<AppServiceCertificateOrderInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get a certificate order.
     * Get a certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @return the observable to the AppServiceCertificateOrderInner object
     */
    public Observable<ServiceResponse<AppServiceCertificateOrderInner>> getWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.get(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AppServiceCertificateOrderInner>>>() {
                @Override
                public Observable<ServiceResponse<AppServiceCertificateOrderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AppServiceCertificateOrderInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AppServiceCertificateOrderInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<AppServiceCertificateOrderInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<AppServiceCertificateOrderInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @return the AppServiceCertificateOrderInner object if successful.
     */
    public AppServiceCertificateOrderInner createOrUpdate(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateDistinguishedName).toBlocking().last().getBody();
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<AppServiceCertificateOrderInner> createOrUpdateAsync(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName, final ServiceCallback<AppServiceCertificateOrderInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateDistinguishedName), serviceCallback);
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @return the observable for the request
     */
    public Observable<AppServiceCertificateOrderInner> createOrUpdateAsync(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateDistinguishedName).map(new Func1<ServiceResponse<AppServiceCertificateOrderInner>, AppServiceCertificateOrderInner>() {
            @Override
            public AppServiceCertificateOrderInner call(ServiceResponse<AppServiceCertificateOrderInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AppServiceCertificateOrderInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (certificateDistinguishedName == null) {
            throw new IllegalArgumentException("Parameter certificateDistinguishedName is required and cannot be null.");
        }
        Validator.validate(certificateDistinguishedName);
        final String apiVersion = "2015-08-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, name, this.client.subscriptionId(), certificateDistinguishedName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AppServiceCertificateOrderInner>() { }.getType());
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @return the AppServiceCertificateOrderInner object if successful.
     */
    public AppServiceCertificateOrderInner beginCreateOrUpdate(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateDistinguishedName).toBlocking().single().getBody();
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<AppServiceCertificateOrderInner> beginCreateOrUpdateAsync(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName, final ServiceCallback<AppServiceCertificateOrderInner> serviceCallback) {
        return ServiceCall.create(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateDistinguishedName), serviceCallback);
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @return the observable to the AppServiceCertificateOrderInner object
     */
    public Observable<AppServiceCertificateOrderInner> beginCreateOrUpdateAsync(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateDistinguishedName).map(new Func1<ServiceResponse<AppServiceCertificateOrderInner>, AppServiceCertificateOrderInner>() {
            @Override
            public AppServiceCertificateOrderInner call(ServiceResponse<AppServiceCertificateOrderInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @return the observable to the AppServiceCertificateOrderInner object
     */
    public Observable<ServiceResponse<AppServiceCertificateOrderInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String name, AppServiceCertificateOrderInner certificateDistinguishedName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (certificateDistinguishedName == null) {
            throw new IllegalArgumentException("Parameter certificateDistinguishedName is required and cannot be null.");
        }
        Validator.validate(certificateDistinguishedName);
        final String apiVersion = "2015-08-01";
        return service.beginCreateOrUpdate(resourceGroupName, name, this.client.subscriptionId(), certificateDistinguishedName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AppServiceCertificateOrderInner>>>() {
                @Override
                public Observable<ServiceResponse<AppServiceCertificateOrderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AppServiceCertificateOrderInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AppServiceCertificateOrderInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<AppServiceCertificateOrderInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<AppServiceCertificateOrderInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete an existing certificate order.
     * Delete an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @return the Object object if successful.
     */
    public Object deleteCertificateOrder(String resourceGroupName, String name) {
        return deleteCertificateOrderWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Delete an existing certificate order.
     * Delete an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> deleteCertificateOrderAsync(String resourceGroupName, String name, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(deleteCertificateOrderWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Delete an existing certificate order.
     * Delete an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @return the observable to the Object object
     */
    public Observable<Object> deleteCertificateOrderAsync(String resourceGroupName, String name) {
        return deleteCertificateOrderWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Delete an existing certificate order.
     * Delete an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteCertificateOrderWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.deleteCertificateOrder(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteCertificateOrderDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteCertificateOrderDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Reissue an existing certificate order.
     * Reissue an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param reissueCertificateOrderRequest Reissue parameters
     * @return the Object object if successful.
     */
    public Object reissue(String resourceGroupName, String name, ReissueCertificateOrderRequestInner reissueCertificateOrderRequest) {
        return reissueWithServiceResponseAsync(resourceGroupName, name, reissueCertificateOrderRequest).toBlocking().single().getBody();
    }

    /**
     * Reissue an existing certificate order.
     * Reissue an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param reissueCertificateOrderRequest Reissue parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> reissueAsync(String resourceGroupName, String name, ReissueCertificateOrderRequestInner reissueCertificateOrderRequest, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(reissueWithServiceResponseAsync(resourceGroupName, name, reissueCertificateOrderRequest), serviceCallback);
    }

    /**
     * Reissue an existing certificate order.
     * Reissue an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param reissueCertificateOrderRequest Reissue parameters
     * @return the observable to the Object object
     */
    public Observable<Object> reissueAsync(String resourceGroupName, String name, ReissueCertificateOrderRequestInner reissueCertificateOrderRequest) {
        return reissueWithServiceResponseAsync(resourceGroupName, name, reissueCertificateOrderRequest).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Reissue an existing certificate order.
     * Reissue an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param reissueCertificateOrderRequest Reissue parameters
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> reissueWithServiceResponseAsync(String resourceGroupName, String name, ReissueCertificateOrderRequestInner reissueCertificateOrderRequest) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (reissueCertificateOrderRequest == null) {
            throw new IllegalArgumentException("Parameter reissueCertificateOrderRequest is required and cannot be null.");
        }
        Validator.validate(reissueCertificateOrderRequest);
        final String apiVersion = "2015-08-01";
        return service.reissue(resourceGroupName, name, this.client.subscriptionId(), reissueCertificateOrderRequest, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = reissueDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> reissueDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Renew an existing certificate order.
     * Renew an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param renewCertificateOrderRequest Renew parameters
     * @return the Object object if successful.
     */
    public Object renew(String resourceGroupName, String name, RenewCertificateOrderRequestInner renewCertificateOrderRequest) {
        return renewWithServiceResponseAsync(resourceGroupName, name, renewCertificateOrderRequest).toBlocking().single().getBody();
    }

    /**
     * Renew an existing certificate order.
     * Renew an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param renewCertificateOrderRequest Renew parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> renewAsync(String resourceGroupName, String name, RenewCertificateOrderRequestInner renewCertificateOrderRequest, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(renewWithServiceResponseAsync(resourceGroupName, name, renewCertificateOrderRequest), serviceCallback);
    }

    /**
     * Renew an existing certificate order.
     * Renew an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param renewCertificateOrderRequest Renew parameters
     * @return the observable to the Object object
     */
    public Observable<Object> renewAsync(String resourceGroupName, String name, RenewCertificateOrderRequestInner renewCertificateOrderRequest) {
        return renewWithServiceResponseAsync(resourceGroupName, name, renewCertificateOrderRequest).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Renew an existing certificate order.
     * Renew an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate name
     * @param renewCertificateOrderRequest Renew parameters
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> renewWithServiceResponseAsync(String resourceGroupName, String name, RenewCertificateOrderRequestInner renewCertificateOrderRequest) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (renewCertificateOrderRequest == null) {
            throw new IllegalArgumentException("Parameter renewCertificateOrderRequest is required and cannot be null.");
        }
        Validator.validate(renewCertificateOrderRequest);
        final String apiVersion = "2015-08-01";
        return service.renew(resourceGroupName, name, this.client.subscriptionId(), renewCertificateOrderRequest, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = renewDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> renewDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Resend certificate email.
     * Resend certificate email.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the Object object if successful.
     */
    public Object resendCertificateEmail(String resourceGroupName, String name) {
        return resendCertificateEmailWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Resend certificate email.
     * Resend certificate email.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> resendCertificateEmailAsync(String resourceGroupName, String name, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(resendCertificateEmailWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Resend certificate email.
     * Resend certificate email.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the Object object
     */
    public Observable<Object> resendCertificateEmailAsync(String resourceGroupName, String name) {
        return resendCertificateEmailWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Resend certificate email.
     * Resend certificate email.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> resendCertificateEmailWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.resendCertificateEmail(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = resendCertificateEmailDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> resendCertificateEmailDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieve the list of certificate actions.
     * Retrieve the list of certificate actions.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the List&lt;CertificateOrderActionInner&gt; object if successful.
     */
    public List<CertificateOrderActionInner> retrieveCertificateActions(String resourceGroupName, String name) {
        return retrieveCertificateActionsWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Retrieve the list of certificate actions.
     * Retrieve the list of certificate actions.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<CertificateOrderActionInner>> retrieveCertificateActionsAsync(String resourceGroupName, String name, final ServiceCallback<List<CertificateOrderActionInner>> serviceCallback) {
        return ServiceCall.create(retrieveCertificateActionsWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Retrieve the list of certificate actions.
     * Retrieve the list of certificate actions.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the List&lt;CertificateOrderActionInner&gt; object
     */
    public Observable<List<CertificateOrderActionInner>> retrieveCertificateActionsAsync(String resourceGroupName, String name) {
        return retrieveCertificateActionsWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<List<CertificateOrderActionInner>>, List<CertificateOrderActionInner>>() {
            @Override
            public List<CertificateOrderActionInner> call(ServiceResponse<List<CertificateOrderActionInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Retrieve the list of certificate actions.
     * Retrieve the list of certificate actions.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the List&lt;CertificateOrderActionInner&gt; object
     */
    public Observable<ServiceResponse<List<CertificateOrderActionInner>>> retrieveCertificateActionsWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.retrieveCertificateActions(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CertificateOrderActionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<CertificateOrderActionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<CertificateOrderActionInner>> clientResponse = retrieveCertificateActionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<CertificateOrderActionInner>> retrieveCertificateActionsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<List<CertificateOrderActionInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<List<CertificateOrderActionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrive email history.
     * Retrive email history.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the List&lt;CertificateEmailInner&gt; object if successful.
     */
    public List<CertificateEmailInner> retrieveCertificateEmailHistory(String resourceGroupName, String name) {
        return retrieveCertificateEmailHistoryWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Retrive email history.
     * Retrive email history.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<CertificateEmailInner>> retrieveCertificateEmailHistoryAsync(String resourceGroupName, String name, final ServiceCallback<List<CertificateEmailInner>> serviceCallback) {
        return ServiceCall.create(retrieveCertificateEmailHistoryWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Retrive email history.
     * Retrive email history.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the List&lt;CertificateEmailInner&gt; object
     */
    public Observable<List<CertificateEmailInner>> retrieveCertificateEmailHistoryAsync(String resourceGroupName, String name) {
        return retrieveCertificateEmailHistoryWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<List<CertificateEmailInner>>, List<CertificateEmailInner>>() {
            @Override
            public List<CertificateEmailInner> call(ServiceResponse<List<CertificateEmailInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Retrive email history.
     * Retrive email history.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the List&lt;CertificateEmailInner&gt; object
     */
    public Observable<ServiceResponse<List<CertificateEmailInner>>> retrieveCertificateEmailHistoryWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.retrieveCertificateEmailHistory(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CertificateEmailInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<CertificateEmailInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<CertificateEmailInner>> clientResponse = retrieveCertificateEmailHistoryDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<CertificateEmailInner>> retrieveCertificateEmailHistoryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<List<CertificateEmailInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<List<CertificateEmailInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the Object object if successful.
     */
    public Object verifyDomainOwnership(String resourceGroupName, String name) {
        return verifyDomainOwnershipWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> verifyDomainOwnershipAsync(String resourceGroupName, String name, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(verifyDomainOwnershipWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the Object object
     */
    public Observable<Object> verifyDomainOwnershipAsync(String resourceGroupName, String name) {
        return verifyDomainOwnershipWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     *
     * @param resourceGroupName Azure resource group name
     * @param name Certificate order name
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> verifyDomainOwnershipWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-08-01";
        return service.verifyDomainOwnership(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = verifyDomainOwnershipDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> verifyDomainOwnershipDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object if successful.
     */
    public PagedList<AppServiceCertificateOrderInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<AppServiceCertificateOrderInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AppServiceCertificateOrderInner>(response.getBody()) {
            @Override
            public Page<AppServiceCertificateOrderInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<AppServiceCertificateOrderInner>> listNextAsync(final String nextPageLink, final ServiceCall<List<AppServiceCertificateOrderInner>> serviceCall, final ListOperationCallback<AppServiceCertificateOrderInner> serviceCallback) {
        return AzureServiceCall.create(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<Page<AppServiceCertificateOrderInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Page<AppServiceCertificateOrderInner>>() {
                @Override
                public Page<AppServiceCertificateOrderInner> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     * Lists all domains in a subscription.
     *
    ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AppServiceCertificateOrderInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<AppServiceCertificateOrderInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<AppServiceCertificateOrderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object if successful.
     */
    public PagedList<AppServiceCertificateOrderInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<AppServiceCertificateOrderInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AppServiceCertificateOrderInner>(response.getBody()) {
            @Override
            public Page<AppServiceCertificateOrderInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<AppServiceCertificateOrderInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceCall<List<AppServiceCertificateOrderInner>> serviceCall, final ListOperationCallback<AppServiceCertificateOrderInner> serviceCallback) {
        return AzureServiceCall.create(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<Page<AppServiceCertificateOrderInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Page<AppServiceCertificateOrderInner>>() {
                @Override
                public Page<AppServiceCertificateOrderInner> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;AppServiceCertificateOrderInner&gt; object
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AppServiceCertificateOrderInner>>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(ServiceResponse<Page<AppServiceCertificateOrderInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     *
    ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;AppServiceCertificateOrderInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listByResourceGroupNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateOrderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AppServiceCertificateOrderInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AppServiceCertificateOrderInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<AppServiceCertificateOrderInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<AppServiceCertificateOrderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;AppServiceCertificateInner&gt; object if successful.
     */
    public PagedList<AppServiceCertificateInner> listCertificatesNext(final String nextPageLink) {
        ServiceResponse<Page<AppServiceCertificateInner>> response = listCertificatesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AppServiceCertificateInner>(response.getBody()) {
            @Override
            public Page<AppServiceCertificateInner> nextPage(String nextPageLink) {
                return listCertificatesNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<AppServiceCertificateInner>> listCertificatesNextAsync(final String nextPageLink, final ServiceCall<List<AppServiceCertificateInner>> serviceCall, final ListOperationCallback<AppServiceCertificateInner> serviceCallback) {
        return AzureServiceCall.create(
            listCertificatesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AppServiceCertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> call(String nextPageLink) {
                    return listCertificatesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;AppServiceCertificateInner&gt; object
     */
    public Observable<Page<AppServiceCertificateInner>> listCertificatesNextAsync(final String nextPageLink) {
        return listCertificatesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AppServiceCertificateInner>>, Page<AppServiceCertificateInner>>() {
                @Override
                public Page<AppServiceCertificateInner> call(ServiceResponse<Page<AppServiceCertificateInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;AppServiceCertificateInner&gt; object
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> listCertificatesNextWithServiceResponseAsync(final String nextPageLink) {
        return listCertificatesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AppServiceCertificateInner>>, Observable<ServiceResponse<Page<AppServiceCertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> call(ServiceResponse<Page<AppServiceCertificateInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listCertificatesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time).
     *
    ServiceResponse<PageImpl<AppServiceCertificateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;AppServiceCertificateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> listCertificatesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listCertificatesNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AppServiceCertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AppServiceCertificateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AppServiceCertificateInner>> result = listCertificatesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AppServiceCertificateInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AppServiceCertificateInner>> listCertificatesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<AppServiceCertificateInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<AppServiceCertificateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
