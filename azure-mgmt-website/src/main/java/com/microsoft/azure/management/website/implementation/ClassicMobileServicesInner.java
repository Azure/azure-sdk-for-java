/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.website.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ClassicMobileServices.
 */
public final class ClassicMobileServicesInner {
    /** The Retrofit service to perform REST calls. */
    private ClassicMobileServicesService service;
    /** The service client containing this operation class. */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of ClassicMobileServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ClassicMobileServicesInner(Retrofit retrofit, WebSiteManagementClientImpl client) {
        this.service = retrofit.create(ClassicMobileServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ClassicMobileServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ClassicMobileServicesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices")
        Observable<Response<ResponseBody>> getClassicMobileServices(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}")
        Observable<Response<ResponseBody>> getClassicMobileService(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteClassicMobileService(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getClassicMobileServicesNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param resourceGroupName Name of resource group
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PagedList&lt;ClassicMobileServiceInner&gt; object if successful.
     */
    public PagedList<ClassicMobileServiceInner> getClassicMobileServices(final String resourceGroupName) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<ClassicMobileServiceInner>> response = getClassicMobileServicesSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ClassicMobileServiceInner>(response.getBody()) {
            @Override
            public Page<ClassicMobileServiceInner> nextPage(String nextPageLink) throws RestException, IOException {
                return getClassicMobileServicesNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param resourceGroupName Name of resource group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ClassicMobileServiceInner>> getClassicMobileServicesAsync(final String resourceGroupName, final ListOperationCallback<ClassicMobileServiceInner> serviceCallback) {
        return AzureServiceCall.create(
            getClassicMobileServicesSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ClassicMobileServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> call(String nextPageLink) {
                    return getClassicMobileServicesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param resourceGroupName Name of resource group
     * @return the observable to the PagedList&lt;ClassicMobileServiceInner&gt; object
     */
    public Observable<Page<ClassicMobileServiceInner>> getClassicMobileServicesAsync(final String resourceGroupName) {
        return getClassicMobileServicesWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ClassicMobileServiceInner>>, Page<ClassicMobileServiceInner>>() {
                @Override
                public Page<ClassicMobileServiceInner> call(ServiceResponse<Page<ClassicMobileServiceInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param resourceGroupName Name of resource group
     * @return the observable to the PagedList&lt;ClassicMobileServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> getClassicMobileServicesWithServiceResponseAsync(final String resourceGroupName) {
        return getClassicMobileServicesSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ClassicMobileServiceInner>>, Observable<ServiceResponse<Page<ClassicMobileServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> call(ServiceResponse<Page<ClassicMobileServiceInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getClassicMobileServicesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all mobile services in a resource group.
     *
    ServiceResponse<PageImpl<ClassicMobileServiceInner>> * @param resourceGroupName Name of resource group
     * @return the PagedList&lt;ClassicMobileServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> getClassicMobileServicesSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getClassicMobileServices(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ClassicMobileServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ClassicMobileServiceInner>> result = getClassicMobileServicesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ClassicMobileServiceInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ClassicMobileServiceInner>> getClassicMobileServicesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ClassicMobileServiceInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ClassicMobileServiceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ClassicMobileServiceInner object if successful.
     */
    public ClassicMobileServiceInner getClassicMobileService(String resourceGroupName, String name) throws CloudException, IOException, IllegalArgumentException {
        return getClassicMobileServiceWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Get a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ClassicMobileServiceInner> getClassicMobileServiceAsync(String resourceGroupName, String name, final ServiceCallback<ClassicMobileServiceInner> serviceCallback) {
        return ServiceCall.create(getClassicMobileServiceWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Get a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @return the observable to the ClassicMobileServiceInner object
     */
    public Observable<ClassicMobileServiceInner> getClassicMobileServiceAsync(String resourceGroupName, String name) {
        return getClassicMobileServiceWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<ClassicMobileServiceInner>, ClassicMobileServiceInner>() {
            @Override
            public ClassicMobileServiceInner call(ServiceResponse<ClassicMobileServiceInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @return the observable to the ClassicMobileServiceInner object
     */
    public Observable<ServiceResponse<ClassicMobileServiceInner>> getClassicMobileServiceWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getClassicMobileService(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassicMobileServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<ClassicMobileServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassicMobileServiceInner> clientResponse = getClassicMobileServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClassicMobileServiceInner> getClassicMobileServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ClassicMobileServiceInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ClassicMobileServiceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object if successful.
     */
    public Object deleteClassicMobileService(String resourceGroupName, String name) throws CloudException, IOException, IllegalArgumentException {
        return deleteClassicMobileServiceWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Delete a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> deleteClassicMobileServiceAsync(String resourceGroupName, String name, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(deleteClassicMobileServiceWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Delete a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @return the observable to the Object object
     */
    public Observable<Object> deleteClassicMobileServiceAsync(String resourceGroupName, String name) {
        return deleteClassicMobileServiceWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Delete a mobile service.
     *
     * @param resourceGroupName Name of resource group
     * @param name Name of mobile service
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteClassicMobileServiceWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteClassicMobileService(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteClassicMobileServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteClassicMobileServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PagedList&lt;ClassicMobileServiceInner&gt; object if successful.
     */
    public PagedList<ClassicMobileServiceInner> getClassicMobileServicesNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<ClassicMobileServiceInner>> response = getClassicMobileServicesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ClassicMobileServiceInner>(response.getBody()) {
            @Override
            public Page<ClassicMobileServiceInner> nextPage(String nextPageLink) throws RestException, IOException {
                return getClassicMobileServicesNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ClassicMobileServiceInner>> getClassicMobileServicesNextAsync(final String nextPageLink, final ServiceCall<List<ClassicMobileServiceInner>> serviceCall, final ListOperationCallback<ClassicMobileServiceInner> serviceCallback) {
        return AzureServiceCall.create(
            getClassicMobileServicesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ClassicMobileServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> call(String nextPageLink) {
                    return getClassicMobileServicesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ClassicMobileServiceInner&gt; object
     */
    public Observable<Page<ClassicMobileServiceInner>> getClassicMobileServicesNextAsync(final String nextPageLink) {
        return getClassicMobileServicesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ClassicMobileServiceInner>>, Page<ClassicMobileServiceInner>>() {
                @Override
                public Page<ClassicMobileServiceInner> call(ServiceResponse<Page<ClassicMobileServiceInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get all mobile services in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ClassicMobileServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> getClassicMobileServicesNextWithServiceResponseAsync(final String nextPageLink) {
        return getClassicMobileServicesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ClassicMobileServiceInner>>, Observable<ServiceResponse<Page<ClassicMobileServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> call(ServiceResponse<Page<ClassicMobileServiceInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getClassicMobileServicesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all mobile services in a resource group.
     *
    ServiceResponse<PageImpl<ClassicMobileServiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ClassicMobileServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> getClassicMobileServicesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getClassicMobileServicesNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ClassicMobileServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ClassicMobileServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ClassicMobileServiceInner>> result = getClassicMobileServicesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ClassicMobileServiceInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ClassicMobileServiceInner>> getClassicMobileServicesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ClassicMobileServiceInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ClassicMobileServiceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
