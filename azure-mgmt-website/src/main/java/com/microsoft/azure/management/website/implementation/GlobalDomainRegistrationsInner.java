/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.website.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in GlobalDomainRegistrations.
 */
public final class GlobalDomainRegistrationsInner {
    /** The Retrofit service to perform REST calls. */
    private GlobalDomainRegistrationsService service;
    /** The service client containing this operation class. */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of GlobalDomainRegistrationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public GlobalDomainRegistrationsInner(Retrofit retrofit, WebSiteManagementClientImpl client) {
        this.service = retrofit.create(GlobalDomainRegistrationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for GlobalDomainRegistrations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GlobalDomainRegistrationsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains")
        Observable<Response<ResponseBody>> getAllDomains(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest")
        Observable<Response<ResponseBody>> getDomainControlCenterSsoRequest(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation")
        Observable<Response<ResponseBody>> validateDomainPurchaseInformation(@Path("subscriptionId") String subscriptionId, @Body DomainRegistrationInputInner domainRegistrationInput, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability")
        Observable<Response<ResponseBody>> checkDomainAvailability(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body NameIdentifierInner identifier, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations")
        Observable<Response<ResponseBody>> listDomainRecommendations(@Path("subscriptionId") String subscriptionId, @Body DomainRecommendationSearchParametersInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getAllDomainsNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("{nextLink}")
        Observable<Response<ResponseBody>> listDomainRecommendationsNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all domains in a subscription.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PagedList&lt;DomainInner&gt; object if successful.
     */
    public PagedList<DomainInner> getAllDomains() throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<DomainInner>> response = getAllDomainsSinglePageAsync().toBlocking().single();
        return new PagedList<DomainInner>(response.getBody()) {
            @Override
            public Page<DomainInner> nextPage(String nextPageLink) throws RestException, IOException {
                return getAllDomainsNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all domains in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<DomainInner>> getAllDomainsAsync(final ListOperationCallback<DomainInner> serviceCallback) {
        return AzureServiceCall.create(
            getAllDomainsSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<DomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainInner>>> call(String nextPageLink) {
                    return getAllDomainsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all domains in a subscription.
     *
     * @return the observable to the PagedList&lt;DomainInner&gt; object
     */
    public Observable<Page<DomainInner>> getAllDomainsAsync() {
        return getAllDomainsWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<DomainInner>>, Page<DomainInner>>() {
                @Override
                public Page<DomainInner> call(ServiceResponse<Page<DomainInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     *
     * @return the observable to the PagedList&lt;DomainInner&gt; object
     */
    public Observable<ServiceResponse<Page<DomainInner>>> getAllDomainsWithServiceResponseAsync() {
        return getAllDomainsSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<DomainInner>>, Observable<ServiceResponse<Page<DomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainInner>>> call(ServiceResponse<Page<DomainInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getAllDomainsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     *
     * @return the PagedList&lt;DomainInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DomainInner>>> getAllDomainsSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getAllDomains(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DomainInner>> result = getAllDomainsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DomainInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DomainInner>> getAllDomainsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<DomainInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<DomainInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the DomainControlCenterSsoRequestInner object if successful.
     */
    public DomainControlCenterSsoRequestInner getDomainControlCenterSsoRequest() throws CloudException, IOException, IllegalArgumentException {
        return getDomainControlCenterSsoRequestWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DomainControlCenterSsoRequestInner> getDomainControlCenterSsoRequestAsync(final ServiceCallback<DomainControlCenterSsoRequestInner> serviceCallback) {
        return ServiceCall.create(getDomainControlCenterSsoRequestWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @return the observable to the DomainControlCenterSsoRequestInner object
     */
    public Observable<DomainControlCenterSsoRequestInner> getDomainControlCenterSsoRequestAsync() {
        return getDomainControlCenterSsoRequestWithServiceResponseAsync().map(new Func1<ServiceResponse<DomainControlCenterSsoRequestInner>, DomainControlCenterSsoRequestInner>() {
            @Override
            public DomainControlCenterSsoRequestInner call(ServiceResponse<DomainControlCenterSsoRequestInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @return the observable to the DomainControlCenterSsoRequestInner object
     */
    public Observable<ServiceResponse<DomainControlCenterSsoRequestInner>> getDomainControlCenterSsoRequestWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getDomainControlCenterSsoRequest(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DomainControlCenterSsoRequestInner>>>() {
                @Override
                public Observable<ServiceResponse<DomainControlCenterSsoRequestInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DomainControlCenterSsoRequestInner> clientResponse = getDomainControlCenterSsoRequestDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DomainControlCenterSsoRequestInner> getDomainControlCenterSsoRequestDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DomainControlCenterSsoRequestInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<DomainControlCenterSsoRequestInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object if successful.
     */
    public Object validateDomainPurchaseInformation(DomainRegistrationInputInner domainRegistrationInput) throws CloudException, IOException, IllegalArgumentException {
        return validateDomainPurchaseInformationWithServiceResponseAsync(domainRegistrationInput).toBlocking().single().getBody();
    }

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> validateDomainPurchaseInformationAsync(DomainRegistrationInputInner domainRegistrationInput, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(validateDomainPurchaseInformationWithServiceResponseAsync(domainRegistrationInput), serviceCallback);
    }

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information
     * @return the observable to the Object object
     */
    public Observable<Object> validateDomainPurchaseInformationAsync(DomainRegistrationInputInner domainRegistrationInput) {
        return validateDomainPurchaseInformationWithServiceResponseAsync(domainRegistrationInput).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> validateDomainPurchaseInformationWithServiceResponseAsync(DomainRegistrationInputInner domainRegistrationInput) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (domainRegistrationInput == null) {
            throw new IllegalArgumentException("Parameter domainRegistrationInput is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(domainRegistrationInput);
        return service.validateDomainPurchaseInformation(this.client.subscriptionId(), domainRegistrationInput, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = validateDomainPurchaseInformationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> validateDomainPurchaseInformationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the DomainAvailablilityCheckResultInner object if successful.
     */
    public DomainAvailablilityCheckResultInner checkDomainAvailability() throws CloudException, IOException, IllegalArgumentException {
        return checkDomainAvailabilityWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DomainAvailablilityCheckResultInner> checkDomainAvailabilityAsync(final ServiceCallback<DomainAvailablilityCheckResultInner> serviceCallback) {
        return ServiceCall.create(checkDomainAvailabilityWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @return the observable to the DomainAvailablilityCheckResultInner object
     */
    public Observable<DomainAvailablilityCheckResultInner> checkDomainAvailabilityAsync() {
        return checkDomainAvailabilityWithServiceResponseAsync().map(new Func1<ServiceResponse<DomainAvailablilityCheckResultInner>, DomainAvailablilityCheckResultInner>() {
            @Override
            public DomainAvailablilityCheckResultInner call(ServiceResponse<DomainAvailablilityCheckResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @return the observable to the DomainAvailablilityCheckResultInner object
     */
    public Observable<ServiceResponse<DomainAvailablilityCheckResultInner>> checkDomainAvailabilityWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String name = null;
        NameIdentifierInner identifier = new NameIdentifierInner();
        identifier.withName(null);
        return service.checkDomainAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), identifier, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DomainAvailablilityCheckResultInner>>>() {
                @Override
                public Observable<ServiceResponse<DomainAvailablilityCheckResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DomainAvailablilityCheckResultInner> clientResponse = checkDomainAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @param name Name of the object
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the DomainAvailablilityCheckResultInner object if successful.
     */
    public DomainAvailablilityCheckResultInner checkDomainAvailability(String name) throws CloudException, IOException, IllegalArgumentException {
        return checkDomainAvailabilityWithServiceResponseAsync(name).toBlocking().single().getBody();
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @param name Name of the object
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DomainAvailablilityCheckResultInner> checkDomainAvailabilityAsync(String name, final ServiceCallback<DomainAvailablilityCheckResultInner> serviceCallback) {
        return ServiceCall.create(checkDomainAvailabilityWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @param name Name of the object
     * @return the observable to the DomainAvailablilityCheckResultInner object
     */
    public Observable<DomainAvailablilityCheckResultInner> checkDomainAvailabilityAsync(String name) {
        return checkDomainAvailabilityWithServiceResponseAsync(name).map(new Func1<ServiceResponse<DomainAvailablilityCheckResultInner>, DomainAvailablilityCheckResultInner>() {
            @Override
            public DomainAvailablilityCheckResultInner call(ServiceResponse<DomainAvailablilityCheckResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Checks if a domain is available for registration.
     *
     * @param name Name of the object
     * @return the observable to the DomainAvailablilityCheckResultInner object
     */
    public Observable<ServiceResponse<DomainAvailablilityCheckResultInner>> checkDomainAvailabilityWithServiceResponseAsync(String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        NameIdentifierInner identifier = new NameIdentifierInner();
        identifier.withName(name);
        return service.checkDomainAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), identifier, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DomainAvailablilityCheckResultInner>>>() {
                @Override
                public Observable<ServiceResponse<DomainAvailablilityCheckResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DomainAvailablilityCheckResultInner> clientResponse = checkDomainAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DomainAvailablilityCheckResultInner> checkDomainAvailabilityDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DomainAvailablilityCheckResultInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<DomainAvailablilityCheckResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PagedList&lt;NameIdentifierInner&gt; object if successful.
     */
    public PagedList<NameIdentifierInner> listDomainRecommendations(final DomainRecommendationSearchParametersInner parameters) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<NameIdentifierInner>> response = listDomainRecommendationsSinglePageAsync(parameters).toBlocking().single();
        return new PagedList<NameIdentifierInner>(response.getBody()) {
            @Override
            public Page<NameIdentifierInner> nextPage(String nextPageLink) throws RestException, IOException {
                return listDomainRecommendationsNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<NameIdentifierInner>> listDomainRecommendationsAsync(final DomainRecommendationSearchParametersInner parameters, final ListOperationCallback<NameIdentifierInner> serviceCallback) {
        return AzureServiceCall.create(
            listDomainRecommendationsSinglePageAsync(parameters),
            new Func1<String, Observable<ServiceResponse<Page<NameIdentifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NameIdentifierInner>>> call(String nextPageLink) {
                    return listDomainRecommendationsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters
     * @return the observable to the PagedList&lt;NameIdentifierInner&gt; object
     */
    public Observable<Page<NameIdentifierInner>> listDomainRecommendationsAsync(final DomainRecommendationSearchParametersInner parameters) {
        return listDomainRecommendationsWithServiceResponseAsync(parameters)
            .map(new Func1<ServiceResponse<Page<NameIdentifierInner>>, Page<NameIdentifierInner>>() {
                @Override
                public Page<NameIdentifierInner> call(ServiceResponse<Page<NameIdentifierInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters
     * @return the observable to the PagedList&lt;NameIdentifierInner&gt; object
     */
    public Observable<ServiceResponse<Page<NameIdentifierInner>>> listDomainRecommendationsWithServiceResponseAsync(final DomainRecommendationSearchParametersInner parameters) {
        return listDomainRecommendationsSinglePageAsync(parameters)
            .concatMap(new Func1<ServiceResponse<Page<NameIdentifierInner>>, Observable<ServiceResponse<Page<NameIdentifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NameIdentifierInner>>> call(ServiceResponse<Page<NameIdentifierInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDomainRecommendationsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists domain recommendations based on keywords.
     *
    ServiceResponse<PageImpl<NameIdentifierInner>> * @param parameters Domain recommendation search parameters
     * @return the PagedList&lt;NameIdentifierInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NameIdentifierInner>>> listDomainRecommendationsSinglePageAsync(final DomainRecommendationSearchParametersInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.listDomainRecommendations(this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NameIdentifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NameIdentifierInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NameIdentifierInner>> result = listDomainRecommendationsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NameIdentifierInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NameIdentifierInner>> listDomainRecommendationsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<NameIdentifierInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<NameIdentifierInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PagedList&lt;DomainInner&gt; object if successful.
     */
    public PagedList<DomainInner> getAllDomainsNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<DomainInner>> response = getAllDomainsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DomainInner>(response.getBody()) {
            @Override
            public Page<DomainInner> nextPage(String nextPageLink) throws RestException, IOException {
                return getAllDomainsNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<DomainInner>> getAllDomainsNextAsync(final String nextPageLink, final ServiceCall<List<DomainInner>> serviceCall, final ListOperationCallback<DomainInner> serviceCallback) {
        return AzureServiceCall.create(
            getAllDomainsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainInner>>> call(String nextPageLink) {
                    return getAllDomainsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;DomainInner&gt; object
     */
    public Observable<Page<DomainInner>> getAllDomainsNextAsync(final String nextPageLink) {
        return getAllDomainsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DomainInner>>, Page<DomainInner>>() {
                @Override
                public Page<DomainInner> call(ServiceResponse<Page<DomainInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;DomainInner&gt; object
     */
    public Observable<ServiceResponse<Page<DomainInner>>> getAllDomainsNextWithServiceResponseAsync(final String nextPageLink) {
        return getAllDomainsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DomainInner>>, Observable<ServiceResponse<Page<DomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainInner>>> call(ServiceResponse<Page<DomainInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getAllDomainsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all domains in a subscription.
     *
    ServiceResponse<PageImpl<DomainInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;DomainInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DomainInner>>> getAllDomainsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getAllDomainsNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DomainInner>> result = getAllDomainsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DomainInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DomainInner>> getAllDomainsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<DomainInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<DomainInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the PagedList&lt;NameIdentifierInner&gt; object if successful.
     */
    public PagedList<NameIdentifierInner> listDomainRecommendationsNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<NameIdentifierInner>> response = listDomainRecommendationsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<NameIdentifierInner>(response.getBody()) {
            @Override
            public Page<NameIdentifierInner> nextPage(String nextPageLink) throws RestException, IOException {
                return listDomainRecommendationsNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<NameIdentifierInner>> listDomainRecommendationsNextAsync(final String nextPageLink, final ServiceCall<List<NameIdentifierInner>> serviceCall, final ListOperationCallback<NameIdentifierInner> serviceCallback) {
        return AzureServiceCall.create(
            listDomainRecommendationsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<NameIdentifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NameIdentifierInner>>> call(String nextPageLink) {
                    return listDomainRecommendationsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;NameIdentifierInner&gt; object
     */
    public Observable<Page<NameIdentifierInner>> listDomainRecommendationsNextAsync(final String nextPageLink) {
        return listDomainRecommendationsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<NameIdentifierInner>>, Page<NameIdentifierInner>>() {
                @Override
                public Page<NameIdentifierInner> call(ServiceResponse<Page<NameIdentifierInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;NameIdentifierInner&gt; object
     */
    public Observable<ServiceResponse<Page<NameIdentifierInner>>> listDomainRecommendationsNextWithServiceResponseAsync(final String nextPageLink) {
        return listDomainRecommendationsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<NameIdentifierInner>>, Observable<ServiceResponse<Page<NameIdentifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NameIdentifierInner>>> call(ServiceResponse<Page<NameIdentifierInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDomainRecommendationsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists domain recommendations based on keywords.
     *
    ServiceResponse<PageImpl<NameIdentifierInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;NameIdentifierInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NameIdentifierInner>>> listDomainRecommendationsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listDomainRecommendationsNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NameIdentifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NameIdentifierInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NameIdentifierInner>> result = listDomainRecommendationsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NameIdentifierInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NameIdentifierInner>> listDomainRecommendationsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<NameIdentifierInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<NameIdentifierInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
