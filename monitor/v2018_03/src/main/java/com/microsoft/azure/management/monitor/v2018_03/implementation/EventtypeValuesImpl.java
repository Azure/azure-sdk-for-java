/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.monitor.v2018_03.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.monitor.v2018_03.EventtypeValues;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.monitor.v2018_03.EventData;

class EventtypeValuesImpl extends WrapperImpl<ActivityLogsInner> implements EventtypeValues {
    private final MonitorManager manager;

    EventtypeValuesImpl(MonitorManager manager) {
        super(manager.inner().activityLogs());
        this.manager = manager;
    }

    public MonitorManager manager() {
        return this.manager;
    }

    private Observable<Page<EventDataInner>> listNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        ActivityLogsInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<EventDataInner>, Observable<Page<EventDataInner>>>() {
            @Override
            public Observable<Page<EventDataInner>> call(Page<EventDataInner> page) {
                return Observable.just(page).concatWith(listNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<EventData> listAsync() {
        ActivityLogsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<EventDataInner>, Observable<Page<EventDataInner>>>() {
            @Override
            public Observable<Page<EventDataInner>> call(Page<EventDataInner> page) {
                return listNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<EventDataInner>, Iterable<EventDataInner>>() {
            @Override
            public Iterable<EventDataInner> call(Page<EventDataInner> page) {
                return page.items();
            }
       })
        .map(new Func1<EventDataInner, EventData>() {
            @Override
            public EventData call(EventDataInner inner) {
                return new EventDataImpl(inner, manager());
            }
       });
    }

}
