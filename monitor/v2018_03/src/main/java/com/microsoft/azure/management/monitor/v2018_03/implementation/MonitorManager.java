/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2018_03.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.monitor.v2018_03.Incidents;
import com.microsoft.azure.management.monitor.v2018_03.Status;
import com.microsoft.azure.management.monitor.v2018_03.Operations;
import com.microsoft.azure.management.monitor.v2018_03.DiagnosticSettingsCategories;
import com.microsoft.azure.management.monitor.v2018_03.EventtypeValues;
import com.microsoft.azure.management.monitor.v2018_03.Eventtypes;
import com.microsoft.azure.management.monitor.v2018_03.EventCategories;
import com.microsoft.azure.management.monitor.v2018_03.EventtypeValuesOperations;
import com.microsoft.azure.management.monitor.v2018_03.EventtypesOperations;
import com.microsoft.azure.management.monitor.v2018_03.MetricDefinitions;
import com.microsoft.azure.management.monitor.v2018_03.Metrics;
import com.microsoft.azure.management.monitor.v2018_03.MetricBaselines;
import com.microsoft.azure.management.monitor.v2018_03.Autoscalesettings;
import com.microsoft.azure.management.monitor.v2018_03.Alertrules;
import com.microsoft.azure.management.monitor.v2018_03.ActionGroups;
import com.microsoft.azure.management.monitor.v2018_03.ActivityLogAlerts;
import com.microsoft.azure.management.monitor.v2018_03.MetricAlerts;
import com.microsoft.azure.management.monitor.v2018_03.ScheduledQueryRules;
import com.microsoft.azure.management.monitor.v2018_03.Logprofiles;
import com.microsoft.azure.management.monitor.v2018_03.DiagnosticSettings;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Insights resource management.
 */
public final class MonitorManager extends ManagerCore<MonitorManager, MonitorManagementClientImpl> {
    private Incidents incidents;
    private Status status;
    private Operations operations;
    private DiagnosticSettingsCategories diagnosticSettingsCategories;
    private EventtypeValues eventtypeValues;
    private Eventtypes eventtypes;
    private EventCategories eventCategories;
    private EventtypeValuesOperations eventtypeValuesOperations;
    private EventtypesOperations eventtypesOperations;
    private MetricDefinitions metricDefinitions;
    private Metrics metrics;
    private MetricBaselines metricBaselines;
    private Autoscalesettings autoscalesettings;
    private Alertrules alertrules;
    private ActionGroups actionGroups;
    private ActivityLogAlerts activityLogAlerts;
    private MetricAlerts metricAlerts;
    private ScheduledQueryRules scheduledQueryRules;
    private Logprofiles logprofiles;
    private DiagnosticSettings diagnosticSettings;
    /**
    * Get a Configurable instance that can be used to create MonitorManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new MonitorManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of MonitorManager that exposes Insights resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the MonitorManager
    */
    public static MonitorManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new MonitorManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of MonitorManager that exposes Insights resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the MonitorManager
    */
    public static MonitorManager authenticate(RestClient restClient, String subscriptionId) {
        return new MonitorManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of MonitorManager that exposes Insights management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Insights management API entry points that work across subscriptions
        */
        MonitorManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Incidents.
     */
    public Incidents incidents() {
        if (this.incidents == null) {
            this.incidents = new IncidentsImpl(this);
        }
        return this.incidents;
    }

    /**
     * @return Entry point to manage Status.
     */
    public Status status() {
        if (this.status == null) {
            this.status = new StatusImpl(this);
        }
        return this.status;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage DiagnosticSettingsCategories.
     */
    public DiagnosticSettingsCategories diagnosticSettingsCategories() {
        if (this.diagnosticSettingsCategories == null) {
            this.diagnosticSettingsCategories = new DiagnosticSettingsCategoriesImpl(this);
        }
        return this.diagnosticSettingsCategories;
    }

    /**
     * @return Entry point to manage EventtypeValues.
     */
    public EventtypeValues eventtypeValues() {
        if (this.eventtypeValues == null) {
            this.eventtypeValues = new EventtypeValuesImpl(this);
        }
        return this.eventtypeValues;
    }

    /**
     * @return Entry point to manage Eventtypes.
     */
    public Eventtypes eventtypes() {
        if (this.eventtypes == null) {
            this.eventtypes = new EventtypesImpl(this);
        }
        return this.eventtypes;
    }

    /**
     * @return Entry point to manage EventCategories.
     */
    public EventCategories eventCategories() {
        if (this.eventCategories == null) {
            this.eventCategories = new EventCategoriesImpl(this);
        }
        return this.eventCategories;
    }

    /**
     * @return Entry point to manage EventtypeValuesOperations.
     */
    public EventtypeValuesOperations eventtypeValuesOperations() {
        if (this.eventtypeValuesOperations == null) {
            this.eventtypeValuesOperations = new EventtypeValuesOperationsImpl(this);
        }
        return this.eventtypeValuesOperations;
    }

    /**
     * @return Entry point to manage EventtypesOperations.
     */
    public EventtypesOperations eventtypesOperations() {
        if (this.eventtypesOperations == null) {
            this.eventtypesOperations = new EventtypesOperationsImpl(this);
        }
        return this.eventtypesOperations;
    }

    /**
     * @return Entry point to manage MetricDefinitions.
     */
    public MetricDefinitions metricDefinitions() {
        if (this.metricDefinitions == null) {
            this.metricDefinitions = new MetricDefinitionsImpl(this);
        }
        return this.metricDefinitions;
    }

    /**
     * @return Entry point to manage Metrics.
     */
    public Metrics metrics() {
        if (this.metrics == null) {
            this.metrics = new MetricsImpl(this);
        }
        return this.metrics;
    }

    /**
     * @return Entry point to manage MetricBaselines.
     */
    public MetricBaselines metricBaselines() {
        if (this.metricBaselines == null) {
            this.metricBaselines = new MetricBaselinesImpl(this);
        }
        return this.metricBaselines;
    }

    /**
     * @return Entry point to manage Autoscalesettings.
     */
    public Autoscalesettings autoscalesettings() {
        if (this.autoscalesettings == null) {
            this.autoscalesettings = new AutoscalesettingsImpl(this);
        }
        return this.autoscalesettings;
    }

    /**
     * @return Entry point to manage Alertrules.
     */
    public Alertrules alertrules() {
        if (this.alertrules == null) {
            this.alertrules = new AlertrulesImpl(this);
        }
        return this.alertrules;
    }

    /**
     * @return Entry point to manage ActionGroups.
     */
    public ActionGroups actionGroups() {
        if (this.actionGroups == null) {
            this.actionGroups = new ActionGroupsImpl(this);
        }
        return this.actionGroups;
    }

    /**
     * @return Entry point to manage ActivityLogAlerts.
     */
    public ActivityLogAlerts activityLogAlerts() {
        if (this.activityLogAlerts == null) {
            this.activityLogAlerts = new ActivityLogAlertsImpl(this);
        }
        return this.activityLogAlerts;
    }

    /**
     * @return Entry point to manage MetricAlerts.
     */
    public MetricAlerts metricAlerts() {
        if (this.metricAlerts == null) {
            this.metricAlerts = new MetricAlertsImpl(this);
        }
        return this.metricAlerts;
    }

    /**
     * @return Entry point to manage ScheduledQueryRules.
     */
    public ScheduledQueryRules scheduledQueryRules() {
        if (this.scheduledQueryRules == null) {
            this.scheduledQueryRules = new ScheduledQueryRulesImpl(this);
        }
        return this.scheduledQueryRules;
    }

    /**
     * @return Entry point to manage Logprofiles.
     */
    public Logprofiles logprofiles() {
        if (this.logprofiles == null) {
            this.logprofiles = new LogprofilesImpl(this);
        }
        return this.logprofiles;
    }

    /**
     * @return Entry point to manage DiagnosticSettings.
     */
    public DiagnosticSettings diagnosticSettings() {
        if (this.diagnosticSettings == null) {
            this.diagnosticSettings = new DiagnosticSettingsImpl(this);
        }
        return this.diagnosticSettings;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public MonitorManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return MonitorManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private MonitorManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new MonitorManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
