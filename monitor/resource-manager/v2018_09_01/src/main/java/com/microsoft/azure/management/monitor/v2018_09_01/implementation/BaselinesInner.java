/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2018_09_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.monitor.v2018_09_01.ErrorResponseException;
import com.microsoft.azure.management.monitor.v2018_09_01.ResultType;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import org.joda.time.Period;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Baselines.
 */
public class BaselinesInner {
    /** The Retrofit service to perform REST calls. */
    private BaselinesService service;
    /** The service client containing this operation class. */
    private MonitorManagementClientImpl client;

    /**
     * Initializes an instance of BaselinesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BaselinesInner(Retrofit retrofit, MonitorManagementClientImpl client) {
        this.service = retrofit.create(BaselinesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Baselines to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BaselinesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2018_09_01.Baselines get" })
        @GET("{resourceUri}/providers/microsoft.insights/baseline")
        Observable<Response<ResponseBody>> get(@Path(value = "resourceUri", encoded = true) String resourceUri, @Query("metricnames") String metricnames, @Query("timespan") String timespan, @Query("interval") Period interval, @Query("aggregation") String aggregation, @Query("sensitivities") String sensitivities, @Query("resultType") ResultType resultType1, @Query("api-version") String apiVersion, @Query("metricnamespace") String metricnamespace, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BaselineResponseInner object if successful.
     */
    public BaselineResponseInner get(String resourceUri) {
        return getWithServiceResponseAsync(resourceUri).toBlocking().single().body();
    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BaselineResponseInner> getAsync(String resourceUri, final ServiceCallback<BaselineResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceUri), serviceCallback);
    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BaselineResponseInner object
     */
    public Observable<BaselineResponseInner> getAsync(String resourceUri) {
        return getWithServiceResponseAsync(resourceUri).map(new Func1<ServiceResponse<BaselineResponseInner>, BaselineResponseInner>() {
            @Override
            public BaselineResponseInner call(ServiceResponse<BaselineResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BaselineResponseInner object
     */
    public Observable<ServiceResponse<BaselineResponseInner>> getWithServiceResponseAsync(String resourceUri) {
        if (resourceUri == null) {
            throw new IllegalArgumentException("Parameter resourceUri is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String metricnames = null;
        final String timespan = null;
        final Period interval = null;
        final String aggregation = null;
        final String sensitivities = null;
        final ResultType resultType = null;
        final String metricnamespace = null;
        final String filter = null;
        return service.get(resourceUri, metricnames, timespan, interval, aggregation, sensitivities, resultType, this.client.apiVersion(), metricnamespace, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BaselineResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<BaselineResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BaselineResponseInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param timespan The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
     * @param interval The interval (i.e. timegrain) of the query.
     * @param aggregation The aggregation type of the metric to retrieve the baseline for.
     * @param sensitivities The list of sensitivities (comma separated) to retrieve.
     * @param resultType Allows retrieving only metadata of the baseline. On data request all information is retrieved. Possible values include: 'Data', 'Metadata'
     * @param metricnamespace Metric namespace to query metric definitions for.
     * @param filter The **$filter** is used to describe a set of dimensions with their concrete values which produce a specific metric's time series, in which a baseline is requested for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BaselineResponseInner object if successful.
     */
    public BaselineResponseInner get(String resourceUri, String metricnames, String timespan, Period interval, String aggregation, String sensitivities, ResultType resultType, String metricnamespace, String filter) {
        return getWithServiceResponseAsync(resourceUri, metricnames, timespan, interval, aggregation, sensitivities, resultType, metricnamespace, filter).toBlocking().single().body();
    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param timespan The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
     * @param interval The interval (i.e. timegrain) of the query.
     * @param aggregation The aggregation type of the metric to retrieve the baseline for.
     * @param sensitivities The list of sensitivities (comma separated) to retrieve.
     * @param resultType Allows retrieving only metadata of the baseline. On data request all information is retrieved. Possible values include: 'Data', 'Metadata'
     * @param metricnamespace Metric namespace to query metric definitions for.
     * @param filter The **$filter** is used to describe a set of dimensions with their concrete values which produce a specific metric's time series, in which a baseline is requested for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BaselineResponseInner> getAsync(String resourceUri, String metricnames, String timespan, Period interval, String aggregation, String sensitivities, ResultType resultType, String metricnamespace, String filter, final ServiceCallback<BaselineResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceUri, metricnames, timespan, interval, aggregation, sensitivities, resultType, metricnamespace, filter), serviceCallback);
    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param timespan The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
     * @param interval The interval (i.e. timegrain) of the query.
     * @param aggregation The aggregation type of the metric to retrieve the baseline for.
     * @param sensitivities The list of sensitivities (comma separated) to retrieve.
     * @param resultType Allows retrieving only metadata of the baseline. On data request all information is retrieved. Possible values include: 'Data', 'Metadata'
     * @param metricnamespace Metric namespace to query metric definitions for.
     * @param filter The **$filter** is used to describe a set of dimensions with their concrete values which produce a specific metric's time series, in which a baseline is requested for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BaselineResponseInner object
     */
    public Observable<BaselineResponseInner> getAsync(String resourceUri, String metricnames, String timespan, Period interval, String aggregation, String sensitivities, ResultType resultType, String metricnamespace, String filter) {
        return getWithServiceResponseAsync(resourceUri, metricnames, timespan, interval, aggregation, sensitivities, resultType, metricnamespace, filter).map(new Func1<ServiceResponse<BaselineResponseInner>, BaselineResponseInner>() {
            @Override
            public BaselineResponseInner call(ServiceResponse<BaselineResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * **Gets the baseline values for a resource**.
     *
     * @param resourceUri The identifier of the resource. It has the following structure: subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}. For example: subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param timespan The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
     * @param interval The interval (i.e. timegrain) of the query.
     * @param aggregation The aggregation type of the metric to retrieve the baseline for.
     * @param sensitivities The list of sensitivities (comma separated) to retrieve.
     * @param resultType Allows retrieving only metadata of the baseline. On data request all information is retrieved. Possible values include: 'Data', 'Metadata'
     * @param metricnamespace Metric namespace to query metric definitions for.
     * @param filter The **$filter** is used to describe a set of dimensions with their concrete values which produce a specific metric's time series, in which a baseline is requested for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BaselineResponseInner object
     */
    public Observable<ServiceResponse<BaselineResponseInner>> getWithServiceResponseAsync(String resourceUri, String metricnames, String timespan, Period interval, String aggregation, String sensitivities, ResultType resultType, String metricnamespace, String filter) {
        if (resourceUri == null) {
            throw new IllegalArgumentException("Parameter resourceUri is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceUri, metricnames, timespan, interval, aggregation, sensitivities, resultType, this.client.apiVersion(), metricnamespace, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BaselineResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<BaselineResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BaselineResponseInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BaselineResponseInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BaselineResponseInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BaselineResponseInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
