/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.blockchain.implementation;

import com.microsoft.azure.management.blockchain.BlockchainProtocol;
import com.microsoft.azure.management.blockchain.BlockchainMemberNodesSku;
import com.microsoft.azure.management.blockchain.BlockchainMemberProvisioningState;
import java.util.List;
import com.microsoft.azure.management.blockchain.FirewallRule;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.rest.SkipParentValidation;
import com.microsoft.azure.Resource;

/**
 * Payload of the blockchain member which is exposed in the request/response of
 * the resource provider.
 */
@JsonFlatten
@SkipParentValidation
public class BlockchainMemberInner extends Resource {
    /**
     * Gets or sets the blockchain protocol. Possible values include:
     * 'NotSpecified', 'Parity', 'Quorum', 'Corda'.
     */
    @JsonProperty(value = "properties.protocol")
    private BlockchainProtocol protocol;

    /**
     * Gets or sets the blockchain validator nodes Sku.
     */
    @JsonProperty(value = "properties.validatorNodesSku")
    private BlockchainMemberNodesSku validatorNodesSku;

    /**
     * Gets or sets the blockchain member provision state. Possible values
     * include: 'NotSpecified', 'Updating', 'Deleting', 'Succeeded', 'Failed',
     * 'Stale'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private BlockchainMemberProvisioningState provisioningState;

    /**
     * Gets the dns endpoint of the blockchain member.
     */
    @JsonProperty(value = "properties.dns", access = JsonProperty.Access.WRITE_ONLY)
    private String dns;

    /**
     * Gets the auth user name of the blockchain member.
     */
    @JsonProperty(value = "properties.userName", access = JsonProperty.Access.WRITE_ONLY)
    private String userName;

    /**
     * Sets the basic auth password of the blockchain member.
     */
    @JsonProperty(value = "properties.password")
    private String password;

    /**
     * Gets or sets the consortium for the blockchain member.
     */
    @JsonProperty(value = "properties.consortium")
    private String consortium;

    /**
     * Gets the managed consortium management account address.
     */
    @JsonProperty(value = "properties.consortiumManagementAccountAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String consortiumManagementAccountAddress;

    /**
     * Sets the managed consortium management account password.
     */
    @JsonProperty(value = "properties.consortiumManagementAccountPassword")
    private String consortiumManagementAccountPassword;

    /**
     * Gets the role of the member in the consortium.
     */
    @JsonProperty(value = "properties.consortiumRole")
    private String consortiumRole;

    /**
     * Gets the display name of the member in the consortium.
     */
    @JsonProperty(value = "properties.consortiumMemberDisplayName")
    private String consortiumMemberDisplayName;

    /**
     * Gets the Ethereum root contract address of the blockchain.
     */
    @JsonProperty(value = "properties.rootContractAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String rootContractAddress;

    /**
     * Gets the public key of the blockchain member (default transaction node).
     */
    @JsonProperty(value = "properties.publicKey", access = JsonProperty.Access.WRITE_ONLY)
    private String publicKey;

    /**
     * Gets or sets firewall rules.
     */
    @JsonProperty(value = "properties.firewallRules")
    private List<FirewallRule> firewallRules;

    /**
     * Gets or sets the blockchain member Sku.
     */
    @JsonProperty(value = "sku")
    private SkuInner sku;

    /**
     * Get gets or sets the blockchain protocol. Possible values include: 'NotSpecified', 'Parity', 'Quorum', 'Corda'.
     *
     * @return the protocol value
     */
    public BlockchainProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set gets or sets the blockchain protocol. Possible values include: 'NotSpecified', 'Parity', 'Quorum', 'Corda'.
     *
     * @param protocol the protocol value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withProtocol(BlockchainProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get gets or sets the blockchain validator nodes Sku.
     *
     * @return the validatorNodesSku value
     */
    public BlockchainMemberNodesSku validatorNodesSku() {
        return this.validatorNodesSku;
    }

    /**
     * Set gets or sets the blockchain validator nodes Sku.
     *
     * @param validatorNodesSku the validatorNodesSku value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withValidatorNodesSku(BlockchainMemberNodesSku validatorNodesSku) {
        this.validatorNodesSku = validatorNodesSku;
        return this;
    }

    /**
     * Get gets or sets the blockchain member provision state. Possible values include: 'NotSpecified', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Stale'.
     *
     * @return the provisioningState value
     */
    public BlockchainMemberProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get gets the dns endpoint of the blockchain member.
     *
     * @return the dns value
     */
    public String dns() {
        return this.dns;
    }

    /**
     * Get gets the auth user name of the blockchain member.
     *
     * @return the userName value
     */
    public String userName() {
        return this.userName;
    }

    /**
     * Get sets the basic auth password of the blockchain member.
     *
     * @return the password value
     */
    public String password() {
        return this.password;
    }

    /**
     * Set sets the basic auth password of the blockchain member.
     *
     * @param password the password value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get gets or sets the consortium for the blockchain member.
     *
     * @return the consortium value
     */
    public String consortium() {
        return this.consortium;
    }

    /**
     * Set gets or sets the consortium for the blockchain member.
     *
     * @param consortium the consortium value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortium(String consortium) {
        this.consortium = consortium;
        return this;
    }

    /**
     * Get gets the managed consortium management account address.
     *
     * @return the consortiumManagementAccountAddress value
     */
    public String consortiumManagementAccountAddress() {
        return this.consortiumManagementAccountAddress;
    }

    /**
     * Get sets the managed consortium management account password.
     *
     * @return the consortiumManagementAccountPassword value
     */
    public String consortiumManagementAccountPassword() {
        return this.consortiumManagementAccountPassword;
    }

    /**
     * Set sets the managed consortium management account password.
     *
     * @param consortiumManagementAccountPassword the consortiumManagementAccountPassword value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortiumManagementAccountPassword(String consortiumManagementAccountPassword) {
        this.consortiumManagementAccountPassword = consortiumManagementAccountPassword;
        return this;
    }

    /**
     * Get gets the role of the member in the consortium.
     *
     * @return the consortiumRole value
     */
    public String consortiumRole() {
        return this.consortiumRole;
    }

    /**
     * Set gets the role of the member in the consortium.
     *
     * @param consortiumRole the consortiumRole value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortiumRole(String consortiumRole) {
        this.consortiumRole = consortiumRole;
        return this;
    }

    /**
     * Get gets the display name of the member in the consortium.
     *
     * @return the consortiumMemberDisplayName value
     */
    public String consortiumMemberDisplayName() {
        return this.consortiumMemberDisplayName;
    }

    /**
     * Set gets the display name of the member in the consortium.
     *
     * @param consortiumMemberDisplayName the consortiumMemberDisplayName value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortiumMemberDisplayName(String consortiumMemberDisplayName) {
        this.consortiumMemberDisplayName = consortiumMemberDisplayName;
        return this;
    }

    /**
     * Get gets the Ethereum root contract address of the blockchain.
     *
     * @return the rootContractAddress value
     */
    public String rootContractAddress() {
        return this.rootContractAddress;
    }

    /**
     * Get gets the public key of the blockchain member (default transaction node).
     *
     * @return the publicKey value
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Get gets or sets firewall rules.
     *
     * @return the firewallRules value
     */
    public List<FirewallRule> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Set gets or sets firewall rules.
     *
     * @param firewallRules the firewallRules value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withFirewallRules(List<FirewallRule> firewallRules) {
        this.firewallRules = firewallRules;
        return this;
    }

    /**
     * Get gets or sets the blockchain member Sku.
     *
     * @return the sku value
     */
    public SkuInner sku() {
        return this.sku;
    }

    /**
     * Set gets or sets the blockchain member Sku.
     *
     * @param sku the sku value to set
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withSku(SkuInner sku) {
        this.sku = sku;
        return this;
    }

}
