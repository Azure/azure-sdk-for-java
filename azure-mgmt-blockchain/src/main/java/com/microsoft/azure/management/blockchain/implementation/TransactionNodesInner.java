/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.blockchain.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.blockchain.ApiKey;
import com.microsoft.azure.management.blockchain.TransactionNodeUpdate;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TransactionNodes.
 */
public class TransactionNodesInner {
    /** The Retrofit service to perform REST calls. */
    private TransactionNodesService service;
    /** The service client containing this operation class. */
    private BlockchainManagementClientImpl client;

    /**
     * Initializes an instance of TransactionNodesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TransactionNodesInner(Retrofit retrofit, BlockchainManagementClientImpl client) {
        this.service = retrofit.create(TransactionNodesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for TransactionNodes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TransactionNodesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        Observable<Response<ResponseBody>> get(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        Observable<Response<ResponseBody>> create(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body TransactionNodeInner transactionNode, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body TransactionNodeInner transactionNode, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        Observable<Response<ResponseBody>> update(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body TransactionNodeUpdate transactionNode, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes")
        Observable<Response<ResponseBody>> list(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes listApiKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/listApiKeys")
        Observable<Response<ResponseBody>> listApiKeys(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes listRegenerateApiKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/regenerateApiKeys")
        Observable<Response<ResponseBody>> listRegenerateApiKeys(@Path("blockchainMemberName") String blockchainMemberName, @Path("transactionNodeName") String transactionNodeName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body ApiKey apiKey, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.TransactionNodes listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionNodeInner object if successful.
     */
    public TransactionNodeInner get(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return getWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionNodeInner> getAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<TransactionNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<TransactionNodeInner> getAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return getWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<TransactionNodeInner>, TransactionNodeInner>() {
            @Override
            public TransactionNodeInner call(ServiceResponse<TransactionNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<ServiceResponse<TransactionNodeInner>> getWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.get(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionNodeInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionNodeInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionNodeInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionNodeInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionNodeInner object if successful.
     */
    public TransactionNodeInner create(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return createWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionNodeInner> createAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<TransactionNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<TransactionNodeInner> createAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return createWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<TransactionNodeInner>, TransactionNodeInner>() {
            @Override
            public TransactionNodeInner call(ServiceResponse<TransactionNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<TransactionNodeInner>> createWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final TransactionNodeInner transactionNode = null;
        Observable<Response<ResponseBody>> observable = service.create(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, transactionNode, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<TransactionNodeInner>() { }.getType());
    }
    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionNodeInner object if successful.
     */
    public TransactionNodeInner create(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode) {
        return createWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).toBlocking().last().body();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionNodeInner> createAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode, final ServiceCallback<TransactionNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode), serviceCallback);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<TransactionNodeInner> createAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode) {
        return createWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).map(new Func1<ServiceResponse<TransactionNodeInner>, TransactionNodeInner>() {
            @Override
            public TransactionNodeInner call(ServiceResponse<TransactionNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<TransactionNodeInner>> createWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(transactionNode);
        Observable<Response<ResponseBody>> observable = service.create(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, transactionNode, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<TransactionNodeInner>() { }.getType());
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionNodeInner object if successful.
     */
    public TransactionNodeInner beginCreate(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionNodeInner> beginCreateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<TransactionNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<TransactionNodeInner> beginCreateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<TransactionNodeInner>, TransactionNodeInner>() {
            @Override
            public TransactionNodeInner call(ServiceResponse<TransactionNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<ServiceResponse<TransactionNodeInner>> beginCreateWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final TransactionNodeInner transactionNode = null;
        return service.beginCreate(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, transactionNode, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionNodeInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionNodeInner object if successful.
     */
    public TransactionNodeInner beginCreate(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).toBlocking().single().body();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionNodeInner> beginCreateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode, final ServiceCallback<TransactionNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode), serviceCallback);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<TransactionNodeInner> beginCreateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).map(new Func1<ServiceResponse<TransactionNodeInner>, TransactionNodeInner>() {
            @Override
            public TransactionNodeInner call(ServiceResponse<TransactionNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<ServiceResponse<TransactionNodeInner>> beginCreateWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeInner transactionNode) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(transactionNode);
        return service.beginCreate(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, transactionNode, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionNodeInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionNodeInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionNodeInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionNodeInner>() { }.getType())
                .register(201, new TypeToken<TransactionNodeInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        deleteWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return deleteWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        beginDeleteWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return beginDeleteWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.beginDelete(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionNodeInner object if successful.
     */
    public TransactionNodeInner update(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return updateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionNodeInner> updateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<TransactionNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<TransactionNodeInner> updateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return updateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<TransactionNodeInner>, TransactionNodeInner>() {
            @Override
            public TransactionNodeInner call(ServiceResponse<TransactionNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<ServiceResponse<TransactionNodeInner>> updateWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final TransactionNodeUpdate transactionNode = null;
        return service.update(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, transactionNode, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionNodeInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionNodeInner object if successful.
     */
    public TransactionNodeInner update(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeUpdate transactionNode) {
        return updateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).toBlocking().single().body();
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionNodeInner> updateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeUpdate transactionNode, final ServiceCallback<TransactionNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode), serviceCallback);
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<TransactionNodeInner> updateAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeUpdate transactionNode) {
        return updateWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).map(new Func1<ServiceResponse<TransactionNodeInner>, TransactionNodeInner>() {
            @Override
            public TransactionNodeInner call(ServiceResponse<TransactionNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionNodeInner object
     */
    public Observable<ServiceResponse<TransactionNodeInner>> updateWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, TransactionNodeUpdate transactionNode) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(transactionNode);
        return service.update(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, transactionNode, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionNodeInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionNodeInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionNodeInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionNodeInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionNodeInner&gt; object if successful.
     */
    public PagedList<TransactionNodeInner> list(final String blockchainMemberName, final String resourceGroupName) {
        ServiceResponse<Page<TransactionNodeInner>> response = listSinglePageAsync(blockchainMemberName, resourceGroupName).toBlocking().single();
        return new PagedList<TransactionNodeInner>(response.body()) {
            @Override
            public Page<TransactionNodeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionNodeInner>> listAsync(final String blockchainMemberName, final String resourceGroupName, final ListOperationCallback<TransactionNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(blockchainMemberName, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<TransactionNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionNodeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionNodeInner&gt; object
     */
    public Observable<Page<TransactionNodeInner>> listAsync(final String blockchainMemberName, final String resourceGroupName) {
        return listWithServiceResponseAsync(blockchainMemberName, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<TransactionNodeInner>>, Page<TransactionNodeInner>>() {
                @Override
                public Page<TransactionNodeInner> call(ServiceResponse<Page<TransactionNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionNodeInner>>> listWithServiceResponseAsync(final String blockchainMemberName, final String resourceGroupName) {
        return listSinglePageAsync(blockchainMemberName, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<TransactionNodeInner>>, Observable<ServiceResponse<Page<TransactionNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionNodeInner>>> call(ServiceResponse<Page<TransactionNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
    ServiceResponse<PageImpl<TransactionNodeInner>> * @param blockchainMemberName Blockchain member name.
    ServiceResponse<PageImpl<TransactionNodeInner>> * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionNodeInner>>> listSinglePageAsync(final String blockchainMemberName, final String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.list(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionNodeInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionNodeInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionNodeInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionNodeInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyCollectionInner object if successful.
     */
    public ApiKeyCollectionInner listApiKeys(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return listApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyCollectionInner> listApiKeysAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<ApiKeyCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ApiKeyCollectionInner> listApiKeysAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return listApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<ApiKeyCollectionInner>, ApiKeyCollectionInner>() {
            @Override
            public ApiKeyCollectionInner call(ServiceResponse<ApiKeyCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ServiceResponse<ApiKeyCollectionInner>> listApiKeysWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listApiKeys(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyCollectionInner> clientResponse = listApiKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiKeyCollectionInner> listApiKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiKeyCollectionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiKeyCollectionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyCollectionInner object if successful.
     */
    public ApiKeyCollectionInner listRegenerateApiKeys(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, final ServiceCallback<ApiKeyCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName), serviceCallback);
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName).map(new Func1<ServiceResponse<ApiKeyCollectionInner>, ApiKeyCollectionInner>() {
            @Override
            public ApiKeyCollectionInner call(ServiceResponse<ApiKeyCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ServiceResponse<ApiKeyCollectionInner>> listRegenerateApiKeysWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final ApiKey apiKey = null;
        return service.listRegenerateApiKeys(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, apiKey, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyCollectionInner> clientResponse = listRegenerateApiKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyCollectionInner object if successful.
     */
    public ApiKeyCollectionInner listRegenerateApiKeys(String blockchainMemberName, String transactionNodeName, String resourceGroupName, ApiKey apiKey) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, apiKey).toBlocking().single().body();
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, ApiKey apiKey, final ServiceCallback<ApiKeyCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, apiKey), serviceCallback);
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, ApiKey apiKey) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, apiKey).map(new Func1<ServiceResponse<ApiKeyCollectionInner>, ApiKeyCollectionInner>() {
            @Override
            public ApiKeyCollectionInner call(ServiceResponse<ApiKeyCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ServiceResponse<ApiKeyCollectionInner>> listRegenerateApiKeysWithServiceResponseAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName, ApiKey apiKey) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (transactionNodeName == null) {
            throw new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(apiKey);
        return service.listRegenerateApiKeys(blockchainMemberName, transactionNodeName, this.client.subscriptionId(), resourceGroupName, apiKey, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyCollectionInner> clientResponse = listRegenerateApiKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiKeyCollectionInner> listRegenerateApiKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiKeyCollectionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiKeyCollectionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionNodeInner&gt; object if successful.
     */
    public PagedList<TransactionNodeInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<TransactionNodeInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TransactionNodeInner>(response.body()) {
            @Override
            public Page<TransactionNodeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionNodeInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<TransactionNodeInner>> serviceFuture, final ListOperationCallback<TransactionNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TransactionNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionNodeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionNodeInner&gt; object
     */
    public Observable<Page<TransactionNodeInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TransactionNodeInner>>, Page<TransactionNodeInner>>() {
                @Override
                public Page<TransactionNodeInner> call(ServiceResponse<Page<TransactionNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionNodeInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TransactionNodeInner>>, Observable<ServiceResponse<Page<TransactionNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionNodeInner>>> call(ServiceResponse<Page<TransactionNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
    ServiceResponse<PageImpl<TransactionNodeInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionNodeInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionNodeInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionNodeInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionNodeInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionNodeInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
