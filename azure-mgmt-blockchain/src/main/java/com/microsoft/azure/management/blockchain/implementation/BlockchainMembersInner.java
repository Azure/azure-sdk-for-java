/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.blockchain.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.blockchain.ApiKey;
import com.microsoft.azure.management.blockchain.BlockchainMemberUpdate;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BlockchainMembers.
 */
public class BlockchainMembersInner implements InnerSupportsGet<BlockchainMemberInner>, InnerSupportsDelete<Void>, InnerSupportsListing<BlockchainMemberInner> {
    /** The Retrofit service to perform REST calls. */
    private BlockchainMembersService service;
    /** The service client containing this operation class. */
    private BlockchainManagementClientImpl client;

    /**
     * Initializes an instance of BlockchainMembersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BlockchainMembersInner(Retrofit retrofit, BlockchainManagementClientImpl client) {
        this.service = retrofit.create(BlockchainMembersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BlockchainMembers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BlockchainMembersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}")
        Observable<Response<ResponseBody>> create(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body BlockchainMemberInner blockchainMember, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body BlockchainMemberInner blockchainMember, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}")
        Observable<Response<ResponseBody>> update(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body BlockchainMemberUpdate blockchainMember, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/blockchainMembers")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers listConsortiumMembers" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/consortiumMembers")
        Observable<Response<ResponseBody>> listConsortiumMembers(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers listApiKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/listApiKeys")
        Observable<Response<ResponseBody>> listApiKeys(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers listRegenerateApiKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/regenerateApiKeys")
        Observable<Response<ResponseBody>> listRegenerateApiKeys(@Path("blockchainMemberName") String blockchainMemberName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body ApiKey apiKey, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.blockchain.BlockchainMembers listConsortiumMembersNext" })
        @GET
        Observable<Response<ResponseBody>> listConsortiumMembersNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get details about a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BlockchainMemberInner object if successful.
     */
    public BlockchainMemberInner getByResourceGroup(String blockchainMemberName, String resourceGroupName) {
        return getByResourceGroupWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Get details about a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BlockchainMemberInner> getByResourceGroupAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<BlockchainMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Get details about a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<BlockchainMemberInner> getByResourceGroupAsync(String blockchainMemberName, String resourceGroupName) {
        return getByResourceGroupWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<BlockchainMemberInner>, BlockchainMemberInner>() {
            @Override
            public BlockchainMemberInner call(ServiceResponse<BlockchainMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get details about a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<ServiceResponse<BlockchainMemberInner>> getByResourceGroupWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.getByResourceGroup(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BlockchainMemberInner>>>() {
                @Override
                public Observable<ServiceResponse<BlockchainMemberInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BlockchainMemberInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BlockchainMemberInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BlockchainMemberInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BlockchainMemberInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BlockchainMemberInner object if successful.
     */
    public BlockchainMemberInner create(String blockchainMemberName, String resourceGroupName) {
        return createWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BlockchainMemberInner> createAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<BlockchainMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BlockchainMemberInner> createAsync(String blockchainMemberName, String resourceGroupName) {
        return createWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<BlockchainMemberInner>, BlockchainMemberInner>() {
            @Override
            public BlockchainMemberInner call(ServiceResponse<BlockchainMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BlockchainMemberInner>> createWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final BlockchainMemberInner blockchainMember = null;
        Observable<Response<ResponseBody>> observable = service.create(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, blockchainMember, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BlockchainMemberInner>() { }.getType());
    }
    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BlockchainMemberInner object if successful.
     */
    public BlockchainMemberInner create(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        return createWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember).toBlocking().last().body();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BlockchainMemberInner> createAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember, final ServiceCallback<BlockchainMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember), serviceCallback);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BlockchainMemberInner> createAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        return createWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember).map(new Func1<ServiceResponse<BlockchainMemberInner>, BlockchainMemberInner>() {
            @Override
            public BlockchainMemberInner call(ServiceResponse<BlockchainMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BlockchainMemberInner>> createWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(blockchainMember);
        Observable<Response<ResponseBody>> observable = service.create(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, blockchainMember, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BlockchainMemberInner>() { }.getType());
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BlockchainMemberInner object if successful.
     */
    public BlockchainMemberInner beginCreate(String blockchainMemberName, String resourceGroupName) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BlockchainMemberInner> beginCreateAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<BlockchainMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<BlockchainMemberInner> beginCreateAsync(String blockchainMemberName, String resourceGroupName) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<BlockchainMemberInner>, BlockchainMemberInner>() {
            @Override
            public BlockchainMemberInner call(ServiceResponse<BlockchainMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<ServiceResponse<BlockchainMemberInner>> beginCreateWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final BlockchainMemberInner blockchainMember = null;
        return service.beginCreate(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, blockchainMember, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BlockchainMemberInner>>>() {
                @Override
                public Observable<ServiceResponse<BlockchainMemberInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BlockchainMemberInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BlockchainMemberInner object if successful.
     */
    public BlockchainMemberInner beginCreate(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember).toBlocking().single().body();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BlockchainMemberInner> beginCreateAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember, final ServiceCallback<BlockchainMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember), serviceCallback);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<BlockchainMemberInner> beginCreateAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        return beginCreateWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember).map(new Func1<ServiceResponse<BlockchainMemberInner>, BlockchainMemberInner>() {
            @Override
            public BlockchainMemberInner call(ServiceResponse<BlockchainMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<ServiceResponse<BlockchainMemberInner>> beginCreateWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(blockchainMember);
        return service.beginCreate(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, blockchainMember, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BlockchainMemberInner>>>() {
                @Override
                public Observable<ServiceResponse<BlockchainMemberInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BlockchainMemberInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BlockchainMemberInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BlockchainMemberInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BlockchainMemberInner>() { }.getType())
                .register(201, new TypeToken<BlockchainMemberInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String blockchainMemberName, String resourceGroupName) {
        deleteWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String blockchainMemberName, String resourceGroupName) {
        return deleteWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String blockchainMemberName, String resourceGroupName) {
        beginDeleteWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String blockchainMemberName, String resourceGroupName) {
        return beginDeleteWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.beginDelete(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BlockchainMemberInner object if successful.
     */
    public BlockchainMemberInner update(String blockchainMemberName, String resourceGroupName) {
        return updateWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BlockchainMemberInner> updateAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<BlockchainMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<BlockchainMemberInner> updateAsync(String blockchainMemberName, String resourceGroupName) {
        return updateWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<BlockchainMemberInner>, BlockchainMemberInner>() {
            @Override
            public BlockchainMemberInner call(ServiceResponse<BlockchainMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<ServiceResponse<BlockchainMemberInner>> updateWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final BlockchainMemberUpdate blockchainMember = null;
        return service.update(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, blockchainMember, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BlockchainMemberInner>>>() {
                @Override
                public Observable<ServiceResponse<BlockchainMemberInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BlockchainMemberInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BlockchainMemberInner object if successful.
     */
    public BlockchainMemberInner update(String blockchainMemberName, String resourceGroupName, BlockchainMemberUpdate blockchainMember) {
        return updateWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember).toBlocking().single().body();
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BlockchainMemberInner> updateAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberUpdate blockchainMember, final ServiceCallback<BlockchainMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember), serviceCallback);
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<BlockchainMemberInner> updateAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberUpdate blockchainMember) {
        return updateWithServiceResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember).map(new Func1<ServiceResponse<BlockchainMemberInner>, BlockchainMemberInner>() {
            @Override
            public BlockchainMemberInner call(ServiceResponse<BlockchainMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BlockchainMemberInner object
     */
    public Observable<ServiceResponse<BlockchainMemberInner>> updateWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName, BlockchainMemberUpdate blockchainMember) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(blockchainMember);
        return service.update(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, blockchainMember, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BlockchainMemberInner>>>() {
                @Override
                public Observable<ServiceResponse<BlockchainMemberInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BlockchainMemberInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BlockchainMemberInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BlockchainMemberInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BlockchainMemberInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BlockchainMemberInner&gt; object if successful.
     */
    public PagedList<BlockchainMemberInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<BlockchainMemberInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<BlockchainMemberInner>(response.body()) {
            @Override
            public Page<BlockchainMemberInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BlockchainMemberInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<BlockchainMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<Page<BlockchainMemberInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Page<BlockchainMemberInner>>() {
                @Override
                public Page<BlockchainMemberInner> call(ServiceResponse<Page<BlockchainMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(ServiceResponse<Page<BlockchainMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the blockchain members for a resource group.
     *
    ServiceResponse<PageImpl<BlockchainMemberInner>> * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BlockchainMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BlockchainMemberInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BlockchainMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BlockchainMemberInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BlockchainMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BlockchainMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BlockchainMemberInner&gt; object if successful.
     */
    public PagedList<BlockchainMemberInner> list() {
        ServiceResponse<Page<BlockchainMemberInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<BlockchainMemberInner>(response.body()) {
            @Override
            public Page<BlockchainMemberInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BlockchainMemberInner>> listAsync(final ListOperationCallback<BlockchainMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<Page<BlockchainMemberInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Page<BlockchainMemberInner>>() {
                @Override
                public Page<BlockchainMemberInner> call(ServiceResponse<Page<BlockchainMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(ServiceResponse<Page<BlockchainMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BlockchainMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BlockchainMemberInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BlockchainMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BlockchainMemberInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BlockchainMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BlockchainMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConsortiumMemberInner&gt; object if successful.
     */
    public PagedList<ConsortiumMemberInner> listConsortiumMembers(final String blockchainMemberName, final String resourceGroupName) {
        ServiceResponse<Page<ConsortiumMemberInner>> response = listConsortiumMembersSinglePageAsync(blockchainMemberName, resourceGroupName).toBlocking().single();
        return new PagedList<ConsortiumMemberInner>(response.body()) {
            @Override
            public Page<ConsortiumMemberInner> nextPage(String nextPageLink) {
                return listConsortiumMembersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConsortiumMemberInner>> listConsortiumMembersAsync(final String blockchainMemberName, final String resourceGroupName, final ListOperationCallback<ConsortiumMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listConsortiumMembersSinglePageAsync(blockchainMemberName, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ConsortiumMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> call(String nextPageLink) {
                    return listConsortiumMembersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConsortiumMemberInner&gt; object
     */
    public Observable<Page<ConsortiumMemberInner>> listConsortiumMembersAsync(final String blockchainMemberName, final String resourceGroupName) {
        return listConsortiumMembersWithServiceResponseAsync(blockchainMemberName, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ConsortiumMemberInner>>, Page<ConsortiumMemberInner>>() {
                @Override
                public Page<ConsortiumMemberInner> call(ServiceResponse<Page<ConsortiumMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConsortiumMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> listConsortiumMembersWithServiceResponseAsync(final String blockchainMemberName, final String resourceGroupName) {
        return listConsortiumMembersSinglePageAsync(blockchainMemberName, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ConsortiumMemberInner>>, Observable<ServiceResponse<Page<ConsortiumMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> call(ServiceResponse<Page<ConsortiumMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listConsortiumMembersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
    ServiceResponse<PageImpl<ConsortiumMemberInner>> * @param blockchainMemberName Blockchain member name.
    ServiceResponse<PageImpl<ConsortiumMemberInner>> * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConsortiumMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> listConsortiumMembersSinglePageAsync(final String blockchainMemberName, final String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listConsortiumMembers(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConsortiumMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConsortiumMemberInner>> result = listConsortiumMembersDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConsortiumMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConsortiumMemberInner>> listConsortiumMembersDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConsortiumMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConsortiumMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyCollectionInner object if successful.
     */
    public ApiKeyCollectionInner listApiKeys(String blockchainMemberName, String resourceGroupName) {
        return listApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyCollectionInner> listApiKeysAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<ApiKeyCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ApiKeyCollectionInner> listApiKeysAsync(String blockchainMemberName, String resourceGroupName) {
        return listApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<ApiKeyCollectionInner>, ApiKeyCollectionInner>() {
            @Override
            public ApiKeyCollectionInner call(ServiceResponse<ApiKeyCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ServiceResponse<ApiKeyCollectionInner>> listApiKeysWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listApiKeys(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyCollectionInner> clientResponse = listApiKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiKeyCollectionInner> listApiKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiKeyCollectionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiKeyCollectionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyCollectionInner object if successful.
     */
    public ApiKeyCollectionInner listRegenerateApiKeys(String blockchainMemberName, String resourceGroupName) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String resourceGroupName, final ServiceCallback<ApiKeyCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName), serviceCallback);
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String resourceGroupName) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName).map(new Func1<ServiceResponse<ApiKeyCollectionInner>, ApiKeyCollectionInner>() {
            @Override
            public ApiKeyCollectionInner call(ServiceResponse<ApiKeyCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ServiceResponse<ApiKeyCollectionInner>> listRegenerateApiKeysWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final ApiKey apiKey = null;
        return service.listRegenerateApiKeys(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, apiKey, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyCollectionInner> clientResponse = listRegenerateApiKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyCollectionInner object if successful.
     */
    public ApiKeyCollectionInner listRegenerateApiKeys(String blockchainMemberName, String resourceGroupName, ApiKey apiKey) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName, apiKey).toBlocking().single().body();
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String resourceGroupName, ApiKey apiKey, final ServiceCallback<ApiKeyCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName, apiKey), serviceCallback);
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ApiKeyCollectionInner> listRegenerateApiKeysAsync(String blockchainMemberName, String resourceGroupName, ApiKey apiKey) {
        return listRegenerateApiKeysWithServiceResponseAsync(blockchainMemberName, resourceGroupName, apiKey).map(new Func1<ServiceResponse<ApiKeyCollectionInner>, ApiKeyCollectionInner>() {
            @Override
            public ApiKeyCollectionInner call(ServiceResponse<ApiKeyCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyCollectionInner object
     */
    public Observable<ServiceResponse<ApiKeyCollectionInner>> listRegenerateApiKeysWithServiceResponseAsync(String blockchainMemberName, String resourceGroupName, ApiKey apiKey) {
        if (blockchainMemberName == null) {
            throw new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(apiKey);
        return service.listRegenerateApiKeys(blockchainMemberName, this.client.subscriptionId(), resourceGroupName, apiKey, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyCollectionInner> clientResponse = listRegenerateApiKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiKeyCollectionInner> listRegenerateApiKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiKeyCollectionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiKeyCollectionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BlockchainMemberInner&gt; object if successful.
     */
    public PagedList<BlockchainMemberInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<BlockchainMemberInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BlockchainMemberInner>(response.body()) {
            @Override
            public Page<BlockchainMemberInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BlockchainMemberInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<BlockchainMemberInner>> serviceFuture, final ListOperationCallback<BlockchainMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<Page<BlockchainMemberInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Page<BlockchainMemberInner>>() {
                @Override
                public Page<BlockchainMemberInner> call(ServiceResponse<Page<BlockchainMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(ServiceResponse<Page<BlockchainMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the blockchain members for a resource group.
     *
    ServiceResponse<PageImpl<BlockchainMemberInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BlockchainMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BlockchainMemberInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BlockchainMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BlockchainMemberInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BlockchainMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BlockchainMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BlockchainMemberInner&gt; object if successful.
     */
    public PagedList<BlockchainMemberInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<BlockchainMemberInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BlockchainMemberInner>(response.body()) {
            @Override
            public Page<BlockchainMemberInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BlockchainMemberInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<BlockchainMemberInner>> serviceFuture, final ListOperationCallback<BlockchainMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<Page<BlockchainMemberInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Page<BlockchainMemberInner>>() {
                @Override
                public Page<BlockchainMemberInner> call(ServiceResponse<Page<BlockchainMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BlockchainMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BlockchainMemberInner>>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(ServiceResponse<Page<BlockchainMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the blockchain members for a subscription.
     *
    ServiceResponse<PageImpl<BlockchainMemberInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BlockchainMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BlockchainMemberInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BlockchainMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BlockchainMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BlockchainMemberInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BlockchainMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BlockchainMemberInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BlockchainMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BlockchainMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConsortiumMemberInner&gt; object if successful.
     */
    public PagedList<ConsortiumMemberInner> listConsortiumMembersNext(final String nextPageLink) {
        ServiceResponse<Page<ConsortiumMemberInner>> response = listConsortiumMembersNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConsortiumMemberInner>(response.body()) {
            @Override
            public Page<ConsortiumMemberInner> nextPage(String nextPageLink) {
                return listConsortiumMembersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConsortiumMemberInner>> listConsortiumMembersNextAsync(final String nextPageLink, final ServiceFuture<List<ConsortiumMemberInner>> serviceFuture, final ListOperationCallback<ConsortiumMemberInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listConsortiumMembersNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConsortiumMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> call(String nextPageLink) {
                    return listConsortiumMembersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConsortiumMemberInner&gt; object
     */
    public Observable<Page<ConsortiumMemberInner>> listConsortiumMembersNextAsync(final String nextPageLink) {
        return listConsortiumMembersNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConsortiumMemberInner>>, Page<ConsortiumMemberInner>>() {
                @Override
                public Page<ConsortiumMemberInner> call(ServiceResponse<Page<ConsortiumMemberInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConsortiumMemberInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> listConsortiumMembersNextWithServiceResponseAsync(final String nextPageLink) {
        return listConsortiumMembersNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConsortiumMemberInner>>, Observable<ServiceResponse<Page<ConsortiumMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> call(ServiceResponse<Page<ConsortiumMemberInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listConsortiumMembersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
    ServiceResponse<PageImpl<ConsortiumMemberInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConsortiumMemberInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> listConsortiumMembersNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listConsortiumMembersNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConsortiumMemberInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConsortiumMemberInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConsortiumMemberInner>> result = listConsortiumMembersNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConsortiumMemberInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConsortiumMemberInner>> listConsortiumMembersNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConsortiumMemberInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConsortiumMemberInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
