/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2018_01_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptionUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EventSubscriptions.
 */
public class EventSubscriptionsInner implements InnerSupportsDelete<Void>, InnerSupportsListing<EventSubscriptionInner> {
    /** The Retrofit service to perform REST calls. */
    private EventSubscriptionsService service;
    /** The service client containing this operation class. */
    private EventGridManagementClientImpl client;

    /**
     * Initializes an instance of EventSubscriptionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EventSubscriptionsInner(Retrofit retrofit, EventGridManagementClientImpl client) {
        this.service = retrofit.create(EventSubscriptionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for EventSubscriptions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EventSubscriptionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions get" })
        @GET("{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}")
        Observable<Response<ResponseBody>> get(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions createOrUpdate" })
        @PUT("{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Body EventSubscriptionInner eventSubscriptionInfo, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions beginCreateOrUpdate" })
        @PUT("{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Body EventSubscriptionInner eventSubscriptionInfo, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions delete" })
        @HTTP(path = "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions beginDelete" })
        @HTTP(path = "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions update" })
        @PATCH("{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}")
        Observable<Response<ResponseBody>> update(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Body EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions beginUpdate" })
        @PATCH("{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Body EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions getFullUrl" })
        @POST("{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl")
        Observable<Response<ResponseBody>> getFullUrl(@Path(value = "scope", encoded = true) String scope, @Path("eventSubscriptionName") String eventSubscriptionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listGlobalBySubscriptionForTopicType" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions")
        Observable<Response<ResponseBody>> listGlobalBySubscriptionForTopicType(@Path("subscriptionId") String subscriptionId, @Path("topicTypeName") String topicTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listGlobalByResourceGroupForTopicType" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions")
        Observable<Response<ResponseBody>> listGlobalByResourceGroupForTopicType(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("topicTypeName") String topicTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listRegionalBySubscription" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions")
        Observable<Response<ResponseBody>> listRegionalBySubscription(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listRegionalByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions")
        Observable<Response<ResponseBody>> listRegionalByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listRegionalBySubscriptionForTopicType" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions")
        Observable<Response<ResponseBody>> listRegionalBySubscriptionForTopicType(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Path("topicTypeName") String topicTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listRegionalByResourceGroupForTopicType" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions")
        Observable<Response<ResponseBody>> listRegionalByResourceGroupForTopicType(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("location") String location, @Path("topicTypeName") String topicTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_01_01.EventSubscriptions listByResource" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions")
        Observable<Response<ResponseBody>> listByResource(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerNamespace") String providerNamespace, @Path("resourceTypeName") String resourceTypeName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get an event subscription.
     * Get properties of an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventSubscriptionInner object if successful.
     */
    public EventSubscriptionInner get(String scope, String eventSubscriptionName) {
        return getWithServiceResponseAsync(scope, eventSubscriptionName).toBlocking().single().body();
    }

    /**
     * Get an event subscription.
     * Get properties of an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventSubscriptionInner> getAsync(String scope, String eventSubscriptionName, final ServiceCallback<EventSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(scope, eventSubscriptionName), serviceCallback);
    }

    /**
     * Get an event subscription.
     * Get properties of an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionInner object
     */
    public Observable<EventSubscriptionInner> getAsync(String scope, String eventSubscriptionName) {
        return getWithServiceResponseAsync(scope, eventSubscriptionName).map(new Func1<ServiceResponse<EventSubscriptionInner>, EventSubscriptionInner>() {
            @Override
            public EventSubscriptionInner call(ServiceResponse<EventSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get an event subscription.
     * Get properties of an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionInner object
     */
    public Observable<ServiceResponse<EventSubscriptionInner>> getWithServiceResponseAsync(String scope, String eventSubscriptionName) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(scope, eventSubscriptionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventSubscriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<EventSubscriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventSubscriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventSubscriptionInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventSubscriptionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EventSubscriptionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventSubscriptionInner object if successful.
     */
    public EventSubscriptionInner createOrUpdate(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo) {
        return createOrUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionInfo).toBlocking().last().body();
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventSubscriptionInner> createOrUpdateAsync(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo, final ServiceCallback<EventSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionInfo), serviceCallback);
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<EventSubscriptionInner> createOrUpdateAsync(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo) {
        return createOrUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionInfo).map(new Func1<ServiceResponse<EventSubscriptionInner>, EventSubscriptionInner>() {
            @Override
            public EventSubscriptionInner call(ServiceResponse<EventSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<EventSubscriptionInner>> createOrUpdateWithServiceResponseAsync(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (eventSubscriptionInfo == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionInfo is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(eventSubscriptionInfo);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(scope, eventSubscriptionName, eventSubscriptionInfo, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<EventSubscriptionInner>() { }.getType());
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventSubscriptionInner object if successful.
     */
    public EventSubscriptionInner beginCreateOrUpdate(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo) {
        return beginCreateOrUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionInfo).toBlocking().single().body();
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventSubscriptionInner> beginCreateOrUpdateAsync(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo, final ServiceCallback<EventSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionInfo), serviceCallback);
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionInner object
     */
    public Observable<EventSubscriptionInner> beginCreateOrUpdateAsync(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo) {
        return beginCreateOrUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionInfo).map(new Func1<ServiceResponse<EventSubscriptionInner>, EventSubscriptionInner>() {
            @Override
            public EventSubscriptionInner call(ServiceResponse<EventSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an event subscription.
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @param scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionInner object
     */
    public Observable<ServiceResponse<EventSubscriptionInner>> beginCreateOrUpdateWithServiceResponseAsync(String scope, String eventSubscriptionName, EventSubscriptionInner eventSubscriptionInfo) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (eventSubscriptionInfo == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionInfo is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(eventSubscriptionInfo);
        return service.beginCreateOrUpdate(scope, eventSubscriptionName, eventSubscriptionInfo, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventSubscriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<EventSubscriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventSubscriptionInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventSubscriptionInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventSubscriptionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<EventSubscriptionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String scope, String eventSubscriptionName) {
        deleteWithServiceResponseAsync(scope, eventSubscriptionName).toBlocking().last().body();
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String scope, String eventSubscriptionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(scope, eventSubscriptionName), serviceCallback);
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String scope, String eventSubscriptionName) {
        return deleteWithServiceResponseAsync(scope, eventSubscriptionName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String scope, String eventSubscriptionName) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(scope, eventSubscriptionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String scope, String eventSubscriptionName) {
        beginDeleteWithServiceResponseAsync(scope, eventSubscriptionName).toBlocking().single().body();
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String scope, String eventSubscriptionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(scope, eventSubscriptionName), serviceCallback);
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String scope, String eventSubscriptionName) {
        return beginDeleteWithServiceResponseAsync(scope, eventSubscriptionName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an event subscription.
     * Delete an existing event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String scope, String eventSubscriptionName) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(scope, eventSubscriptionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventSubscriptionInner object if successful.
     */
    public EventSubscriptionInner update(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) {
        return updateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).toBlocking().last().body();
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventSubscriptionInner> updateAsync(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, final ServiceCallback<EventSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters), serviceCallback);
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<EventSubscriptionInner> updateAsync(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) {
        return updateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).map(new Func1<ServiceResponse<EventSubscriptionInner>, EventSubscriptionInner>() {
            @Override
            public EventSubscriptionInner call(ServiceResponse<EventSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<EventSubscriptionInner>> updateWithServiceResponseAsync(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (eventSubscriptionUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(eventSubscriptionUpdateParameters);
        Observable<Response<ResponseBody>> observable = service.update(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<EventSubscriptionInner>() { }.getType());
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventSubscriptionInner object if successful.
     */
    public EventSubscriptionInner beginUpdate(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).toBlocking().single().body();
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventSubscriptionInner> beginUpdateAsync(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, final ServiceCallback<EventSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters), serviceCallback);
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionInner object
     */
    public Observable<EventSubscriptionInner> beginUpdateAsync(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).map(new Func1<ServiceResponse<EventSubscriptionInner>, EventSubscriptionInner>() {
            @Override
            public EventSubscriptionInner call(ServiceResponse<EventSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an event subscription.
     * Asynchronously updates an existing event subscription.
     *
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be created
     * @param eventSubscriptionUpdateParameters Updated event subscription information
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionInner object
     */
    public Observable<ServiceResponse<EventSubscriptionInner>> beginUpdateWithServiceResponseAsync(String scope, String eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (eventSubscriptionUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(eventSubscriptionUpdateParameters);
        return service.beginUpdate(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventSubscriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<EventSubscriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventSubscriptionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventSubscriptionInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventSubscriptionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<EventSubscriptionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get full URL of an event subscription.
     * Get the full endpoint URL for an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventSubscriptionFullUrlInner object if successful.
     */
    public EventSubscriptionFullUrlInner getFullUrl(String scope, String eventSubscriptionName) {
        return getFullUrlWithServiceResponseAsync(scope, eventSubscriptionName).toBlocking().single().body();
    }

    /**
     * Get full URL of an event subscription.
     * Get the full endpoint URL for an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventSubscriptionFullUrlInner> getFullUrlAsync(String scope, String eventSubscriptionName, final ServiceCallback<EventSubscriptionFullUrlInner> serviceCallback) {
        return ServiceFuture.fromResponse(getFullUrlWithServiceResponseAsync(scope, eventSubscriptionName), serviceCallback);
    }

    /**
     * Get full URL of an event subscription.
     * Get the full endpoint URL for an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionFullUrlInner object
     */
    public Observable<EventSubscriptionFullUrlInner> getFullUrlAsync(String scope, String eventSubscriptionName) {
        return getFullUrlWithServiceResponseAsync(scope, eventSubscriptionName).map(new Func1<ServiceResponse<EventSubscriptionFullUrlInner>, EventSubscriptionFullUrlInner>() {
            @Override
            public EventSubscriptionFullUrlInner call(ServiceResponse<EventSubscriptionFullUrlInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get full URL of an event subscription.
     * Get the full endpoint URL for an event subscription.
     *
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventSubscriptionFullUrlInner object
     */
    public Observable<ServiceResponse<EventSubscriptionFullUrlInner>> getFullUrlWithServiceResponseAsync(String scope, String eventSubscriptionName) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (eventSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter eventSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getFullUrl(scope, eventSubscriptionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventSubscriptionFullUrlInner>>>() {
                @Override
                public Observable<ServiceResponse<EventSubscriptionFullUrlInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventSubscriptionFullUrlInner> clientResponse = getFullUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventSubscriptionFullUrlInner> getFullUrlDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventSubscriptionFullUrlInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EventSubscriptionFullUrlInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription.
     * List all aggregated global event subscriptions under a specific Azure subscription.
     *
     * @return the PagedList<EventSubscriptionInner> object if successful.
     */
    public PagedList<EventSubscriptionInner> list() {
        PageImpl<EventSubscriptionInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<EventSubscriptionInner>(page) {
            @Override
            public Page<EventSubscriptionInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription.
     * List all aggregated global event subscriptions under a specific Azure subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listAsync(final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription.
     * List all aggregated global event subscriptions under a specific Azure subscription.
     *
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<Page<EventSubscriptionInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, Page<EventSubscriptionInner>>() {
            @Override
            public Page<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                PageImpl<EventSubscriptionInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription.
     * List all aggregated global event subscriptions under a specific Azure subscription.
     *
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all global event subscriptions for a topic type.
     * List all global event subscriptions under an Azure subscription for a topic type.
     *
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventSubscriptionInner&gt; object if successful.
     */
    public List<EventSubscriptionInner> listGlobalBySubscriptionForTopicType(String topicTypeName) {
        return listGlobalBySubscriptionForTopicTypeWithServiceResponseAsync(topicTypeName).toBlocking().single().body();
    }

    /**
     * List all global event subscriptions for a topic type.
     * List all global event subscriptions under an Azure subscription for a topic type.
     *
     * @param topicTypeName Name of the topic type
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listGlobalBySubscriptionForTopicTypeAsync(String topicTypeName, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listGlobalBySubscriptionForTopicTypeWithServiceResponseAsync(topicTypeName), serviceCallback);
    }

    /**
     * List all global event subscriptions for a topic type.
     * List all global event subscriptions under an Azure subscription for a topic type.
     *
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<List<EventSubscriptionInner>> listGlobalBySubscriptionForTopicTypeAsync(String topicTypeName) {
        return listGlobalBySubscriptionForTopicTypeWithServiceResponseAsync(topicTypeName).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, List<EventSubscriptionInner>>() {
            @Override
            public List<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all global event subscriptions for a topic type.
     * List all global event subscriptions under an Azure subscription for a topic type.
     *
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listGlobalBySubscriptionForTopicTypeWithServiceResponseAsync(String topicTypeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (topicTypeName == null) {
            throw new IllegalArgumentException("Parameter topicTypeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listGlobalBySubscriptionForTopicType(this.client.subscriptionId(), topicTypeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listGlobalBySubscriptionForTopicTypeDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listGlobalBySubscriptionForTopicTypeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group.
     * List all global event subscriptions under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @return the PagedList<EventSubscriptionInner> object if successful.
     */
    public PagedList<EventSubscriptionInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<EventSubscriptionInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<EventSubscriptionInner>(page) {
            @Override
            public Page<EventSubscriptionInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group.
     * List all global event subscriptions under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group.
     * List all global event subscriptions under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<Page<EventSubscriptionInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, Page<EventSubscriptionInner>>() {
            @Override
            public Page<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                PageImpl<EventSubscriptionInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group.
     * List all global event subscriptions under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listByResourceGroupDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all global event subscriptions under a resource group for a topic type.
     * List all global event subscriptions under a resource group for a specific topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventSubscriptionInner&gt; object if successful.
     */
    public List<EventSubscriptionInner> listGlobalByResourceGroupForTopicType(String resourceGroupName, String topicTypeName) {
        return listGlobalByResourceGroupForTopicTypeWithServiceResponseAsync(resourceGroupName, topicTypeName).toBlocking().single().body();
    }

    /**
     * List all global event subscriptions under a resource group for a topic type.
     * List all global event subscriptions under a resource group for a specific topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listGlobalByResourceGroupForTopicTypeAsync(String resourceGroupName, String topicTypeName, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listGlobalByResourceGroupForTopicTypeWithServiceResponseAsync(resourceGroupName, topicTypeName), serviceCallback);
    }

    /**
     * List all global event subscriptions under a resource group for a topic type.
     * List all global event subscriptions under a resource group for a specific topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<List<EventSubscriptionInner>> listGlobalByResourceGroupForTopicTypeAsync(String resourceGroupName, String topicTypeName) {
        return listGlobalByResourceGroupForTopicTypeWithServiceResponseAsync(resourceGroupName, topicTypeName).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, List<EventSubscriptionInner>>() {
            @Override
            public List<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all global event subscriptions under a resource group for a topic type.
     * List all global event subscriptions under a resource group for a specific topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listGlobalByResourceGroupForTopicTypeWithServiceResponseAsync(String resourceGroupName, String topicTypeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (topicTypeName == null) {
            throw new IllegalArgumentException("Parameter topicTypeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listGlobalByResourceGroupForTopicType(this.client.subscriptionId(), resourceGroupName, topicTypeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listGlobalByResourceGroupForTopicTypeDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listGlobalByResourceGroupForTopicTypeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all regional event subscriptions under an Azure subscription.
     * List all event subscriptions from the given location under a specific Azure subscription.
     *
     * @param location Name of the location
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventSubscriptionInner&gt; object if successful.
     */
    public List<EventSubscriptionInner> listRegionalBySubscription(String location) {
        return listRegionalBySubscriptionWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * List all regional event subscriptions under an Azure subscription.
     * List all event subscriptions from the given location under a specific Azure subscription.
     *
     * @param location Name of the location
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listRegionalBySubscriptionAsync(String location, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listRegionalBySubscriptionWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * List all regional event subscriptions under an Azure subscription.
     * List all event subscriptions from the given location under a specific Azure subscription.
     *
     * @param location Name of the location
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<List<EventSubscriptionInner>> listRegionalBySubscriptionAsync(String location) {
        return listRegionalBySubscriptionWithServiceResponseAsync(location).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, List<EventSubscriptionInner>>() {
            @Override
            public List<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all regional event subscriptions under an Azure subscription.
     * List all event subscriptions from the given location under a specific Azure subscription.
     *
     * @param location Name of the location
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listRegionalBySubscriptionWithServiceResponseAsync(String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listRegionalBySubscription(this.client.subscriptionId(), location, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listRegionalBySubscriptionDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listRegionalBySubscriptionDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventSubscriptionInner&gt; object if successful.
     */
    public List<EventSubscriptionInner> listRegionalByResourceGroup(String resourceGroupName, String location) {
        return listRegionalByResourceGroupWithServiceResponseAsync(resourceGroupName, location).toBlocking().single().body();
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listRegionalByResourceGroupAsync(String resourceGroupName, String location, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listRegionalByResourceGroupWithServiceResponseAsync(resourceGroupName, location), serviceCallback);
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<List<EventSubscriptionInner>> listRegionalByResourceGroupAsync(String resourceGroupName, String location) {
        return listRegionalByResourceGroupWithServiceResponseAsync(resourceGroupName, location).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, List<EventSubscriptionInner>>() {
            @Override
            public List<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listRegionalByResourceGroupWithServiceResponseAsync(String resourceGroupName, String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listRegionalByResourceGroup(this.client.subscriptionId(), resourceGroupName, location, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listRegionalByResourceGroupDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listRegionalByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     *
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventSubscriptionInner&gt; object if successful.
     */
    public List<EventSubscriptionInner> listRegionalBySubscriptionForTopicType(String location, String topicTypeName) {
        return listRegionalBySubscriptionForTopicTypeWithServiceResponseAsync(location, topicTypeName).toBlocking().single().body();
    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     *
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listRegionalBySubscriptionForTopicTypeAsync(String location, String topicTypeName, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listRegionalBySubscriptionForTopicTypeWithServiceResponseAsync(location, topicTypeName), serviceCallback);
    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     *
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<List<EventSubscriptionInner>> listRegionalBySubscriptionForTopicTypeAsync(String location, String topicTypeName) {
        return listRegionalBySubscriptionForTopicTypeWithServiceResponseAsync(location, topicTypeName).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, List<EventSubscriptionInner>>() {
            @Override
            public List<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     *
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listRegionalBySubscriptionForTopicTypeWithServiceResponseAsync(String location, String topicTypeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (topicTypeName == null) {
            throw new IllegalArgumentException("Parameter topicTypeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listRegionalBySubscriptionForTopicType(this.client.subscriptionId(), location, topicTypeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listRegionalBySubscriptionForTopicTypeDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listRegionalBySubscriptionForTopicTypeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventSubscriptionInner&gt; object if successful.
     */
    public List<EventSubscriptionInner> listRegionalByResourceGroupForTopicType(String resourceGroupName, String location, String topicTypeName) {
        return listRegionalByResourceGroupForTopicTypeWithServiceResponseAsync(resourceGroupName, location, topicTypeName).toBlocking().single().body();
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listRegionalByResourceGroupForTopicTypeAsync(String resourceGroupName, String location, String topicTypeName, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listRegionalByResourceGroupForTopicTypeWithServiceResponseAsync(resourceGroupName, location, topicTypeName), serviceCallback);
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<List<EventSubscriptionInner>> listRegionalByResourceGroupForTopicTypeAsync(String resourceGroupName, String location, String topicTypeName) {
        return listRegionalByResourceGroupForTopicTypeWithServiceResponseAsync(resourceGroupName, location, topicTypeName).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, List<EventSubscriptionInner>>() {
            @Override
            public List<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type.
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location
     * @param topicTypeName Name of the topic type
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listRegionalByResourceGroupForTopicTypeWithServiceResponseAsync(String resourceGroupName, String location, String topicTypeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (topicTypeName == null) {
            throw new IllegalArgumentException("Parameter topicTypeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listRegionalByResourceGroupForTopicType(this.client.subscriptionId(), resourceGroupName, location, topicTypeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listRegionalByResourceGroupForTopicTypeDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listRegionalByResourceGroupForTopicTypeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all event subscriptions for a specific topic.
     * List all event subscriptions that have been created for a specific topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic
     * @param resourceTypeName Name of the resource type
     * @param resourceName Name of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventSubscriptionInner&gt; object if successful.
     */
    public List<EventSubscriptionInner> listByResource(String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName) {
        return listByResourceWithServiceResponseAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName).toBlocking().single().body();
    }

    /**
     * List all event subscriptions for a specific topic.
     * List all event subscriptions that have been created for a specific topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic
     * @param resourceTypeName Name of the resource type
     * @param resourceName Name of the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventSubscriptionInner>> listByResourceAsync(String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, final ServiceCallback<List<EventSubscriptionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceWithServiceResponseAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName), serviceCallback);
    }

    /**
     * List all event subscriptions for a specific topic.
     * List all event subscriptions that have been created for a specific topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic
     * @param resourceTypeName Name of the resource type
     * @param resourceName Name of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<List<EventSubscriptionInner>> listByResourceAsync(String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName) {
        return listByResourceWithServiceResponseAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName).map(new Func1<ServiceResponse<List<EventSubscriptionInner>>, List<EventSubscriptionInner>>() {
            @Override
            public List<EventSubscriptionInner> call(ServiceResponse<List<EventSubscriptionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all event subscriptions for a specific topic.
     * List all event subscriptions that have been created for a specific topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic
     * @param resourceTypeName Name of the resource type
     * @param resourceName Name of the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<List<EventSubscriptionInner>>> listByResourceWithServiceResponseAsync(String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerNamespace == null) {
            throw new IllegalArgumentException("Parameter providerNamespace is required and cannot be null.");
        }
        if (resourceTypeName == null) {
            throw new IllegalArgumentException("Parameter resourceTypeName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResource(this.client.subscriptionId(), resourceGroupName, providerNamespace, resourceTypeName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EventSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EventSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventSubscriptionInner>> result = listByResourceDelegate(response);
                        List<EventSubscriptionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EventSubscriptionInner>> clientResponse = new ServiceResponse<List<EventSubscriptionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventSubscriptionInner>> listByResourceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventSubscriptionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventSubscriptionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
