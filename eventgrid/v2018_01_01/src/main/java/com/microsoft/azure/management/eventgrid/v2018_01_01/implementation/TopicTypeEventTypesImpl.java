/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.eventgrid.v2018_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.eventgrid.v2018_01_01.TopicTypeEventTypes;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.eventgrid.v2018_01_01.EventType;

class TopicTypeEventTypesImpl extends WrapperImpl<TopicTypesInner> implements TopicTypeEventTypes {
    private final EventGridManager manager;

    TopicTypeEventTypesImpl(EventGridManager manager) {
        super(manager.inner().topicTypes());
        this.manager = manager;
    }

    public EventGridManager manager() {
        return this.manager;
    }

    private EventTypeImpl wrapModel(EventTypeInner inner) {
        return  new EventTypeImpl(inner, manager());
    }

    @Override
    public Observable<EventType> listByTopicTypeAsync(String topicTypeName) {
        TopicTypesInner client = this.inner();
        return client.listEventTypesAsync(topicTypeName)
        .flatMap(new Func1<List<EventTypeInner>, Observable<EventTypeInner>>() {
            @Override
            public Observable<EventTypeInner> call(List<EventTypeInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<EventTypeInner, EventType>() {
            @Override
            public EventType call(EventTypeInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
