/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.sql.ServerUpgradeStartParameters;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Servers.
 */
public final class ServersInner {
    /** The Retrofit service to perform REST calls. */
    private ServersService service;
    /** The service client containing this operation class. */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of ServersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServersInner(Retrofit retrofit, SqlManagementClientImpl client) {
        this.service = retrofit.create(ServersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Servers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServersService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Body ServerInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/operationResults/versionUpgrade", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> cancelUpgrade(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/operationResults/versionUpgrade")
        Observable<Response<ResponseBody>> getUpgradeResult(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/upgrade")
        Observable<Response<ResponseBody>> startUpgrade(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ServerUpgradeStartParameters parameters, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/usages")
        Observable<Response<ResponseBody>> listUsages(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives/{serviceObjectiveName}")
        Observable<Response<ResponseBody>> getServiceObjective(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("serviceObjectiveName") String serviceObjectiveName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives")
        Observable<Response<ResponseBody>> listServiceObjectives(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRule}")
        Observable<Response<ResponseBody>> createOrUpdateFirewallRule(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("firewallRule") String firewallRule, @Query("api-version") String apiVersion, @Body FirewallRuleInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRule}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteFirewallRules(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("firewallRule") String firewallRule, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRule}")
        Observable<Response<ResponseBody>> getFirewallRule(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("firewallRule") String firewallRule, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules")
        Observable<Response<ResponseBody>> listFirewallRules(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import")
        Observable<Response<ResponseBody>> importDatabase(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Body ImportRequestParametersInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import")
        Observable<Response<ResponseBody>> beginImportDatabase(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Body ImportRequestParametersInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/importExportOperationResults/{operationId}")
        Observable<Response<ResponseBody>> getImportStatus(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("operationId") UUID operationId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration")
        Observable<Response<ResponseBody>> listDisasterRecoveryConfigurations(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{serverDisasterRecoveryConfigurationName}")
        Observable<Response<ResponseBody>> getDisasterRecoveryConfiguration(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("serverDisasterRecoveryConfigurationName") String serverDisasterRecoveryConfigurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{serverDisasterRecoveryConfigurationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteDisasterRecoveryConfiguration(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("serverDisasterRecoveryConfigurationName") String serverDisasterRecoveryConfigurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{serverDisasterRecoveryConfigurationName}")
        Observable<Response<ResponseBody>> createOrUpdateDisasterRecoveryConfiguration(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("serverDisasterRecoveryConfigurationName") String serverDisasterRecoveryConfigurationName, @Query("api-version") String apiVersion, @Body ServerDisasterRecoveryConfigurationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{serverDisasterRecoveryConfigurationName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdateDisasterRecoveryConfiguration(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("serverDisasterRecoveryConfigurationName") String serverDisasterRecoveryConfigurationName, @Query("api-version") String apiVersion, @Body ServerDisasterRecoveryConfigurationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{serverDisasterRecoveryConfigurationName}/failover")
        Observable<Response<ResponseBody>> failoverDisasterRecoveryConfiguration(@Path("serverDisasterRecoveryConfigurationName") String serverDisasterRecoveryConfigurationName, @Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{serverDisasterRecoveryConfigurationName}/forceFailoverAllowDataLoss")
        Observable<Response<ResponseBody>> forceFailoverAllowDataLossDisasterRecoveryConfiguration(@Path("serverDisasterRecoveryConfigurationName") String serverDisasterRecoveryConfigurationName, @Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}")
        Observable<Response<ResponseBody>> createOrUpdateAzureADAdministrator(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("administratorName") String administratorName, @Query("api-version") String apiVersion, @Body ServerAzureADAdministratorInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdateAzureADAdministrator(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("administratorName") String administratorName, @Query("api-version") String apiVersion, @Body ServerAzureADAdministratorInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAzureADAdministrator(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("administratorName") String administratorName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteAzureADAdministrator(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("administratorName") String administratorName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}")
        Observable<Response<ResponseBody>> getAzureADAdministrator(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("administratorName") String administratorName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators")
        Observable<Response<ResponseBody>> listAzureADAdministrator(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/Default")
        Observable<Response<ResponseBody>> updateSecureConnectionPolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Body ServerSecureConnectionPolicyInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/Default")
        Observable<Response<ResponseBody>> getSecureConnectionPolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a new Azure SQL Server.
     *
     * @param parameters The required parameters for createing or updating a server.
     * @return the ServerInner object if successful.
     */
    public ServerInner createOrUpdate(ServerInner parameters) {
        return createOrUpdateWithServiceResponseAsync(parameters).toBlocking().single().getBody();
    }

    /**
     * Creates a new Azure SQL Server.
     *
     * @param parameters The required parameters for createing or updating a server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerInner> createOrUpdateAsync(ServerInner parameters, final ServiceCallback<ServerInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * Creates a new Azure SQL Server.
     *
     * @param parameters The required parameters for createing or updating a server.
     * @return the observable to the ServerInner object
     */
    public Observable<ServerInner> createOrUpdateAsync(ServerInner parameters) {
        return createOrUpdateWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<ServerInner>, ServerInner>() {
            @Override
            public ServerInner call(ServiceResponse<ServerInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates a new Azure SQL Server.
     *
     * @param parameters The required parameters for createing or updating a server.
     * @return the observable to the ServerInner object
     */
    public Observable<ServiceResponse<ServerInner>> createOrUpdateWithServiceResponseAsync(ServerInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.createOrUpdate(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerInner>() { }.getType())
                .register(201, new TypeToken<ServerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     */
    public void delete() {
        deleteWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync() {
        return deleteWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.delete(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the ServerInner object if successful.
     */
    public ServerInner get() {
        return getWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerInner> getAsync(final ServiceCallback<ServerInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the observable to the ServerInner object
     */
    public Observable<ServerInner> getAsync() {
        return getWithServiceResponseAsync().map(new Func1<ServiceResponse<ServerInner>, ServerInner>() {
            @Override
            public ServerInner call(ServiceResponse<ServerInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the observable to the ServerInner object
     */
    public Observable<ServiceResponse<ServerInner>> getWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.get(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the List&lt;ServerInner&gt; object if successful.
     */
    public List<ServerInner> list() {
        return listWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ServerInner>> listAsync(final ServiceCallback<List<ServerInner>> serviceCallback) {
        return ServiceCall.create(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the observable to the List&lt;ServerInner&gt; object
     */
    public Observable<List<ServerInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<ServerInner>>, List<ServerInner>>() {
            @Override
            public List<ServerInner> call(ServiceResponse<List<ServerInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL Server.
     *
     * @return the observable to the List&lt;ServerInner&gt; object
     */
    public Observable<ServiceResponse<List<ServerInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.list(this.client.subscriptionId(), this.client.resourceGroupName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ServerInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ServerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ServerInner>> result = listDelegate(response);
                        ServiceResponse<List<ServerInner>> clientResponse = new ServiceResponse<List<ServerInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ServerInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<ServerInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<ServerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Cancel a pending upgrade for the Azure SQL Server.
     *
     */
    public void cancelUpgrade() {
        cancelUpgradeWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Cancel a pending upgrade for the Azure SQL Server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> cancelUpgradeAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(cancelUpgradeWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Cancel a pending upgrade for the Azure SQL Server.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> cancelUpgradeAsync() {
        return cancelUpgradeWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Cancel a pending upgrade for the Azure SQL Server.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> cancelUpgradeWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.cancelUpgrade(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = cancelUpgradeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> cancelUpgradeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Returns information about Upgrade status of an Azure SQL Server.
     *
     * @return the ServerUpgradeGetResultInner object if successful.
     */
    public ServerUpgradeGetResultInner getUpgradeResult() {
        return getUpgradeResultWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns information about Upgrade status of an Azure SQL Server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerUpgradeGetResultInner> getUpgradeResultAsync(final ServiceCallback<ServerUpgradeGetResultInner> serviceCallback) {
        return ServiceCall.create(getUpgradeResultWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns information about Upgrade status of an Azure SQL Server.
     *
     * @return the observable to the ServerUpgradeGetResultInner object
     */
    public Observable<ServerUpgradeGetResultInner> getUpgradeResultAsync() {
        return getUpgradeResultWithServiceResponseAsync().map(new Func1<ServiceResponse<ServerUpgradeGetResultInner>, ServerUpgradeGetResultInner>() {
            @Override
            public ServerUpgradeGetResultInner call(ServiceResponse<ServerUpgradeGetResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about Upgrade status of an Azure SQL Server.
     *
     * @return the observable to the ServerUpgradeGetResultInner object
     */
    public Observable<ServiceResponse<ServerUpgradeGetResultInner>> getUpgradeResultWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getUpgradeResult(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerUpgradeGetResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerUpgradeGetResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerUpgradeGetResultInner> clientResponse = getUpgradeResultDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerUpgradeGetResultInner> getUpgradeResultDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerUpgradeGetResultInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerUpgradeGetResultInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Start an Azure SQL Server Upgrade.
     *
     * @param serverUpgradeProperties Gets or sets the properties of the Azure SQL Server Upgrade.
     */
    public void startUpgrade(ServerUpgradePropertiesInner serverUpgradeProperties) {
        startUpgradeWithServiceResponseAsync(serverUpgradeProperties).toBlocking().single().getBody();
    }

    /**
     * Start an Azure SQL Server Upgrade.
     *
     * @param serverUpgradeProperties Gets or sets the properties of the Azure SQL Server Upgrade.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> startUpgradeAsync(ServerUpgradePropertiesInner serverUpgradeProperties, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(startUpgradeWithServiceResponseAsync(serverUpgradeProperties), serviceCallback);
    }

    /**
     * Start an Azure SQL Server Upgrade.
     *
     * @param serverUpgradeProperties Gets or sets the properties of the Azure SQL Server Upgrade.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> startUpgradeAsync(ServerUpgradePropertiesInner serverUpgradeProperties) {
        return startUpgradeWithServiceResponseAsync(serverUpgradeProperties).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Start an Azure SQL Server Upgrade.
     *
     * @param serverUpgradeProperties Gets or sets the properties of the Azure SQL Server Upgrade.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> startUpgradeWithServiceResponseAsync(ServerUpgradePropertiesInner serverUpgradeProperties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (serverUpgradeProperties == null) {
            throw new IllegalArgumentException("Parameter serverUpgradeProperties is required and cannot be null.");
        }
        Validator.validate(serverUpgradeProperties);
        final String apiVersion = "2014-04-01";
        ServerUpgradeStartParameters parameters = new ServerUpgradeStartParameters();
        parameters.withServerUpgradeProperties(serverUpgradeProperties);
        return service.startUpgrade(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = startUpgradeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> startUpgradeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Returns information about Azure SQL Server usage.
     *
     * @return the List&lt;ServerMetricInner&gt; object if successful.
     */
    public List<ServerMetricInner> listUsages() {
        return listUsagesWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns information about Azure SQL Server usage.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ServerMetricInner>> listUsagesAsync(final ServiceCallback<List<ServerMetricInner>> serviceCallback) {
        return ServiceCall.create(listUsagesWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns information about Azure SQL Server usage.
     *
     * @return the observable to the List&lt;ServerMetricInner&gt; object
     */
    public Observable<List<ServerMetricInner>> listUsagesAsync() {
        return listUsagesWithServiceResponseAsync().map(new Func1<ServiceResponse<List<ServerMetricInner>>, List<ServerMetricInner>>() {
            @Override
            public List<ServerMetricInner> call(ServiceResponse<List<ServerMetricInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about Azure SQL Server usage.
     *
     * @return the observable to the List&lt;ServerMetricInner&gt; object
     */
    public Observable<ServiceResponse<List<ServerMetricInner>>> listUsagesWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listUsages(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ServerMetricInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ServerMetricInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ServerMetricInner>> result = listUsagesDelegate(response);
                        ServiceResponse<List<ServerMetricInner>> clientResponse = new ServiceResponse<List<ServerMetricInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ServerMetricInner>> listUsagesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<ServerMetricInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<ServerMetricInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about an Azure SQL Database Service Objective.
     *
     * @param serviceObjectiveName The name of the service objective to retrieve.
     * @return the ServiceObjectiveInner object if successful.
     */
    public ServiceObjectiveInner getServiceObjective(String serviceObjectiveName) {
        return getServiceObjectiveWithServiceResponseAsync(serviceObjectiveName).toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL Database Service Objective.
     *
     * @param serviceObjectiveName The name of the service objective to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServiceObjectiveInner> getServiceObjectiveAsync(String serviceObjectiveName, final ServiceCallback<ServiceObjectiveInner> serviceCallback) {
        return ServiceCall.create(getServiceObjectiveWithServiceResponseAsync(serviceObjectiveName), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL Database Service Objective.
     *
     * @param serviceObjectiveName The name of the service objective to retrieve.
     * @return the observable to the ServiceObjectiveInner object
     */
    public Observable<ServiceObjectiveInner> getServiceObjectiveAsync(String serviceObjectiveName) {
        return getServiceObjectiveWithServiceResponseAsync(serviceObjectiveName).map(new Func1<ServiceResponse<ServiceObjectiveInner>, ServiceObjectiveInner>() {
            @Override
            public ServiceObjectiveInner call(ServiceResponse<ServiceObjectiveInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL Database Service Objective.
     *
     * @param serviceObjectiveName The name of the service objective to retrieve.
     * @return the observable to the ServiceObjectiveInner object
     */
    public Observable<ServiceResponse<ServiceObjectiveInner>> getServiceObjectiveWithServiceResponseAsync(String serviceObjectiveName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (serviceObjectiveName == null) {
            throw new IllegalArgumentException("Parameter serviceObjectiveName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getServiceObjective(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), serviceObjectiveName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceObjectiveInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceObjectiveInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceObjectiveInner> clientResponse = getServiceObjectiveDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceObjectiveInner> getServiceObjectiveDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServiceObjectiveInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServiceObjectiveInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about Azure SQL Database Service Objectives.
     *
     * @return the List&lt;ServiceObjectiveInner&gt; object if successful.
     */
    public List<ServiceObjectiveInner> listServiceObjectives() {
        return listServiceObjectivesWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns information about Azure SQL Database Service Objectives.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ServiceObjectiveInner>> listServiceObjectivesAsync(final ServiceCallback<List<ServiceObjectiveInner>> serviceCallback) {
        return ServiceCall.create(listServiceObjectivesWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns information about Azure SQL Database Service Objectives.
     *
     * @return the observable to the List&lt;ServiceObjectiveInner&gt; object
     */
    public Observable<List<ServiceObjectiveInner>> listServiceObjectivesAsync() {
        return listServiceObjectivesWithServiceResponseAsync().map(new Func1<ServiceResponse<List<ServiceObjectiveInner>>, List<ServiceObjectiveInner>>() {
            @Override
            public List<ServiceObjectiveInner> call(ServiceResponse<List<ServiceObjectiveInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about Azure SQL Database Service Objectives.
     *
     * @return the observable to the List&lt;ServiceObjectiveInner&gt; object
     */
    public Observable<ServiceResponse<List<ServiceObjectiveInner>>> listServiceObjectivesWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listServiceObjectives(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ServiceObjectiveInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ServiceObjectiveInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ServiceObjectiveInner>> result = listServiceObjectivesDelegate(response);
                        ServiceResponse<List<ServiceObjectiveInner>> clientResponse = new ServiceResponse<List<ServiceObjectiveInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ServiceObjectiveInner>> listServiceObjectivesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<ServiceObjectiveInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<ServiceObjectiveInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @return the FirewallRuleInner object if successful.
     */
    public FirewallRuleInner createOrUpdateFirewallRule(String firewallRule, FirewallRuleInner parameters) {
        return createOrUpdateFirewallRuleWithServiceResponseAsync(firewallRule, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or updates an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<FirewallRuleInner> createOrUpdateFirewallRuleAsync(String firewallRule, FirewallRuleInner parameters, final ServiceCallback<FirewallRuleInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateFirewallRuleWithServiceResponseAsync(firewallRule, parameters), serviceCallback);
    }

    /**
     * Creates or updates an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @return the observable to the FirewallRuleInner object
     */
    public Observable<FirewallRuleInner> createOrUpdateFirewallRuleAsync(String firewallRule, FirewallRuleInner parameters) {
        return createOrUpdateFirewallRuleWithServiceResponseAsync(firewallRule, parameters).map(new Func1<ServiceResponse<FirewallRuleInner>, FirewallRuleInner>() {
            @Override
            public FirewallRuleInner call(ServiceResponse<FirewallRuleInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or updates an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @return the observable to the FirewallRuleInner object
     */
    public Observable<ServiceResponse<FirewallRuleInner>> createOrUpdateFirewallRuleWithServiceResponseAsync(String firewallRule, FirewallRuleInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (firewallRule == null) {
            throw new IllegalArgumentException("Parameter firewallRule is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.createOrUpdateFirewallRule(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), firewallRule, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FirewallRuleInner>>>() {
                @Override
                public Observable<ServiceResponse<FirewallRuleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FirewallRuleInner> clientResponse = createOrUpdateFirewallRuleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FirewallRuleInner> createOrUpdateFirewallRuleDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<FirewallRuleInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<FirewallRuleInner>() { }.getType())
                .register(201, new TypeToken<FirewallRuleInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     */
    public void deleteFirewallRules(String firewallRule) {
        deleteFirewallRulesWithServiceResponseAsync(firewallRule).toBlocking().single().getBody();
    }

    /**
     * Deletes an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteFirewallRulesAsync(String firewallRule, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteFirewallRulesWithServiceResponseAsync(firewallRule), serviceCallback);
    }

    /**
     * Deletes an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteFirewallRulesAsync(String firewallRule) {
        return deleteFirewallRulesWithServiceResponseAsync(firewallRule).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteFirewallRulesWithServiceResponseAsync(String firewallRule) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (firewallRule == null) {
            throw new IllegalArgumentException("Parameter firewallRule is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.deleteFirewallRules(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), firewallRule, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteFirewallRulesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteFirewallRulesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Returns an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @return the FirewallRuleInner object if successful.
     */
    public FirewallRuleInner getFirewallRule(String firewallRule) {
        return getFirewallRuleWithServiceResponseAsync(firewallRule).toBlocking().single().getBody();
    }

    /**
     * Returns an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<FirewallRuleInner> getFirewallRuleAsync(String firewallRule, final ServiceCallback<FirewallRuleInner> serviceCallback) {
        return ServiceCall.create(getFirewallRuleWithServiceResponseAsync(firewallRule), serviceCallback);
    }

    /**
     * Returns an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @return the observable to the FirewallRuleInner object
     */
    public Observable<FirewallRuleInner> getFirewallRuleAsync(String firewallRule) {
        return getFirewallRuleWithServiceResponseAsync(firewallRule).map(new Func1<ServiceResponse<FirewallRuleInner>, FirewallRuleInner>() {
            @Override
            public FirewallRuleInner call(ServiceResponse<FirewallRuleInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns an Azure SQL server firewall rule.
     *
     * @param firewallRule The name of the Azure SQL Server Firewall Rule.
     * @return the observable to the FirewallRuleInner object
     */
    public Observable<ServiceResponse<FirewallRuleInner>> getFirewallRuleWithServiceResponseAsync(String firewallRule) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (firewallRule == null) {
            throw new IllegalArgumentException("Parameter firewallRule is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getFirewallRule(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), firewallRule, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FirewallRuleInner>>>() {
                @Override
                public Observable<ServiceResponse<FirewallRuleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FirewallRuleInner> clientResponse = getFirewallRuleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FirewallRuleInner> getFirewallRuleDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<FirewallRuleInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<FirewallRuleInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns a list of Azure SQL server firewall rules.
     *
     * @return the List&lt;FirewallRuleInner&gt; object if successful.
     */
    public List<FirewallRuleInner> listFirewallRules() {
        return listFirewallRulesWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns a list of Azure SQL server firewall rules.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<FirewallRuleInner>> listFirewallRulesAsync(final ServiceCallback<List<FirewallRuleInner>> serviceCallback) {
        return ServiceCall.create(listFirewallRulesWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns a list of Azure SQL server firewall rules.
     *
     * @return the observable to the List&lt;FirewallRuleInner&gt; object
     */
    public Observable<List<FirewallRuleInner>> listFirewallRulesAsync() {
        return listFirewallRulesWithServiceResponseAsync().map(new Func1<ServiceResponse<List<FirewallRuleInner>>, List<FirewallRuleInner>>() {
            @Override
            public List<FirewallRuleInner> call(ServiceResponse<List<FirewallRuleInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns a list of Azure SQL server firewall rules.
     *
     * @return the observable to the List&lt;FirewallRuleInner&gt; object
     */
    public Observable<ServiceResponse<List<FirewallRuleInner>>> listFirewallRulesWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listFirewallRules(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<FirewallRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<FirewallRuleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<FirewallRuleInner>> result = listFirewallRulesDelegate(response);
                        ServiceResponse<List<FirewallRuleInner>> clientResponse = new ServiceResponse<List<FirewallRuleInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<FirewallRuleInner>> listFirewallRulesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<FirewallRuleInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<FirewallRuleInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @return the ImportExportOperationStatusResponseInner object if successful.
     */
    public ImportExportOperationStatusResponseInner importDatabase(ImportRequestParametersInner parameters) {
        return importDatabaseWithServiceResponseAsync(parameters).toBlocking().last().getBody();
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ImportExportOperationStatusResponseInner> importDatabaseAsync(ImportRequestParametersInner parameters, final ServiceCallback<ImportExportOperationStatusResponseInner> serviceCallback) {
        return ServiceCall.create(importDatabaseWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @return the observable for the request
     */
    public Observable<ImportExportOperationStatusResponseInner> importDatabaseAsync(ImportRequestParametersInner parameters) {
        return importDatabaseWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<ImportExportOperationStatusResponseInner>, ImportExportOperationStatusResponseInner>() {
            @Override
            public ImportExportOperationStatusResponseInner call(ServiceResponse<ImportExportOperationStatusResponseInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ImportExportOperationStatusResponseInner>> importDatabaseWithServiceResponseAsync(ImportRequestParametersInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        Observable<Response<ResponseBody>> observable = service.importDatabase(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ImportExportOperationStatusResponseInner>() { }.getType());
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @return the ImportExportOperationStatusResponseInner object if successful.
     */
    public ImportExportOperationStatusResponseInner beginImportDatabase(ImportRequestParametersInner parameters) {
        return beginImportDatabaseWithServiceResponseAsync(parameters).toBlocking().single().getBody();
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ImportExportOperationStatusResponseInner> beginImportDatabaseAsync(ImportRequestParametersInner parameters, final ServiceCallback<ImportExportOperationStatusResponseInner> serviceCallback) {
        return ServiceCall.create(beginImportDatabaseWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @return the observable to the ImportExportOperationStatusResponseInner object
     */
    public Observable<ImportExportOperationStatusResponseInner> beginImportDatabaseAsync(ImportRequestParametersInner parameters) {
        return beginImportDatabaseWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<ImportExportOperationStatusResponseInner>, ImportExportOperationStatusResponseInner>() {
            @Override
            public ImportExportOperationStatusResponseInner call(ServiceResponse<ImportExportOperationStatusResponseInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Imports a bacpac into a new Azure SQL database.
     *
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @return the observable to the ImportExportOperationStatusResponseInner object
     */
    public Observable<ServiceResponse<ImportExportOperationStatusResponseInner>> beginImportDatabaseWithServiceResponseAsync(ImportRequestParametersInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.beginImportDatabase(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImportExportOperationStatusResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<ImportExportOperationStatusResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImportExportOperationStatusResponseInner> clientResponse = beginImportDatabaseDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImportExportOperationStatusResponseInner> beginImportDatabaseDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ImportExportOperationStatusResponseInner, CloudException>(this.client.mapperAdapter())
                .register(202, new TypeToken<ImportExportOperationStatusResponseInner>() { }.getType())
                .register(200, new TypeToken<ImportExportOperationStatusResponseInner>() { }.getType())
                .register(201, new TypeToken<ImportExportOperationStatusResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the status of an import operation given the operation ID.
     *
     * @param operationId The operation ID associated with the operation.
     * @return the ImportExportOperationStatusResponseInner object if successful.
     */
    public ImportExportOperationStatusResponseInner getImportStatus(UUID operationId) {
        return getImportStatusWithServiceResponseAsync(operationId).toBlocking().single().getBody();
    }

    /**
     * Gets the status of an import operation given the operation ID.
     *
     * @param operationId The operation ID associated with the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ImportExportOperationStatusResponseInner> getImportStatusAsync(UUID operationId, final ServiceCallback<ImportExportOperationStatusResponseInner> serviceCallback) {
        return ServiceCall.create(getImportStatusWithServiceResponseAsync(operationId), serviceCallback);
    }

    /**
     * Gets the status of an import operation given the operation ID.
     *
     * @param operationId The operation ID associated with the operation.
     * @return the observable to the ImportExportOperationStatusResponseInner object
     */
    public Observable<ImportExportOperationStatusResponseInner> getImportStatusAsync(UUID operationId) {
        return getImportStatusWithServiceResponseAsync(operationId).map(new Func1<ServiceResponse<ImportExportOperationStatusResponseInner>, ImportExportOperationStatusResponseInner>() {
            @Override
            public ImportExportOperationStatusResponseInner call(ServiceResponse<ImportExportOperationStatusResponseInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets the status of an import operation given the operation ID.
     *
     * @param operationId The operation ID associated with the operation.
     * @return the observable to the ImportExportOperationStatusResponseInner object
     */
    public Observable<ServiceResponse<ImportExportOperationStatusResponseInner>> getImportStatusWithServiceResponseAsync(UUID operationId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getImportStatus(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), operationId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImportExportOperationStatusResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<ImportExportOperationStatusResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImportExportOperationStatusResponseInner> clientResponse = getImportStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImportExportOperationStatusResponseInner> getImportStatusDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ImportExportOperationStatusResponseInner, CloudException>(this.client.mapperAdapter())
                .register(202, new TypeToken<ImportExportOperationStatusResponseInner>() { }.getType())
                .register(200, new TypeToken<ImportExportOperationStatusResponseInner>() { }.getType())
                .register(201, new TypeToken<ImportExportOperationStatusResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns a list of Azure SQL Server disaster recovery configurations.
     *
     * @return the ServerDisasterRecoveryConfigurationListInner object if successful.
     */
    public ServerDisasterRecoveryConfigurationListInner listDisasterRecoveryConfigurations() {
        return listDisasterRecoveryConfigurationsWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns a list of Azure SQL Server disaster recovery configurations.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerDisasterRecoveryConfigurationListInner> listDisasterRecoveryConfigurationsAsync(final ServiceCallback<ServerDisasterRecoveryConfigurationListInner> serviceCallback) {
        return ServiceCall.create(listDisasterRecoveryConfigurationsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns a list of Azure SQL Server disaster recovery configurations.
     *
     * @return the observable to the ServerDisasterRecoveryConfigurationListInner object
     */
    public Observable<ServerDisasterRecoveryConfigurationListInner> listDisasterRecoveryConfigurationsAsync() {
        return listDisasterRecoveryConfigurationsWithServiceResponseAsync().map(new Func1<ServiceResponse<ServerDisasterRecoveryConfigurationListInner>, ServerDisasterRecoveryConfigurationListInner>() {
            @Override
            public ServerDisasterRecoveryConfigurationListInner call(ServiceResponse<ServerDisasterRecoveryConfigurationListInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns a list of Azure SQL Server disaster recovery configurations.
     *
     * @return the observable to the ServerDisasterRecoveryConfigurationListInner object
     */
    public Observable<ServiceResponse<ServerDisasterRecoveryConfigurationListInner>> listDisasterRecoveryConfigurationsWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listDisasterRecoveryConfigurations(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerDisasterRecoveryConfigurationListInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerDisasterRecoveryConfigurationListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerDisasterRecoveryConfigurationListInner> clientResponse = listDisasterRecoveryConfigurationsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerDisasterRecoveryConfigurationListInner> listDisasterRecoveryConfigurationsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerDisasterRecoveryConfigurationListInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerDisasterRecoveryConfigurationListInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about an Azure SQL Server disaster recovery configurations.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @return the ServerDisasterRecoveryConfigurationInner object if successful.
     */
    public ServerDisasterRecoveryConfigurationInner getDisasterRecoveryConfiguration(String serverDisasterRecoveryConfigurationName) {
        return getDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL Server disaster recovery configurations.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerDisasterRecoveryConfigurationInner> getDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, final ServiceCallback<ServerDisasterRecoveryConfigurationInner> serviceCallback) {
        return ServiceCall.create(getDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL Server disaster recovery configurations.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @return the observable to the ServerDisasterRecoveryConfigurationInner object
     */
    public Observable<ServerDisasterRecoveryConfigurationInner> getDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName) {
        return getDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).map(new Func1<ServiceResponse<ServerDisasterRecoveryConfigurationInner>, ServerDisasterRecoveryConfigurationInner>() {
            @Override
            public ServerDisasterRecoveryConfigurationInner call(ServiceResponse<ServerDisasterRecoveryConfigurationInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL Server disaster recovery configurations.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @return the observable to the ServerDisasterRecoveryConfigurationInner object
     */
    public Observable<ServiceResponse<ServerDisasterRecoveryConfigurationInner>> getDisasterRecoveryConfigurationWithServiceResponseAsync(String serverDisasterRecoveryConfigurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (serverDisasterRecoveryConfigurationName == null) {
            throw new IllegalArgumentException("Parameter serverDisasterRecoveryConfigurationName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getDisasterRecoveryConfiguration(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), serverDisasterRecoveryConfigurationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerDisasterRecoveryConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerDisasterRecoveryConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerDisasterRecoveryConfigurationInner> clientResponse = getDisasterRecoveryConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerDisasterRecoveryConfigurationInner> getDisasterRecoveryConfigurationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerDisasterRecoveryConfigurationInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerDisasterRecoveryConfigurationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be deleted.
     */
    public void deleteDisasterRecoveryConfiguration(String serverDisasterRecoveryConfigurationName) {
        deleteDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).toBlocking().single().getBody();
    }

    /**
     * Deletes the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be deleted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName), serviceCallback);
    }

    /**
     * Deletes the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be deleted.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName) {
        return deleteDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be deleted.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteDisasterRecoveryConfigurationWithServiceResponseAsync(String serverDisasterRecoveryConfigurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (serverDisasterRecoveryConfigurationName == null) {
            throw new IllegalArgumentException("Parameter serverDisasterRecoveryConfigurationName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.deleteDisasterRecoveryConfiguration(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), serverDisasterRecoveryConfigurationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDisasterRecoveryConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDisasterRecoveryConfigurationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @return the ServerDisasterRecoveryConfigurationInner object if successful.
     */
    public ServerDisasterRecoveryConfigurationInner createOrUpdateDisasterRecoveryConfiguration(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters) {
        return createOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName, parameters).toBlocking().last().getBody();
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerDisasterRecoveryConfigurationInner> createOrUpdateDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters, final ServiceCallback<ServerDisasterRecoveryConfigurationInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName, parameters), serviceCallback);
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @return the observable for the request
     */
    public Observable<ServerDisasterRecoveryConfigurationInner> createOrUpdateDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters) {
        return createOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName, parameters).map(new Func1<ServiceResponse<ServerDisasterRecoveryConfigurationInner>, ServerDisasterRecoveryConfigurationInner>() {
            @Override
            public ServerDisasterRecoveryConfigurationInner call(ServiceResponse<ServerDisasterRecoveryConfigurationInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServerDisasterRecoveryConfigurationInner>> createOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (serverDisasterRecoveryConfigurationName == null) {
            throw new IllegalArgumentException("Parameter serverDisasterRecoveryConfigurationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdateDisasterRecoveryConfiguration(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), serverDisasterRecoveryConfigurationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServerDisasterRecoveryConfigurationInner>() { }.getType());
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @return the ServerDisasterRecoveryConfigurationInner object if successful.
     */
    public ServerDisasterRecoveryConfigurationInner beginCreateOrUpdateDisasterRecoveryConfiguration(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters) {
        return beginCreateOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName, parameters).toBlocking().single().getBody();
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerDisasterRecoveryConfigurationInner> beginCreateOrUpdateDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters, final ServiceCallback<ServerDisasterRecoveryConfigurationInner> serviceCallback) {
        return ServiceCall.create(beginCreateOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName, parameters), serviceCallback);
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @return the observable to the ServerDisasterRecoveryConfigurationInner object
     */
    public Observable<ServerDisasterRecoveryConfigurationInner> beginCreateOrUpdateDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters) {
        return beginCreateOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName, parameters).map(new Func1<ServiceResponse<ServerDisasterRecoveryConfigurationInner>, ServerDisasterRecoveryConfigurationInner>() {
            @Override
            public ServerDisasterRecoveryConfigurationInner call(ServiceResponse<ServerDisasterRecoveryConfigurationInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins creating a new or updating an existing Azure SQL Server disaster recovery configuration. To determine the status of the operation call GetServerDisasterRecoveryConfigurationOperationStatus.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to be retrieved.
     * @param parameters The required parameters for creating or updating a Server disaster recovery configuration.
     * @return the observable to the ServerDisasterRecoveryConfigurationInner object
     */
    public Observable<ServiceResponse<ServerDisasterRecoveryConfigurationInner>> beginCreateOrUpdateDisasterRecoveryConfigurationWithServiceResponseAsync(String serverDisasterRecoveryConfigurationName, ServerDisasterRecoveryConfigurationInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (serverDisasterRecoveryConfigurationName == null) {
            throw new IllegalArgumentException("Parameter serverDisasterRecoveryConfigurationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.beginCreateOrUpdateDisasterRecoveryConfiguration(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), serverDisasterRecoveryConfigurationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerDisasterRecoveryConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerDisasterRecoveryConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerDisasterRecoveryConfigurationInner> clientResponse = beginCreateOrUpdateDisasterRecoveryConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerDisasterRecoveryConfigurationInner> beginCreateOrUpdateDisasterRecoveryConfigurationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerDisasterRecoveryConfigurationInner, CloudException>(this.client.mapperAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(200, new TypeToken<ServerDisasterRecoveryConfigurationInner>() { }.getType())
                .register(201, new TypeToken<ServerDisasterRecoveryConfigurationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     */
    public void failoverDisasterRecoveryConfiguration(String serverDisasterRecoveryConfigurationName) {
        failoverDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).toBlocking().single().getBody();
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> failoverDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(failoverDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName), serviceCallback);
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> failoverDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName) {
        return failoverDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> failoverDisasterRecoveryConfigurationWithServiceResponseAsync(String serverDisasterRecoveryConfigurationName) {
        if (serverDisasterRecoveryConfigurationName == null) {
            throw new IllegalArgumentException("Parameter serverDisasterRecoveryConfigurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.failoverDisasterRecoveryConfiguration(serverDisasterRecoveryConfigurationName, this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = failoverDisasterRecoveryConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> failoverDisasterRecoveryConfigurationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     */
    public void forceFailoverAllowDataLossDisasterRecoveryConfiguration(String serverDisasterRecoveryConfigurationName) {
        forceFailoverAllowDataLossDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).toBlocking().single().getBody();
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> forceFailoverAllowDataLossDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(forceFailoverAllowDataLossDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName), serviceCallback);
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> forceFailoverAllowDataLossDisasterRecoveryConfigurationAsync(String serverDisasterRecoveryConfigurationName) {
        return forceFailoverAllowDataLossDisasterRecoveryConfigurationWithServiceResponseAsync(serverDisasterRecoveryConfigurationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins failover for the Azure SQL server disaster recovery configuration with the given name.
     *
     * @param serverDisasterRecoveryConfigurationName The name of the Azure SQL server disaster recovery configuration to start failover.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> forceFailoverAllowDataLossDisasterRecoveryConfigurationWithServiceResponseAsync(String serverDisasterRecoveryConfigurationName) {
        if (serverDisasterRecoveryConfigurationName == null) {
            throw new IllegalArgumentException("Parameter serverDisasterRecoveryConfigurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.forceFailoverAllowDataLossDisasterRecoveryConfiguration(serverDisasterRecoveryConfigurationName, this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = forceFailoverAllowDataLossDisasterRecoveryConfigurationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> forceFailoverAllowDataLossDisasterRecoveryConfigurationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @return the ServerAzureADAdministratorInner object if successful.
     */
    public ServerAzureADAdministratorInner createOrUpdateAzureADAdministrator(String administratorName, ServerAzureADAdministratorInner parameters) {
        return createOrUpdateAzureADAdministratorWithServiceResponseAsync(administratorName, parameters).toBlocking().last().getBody();
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerAzureADAdministratorInner> createOrUpdateAzureADAdministratorAsync(String administratorName, ServerAzureADAdministratorInner parameters, final ServiceCallback<ServerAzureADAdministratorInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateAzureADAdministratorWithServiceResponseAsync(administratorName, parameters), serviceCallback);
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @return the observable for the request
     */
    public Observable<ServerAzureADAdministratorInner> createOrUpdateAzureADAdministratorAsync(String administratorName, ServerAzureADAdministratorInner parameters) {
        return createOrUpdateAzureADAdministratorWithServiceResponseAsync(administratorName, parameters).map(new Func1<ServiceResponse<ServerAzureADAdministratorInner>, ServerAzureADAdministratorInner>() {
            @Override
            public ServerAzureADAdministratorInner call(ServiceResponse<ServerAzureADAdministratorInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServerAzureADAdministratorInner>> createOrUpdateAzureADAdministratorWithServiceResponseAsync(String administratorName, ServerAzureADAdministratorInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (administratorName == null) {
            throw new IllegalArgumentException("Parameter administratorName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdateAzureADAdministrator(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), administratorName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServerAzureADAdministratorInner>() { }.getType());
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @return the ServerAzureADAdministratorInner object if successful.
     */
    public ServerAzureADAdministratorInner beginCreateOrUpdateAzureADAdministrator(String administratorName, ServerAzureADAdministratorInner parameters) {
        return beginCreateOrUpdateAzureADAdministratorWithServiceResponseAsync(administratorName, parameters).toBlocking().single().getBody();
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerAzureADAdministratorInner> beginCreateOrUpdateAzureADAdministratorAsync(String administratorName, ServerAzureADAdministratorInner parameters, final ServiceCallback<ServerAzureADAdministratorInner> serviceCallback) {
        return ServiceCall.create(beginCreateOrUpdateAzureADAdministratorWithServiceResponseAsync(administratorName, parameters), serviceCallback);
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @return the observable to the ServerAzureADAdministratorInner object
     */
    public Observable<ServerAzureADAdministratorInner> beginCreateOrUpdateAzureADAdministratorAsync(String administratorName, ServerAzureADAdministratorInner parameters) {
        return beginCreateOrUpdateAzureADAdministratorWithServiceResponseAsync(administratorName, parameters).map(new Func1<ServiceResponse<ServerAzureADAdministratorInner>, ServerAzureADAdministratorInner>() {
            @Override
            public ServerAzureADAdministratorInner call(ServiceResponse<ServerAzureADAdministratorInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins creating a new Azure SQL Server Active Directory Administrator or updating an existing Azure SQL Server Active Directory Administrator. To determine the status of the operation call GetServerAdministratorOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param parameters The required parameters for createing or updating an Active Directory Administrator.
     * @return the observable to the ServerAzureADAdministratorInner object
     */
    public Observable<ServiceResponse<ServerAzureADAdministratorInner>> beginCreateOrUpdateAzureADAdministratorWithServiceResponseAsync(String administratorName, ServerAzureADAdministratorInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (administratorName == null) {
            throw new IllegalArgumentException("Parameter administratorName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.beginCreateOrUpdateAzureADAdministrator(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), administratorName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerAzureADAdministratorInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerAzureADAdministratorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerAzureADAdministratorInner> clientResponse = beginCreateOrUpdateAzureADAdministratorDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerAzureADAdministratorInner> beginCreateOrUpdateAzureADAdministratorDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerAzureADAdministratorInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerAzureADAdministratorInner>() { }.getType())
                .register(201, new TypeToken<ServerAzureADAdministratorInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     */
    public void deleteAzureADAdministrator(String administratorName) {
        deleteAzureADAdministratorWithServiceResponseAsync(administratorName).toBlocking().last().getBody();
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAzureADAdministratorAsync(String administratorName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteAzureADAdministratorWithServiceResponseAsync(administratorName), serviceCallback);
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @return the observable for the request
     */
    public Observable<Void> deleteAzureADAdministratorAsync(String administratorName) {
        return deleteAzureADAdministratorWithServiceResponseAsync(administratorName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteAzureADAdministratorWithServiceResponseAsync(String administratorName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (administratorName == null) {
            throw new IllegalArgumentException("Parameter administratorName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        Observable<Response<ResponseBody>> observable = service.deleteAzureADAdministrator(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), administratorName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     */
    public void beginDeleteAzureADAdministrator(String administratorName) {
        beginDeleteAzureADAdministratorWithServiceResponseAsync(administratorName).toBlocking().single().getBody();
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> beginDeleteAzureADAdministratorAsync(String administratorName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(beginDeleteAzureADAdministratorWithServiceResponseAsync(administratorName), serviceCallback);
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAzureADAdministratorAsync(String administratorName) {
        return beginDeleteAzureADAdministratorWithServiceResponseAsync(administratorName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Begins deleting an existing Azure SQL Server Active Directory Administrator.To determine the status of the operation call GetServerAdministratorDeleteOperationStatus.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteAzureADAdministratorWithServiceResponseAsync(String administratorName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (administratorName == null) {
            throw new IllegalArgumentException("Parameter administratorName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.beginDeleteAzureADAdministrator(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), administratorName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteAzureADAdministratorDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteAzureADAdministratorDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Returns an Azure SQL Server Administrator.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @return the ServerAzureADAdministratorInner object if successful.
     */
    public ServerAzureADAdministratorInner getAzureADAdministrator(String administratorName) {
        return getAzureADAdministratorWithServiceResponseAsync(administratorName).toBlocking().single().getBody();
    }

    /**
     * Returns an Azure SQL Server Administrator.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerAzureADAdministratorInner> getAzureADAdministratorAsync(String administratorName, final ServiceCallback<ServerAzureADAdministratorInner> serviceCallback) {
        return ServiceCall.create(getAzureADAdministratorWithServiceResponseAsync(administratorName), serviceCallback);
    }

    /**
     * Returns an Azure SQL Server Administrator.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @return the observable to the ServerAzureADAdministratorInner object
     */
    public Observable<ServerAzureADAdministratorInner> getAzureADAdministratorAsync(String administratorName) {
        return getAzureADAdministratorWithServiceResponseAsync(administratorName).map(new Func1<ServiceResponse<ServerAzureADAdministratorInner>, ServerAzureADAdministratorInner>() {
            @Override
            public ServerAzureADAdministratorInner call(ServiceResponse<ServerAzureADAdministratorInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns an Azure SQL Server Administrator.
     *
     * @param administratorName The name of the Azure SQL Server Active Directory Administrator.
     * @return the observable to the ServerAzureADAdministratorInner object
     */
    public Observable<ServiceResponse<ServerAzureADAdministratorInner>> getAzureADAdministratorWithServiceResponseAsync(String administratorName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (administratorName == null) {
            throw new IllegalArgumentException("Parameter administratorName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getAzureADAdministrator(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), administratorName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerAzureADAdministratorInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerAzureADAdministratorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerAzureADAdministratorInner> clientResponse = getAzureADAdministratorDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerAzureADAdministratorInner> getAzureADAdministratorDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerAzureADAdministratorInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerAzureADAdministratorInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns a list of Azure SQL Server Administrators.
     *
     * @return the List&lt;ServerAzureADAdministratorInner&gt; object if successful.
     */
    public List<ServerAzureADAdministratorInner> listAzureADAdministrator() {
        return listAzureADAdministratorWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns a list of Azure SQL Server Administrators.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ServerAzureADAdministratorInner>> listAzureADAdministratorAsync(final ServiceCallback<List<ServerAzureADAdministratorInner>> serviceCallback) {
        return ServiceCall.create(listAzureADAdministratorWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns a list of Azure SQL Server Administrators.
     *
     * @return the observable to the List&lt;ServerAzureADAdministratorInner&gt; object
     */
    public Observable<List<ServerAzureADAdministratorInner>> listAzureADAdministratorAsync() {
        return listAzureADAdministratorWithServiceResponseAsync().map(new Func1<ServiceResponse<List<ServerAzureADAdministratorInner>>, List<ServerAzureADAdministratorInner>>() {
            @Override
            public List<ServerAzureADAdministratorInner> call(ServiceResponse<List<ServerAzureADAdministratorInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns a list of Azure SQL Server Administrators.
     *
     * @return the observable to the List&lt;ServerAzureADAdministratorInner&gt; object
     */
    public Observable<ServiceResponse<List<ServerAzureADAdministratorInner>>> listAzureADAdministratorWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listAzureADAdministrator(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ServerAzureADAdministratorInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ServerAzureADAdministratorInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ServerAzureADAdministratorInner>> result = listAzureADAdministratorDelegate(response);
                        ServiceResponse<List<ServerAzureADAdministratorInner>> clientResponse = new ServiceResponse<List<ServerAzureADAdministratorInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ServerAzureADAdministratorInner>> listAzureADAdministratorDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<ServerAzureADAdministratorInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<ServerAzureADAdministratorInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates Server connection policy.
     *
     * @param parameters The required parameters for updating a secure connection policy.
     * @return the ServerSecureConnectionPolicyInner object if successful.
     */
    public ServerSecureConnectionPolicyInner updateSecureConnectionPolicy(ServerSecureConnectionPolicyInner parameters) {
        return updateSecureConnectionPolicyWithServiceResponseAsync(parameters).toBlocking().single().getBody();
    }

    /**
     * Updates Server connection policy.
     *
     * @param parameters The required parameters for updating a secure connection policy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerSecureConnectionPolicyInner> updateSecureConnectionPolicyAsync(ServerSecureConnectionPolicyInner parameters, final ServiceCallback<ServerSecureConnectionPolicyInner> serviceCallback) {
        return ServiceCall.create(updateSecureConnectionPolicyWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * Updates Server connection policy.
     *
     * @param parameters The required parameters for updating a secure connection policy.
     * @return the observable to the ServerSecureConnectionPolicyInner object
     */
    public Observable<ServerSecureConnectionPolicyInner> updateSecureConnectionPolicyAsync(ServerSecureConnectionPolicyInner parameters) {
        return updateSecureConnectionPolicyWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<ServerSecureConnectionPolicyInner>, ServerSecureConnectionPolicyInner>() {
            @Override
            public ServerSecureConnectionPolicyInner call(ServiceResponse<ServerSecureConnectionPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Updates Server connection policy.
     *
     * @param parameters The required parameters for updating a secure connection policy.
     * @return the observable to the ServerSecureConnectionPolicyInner object
     */
    public Observable<ServiceResponse<ServerSecureConnectionPolicyInner>> updateSecureConnectionPolicyWithServiceResponseAsync(ServerSecureConnectionPolicyInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.updateSecureConnectionPolicy(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerSecureConnectionPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerSecureConnectionPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerSecureConnectionPolicyInner> clientResponse = updateSecureConnectionPolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerSecureConnectionPolicyInner> updateSecureConnectionPolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerSecureConnectionPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerSecureConnectionPolicyInner>() { }.getType())
                .register(201, new TypeToken<ServerSecureConnectionPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns an Azure SQL Server secure connection policy.
     *
     * @return the ServerSecureConnectionPolicyInner object if successful.
     */
    public ServerSecureConnectionPolicyInner getSecureConnectionPolicy() {
        return getSecureConnectionPolicyWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns an Azure SQL Server secure connection policy.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerSecureConnectionPolicyInner> getSecureConnectionPolicyAsync(final ServiceCallback<ServerSecureConnectionPolicyInner> serviceCallback) {
        return ServiceCall.create(getSecureConnectionPolicyWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns an Azure SQL Server secure connection policy.
     *
     * @return the observable to the ServerSecureConnectionPolicyInner object
     */
    public Observable<ServerSecureConnectionPolicyInner> getSecureConnectionPolicyAsync() {
        return getSecureConnectionPolicyWithServiceResponseAsync().map(new Func1<ServiceResponse<ServerSecureConnectionPolicyInner>, ServerSecureConnectionPolicyInner>() {
            @Override
            public ServerSecureConnectionPolicyInner call(ServiceResponse<ServerSecureConnectionPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns an Azure SQL Server secure connection policy.
     *
     * @return the observable to the ServerSecureConnectionPolicyInner object
     */
    public Observable<ServiceResponse<ServerSecureConnectionPolicyInner>> getSecureConnectionPolicyWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getSecureConnectionPolicy(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerSecureConnectionPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerSecureConnectionPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerSecureConnectionPolicyInner> clientResponse = getSecureConnectionPolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerSecureConnectionPolicyInner> getSecureConnectionPolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerSecureConnectionPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerSecureConnectionPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
