/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ElasticPools.
 */
public final class ElasticPoolsInner {
    /** The Retrofit service to perform REST calls. */
    private ElasticPoolsService service;
    /** The service client containing this operation class. */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of ElasticPoolsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ElasticPoolsInner(Retrofit retrofit, SqlManagementClientImpl client) {
        this.service = retrofit.create(ElasticPoolsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ElasticPools to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ElasticPoolsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("elasticPoolName") String elasticPoolName, @Query("api-version") String apiVersion, @Body ElasticPoolInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("elasticPoolName") String elasticPoolName, @Query("api-version") String apiVersion, @Body ElasticPoolInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("elasticPoolName") String elasticPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("elasticPoolName") String elasticPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolActivity")
        Observable<Response<ResponseBody>> listActivity(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("elasticPoolName") String elasticPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolDatabaseActivity")
        Observable<Response<ResponseBody>> listDatabaseActivity(@Path("elasticPoolName") String elasticPoolName, @Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases/{databaseName}")
        Observable<Response<ResponseBody>> getDatabases(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("elasticPoolName") String elasticPoolName, @Path("databaseName") String databaseName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases")
        Observable<Response<ResponseBody>> listDatabases(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("elasticPoolName") String elasticPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @return the ElasticPoolInner object if successful.
     */
    public ElasticPoolInner createOrUpdate(String elasticPoolName, ElasticPoolInner parameters) {
        return createOrUpdateWithServiceResponseAsync(elasticPoolName, parameters).toBlocking().last().getBody();
    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ElasticPoolInner> createOrUpdateAsync(String elasticPoolName, ElasticPoolInner parameters, final ServiceCallback<ElasticPoolInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(elasticPoolName, parameters), serviceCallback);
    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @return the observable for the request
     */
    public Observable<ElasticPoolInner> createOrUpdateAsync(String elasticPoolName, ElasticPoolInner parameters) {
        return createOrUpdateWithServiceResponseAsync(elasticPoolName, parameters).map(new Func1<ServiceResponse<ElasticPoolInner>, ElasticPoolInner>() {
            @Override
            public ElasticPoolInner call(ServiceResponse<ElasticPoolInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ElasticPoolInner>> createOrUpdateWithServiceResponseAsync(String elasticPoolName, ElasticPoolInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), elasticPoolName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ElasticPoolInner>() { }.getType());
    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @return the ElasticPoolInner object if successful.
     */
    public ElasticPoolInner beginCreateOrUpdate(String elasticPoolName, ElasticPoolInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(elasticPoolName, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ElasticPoolInner> beginCreateOrUpdateAsync(String elasticPoolName, ElasticPoolInner parameters, final ServiceCallback<ElasticPoolInner> serviceCallback) {
        return ServiceCall.create(beginCreateOrUpdateWithServiceResponseAsync(elasticPoolName, parameters), serviceCallback);
    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @return the observable to the ElasticPoolInner object
     */
    public Observable<ElasticPoolInner> beginCreateOrUpdateAsync(String elasticPoolName, ElasticPoolInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(elasticPoolName, parameters).map(new Func1<ServiceResponse<ElasticPoolInner>, ElasticPoolInner>() {
            @Override
            public ElasticPoolInner call(ServiceResponse<ElasticPoolInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates a new Azure SQL elastic pool or updates an existing Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be operated on (Updated or created).
     * @param parameters The required parameters for createing or updating an Elastic Pool.
     * @return the observable to the ElasticPoolInner object
     */
    public Observable<ServiceResponse<ElasticPoolInner>> beginCreateOrUpdateWithServiceResponseAsync(String elasticPoolName, ElasticPoolInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.beginCreateOrUpdate(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), elasticPoolName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ElasticPoolInner>>>() {
                @Override
                public Observable<ServiceResponse<ElasticPoolInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ElasticPoolInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ElasticPoolInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ElasticPoolInner, CloudException>(this.client.mapperAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(200, new TypeToken<ElasticPoolInner>() { }.getType())
                .register(201, new TypeToken<ElasticPoolInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be deleted.
     */
    public void delete(String elasticPoolName) {
        deleteWithServiceResponseAsync(elasticPoolName).toBlocking().single().getBody();
    }

    /**
     * Deletes the Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be deleted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAsync(String elasticPoolName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(elasticPoolName), serviceCallback);
    }

    /**
     * Deletes the Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be deleted.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String elasticPoolName) {
        return deleteWithServiceResponseAsync(elasticPoolName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes the Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be deleted.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String elasticPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.delete(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), elasticPoolName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Returns information about an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @return the ElasticPoolInner object if successful.
     */
    public ElasticPoolInner get(String elasticPoolName) {
        return getWithServiceResponseAsync(elasticPoolName).toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ElasticPoolInner> getAsync(String elasticPoolName, final ServiceCallback<ElasticPoolInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(elasticPoolName), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @return the observable to the ElasticPoolInner object
     */
    public Observable<ElasticPoolInner> getAsync(String elasticPoolName) {
        return getWithServiceResponseAsync(elasticPoolName).map(new Func1<ServiceResponse<ElasticPoolInner>, ElasticPoolInner>() {
            @Override
            public ElasticPoolInner call(ServiceResponse<ElasticPoolInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @return the observable to the ElasticPoolInner object
     */
    public Observable<ServiceResponse<ElasticPoolInner>> getWithServiceResponseAsync(String elasticPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.get(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), elasticPoolName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ElasticPoolInner>>>() {
                @Override
                public Observable<ServiceResponse<ElasticPoolInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ElasticPoolInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ElasticPoolInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ElasticPoolInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ElasticPoolInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about Azure SQL elastic pools.
     *
     * @return the List&lt;ElasticPoolInner&gt; object if successful.
     */
    public List<ElasticPoolInner> list() {
        return listWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns information about Azure SQL elastic pools.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ElasticPoolInner>> listAsync(final ServiceCallback<List<ElasticPoolInner>> serviceCallback) {
        return ServiceCall.create(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns information about Azure SQL elastic pools.
     *
     * @return the observable to the List&lt;ElasticPoolInner&gt; object
     */
    public Observable<List<ElasticPoolInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<ElasticPoolInner>>, List<ElasticPoolInner>>() {
            @Override
            public List<ElasticPoolInner> call(ServiceResponse<List<ElasticPoolInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about Azure SQL elastic pools.
     *
     * @return the observable to the List&lt;ElasticPoolInner&gt; object
     */
    public Observable<ServiceResponse<List<ElasticPoolInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.list(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ElasticPoolInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ElasticPoolInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ElasticPoolInner>> result = listDelegate(response);
                        ServiceResponse<List<ElasticPoolInner>> clientResponse = new ServiceResponse<List<ElasticPoolInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ElasticPoolInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<ElasticPoolInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<ElasticPoolInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about Azure SQL elastic pool activities.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool for which to get the current activity.
     * @return the List&lt;ElasticPoolActivityInner&gt; object if successful.
     */
    public List<ElasticPoolActivityInner> listActivity(String elasticPoolName) {
        return listActivityWithServiceResponseAsync(elasticPoolName).toBlocking().single().getBody();
    }

    /**
     * Returns information about Azure SQL elastic pool activities.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool for which to get the current activity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ElasticPoolActivityInner>> listActivityAsync(String elasticPoolName, final ServiceCallback<List<ElasticPoolActivityInner>> serviceCallback) {
        return ServiceCall.create(listActivityWithServiceResponseAsync(elasticPoolName), serviceCallback);
    }

    /**
     * Returns information about Azure SQL elastic pool activities.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool for which to get the current activity.
     * @return the observable to the List&lt;ElasticPoolActivityInner&gt; object
     */
    public Observable<List<ElasticPoolActivityInner>> listActivityAsync(String elasticPoolName) {
        return listActivityWithServiceResponseAsync(elasticPoolName).map(new Func1<ServiceResponse<List<ElasticPoolActivityInner>>, List<ElasticPoolActivityInner>>() {
            @Override
            public List<ElasticPoolActivityInner> call(ServiceResponse<List<ElasticPoolActivityInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about Azure SQL elastic pool activities.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool for which to get the current activity.
     * @return the observable to the List&lt;ElasticPoolActivityInner&gt; object
     */
    public Observable<ServiceResponse<List<ElasticPoolActivityInner>>> listActivityWithServiceResponseAsync(String elasticPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listActivity(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), elasticPoolName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ElasticPoolActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ElasticPoolActivityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ElasticPoolActivityInner>> result = listActivityDelegate(response);
                        ServiceResponse<List<ElasticPoolActivityInner>> clientResponse = new ServiceResponse<List<ElasticPoolActivityInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ElasticPoolActivityInner>> listActivityDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<ElasticPoolActivityInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<ElasticPoolActivityInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about activity on Azure SQL databases inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool.
     * @return the List&lt;ElasticPoolDatabaseActivityInner&gt; object if successful.
     */
    public List<ElasticPoolDatabaseActivityInner> listDatabaseActivity(String elasticPoolName) {
        return listDatabaseActivityWithServiceResponseAsync(elasticPoolName).toBlocking().single().getBody();
    }

    /**
     * Returns information about activity on Azure SQL databases inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ElasticPoolDatabaseActivityInner>> listDatabaseActivityAsync(String elasticPoolName, final ServiceCallback<List<ElasticPoolDatabaseActivityInner>> serviceCallback) {
        return ServiceCall.create(listDatabaseActivityWithServiceResponseAsync(elasticPoolName), serviceCallback);
    }

    /**
     * Returns information about activity on Azure SQL databases inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool.
     * @return the observable to the List&lt;ElasticPoolDatabaseActivityInner&gt; object
     */
    public Observable<List<ElasticPoolDatabaseActivityInner>> listDatabaseActivityAsync(String elasticPoolName) {
        return listDatabaseActivityWithServiceResponseAsync(elasticPoolName).map(new Func1<ServiceResponse<List<ElasticPoolDatabaseActivityInner>>, List<ElasticPoolDatabaseActivityInner>>() {
            @Override
            public List<ElasticPoolDatabaseActivityInner> call(ServiceResponse<List<ElasticPoolDatabaseActivityInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about activity on Azure SQL databases inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool.
     * @return the observable to the List&lt;ElasticPoolDatabaseActivityInner&gt; object
     */
    public Observable<ServiceResponse<List<ElasticPoolDatabaseActivityInner>>> listDatabaseActivityWithServiceResponseAsync(String elasticPoolName) {
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listDatabaseActivity(elasticPoolName, this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ElasticPoolDatabaseActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ElasticPoolDatabaseActivityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ElasticPoolDatabaseActivityInner>> result = listDatabaseActivityDelegate(response);
                        ServiceResponse<List<ElasticPoolDatabaseActivityInner>> clientResponse = new ServiceResponse<List<ElasticPoolDatabaseActivityInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ElasticPoolDatabaseActivityInner>> listDatabaseActivityDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<ElasticPoolDatabaseActivityInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<ElasticPoolDatabaseActivityInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @param databaseName The name of the Azure SQL Database to be retrieved.
     * @return the DatabaseInner object if successful.
     */
    public DatabaseInner getDatabases(String elasticPoolName, String databaseName) {
        return getDatabasesWithServiceResponseAsync(elasticPoolName, databaseName).toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @param databaseName The name of the Azure SQL Database to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DatabaseInner> getDatabasesAsync(String elasticPoolName, String databaseName, final ServiceCallback<DatabaseInner> serviceCallback) {
        return ServiceCall.create(getDatabasesWithServiceResponseAsync(elasticPoolName, databaseName), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @param databaseName The name of the Azure SQL Database to be retrieved.
     * @return the observable to the DatabaseInner object
     */
    public Observable<DatabaseInner> getDatabasesAsync(String elasticPoolName, String databaseName) {
        return getDatabasesWithServiceResponseAsync(elasticPoolName, databaseName).map(new Func1<ServiceResponse<DatabaseInner>, DatabaseInner>() {
            @Override
            public DatabaseInner call(ServiceResponse<DatabaseInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @param databaseName The name of the Azure SQL Database to be retrieved.
     * @return the observable to the DatabaseInner object
     */
    public Observable<ServiceResponse<DatabaseInner>> getDatabasesWithServiceResponseAsync(String elasticPoolName, String databaseName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getDatabases(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), elasticPoolName, databaseName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DatabaseInner>>>() {
                @Override
                public Observable<ServiceResponse<DatabaseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DatabaseInner> clientResponse = getDatabasesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DatabaseInner> getDatabasesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DatabaseInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<DatabaseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @return the List&lt;DatabaseInner&gt; object if successful.
     */
    public List<DatabaseInner> listDatabases(String elasticPoolName) {
        return listDatabasesWithServiceResponseAsync(elasticPoolName).toBlocking().single().getBody();
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<DatabaseInner>> listDatabasesAsync(String elasticPoolName, final ServiceCallback<List<DatabaseInner>> serviceCallback) {
        return ServiceCall.create(listDatabasesWithServiceResponseAsync(elasticPoolName), serviceCallback);
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @return the observable to the List&lt;DatabaseInner&gt; object
     */
    public Observable<List<DatabaseInner>> listDatabasesAsync(String elasticPoolName) {
        return listDatabasesWithServiceResponseAsync(elasticPoolName).map(new Func1<ServiceResponse<List<DatabaseInner>>, List<DatabaseInner>>() {
            @Override
            public List<DatabaseInner> call(ServiceResponse<List<DatabaseInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about an Azure SQL database inside of an Azure SQL elastic pool.
     *
     * @param elasticPoolName The name of the Azure SQL Elastic Pool to be retrieved.
     * @return the observable to the List&lt;DatabaseInner&gt; object
     */
    public Observable<ServiceResponse<List<DatabaseInner>>> listDatabasesWithServiceResponseAsync(String elasticPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listDatabases(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), elasticPoolName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DatabaseInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DatabaseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<DatabaseInner>> result = listDatabasesDelegate(response);
                        ServiceResponse<List<DatabaseInner>> clientResponse = new ServiceResponse<List<DatabaseInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<DatabaseInner>> listDatabasesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<DatabaseInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<DatabaseInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
