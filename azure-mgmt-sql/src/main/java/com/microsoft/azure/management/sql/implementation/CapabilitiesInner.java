/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Capabilities.
 */
public final class CapabilitiesInner {
    /** The Retrofit service to perform REST calls. */
    private CapabilitiesService service;
    /** The service client containing this operation class. */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of CapabilitiesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CapabilitiesInner(Retrofit retrofit, SqlManagementClientImpl client) {
        this.service = retrofit.create(CapabilitiesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Capabilities to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CapabilitiesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("locationName") String locationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Returns information about the Azure SQL capabilities available for the specified region.
     *
     * @param locationName The name of the region for which the Azure SQL capabilities are retrieved.
     * @return the LocationCapabilityInner object if successful.
     */
    public LocationCapabilityInner get(String locationName) {
        return getWithServiceResponseAsync(locationName).toBlocking().single().getBody();
    }

    /**
     * Returns information about the Azure SQL capabilities available for the specified region.
     *
     * @param locationName The name of the region for which the Azure SQL capabilities are retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<LocationCapabilityInner> getAsync(String locationName, final ServiceCallback<LocationCapabilityInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(locationName), serviceCallback);
    }

    /**
     * Returns information about the Azure SQL capabilities available for the specified region.
     *
     * @param locationName The name of the region for which the Azure SQL capabilities are retrieved.
     * @return the observable to the LocationCapabilityInner object
     */
    public Observable<LocationCapabilityInner> getAsync(String locationName) {
        return getWithServiceResponseAsync(locationName).map(new Func1<ServiceResponse<LocationCapabilityInner>, LocationCapabilityInner>() {
            @Override
            public LocationCapabilityInner call(ServiceResponse<LocationCapabilityInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns information about the Azure SQL capabilities available for the specified region.
     *
     * @param locationName The name of the region for which the Azure SQL capabilities are retrieved.
     * @return the observable to the LocationCapabilityInner object
     */
    public Observable<ServiceResponse<LocationCapabilityInner>> getWithServiceResponseAsync(String locationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.get(this.client.subscriptionId(), locationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LocationCapabilityInner>>>() {
                @Override
                public Observable<ServiceResponse<LocationCapabilityInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LocationCapabilityInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LocationCapabilityInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<LocationCapabilityInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<LocationCapabilityInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
