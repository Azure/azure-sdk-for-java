/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DataMaskings.
 */
public final class DataMaskingsInner {
    /** The Retrofit service to perform REST calls. */
    private DataMaskingsService service;
    /** The service client containing this operation class. */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of DataMaskingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DataMaskingsInner(Retrofit retrofit, SqlManagementClientImpl client) {
        this.service = retrofit.create(DataMaskingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DataMaskings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DataMaskingsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/Default")
        Observable<Response<ResponseBody>> createOrUpdatePolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("databaseName") String databaseName, @Query("api-version") String apiVersion, @Body DataMaskingPolicyInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/Default")
        Observable<Response<ResponseBody>> getPolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("databaseName") String databaseName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/Default/rules/{dataMaskingRule}")
        Observable<Response<ResponseBody>> createOrUpdateRule(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("databaseName") String databaseName, @Path("dataMaskingRule") String dataMaskingRule, @Query("api-version") String apiVersion, @Body DataMaskingRuleInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/Default/rules/{dataMaskingRule}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteRule(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("databaseName") String databaseName, @Path("dataMaskingRule") String dataMaskingRule, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/Default/Rules")
        Observable<Response<ResponseBody>> listRules(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("databaseName") String databaseName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @return the DataMaskingPolicyInner object if successful.
     */
    public DataMaskingPolicyInner createOrUpdatePolicy(String resourceGroupName, String serverName, String databaseName, DataMaskingPolicyInner parameters) {
        return createOrUpdatePolicyWithServiceResponseAsync(resourceGroupName, serverName, databaseName, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or updates an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DataMaskingPolicyInner> createOrUpdatePolicyAsync(String resourceGroupName, String serverName, String databaseName, DataMaskingPolicyInner parameters, final ServiceCallback<DataMaskingPolicyInner> serviceCallback) {
        return ServiceCall.create(createOrUpdatePolicyWithServiceResponseAsync(resourceGroupName, serverName, databaseName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @return the observable to the DataMaskingPolicyInner object
     */
    public Observable<DataMaskingPolicyInner> createOrUpdatePolicyAsync(String resourceGroupName, String serverName, String databaseName, DataMaskingPolicyInner parameters) {
        return createOrUpdatePolicyWithServiceResponseAsync(resourceGroupName, serverName, databaseName, parameters).map(new Func1<ServiceResponse<DataMaskingPolicyInner>, DataMaskingPolicyInner>() {
            @Override
            public DataMaskingPolicyInner call(ServiceResponse<DataMaskingPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or updates an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param parameters The required parameters for createing or updating a firewall rule.
     * @return the observable to the DataMaskingPolicyInner object
     */
    public Observable<ServiceResponse<DataMaskingPolicyInner>> createOrUpdatePolicyWithServiceResponseAsync(String resourceGroupName, String serverName, String databaseName, DataMaskingPolicyInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.createOrUpdatePolicy(this.client.subscriptionId(), resourceGroupName, serverName, databaseName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataMaskingPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<DataMaskingPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataMaskingPolicyInner> clientResponse = createOrUpdatePolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataMaskingPolicyInner> createOrUpdatePolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DataMaskingPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(201, new TypeToken<DataMaskingPolicyInner>() { }.getType())
                .register(200, new TypeToken<DataMaskingPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking policy applies.
     * @return the DataMaskingPolicyInner object if successful.
     */
    public DataMaskingPolicyInner getPolicy(String resourceGroupName, String serverName, String databaseName) {
        return getPolicyWithServiceResponseAsync(resourceGroupName, serverName, databaseName).toBlocking().single().getBody();
    }

    /**
     * Returns an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking policy applies.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DataMaskingPolicyInner> getPolicyAsync(String resourceGroupName, String serverName, String databaseName, final ServiceCallback<DataMaskingPolicyInner> serviceCallback) {
        return ServiceCall.create(getPolicyWithServiceResponseAsync(resourceGroupName, serverName, databaseName), serviceCallback);
    }

    /**
     * Returns an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking policy applies.
     * @return the observable to the DataMaskingPolicyInner object
     */
    public Observable<DataMaskingPolicyInner> getPolicyAsync(String resourceGroupName, String serverName, String databaseName) {
        return getPolicyWithServiceResponseAsync(resourceGroupName, serverName, databaseName).map(new Func1<ServiceResponse<DataMaskingPolicyInner>, DataMaskingPolicyInner>() {
            @Override
            public DataMaskingPolicyInner call(ServiceResponse<DataMaskingPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns an Azure SQL Database data masking policy.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking policy applies.
     * @return the observable to the DataMaskingPolicyInner object
     */
    public Observable<ServiceResponse<DataMaskingPolicyInner>> getPolicyWithServiceResponseAsync(String resourceGroupName, String serverName, String databaseName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getPolicy(this.client.subscriptionId(), resourceGroupName, serverName, databaseName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataMaskingPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<DataMaskingPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataMaskingPolicyInner> clientResponse = getPolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataMaskingPolicyInner> getPolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DataMaskingPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<DataMaskingPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an Azure SQL Server Firewall rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database data masking rule.
     * @param parameters The required parameters for createing or updating a data masking rule.
     * @return the DataMaskingRuleInner object if successful.
     */
    public DataMaskingRuleInner createOrUpdateRule(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule, DataMaskingRuleInner parameters) {
        return createOrUpdateRuleWithServiceResponseAsync(resourceGroupName, serverName, databaseName, dataMaskingRule, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or updates an Azure SQL Server Firewall rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database data masking rule.
     * @param parameters The required parameters for createing or updating a data masking rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DataMaskingRuleInner> createOrUpdateRuleAsync(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule, DataMaskingRuleInner parameters, final ServiceCallback<DataMaskingRuleInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateRuleWithServiceResponseAsync(resourceGroupName, serverName, databaseName, dataMaskingRule, parameters), serviceCallback);
    }

    /**
     * Creates or updates an Azure SQL Server Firewall rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database data masking rule.
     * @param parameters The required parameters for createing or updating a data masking rule.
     * @return the observable to the DataMaskingRuleInner object
     */
    public Observable<DataMaskingRuleInner> createOrUpdateRuleAsync(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule, DataMaskingRuleInner parameters) {
        return createOrUpdateRuleWithServiceResponseAsync(resourceGroupName, serverName, databaseName, dataMaskingRule, parameters).map(new Func1<ServiceResponse<DataMaskingRuleInner>, DataMaskingRuleInner>() {
            @Override
            public DataMaskingRuleInner call(ServiceResponse<DataMaskingRuleInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or updates an Azure SQL Server Firewall rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database data masking rule.
     * @param parameters The required parameters for createing or updating a data masking rule.
     * @return the observable to the DataMaskingRuleInner object
     */
    public Observable<ServiceResponse<DataMaskingRuleInner>> createOrUpdateRuleWithServiceResponseAsync(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule, DataMaskingRuleInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        if (dataMaskingRule == null) {
            throw new IllegalArgumentException("Parameter dataMaskingRule is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.createOrUpdateRule(this.client.subscriptionId(), resourceGroupName, serverName, databaseName, dataMaskingRule, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataMaskingRuleInner>>>() {
                @Override
                public Observable<ServiceResponse<DataMaskingRuleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataMaskingRuleInner> clientResponse = createOrUpdateRuleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataMaskingRuleInner> createOrUpdateRuleDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DataMaskingRuleInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<DataMaskingRuleInner>() { }.getType())
                .register(201, new TypeToken<DataMaskingRuleInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes an Azure SQL database data masking rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database  data masking rule.
     */
    public void deleteRule(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule) {
        deleteRuleWithServiceResponseAsync(resourceGroupName, serverName, databaseName, dataMaskingRule).toBlocking().single().getBody();
    }

    /**
     * Deletes an Azure SQL database data masking rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database  data masking rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteRuleAsync(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteRuleWithServiceResponseAsync(resourceGroupName, serverName, databaseName, dataMaskingRule), serviceCallback);
    }

    /**
     * Deletes an Azure SQL database data masking rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database  data masking rule.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteRuleAsync(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule) {
        return deleteRuleWithServiceResponseAsync(resourceGroupName, serverName, databaseName, dataMaskingRule).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes an Azure SQL database data masking rule.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rule applies.
     * @param dataMaskingRule The name of the Azure SQL Database  data masking rule.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteRuleWithServiceResponseAsync(String resourceGroupName, String serverName, String databaseName, String dataMaskingRule) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        if (dataMaskingRule == null) {
            throw new IllegalArgumentException("Parameter dataMaskingRule is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.deleteRule(this.client.subscriptionId(), resourceGroupName, serverName, databaseName, dataMaskingRule, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteRuleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteRuleDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Returns a list of Azure SQL database data masking rules.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rules applies.
     * @return the List&lt;DataMaskingRuleInner&gt; object if successful.
     */
    public List<DataMaskingRuleInner> listRules(String resourceGroupName, String serverName, String databaseName) {
        return listRulesWithServiceResponseAsync(resourceGroupName, serverName, databaseName).toBlocking().single().getBody();
    }

    /**
     * Returns a list of Azure SQL database data masking rules.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rules applies.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<DataMaskingRuleInner>> listRulesAsync(String resourceGroupName, String serverName, String databaseName, final ServiceCallback<List<DataMaskingRuleInner>> serviceCallback) {
        return ServiceCall.create(listRulesWithServiceResponseAsync(resourceGroupName, serverName, databaseName), serviceCallback);
    }

    /**
     * Returns a list of Azure SQL database data masking rules.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rules applies.
     * @return the observable to the List&lt;DataMaskingRuleInner&gt; object
     */
    public Observable<List<DataMaskingRuleInner>> listRulesAsync(String resourceGroupName, String serverName, String databaseName) {
        return listRulesWithServiceResponseAsync(resourceGroupName, serverName, databaseName).map(new Func1<ServiceResponse<List<DataMaskingRuleInner>>, List<DataMaskingRuleInner>>() {
            @Override
            public List<DataMaskingRuleInner> call(ServiceResponse<List<DataMaskingRuleInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns a list of Azure SQL database data masking rules.
     *
     * @param resourceGroupName The name of the Resource Group to which the resource belongs.
     * @param serverName The name of the Azure SQL Server
     * @param databaseName The name of the Azure SQL Database for which the data masking rules applies.
     * @return the observable to the List&lt;DataMaskingRuleInner&gt; object
     */
    public Observable<ServiceResponse<List<DataMaskingRuleInner>>> listRulesWithServiceResponseAsync(String resourceGroupName, String serverName, String databaseName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listRules(this.client.subscriptionId(), resourceGroupName, serverName, databaseName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DataMaskingRuleInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DataMaskingRuleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<DataMaskingRuleInner>> result = listRulesDelegate(response);
                        ServiceResponse<List<DataMaskingRuleInner>> clientResponse = new ServiceResponse<List<DataMaskingRuleInner>>(result.getBody().getItems(), result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<DataMaskingRuleInner>> listRulesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<DataMaskingRuleInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<DataMaskingRuleInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
