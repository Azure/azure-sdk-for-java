/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AuditingPolicys.
 */
public final class AuditingPolicysInner {
    /** The Retrofit service to perform REST calls. */
    private AuditingPolicysService service;
    /** The service client containing this operation class. */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of AuditingPolicysInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AuditingPolicysInner(Retrofit retrofit, SqlManagementClientImpl client) {
        this.service = retrofit.create(AuditingPolicysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AuditingPolicys to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AuditingPolicysService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingPolicies/Default")
        Observable<Response<ResponseBody>> createOrUpdateDatebasePolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("databaseName") String databaseName, @Query("api-version") String apiVersion, @Body DatabaseAuditingPolicyInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingPolicies/Default")
        Observable<Response<ResponseBody>> getDatabasePolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("databaseName") String databaseName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingPolicies/Default")
        Observable<Response<ResponseBody>> createOrUpdateServerPolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Body ServerAuditingPolicyInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingPolicies/Default")
        Observable<Response<ResponseBody>> getServerPolicy(@Path("subscriptionId") UUID subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @param parameters The required parameters for createing or updating a Azure SQL Database auditing policy.
     * @return the DatabaseAuditingPolicyInner object if successful.
     */
    public DatabaseAuditingPolicyInner createOrUpdateDatebasePolicy(String databaseName, DatabaseAuditingPolicyInner parameters) {
        return createOrUpdateDatebasePolicyWithServiceResponseAsync(databaseName, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or updates an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @param parameters The required parameters for createing or updating a Azure SQL Database auditing policy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DatabaseAuditingPolicyInner> createOrUpdateDatebasePolicyAsync(String databaseName, DatabaseAuditingPolicyInner parameters, final ServiceCallback<DatabaseAuditingPolicyInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateDatebasePolicyWithServiceResponseAsync(databaseName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @param parameters The required parameters for createing or updating a Azure SQL Database auditing policy.
     * @return the observable to the DatabaseAuditingPolicyInner object
     */
    public Observable<DatabaseAuditingPolicyInner> createOrUpdateDatebasePolicyAsync(String databaseName, DatabaseAuditingPolicyInner parameters) {
        return createOrUpdateDatebasePolicyWithServiceResponseAsync(databaseName, parameters).map(new Func1<ServiceResponse<DatabaseAuditingPolicyInner>, DatabaseAuditingPolicyInner>() {
            @Override
            public DatabaseAuditingPolicyInner call(ServiceResponse<DatabaseAuditingPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or updates an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @param parameters The required parameters for createing or updating a Azure SQL Database auditing policy.
     * @return the observable to the DatabaseAuditingPolicyInner object
     */
    public Observable<ServiceResponse<DatabaseAuditingPolicyInner>> createOrUpdateDatebasePolicyWithServiceResponseAsync(String databaseName, DatabaseAuditingPolicyInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.createOrUpdateDatebasePolicy(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), databaseName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DatabaseAuditingPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<DatabaseAuditingPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DatabaseAuditingPolicyInner> clientResponse = createOrUpdateDatebasePolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DatabaseAuditingPolicyInner> createOrUpdateDatebasePolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DatabaseAuditingPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<DatabaseAuditingPolicyInner>() { }.getType())
                .register(201, new TypeToken<DatabaseAuditingPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @return the DatabaseAuditingPolicyInner object if successful.
     */
    public DatabaseAuditingPolicyInner getDatabasePolicy(String databaseName) {
        return getDatabasePolicyWithServiceResponseAsync(databaseName).toBlocking().single().getBody();
    }

    /**
     * Returns an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<DatabaseAuditingPolicyInner> getDatabasePolicyAsync(String databaseName, final ServiceCallback<DatabaseAuditingPolicyInner> serviceCallback) {
        return ServiceCall.create(getDatabasePolicyWithServiceResponseAsync(databaseName), serviceCallback);
    }

    /**
     * Returns an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @return the observable to the DatabaseAuditingPolicyInner object
     */
    public Observable<DatabaseAuditingPolicyInner> getDatabasePolicyAsync(String databaseName) {
        return getDatabasePolicyWithServiceResponseAsync(databaseName).map(new Func1<ServiceResponse<DatabaseAuditingPolicyInner>, DatabaseAuditingPolicyInner>() {
            @Override
            public DatabaseAuditingPolicyInner call(ServiceResponse<DatabaseAuditingPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns an Azure SQL Database auditing policy.
     *
     * @param databaseName The name of the Azure SQL Database for which the auditing policy applies.
     * @return the observable to the DatabaseAuditingPolicyInner object
     */
    public Observable<ServiceResponse<DatabaseAuditingPolicyInner>> getDatabasePolicyWithServiceResponseAsync(String databaseName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getDatabasePolicy(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), databaseName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DatabaseAuditingPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<DatabaseAuditingPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DatabaseAuditingPolicyInner> clientResponse = getDatabasePolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DatabaseAuditingPolicyInner> getDatabasePolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<DatabaseAuditingPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<DatabaseAuditingPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an Azure SQL Server auditing policy.
     *
     * @param parameters The required parameters for createing or updating a Azure SQL Server auditing policy.
     * @return the ServerAuditingPolicyInner object if successful.
     */
    public ServerAuditingPolicyInner createOrUpdateServerPolicy(ServerAuditingPolicyInner parameters) {
        return createOrUpdateServerPolicyWithServiceResponseAsync(parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or updates an Azure SQL Server auditing policy.
     *
     * @param parameters The required parameters for createing or updating a Azure SQL Server auditing policy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerAuditingPolicyInner> createOrUpdateServerPolicyAsync(ServerAuditingPolicyInner parameters, final ServiceCallback<ServerAuditingPolicyInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateServerPolicyWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * Creates or updates an Azure SQL Server auditing policy.
     *
     * @param parameters The required parameters for createing or updating a Azure SQL Server auditing policy.
     * @return the observable to the ServerAuditingPolicyInner object
     */
    public Observable<ServerAuditingPolicyInner> createOrUpdateServerPolicyAsync(ServerAuditingPolicyInner parameters) {
        return createOrUpdateServerPolicyWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<ServerAuditingPolicyInner>, ServerAuditingPolicyInner>() {
            @Override
            public ServerAuditingPolicyInner call(ServiceResponse<ServerAuditingPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or updates an Azure SQL Server auditing policy.
     *
     * @param parameters The required parameters for createing or updating a Azure SQL Server auditing policy.
     * @return the observable to the ServerAuditingPolicyInner object
     */
    public Observable<ServiceResponse<ServerAuditingPolicyInner>> createOrUpdateServerPolicyWithServiceResponseAsync(ServerAuditingPolicyInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2014-04-01";
        return service.createOrUpdateServerPolicy(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerAuditingPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerAuditingPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerAuditingPolicyInner> clientResponse = createOrUpdateServerPolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerAuditingPolicyInner> createOrUpdateServerPolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerAuditingPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerAuditingPolicyInner>() { }.getType())
                .register(201, new TypeToken<ServerAuditingPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns an Azure SQL Server auditing policy.
     *
     * @return the ServerAuditingPolicyInner object if successful.
     */
    public ServerAuditingPolicyInner getServerPolicy() {
        return getServerPolicyWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Returns an Azure SQL Server auditing policy.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ServerAuditingPolicyInner> getServerPolicyAsync(final ServiceCallback<ServerAuditingPolicyInner> serviceCallback) {
        return ServiceCall.create(getServerPolicyWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns an Azure SQL Server auditing policy.
     *
     * @return the observable to the ServerAuditingPolicyInner object
     */
    public Observable<ServerAuditingPolicyInner> getServerPolicyAsync() {
        return getServerPolicyWithServiceResponseAsync().map(new Func1<ServiceResponse<ServerAuditingPolicyInner>, ServerAuditingPolicyInner>() {
            @Override
            public ServerAuditingPolicyInner call(ServiceResponse<ServerAuditingPolicyInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Returns an Azure SQL Server auditing policy.
     *
     * @return the observable to the ServerAuditingPolicyInner object
     */
    public Observable<ServiceResponse<ServerAuditingPolicyInner>> getServerPolicyWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.serverName() == null) {
            throw new IllegalArgumentException("Parameter this.client.serverName() is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.getServerPolicy(this.client.subscriptionId(), this.client.resourceGroupName(), this.client.serverName(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerAuditingPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerAuditingPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerAuditingPolicyInner> clientResponse = getServerPolicyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerAuditingPolicyInner> getServerPolicyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ServerAuditingPolicyInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ServerAuditingPolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
