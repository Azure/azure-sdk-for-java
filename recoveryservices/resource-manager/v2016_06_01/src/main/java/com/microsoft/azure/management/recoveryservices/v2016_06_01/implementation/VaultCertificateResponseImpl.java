/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.v2016_06_01.implementation;

import com.microsoft.azure.management.recoveryservices.v2016_06_01.VaultCertificateResponse;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.ResourceCertificateDetails;

class VaultCertificateResponseImpl extends CreatableUpdatableImpl<VaultCertificateResponse, VaultCertificateResponseInner, VaultCertificateResponseImpl> implements VaultCertificateResponse, VaultCertificateResponse.Definition, VaultCertificateResponse.Update {
    private final RecoveryServicesManager manager;
    private String resourceGroupName;
    private String vaultName;
    private String certificateName;

    VaultCertificateResponseImpl(String name, RecoveryServicesManager manager) {
        super(name, new VaultCertificateResponseInner());
        this.manager = manager;
        // Set resource name
        this.certificateName = name;
        //
    }

    VaultCertificateResponseImpl(VaultCertificateResponseInner inner, RecoveryServicesManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.certificateName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.vaultName = IdParsingUtils.getValueFromIdByName(inner.id(), "vaults");
        this.certificateName = IdParsingUtils.getValueFromIdByName(inner.id(), "certificates");
        //
    }

    @Override
    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<VaultCertificateResponse> createResourceAsync() {
        VaultCertificatesInner client = this.manager().inner().vaultCertificates();
        return client.createAsync(this.resourceGroupName, this.vaultName, this.certificateName)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<VaultCertificateResponse> updateResourceAsync() {
        VaultCertificatesInner client = this.manager().inner().vaultCertificates();
        return client.createAsync(this.resourceGroupName, this.vaultName, this.certificateName)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<VaultCertificateResponseInner> getInnerAsync() {
        VaultCertificatesInner client = this.manager().inner().vaultCertificates();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ResourceCertificateDetails properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public VaultCertificateResponseImpl withExistingVault(String resourceGroupName, String vaultName) {
        this.resourceGroupName = resourceGroupName;
        this.vaultName = vaultName;
        return this;
    }

}
