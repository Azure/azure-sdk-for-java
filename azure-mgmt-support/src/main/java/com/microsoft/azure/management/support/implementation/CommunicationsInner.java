/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.support.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.support.ExceptionResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Communications.
 */
public class CommunicationsInner {
    /** The Retrofit service to perform REST calls. */
    private CommunicationsService service;
    /** The service client containing this operation class. */
    private MicrosoftSupportImpl client;

    /**
     * Initializes an instance of CommunicationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CommunicationsInner(Retrofit retrofit, MicrosoftSupportImpl client) {
        this.service = retrofit.create(CommunicationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Communications to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CommunicationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.Communications listBySubscriptionTicket" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications")
        Observable<Response<ResponseBody>> listBySubscriptionTicket(@Path("supportTicketName") String supportTicketName, @Path("subscriptionId") String subscriptionId, @Query("$top") Integer top, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.Communications getBySubscriptionTicket" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}")
        Observable<Response<ResponseBody>> getBySubscriptionTicket(@Path("supportTicketName") String supportTicketName, @Path("communicationName") String communicationName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.Communications listBySubscriptionTicketNext" })
        @GET
        Observable<Response<ResponseBody>> listBySubscriptionTicketNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CommunicationDetailsInner&gt; object if successful.
     */
    public PagedList<CommunicationDetailsInner> listBySubscriptionTicket(final String supportTicketName) {
        ServiceResponse<Page<CommunicationDetailsInner>> response = listBySubscriptionTicketSinglePageAsync(supportTicketName).toBlocking().single();
        return new PagedList<CommunicationDetailsInner>(response.body()) {
            @Override
            public Page<CommunicationDetailsInner> nextPage(String nextPageLink) {
                return listBySubscriptionTicketNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CommunicationDetailsInner>> listBySubscriptionTicketAsync(final String supportTicketName, final ListOperationCallback<CommunicationDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionTicketSinglePageAsync(supportTicketName),
            new Func1<String, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(String nextPageLink) {
                    return listBySubscriptionTicketNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationDetailsInner&gt; object
     */
    public Observable<Page<CommunicationDetailsInner>> listBySubscriptionTicketAsync(final String supportTicketName) {
        return listBySubscriptionTicketWithServiceResponseAsync(supportTicketName)
            .map(new Func1<ServiceResponse<Page<CommunicationDetailsInner>>, Page<CommunicationDetailsInner>>() {
                @Override
                public Page<CommunicationDetailsInner> call(ServiceResponse<Page<CommunicationDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> listBySubscriptionTicketWithServiceResponseAsync(final String supportTicketName) {
        return listBySubscriptionTicketSinglePageAsync(supportTicketName)
            .concatMap(new Func1<ServiceResponse<Page<CommunicationDetailsInner>>, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(ServiceResponse<Page<CommunicationDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionTicketNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CommunicationDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> listBySubscriptionTicketSinglePageAsync(final String supportTicketName) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final String filter = null;
        return service.listBySubscriptionTicket(supportTicketName, this.client.subscriptionId(), top, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<CommunicationDetailsInner>> result = listBySubscriptionTicketDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CommunicationDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CommunicationDetailsInner&gt; object if successful.
     */
    public PagedList<CommunicationDetailsInner> listBySubscriptionTicket(final String supportTicketName, final Integer top, final String filter) {
        ServiceResponse<Page<CommunicationDetailsInner>> response = listBySubscriptionTicketSinglePageAsync(supportTicketName, top, filter).toBlocking().single();
        return new PagedList<CommunicationDetailsInner>(response.body()) {
            @Override
            public Page<CommunicationDetailsInner> nextPage(String nextPageLink) {
                return listBySubscriptionTicketNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CommunicationDetailsInner>> listBySubscriptionTicketAsync(final String supportTicketName, final Integer top, final String filter, final ListOperationCallback<CommunicationDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionTicketSinglePageAsync(supportTicketName, top, filter),
            new Func1<String, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(String nextPageLink) {
                    return listBySubscriptionTicketNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationDetailsInner&gt; object
     */
    public Observable<Page<CommunicationDetailsInner>> listBySubscriptionTicketAsync(final String supportTicketName, final Integer top, final String filter) {
        return listBySubscriptionTicketWithServiceResponseAsync(supportTicketName, top, filter)
            .map(new Func1<ServiceResponse<Page<CommunicationDetailsInner>>, Page<CommunicationDetailsInner>>() {
                @Override
                public Page<CommunicationDetailsInner> call(ServiceResponse<Page<CommunicationDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param supportTicketName Support ticket name.
     * @param top The number of values to return in the collection. Default is 10 and max is 10.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> listBySubscriptionTicketWithServiceResponseAsync(final String supportTicketName, final Integer top, final String filter) {
        return listBySubscriptionTicketSinglePageAsync(supportTicketName, top, filter)
            .concatMap(new Func1<ServiceResponse<Page<CommunicationDetailsInner>>, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(ServiceResponse<Page<CommunicationDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionTicketNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all communications for a support ticket.
     *
    ServiceResponse<PageImpl1<CommunicationDetailsInner>> * @param supportTicketName Support ticket name.
    ServiceResponse<PageImpl1<CommunicationDetailsInner>> * @param top The number of values to return in the collection. Default is 10 and max is 10.
    ServiceResponse<PageImpl1<CommunicationDetailsInner>> * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CommunicationDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> listBySubscriptionTicketSinglePageAsync(final String supportTicketName, final Integer top, final String filter) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listBySubscriptionTicket(supportTicketName, this.client.subscriptionId(), top, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<CommunicationDetailsInner>> result = listBySubscriptionTicketDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CommunicationDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<CommunicationDetailsInner>> listBySubscriptionTicketDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<CommunicationDetailsInner>, ExceptionResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<CommunicationDetailsInner>>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

    /**
     * Gets details of a specific communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationDetailsInner object if successful.
     */
    public CommunicationDetailsInner getBySubscriptionTicket(String supportTicketName, String communicationName) {
        return getBySubscriptionTicketWithServiceResponseAsync(supportTicketName, communicationName).toBlocking().single().body();
    }

    /**
     * Gets details of a specific communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationDetailsInner> getBySubscriptionTicketAsync(String supportTicketName, String communicationName, final ServiceCallback<CommunicationDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(getBySubscriptionTicketWithServiceResponseAsync(supportTicketName, communicationName), serviceCallback);
    }

    /**
     * Gets details of a specific communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationDetailsInner object
     */
    public Observable<CommunicationDetailsInner> getBySubscriptionTicketAsync(String supportTicketName, String communicationName) {
        return getBySubscriptionTicketWithServiceResponseAsync(supportTicketName, communicationName).map(new Func1<ServiceResponse<CommunicationDetailsInner>, CommunicationDetailsInner>() {
            @Override
            public CommunicationDetailsInner call(ServiceResponse<CommunicationDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets details of a specific communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationDetailsInner object
     */
    public Observable<ServiceResponse<CommunicationDetailsInner>> getBySubscriptionTicketWithServiceResponseAsync(String supportTicketName, String communicationName) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (communicationName == null) {
            throw new IllegalArgumentException("Parameter communicationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getBySubscriptionTicket(supportTicketName, communicationName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationDetailsInner> clientResponse = getBySubscriptionTicketDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommunicationDetailsInner> getBySubscriptionTicketDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommunicationDetailsInner, ExceptionResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommunicationDetailsInner>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CommunicationDetailsInner&gt; object if successful.
     */
    public PagedList<CommunicationDetailsInner> listBySubscriptionTicketNext(final String nextPageLink) {
        ServiceResponse<Page<CommunicationDetailsInner>> response = listBySubscriptionTicketNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CommunicationDetailsInner>(response.body()) {
            @Override
            public Page<CommunicationDetailsInner> nextPage(String nextPageLink) {
                return listBySubscriptionTicketNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CommunicationDetailsInner>> listBySubscriptionTicketNextAsync(final String nextPageLink, final ServiceFuture<List<CommunicationDetailsInner>> serviceFuture, final ListOperationCallback<CommunicationDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionTicketNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(String nextPageLink) {
                    return listBySubscriptionTicketNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationDetailsInner&gt; object
     */
    public Observable<Page<CommunicationDetailsInner>> listBySubscriptionTicketNextAsync(final String nextPageLink) {
        return listBySubscriptionTicketNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CommunicationDetailsInner>>, Page<CommunicationDetailsInner>>() {
                @Override
                public Page<CommunicationDetailsInner> call(ServiceResponse<Page<CommunicationDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all communications for a support ticket.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> listBySubscriptionTicketNextWithServiceResponseAsync(final String nextPageLink) {
        return listBySubscriptionTicketNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CommunicationDetailsInner>>, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(ServiceResponse<Page<CommunicationDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionTicketNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all communications for a support ticket.
     *
    ServiceResponse<PageImpl1<CommunicationDetailsInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CommunicationDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> listBySubscriptionTicketNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBySubscriptionTicketNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CommunicationDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<CommunicationDetailsInner>> result = listBySubscriptionTicketNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CommunicationDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<CommunicationDetailsInner>> listBySubscriptionTicketNextDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<CommunicationDetailsInner>, ExceptionResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<CommunicationDetailsInner>>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

}
