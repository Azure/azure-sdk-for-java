/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.support.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.management.support.CheckNameAvailabilityInput;
import com.microsoft.azure.management.support.ExceptionResponseException;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the MicrosoftSupportImpl class.
 */
public class MicrosoftSupportImpl extends AzureServiceClient {
    /** The Retrofit service to perform REST calls. */
    private MicrosoftSupportService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** Azure subscription id. */
    private String subscriptionId;

    /**
     * Gets Azure subscription id.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Sets Azure subscription id.
     *
     * @param subscriptionId the subscriptionId value.
     * @return the service client itself
     */
    public MicrosoftSupportImpl withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /** Api version. */
    private String apiVersion;

    /**
     * Gets Api version.
     *
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /** The preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets The preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets The preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public MicrosoftSupportImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** The retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public MicrosoftSupportImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public MicrosoftSupportImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * The OperationsInner object to access its operations.
     */
    private OperationsInner operations;

    /**
     * Gets the OperationsInner object to access its operations.
     * @return the OperationsInner object.
     */
    public OperationsInner operations() {
        return this.operations;
    }

    /**
     * The ServicesInner object to access its operations.
     */
    private ServicesInner services;

    /**
     * Gets the ServicesInner object to access its operations.
     * @return the ServicesInner object.
     */
    public ServicesInner services() {
        return this.services;
    }

    /**
     * The ProblemClassificationsInner object to access its operations.
     */
    private ProblemClassificationsInner problemClassifications;

    /**
     * Gets the ProblemClassificationsInner object to access its operations.
     * @return the ProblemClassificationsInner object.
     */
    public ProblemClassificationsInner problemClassifications() {
        return this.problemClassifications;
    }

    /**
     * The SupportTicketsInner object to access its operations.
     */
    private SupportTicketsInner supportTickets;

    /**
     * Gets the SupportTicketsInner object to access its operations.
     * @return the SupportTicketsInner object.
     */
    public SupportTicketsInner supportTickets() {
        return this.supportTickets;
    }

    /**
     * The SupportTicketSubscriptionsInner object to access its operations.
     */
    private SupportTicketSubscriptionsInner supportTicketSubscriptions;

    /**
     * Gets the SupportTicketSubscriptionsInner object to access its operations.
     * @return the SupportTicketSubscriptionsInner object.
     */
    public SupportTicketSubscriptionsInner supportTicketSubscriptions() {
        return this.supportTicketSubscriptions;
    }

    /**
     * The CommunicationsInner object to access its operations.
     */
    private CommunicationsInner communications;

    /**
     * Gets the CommunicationsInner object to access its operations.
     * @return the CommunicationsInner object.
     */
    public CommunicationsInner communications() {
        return this.communications;
    }

    /**
     * Initializes an instance of MicrosoftSupport client.
     *
     * @param credentials the management credentials for Azure
     */
    public MicrosoftSupportImpl(ServiceClientCredentials credentials) {
        this("https://management.azure.com", credentials);
    }

    /**
     * Initializes an instance of MicrosoftSupport client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    public MicrosoftSupportImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of MicrosoftSupport client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public MicrosoftSupportImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.apiVersion = "2019-05-01-preview";
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.operations = new OperationsInner(restClient().retrofit(), this);
        this.services = new ServicesInner(restClient().retrofit(), this);
        this.problemClassifications = new ProblemClassificationsInner(restClient().retrofit(), this);
        this.supportTickets = new SupportTicketsInner(restClient().retrofit(), this);
        this.supportTicketSubscriptions = new SupportTicketSubscriptionsInner(restClient().retrofit(), this);
        this.communications = new CommunicationsInner(restClient().retrofit(), this);
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s, auto-generated)", super.userAgent(), "MicrosoftSupport", "2019-05-01-preview");
    }

    private void initializeService() {
        service = restClient().retrofit().create(MicrosoftSupportService.class);
    }

    /**
     * The interface defining all the services for MicrosoftSupport to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MicrosoftSupportService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.MicrosoftSupport checkNameAvailabilityWithSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailabilityWithSubscription(@Path("subscriptionId") String subscriptionId, @Body CheckNameAvailabilityInput checkNameAvailabilityInput, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.MicrosoftSupport createSupportTicketForSubscription" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}")
        Observable<Response<ResponseBody>> createSupportTicketForSubscription(@Path("supportTicketName") String supportTicketName, @Path("subscriptionId") String subscriptionId, @Body SupportTicketDetailsInner createSupportTicketParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.MicrosoftSupport beginCreateSupportTicketForSubscription" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}")
        Observable<Response<ResponseBody>> beginCreateSupportTicketForSubscription(@Path("supportTicketName") String supportTicketName, @Path("subscriptionId") String subscriptionId, @Body SupportTicketDetailsInner createSupportTicketParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.MicrosoftSupport checkNameAvailabilityForSupportTicketCommunication" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailabilityForSupportTicketCommunication(@Path("supportTicketName") String supportTicketName, @Path("subscriptionId") String subscriptionId, @Body CheckNameAvailabilityInput checkNameAvailabilityInput, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.MicrosoftSupport createSupportTicketCommunication" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}")
        Observable<Response<ResponseBody>> createSupportTicketCommunication(@Path("supportTicketName") String supportTicketName, @Path("communicationName") String communicationName, @Path("subscriptionId") String subscriptionId, @Body CommunicationDetailsInner createCommunicationParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.support.MicrosoftSupport beginCreateSupportTicketCommunication" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}")
        Observable<Response<ResponseBody>> beginCreateSupportTicketCommunication(@Path("supportTicketName") String supportTicketName, @Path("communicationName") String communicationName, @Path("subscriptionId") String subscriptionId, @Body CommunicationDetailsInner createCommunicationParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Check the availability of a resource name.
     *
     * @param checkNameAvailabilityInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckNameAvailabilityOutputInner object if successful.
     */
    public CheckNameAvailabilityOutputInner checkNameAvailabilityWithSubscription(CheckNameAvailabilityInput checkNameAvailabilityInput) {
        return checkNameAvailabilityWithSubscriptionWithServiceResponseAsync(checkNameAvailabilityInput).toBlocking().single().body();
    }

    /**
     * Check the availability of a resource name.
     *
     * @param checkNameAvailabilityInput Input to check.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckNameAvailabilityOutputInner> checkNameAvailabilityWithSubscriptionAsync(CheckNameAvailabilityInput checkNameAvailabilityInput, final ServiceCallback<CheckNameAvailabilityOutputInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithSubscriptionWithServiceResponseAsync(checkNameAvailabilityInput), serviceCallback);
    }

    /**
     * Check the availability of a resource name.
     *
     * @param checkNameAvailabilityInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityOutputInner object
     */
    public Observable<CheckNameAvailabilityOutputInner> checkNameAvailabilityWithSubscriptionAsync(CheckNameAvailabilityInput checkNameAvailabilityInput) {
        return checkNameAvailabilityWithSubscriptionWithServiceResponseAsync(checkNameAvailabilityInput).map(new Func1<ServiceResponse<CheckNameAvailabilityOutputInner>, CheckNameAvailabilityOutputInner>() {
            @Override
            public CheckNameAvailabilityOutputInner call(ServiceResponse<CheckNameAvailabilityOutputInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check the availability of a resource name.
     *
     * @param checkNameAvailabilityInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityOutputInner object
     */
    public Observable<ServiceResponse<CheckNameAvailabilityOutputInner>> checkNameAvailabilityWithSubscriptionWithServiceResponseAsync(CheckNameAvailabilityInput checkNameAvailabilityInput) {
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (checkNameAvailabilityInput == null) {
            throw new IllegalArgumentException("Parameter checkNameAvailabilityInput is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(checkNameAvailabilityInput);
        return service.checkNameAvailabilityWithSubscription(this.subscriptionId(), checkNameAvailabilityInput, this.apiVersion(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckNameAvailabilityOutputInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckNameAvailabilityOutputInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckNameAvailabilityOutputInner> clientResponse = checkNameAvailabilityWithSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckNameAvailabilityOutputInner> checkNameAvailabilityWithSubscriptionDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<CheckNameAvailabilityOutputInner, ExceptionResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<CheckNameAvailabilityOutputInner>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupportTicketDetailsInner object if successful.
     */
    public SupportTicketDetailsInner createSupportTicketForSubscription(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters) {
        return createSupportTicketForSubscriptionWithServiceResponseAsync(supportTicketName, createSupportTicketParameters).toBlocking().last().body();
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SupportTicketDetailsInner> createSupportTicketForSubscriptionAsync(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters, final ServiceCallback<SupportTicketDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(createSupportTicketForSubscriptionWithServiceResponseAsync(supportTicketName, createSupportTicketParameters), serviceCallback);
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SupportTicketDetailsInner> createSupportTicketForSubscriptionAsync(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters) {
        return createSupportTicketForSubscriptionWithServiceResponseAsync(supportTicketName, createSupportTicketParameters).map(new Func1<ServiceResponse<SupportTicketDetailsInner>, SupportTicketDetailsInner>() {
            @Override
            public SupportTicketDetailsInner call(ServiceResponse<SupportTicketDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SupportTicketDetailsInner>> createSupportTicketForSubscriptionWithServiceResponseAsync(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (createSupportTicketParameters == null) {
            throw new IllegalArgumentException("Parameter createSupportTicketParameters is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(createSupportTicketParameters);
        Observable<Response<ResponseBody>> observable = service.createSupportTicketForSubscription(supportTicketName, this.subscriptionId(), createSupportTicketParameters, this.apiVersion(), this.acceptLanguage(), this.userAgent());
        return getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SupportTicketDetailsInner>() { }.getType());
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupportTicketDetailsInner object if successful.
     */
    public SupportTicketDetailsInner beginCreateSupportTicketForSubscription(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters) {
        return beginCreateSupportTicketForSubscriptionWithServiceResponseAsync(supportTicketName, createSupportTicketParameters).toBlocking().single().body();
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SupportTicketDetailsInner> beginCreateSupportTicketForSubscriptionAsync(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters, final ServiceCallback<SupportTicketDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateSupportTicketForSubscriptionWithServiceResponseAsync(supportTicketName, createSupportTicketParameters), serviceCallback);
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupportTicketDetailsInner object
     */
    public Observable<SupportTicketDetailsInner> beginCreateSupportTicketForSubscriptionAsync(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters) {
        return beginCreateSupportTicketForSubscriptionWithServiceResponseAsync(supportTicketName, createSupportTicketParameters).map(new Func1<ServiceResponse<SupportTicketDetailsInner>, SupportTicketDetailsInner>() {
            @Override
            public SupportTicketDetailsInner call(ServiceResponse<SupportTicketDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a support ticket for a subscription.
     * A paid support plan is required to use this API to create a support ticket. Users can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure technical services as indicated by the 'serviceId' in the request. &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues, user must set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription Management tickets**&lt;br/&gt; For issues relating to subscription management, *serviceId* should be set to *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId* to one of the technical service ids and must provide additional information in TechnicalScopingInformation. &lt;br/&gt;Users must also provide problemClassificationId when creating a support ticket.&lt;br/&gt;.
     *
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupportTicketDetailsInner object
     */
    public Observable<ServiceResponse<SupportTicketDetailsInner>> beginCreateSupportTicketForSubscriptionWithServiceResponseAsync(String supportTicketName, SupportTicketDetailsInner createSupportTicketParameters) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (createSupportTicketParameters == null) {
            throw new IllegalArgumentException("Parameter createSupportTicketParameters is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(createSupportTicketParameters);
        return service.beginCreateSupportTicketForSubscription(supportTicketName, this.subscriptionId(), createSupportTicketParameters, this.apiVersion(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SupportTicketDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<SupportTicketDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SupportTicketDetailsInner> clientResponse = beginCreateSupportTicketForSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SupportTicketDetailsInner> beginCreateSupportTicketForSubscriptionDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<SupportTicketDetailsInner, ExceptionResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<SupportTicketDetailsInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

    /**
     * Check the availability of a resource name.
     *
     * @param supportTicketName Support ticket name.
     * @param checkNameAvailabilityInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckNameAvailabilityOutputInner object if successful.
     */
    public CheckNameAvailabilityOutputInner checkNameAvailabilityForSupportTicketCommunication(String supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput) {
        return checkNameAvailabilityForSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, checkNameAvailabilityInput).toBlocking().single().body();
    }

    /**
     * Check the availability of a resource name.
     *
     * @param supportTicketName Support ticket name.
     * @param checkNameAvailabilityInput Input to check.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckNameAvailabilityOutputInner> checkNameAvailabilityForSupportTicketCommunicationAsync(String supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput, final ServiceCallback<CheckNameAvailabilityOutputInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityForSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, checkNameAvailabilityInput), serviceCallback);
    }

    /**
     * Check the availability of a resource name.
     *
     * @param supportTicketName Support ticket name.
     * @param checkNameAvailabilityInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityOutputInner object
     */
    public Observable<CheckNameAvailabilityOutputInner> checkNameAvailabilityForSupportTicketCommunicationAsync(String supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput) {
        return checkNameAvailabilityForSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, checkNameAvailabilityInput).map(new Func1<ServiceResponse<CheckNameAvailabilityOutputInner>, CheckNameAvailabilityOutputInner>() {
            @Override
            public CheckNameAvailabilityOutputInner call(ServiceResponse<CheckNameAvailabilityOutputInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check the availability of a resource name.
     *
     * @param supportTicketName Support ticket name.
     * @param checkNameAvailabilityInput Input to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityOutputInner object
     */
    public Observable<ServiceResponse<CheckNameAvailabilityOutputInner>> checkNameAvailabilityForSupportTicketCommunicationWithServiceResponseAsync(String supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (checkNameAvailabilityInput == null) {
            throw new IllegalArgumentException("Parameter checkNameAvailabilityInput is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(checkNameAvailabilityInput);
        return service.checkNameAvailabilityForSupportTicketCommunication(supportTicketName, this.subscriptionId(), checkNameAvailabilityInput, this.apiVersion(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckNameAvailabilityOutputInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckNameAvailabilityOutputInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckNameAvailabilityOutputInner> clientResponse = checkNameAvailabilityForSupportTicketCommunicationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckNameAvailabilityOutputInner> checkNameAvailabilityForSupportTicketCommunicationDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<CheckNameAvailabilityOutputInner, ExceptionResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<CheckNameAvailabilityOutputInner>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationDetailsInner object if successful.
     */
    public CommunicationDetailsInner createSupportTicketCommunication(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters) {
        return createSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, communicationName, createCommunicationParameters).toBlocking().last().body();
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationDetailsInner> createSupportTicketCommunicationAsync(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters, final ServiceCallback<CommunicationDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(createSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, communicationName, createCommunicationParameters), serviceCallback);
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CommunicationDetailsInner> createSupportTicketCommunicationAsync(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters) {
        return createSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, communicationName, createCommunicationParameters).map(new Func1<ServiceResponse<CommunicationDetailsInner>, CommunicationDetailsInner>() {
            @Override
            public CommunicationDetailsInner call(ServiceResponse<CommunicationDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<CommunicationDetailsInner>> createSupportTicketCommunicationWithServiceResponseAsync(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (communicationName == null) {
            throw new IllegalArgumentException("Parameter communicationName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (createCommunicationParameters == null) {
            throw new IllegalArgumentException("Parameter createCommunicationParameters is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(createCommunicationParameters);
        Observable<Response<ResponseBody>> observable = service.createSupportTicketCommunication(supportTicketName, communicationName, this.subscriptionId(), createCommunicationParameters, this.apiVersion(), this.acceptLanguage(), this.userAgent());
        return getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<CommunicationDetailsInner>() { }.getType());
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationDetailsInner object if successful.
     */
    public CommunicationDetailsInner beginCreateSupportTicketCommunication(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters) {
        return beginCreateSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, communicationName, createCommunicationParameters).toBlocking().single().body();
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationDetailsInner> beginCreateSupportTicketCommunicationAsync(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters, final ServiceCallback<CommunicationDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, communicationName, createCommunicationParameters), serviceCallback);
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationDetailsInner object
     */
    public Observable<CommunicationDetailsInner> beginCreateSupportTicketCommunicationAsync(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters) {
        return beginCreateSupportTicketCommunicationWithServiceResponseAsync(supportTicketName, communicationName, createCommunicationParameters).map(new Func1<ServiceResponse<CommunicationDetailsInner>, CommunicationDetailsInner>() {
            @Override
            public CommunicationDetailsInner call(ServiceResponse<CommunicationDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a support ticket communication.
     *
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationDetailsInner object
     */
    public Observable<ServiceResponse<CommunicationDetailsInner>> beginCreateSupportTicketCommunicationWithServiceResponseAsync(String supportTicketName, String communicationName, CommunicationDetailsInner createCommunicationParameters) {
        if (supportTicketName == null) {
            throw new IllegalArgumentException("Parameter supportTicketName is required and cannot be null.");
        }
        if (communicationName == null) {
            throw new IllegalArgumentException("Parameter communicationName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (createCommunicationParameters == null) {
            throw new IllegalArgumentException("Parameter createCommunicationParameters is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(createCommunicationParameters);
        return service.beginCreateSupportTicketCommunication(supportTicketName, communicationName, this.subscriptionId(), createCommunicationParameters, this.apiVersion(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationDetailsInner> clientResponse = beginCreateSupportTicketCommunicationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommunicationDetailsInner> beginCreateSupportTicketCommunicationDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<CommunicationDetailsInner, ExceptionResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<CommunicationDetailsInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

}
