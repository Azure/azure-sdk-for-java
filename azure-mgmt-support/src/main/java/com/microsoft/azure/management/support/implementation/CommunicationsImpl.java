/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.support.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.support.Communications;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.support.CommunicationDetails;

class CommunicationsImpl extends WrapperImpl<CommunicationsInner> implements Communications {
    private final SupportManager manager;

    CommunicationsImpl(SupportManager manager) {
        super(manager.inner().communications());
        this.manager = manager;
    }

    public SupportManager manager() {
        return this.manager;
    }

    private CommunicationDetailsImpl wrapModel(CommunicationDetailsInner inner) {
        return  new CommunicationDetailsImpl(inner, manager());
    }

    @Override
    public Observable<CommunicationDetails> listBySubscriptionTicketAsync(final String supportTicketName) {
        CommunicationsInner client = this.inner();
        return client.listBySubscriptionTicketAsync(supportTicketName)
        .flatMapIterable(new Func1<Page<CommunicationDetailsInner>, Iterable<CommunicationDetailsInner>>() {
            @Override
            public Iterable<CommunicationDetailsInner> call(Page<CommunicationDetailsInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CommunicationDetailsInner, CommunicationDetails>() {
            @Override
            public CommunicationDetails call(CommunicationDetailsInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CommunicationDetails> getBySubscriptionTicketAsync(String supportTicketName, String communicationName) {
        CommunicationsInner client = this.inner();
        return client.getBySubscriptionTicketAsync(supportTicketName, communicationName)
        .flatMap(new Func1<CommunicationDetailsInner, Observable<CommunicationDetails>>() {
            @Override
            public Observable<CommunicationDetails> call(CommunicationDetailsInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((CommunicationDetails)wrapModel(inner));
                }
            }
       });
    }

}
