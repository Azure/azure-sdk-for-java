/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.customerinsights.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RoleAssignments.
 */
public class RoleAssignmentsInner {
    /** The Retrofit service to perform REST calls. */
    private RoleAssignmentsService service;
    /** The service client containing this operation class. */
    private CustomerInsightsManagementClientImpl client;

    /**
     * Initializes an instance of RoleAssignmentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RoleAssignmentsInner(Retrofit retrofit, CustomerInsightsManagementClientImpl client) {
        this.service = retrofit.create(RoleAssignmentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RoleAssignments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RoleAssignmentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.RoleAssignments listByHub" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments")
        Observable<Response<ResponseBody>> listByHub(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.RoleAssignments createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("assignmentName") String assignmentName, @Path("subscriptionId") String subscriptionId, @Body RoleAssignmentResourceFormatInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.RoleAssignments beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("assignmentName") String assignmentName, @Path("subscriptionId") String subscriptionId, @Body RoleAssignmentResourceFormatInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.RoleAssignments get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("assignmentName") String assignmentName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.RoleAssignments delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("hubName") String hubName, @Path("assignmentName") String assignmentName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.customerinsights.RoleAssignments listByHubNext" })
        @GET
        Observable<Response<ResponseBody>> listByHubNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentResourceFormatInner> listByHub(final String resourceGroupName, final String hubName) {
        ServiceResponse<Page<RoleAssignmentResourceFormatInner>> response = listByHubSinglePageAsync(resourceGroupName, hubName).toBlocking().single();
        return new PagedList<RoleAssignmentResourceFormatInner>(response.body()) {
            @Override
            public Page<RoleAssignmentResourceFormatInner> nextPage(String nextPageLink) {
                return listByHubNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RoleAssignmentResourceFormatInner>> listByHubAsync(final String resourceGroupName, final String hubName, final ListOperationCallback<RoleAssignmentResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByHubSinglePageAsync(resourceGroupName, hubName),
            new Func1<String, Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> call(String nextPageLink) {
                    return listByHubNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object
     */
    public Observable<Page<RoleAssignmentResourceFormatInner>> listByHubAsync(final String resourceGroupName, final String hubName) {
        return listByHubWithServiceResponseAsync(resourceGroupName, hubName)
            .map(new Func1<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>, Page<RoleAssignmentResourceFormatInner>>() {
                @Override
                public Page<RoleAssignmentResourceFormatInner> call(ServiceResponse<Page<RoleAssignmentResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> listByHubWithServiceResponseAsync(final String resourceGroupName, final String hubName) {
        return listByHubSinglePageAsync(resourceGroupName, hubName)
            .concatMap(new Func1<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>, Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> call(ServiceResponse<Page<RoleAssignmentResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByHubNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
    ServiceResponse<PageImpl<RoleAssignmentResourceFormatInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<RoleAssignmentResourceFormatInner>> * @param hubName The name of the hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> listByHubSinglePageAsync(final String resourceGroupName, final String hubName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByHub(resourceGroupName, hubName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RoleAssignmentResourceFormatInner>> result = listByHubDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RoleAssignmentResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RoleAssignmentResourceFormatInner>> listByHubDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RoleAssignmentResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RoleAssignmentResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RoleAssignmentResourceFormatInner object if successful.
     */
    public RoleAssignmentResourceFormatInner createOrUpdate(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, assignmentName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RoleAssignmentResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters, final ServiceCallback<RoleAssignmentResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, assignmentName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RoleAssignmentResourceFormatInner> createOrUpdateAsync(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, assignmentName, parameters).map(new Func1<ServiceResponse<RoleAssignmentResourceFormatInner>, RoleAssignmentResourceFormatInner>() {
            @Override
            public RoleAssignmentResourceFormatInner call(ServiceResponse<RoleAssignmentResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RoleAssignmentResourceFormatInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (assignmentName == null) {
            throw new IllegalArgumentException("Parameter assignmentName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, hubName, assignmentName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<RoleAssignmentResourceFormatInner>() { }.getType());
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RoleAssignmentResourceFormatInner object if successful.
     */
    public RoleAssignmentResourceFormatInner beginCreateOrUpdate(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, assignmentName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RoleAssignmentResourceFormatInner> beginCreateOrUpdateAsync(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters, final ServiceCallback<RoleAssignmentResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, assignmentName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleAssignmentResourceFormatInner object
     */
    public Observable<RoleAssignmentResourceFormatInner> beginCreateOrUpdateAsync(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, hubName, assignmentName, parameters).map(new Func1<ServiceResponse<RoleAssignmentResourceFormatInner>, RoleAssignmentResourceFormatInner>() {
            @Override
            public RoleAssignmentResourceFormatInner call(ServiceResponse<RoleAssignmentResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleAssignmentResourceFormatInner object
     */
    public Observable<ServiceResponse<RoleAssignmentResourceFormatInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String hubName, String assignmentName, RoleAssignmentResourceFormatInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (assignmentName == null) {
            throw new IllegalArgumentException("Parameter assignmentName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(resourceGroupName, hubName, assignmentName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RoleAssignmentResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<RoleAssignmentResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RoleAssignmentResourceFormatInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RoleAssignmentResourceFormatInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RoleAssignmentResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RoleAssignmentResourceFormatInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RoleAssignmentResourceFormatInner object if successful.
     */
    public RoleAssignmentResourceFormatInner get(String resourceGroupName, String hubName, String assignmentName) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, assignmentName).toBlocking().single().body();
    }

    /**
     * Gets the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RoleAssignmentResourceFormatInner> getAsync(String resourceGroupName, String hubName, String assignmentName, final ServiceCallback<RoleAssignmentResourceFormatInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, hubName, assignmentName), serviceCallback);
    }

    /**
     * Gets the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleAssignmentResourceFormatInner object
     */
    public Observable<RoleAssignmentResourceFormatInner> getAsync(String resourceGroupName, String hubName, String assignmentName) {
        return getWithServiceResponseAsync(resourceGroupName, hubName, assignmentName).map(new Func1<ServiceResponse<RoleAssignmentResourceFormatInner>, RoleAssignmentResourceFormatInner>() {
            @Override
            public RoleAssignmentResourceFormatInner call(ServiceResponse<RoleAssignmentResourceFormatInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleAssignmentResourceFormatInner object
     */
    public Observable<ServiceResponse<RoleAssignmentResourceFormatInner>> getWithServiceResponseAsync(String resourceGroupName, String hubName, String assignmentName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (assignmentName == null) {
            throw new IllegalArgumentException("Parameter assignmentName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, hubName, assignmentName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RoleAssignmentResourceFormatInner>>>() {
                @Override
                public Observable<ServiceResponse<RoleAssignmentResourceFormatInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RoleAssignmentResourceFormatInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RoleAssignmentResourceFormatInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RoleAssignmentResourceFormatInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RoleAssignmentResourceFormatInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String hubName, String assignmentName) {
        deleteWithServiceResponseAsync(resourceGroupName, hubName, assignmentName).toBlocking().single().body();
    }

    /**
     * Deletes the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String hubName, String assignmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, hubName, assignmentName), serviceCallback);
    }

    /**
     * Deletes the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String hubName, String assignmentName) {
        return deleteWithServiceResponseAsync(resourceGroupName, hubName, assignmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the role assignment in the hub.
     *
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String hubName, String assignmentName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hubName == null) {
            throw new IllegalArgumentException("Parameter hubName is required and cannot be null.");
        }
        if (assignmentName == null) {
            throw new IllegalArgumentException("Parameter assignmentName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, hubName, assignmentName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentResourceFormatInner> listByHubNext(final String nextPageLink) {
        ServiceResponse<Page<RoleAssignmentResourceFormatInner>> response = listByHubNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RoleAssignmentResourceFormatInner>(response.body()) {
            @Override
            public Page<RoleAssignmentResourceFormatInner> nextPage(String nextPageLink) {
                return listByHubNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RoleAssignmentResourceFormatInner>> listByHubNextAsync(final String nextPageLink, final ServiceFuture<List<RoleAssignmentResourceFormatInner>> serviceFuture, final ListOperationCallback<RoleAssignmentResourceFormatInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByHubNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> call(String nextPageLink) {
                    return listByHubNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object
     */
    public Observable<Page<RoleAssignmentResourceFormatInner>> listByHubNextAsync(final String nextPageLink) {
        return listByHubNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>, Page<RoleAssignmentResourceFormatInner>>() {
                @Override
                public Page<RoleAssignmentResourceFormatInner> call(ServiceResponse<Page<RoleAssignmentResourceFormatInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object
     */
    public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> listByHubNextWithServiceResponseAsync(final String nextPageLink) {
        return listByHubNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>, Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> call(ServiceResponse<Page<RoleAssignmentResourceFormatInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByHubNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the role assignments for the specified hub.
     *
    ServiceResponse<PageImpl<RoleAssignmentResourceFormatInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RoleAssignmentResourceFormatInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> listByHubNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByHubNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleAssignmentResourceFormatInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RoleAssignmentResourceFormatInner>> result = listByHubNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RoleAssignmentResourceFormatInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RoleAssignmentResourceFormatInner>> listByHubNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RoleAssignmentResourceFormatInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RoleAssignmentResourceFormatInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
