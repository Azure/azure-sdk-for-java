/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.streamanalytics.v2016_03_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Outputs;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.ResourceTestStatus;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Output;

class OutputsImpl extends WrapperImpl<OutputsInner> implements Outputs {
    private final StreamAnalyticsManager manager;

    OutputsImpl(StreamAnalyticsManager manager) {
        super(manager.inner().outputs());
        this.manager = manager;
    }

    public StreamAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public OutputImpl define(String name) {
        return new OutputImpl(name, this.manager());
    }

    private OutputImpl wrapModel(OutputInner inner) {
        return  new OutputImpl(inner, manager());
    }

    @Override
    public Observable<ResourceTestStatus> testAsync(String resourceGroupName, String jobName, String outputName) {
        OutputsInner client = this.inner();
        return client.testAsync(resourceGroupName, jobName, outputName)
        .map(new Func1<ResourceTestStatusInner, ResourceTestStatus>() {
            @Override
            public ResourceTestStatus call(ResourceTestStatusInner inner) {
                return new ResourceTestStatusImpl(inner, manager());
            }
        });
    }

    private Observable<Page<OutputInner>> listByStreamingjobNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        OutputsInner client = this.inner();
        return client.listByStreamingJobNextAsync(nextLink)
        .flatMap(new Func1<Page<OutputInner>, Observable<Page<OutputInner>>>() {
            @Override
            public Observable<Page<OutputInner>> call(Page<OutputInner> page) {
                return Observable.just(page).concatWith(listByStreamingjobNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Output> listByStreamingjobAsync(final String resourceGroupName, final String jobName) {
        OutputsInner client = this.inner();
        return client.listByStreamingJobAsync(resourceGroupName, jobName)
        .flatMap(new Func1<Page<OutputInner>, Observable<Page<OutputInner>>>() {
            @Override
            public Observable<Page<OutputInner>> call(Page<OutputInner> page) {
                return listByStreamingjobNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<OutputInner>, Iterable<OutputInner>>() {
            @Override
            public Iterable<OutputInner> call(Page<OutputInner> page) {
                return page.items();
            }
       })
        .map(new Func1<OutputInner, Output>() {
            @Override
            public Output call(OutputInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Observable<Output> getByStreamingjobAsync(String resourceGroupName, String jobName, String outputName) {
        OutputsInner client = this.inner();
        return client.getAsync(resourceGroupName, jobName, outputName)
        .map(new Func1<OutputInner, Output>() {
            @Override
            public Output call(OutputInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteByStreamingjobAsync(String resourceGroupName, String jobName, String outputName) {
        OutputsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, jobName, outputName).toCompletable();
    }

}
