/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.job;

import com.microsoft.azure.CloudException;
import com.microsoft.azure.hdinsight.job.models.AppState;
import com.microsoft.azure.hdinsight.job.models.JobDetailRootJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobListJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobOperationsErrorResponseException;
import com.microsoft.azure.hdinsight.job.models.JobSubmissionJsonResponse;
import com.microsoft.azure.hdinsight.job.models.SparkBatchJob;
import com.microsoft.azure.hdinsight.job.models.SparkBatchJobCollection;
import com.microsoft.azure.hdinsight.job.models.SparkBatchJobRequest;
import com.microsoft.azure.hdinsight.job.models.SparkJobDeletedResult;
import com.microsoft.azure.hdinsight.job.models.SparkJobLog;
import com.microsoft.azure.hdinsight.job.models.SparkJobState;
import com.microsoft.azure.hdinsight.job.models.SparkSessionCollection;
import com.microsoft.azure.hdinsight.job.models.SparkSessionJob;
import com.microsoft.azure.hdinsight.job.models.SparkSessionJobRequest;
import com.microsoft.azure.hdinsight.job.models.SparkStatement;
import com.microsoft.azure.hdinsight.job.models.SparkStatementCancellationResult;
import com.microsoft.azure.hdinsight.job.models.SparkStatementCollection;
import com.microsoft.azure.hdinsight.job.models.SparkStatementRequest;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public interface Jobs {
    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    JobDetailRootJsonObject get(String jobId);

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobDetailRootJsonObject> getAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback);

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<JobDetailRootJsonObject> getAsync(String jobId);

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<ServiceResponse<JobDetailRootJsonObject>> getWithServiceResponseAsync(String jobId);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    JobDetailRootJsonObject kill(String jobId);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobDetailRootJsonObject> killAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<JobDetailRootJsonObject> killAsync(String jobId);

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    Observable<ServiceResponse<JobDetailRootJsonObject>> killWithServiceResponseAsync(String jobId);

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    List<JobListJsonObject> list();

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<JobListJsonObject>> listAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback);

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<List<JobListJsonObject>> listAsync();

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<ServiceResponse<List<JobListJsonObject>>> listWithServiceResponseAsync();

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    List<JobListJsonObject> listAfterJobId();

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<List<JobListJsonObject>> listAfterJobIdAsync();

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync();
    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    List<JobListJsonObject> listAfterJobId(String jobid, Integer numrecords);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords, final ServiceCallback<List<JobListJsonObject>> serviceCallback);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords);

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync(String jobid, Integer numrecords);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitHiveJob(byte[] content);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content);

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitHiveJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitMapReduceJob(byte[] content);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content);

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitMapReduceStreamingJob(byte[] content);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content);

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceStreamingJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitPigJob(byte[] content);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content);

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitPigJobWithServiceResponseAsync(byte[] content);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    JobSubmissionJsonResponse submitSqoopJob(byte[] content);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content);

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    Observable<ServiceResponse<JobSubmissionJsonResponse>> submitSqoopJobWithServiceResponseAsync(byte[] content);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AppState object if successful.
     */
    AppState getAppState(String appId);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AppState> getAppStateAsync(String appId, final ServiceCallback<AppState> serviceCallback);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    Observable<AppState> getAppStateAsync(String appId);

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    Observable<ServiceResponse<AppState>> getAppStateWithServiceResponseAsync(String appId);

    /**
     * List all spark batch jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJobCollection object if successful.
     */
    SparkBatchJobCollection listSparkBatchJob();

    /**
     * List all spark batch jobs.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkBatchJobCollection> listSparkBatchJobAsync(final ServiceCallback<SparkBatchJobCollection> serviceCallback);

    /**
     * List all spark batch jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    Observable<SparkBatchJobCollection> listSparkBatchJobAsync();

    /**
     * List all spark batch jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    Observable<ServiceResponse<SparkBatchJobCollection>> listSparkBatchJobWithServiceResponseAsync();
    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJobCollection object if successful.
     */
    SparkBatchJobCollection listSparkBatchJob(Integer from, Integer size);

    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkBatchJobCollection> listSparkBatchJobAsync(Integer from, Integer size, final ServiceCallback<SparkBatchJobCollection> serviceCallback);

    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    Observable<SparkBatchJobCollection> listSparkBatchJobAsync(Integer from, Integer size);

    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    Observable<ServiceResponse<SparkBatchJobCollection>> listSparkBatchJobWithServiceResponseAsync(Integer from, Integer size);

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJob object if successful.
     */
    SparkBatchJob submitSparkBatchJob(SparkBatchJobRequest sparkBatchJobRequest);

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest, final ServiceCallback<SparkBatchJob> serviceCallback);

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    Observable<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest);

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    Observable<ServiceResponse<SparkBatchJob>> submitSparkBatchJobWithServiceResponseAsync(SparkBatchJobRequest sparkBatchJobRequest);
    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJob object if successful.
     */
    SparkBatchJob submitSparkBatchJob(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy);

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy, final ServiceCallback<SparkBatchJob> serviceCallback);

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    Observable<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy);

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    Observable<ServiceResponse<SparkBatchJob>> submitSparkBatchJobWithServiceResponseAsync(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy);

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJob object if successful.
     */
    SparkBatchJob getSparkBatchJob(int batchId);

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkBatchJob> getSparkBatchJobAsync(int batchId, final ServiceCallback<SparkBatchJob> serviceCallback);

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    Observable<SparkBatchJob> getSparkBatchJobAsync(int batchId);

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    Observable<ServiceResponse<SparkBatchJob>> getSparkBatchJobWithServiceResponseAsync(int batchId);

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    SparkJobDeletedResult deleteSparkBatch(int batchId);

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId, final ServiceCallback<SparkJobDeletedResult> serviceCallback);

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId);

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkBatchWithServiceResponseAsync(int batchId);
    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    SparkJobDeletedResult deleteSparkBatch(int batchId, String requestedBy);

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId, String requestedBy, final ServiceCallback<SparkJobDeletedResult> serviceCallback);

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId, String requestedBy);

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkBatchWithServiceResponseAsync(int batchId, String requestedBy);

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    SparkJobLog getSparkBatchLog(int batchId);

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobLog> getSparkBatchLogAsync(int batchId, final ServiceCallback<SparkJobLog> serviceCallback);

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<SparkJobLog> getSparkBatchLogAsync(int batchId);

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<ServiceResponse<SparkJobLog>> getSparkBatchLogWithServiceResponseAsync(int batchId);
    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    SparkJobLog getSparkBatchLog(int batchId, Integer from, Integer size);

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobLog> getSparkBatchLogAsync(int batchId, Integer from, Integer size, final ServiceCallback<SparkJobLog> serviceCallback);

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<SparkJobLog> getSparkBatchLogAsync(int batchId, Integer from, Integer size);

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<ServiceResponse<SparkJobLog>> getSparkBatchLogWithServiceResponseAsync(int batchId, Integer from, Integer size);

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobState object if successful.
     */
    SparkJobState getSparkBatchState(int batchId);

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobState> getSparkBatchStateAsync(int batchId, final ServiceCallback<SparkJobState> serviceCallback);

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    Observable<SparkJobState> getSparkBatchStateAsync(int batchId);

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    Observable<ServiceResponse<SparkJobState>> getSparkBatchStateWithServiceResponseAsync(int batchId);

    /**
     * List all spark sessions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionCollection object if successful.
     */
    SparkSessionCollection listSparkSessionJob();

    /**
     * List all spark sessions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkSessionCollection> listSparkSessionJobAsync(final ServiceCallback<SparkSessionCollection> serviceCallback);

    /**
     * List all spark sessions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    Observable<SparkSessionCollection> listSparkSessionJobAsync();

    /**
     * List all spark sessions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    Observable<ServiceResponse<SparkSessionCollection>> listSparkSessionJobWithServiceResponseAsync();
    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionCollection object if successful.
     */
    SparkSessionCollection listSparkSessionJob(Integer from, Integer size);

    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkSessionCollection> listSparkSessionJobAsync(Integer from, Integer size, final ServiceCallback<SparkSessionCollection> serviceCallback);

    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    Observable<SparkSessionCollection> listSparkSessionJobAsync(Integer from, Integer size);

    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    Observable<ServiceResponse<SparkSessionCollection>> listSparkSessionJobWithServiceResponseAsync(Integer from, Integer size);

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionJob object if successful.
     */
    SparkSessionJob submitSparkSessionJob(SparkSessionJobRequest sparkSessionJobRequest);

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest, final ServiceCallback<SparkSessionJob> serviceCallback);

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    Observable<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest);

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    Observable<ServiceResponse<SparkSessionJob>> submitSparkSessionJobWithServiceResponseAsync(SparkSessionJobRequest sparkSessionJobRequest);
    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionJob object if successful.
     */
    SparkSessionJob submitSparkSessionJob(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy);

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy, final ServiceCallback<SparkSessionJob> serviceCallback);

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    Observable<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy);

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    Observable<ServiceResponse<SparkSessionJob>> submitSparkSessionJobWithServiceResponseAsync(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy);

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionJob object if successful.
     */
    SparkSessionJob getSparkSessionJob(int sessionId);

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkSessionJob> getSparkSessionJobAsync(int sessionId, final ServiceCallback<SparkSessionJob> serviceCallback);

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    Observable<SparkSessionJob> getSparkSessionJobAsync(int sessionId);

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    Observable<ServiceResponse<SparkSessionJob>> getSparkSessionJobWithServiceResponseAsync(int sessionId);

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    SparkJobDeletedResult deleteSparkSessionJob(int sessionId);

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId, final ServiceCallback<SparkJobDeletedResult> serviceCallback);

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId);

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkSessionJobWithServiceResponseAsync(int sessionId);
    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    SparkJobDeletedResult deleteSparkSessionJob(int sessionId, String requestedBy);

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId, String requestedBy, final ServiceCallback<SparkJobDeletedResult> serviceCallback);

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId, String requestedBy);

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkSessionJobWithServiceResponseAsync(int sessionId, String requestedBy);

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    SparkJobLog getSparkSessionLog(int sessionId);

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobLog> getSparkSessionLogAsync(int sessionId, final ServiceCallback<SparkJobLog> serviceCallback);

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<SparkJobLog> getSparkSessionLogAsync(int sessionId);

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<ServiceResponse<SparkJobLog>> getSparkSessionLogWithServiceResponseAsync(int sessionId);
    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    SparkJobLog getSparkSessionLog(int sessionId, Integer from, Integer size);

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobLog> getSparkSessionLogAsync(int sessionId, Integer from, Integer size, final ServiceCallback<SparkJobLog> serviceCallback);

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<SparkJobLog> getSparkSessionLogAsync(int sessionId, Integer from, Integer size);

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    Observable<ServiceResponse<SparkJobLog>> getSparkSessionLogWithServiceResponseAsync(int sessionId, Integer from, Integer size);

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobState object if successful.
     */
    SparkJobState getSparkSessionState(int sessionId);

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkJobState> getSparkSessionStateAsync(int sessionId, final ServiceCallback<SparkJobState> serviceCallback);

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    Observable<SparkJobState> getSparkSessionStateAsync(int sessionId);

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    Observable<ServiceResponse<SparkJobState>> getSparkSessionStateWithServiceResponseAsync(int sessionId);

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatementCollection object if successful.
     */
    SparkStatementCollection listSparkStatementJob(int sessionId);

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkStatementCollection> listSparkStatementJobAsync(int sessionId, final ServiceCallback<SparkStatementCollection> serviceCallback);

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCollection object
     */
    Observable<SparkStatementCollection> listSparkStatementJobAsync(int sessionId);

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCollection object
     */
    Observable<ServiceResponse<SparkStatementCollection>> listSparkStatementJobWithServiceResponseAsync(int sessionId);

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatement object if successful.
     */
    SparkStatement submitSparkStatementJob(int sessionId, SparkStatementRequest sparkStatementRequest);

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest, final ServiceCallback<SparkStatement> serviceCallback);

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    Observable<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest);

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    Observable<ServiceResponse<SparkStatement>> submitSparkStatementJobWithServiceResponseAsync(int sessionId, SparkStatementRequest sparkStatementRequest);
    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatement object if successful.
     */
    SparkStatement submitSparkStatementJob(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy);

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy, final ServiceCallback<SparkStatement> serviceCallback);

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    Observable<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy);

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    Observable<ServiceResponse<SparkStatement>> submitSparkStatementJobWithServiceResponseAsync(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy);

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatement object if successful.
     */
    SparkStatement getSparkStatementJob(int sessionId, int statementId);

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkStatement> getSparkStatementJobAsync(int sessionId, int statementId, final ServiceCallback<SparkStatement> serviceCallback);

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    Observable<SparkStatement> getSparkStatementJobAsync(int sessionId, int statementId);

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    Observable<ServiceResponse<SparkStatement>> getSparkStatementJobWithServiceResponseAsync(int sessionId, int statementId);

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatementCancellationResult object if successful.
     */
    SparkStatementCancellationResult deleteSparkStatementJob(int sessionId, int statementId);

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId, final ServiceCallback<SparkStatementCancellationResult> serviceCallback);

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    Observable<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId);

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    Observable<ServiceResponse<SparkStatementCancellationResult>> deleteSparkStatementJobWithServiceResponseAsync(int sessionId, int statementId);
    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatementCancellationResult object if successful.
     */
    SparkStatementCancellationResult deleteSparkStatementJob(int sessionId, int statementId, String requestedBy);

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId, String requestedBy, final ServiceCallback<SparkStatementCancellationResult> serviceCallback);

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    Observable<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId, String requestedBy);

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    Observable<ServiceResponse<SparkStatementCancellationResult>> deleteSparkStatementJobWithServiceResponseAsync(int sessionId, int statementId, String requestedBy);

}
